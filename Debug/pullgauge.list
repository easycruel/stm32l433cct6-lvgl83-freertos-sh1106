
pullgauge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e048  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024c8  0801e1d8  0801e1d8  0002e1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080206a0  080206a0  000400bc  2**0
                  CONTENTS
  4 .ARM          00000008  080206a0  080206a0  000306a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080206a8  080206a8  000400bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080206a8  080206a8  000306a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080206ac  080206ac  000306ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080206b0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000881c  200000bc  0802076c  000400bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200088d8  0802076c  000488d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000f6067  00000000  00000000  000400ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000197d8  00000000  00000000  00136153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00074493  00000000  00000000  0014f92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000045b8  00000000  00000000  001c3dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000dc68  00000000  00000000  001c8378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001be82  00000000  00000000  001d5fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000aba19  00000000  00000000  001f1e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f0a2  00000000  00000000  0029d87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  003ac91d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d998  00000000  00000000  003ac970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000bc 	.word	0x200000bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e1c0 	.word	0x0801e1c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	0801e1c0 	.word	0x0801e1c0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <set_px_cb>:

#define BIT_SET(a,b) ((a) |= (1U<<(b)))
#define BIT_CLEAR(a,b) ((a) &= ~(1U<<(b)))

void set_px_cb(lv_disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
            lv_color_t color, lv_opa_t opa) {
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
  uint16_t byte_index = x + (( y>>3 ) * buf_w);
 80004fe:	10c4      	asrs	r4, r0, #3
 8000500:	fb04 3302 	mla	r3, r4, r2, r3
  uint8_t  bit_index  = y & 0x7;
  // == 0 inverts, so we get blue on black
  if ( color.full == 0 ) {
    BIT_SET( buf[ byte_index ] , bit_index );
 8000504:	f000 0407 	and.w	r4, r0, #7
 8000508:	2001      	movs	r0, #1
 800050a:	40a0      	lsls	r0, r4
 800050c:	b29b      	uxth	r3, r3
  if ( color.full == 0 ) {
 800050e:	f89d 400c 	ldrb.w	r4, [sp, #12]
    BIT_SET( buf[ byte_index ] , bit_index );
 8000512:	5cca      	ldrb	r2, [r1, r3]
 8000514:	b2c0      	uxtb	r0, r0
  if ( color.full == 0 ) {
 8000516:	b914      	cbnz	r4, 800051e <set_px_cb+0x26>
    BIT_SET( buf[ byte_index ] , bit_index );
 8000518:	4302      	orrs	r2, r0
  }
  else {
    BIT_CLEAR( buf[ byte_index ] , bit_index );
 800051a:	54ca      	strb	r2, [r1, r3]
  }
}
 800051c:	bd10      	pop	{r4, pc}
    BIT_CLEAR( buf[ byte_index ] , bit_index );
 800051e:	ea22 0200 	bic.w	r2, r2, r0
 8000522:	e7fa      	b.n	800051a <set_px_cb+0x22>

08000524 <rounder_cb>:

void rounder_cb(lv_disp_drv_t * disp_drv, lv_area_t *area) {
  area->y1 = (area->y1 & (~0x7));
 8000524:	884b      	ldrh	r3, [r1, #2]
 8000526:	f023 0307 	bic.w	r3, r3, #7
 800052a:	804b      	strh	r3, [r1, #2]
  area->y2 = (area->y2 & (~0x7)) + 7;
 800052c:	88cb      	ldrh	r3, [r1, #6]
 800052e:	f043 0307 	orr.w	r3, r3, #7
 8000532:	80cb      	strh	r3, [r1, #6]
}
 8000534:	4770      	bx	lr

08000536 <set_angle>:
    lv_arc_set_value(obj, v);
 8000536:	b209      	sxth	r1, r1
 8000538:	f015 baa0 	b.w	8015a7c <lv_arc_set_value>

0800053c <LVGLTimer>:
{
 800053c:	b508      	push	{r3, lr}
    lv_timer_handler();
 800053e:	f014 f83b 	bl	80145b8 <lv_timer_handler>
    osDelay(20);
 8000542:	2014      	movs	r0, #20
 8000544:	f01c f859 	bl	801c5fa <osDelay>
  for(;;)
 8000548:	e7f9      	b.n	800053e <LVGLTimer+0x2>

0800054a <flush_cb>:
    lv_color_t *color_p) {
 800054a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t row1 = area->y1 >> 3;
 800054e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  uint8_t row2 = area->y2 >> 3;
 8000552:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
    lv_color_t *color_p) {
 8000556:	4607      	mov	r7, r0
 8000558:	460e      	mov	r6, r1
 800055a:	4614      	mov	r4, r2
  uint8_t row1 = area->y1 >> 3;
 800055c:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  uint8_t row2 = area->y2 >> 3;
 8000560:	f3c8 08c7 	ubfx	r8, r8, #3, #8
  for (uint8_t row = row1; row <= row2; row++) {
 8000564:	4545      	cmp	r5, r8
 8000566:	d904      	bls.n	8000572 <flush_cb+0x28>
  lv_disp_flush_ready(disp_drv);
 8000568:	4638      	mov	r0, r7
}
 800056a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  lv_disp_flush_ready(disp_drv);
 800056e:	f011 bf2d 	b.w	80123cc <lv_disp_flush_ready>
    OLED_Set_Pos(area->x1, row);
 8000572:	7830      	ldrb	r0, [r6, #0]
 8000574:	4629      	mov	r1, r5
 8000576:	f000 fa31 	bl	80009dc <OLED_Set_Pos>
    for (uint16_t x = area->x1; x <= area->x2; x++) {
 800057a:	f8b6 9000 	ldrh.w	r9, [r6]
 800057e:	eba9 0904 	sub.w	r9, r9, r4
 8000582:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 8000586:	eb04 0309 	add.w	r3, r4, r9
 800058a:	b29b      	uxth	r3, r3
 800058c:	4293      	cmp	r3, r2
 800058e:	dd02      	ble.n	8000596 <flush_cb+0x4c>
  for (uint8_t row = row1; row <= row2; row++) {
 8000590:	3501      	adds	r5, #1
 8000592:	b2ed      	uxtb	r5, r5
 8000594:	e7e6      	b.n	8000564 <flush_cb+0x1a>
      OLED_WR_Byte(*buf, 1);
 8000596:	f814 0b01 	ldrb.w	r0, [r4], #1
 800059a:	2101      	movs	r1, #1
 800059c:	f000 fa00 	bl	80009a0 <OLED_WR_Byte>
    for (uint16_t x = area->x1; x <= area->x2; x++) {
 80005a0:	e7ef      	b.n	8000582 <flush_cb+0x38>

080005a2 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005a2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  //https://github.com/mnemocron/STM32-Tutorial/blob/master/STM32%20Tutorial%2002%20-%20PWM%20Generation%20using%20HAL%20(and%20FreeRTOS).pdf
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80005a4:	2102      	movs	r1, #2
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f001 f872 	bl	8001692 <HAL_GPIO_TogglePin>
    osDelay(500);
 80005ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b2:	f01c f822 	bl	801c5fa <osDelay>
  for(;;)
 80005b6:	e7f5      	b.n	80005a4 <StartDefaultTask+0x2>

080005b8 <lv_example_arc_2>:
{
 80005b8:	b510      	push	{r4, lr}
 80005ba:	b092      	sub	sp, #72	; 0x48
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
 80005bc:	f011 fed2 	bl	8012364 <lv_disp_get_default>
 80005c0:	f002 fcff 	bl	8002fc2 <lv_disp_get_scr_act>
    lv_obj_t * arc = lv_arc_create(lv_scr_act());
 80005c4:	f015 f8d6 	bl	8015774 <lv_arc_create>
    lv_arc_set_rotation(arc, 270);
 80005c8:	f44f 7187 	mov.w	r1, #270	; 0x10e
    lv_obj_t * arc = lv_arc_create(lv_scr_act());
 80005cc:	4604      	mov	r4, r0
    lv_arc_set_rotation(arc, 270);
 80005ce:	f015 fa52 	bl	8015a76 <lv_arc_set_rotation>
    lv_arc_set_bg_angles(arc, 0, 360);
 80005d2:	4620      	mov	r0, r4
 80005d4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80005d8:	2100      	movs	r1, #0
 80005da:	f015 fa40 	bl	8015a5e <lv_arc_set_bg_angles>
    lv_obj_remove_style(arc, NULL, LV_PART_KNOB);   /*Be sure the knob is not displayed*/
 80005de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005e2:	4620      	mov	r0, r4
 80005e4:	2100      	movs	r1, #0
 80005e6:	f007 f9f9 	bl	80079dc <lv_obj_remove_style>
    lv_obj_clear_flag(arc, LV_OBJ_FLAG_CLICKABLE);  /*To not allow adjusting by click*/
 80005ea:	4620      	mov	r0, r4
 80005ec:	2102      	movs	r1, #2
 80005ee:	f003 fcce 	bl	8003f8e <lv_obj_clear_flag>
    lv_obj_set_size(arc,60,30);
 80005f2:	4620      	mov	r0, r4
 80005f4:	221e      	movs	r2, #30
 80005f6:	213c      	movs	r1, #60	; 0x3c
 80005f8:	f004 fc03 	bl	8004e02 <lv_obj_set_size>
 * @param obj       pointer to an object to align
 * @note            if the parent size changes `obj` needs to be aligned manually again
 */
static inline void lv_obj_center(struct _lv_obj_t * obj)
{
    lv_obj_align(obj, LV_ALIGN_CENTER, 0, 0);
 80005fc:	2300      	movs	r3, #0
 80005fe:	461a      	mov	r2, r3
 8000600:	2109      	movs	r1, #9
 8000602:	4620      	mov	r0, r4
 8000604:	f004 fc58 	bl	8004eb8 <lv_obj_align>
    lv_anim_init(&a);
 8000608:	a801      	add	r0, sp, #4
 800060a:	f012 f807 	bl	801261c <lv_anim_init>
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <lv_example_arc_2+0x84>)
 8000610:	9302      	str	r3, [sp, #8]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
    a->time = duration;
 8000612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000616:	930c      	str	r3, [sp, #48]	; 0x30
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 8000618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
 8000620:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000624:	9310      	str	r3, [sp, #64]	; 0x40
    a->start_value = start;
 8000626:	2300      	movs	r3, #0
    a->current_value = start;
 8000628:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    lv_anim_start(&a);
 800062c:	a801      	add	r0, sp, #4
    a->end_value = end;
 800062e:	2364      	movs	r3, #100	; 0x64
    a->var = var;
 8000630:	9401      	str	r4, [sp, #4]
    a->end_value = end;
 8000632:	930b      	str	r3, [sp, #44]	; 0x2c
 8000634:	f012 f83c 	bl	80126b0 <lv_anim_start>
}
 8000638:	b012      	add	sp, #72	; 0x48
 800063a:	bd10      	pop	{r4, pc}
 800063c:	08000537 	.word	0x08000537

08000640 <SystemClock_Config>:
{
 8000640:	b530      	push	{r4, r5, lr}
 8000642:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000644:	2244      	movs	r2, #68	; 0x44
 8000646:	2100      	movs	r1, #0
 8000648:	a805      	add	r0, sp, #20
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064a:	2514      	movs	r5, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064c:	f01d fce6 	bl	801e01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	462a      	mov	r2, r5
 8000652:	2100      	movs	r1, #0
 8000654:	4668      	mov	r0, sp
 8000656:	f01d fce1 	bl	801e01c <memset>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065e:	f001 f8cd 	bl	80017fc <HAL_PWREx_ControlVoltageScaling>
 8000662:	4604      	mov	r4, r0
 8000664:	b108      	cbz	r0, 800066a <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000666:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000668:	e7fe      	b.n	8000668 <SystemClock_Config+0x28>
  HAL_PWR_EnableBkUpAccess();
 800066a:	f001 f8b7 	bl	80017dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800066e:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <SystemClock_Config+0x90>)
 8000670:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000674:	f023 0318 	bic.w	r3, r3, #24
 8000678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800067c:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800067e:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000680:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000684:	2028      	movs	r0, #40	; 0x28
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000686:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800068a:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800068e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000690:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000692:	2307      	movs	r3, #7
 8000694:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069a:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800069e:	9505      	str	r5, [sp, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f001 f972 	bl	8001988 <HAL_RCC_OscConfig>
 80006a4:	b108      	cbz	r0, 80006aa <SystemClock_Config+0x6a>
 80006a6:	b672      	cpsid	i
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <SystemClock_Config+0x68>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	220f      	movs	r2, #15
 80006b0:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b4:	2104      	movs	r1, #4
 80006b6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006bc:	f001 fc08 	bl	8001ed0 <HAL_RCC_ClockConfig>
 80006c0:	b108      	cbz	r0, 80006c6 <SystemClock_Config+0x86>
 80006c2:	b672      	cpsid	i
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <SystemClock_Config+0x84>
  HAL_RCCEx_EnableMSIPLLMode();
 80006c6:	f001 fef1 	bl	80024ac <HAL_RCCEx_EnableMSIPLLMode>
}
 80006ca:	b017      	add	sp, #92	; 0x5c
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000

080006d4 <main>:
{
 80006d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006d8:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 80006da:	f000 fbea 	bl	8000eb2 <HAL_Init>
  SystemClock_Config();
 80006de:	f7ff ffaf 	bl	8000640 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	2214      	movs	r2, #20
 80006e4:	2100      	movs	r1, #0
 80006e6:	a804      	add	r0, sp, #16
 80006e8:	f01d fc98 	bl	801e01c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ec:	4b8b      	ldr	r3, [pc, #556]	; (800091c <main+0x248>)
 80006ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006f0:	f042 0204 	orr.w	r2, r2, #4
 80006f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80006f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006f8:	f002 0204 	and.w	r2, r2, #4
 80006fc:	9200      	str	r2, [sp, #0]
 80006fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000702:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000706:	64da      	str	r2, [r3, #76]	; 0x4c
 8000708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800070a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000714:	f042 0201 	orr.w	r2, r2, #1
 8000718:	64da      	str	r2, [r3, #76]	; 0x4c
 800071a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800071c:	f002 0201 	and.w	r2, r2, #1
 8000720:	9202      	str	r2, [sp, #8]
 8000722:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000726:	f042 0202 	orr.w	r2, r2, #2
 800072a:	64da      	str	r2, [r3, #76]	; 0x4c
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2102      	movs	r1, #2
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800073e:	f000 ffa3 	bl	8001688 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RES_Pin|DC_Pin|DCK_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	4876      	ldr	r0, [pc, #472]	; (8000920 <main+0x24c>)
 8000746:	f241 0106 	movw	r1, #4102	; 0x1006
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, RES_Pin|DC_Pin|DCK_Pin, GPIO_PIN_RESET);
 800074c:	f000 ff9c 	bl	8001688 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2502      	movs	r5, #2
 8000752:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	a904      	add	r1, sp, #16
 8000756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	e9cd 5604 	strd	r5, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  GPIO_InitStruct.Pin = RES_Pin|DC_Pin;
 8000762:	2706      	movs	r7, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f000 fecc 	bl	8001500 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	486d      	ldr	r0, [pc, #436]	; (8000920 <main+0x24c>)
 800076a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076c:	e9cd 4506 	strd	r4, r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	e9cd 7604 	strd	r7, r6, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f000 fec4 	bl	8001500 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCK_Pin;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(DCK_GPIO_Port, &GPIO_InitStruct);
 800077c:	4868      	ldr	r0, [pc, #416]	; (8000920 <main+0x24c>)
 800077e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(DCK_GPIO_Port, &GPIO_InitStruct);
 8000788:	f000 feba 	bl	8001500 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIN_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8000790:	4863      	ldr	r0, [pc, #396]	; (8000920 <main+0x24c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8000794:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	e9cd 3404 	strd	r3, r4, [sp, #16]
  HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 800079a:	f000 feb1 	bl	8001500 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 800079e:	4861      	ldr	r0, [pc, #388]	; (8000924 <main+0x250>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a0:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8000984 <main+0x2b0>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a4:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007aa:	e9c0 c300 	strd	ip, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b2:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b6:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ba:	e9c0 3406 	strd	r3, r4, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80007be:	2307      	movs	r3, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c0:	e9c0 340b 	strd	r3, r4, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c4:	2308      	movs	r3, #8
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c6:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ca:	6144      	str	r4, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007cc:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007ce:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d0:	f001 ff51 	bl	8002676 <HAL_SPI_Init>
 80007d4:	4605      	mov	r5, r0
 80007d6:	b108      	cbz	r0, 80007dc <main+0x108>
 80007d8:	b672      	cpsid	i
  while (1)
 80007da:	e7fe      	b.n	80007da <main+0x106>
  hadc1.Instance = ADC1;
 80007dc:	4c52      	ldr	r4, [pc, #328]	; (8000928 <main+0x254>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	4601      	mov	r1, r0
 80007e0:	2218      	movs	r2, #24
 80007e2:	a804      	add	r0, sp, #16
 80007e4:	f01d fc1a 	bl	801e01c <memset>
  hadc1.Instance = ADC1;
 80007e8:	4b50      	ldr	r3, [pc, #320]	; (800092c <main+0x258>)
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ea:	8325      	strh	r5, [r4, #24]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ec:	f04f 0804 	mov.w	r8, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f0:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007f2:	e9c4 3500 	strd	r3, r5, [r4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fa:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fe:	6125      	str	r5, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000800:	f8c4 8014 	str.w	r8, [r4, #20]
  hadc1.Init.NbrOfConversion = 1;
 8000804:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000806:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800080a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080e:	6365      	str	r5, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000810:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000814:	f000 fb98 	bl	8000f48 <HAL_ADC_Init>
 8000818:	b108      	cbz	r0, 800081e <main+0x14a>
 800081a:	b672      	cpsid	i
  while (1)
 800081c:	e7fe      	b.n	800081c <main+0x148>
  sConfig.Channel = ADC_CHANNEL_7;
 800081e:	4b44      	ldr	r3, [pc, #272]	; (8000930 <main+0x25c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000820:	9006      	str	r0, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000822:	e9cd 3704 	strd	r3, r7, [sp, #16]
  sConfig.Offset = 0;
 8000826:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000828:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	a904      	add	r1, sp, #16
 800082c:	4620      	mov	r0, r4
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800082e:	e9cd 3807 	strd	r3, r8, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000832:	f000 fc5b 	bl	80010ec <HAL_ADC_ConfigChannel>
 8000836:	b108      	cbz	r0, 800083c <main+0x168>
 8000838:	b672      	cpsid	i
  while (1)
 800083a:	e7fe      	b.n	800083a <main+0x166>
  hi2c1.Instance = I2C1;
 800083c:	4c3d      	ldr	r4, [pc, #244]	; (8000934 <main+0x260>)
  hi2c1.Init.Timing = 0x10909CEC;
 800083e:	4b3e      	ldr	r3, [pc, #248]	; (8000938 <main+0x264>)
 8000840:	4d3e      	ldr	r5, [pc, #248]	; (800093c <main+0x268>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000842:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000844:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000848:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000850:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x10909CEC;
 8000852:	e9c4 5300 	strd	r5, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000856:	f000 ff25 	bl	80016a4 <HAL_I2C_Init>
 800085a:	4601      	mov	r1, r0
 800085c:	b108      	cbz	r0, 8000862 <main+0x18e>
 800085e:	b672      	cpsid	i
  while (1)
 8000860:	e7fe      	b.n	8000860 <main+0x18c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000862:	4620      	mov	r0, r4
 8000864:	f000 ff6f 	bl	8001746 <HAL_I2CEx_ConfigAnalogFilter>
 8000868:	4601      	mov	r1, r0
 800086a:	b108      	cbz	r0, 8000870 <main+0x19c>
 800086c:	b672      	cpsid	i
  while (1)
 800086e:	e7fe      	b.n	800086e <main+0x19a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000870:	4620      	mov	r0, r4
 8000872:	f000 ff8e 	bl	8001792 <HAL_I2CEx_ConfigDigitalFilter>
 8000876:	4603      	mov	r3, r0
 8000878:	b108      	cbz	r0, 800087e <main+0x1aa>
 800087a:	b672      	cpsid	i
  while (1)
 800087c:	e7fe      	b.n	800087c <main+0x1a8>
  huart1.Instance = USART1;
 800087e:	4830      	ldr	r0, [pc, #192]	; (8000940 <main+0x26c>)
  huart1.Init.BaudRate = 115200;
 8000880:	4930      	ldr	r1, [pc, #192]	; (8000944 <main+0x270>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8000882:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	e9c0 1200 	strd	r1, r2, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800088c:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800088e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089a:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089c:	f002 fb63 	bl	8002f66 <HAL_UART_Init>
 80008a0:	4605      	mov	r5, r0
 80008a2:	b108      	cbz	r0, 80008a8 <main+0x1d4>
 80008a4:	b672      	cpsid	i
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <main+0x1d2>
  lv_disp_draw_buf_init(&disp_buf, buf_1, buf_2, BUFF_SIZE);
 80008a8:	4e27      	ldr	r6, [pc, #156]	; (8000948 <main+0x274>)
  lv_disp_drv_init(&disp_drv);            /*Basic initialization*/
 80008aa:	4c28      	ldr	r4, [pc, #160]	; (800094c <main+0x278>)
  OLED_SSD1306_Init();
 80008ac:	f000 f8bc 	bl	8000a28 <OLED_SSD1306_Init>
  lv_init();
 80008b0:	f003 fb02 	bl	8003eb8 <lv_init>
  lv_disp_draw_buf_init(&disp_buf, buf_1, buf_2, BUFF_SIZE);
 80008b4:	4a26      	ldr	r2, [pc, #152]	; (8000950 <main+0x27c>)
 80008b6:	4927      	ldr	r1, [pc, #156]	; (8000954 <main+0x280>)
 80008b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008bc:	4630      	mov	r0, r6
 80008be:	f011 fccb 	bl	8012258 <lv_disp_draw_buf_init>
  lv_disp_drv_init(&disp_drv);            /*Basic initialization*/
 80008c2:	4620      	mov	r0, r4
 80008c4:	f011 fca6 	bl	8012214 <lv_disp_drv_init>
  disp_drv.flush_cb = flush_cb;        /*Set a flush callback to draw to the display*/
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <main+0x284>)
 80008ca:	6163      	str	r3, [r4, #20]
  disp_drv.set_px_cb = set_px_cb;
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <main+0x288>)
 80008ce:	61e3      	str	r3, [r4, #28]
  disp_drv.rounder_cb = rounder_cb;
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <main+0x28c>)
 80008d2:	61a3      	str	r3, [r4, #24]
  disp_drv.hor_res = 128;                 /*Set the horizontal resolution in pixels*/
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <main+0x290>)
 80008d6:	6023      	str	r3, [r4, #0]
  disp = lv_disp_drv_register(&disp_drv); /*Register the driver and save the created display objects*/
 80008d8:	4620      	mov	r0, r4
  disp_drv.draw_buf = &disp_buf;          /*Set an initialized buffer*/
 80008da:	60e6      	str	r6, [r4, #12]
  disp = lv_disp_drv_register(&disp_drv); /*Register the driver and save the created display objects*/
 80008dc:	f011 fcca 	bl	8012274 <lv_disp_drv_register>
  lv_theme_t* theme = lv_theme_mono_init(disp, false, &lv_font_montserrat_8);
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <main+0x294>)
 80008e2:	4629      	mov	r1, r5
  disp = lv_disp_drv_register(&disp_drv); /*Register the driver and save the created display objects*/
 80008e4:	4604      	mov	r4, r0
  lv_theme_t* theme = lv_theme_mono_init(disp, false, &lv_font_montserrat_8);
 80008e6:	f010 ff07 	bl	80116f8 <lv_theme_mono_init>
 80008ea:	4601      	mov	r1, r0
  lv_disp_set_theme(disp, theme);
 80008ec:	4620      	mov	r0, r4
 80008ee:	f002 fb84 	bl	8002ffa <lv_disp_set_theme>
  lv_example_arc_2();
 80008f2:	f7ff fe61 	bl	80005b8 <lv_example_arc_2>
  osKernelInitialize();
 80008f6:	f01b fe0b 	bl	801c510 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <main+0x298>)
 80008fc:	481c      	ldr	r0, [pc, #112]	; (8000970 <main+0x29c>)
 80008fe:	4629      	mov	r1, r5
 8000900:	f01b fe32 	bl	801c568 <osThreadNew>
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <main+0x2a0>)
  lvgl_timerHandle = osThreadNew(LVGLTimer, NULL, &defaultLvglTimer_attributes);
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <main+0x2a4>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000908:	6018      	str	r0, [r3, #0]
  lvgl_timerHandle = osThreadNew(LVGLTimer, NULL, &defaultLvglTimer_attributes);
 800090a:	4629      	mov	r1, r5
 800090c:	481b      	ldr	r0, [pc, #108]	; (800097c <main+0x2a8>)
 800090e:	f01b fe2b 	bl	801c568 <osThreadNew>
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <main+0x2ac>)
 8000914:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000916:	f01b fe0d 	bl	801c534 <osKernelStart>
  while (1)
 800091a:	e7fe      	b.n	800091a <main+0x246>
 800091c:	40021000 	.word	0x40021000
 8000920:	48000400 	.word	0x48000400
 8000924:	20000a00 	.word	0x20000a00
 8000928:	20000948 	.word	0x20000948
 800092c:	50040000 	.word	0x50040000
 8000930:	1d500080 	.word	0x1d500080
 8000934:	200009ac 	.word	0x200009ac
 8000938:	10909cec 	.word	0x10909cec
 800093c:	40005400 	.word	0x40005400
 8000940:	20000a64 	.word	0x20000a64
 8000944:	40013800 	.word	0x40013800
 8000948:	200008dc 	.word	0x200008dc
 800094c:	200008f8 	.word	0x200008f8
 8000950:	200004d8 	.word	0x200004d8
 8000954:	200000d8 	.word	0x200000d8
 8000958:	0800054b 	.word	0x0800054b
 800095c:	080004f9 	.word	0x080004f9
 8000960:	08000525 	.word	0x08000525
 8000964:	00400080 	.word	0x00400080
 8000968:	08020240 	.word	0x08020240
 800096c:	0801e238 	.word	0x0801e238
 8000970:	080005a3 	.word	0x080005a3
 8000974:	200008d8 	.word	0x200008d8
 8000978:	0801e214 	.word	0x0801e214
 800097c:	0800053d 	.word	0x0800053d
 8000980:	20000ae8 	.word	0x20000ae8
 8000984:	40013000 	.word	0x40013000

08000988 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000988:	6802      	ldr	r2, [r0, #0]
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800098c:	429a      	cmp	r2, r3
 800098e:	d101      	bne.n	8000994 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000990:	f000 ba9e 	b.w	8000ed0 <HAL_IncTick>
}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40001000 	.word	0x40001000

0800099c <Error_Handler>:
 800099c:	b672      	cpsid	i
  while (1)
 800099e:	e7fe      	b.n	800099e <Error_Handler+0x2>

080009a0 <OLED_WR_Byte>:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &gram[y * 128], 128, 10);
	}

}

void OLED_WR_Byte(u8 dat, u8 cmd) {
 80009a0:	b507      	push	{r0, r1, r2, lr}
	if (cmd)
 80009a2:	460a      	mov	r2, r1
void OLED_WR_Byte(u8 dat, u8 cmd) {
 80009a4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (cmd)
 80009a8:	b101      	cbz	r1, 80009ac <OLED_WR_Byte+0xc>
		OLED_DC_Set();
 80009aa:	2201      	movs	r2, #1
	else
		OLED_DC_Clr();
 80009ac:	4809      	ldr	r0, [pc, #36]	; (80009d4 <OLED_WR_Byte+0x34>)
 80009ae:	2104      	movs	r1, #4
 80009b0:	f000 fe6a 	bl	8001688 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &dat, 1, 1);
 80009b4:	2301      	movs	r3, #1
 80009b6:	461a      	mov	r2, r3
 80009b8:	f10d 0107 	add.w	r1, sp, #7
 80009bc:	4806      	ldr	r0, [pc, #24]	; (80009d8 <OLED_WR_Byte+0x38>)
 80009be:	f001 fec4 	bl	800274a <HAL_SPI_Transmit>

	OLED_DC_Set();
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <OLED_WR_Byte+0x34>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	2104      	movs	r1, #4
 80009c8:	f000 fe5e 	bl	8001688 <HAL_GPIO_WritePin>
}
 80009cc:	b003      	add	sp, #12
 80009ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80009d2:	bf00      	nop
 80009d4:	48000400 	.word	0x48000400
 80009d8:	20000a00 	.word	0x20000a00

080009dc <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y) {
 80009dc:	b510      	push	{r4, lr}
 80009de:	4604      	mov	r4, r0
	OLED_WR_Byte(0xb0 + y, OLED_CMD);	// Page Addressing Mode 设置页地址(0<=y<=7)
 80009e0:	f1a1 0050 	sub.w	r0, r1, #80	; 0x50
 80009e4:	b2c0      	uxtb	r0, r0
 80009e6:	2100      	movs	r1, #0
 80009e8:	f7ff ffda 	bl	80009a0 <OLED_WR_Byte>

#ifdef SH1106
	x += 2; // SH1106 start from column 0x02
 80009ec:	1ca0      	adds	r0, r4, #2
 80009ee:	b2c4      	uxtb	r4, r0

#if(defined ST7565 && defined LCD_UPSIDEDOWN)
	x += 4;
#endif

	OLED_WR_Byte((x & 0x0f), OLED_CMD); //Page Addressing Mode, 设置列低4位
 80009f0:	2100      	movs	r1, #0
 80009f2:	f000 000f 	and.w	r0, r0, #15
 80009f6:	f7ff ffd3 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(((x & 0xf0) >> 4) | 0x10, OLED_CMD); //Page Addressing Mode, 设置列高4位
 80009fa:	0920      	lsrs	r0, r4, #4
 80009fc:	2100      	movs	r1, #0
}
 80009fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	OLED_WR_Byte(((x & 0xf0) >> 4) | 0x10, OLED_CMD); //Page Addressing Mode, 设置列高4位
 8000a02:	f040 0010 	orr.w	r0, r0, #16
 8000a06:	f7ff bfcb 	b.w	80009a0 <OLED_WR_Byte>

08000a0a <OLED_Clear>:
	OLED_WR_Byte(0X8D, OLED_CMD); //SET DCDC锟斤拷锟斤拷
	OLED_WR_Byte(0X10, OLED_CMD); //DCDC OFF
	OLED_WR_Byte(0XAE, OLED_CMD); //DISPLAY OFF
}

void OLED_Clear(void) {
 8000a0a:	b510      	push	{r4, lr}
 8000a0c:	2400      	movs	r4, #0
	u8 i, n;
	for (i = 0; i < 8; i++) {
		OLED_Set_Pos(0, i);
 8000a0e:	b2e1      	uxtb	r1, r4
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff ffe3 	bl	80009dc <OLED_Set_Pos>
	for (i = 0; i < 8; i++) {
 8000a16:	3401      	adds	r4, #1
#endif

#ifdef SSD1306
		for (n = 0; n < 128; n++)
#endif
			OLED_WR_Byte(0, OLED_DATA);
 8000a18:	2101      	movs	r1, #1
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff ffc0 	bl	80009a0 <OLED_WR_Byte>
	for (i = 0; i < 8; i++) {
 8000a20:	2c08      	cmp	r4, #8
 8000a22:	d1f4      	bne.n	8000a0e <OLED_Clear+0x4>
	}

}
 8000a24:	bd10      	pop	{r4, pc}
	...

08000a28 <OLED_SSD1306_Init>:
#endif
}

//SSD1306 initiation
//Also works for SH1106
void OLED_SSD1306_Init(void) {
 8000a28:	b510      	push	{r4, lr}

	OLED_RST_Set();
 8000a2a:	4c49      	ldr	r4, [pc, #292]	; (8000b50 <OLED_SSD1306_Init+0x128>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2102      	movs	r1, #2
 8000a30:	4620      	mov	r0, r4
 8000a32:	f000 fe29 	bl	8001688 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a36:	200a      	movs	r0, #10
 8000a38:	f000 fa5c 	bl	8000ef4 <HAL_Delay>
	OLED_RST_Clr();
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4620      	mov	r0, r4
 8000a42:	f000 fe21 	bl	8001688 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a46:	200a      	movs	r0, #10
 8000a48:	f000 fa54 	bl	8000ef4 <HAL_Delay>
	OLED_RST_Set();
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4620      	mov	r0, r4
 8000a50:	2102      	movs	r1, #2
 8000a52:	f000 fe19 	bl	8001688 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn  oled panel
 8000a56:	2100      	movs	r1, #0
 8000a58:	20ae      	movs	r0, #174	; 0xae
 8000a5a:	f7ff ffa1 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4608      	mov	r0, r1
 8000a62:	f7ff ff9d 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 8000a66:	2100      	movs	r1, #0
 8000a68:	2010      	movs	r0, #16
 8000a6a:	f7ff ff99 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2040      	movs	r0, #64	; 0x40
 8000a72:	f7ff ff95 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 8000a76:	2100      	movs	r1, #0
 8000a78:	2081      	movs	r0, #129	; 0x81
 8000a7a:	f7ff ff91 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 8000a7e:	2100      	movs	r1, #0
 8000a80:	20cf      	movs	r0, #207	; 0xcf
 8000a82:	f7ff ff8d 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping
 8000a86:	2100      	movs	r1, #0
 8000a88:	20a1      	movs	r0, #161	; 0xa1
 8000a8a:	f7ff ff89 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); //Set COM/Row Scan Direction
 8000a8e:	2100      	movs	r1, #0
 8000a90:	20c8      	movs	r0, #200	; 0xc8
 8000a92:	f7ff ff85 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8000a96:	2100      	movs	r1, #0
 8000a98:	20a6      	movs	r0, #166	; 0xa6
 8000a9a:	f7ff ff81 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	20a8      	movs	r0, #168	; 0xa8
 8000aa2:	f7ff ff7d 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	203f      	movs	r0, #63	; 0x3f
 8000aaa:	f7ff ff79 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	20d3      	movs	r0, #211	; 0xd3
 8000ab2:	f7ff ff75 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	f7ff ff71 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 8000abe:	2100      	movs	r1, #0
 8000ac0:	20d5      	movs	r0, #213	; 0xd5
 8000ac2:	f7ff ff6d 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xF0, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	20f0      	movs	r0, #240	; 0xf0
 8000aca:	f7ff ff69 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 8000ace:	2100      	movs	r1, #0
 8000ad0:	20d9      	movs	r0, #217	; 0xd9
 8000ad2:	f7ff ff65 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	20f1      	movs	r0, #241	; 0xf1
 8000ada:	f7ff ff61 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 8000ade:	2100      	movs	r1, #0
 8000ae0:	20da      	movs	r0, #218	; 0xda
 8000ae2:	f7ff ff5d 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2012      	movs	r0, #18
 8000aea:	f7ff ff59 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 8000aee:	2100      	movs	r1, #0
 8000af0:	20db      	movs	r0, #219	; 0xdb
 8000af2:	f7ff ff55 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //Set VCOM Deselect Level
 8000af6:	2100      	movs	r1, #0
 8000af8:	2040      	movs	r0, #64	; 0x40
 8000afa:	f7ff ff51 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8000afe:	2100      	movs	r1, #0
 8000b00:	2020      	movs	r0, #32
 8000b02:	f7ff ff4d 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //  0x02 -- Page addressing mode
 8000b06:	2100      	movs	r1, #0
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f7ff ff49 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 8000b0e:	2100      	movs	r1, #0
 8000b10:	208d      	movs	r0, #141	; 0x8d
 8000b12:	f7ff ff45 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 8000b16:	2100      	movs	r1, #0
 8000b18:	2014      	movs	r0, #20
 8000b1a:	f7ff ff41 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	20a4      	movs	r0, #164	; 0xa4
 8000b22:	f7ff ff3d 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 8000b26:	2100      	movs	r1, #0
 8000b28:	20a6      	movs	r0, #166	; 0xa6
 8000b2a:	f7ff ff39 	bl	80009a0 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); //--turn on oled panel
 8000b2e:	2100      	movs	r1, #0
 8000b30:	20af      	movs	r0, #175	; 0xaf
 8000b32:	f7ff ff35 	bl	80009a0 <OLED_WR_Byte>

	OLED_WR_Byte(0xAF, OLED_CMD); /*display ON*/
 8000b36:	2100      	movs	r1, #0
 8000b38:	20af      	movs	r0, #175	; 0xaf
 8000b3a:	f7ff ff31 	bl	80009a0 <OLED_WR_Byte>
	OLED_Clear();
 8000b3e:	f7ff ff64 	bl	8000a0a <OLED_Clear>
	OLED_Set_Pos(0, 0);
 8000b42:	2100      	movs	r1, #0
}
 8000b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	OLED_Set_Pos(0, 0);
 8000b48:	4608      	mov	r0, r1
 8000b4a:	f7ff bf47 	b.w	80009dc <OLED_Set_Pos>
 8000b4e:	bf00      	nop
 8000b50:	48000400 	.word	0x48000400

08000b54 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_MspInit+0x38>)
 8000b56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b58:	f042 0201 	orr.w	r2, r2, #1
 8000b5c:	661a      	str	r2, [r3, #96]	; 0x60
 8000b5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8000b60:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	f002 0201 	and.w	r2, r2, #1
 8000b66:	9200      	str	r2, [sp, #0]
 8000b68:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b70:	659a      	str	r2, [r3, #88]	; 0x58
 8000b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b86:	f000 bc7b 	b.w	8001480 <HAL_NVIC_SetPriority>
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b90:	b510      	push	{r4, lr}
 8000b92:	b0a0      	sub	sp, #128	; 0x80
 8000b94:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	2214      	movs	r2, #20
 8000b98:	2100      	movs	r1, #0
 8000b9a:	a803      	add	r0, sp, #12
 8000b9c:	f01d fa3e 	bl	801e01c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba0:	2260      	movs	r2, #96	; 0x60
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	a808      	add	r0, sp, #32
 8000ba6:	f01d fa39 	bl	801e01c <memset>
  if(hadc->Instance==ADC1)
 8000baa:	6822      	ldr	r2, [r4, #0]
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <HAL_ADC_MspInit+0x94>)
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d136      	bne.n	8000c20 <HAL_ADC_MspInit+0x90>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bb6:	9308      	str	r3, [sp, #32]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bbc:	931d      	str	r3, [sp, #116]	; 0x74
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000bbe:	2301      	movs	r3, #1
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bc0:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000bc4:	2418      	movs	r4, #24
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bcc:	2302      	movs	r3, #2
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bce:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd2:	a808      	add	r0, sp, #32
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bd8:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bda:	f001 faef 	bl	80021bc <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	b108      	cbz	r0, 8000be4 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8000be0:	f7ff fedc 	bl	800099c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_ADC_MspInit+0x98>)
 8000be6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bec:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bf0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000bf4:	9201      	str	r2, [sp, #4]
 8000bf6:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bfa:	f042 0201 	orr.w	r2, r2, #1
 8000bfe:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	9b02      	ldr	r3, [sp, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	230b      	movs	r3, #11
 8000c0e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f000 fc70 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c20:	b020      	add	sp, #128	; 0x80
 8000c22:	bd10      	pop	{r4, pc}
 8000c24:	50040000 	.word	0x50040000
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c2c:	b510      	push	{r4, lr}
 8000c2e:	b0a0      	sub	sp, #128	; 0x80
 8000c30:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	2214      	movs	r2, #20
 8000c34:	2100      	movs	r1, #0
 8000c36:	a803      	add	r0, sp, #12
 8000c38:	f01d f9f0 	bl	801e01c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3c:	2260      	movs	r2, #96	; 0x60
 8000c3e:	2100      	movs	r1, #0
 8000c40:	a808      	add	r0, sp, #32
 8000c42:	f01d f9eb 	bl	801e01c <memset>
  if(hi2c->Instance==I2C1)
 8000c46:	6822      	ldr	r2, [r4, #0]
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_I2C_MspInit+0x7c>)
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d12a      	bne.n	8000ca4 <HAL_I2C_MspInit+0x78>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c4e:	2340      	movs	r3, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c50:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c52:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c54:	f001 fab2 	bl	80021bc <HAL_RCCEx_PeriphCLKConfig>
 8000c58:	b108      	cbz	r0, 8000c5e <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 8000c5a:	f7ff fe9f 	bl	800099c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4c13      	ldr	r4, [pc, #76]	; (8000cac <HAL_I2C_MspInit+0x80>)
 8000c60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000c68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c72:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000c76:	2312      	movs	r3, #18
 8000c78:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c88:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c8c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f000 fc37 	bl	8001500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c98:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca0:	9302      	str	r3, [sp, #8]
 8000ca2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ca4:	b020      	add	sp, #128	; 0x80
 8000ca6:	bd10      	pop	{r4, pc}
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb0:	b510      	push	{r4, lr}
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	2214      	movs	r2, #20
 8000cb8:	2100      	movs	r1, #0
 8000cba:	a803      	add	r0, sp, #12
 8000cbc:	f01d f9ae 	bl	801e01c <memset>
  if(hspi->Instance==SPI1)
 8000cc0:	6822      	ldr	r2, [r4, #0]
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_SPI_MspInit+0x60>)
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d120      	bne.n	8000d0a <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ccc:	2103      	movs	r1, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cd4:	661a      	str	r2, [r3, #96]	; 0x60
 8000cd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cd8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000cdc:	9201      	str	r2, [sp, #4]
 8000cde:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce2:	f042 0201 	orr.w	r2, r2, #1
 8000ce6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	9302      	str	r3, [sp, #8]
 8000cf0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	22a0      	movs	r2, #160	; 0xa0
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cfa:	2305      	movs	r3, #5
 8000cfc:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	a903      	add	r1, sp, #12
 8000d06:	f000 fbfb 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d0a:	b008      	add	sp, #32
 8000d0c:	bd10      	pop	{r4, pc}
 8000d0e:	bf00      	nop
 8000d10:	40013000 	.word	0x40013000

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b510      	push	{r4, lr}
 8000d16:	b0a0      	sub	sp, #128	; 0x80
 8000d18:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	2214      	movs	r2, #20
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	a803      	add	r0, sp, #12
 8000d20:	f01d f97c 	bl	801e01c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d24:	2260      	movs	r2, #96	; 0x60
 8000d26:	2100      	movs	r1, #0
 8000d28:	a808      	add	r0, sp, #32
 8000d2a:	f01d f977 	bl	801e01c <memset>
  if(huart->Instance==USART1)
 8000d2e:	6822      	ldr	r2, [r4, #0]
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_UART_MspInit+0x78>)
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d128      	bne.n	8000d88 <HAL_UART_MspInit+0x74>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d36:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d38:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d3a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	f001 fa3e 	bl	80021bc <HAL_RCCEx_PeriphCLKConfig>
 8000d40:	b108      	cbz	r0, 8000d46 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8000d42:	f7ff fe2b 	bl	800099c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	4812      	ldr	r0, [pc, #72]	; (8000d94 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d50:	661a      	str	r2, [r3, #96]	; 0x60
 8000d52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d54:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d58:	9201      	str	r2, [sp, #4]
 8000d5a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d5e:	f042 0202 	orr.w	r2, r2, #2
 8000d62:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	22c0      	movs	r2, #192	; 0xc0
 8000d70:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d7e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d82:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f000 fbbc 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d88:	b020      	add	sp, #128	; 0x80
 8000d8a:	bd10      	pop	{r4, pc}
 8000d8c:	40013800 	.word	0x40013800
 8000d90:	40021000 	.word	0x40021000
 8000d94:	48000400 	.word	0x48000400

08000d98 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HAL_InitTick+0x88>)
{
 8000d9a:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d9e:	f042 0210 	orr.w	r2, r2, #16
 8000da2:	659a      	str	r2, [r3, #88]	; 0x58
 8000da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8000da6:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000da8:	f003 0310 	and.w	r3, r3, #16
 8000dac:	9302      	str	r3, [sp, #8]
{
 8000dae:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db0:	a901      	add	r1, sp, #4
 8000db2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000db4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db6:	f001 f959 	bl	800206c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dba:	9b06      	ldr	r3, [sp, #24]
 8000dbc:	bb4b      	cbnz	r3, 8000e12 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dbe:	f001 f931 	bl	8002024 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dc2:	4e18      	ldr	r6, [pc, #96]	; (8000e24 <HAL_InitTick+0x8c>)
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_InitTick+0x90>)
 8000dc6:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dc8:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000dcc:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_InitTick+0x94>)
 8000dd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dd4:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dd6:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8000dd8:	4630      	mov	r0, r6
  htim6.Init.ClockDivision = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de0:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 8000de2:	f001 fe95 	bl	8002b10 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000de6:	4604      	mov	r4, r0
 8000de8:	b980      	cbnz	r0, 8000e0c <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dea:	4630      	mov	r0, r6
 8000dec:	f001 fd78 	bl	80028e0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000df0:	4604      	mov	r4, r0
 8000df2:	b958      	cbnz	r0, 8000e0c <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000df4:	2036      	movs	r0, #54	; 0x36
 8000df6:	f000 fb75 	bl	80014e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfa:	2d0f      	cmp	r5, #15
 8000dfc:	d80d      	bhi.n	8000e1a <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dfe:	4622      	mov	r2, r4
 8000e00:	4629      	mov	r1, r5
 8000e02:	2036      	movs	r0, #54	; 0x36
 8000e04:	f000 fb3c 	bl	8001480 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_InitTick+0x98>)
 8000e0a:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	b008      	add	sp, #32
 8000e10:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e12:	f001 f907 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8000e16:	0040      	lsls	r0, r0, #1
 8000e18:	e7d3      	b.n	8000dc2 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8000e1a:	2401      	movs	r4, #1
 8000e1c:	e7f6      	b.n	8000e0c <HAL_InitTick+0x74>
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000
 8000e24:	20000aec 	.word	0x20000aec
 8000e28:	40001000 	.word	0x40001000
 8000e2c:	000f4240 	.word	0x000f4240
 8000e30:	20000008 	.word	0x20000008

08000e34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler>

08000e36 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler>

08000e38 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler>

08000e3a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler>

08000e3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler>

08000e3e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3e:	4770      	bx	lr

08000e40 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e40:	4801      	ldr	r0, [pc, #4]	; (8000e48 <TIM6_DAC_IRQHandler+0x8>)
 8000e42:	f001 bd7b 	b.w	800293c <HAL_TIM_IRQHandler>
 8000e46:	bf00      	nop
 8000e48:	20000aec 	.word	0x20000aec

08000e4c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e4c:	4a03      	ldr	r2, [pc, #12]	; (8000e5c <SystemInit+0x10>)
 8000e4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000e52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e64:	f7ff fff2 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	; (8000ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <LoopForever+0xe>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	; (8000eac <LoopForever+0x16>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f01d f877 	bl	801df80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e92:	f7ff fc1f 	bl	80006d4 <main>

08000e96 <LoopForever>:

LoopForever:
    b LoopForever
 8000e96:	e7fe      	b.n	8000e96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e98:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8000ea4:	080206b0 	.word	0x080206b0
  ldr r2, =_sbss
 8000ea8:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8000eac:	200088d8 	.word	0x200088d8

08000eb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_IRQHandler>

08000eb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb2:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 fad1 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eba:	200f      	movs	r0, #15
 8000ebc:	f7ff ff6c 	bl	8000d98 <HAL_InitTick>
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	b918      	cbnz	r0, 8000ecc <HAL_Init+0x1a>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec4:	f7ff fe46 	bl	8000b54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8000ec8:	4620      	mov	r0, r4
 8000eca:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000ecc:	2401      	movs	r4, #1
 8000ece:	e7fb      	b.n	8000ec8 <HAL_Init+0x16>

08000ed0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000ed0:	4a03      	ldr	r2, [pc, #12]	; (8000ee0 <HAL_IncTick+0x10>)
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <HAL_IncTick+0x14>)
 8000ed4:	6811      	ldr	r1, [r2, #0]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	440b      	add	r3, r1
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000b38 	.word	0x20000b38
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ee8:	4b01      	ldr	r3, [pc, #4]	; (8000ef0 <HAL_GetTick+0x8>)
 8000eea:	6818      	ldr	r0, [r3, #0]
}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000b38 	.word	0x20000b38

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff fff6 	bl	8000ee8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8000efe:	bf1c      	itt	ne
 8000f00:	4b05      	ldrne	r3, [pc, #20]	; (8000f18 <HAL_Delay+0x24>)
 8000f02:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8000f06:	bf18      	it	ne
 8000f08:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f0a:	f7ff ffed 	bl	8000ee8 <HAL_GetTick>
 8000f0e:	1b43      	subs	r3, r0, r5
 8000f10:	42a3      	cmp	r3, r4
 8000f12:	d3fa      	bcc.n	8000f0a <HAL_Delay+0x16>
  {
  }
}
 8000f14:	bd38      	pop	{r3, r4, r5, pc}
 8000f16:	bf00      	nop
 8000f18:	20000004 	.word	0x20000004

08000f1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f1c:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f1e:	0dcc      	lsrs	r4, r1, #23
 8000f20:	f004 0404 	and.w	r4, r4, #4
 8000f24:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8000f26:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8000f2a:	5823      	ldr	r3, [r4, r0]
 8000f2c:	2507      	movs	r5, #7
 8000f2e:	408d      	lsls	r5, r1
 8000f30:	ea23 0305 	bic.w	r3, r3, r5
 8000f34:	fa02 f101 	lsl.w	r1, r2, r1
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f3c:	bd30      	pop	{r4, r5, pc}

08000f3e <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f3e:	6880      	ldr	r0, [r0, #8]
}
 8000f40:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000f44:	4770      	bx	lr
	...

08000f48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f4e:	4604      	mov	r4, r0
 8000f50:	2800      	cmp	r0, #0
 8000f52:	f000 80bf 	beq.w	80010d4 <HAL_ADC_Init+0x18c>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f56:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000f58:	b925      	cbnz	r5, 8000f64 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f5a:	f7ff fe19 	bl	8000b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f5e:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f60:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f64:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f66:	6883      	ldr	r3, [r0, #8]
 8000f68:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f6a:	bf41      	itttt	mi
 8000f6c:	6883      	ldrmi	r3, [r0, #8]
 8000f6e:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 8000f72:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 8000f76:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f78:	6883      	ldr	r3, [r0, #8]
 8000f7a:	00dd      	lsls	r5, r3, #3
 8000f7c:	f140 808a 	bpl.w	8001094 <HAL_ADC_Init+0x14c>
 8000f80:	6883      	ldr	r3, [r0, #8]
 8000f82:	00d9      	lsls	r1, r3, #3
 8000f84:	f100 809d 	bmi.w	80010c2 <HAL_ADC_Init+0x17a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f8a:	f043 0310 	orr.w	r3, r3, #16
 8000f8e:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f98:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f9a:	f7ff ffd0 	bl	8000f3e <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	4303      	orrs	r3, r0
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000fa8:	f040 8091 	bne.w	80010ce <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 8000fac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fb4:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8000fb6:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fb8:	6883      	ldr	r3, [r0, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fba:	07da      	lsls	r2, r3, #31
 8000fbc:	d40a      	bmi.n	8000fd4 <HAL_ADC_Init+0x8c>
 8000fbe:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <HAL_ADC_Init+0x190>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000fc2:	07db      	lsls	r3, r3, #31
 8000fc4:	d406      	bmi.n	8000fd4 <HAL_ADC_Init+0x8c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fc6:	4a45      	ldr	r2, [pc, #276]	; (80010dc <HAL_ADC_Init+0x194>)
 8000fc8:	6865      	ldr	r5, [r4, #4]
 8000fca:	6893      	ldr	r3, [r2, #8]
 8000fcc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000fd0:	432b      	orrs	r3, r5
 8000fd2:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8000fd4:	68e5      	ldr	r5, [r4, #12]
 8000fd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000fd8:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8000fdc:	432b      	orrs	r3, r5
 8000fde:	68a5      	ldr	r5, [r4, #8]
 8000fe0:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fe2:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fe4:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8000fe6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000fee:	bf02      	ittt	eq
 8000ff0:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8000ff2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000ff6:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ffa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ffc:	b122      	cbz	r2, 8001008 <HAL_ADC_Init+0xc0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8000ffe:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001000:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001004:	432a      	orrs	r2, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001006:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001008:	68c5      	ldr	r5, [r0, #12]
 800100a:	4a35      	ldr	r2, [pc, #212]	; (80010e0 <HAL_ADC_Init+0x198>)
 800100c:	402a      	ands	r2, r5
 800100e:	4313      	orrs	r3, r2
 8001010:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001012:	f7ff ff94 	bl	8000f3e <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001016:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	f002 0208 	and.w	r2, r2, #8
 800101e:	4302      	orrs	r2, r0
 8001020:	d120      	bne.n	8001064 <HAL_ADC_Init+0x11c>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001022:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001024:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001028:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800102a:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800102c:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001030:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001034:	f020 0002 	bic.w	r0, r0, #2
 8001038:	4302      	orrs	r2, r0
 800103a:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800103c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8001040:	2a01      	cmp	r2, #1
 8001042:	d140      	bne.n	80010c6 <HAL_ADC_Init+0x17e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001044:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 8001048:	6918      	ldr	r0, [r3, #16]
 800104a:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800104e:	f020 0004 	bic.w	r0, r0, #4
 8001052:	432a      	orrs	r2, r5
 8001054:	4302      	orrs	r2, r0
 8001056:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001058:	4302      	orrs	r2, r0
 800105a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800105c:	4302      	orrs	r2, r0
 800105e:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001062:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001064:	6922      	ldr	r2, [r4, #16]
 8001066:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001068:	bf05      	ittet	eq
 800106a:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 800106c:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800106e:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001070:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001074:	bf06      	itte	eq
 8001076:	f020 000f 	biceq.w	r0, r0, #15
 800107a:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800107c:	f022 020f 	bicne.w	r2, r2, #15
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001082:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001084:	f023 0303 	bic.w	r3, r3, #3
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800108e:	4608      	mov	r0, r1
 8001090:	b003      	add	sp, #12
 8001092:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001094:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <HAL_ADC_Init+0x19c>)
 8001098:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800109c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6083      	str	r3, [r0, #8]
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <HAL_ADC_Init+0x1a0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80010ae:	3301      	adds	r3, #1
 80010b0:	005b      	lsls	r3, r3, #1
      wait_loop_index--;
 80010b2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80010b4:	9b01      	ldr	r3, [sp, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f43f af62 	beq.w	8000f80 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 80010bc:	9b01      	ldr	r3, [sp, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	e7f7      	b.n	80010b2 <HAL_ADC_Init+0x16a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c2:	2100      	movs	r1, #0
 80010c4:	e769      	b.n	8000f9a <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	f022 0201 	bic.w	r2, r2, #1
 80010cc:	e7c9      	b.n	8001062 <HAL_ADC_Init+0x11a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 80010d4:	2101      	movs	r1, #1
 80010d6:	e7da      	b.n	800108e <HAL_ADC_Init+0x146>
 80010d8:	50040000 	.word	0x50040000
 80010dc:	50040300 	.word	0x50040300
 80010e0:	fff0c007 	.word	0xfff0c007
 80010e4:	00030d40 	.word	0x00030d40
 80010e8:	20000000 	.word	0x20000000

080010ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010f2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80010f6:	2b01      	cmp	r3, #1
{
 80010f8:	4605      	mov	r5, r0
 80010fa:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80010fc:	f000 8195 	beq.w	800142a <HAL_ADC_ConfigChannel+0x33e>
 8001100:	2301      	movs	r3, #1
 8001102:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001106:	6800      	ldr	r0, [r0, #0]
 8001108:	f7ff ff19 	bl	8000f3e <LL_ADC_REG_IsConversionOngoing>
 800110c:	2800      	cmp	r0, #0
 800110e:	f040 8186 	bne.w	800141e <HAL_ADC_ConfigChannel+0x332>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001112:	684b      	ldr	r3, [r1, #4]
 8001114:	2b05      	cmp	r3, #5
 8001116:	d809      	bhi.n	800112c <HAL_ADC_ConfigChannel+0x40>
    {
      switch (sConfig->Rank)
 8001118:	3b02      	subs	r3, #2
 800111a:	2b03      	cmp	r3, #3
 800111c:	f200 808c 	bhi.w	8001238 <HAL_ADC_ConfigChannel+0x14c>
 8001120:	e8df f003 	tbb	[pc, r3]
 8001124:	87858302 	.word	0x87858302
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001128:	230c      	movs	r3, #12
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
          break;
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800112a:	6063      	str	r3, [r4, #4]
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800112c:	6862      	ldr	r2, [r4, #4]
 800112e:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8001130:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001132:	0991      	lsrs	r1, r2, #6
 8001134:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8001138:	f001 010c 	and.w	r1, r1, #12
  MODIFY_REG(*preg,
 800113c:	f002 021f 	and.w	r2, r2, #31
 8001140:	59ce      	ldr	r6, [r1, r7]
 8001142:	f04f 0c1f 	mov.w	ip, #31
 8001146:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800114a:	4093      	lsls	r3, r2
 800114c:	fa0c f202 	lsl.w	r2, ip, r2
 8001150:	ea26 0202 	bic.w	r2, r6, r2
 8001154:	4313      	orrs	r3, r2
 8001156:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001158:	f7ff fef1 	bl	8000f3e <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800115c:	682e      	ldr	r6, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800115e:	68b3      	ldr	r3, [r6, #8]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	4303      	orrs	r3, r0
 8001166:	d11d      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0xb8>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001168:	4630      	mov	r0, r6
 800116a:	68a2      	ldr	r2, [r4, #8]
 800116c:	6821      	ldr	r1, [r4, #0]
 800116e:	f7ff fed5 	bl	8000f1c <LL_ADC_SetChannelSamplingTime>

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001172:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001174:	6829      	ldr	r1, [r5, #0]
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	68c8      	ldr	r0, [r1, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800117a:	2e04      	cmp	r6, #4
 800117c:	f101 0260 	add.w	r2, r1, #96	; 0x60
 8001180:	d05c      	beq.n	800123c <HAL_ADC_ConfigChannel+0x150>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001182:	f3c0 01c1 	ubfx	r1, r0, #3, #2
 8001186:	0048      	lsls	r0, r1, #1
 8001188:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 800118a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 800118e:	4081      	lsls	r1, r0
 8001190:	48a7      	ldr	r0, [pc, #668]	; (8001430 <HAL_ADC_ConfigChannel+0x344>)
 8001192:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8001196:	4038      	ands	r0, r7
 8001198:	4303      	orrs	r3, r0
 800119a:	4319      	orrs	r1, r3
 800119c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80011a0:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011a4:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011a6:	6883      	ldr	r3, [r0, #8]
 80011a8:	07d9      	lsls	r1, r3, #31
 80011aa:	d433      	bmi.n	8001214 <HAL_ADC_ConfigChannel+0x128>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80011ac:	68e7      	ldr	r7, [r4, #12]
 80011ae:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80011b0:	4aa0      	ldr	r2, [pc, #640]	; (8001434 <HAL_ADC_ConfigChannel+0x348>)
 80011b2:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 80011b6:	f007 0c18 	and.w	ip, r7, #24
 80011ba:	f3c3 0612 	ubfx	r6, r3, #0, #19
 80011be:	fa22 f20c 	lsr.w	r2, r2, ip
 80011c2:	401a      	ands	r2, r3
 80011c4:	ea21 0106 	bic.w	r1, r1, r6
 80011c8:	430a      	orrs	r2, r1
 80011ca:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80011ce:	4a9a      	ldr	r2, [pc, #616]	; (8001438 <HAL_ADC_ConfigChannel+0x34c>)
 80011d0:	4297      	cmp	r7, r2
 80011d2:	d11f      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x128>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80011d4:	2e00      	cmp	r6, #0
 80011d6:	f040 8086 	bne.w	80012e6 <HAL_ADC_ConfigChannel+0x1fa>
 80011da:	0e9a      	lsrs	r2, r3, #26
 80011dc:	3201      	adds	r2, #1
 80011de:	f002 071f 	and.w	r7, r2, #31
 80011e2:	2101      	movs	r1, #1
 80011e4:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011e6:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80011e8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80011ec:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011f0:	f200 80ab 	bhi.w	800134a <HAL_ADC_ConfigChannel+0x25e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80011f4:	430a      	orrs	r2, r1
 80011f6:	2e00      	cmp	r6, #0
 80011f8:	f040 8091 	bne.w	800131e <HAL_ADC_ConfigChannel+0x232>
 80011fc:	0e9b      	lsrs	r3, r3, #26
 80011fe:	3301      	adds	r3, #1
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001208:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800120a:	ea42 0103 	orr.w	r1, r2, r3
 800120e:	68a2      	ldr	r2, [r4, #8]
 8001210:	f7ff fe84 	bl	8000f1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001214:	6821      	ldr	r1, [r4, #0]
 8001216:	4b89      	ldr	r3, [pc, #548]	; (800143c <HAL_ADC_ConfigChannel+0x350>)
 8001218:	4219      	tst	r1, r3
 800121a:	f040 80b1 	bne.w	8001380 <HAL_ADC_ConfigChannel+0x294>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121e:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001220:	2300      	movs	r3, #0
 8001222:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001226:	b003      	add	sp, #12
 8001228:	bdf0      	pop	{r4, r5, r6, r7, pc}
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800122a:	2312      	movs	r3, #18
 800122c:	e77d      	b.n	800112a <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800122e:	2318      	movs	r3, #24
 8001230:	e77b      	b.n	800112a <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001236:	e778      	b.n	800112a <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001238:	2306      	movs	r3, #6
 800123a:	e776      	b.n	800112a <HAL_ADC_ConfigChannel+0x3e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800123c:	6e08      	ldr	r0, [r1, #96]	; 0x60
 800123e:	6e08      	ldr	r0, [r1, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001240:	f3c3 0612 	ubfx	r6, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001244:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001248:	2e00      	cmp	r6, #0
 800124a:	d138      	bne.n	80012be <HAL_ADC_ConfigChannel+0x1d2>
 800124c:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001250:	4298      	cmp	r0, r3
  MODIFY_REG(*preg,
 8001252:	bf02      	ittt	eq
 8001254:	6e0b      	ldreq	r3, [r1, #96]	; 0x60
 8001256:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 800125a:	660b      	streq	r3, [r1, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800125c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	6e48      	ldr	r0, [r1, #100]	; 0x64
 8001262:	f3c3 0612 	ubfx	r6, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001266:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800126a:	bb6e      	cbnz	r6, 80012c8 <HAL_ADC_ConfigChannel+0x1dc>
 800126c:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001270:	4298      	cmp	r0, r3
  MODIFY_REG(*preg,
 8001272:	bf02      	ittt	eq
 8001274:	6e4b      	ldreq	r3, [r1, #100]	; 0x64
 8001276:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 800127a:	664b      	streq	r3, [r1, #100]	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800127c:	6893      	ldr	r3, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	6891      	ldr	r1, [r2, #8]
 8001282:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001286:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800128a:	bb10      	cbnz	r0, 80012d2 <HAL_ADC_ConfigChannel+0x1e6>
 800128c:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001290:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 8001292:	bf02      	ittt	eq
 8001294:	6893      	ldreq	r3, [r2, #8]
 8001296:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 800129a:	6093      	streq	r3, [r2, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800129c:	68d3      	ldr	r3, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	68d1      	ldr	r1, [r2, #12]
 80012a2:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80012a6:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012aa:	b9b8      	cbnz	r0, 80012dc <HAL_ADC_ConfigChannel+0x1f0>
 80012ac:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80012b0:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 80012b2:	bf02      	ittt	eq
 80012b4:	68d3      	ldreq	r3, [r2, #12]
 80012b6:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80012ba:	60d3      	streq	r3, [r2, #12]
}
 80012bc:	e772      	b.n	80011a4 <HAL_ADC_ConfigChannel+0xb8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	e7c3      	b.n	8001250 <HAL_ADC_ConfigChannel+0x164>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	e7ce      	b.n	8001270 <HAL_ADC_ConfigChannel+0x184>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80012d6:	fab3 f383 	clz	r3, r3
 80012da:	e7d9      	b.n	8001290 <HAL_ADC_ConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80012e0:	fab3 f383 	clz	r3, r3
 80012e4:	e7e4      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80012ea:	b132      	cbz	r2, 80012fa <HAL_ADC_ConfigChannel+0x20e>
  return __builtin_clz(value);
 80012ec:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012f0:	3201      	adds	r2, #1
 80012f2:	f002 021f 	and.w	r2, r2, #31
 80012f6:	2a09      	cmp	r2, #9
 80012f8:	d816      	bhi.n	8001328 <HAL_ADC_ConfigChannel+0x23c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fa:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80012fe:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001302:	3201      	adds	r2, #1
 8001304:	0692      	lsls	r2, r2, #26
 8001306:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 800130e:	fab1 f181 	clz	r1, r1
 8001312:	3101      	adds	r1, #1
 8001314:	f001 071f 	and.w	r7, r1, #31
 8001318:	2101      	movs	r1, #1
 800131a:	40b9      	lsls	r1, r7
 800131c:	e76a      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x108>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	e76a      	b.n	80011fe <HAL_ADC_ConfigChannel+0x112>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800132c:	fab2 f282 	clz	r2, r2
 8001330:	3201      	adds	r2, #1
 8001332:	0692      	lsls	r2, r2, #26
 8001334:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 800133c:	fab1 f181 	clz	r1, r1
 8001340:	3101      	adds	r1, #1
 8001342:	f001 071f 	and.w	r7, r1, #31
 8001346:	2101      	movs	r1, #1
 8001348:	40b9      	lsls	r1, r7
 800134a:	430a      	orrs	r2, r1
 800134c:	b95e      	cbnz	r6, 8001366 <HAL_ADC_ConfigChannel+0x27a>
 800134e:	0e9e      	lsrs	r6, r3, #26
 8001350:	3601      	adds	r6, #1
 8001352:	f006 061f 	and.w	r6, r6, #31
 8001356:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800135a:	391e      	subs	r1, #30
 800135c:	0509      	lsls	r1, r1, #20
 800135e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001362:	4311      	orrs	r1, r2
 8001364:	e753      	b.n	800120e <HAL_ADC_ConfigChannel+0x122>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 800136a:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800136e:	3101      	adds	r1, #1
 8001370:	f001 031f 	and.w	r3, r1, #31
 8001374:	f06f 061d 	mvn.w	r6, #29
 8001378:	2103      	movs	r1, #3
 800137a:	fb11 6103 	smlabb	r1, r1, r3, r6
 800137e:	e7ed      	b.n	800135c <HAL_ADC_ConfigChannel+0x270>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001380:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <HAL_ADC_ConfigChannel+0x354>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <HAL_ADC_ConfigChannel+0x358>)
 8001384:	6898      	ldr	r0, [r3, #8]
 8001386:	4291      	cmp	r1, r2
 8001388:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
 800138c:	d11e      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x2e0>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800138e:	0202      	lsls	r2, r0, #8
 8001390:	f53f af45 	bmi.w	800121e <HAL_ADC_ConfigChannel+0x132>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001394:	6829      	ldr	r1, [r5, #0]
 8001396:	4a2c      	ldr	r2, [pc, #176]	; (8001448 <HAL_ADC_ConfigChannel+0x35c>)
 8001398:	4291      	cmp	r1, r2
 800139a:	f47f af40 	bne.w	800121e <HAL_ADC_ConfigChannel+0x132>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80013a4:	4322      	orrs	r2, r4
 80013a6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013aa:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_ADC_ConfigChannel+0x360>)
 80013ae:	4a28      	ldr	r2, [pc, #160]	; (8001450 <HAL_ADC_ConfigChannel+0x364>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80013b6:	230c      	movs	r3, #12
 80013b8:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 80013bc:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80013be:	9b01      	ldr	r3, [sp, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f43f af2c 	beq.w	800121e <HAL_ADC_ConfigChannel+0x132>
            wait_loop_index--;
 80013c6:	9b01      	ldr	r3, [sp, #4]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	e7f7      	b.n	80013bc <HAL_ADC_ConfigChannel+0x2d0>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80013cc:	4a21      	ldr	r2, [pc, #132]	; (8001454 <HAL_ADC_ConfigChannel+0x368>)
 80013ce:	4291      	cmp	r1, r2
 80013d0:	d111      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x30a>
 80013d2:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80013d6:	f47f af22 	bne.w	800121e <HAL_ADC_ConfigChannel+0x132>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013da:	6829      	ldr	r1, [r5, #0]
 80013dc:	f1a2 42f7 	sub.w	r2, r2, #2071986176	; 0x7b800000
 80013e0:	4291      	cmp	r1, r2
 80013e2:	f47f af1c 	bne.w	800121e <HAL_ADC_ConfigChannel+0x132>
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80013ec:	4322      	orrs	r2, r4
 80013ee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	e714      	b.n	8001220 <HAL_ADC_ConfigChannel+0x134>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <HAL_ADC_ConfigChannel+0x36c>)
 80013f8:	4291      	cmp	r1, r2
 80013fa:	f47f af10 	bne.w	800121e <HAL_ADC_ConfigChannel+0x132>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80013fe:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001402:	f47f af0c 	bne.w	800121e <HAL_ADC_ConfigChannel+0x132>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001406:	6829      	ldr	r1, [r5, #0]
 8001408:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_ADC_ConfigChannel+0x35c>)
 800140a:	4291      	cmp	r1, r2
 800140c:	f47f af07 	bne.w	800121e <HAL_ADC_ConfigChannel+0x132>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001416:	4322      	orrs	r2, r4
 8001418:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800141c:	e7e9      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x306>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800141e:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8001420:	f042 0220 	orr.w	r2, r2, #32
 8001424:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001426:	4618      	mov	r0, r3
 8001428:	e6fa      	b.n	8001220 <HAL_ADC_ConfigChannel+0x134>
  __HAL_LOCK(hadc);
 800142a:	2002      	movs	r0, #2
 800142c:	e6fb      	b.n	8001226 <HAL_ADC_ConfigChannel+0x13a>
 800142e:	bf00      	nop
 8001430:	03fff000 	.word	0x03fff000
 8001434:	0007ffff 	.word	0x0007ffff
 8001438:	407f0000 	.word	0x407f0000
 800143c:	80080000 	.word	0x80080000
 8001440:	50040300 	.word	0x50040300
 8001444:	c7520000 	.word	0xc7520000
 8001448:	50040000 	.word	0x50040000
 800144c:	20000000 	.word	0x20000000
 8001450:	00030d40 	.word	0x00030d40
 8001454:	cb840000 	.word	0xcb840000
 8001458:	80000001 	.word	0x80000001

0800145c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800145e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001460:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001468:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001478:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001482:	b530      	push	{r4, r5, lr}
 8001484:	68dc      	ldr	r4, [r3, #12]
 8001486:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	2d04      	cmp	r5, #4
 8001492:	bf28      	it	cs
 8001494:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149c:	bf8c      	ite	hi
 800149e:	3c03      	subhi	r4, #3
 80014a0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a2:	fa03 f505 	lsl.w	r5, r3, r5
 80014a6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014aa:	40a3      	lsls	r3, r4
 80014ac:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80014b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	bfac      	ite	ge
 80014ba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	4a08      	ldrlt	r2, [pc, #32]	; (80014e0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	bfb8      	it	lt
 80014c6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	bfaa      	itet	ge
 80014ce:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80014d8:	bd30      	pop	{r4, r5, pc}
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00
 80014e0:	e000ed14 	.word	0xe000ed14

080014e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014e4:	2800      	cmp	r0, #0
 80014e6:	db08      	blt.n	80014fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e8:	2301      	movs	r3, #1
 80014ea:	0942      	lsrs	r2, r0, #5
 80014ec:	f000 001f 	and.w	r0, r0, #31
 80014f0:	fa03 f000 	lsl.w	r0, r3, r0
 80014f4:	4b01      	ldr	r3, [pc, #4]	; (80014fc <HAL_NVIC_EnableIRQ+0x18>)
 80014f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001504:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8001684 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001508:	4c5c      	ldr	r4, [pc, #368]	; (800167c <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 800150a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150c:	680a      	ldr	r2, [r1, #0]
 800150e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001512:	d102      	bne.n	800151a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001514:	b003      	add	sp, #12
 8001516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800151a:	2501      	movs	r5, #1
 800151c:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent != 0x00u)
 8001520:	ea1e 0202 	ands.w	r2, lr, r2
 8001524:	f000 80a0 	beq.w	8001668 <HAL_GPIO_Init+0x168>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001528:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800152a:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800152c:	f006 0503 	and.w	r5, r6, #3
 8001530:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001534:	fa07 fc08 	lsl.w	ip, r7, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001538:	1e6f      	subs	r7, r5, #1
 800153a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800153c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001540:	d834      	bhi.n	80015ac <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001542:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001544:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001548:	68cf      	ldr	r7, [r1, #12]
 800154a:	fa07 f708 	lsl.w	r7, r7, r8
 800154e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001552:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001554:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001556:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155a:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800155e:	409f      	lsls	r7, r3
 8001560:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001564:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001566:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001568:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800156c:	688f      	ldr	r7, [r1, #8]
 800156e:	fa07 f708 	lsl.w	r7, r7, r8
 8001572:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001576:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8001578:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157a:	d119      	bne.n	80015b0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 800157c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001580:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001584:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001588:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800158c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001590:	f04f 0e0f 	mov.w	lr, #15
 8001594:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001598:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800159c:	690f      	ldr	r7, [r1, #16]
 800159e:	fa07 f70b 	lsl.w	r7, r7, fp
 80015a2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80015a6:	f8ca 7020 	str.w	r7, [sl, #32]
 80015aa:	e001      	b.n	80015b0 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ac:	2d03      	cmp	r5, #3
 80015ae:	d1da      	bne.n	8001566 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 80015b0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015b2:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015b6:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ba:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015bc:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 80015c0:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015c2:	d051      	beq.n	8001668 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c4:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80015c8:	f045 0501 	orr.w	r5, r5, #1
 80015cc:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80015d0:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80015d4:	f023 0703 	bic.w	r7, r3, #3
 80015d8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80015dc:	f005 0501 	and.w	r5, r5, #1
 80015e0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80015e4:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e6:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80015ec:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ee:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80015f2:	f04f 0c0f 	mov.w	ip, #15
 80015f6:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015fa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015fe:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001602:	d033      	beq.n	800166c <HAL_GPIO_Init+0x16c>
 8001604:	4d1e      	ldr	r5, [pc, #120]	; (8001680 <HAL_GPIO_Init+0x180>)
 8001606:	42a8      	cmp	r0, r5
 8001608:	d032      	beq.n	8001670 <HAL_GPIO_Init+0x170>
 800160a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800160e:	42a8      	cmp	r0, r5
 8001610:	d030      	beq.n	8001674 <HAL_GPIO_Init+0x174>
 8001612:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001616:	42a8      	cmp	r0, r5
 8001618:	d02e      	beq.n	8001678 <HAL_GPIO_Init+0x178>
 800161a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800161e:	42a8      	cmp	r0, r5
 8001620:	bf0c      	ite	eq
 8001622:	2504      	moveq	r5, #4
 8001624:	2507      	movne	r5, #7
 8001626:	fa05 f50e 	lsl.w	r5, r5, lr
 800162a:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800162e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8001630:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8001632:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001634:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001638:	bf0c      	ite	eq
 800163a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800163c:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 800163e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001640:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001642:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001646:	bf0c      	ite	eq
 8001648:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800164a:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 800164c:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 800164e:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001650:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001654:	bf0c      	ite	eq
 8001656:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001658:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 800165a:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 800165c:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800165e:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8001660:	bf54      	ite	pl
 8001662:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001664:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8001666:	6025      	str	r5, [r4, #0]
    position++;
 8001668:	3301      	adds	r3, #1
 800166a:	e74f      	b.n	800150c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800166c:	2500      	movs	r5, #0
 800166e:	e7da      	b.n	8001626 <HAL_GPIO_Init+0x126>
 8001670:	2501      	movs	r5, #1
 8001672:	e7d8      	b.n	8001626 <HAL_GPIO_Init+0x126>
 8001674:	2502      	movs	r5, #2
 8001676:	e7d6      	b.n	8001626 <HAL_GPIO_Init+0x126>
 8001678:	2503      	movs	r5, #3
 800167a:	e7d4      	b.n	8001626 <HAL_GPIO_Init+0x126>
 800167c:	40010400 	.word	0x40010400
 8001680:	48000400 	.word	0x48000400
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001688:	b10a      	cbz	r2, 800168e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800168a:	6181      	str	r1, [r0, #24]
 800168c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800168e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001690:	4770      	bx	lr

08001692 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001692:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001694:	ea01 0203 	and.w	r2, r1, r3
 8001698:	ea21 0103 	bic.w	r1, r1, r3
 800169c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80016a0:	6181      	str	r1, [r0, #24]
}
 80016a2:	4770      	bx	lr

080016a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a4:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016a6:	4604      	mov	r4, r0
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d04a      	beq.n	8001742 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80016b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016b4:	b91b      	cbnz	r3, 80016be <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016b6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016ba:	f7ff fab7 	bl	8000c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016be:	2324      	movs	r3, #36	; 0x24
 80016c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016ce:	6862      	ldr	r2, [r4, #4]
 80016d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016de:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016e2:	2901      	cmp	r1, #1
 80016e4:	d124      	bne.n	8001730 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ea:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80016f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016f6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001700:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001704:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001706:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001708:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800170c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800170e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	f042 0201 	orr.w	r2, r2, #1
 800171c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800171e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001720:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001722:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001724:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001728:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800172a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 800172e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001730:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001734:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001736:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001738:	bf04      	itt	eq
 800173a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800173e:	605a      	streq	r2, [r3, #4]
 8001740:	e7d4      	b.n	80016ec <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001742:	2001      	movs	r0, #1
 8001744:	e7f3      	b.n	800172e <HAL_I2C_Init+0x8a>

08001746 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001746:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001748:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800174c:	2b20      	cmp	r3, #32
 800174e:	b2dc      	uxtb	r4, r3
 8001750:	d11d      	bne.n	800178e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001752:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001756:	2b01      	cmp	r3, #1
 8001758:	d019      	beq.n	800178e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800175a:	2324      	movs	r3, #36	; 0x24
 800175c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001760:	6803      	ldr	r3, [r0, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001770:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4311      	orrs	r1, r2
 8001776:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001780:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001782:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001786:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800178a:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800178c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800178e:	2002      	movs	r0, #2
 8001790:	e7fc      	b.n	800178c <HAL_I2CEx_ConfigAnalogFilter+0x46>

08001792 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001792:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001794:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001798:	2b20      	cmp	r3, #32
 800179a:	b2dc      	uxtb	r4, r3
 800179c:	d11c      	bne.n	80017d8 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d018      	beq.n	80017d8 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017a6:	2324      	movs	r3, #36	; 0x24
 80017a8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017ac:	6803      	ldr	r3, [r0, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	f022 0201 	bic.w	r2, r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017b6:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017b8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017bc:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017c0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	f042 0201 	orr.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ca:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80017cc:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80017d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80017d4:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80017d6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80017d8:	2002      	movs	r0, #2
 80017da:	e7fc      	b.n	80017d6 <HAL_I2CEx_ConfigDigitalFilter+0x44>

080017dc <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017dc:	4a02      	ldr	r2, [pc, #8]	; (80017e8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80017de:	6813      	ldr	r3, [r2, #0]
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	6013      	str	r3, [r2, #0]
}
 80017e6:	4770      	bx	lr
 80017e8:	40007000 	.word	0x40007000

080017ec <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017ec:	4b02      	ldr	r3, [pc, #8]	; (80017f8 <HAL_PWREx_GetVoltageRange+0xc>)
 80017ee:	6818      	ldr	r0, [r3, #0]
#endif
}
 80017f0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40007000 	.word	0x40007000

080017fc <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017fe:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001800:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001808:	d11d      	bne.n	8001846 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800180a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800180e:	d101      	bne.n	8001814 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001810:	2000      	movs	r0, #0
 8001812:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001814:	6813      	ldr	r3, [r2, #0]
 8001816:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2132      	movs	r1, #50	; 0x32
 8001826:	434b      	muls	r3, r1
 8001828:	490e      	ldr	r1, [pc, #56]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800182a:	fbb3 f3f1 	udiv	r3, r3, r1
 800182e:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001830:	6951      	ldr	r1, [r2, #20]
 8001832:	0549      	lsls	r1, r1, #21
 8001834:	d500      	bpl.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8001836:	b923      	cbnz	r3, 8001842 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001838:	6953      	ldr	r3, [r2, #20]
 800183a:	055b      	lsls	r3, r3, #21
 800183c:	d5e8      	bpl.n	8001810 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 800183e:	2003      	movs	r0, #3
}
 8001840:	4770      	bx	lr
        wait_loop_index--;
 8001842:	3b01      	subs	r3, #1
 8001844:	e7f4      	b.n	8001830 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800184a:	bf1f      	itttt	ne
 800184c:	6813      	ldrne	r3, [r2, #0]
 800184e:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8001852:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8001856:	6013      	strne	r3, [r2, #0]
 8001858:	e7da      	b.n	8001810 <HAL_PWREx_ControlVoltageScaling+0x14>
 800185a:	bf00      	nop
 800185c:	40007000 	.word	0x40007000
 8001860:	20000000 	.word	0x20000000
 8001864:	000f4240 	.word	0x000f4240

08001868 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001868:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800186a:	4d1e      	ldr	r5, [pc, #120]	; (80018e4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800186c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800186e:	00da      	lsls	r2, r3, #3
{
 8001870:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001872:	d518      	bpl.n	80018a6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001874:	f7ff ffba 	bl	80017ec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001878:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800187c:	d123      	bne.n	80018c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800187e:	2c80      	cmp	r4, #128	; 0x80
 8001880:	d929      	bls.n	80018d6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001882:	2ca0      	cmp	r4, #160	; 0xa0
 8001884:	bf8c      	ite	hi
 8001886:	2002      	movhi	r0, #2
 8001888:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800188a:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800188c:	6813      	ldr	r3, [r2, #0]
 800188e:	f023 0307 	bic.w	r3, r3, #7
 8001892:	4303      	orrs	r3, r0
 8001894:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001896:	6813      	ldr	r3, [r2, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800189c:	1a18      	subs	r0, r3, r0
 800189e:	bf18      	it	ne
 80018a0:	2001      	movne	r0, #1
 80018a2:	b003      	add	sp, #12
 80018a4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	65ab      	str	r3, [r5, #88]	; 0x58
 80018ae:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80018b8:	f7ff ff98 	bl	80017ec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80018bc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80018be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c2:	65ab      	str	r3, [r5, #88]	; 0x58
 80018c4:	e7d8      	b.n	8001878 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80018c6:	2c80      	cmp	r4, #128	; 0x80
 80018c8:	d807      	bhi.n	80018da <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80018ca:	d008      	beq.n	80018de <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80018cc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80018d0:	4258      	negs	r0, r3
 80018d2:	4158      	adcs	r0, r3
 80018d4:	e7d9      	b.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018d6:	2000      	movs	r0, #0
 80018d8:	e7d7      	b.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80018da:	2003      	movs	r0, #3
 80018dc:	e7d5      	b.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80018de:	2002      	movs	r0, #2
 80018e0:	e7d3      	b.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40022000 	.word	0x40022000

080018ec <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_RCC_GetSysClockFreq+0x8c>)
 80018ee:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f0:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018f2:	f012 020c 	ands.w	r2, r2, #12
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x18>
 80018f8:	2a0c      	cmp	r2, #12
 80018fa:	d115      	bne.n	8001928 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018fc:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001900:	2901      	cmp	r1, #1
 8001902:	d118      	bne.n	8001936 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001904:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001906:	481d      	ldr	r0, [pc, #116]	; (800197c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001908:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800190a:	bf55      	itete	pl
 800190c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001910:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001912:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001916:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800191a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800191e:	b34a      	cbz	r2, 8001974 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001920:	2a0c      	cmp	r2, #12
 8001922:	d009      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x4c>
 8001924:	2000      	movs	r0, #0
  return sysclockfreq;
 8001926:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001928:	2a04      	cmp	r2, #4
 800192a:	d022      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800192c:	2a08      	cmp	r2, #8
 800192e:	4814      	ldr	r0, [pc, #80]	; (8001980 <HAL_RCC_GetSysClockFreq+0x94>)
 8001930:	bf18      	it	ne
 8001932:	2000      	movne	r0, #0
 8001934:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001936:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800193e:	2a02      	cmp	r2, #2
 8001940:	d015      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0x82>
 8001942:	490f      	ldr	r1, [pc, #60]	; (8001980 <HAL_RCC_GetSysClockFreq+0x94>)
 8001944:	2a03      	cmp	r2, #3
 8001946:	bf08      	it	eq
 8001948:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800194a:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001952:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001954:	68d8      	ldr	r0, [r3, #12]
 8001956:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800195a:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800195e:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001960:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001962:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001964:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001968:	fbb2 f0f0 	udiv	r0, r2, r0
 800196c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <HAL_RCC_GetSysClockFreq+0x98>)
 8001970:	e7eb      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001972:	4804      	ldr	r0, [pc, #16]	; (8001984 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	0801e274 	.word	0x0801e274
 8001980:	007a1200 	.word	0x007a1200
 8001984:	00f42400 	.word	0x00f42400

08001988 <HAL_RCC_OscConfig>:
{
 8001988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800198c:	4605      	mov	r5, r0
 800198e:	b908      	cbnz	r0, 8001994 <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 8001990:	2001      	movs	r0, #1
 8001992:	e047      	b.n	8001a24 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001994:	4c94      	ldr	r4, [pc, #592]	; (8001be8 <HAL_RCC_OscConfig+0x260>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001996:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001998:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800199a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800199c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800199e:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019a6:	d575      	bpl.n	8001a94 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019a8:	b11e      	cbz	r6, 80019b2 <HAL_RCC_OscConfig+0x2a>
 80019aa:	2e0c      	cmp	r6, #12
 80019ac:	d154      	bne.n	8001a58 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ae:	2f01      	cmp	r7, #1
 80019b0:	d152      	bne.n	8001a58 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	0798      	lsls	r0, r3, #30
 80019b6:	d502      	bpl.n	80019be <HAL_RCC_OscConfig+0x36>
 80019b8:	69ab      	ldr	r3, [r5, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0e8      	beq.n	8001990 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	6a28      	ldr	r0, [r5, #32]
 80019c2:	0719      	lsls	r1, r3, #28
 80019c4:	bf56      	itet	pl
 80019c6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80019ca:	6823      	ldrmi	r3, [r4, #0]
 80019cc:	091b      	lsrpl	r3, r3, #4
 80019ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d2:	4298      	cmp	r0, r3
 80019d4:	d929      	bls.n	8001a2a <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d6:	f7ff ff47 	bl	8001868 <RCC_SetFlashLatencyFromMSIRange>
 80019da:	2800      	cmp	r0, #0
 80019dc:	d1d8      	bne.n	8001990 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	6023      	str	r3, [r4, #0]
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	6a2a      	ldr	r2, [r5, #32]
 80019ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ee:	4313      	orrs	r3, r2
 80019f0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f2:	6863      	ldr	r3, [r4, #4]
 80019f4:	69ea      	ldr	r2, [r5, #28]
 80019f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019fe:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a00:	f7ff ff74 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 8001a04:	68a3      	ldr	r3, [r4, #8]
 8001a06:	4a79      	ldr	r2, [pc, #484]	; (8001bec <HAL_RCC_OscConfig+0x264>)
 8001a08:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	40d8      	lsrs	r0, r3
 8001a14:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x268>)
 8001a16:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001a18:	4b76      	ldr	r3, [pc, #472]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	f7ff f9bc 	bl	8000d98 <HAL_InitTick>
        if(status != HAL_OK)
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d037      	beq.n	8001a94 <HAL_RCC_OscConfig+0x10c>
}
 8001a24:	b003      	add	sp, #12
 8001a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	6023      	str	r3, [r4, #0]
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a38:	4303      	orrs	r3, r0
 8001a3a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a3c:	6863      	ldr	r3, [r4, #4]
 8001a3e:	69ea      	ldr	r2, [r5, #28]
 8001a40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a48:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a4a:	2e00      	cmp	r6, #0
 8001a4c:	d1d8      	bne.n	8001a00 <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a4e:	f7ff ff0b 	bl	8001868 <RCC_SetFlashLatencyFromMSIRange>
 8001a52:	2800      	cmp	r0, #0
 8001a54:	d0d4      	beq.n	8001a00 <HAL_RCC_OscConfig+0x78>
 8001a56:	e79b      	b.n	8001990 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a58:	69ab      	ldr	r3, [r5, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d03a      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a66:	f7ff fa3f 	bl	8000ee8 <HAL_GetTick>
 8001a6a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	079a      	lsls	r2, r3, #30
 8001a70:	d528      	bpl.n	8001ac4 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	6023      	str	r3, [r4, #0]
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	6a2a      	ldr	r2, [r5, #32]
 8001a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a82:	4313      	orrs	r3, r2
 8001a84:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a86:	6863      	ldr	r3, [r4, #4]
 8001a88:	69ea      	ldr	r2, [r5, #28]
 8001a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a92:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a94:	682b      	ldr	r3, [r5, #0]
 8001a96:	07d8      	lsls	r0, r3, #31
 8001a98:	d42d      	bmi.n	8001af6 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9a:	682b      	ldr	r3, [r5, #0]
 8001a9c:	0799      	lsls	r1, r3, #30
 8001a9e:	d46b      	bmi.n	8001b78 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa0:	682b      	ldr	r3, [r5, #0]
 8001aa2:	0718      	lsls	r0, r3, #28
 8001aa4:	f100 80a8 	bmi.w	8001bf8 <HAL_RCC_OscConfig+0x270>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	0759      	lsls	r1, r3, #29
 8001aac:	f100 80ce 	bmi.w	8001c4c <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ab0:	682b      	ldr	r3, [r5, #0]
 8001ab2:	0699      	lsls	r1, r3, #26
 8001ab4:	f100 8137 	bmi.w	8001d26 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ab8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 815d 	bne.w	8001d7a <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	e7af      	b.n	8001a24 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fa10 	bl	8000ee8 <HAL_GetTick>
 8001ac8:	eba0 0008 	sub.w	r0, r0, r8
 8001acc:	2802      	cmp	r0, #2
 8001ace:	d9cd      	bls.n	8001a6c <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	e7a7      	b.n	8001a24 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001adc:	f7ff fa04 	bl	8000ee8 <HAL_GetTick>
 8001ae0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	079b      	lsls	r3, r3, #30
 8001ae6:	d5d5      	bpl.n	8001a94 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae8:	f7ff f9fe 	bl	8000ee8 <HAL_GetTick>
 8001aec:	eba0 0008 	sub.w	r0, r0, r8
 8001af0:	2802      	cmp	r0, #2
 8001af2:	d9f6      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x15a>
 8001af4:	e7ec      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001af6:	2e08      	cmp	r6, #8
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_OscConfig+0x17a>
 8001afa:	2e0c      	cmp	r6, #12
 8001afc:	d108      	bne.n	8001b10 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001afe:	2f03      	cmp	r7, #3
 8001b00:	d106      	bne.n	8001b10 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	039a      	lsls	r2, r3, #14
 8001b06:	d5c8      	bpl.n	8001a9a <HAL_RCC_OscConfig+0x112>
 8001b08:	686b      	ldr	r3, [r5, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1c5      	bne.n	8001a9a <HAL_RCC_OscConfig+0x112>
 8001b0e:	e73f      	b.n	8001990 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b10:	686b      	ldr	r3, [r5, #4]
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b16:	d110      	bne.n	8001b3a <HAL_RCC_OscConfig+0x1b2>
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b20:	f7ff f9e2 	bl	8000ee8 <HAL_GetTick>
 8001b24:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	039b      	lsls	r3, r3, #14
 8001b2a:	d4b6      	bmi.n	8001a9a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f9dc 	bl	8000ee8 <HAL_GetTick>
 8001b30:	eba0 0008 	sub.w	r0, r0, r8
 8001b34:	2864      	cmp	r0, #100	; 0x64
 8001b36:	d9f6      	bls.n	8001b26 <HAL_RCC_OscConfig+0x19e>
 8001b38:	e7ca      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b3e:	d104      	bne.n	8001b4a <HAL_RCC_OscConfig+0x1c2>
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b46:	6023      	str	r3, [r4, #0]
 8001b48:	e7e6      	b.n	8001b18 <HAL_RCC_OscConfig+0x190>
 8001b4a:	6822      	ldr	r2, [r4, #0]
 8001b4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b50:	6022      	str	r2, [r4, #0]
 8001b52:	6822      	ldr	r2, [r4, #0]
 8001b54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b58:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1e0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f9c3 	bl	8000ee8 <HAL_GetTick>
 8001b62:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	0398      	lsls	r0, r3, #14
 8001b68:	d597      	bpl.n	8001a9a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6a:	f7ff f9bd 	bl	8000ee8 <HAL_GetTick>
 8001b6e:	eba0 0008 	sub.w	r0, r0, r8
 8001b72:	2864      	cmp	r0, #100	; 0x64
 8001b74:	d9f6      	bls.n	8001b64 <HAL_RCC_OscConfig+0x1dc>
 8001b76:	e7ab      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b78:	2e04      	cmp	r6, #4
 8001b7a:	d003      	beq.n	8001b84 <HAL_RCC_OscConfig+0x1fc>
 8001b7c:	2e0c      	cmp	r6, #12
 8001b7e:	d110      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b80:	2f02      	cmp	r7, #2
 8001b82:	d10e      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	0559      	lsls	r1, r3, #21
 8001b88:	d503      	bpl.n	8001b92 <HAL_RCC_OscConfig+0x20a>
 8001b8a:	68eb      	ldr	r3, [r5, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f43f aeff 	beq.w	8001990 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b92:	6863      	ldr	r3, [r4, #4]
 8001b94:	692a      	ldr	r2, [r5, #16]
 8001b96:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001b9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b9e:	6063      	str	r3, [r4, #4]
 8001ba0:	e77e      	b.n	8001aa0 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba2:	68eb      	ldr	r3, [r5, #12]
 8001ba4:	b17b      	cbz	r3, 8001bc6 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bae:	f7ff f99b 	bl	8000ee8 <HAL_GetTick>
 8001bb2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	055a      	lsls	r2, r3, #21
 8001bb8:	d4eb      	bmi.n	8001b92 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff f995 	bl	8000ee8 <HAL_GetTick>
 8001bbe:	1bc0      	subs	r0, r0, r7
 8001bc0:	2802      	cmp	r0, #2
 8001bc2:	d9f7      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x22c>
 8001bc4:	e784      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8001bc6:	6823      	ldr	r3, [r4, #0]
 8001bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bcc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bce:	f7ff f98b 	bl	8000ee8 <HAL_GetTick>
 8001bd2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	055b      	lsls	r3, r3, #21
 8001bd8:	f57f af62 	bpl.w	8001aa0 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bdc:	f7ff f984 	bl	8000ee8 <HAL_GetTick>
 8001be0:	1bc0      	subs	r0, r0, r7
 8001be2:	2802      	cmp	r0, #2
 8001be4:	d9f6      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x24c>
 8001be6:	e773      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
 8001be8:	40021000 	.word	0x40021000
 8001bec:	0801e25c 	.word	0x0801e25c
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf8:	696b      	ldr	r3, [r5, #20]
 8001bfa:	b19b      	cbz	r3, 8001c24 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 8001bfc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001c08:	f7ff f96e 	bl	8000ee8 <HAL_GetTick>
 8001c0c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001c12:	079a      	lsls	r2, r3, #30
 8001c14:	f53f af48 	bmi.w	8001aa8 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c18:	f7ff f966 	bl	8000ee8 <HAL_GetTick>
 8001c1c:	1bc0      	subs	r0, r0, r7
 8001c1e:	2802      	cmp	r0, #2
 8001c20:	d9f5      	bls.n	8001c0e <HAL_RCC_OscConfig+0x286>
 8001c22:	e755      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 8001c24:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001c30:	f7ff f95a 	bl	8000ee8 <HAL_GetTick>
 8001c34:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c36:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001c3a:	079b      	lsls	r3, r3, #30
 8001c3c:	f57f af34 	bpl.w	8001aa8 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c40:	f7ff f952 	bl	8000ee8 <HAL_GetTick>
 8001c44:	1bc0      	subs	r0, r0, r7
 8001c46:	2802      	cmp	r0, #2
 8001c48:	d9f5      	bls.n	8001c36 <HAL_RCC_OscConfig+0x2ae>
 8001c4a:	e741      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c4e:	00d8      	lsls	r0, r3, #3
 8001c50:	d429      	bmi.n	8001ca6 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	65a3      	str	r3, [r4, #88]	; 0x58
 8001c5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c64:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c68:	4f96      	ldr	r7, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x53c>)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	05d9      	lsls	r1, r3, #23
 8001c6e:	d51d      	bpl.n	8001cac <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c70:	68ab      	ldr	r3, [r5, #8]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d12b      	bne.n	8001cce <HAL_RCC_OscConfig+0x346>
 8001c76:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001c82:	f7ff f931 	bl	8000ee8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c8a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001c90:	079b      	lsls	r3, r3, #30
 8001c92:	d542      	bpl.n	8001d1a <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8001c94:	f1b8 0f00 	cmp.w	r8, #0
 8001c98:	f43f af0a 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	65a3      	str	r3, [r4, #88]	; 0x58
 8001ca4:	e704      	b.n	8001ab0 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 8001ca6:	f04f 0800 	mov.w	r8, #0
 8001caa:	e7dd      	b.n	8001c68 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f918 	bl	8000ee8 <HAL_GetTick>
 8001cb8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	05da      	lsls	r2, r3, #23
 8001cbe:	d4d7      	bmi.n	8001c70 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc0:	f7ff f912 	bl	8000ee8 <HAL_GetTick>
 8001cc4:	eba0 0009 	sub.w	r0, r0, r9
 8001cc8:	2802      	cmp	r0, #2
 8001cca:	d9f6      	bls.n	8001cba <HAL_RCC_OscConfig+0x332>
 8001ccc:	e700      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cce:	2b05      	cmp	r3, #5
 8001cd0:	d106      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x358>
 8001cd2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001cde:	e7ca      	b.n	8001c76 <HAL_RCC_OscConfig+0x2ee>
 8001ce0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001cec:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001cf0:	f022 0204 	bic.w	r2, r2, #4
 8001cf4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1c2      	bne.n	8001c82 <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 8001cfc:	f7ff f8f4 	bl	8000ee8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d04:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d06:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d0a:	0798      	lsls	r0, r3, #30
 8001d0c:	d5c2      	bpl.n	8001c94 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7ff f8eb 	bl	8000ee8 <HAL_GetTick>
 8001d12:	1bc0      	subs	r0, r0, r7
 8001d14:	4548      	cmp	r0, r9
 8001d16:	d9f6      	bls.n	8001d06 <HAL_RCC_OscConfig+0x37e>
 8001d18:	e6da      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff f8e5 	bl	8000ee8 <HAL_GetTick>
 8001d1e:	1bc0      	subs	r0, r0, r7
 8001d20:	4548      	cmp	r0, r9
 8001d22:	d9b3      	bls.n	8001c8c <HAL_RCC_OscConfig+0x304>
 8001d24:	e6d4      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001d28:	b19b      	cbz	r3, 8001d52 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 8001d2a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001d36:	f7ff f8d7 	bl	8000ee8 <HAL_GetTick>
 8001d3a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d3c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001d40:	079a      	lsls	r2, r3, #30
 8001d42:	f53f aeb9 	bmi.w	8001ab8 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d46:	f7ff f8cf 	bl	8000ee8 <HAL_GetTick>
 8001d4a:	1bc0      	subs	r0, r0, r7
 8001d4c:	2802      	cmp	r0, #2
 8001d4e:	d9f5      	bls.n	8001d3c <HAL_RCC_OscConfig+0x3b4>
 8001d50:	e6be      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8001d52:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f8c3 	bl	8000ee8 <HAL_GetTick>
 8001d62:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d64:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001d68:	079b      	lsls	r3, r3, #30
 8001d6a:	f57f aea5 	bpl.w	8001ab8 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d6e:	f7ff f8bb 	bl	8000ee8 <HAL_GetTick>
 8001d72:	1bc0      	subs	r0, r0, r7
 8001d74:	2802      	cmp	r0, #2
 8001d76:	d9f5      	bls.n	8001d64 <HAL_RCC_OscConfig+0x3dc>
 8001d78:	e6aa      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	f040 8088 	bne.w	8001e90 <HAL_RCC_OscConfig+0x508>
      pll_config = RCC->PLLCFGR;
 8001d80:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001d84:	f003 0103 	and.w	r1, r3, #3
 8001d88:	4291      	cmp	r1, r2
 8001d8a:	d122      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d8c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001d8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d92:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d94:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001d98:	d11b      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001d9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001da4:	d115      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001da6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001da8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dac:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001db0:	d10f      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001db4:	0852      	lsrs	r2, r2, #1
 8001db6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001dba:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dbc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001dc4:	0852      	lsrs	r2, r2, #1
 8001dc6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001dca:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dcc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001dd0:	d045      	beq.n	8001e5e <HAL_RCC_OscConfig+0x4d6>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd2:	2e0c      	cmp	r6, #12
 8001dd4:	f43f addc 	beq.w	8001990 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	015e      	lsls	r6, r3, #5
 8001ddc:	f53f add8 	bmi.w	8001990 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de6:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8001de8:	f7ff f87e 	bl	8000ee8 <HAL_GetTick>
 8001dec:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	0198      	lsls	r0, r3, #6
 8001df2:	d42e      	bmi.n	8001e52 <HAL_RCC_OscConfig+0x4ca>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df4:	68e2      	ldr	r2, [r4, #12]
 8001df6:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <HAL_RCC_OscConfig+0x540>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001e00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e04:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001e06:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8001e0a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001e0c:	3a01      	subs	r2, #1
 8001e0e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001e12:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001e14:	0852      	lsrs	r2, r2, #1
 8001e16:	3a01      	subs	r2, #1
 8001e18:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001e1c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001e1e:	0852      	lsrs	r2, r2, #1
 8001e20:	3a01      	subs	r2, #1
 8001e22:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001e26:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e30:	68e3      	ldr	r3, [r4, #12]
 8001e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e36:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8001e38:	f7ff f856 	bl	8000ee8 <HAL_GetTick>
 8001e3c:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	0199      	lsls	r1, r3, #6
 8001e42:	f53f ae3d 	bmi.w	8001ac0 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e46:	f7ff f84f 	bl	8000ee8 <HAL_GetTick>
 8001e4a:	1b40      	subs	r0, r0, r5
 8001e4c:	2802      	cmp	r0, #2
 8001e4e:	d9f6      	bls.n	8001e3e <HAL_RCC_OscConfig+0x4b6>
 8001e50:	e63e      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f849 	bl	8000ee8 <HAL_GetTick>
 8001e56:	1b80      	subs	r0, r0, r6
 8001e58:	2802      	cmp	r0, #2
 8001e5a:	d9c8      	bls.n	8001dee <HAL_RCC_OscConfig+0x466>
 8001e5c:	e638      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	019a      	lsls	r2, r3, #6
 8001e62:	f53f ae2d 	bmi.w	8001ac0 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e6e:	68e3      	ldr	r3, [r4, #12]
 8001e70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e74:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001e76:	f7ff f837 	bl	8000ee8 <HAL_GetTick>
 8001e7a:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	019b      	lsls	r3, r3, #6
 8001e80:	f53f ae1e 	bmi.w	8001ac0 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff f830 	bl	8000ee8 <HAL_GetTick>
 8001e88:	1b40      	subs	r0, r0, r5
 8001e8a:	2802      	cmp	r0, #2
 8001e8c:	d9f6      	bls.n	8001e7c <HAL_RCC_OscConfig+0x4f4>
 8001e8e:	e61f      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e90:	2e0c      	cmp	r6, #12
 8001e92:	f43f ad7d 	beq.w	8001990 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e9e:	f7ff f823 	bl	8000ee8 <HAL_GetTick>
 8001ea2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	d104      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x52e>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001eac:	68e1      	ldr	r1, [r4, #12]
 8001eae:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <HAL_RCC_OscConfig+0x544>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	60e2      	str	r2, [r4, #12]
 8001eb4:	e604      	b.n	8001ac0 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff f817 	bl	8000ee8 <HAL_GetTick>
 8001eba:	1b40      	subs	r0, r0, r5
 8001ebc:	2802      	cmp	r0, #2
 8001ebe:	d9f1      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x51c>
 8001ec0:	e606      	b.n	8001ad0 <HAL_RCC_OscConfig+0x148>
 8001ec2:	bf00      	nop
 8001ec4:	40007000 	.word	0x40007000
 8001ec8:	019d808c 	.word	0x019d808c
 8001ecc:	feeefffc 	.word	0xfeeefffc

08001ed0 <HAL_RCC_ClockConfig>:
{
 8001ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	b910      	cbnz	r0, 8001ee0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001eda:	2001      	movs	r0, #1
}
 8001edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4a4b      	ldr	r2, [pc, #300]	; (8002010 <HAL_RCC_ClockConfig+0x140>)
 8001ee2:	6813      	ldr	r3, [r2, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	428b      	cmp	r3, r1
 8001eea:	d32c      	bcc.n	8001f46 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eec:	6820      	ldr	r0, [r4, #0]
 8001eee:	0786      	lsls	r6, r0, #30
 8001ef0:	d434      	bmi.n	8001f5c <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef2:	07c1      	lsls	r1, r0, #31
 8001ef4:	d43f      	bmi.n	8001f76 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef6:	6821      	ldr	r1, [r4, #0]
 8001ef8:	078a      	lsls	r2, r1, #30
 8001efa:	d468      	bmi.n	8001fce <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001efc:	4a44      	ldr	r2, [pc, #272]	; (8002010 <HAL_RCC_ClockConfig+0x140>)
 8001efe:	6813      	ldr	r3, [r2, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	42ab      	cmp	r3, r5
 8001f06:	d86f      	bhi.n	8001fe8 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	f011 0f04 	tst.w	r1, #4
 8001f0c:	4d41      	ldr	r5, [pc, #260]	; (8002014 <HAL_RCC_ClockConfig+0x144>)
 8001f0e:	d177      	bne.n	8002000 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f10:	070b      	lsls	r3, r1, #28
 8001f12:	d506      	bpl.n	8001f22 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f14:	68ab      	ldr	r3, [r5, #8]
 8001f16:	6922      	ldr	r2, [r4, #16]
 8001f18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001f1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f20:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f22:	f7ff fce3 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 8001f26:	68ab      	ldr	r3, [r5, #8]
 8001f28:	4a3b      	ldr	r2, [pc, #236]	; (8002018 <HAL_RCC_ClockConfig+0x148>)
 8001f2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f32:	5cd3      	ldrb	r3, [r2, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	40d8      	lsrs	r0, r3
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <HAL_RCC_ClockConfig+0x14c>)
 8001f3c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001f3e:	4b38      	ldr	r3, [pc, #224]	; (8002020 <HAL_RCC_ClockConfig+0x150>)
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	f7fe bf29 	b.w	8000d98 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	6813      	ldr	r3, [r2, #0]
 8001f48:	f023 0307 	bic.w	r3, r3, #7
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f50:	6813      	ldr	r3, [r2, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	428b      	cmp	r3, r1
 8001f58:	d1bf      	bne.n	8001eda <HAL_RCC_ClockConfig+0xa>
 8001f5a:	e7c7      	b.n	8001eec <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f5c:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <HAL_RCC_ClockConfig+0x144>)
 8001f5e:	68a6      	ldr	r6, [r4, #8]
 8001f60:	6891      	ldr	r1, [r2, #8]
 8001f62:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8001f66:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f68:	bf81      	itttt	hi
 8001f6a:	6893      	ldrhi	r3, [r2, #8]
 8001f6c:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8001f70:	4333      	orrhi	r3, r6
 8001f72:	6093      	strhi	r3, [r2, #8]
 8001f74:	e7bd      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f76:	6862      	ldr	r2, [r4, #4]
 8001f78:	4e26      	ldr	r6, [pc, #152]	; (8002014 <HAL_RCC_ClockConfig+0x144>)
 8001f7a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7e:	d11a      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f80:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f84:	d0a9      	beq.n	8001eda <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	68b3      	ldr	r3, [r6, #8]
 8001f88:	f023 0303 	bic.w	r3, r3, #3
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f90:	f7fe ffaa 	bl	8000ee8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001f98:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	68b3      	ldr	r3, [r6, #8]
 8001f9c:	6862      	ldr	r2, [r4, #4]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fa6:	d0a6      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa8:	f7fe ff9e 	bl	8000ee8 <HAL_GetTick>
 8001fac:	1bc0      	subs	r0, r0, r7
 8001fae:	4540      	cmp	r0, r8
 8001fb0:	d9f3      	bls.n	8001f9a <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8001fb2:	2003      	movs	r0, #3
 8001fb4:	e792      	b.n	8001edc <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	2a02      	cmp	r2, #2
 8001fb8:	d102      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fbe:	e7e1      	b.n	8001f84 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fc0:	b912      	cbnz	r2, 8001fc8 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc2:	f013 0f02 	tst.w	r3, #2
 8001fc6:	e7dd      	b.n	8001f84 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001fcc:	e7da      	b.n	8001f84 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fce:	4a11      	ldr	r2, [pc, #68]	; (8002014 <HAL_RCC_ClockConfig+0x144>)
 8001fd0:	68a6      	ldr	r6, [r4, #8]
 8001fd2:	6890      	ldr	r0, [r2, #8]
 8001fd4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8001fd8:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fda:	bf3f      	itttt	cc
 8001fdc:	6893      	ldrcc	r3, [r2, #8]
 8001fde:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8001fe2:	4333      	orrcc	r3, r6
 8001fe4:	6093      	strcc	r3, [r2, #8]
 8001fe6:	e789      	b.n	8001efc <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe8:	6813      	ldr	r3, [r2, #0]
 8001fea:	f023 0307 	bic.w	r3, r3, #7
 8001fee:	432b      	orrs	r3, r5
 8001ff0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	6813      	ldr	r3, [r2, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	42ab      	cmp	r3, r5
 8001ffa:	f47f af6e 	bne.w	8001eda <HAL_RCC_ClockConfig+0xa>
 8001ffe:	e783      	b.n	8001f08 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002000:	68ab      	ldr	r3, [r5, #8]
 8002002:	68e2      	ldr	r2, [r4, #12]
 8002004:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002008:	4313      	orrs	r3, r2
 800200a:	60ab      	str	r3, [r5, #8]
 800200c:	e780      	b.n	8001f10 <HAL_RCC_ClockConfig+0x40>
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000
 8002014:	40021000 	.word	0x40021000
 8002018:	0801e25c 	.word	0x0801e25c
 800201c:	20000000 	.word	0x20000000
 8002020:	20000008 	.word	0x20000008

08002024 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002026:	4a06      	ldr	r2, [pc, #24]	; (8002040 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800202e:	5cd3      	ldrb	r3, [r2, r3]
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002032:	6810      	ldr	r0, [r2, #0]
 8002034:	f003 031f 	and.w	r3, r3, #31
}
 8002038:	40d8      	lsrs	r0, r3
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000
 8002040:	0801e26c 	.word	0x0801e26c
 8002044:	20000000 	.word	0x20000000

08002048 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_RCC_GetPCLK2Freq+0x18>)
 800204a:	4a06      	ldr	r2, [pc, #24]	; (8002064 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002052:	5cd3      	ldrb	r3, [r2, r3]
 8002054:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002056:	6810      	ldr	r0, [r2, #0]
 8002058:	f003 031f 	and.w	r3, r3, #31
}
 800205c:	40d8      	lsrs	r0, r3
 800205e:	4770      	bx	lr
 8002060:	40021000 	.word	0x40021000
 8002064:	0801e26c 	.word	0x0801e26c
 8002068:	20000000 	.word	0x20000000

0800206c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800206c:	230f      	movs	r3, #15
 800206e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_GetClockConfig+0x34>)
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002080:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002088:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	08db      	lsrs	r3, r3, #3
 800208e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002092:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_RCC_GetClockConfig+0x38>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	600b      	str	r3, [r1, #0]
}
 800209e:	4770      	bx	lr
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40022000 	.word	0x40022000

080020a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020aa:	4c43      	ldr	r4, [pc, #268]	; (80021b8 <RCCEx_PLLSAI1_Config+0x110>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80020ac:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020ae:	68e2      	ldr	r2, [r4, #12]
{
 80020b0:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020b2:	0790      	lsls	r0, r2, #30
{
 80020b4:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020b6:	d039      	beq.n	800212c <RCCEx_PLLSAI1_Config+0x84>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80020b8:	68e2      	ldr	r2, [r4, #12]
 80020ba:	f002 0203 	and.w	r2, r2, #3
 80020be:	429a      	cmp	r2, r3
 80020c0:	d177      	bne.n	80021b2 <RCCEx_PLLSAI1_Config+0x10a>
       ||
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	d075      	beq.n	80021b2 <RCCEx_PLLSAI1_Config+0x10a>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80020c6:	68e3      	ldr	r3, [r4, #12]
       ||
 80020c8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80020ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80020ce:	3301      	adds	r3, #1
       ||
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d16e      	bne.n	80021b2 <RCCEx_PLLSAI1_Config+0x10a>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020da:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020dc:	f7fe ff04 	bl	8000ee8 <HAL_GetTick>
 80020e0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	011a      	lsls	r2, r3, #4
 80020e6:	d440      	bmi.n	800216a <RCCEx_PLLSAI1_Config+0xc2>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020e8:	68ab      	ldr	r3, [r5, #8]
 80020ea:	0218      	lsls	r0, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80020ec:	2e00      	cmp	r6, #0
 80020ee:	d043      	beq.n	8002178 <RCCEx_PLLSAI1_Config+0xd0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80020f0:	2e01      	cmp	r6, #1
 80020f2:	d14c      	bne.n	800218e <RCCEx_PLLSAI1_Config+0xe6>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020f4:	692a      	ldr	r2, [r5, #16]
 80020f6:	6921      	ldr	r1, [r4, #16]
 80020f8:	0852      	lsrs	r2, r2, #1
 80020fa:	1e53      	subs	r3, r2, #1
 80020fc:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 8002100:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002104:	4302      	orrs	r2, r0
 8002106:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 800210a:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002112:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe fee8 	bl	8000ee8 <HAL_GetTick>
 8002118:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	d542      	bpl.n	80021a6 <RCCEx_PLLSAI1_Config+0xfe>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002120:	6923      	ldr	r3, [r4, #16]
 8002122:	69aa      	ldr	r2, [r5, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	6123      	str	r3, [r4, #16]
 8002128:	2000      	movs	r0, #0
      }
    }
  }

  return status;
 800212a:	e024      	b.n	8002176 <RCCEx_PLLSAI1_Config+0xce>
    switch(PllSai1->PLLSAI1Source)
 800212c:	2b02      	cmp	r3, #2
 800212e:	d011      	beq.n	8002154 <RCCEx_PLLSAI1_Config+0xac>
 8002130:	2b03      	cmp	r3, #3
 8002132:	d013      	beq.n	800215c <RCCEx_PLLSAI1_Config+0xb4>
 8002134:	2b01      	cmp	r3, #1
 8002136:	d13c      	bne.n	80021b2 <RCCEx_PLLSAI1_Config+0x10a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002138:	6822      	ldr	r2, [r4, #0]
 800213a:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800213e:	d038      	beq.n	80021b2 <RCCEx_PLLSAI1_Config+0x10a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002140:	68e0      	ldr	r0, [r4, #12]
 8002142:	686a      	ldr	r2, [r5, #4]
 8002144:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 8002148:	3a01      	subs	r2, #1
 800214a:	4318      	orrs	r0, r3
 800214c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002150:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8002152:	e7bf      	b.n	80020d4 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002154:	6822      	ldr	r2, [r4, #0]
 8002156:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800215a:	e7f0      	b.n	800213e <RCCEx_PLLSAI1_Config+0x96>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800215c:	6822      	ldr	r2, [r4, #0]
 800215e:	0391      	lsls	r1, r2, #14
 8002160:	d4ee      	bmi.n	8002140 <RCCEx_PLLSAI1_Config+0x98>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002162:	6822      	ldr	r2, [r4, #0]
 8002164:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002168:	e7e9      	b.n	800213e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800216a:	f7fe febd 	bl	8000ee8 <HAL_GetTick>
 800216e:	1bc0      	subs	r0, r0, r7
 8002170:	2802      	cmp	r0, #2
 8002172:	d9b6      	bls.n	80020e2 <RCCEx_PLLSAI1_Config+0x3a>
        status = HAL_TIMEOUT;
 8002174:	2003      	movs	r0, #3
}
 8002176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002178:	6922      	ldr	r2, [r4, #16]
 800217a:	68eb      	ldr	r3, [r5, #12]
 800217c:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
 8002180:	f022 4078 	bic.w	r0, r2, #4160749568	; 0xf8000000
 8002184:	f420 40fe 	bic.w	r0, r0, #32512	; 0x7f00
 8002188:	4303      	orrs	r3, r0
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800218a:	6123      	str	r3, [r4, #16]
 800218c:	e7be      	b.n	800210c <RCCEx_PLLSAI1_Config+0x64>
 800218e:	696b      	ldr	r3, [r5, #20]
 8002190:	6922      	ldr	r2, [r4, #16]
 8002192:	085b      	lsrs	r3, r3, #1
 8002194:	1e59      	subs	r1, r3, #1
 8002196:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800219a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800219e:	4303      	orrs	r3, r0
 80021a0:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80021a4:	e7f1      	b.n	800218a <RCCEx_PLLSAI1_Config+0xe2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021a6:	f7fe fe9f 	bl	8000ee8 <HAL_GetTick>
 80021aa:	1b80      	subs	r0, r0, r6
 80021ac:	2802      	cmp	r0, #2
 80021ae:	d9b4      	bls.n	800211a <RCCEx_PLLSAI1_Config+0x72>
 80021b0:	e7e0      	b.n	8002174 <RCCEx_PLLSAI1_Config+0xcc>
      status = HAL_ERROR;
 80021b2:	2001      	movs	r0, #1
 80021b4:	e7df      	b.n	8002176 <RCCEx_PLLSAI1_Config+0xce>
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000

080021bc <HAL_RCCEx_PeriphCLKConfig>:
{
 80021bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021c0:	6805      	ldr	r5, [r0, #0]
 80021c2:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80021c6:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021c8:	d009      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 80021ca:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80021cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80021d0:	d035      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x82>
 80021d2:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80021d6:	d037      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80021d8:	2900      	cmp	r1, #0
 80021da:	d040      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80021dc:	2501      	movs	r5, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	039e      	lsls	r6, r3, #14
 80021e2:	d551      	bpl.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021e4:	4eaf      	ldr	r6, [pc, #700]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021e6:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80021e8:	00d8      	lsls	r0, r3, #3
 80021ea:	d43f      	bmi.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f2:	65b3      	str	r3, [r6, #88]	; 0x58
 80021f4:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021fe:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002200:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8002204:	f8d8 3000 	ldr.w	r3, [r8]
 8002208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220c:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8002210:	f7fe fe6a 	bl	8000ee8 <HAL_GetTick>
 8002214:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002216:	f8d8 3000 	ldr.w	r3, [r8]
 800221a:	05d9      	lsls	r1, r3, #23
 800221c:	d528      	bpl.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    if(ret == HAL_OK)
 800221e:	bb75      	cbnz	r5, 800227e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002220:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002224:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002228:	f040 80f0 	bne.w	800240c <HAL_RCCEx_PeriphCLKConfig+0x250>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800222c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002230:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 800223c:	e01f      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800223e:	4a99      	ldr	r2, [pc, #612]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002240:	68d3      	ldr	r3, [r2, #12]
 8002242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002246:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002248:	4a96      	ldr	r2, [pc, #600]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800224a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800224c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002250:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002254:	430b      	orrs	r3, r1
 8002256:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800225a:	2500      	movs	r5, #0
 800225c:	e7bf      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x22>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800225e:	3004      	adds	r0, #4
 8002260:	f7ff ff22 	bl	80020a8 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8002264:	4605      	mov	r5, r0
 8002266:	2800      	cmp	r0, #0
 8002268:	d1b9      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x22>
 800226a:	e7ed      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    FlagStatus       pwrclkchanged = RESET;
 800226c:	2700      	movs	r7, #0
 800226e:	e7c7      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x44>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002270:	f7fe fe3a 	bl	8000ee8 <HAL_GetTick>
 8002274:	eba0 0009 	sub.w	r0, r0, r9
 8002278:	2802      	cmp	r0, #2
 800227a:	d9cc      	bls.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = HAL_TIMEOUT;
 800227c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800227e:	b11f      	cbz	r7, 8002288 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002280:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002286:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	07d8      	lsls	r0, r3, #31
 800228c:	d508      	bpl.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800228e:	4985      	ldr	r1, [pc, #532]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002290:	6a20      	ldr	r0, [r4, #32]
 8002292:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002296:	f022 0203 	bic.w	r2, r2, #3
 800229a:	4302      	orrs	r2, r0
 800229c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022a0:	0799      	lsls	r1, r3, #30
 80022a2:	d508      	bpl.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022a4:	497f      	ldr	r1, [pc, #508]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80022a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022ac:	f022 020c 	bic.w	r2, r2, #12
 80022b0:	4302      	orrs	r2, r0
 80022b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022b6:	075a      	lsls	r2, r3, #29
 80022b8:	d508      	bpl.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ba:	497a      	ldr	r1, [pc, #488]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80022be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022c2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80022c6:	4302      	orrs	r2, r0
 80022c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022cc:	069f      	lsls	r7, r3, #26
 80022ce:	d508      	bpl.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022d0:	4974      	ldr	r1, [pc, #464]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80022d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80022dc:	4302      	orrs	r2, r0
 80022de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022e2:	059e      	lsls	r6, r3, #22
 80022e4:	d508      	bpl.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022e6:	496f      	ldr	r1, [pc, #444]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80022ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022ee:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80022f2:	4302      	orrs	r2, r0
 80022f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022f8:	0558      	lsls	r0, r3, #21
 80022fa:	d508      	bpl.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022fc:	4969      	ldr	r1, [pc, #420]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002300:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002304:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002308:	4302      	orrs	r2, r0
 800230a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800230e:	0659      	lsls	r1, r3, #25
 8002310:	d508      	bpl.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002312:	4964      	ldr	r1, [pc, #400]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002314:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002316:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800231a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800231e:	4302      	orrs	r2, r0
 8002320:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002324:	061a      	lsls	r2, r3, #24
 8002326:	d508      	bpl.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002328:	495e      	ldr	r1, [pc, #376]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800232a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800232c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002330:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002334:	4302      	orrs	r2, r0
 8002336:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800233a:	05df      	lsls	r7, r3, #23
 800233c:	d508      	bpl.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800233e:	4959      	ldr	r1, [pc, #356]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002340:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002342:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002346:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800234a:	4302      	orrs	r2, r0
 800234c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002350:	049e      	lsls	r6, r3, #18
 8002352:	d50f      	bpl.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002354:	4a53      	ldr	r2, [pc, #332]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002356:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002358:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800235c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002360:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002362:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002366:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800236a:	d179      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800236c:	68d3      	ldr	r3, [r2, #12]
 800236e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002372:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	0318      	lsls	r0, r3, #12
 8002378:	d50f      	bpl.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800237a:	4a4a      	ldr	r2, [pc, #296]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800237c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800237e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002382:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002386:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002388:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800238c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002390:	d171      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002392:	68d3      	ldr	r3, [r2, #12]
 8002394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002398:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	0359      	lsls	r1, r3, #13
 800239e:	d50f      	bpl.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023a0:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023a2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80023a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023a8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80023ac:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ae:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023b6:	d169      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b8:	68d3      	ldr	r3, [r2, #12]
 80023ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023be:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	045a      	lsls	r2, r3, #17
 80023c4:	d512      	bpl.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x230>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023c6:	4937      	ldr	r1, [pc, #220]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80023ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80023ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80023d2:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023d4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023dc:	d106      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x230>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023de:	2102      	movs	r1, #2
 80023e0:	1d20      	adds	r0, r4, #4
 80023e2:	f7ff fe61 	bl	80020a8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80023e6:	2800      	cmp	r0, #0
 80023e8:	bf18      	it	ne
 80023ea:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	d508      	bpl.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023f2:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023f4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80023f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023fe:	430b      	orrs	r3, r1
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002404:	4628      	mov	r0, r5
 8002406:	b003      	add	sp, #12
 8002408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800240c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800240e:	4293      	cmp	r3, r2
 8002410:	f43f af0c 	beq.w	800222c <HAL_RCCEx_PeriphCLKConfig+0x70>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002414:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002418:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002424:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002428:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800242c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002430:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002432:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002436:	f8c6 1090 	str.w	r1, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800243a:	f57f aef7 	bpl.w	800222c <HAL_RCCEx_PeriphCLKConfig+0x70>
        tickstart = HAL_GetTick();
 800243e:	f7fe fd53 	bl	8000ee8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002446:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002448:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800244c:	079b      	lsls	r3, r3, #30
 800244e:	f53f aeed 	bmi.w	800222c <HAL_RCCEx_PeriphCLKConfig+0x70>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fd49 	bl	8000ee8 <HAL_GetTick>
 8002456:	eba0 0008 	sub.w	r0, r0, r8
 800245a:	4548      	cmp	r0, r9
 800245c:	d9f4      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800245e:	e70d      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002460:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002464:	d186      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002466:	2101      	movs	r1, #1
 8002468:	1d20      	adds	r0, r4, #4
 800246a:	f7ff fe1d 	bl	80020a8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800246e:	2800      	cmp	r0, #0
 8002470:	bf18      	it	ne
 8002472:	4605      	movne	r5, r0
 8002474:	e77e      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002476:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800247a:	d18e      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800247c:	2101      	movs	r1, #1
 800247e:	1d20      	adds	r0, r4, #4
 8002480:	f7ff fe12 	bl	80020a8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002484:	2800      	cmp	r0, #0
 8002486:	bf18      	it	ne
 8002488:	4605      	movne	r5, r0
 800248a:	e786      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800248c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002490:	d196      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002492:	2101      	movs	r1, #1
 8002494:	1d20      	adds	r0, r4, #4
 8002496:	f7ff fe07 	bl	80020a8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800249a:	2800      	cmp	r0, #0
 800249c:	bf18      	it	ne
 800249e:	4605      	movne	r5, r0
 80024a0:	e78e      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40007000 	.word	0x40007000

080024ac <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80024ac:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80024ae:	6813      	ldr	r3, [r2, #0]
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	6013      	str	r3, [r2, #0]
}
 80024b6:	4770      	bx	lr
 80024b8:	40021000 	.word	0x40021000

080024bc <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80024bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80024c0:	4698      	mov	r8, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80024c2:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80024c4:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 80024c6:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80024ca:	4605      	mov	r5, r0
 80024cc:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80024ce:	f7fe fd0b 	bl	8000ee8 <HAL_GetTick>
 80024d2:	44b8      	add	r8, r7
 80024d4:	eba8 0400 	sub.w	r4, r8, r0
  tmp_tickstart = HAL_GetTick();
 80024d8:	f7fe fd06 	bl	8000ee8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80024de:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2223      	movs	r2, #35	; 0x23
 80024e6:	4353      	muls	r3, r2
 80024e8:	0d1b      	lsrs	r3, r3, #20
  tmp_tickstart = HAL_GetTick();
 80024ea:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80024ec:	4363      	muls	r3, r4

  while ((hspi->Instance->SR & Fifo) != State)
 80024ee:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80024f0:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80024f2:	6893      	ldr	r3, [r2, #8]
 80024f4:	4033      	ands	r3, r6
 80024f6:	d101      	bne.n	80024fc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
    }
  }

  return HAL_OK;
 80024f8:	4618      	mov	r0, r3
 80024fa:	e038      	b.n	800256e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80024fc:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
      tmpreg8 = *ptmpreg8;
 8002500:	bf01      	itttt	eq
 8002502:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8002506:	b2db      	uxtbeq	r3, r3
 8002508:	f88d 3003 	strbeq.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800250c:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8002510:	1c7b      	adds	r3, r7, #1
 8002512:	d0ee      	beq.n	80024f2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002514:	f7fe fce8 	bl	8000ee8 <HAL_GetTick>
 8002518:	eba0 0008 	sub.w	r0, r0, r8
 800251c:	42a0      	cmp	r0, r4
 800251e:	d329      	bcc.n	8002574 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002528:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800252a:	686a      	ldr	r2, [r5, #4]
 800252c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002530:	d10a      	bne.n	8002548 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8c>
 8002532:	68aa      	ldr	r2, [r5, #8]
 8002534:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002538:	d002      	beq.n	8002540 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800253a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800253e:	d103      	bne.n	8002548 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8c>
          __HAL_SPI_DISABLE(hspi);
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002546:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002548:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800254a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800254e:	d107      	bne.n	8002560 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          SPI_RESET_CRC(hspi);
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800255e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002560:	2301      	movs	r3, #1
 8002562:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002566:	2300      	movs	r3, #0
 8002568:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800256c:	2003      	movs	r0, #3
}
 800256e:	b003      	add	sp, #12
 8002570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8002574:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002576:	2b00      	cmp	r3, #0
      count--;
 8002578:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800257a:	bf08      	it	eq
 800257c:	2400      	moveq	r4, #0
      count--;
 800257e:	3b01      	subs	r3, #1
 8002580:	e7b5      	b.n	80024ee <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8002582:	bf00      	nop
 8002584:	20000000 	.word	0x20000000

08002588 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800258a:	460e      	mov	r6, r1
 800258c:	4617      	mov	r7, r2
 800258e:	4605      	mov	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002590:	f7fe fcaa 	bl	8000ee8 <HAL_GetTick>
 8002594:	4437      	add	r7, r6
 8002596:	1a3c      	subs	r4, r7, r0
  tmp_tickstart = HAL_GetTick();
 8002598:	f7fe fca6 	bl	8000ee8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800259c:	4b22      	ldr	r3, [pc, #136]	; (8002628 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 80025a4:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025a6:	4363      	muls	r3, r4
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025a8:	682a      	ldr	r2, [r5, #0]
      count--;
 80025aa:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ac:	6893      	ldr	r3, [r2, #8]
 80025ae:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80025b2:	d101      	bne.n	80025b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
  return HAL_OK;
 80025b4:	4618      	mov	r0, r3
 80025b6:	e02d      	b.n	8002614 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 80025b8:	1c73      	adds	r3, r6, #1
 80025ba:	d0f7      	beq.n	80025ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025bc:	f7fe fc94 	bl	8000ee8 <HAL_GetTick>
 80025c0:	1bc0      	subs	r0, r0, r7
 80025c2:	42a0      	cmp	r0, r4
 80025c4:	d328      	bcc.n	8002618 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025c6:	682b      	ldr	r3, [r5, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025ce:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025d0:	686a      	ldr	r2, [r5, #4]
 80025d2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80025d6:	d10a      	bne.n	80025ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
 80025d8:	68aa      	ldr	r2, [r5, #8]
 80025da:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80025de:	d002      	beq.n	80025e6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025e0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80025e4:	d103      	bne.n	80025ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          __HAL_SPI_DISABLE(hspi);
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ec:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025ee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80025f0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80025f4:	d107      	bne.n	8002606 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
          SPI_RESET_CRC(hspi);
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002604:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002606:	2301      	movs	r3, #1
 8002608:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800260c:	2300      	movs	r3, #0
 800260e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002612:	2003      	movs	r0, #3
}
 8002614:	b003      	add	sp, #12
 8002616:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8002618:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800261a:	2b00      	cmp	r3, #0
      count--;
 800261c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800261e:	bf08      	it	eq
 8002620:	2400      	moveq	r4, #0
      count--;
 8002622:	3b01      	subs	r3, #1
 8002624:	e7c0      	b.n	80025a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x20>
 8002626:	bf00      	nop
 8002628:	20000000 	.word	0x20000000

0800262c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800262c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800262e:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002630:	9201      	str	r2, [sp, #4]
{
 8002632:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002634:	460a      	mov	r2, r1
 8002636:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800263a:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800263c:	f7ff ff3e 	bl	80024bc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002640:	9b01      	ldr	r3, [sp, #4]
 8002642:	b128      	cbz	r0, 8002650 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002644:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002646:	f043 0320 	orr.w	r3, r3, #32
 800264a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800264c:	2003      	movs	r0, #3
 800264e:	e010      	b.n	8002672 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002650:	461a      	mov	r2, r3
 8002652:	4629      	mov	r1, r5
 8002654:	4620      	mov	r0, r4
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	f7ff ff96 	bl	8002588 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800265c:	9b01      	ldr	r3, [sp, #4]
 800265e:	2800      	cmp	r0, #0
 8002660:	d1f0      	bne.n	8002644 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002662:	462a      	mov	r2, r5
 8002664:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002668:	4620      	mov	r0, r4
 800266a:	f7ff ff27 	bl	80024bc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800266e:	2800      	cmp	r0, #0
 8002670:	d1e8      	bne.n	8002644 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8002672:	b003      	add	sp, #12
 8002674:	bd30      	pop	{r4, r5, pc}

08002676 <HAL_SPI_Init>:
{
 8002676:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002678:	4604      	mov	r4, r0
 800267a:	2800      	cmp	r0, #0
 800267c:	d05f      	beq.n	800273e <HAL_SPI_Init+0xc8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800267e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002680:	2b00      	cmp	r3, #0
 8002682:	d158      	bne.n	8002736 <HAL_SPI_Init+0xc0>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002684:	6842      	ldr	r2, [r0, #4]
 8002686:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800268a:	d000      	beq.n	800268e <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800268c:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002692:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002696:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800269a:	b923      	cbnz	r3, 80026a6 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800269c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7fe fb05 	bl	8000cb0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80026a6:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026a8:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80026aa:	2302      	movs	r3, #2
 80026ac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80026b0:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80026b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026ba:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	d83f      	bhi.n	8002742 <HAL_SPI_Init+0xcc>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026c6:	d000      	beq.n	80026ca <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c8:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026ca:	6863      	ldr	r3, [r4, #4]
 80026cc:	68a6      	ldr	r6, [r4, #8]
 80026ce:	69a2      	ldr	r2, [r4, #24]
 80026d0:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 80026d4:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80026d8:	4333      	orrs	r3, r6
 80026da:	6926      	ldr	r6, [r4, #16]
 80026dc:	f006 0602 	and.w	r6, r6, #2
 80026e0:	4333      	orrs	r3, r6
 80026e2:	6966      	ldr	r6, [r4, #20]
 80026e4:	f006 0601 	and.w	r6, r6, #1
 80026e8:	4333      	orrs	r3, r6
 80026ea:	f402 7600 	and.w	r6, r2, #512	; 0x200
 80026ee:	4333      	orrs	r3, r6
 80026f0:	69e6      	ldr	r6, [r4, #28]
 80026f2:	f006 0638 	and.w	r6, r6, #56	; 0x38
 80026f6:	4333      	orrs	r3, r6
 80026f8:	6a26      	ldr	r6, [r4, #32]
 80026fa:	f006 0680 	and.w	r6, r6, #128	; 0x80
 80026fe:	4333      	orrs	r3, r6
 8002700:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002702:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 8002706:	4333      	orrs	r3, r6
 8002708:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800270a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800270c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800270e:	f006 0608 	and.w	r6, r6, #8
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	4333      	orrs	r3, r6
 8002718:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800271c:	0c12      	lsrs	r2, r2, #16
 800271e:	4319      	orrs	r1, r3
 8002720:	f002 0204 	and.w	r2, r2, #4
 8002724:	430a      	orrs	r2, r1
 8002726:	4310      	orrs	r0, r2
 8002728:	6068      	str	r0, [r5, #4]
  hspi->State     = HAL_SPI_STATE_READY;
 800272a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800272c:	2000      	movs	r0, #0
 800272e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002730:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8002734:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002736:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002738:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800273c:	e7a7      	b.n	800268e <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800273e:	2001      	movs	r0, #1
 8002740:	e7f8      	b.n	8002734 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002742:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002744:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8002748:	e7bd      	b.n	80026c6 <HAL_SPI_Init+0x50>

0800274a <HAL_SPI_Transmit>:
{
 800274a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800274e:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002750:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002754:	2b01      	cmp	r3, #1
{
 8002756:	4604      	mov	r4, r0
 8002758:	460d      	mov	r5, r1
 800275a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800275c:	f000 80bc 	beq.w	80028d8 <HAL_SPI_Transmit+0x18e>
 8002760:	2301      	movs	r3, #1
 8002762:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002766:	f7fe fbbf 	bl	8000ee8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800276a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800276e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002770:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002772:	b2d8      	uxtb	r0, r3
 8002774:	f040 80ae 	bne.w	80028d4 <HAL_SPI_Transmit+0x18a>
  if ((pData == NULL) || (Size == 0U))
 8002778:	2d00      	cmp	r5, #0
 800277a:	d063      	beq.n	8002844 <HAL_SPI_Transmit+0xfa>
 800277c:	f1b8 0f00 	cmp.w	r8, #0
 8002780:	d060      	beq.n	8002844 <HAL_SPI_Transmit+0xfa>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002782:	2303      	movs	r3, #3
 8002784:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002788:	2300      	movs	r3, #0
 800278a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800278c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 8002790:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002794:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002796:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800279a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800279e:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80027a0:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027a2:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 80027a8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ac:	d107      	bne.n	80027be <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 80027ae:	6833      	ldr	r3, [r6, #0]
 80027b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027b4:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80027b6:	6833      	ldr	r3, [r6, #0]
 80027b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027bc:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027be:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027c0:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027c2:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80027c4:	bf5e      	ittt	pl
 80027c6:	6833      	ldrpl	r3, [r6, #0]
 80027c8:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80027cc:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027ce:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027d2:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027d4:	d942      	bls.n	800285c <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027d6:	b113      	cbz	r3, 80027de <HAL_SPI_Transmit+0x94>
 80027d8:	f1b8 0f01 	cmp.w	r8, #1
 80027dc:	d107      	bne.n	80027ee <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027de:	f835 3b02 	ldrh.w	r3, [r5], #2
 80027e2:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e4:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80027e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80027ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	b9a3      	cbnz	r3, 800281e <HAL_SPI_Transmit+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027f4:	464a      	mov	r2, r9
 80027f6:	4639      	mov	r1, r7
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff ff17 	bl	800262c <SPI_EndRxTxTransaction>
 80027fe:	2800      	cmp	r0, #0
 8002800:	d165      	bne.n	80028ce <HAL_SPI_Transmit+0x184>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002802:	68a3      	ldr	r3, [r4, #8]
 8002804:	b933      	cbnz	r3, 8002814 <HAL_SPI_Transmit+0xca>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	9201      	str	r2, [sp, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002814:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8002816:	3800      	subs	r0, #0
 8002818:	bf18      	it	ne
 800281a:	2001      	movne	r0, #1
error:
 800281c:	e012      	b.n	8002844 <HAL_SPI_Transmit+0xfa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800281e:	6822      	ldr	r2, [r4, #0]
 8002820:	6893      	ldr	r3, [r2, #8]
 8002822:	079d      	lsls	r5, r3, #30
 8002824:	d505      	bpl.n	8002832 <HAL_SPI_Transmit+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002826:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002828:	f833 1b02 	ldrh.w	r1, [r3], #2
 800282c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800282e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002830:	e7d9      	b.n	80027e6 <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002832:	f7fe fb59 	bl	8000ee8 <HAL_GetTick>
 8002836:	eba0 0009 	sub.w	r0, r0, r9
 800283a:	42b8      	cmp	r0, r7
 800283c:	d30b      	bcc.n	8002856 <HAL_SPI_Transmit+0x10c>
 800283e:	1c78      	adds	r0, r7, #1
 8002840:	d0d5      	beq.n	80027ee <HAL_SPI_Transmit+0xa4>
          errorcode = HAL_TIMEOUT;
 8002842:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002844:	2301      	movs	r3, #1
 8002846:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800284a:	2300      	movs	r3, #0
 800284c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002850:	b003      	add	sp, #12
 8002852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002856:	2f00      	cmp	r7, #0
 8002858:	d1c9      	bne.n	80027ee <HAL_SPI_Transmit+0xa4>
 800285a:	e7f2      	b.n	8002842 <HAL_SPI_Transmit+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800285c:	b113      	cbz	r3, 8002864 <HAL_SPI_Transmit+0x11a>
 800285e:	f1b8 0f01 	cmp.w	r8, #1
 8002862:	d113      	bne.n	800288c <HAL_SPI_Transmit+0x142>
      if (hspi->TxXferCount > 1U)
 8002864:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d906      	bls.n	800287a <HAL_SPI_Transmit+0x130>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800286c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002870:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002872:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002874:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002876:	3b02      	subs	r3, #2
 8002878:	e006      	b.n	8002888 <HAL_SPI_Transmit+0x13e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800287a:	782b      	ldrb	r3, [r5, #0]
 800287c:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 800287e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002880:	3301      	adds	r3, #1
 8002882:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002884:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002886:	3b01      	subs	r3, #1
 8002888:	b29b      	uxth	r3, r3
 800288a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800288c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0af      	beq.n	80027f4 <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002894:	6822      	ldr	r2, [r4, #0]
 8002896:	6893      	ldr	r3, [r2, #8]
 8002898:	0799      	lsls	r1, r3, #30
 800289a:	d50c      	bpl.n	80028b6 <HAL_SPI_Transmit+0x16c>
        if (hspi->TxXferCount > 1U)
 800289c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800289e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 80028a0:	b289      	uxth	r1, r1
 80028a2:	2901      	cmp	r1, #1
 80028a4:	d904      	bls.n	80028b0 <HAL_SPI_Transmit+0x166>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80028aa:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80028ae:	e7e1      	b.n	8002874 <HAL_SPI_Transmit+0x12a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80028b4:	e7e3      	b.n	800287e <HAL_SPI_Transmit+0x134>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028b6:	f7fe fb17 	bl	8000ee8 <HAL_GetTick>
 80028ba:	eba0 0009 	sub.w	r0, r0, r9
 80028be:	42b8      	cmp	r0, r7
 80028c0:	d302      	bcc.n	80028c8 <HAL_SPI_Transmit+0x17e>
 80028c2:	1c7b      	adds	r3, r7, #1
 80028c4:	d0e2      	beq.n	800288c <HAL_SPI_Transmit+0x142>
 80028c6:	e7bc      	b.n	8002842 <HAL_SPI_Transmit+0xf8>
 80028c8:	2f00      	cmp	r7, #0
 80028ca:	d1df      	bne.n	800288c <HAL_SPI_Transmit+0x142>
 80028cc:	e7b9      	b.n	8002842 <HAL_SPI_Transmit+0xf8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ce:	2320      	movs	r3, #32
 80028d0:	6623      	str	r3, [r4, #96]	; 0x60
 80028d2:	e796      	b.n	8002802 <HAL_SPI_Transmit+0xb8>
    errorcode = HAL_BUSY;
 80028d4:	2002      	movs	r0, #2
 80028d6:	e7b5      	b.n	8002844 <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 80028d8:	2002      	movs	r0, #2
 80028da:	e7b9      	b.n	8002850 <HAL_SPI_Transmit+0x106>

080028dc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d11f      	bne.n	8002928 <HAL_TIM_Base_Start_IT+0x48>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	2302      	movs	r3, #2
 80028ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028ee:	6803      	ldr	r3, [r0, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f8:	4a0c      	ldr	r2, [pc, #48]	; (800292c <HAL_TIM_Base_Start_IT+0x4c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d006      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x2c>
 80028fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002902:	d003      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x2c>
 8002904:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002908:	4293      	cmp	r3, r2
 800290a:	d107      	bne.n	800291c <HAL_TIM_Base_Start_IT+0x3c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_TIM_Base_Start_IT+0x50>)
 8002910:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002912:	2a06      	cmp	r2, #6
 8002914:	d006      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x44>
 8002916:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800291a:	d003      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002924:	2000      	movs	r0, #0
}
 8002926:	4770      	bx	lr
    return HAL_ERROR;
 8002928:	2001      	movs	r0, #1
 800292a:	4770      	bx	lr
 800292c:	40012c00 	.word	0x40012c00
 8002930:	00010007 	.word	0x00010007

08002934 <HAL_TIM_OC_DelayElapsedCallback>:
 8002934:	4770      	bx	lr

08002936 <HAL_TIM_IC_CaptureCallback>:
 8002936:	4770      	bx	lr

08002938 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002938:	4770      	bx	lr

0800293a <HAL_TIM_TriggerCallback>:
 800293a:	4770      	bx	lr

0800293c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800293c:	6803      	ldr	r3, [r0, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	0791      	lsls	r1, r2, #30
{
 8002942:	b510      	push	{r4, lr}
 8002944:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002946:	d50f      	bpl.n	8002968 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	0792      	lsls	r2, r2, #30
 800294c:	d50c      	bpl.n	8002968 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800294e:	f06f 0202 	mvn.w	r2, #2
 8002952:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002954:	2201      	movs	r2, #1
 8002956:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	0799      	lsls	r1, r3, #30
 800295c:	f000 8085 	beq.w	8002a6a <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002960:	f7ff ffe9 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002964:	2300      	movs	r3, #0
 8002966:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	0752      	lsls	r2, r2, #29
 800296e:	d510      	bpl.n	8002992 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	0750      	lsls	r0, r2, #29
 8002974:	d50d      	bpl.n	8002992 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002976:	f06f 0204 	mvn.w	r2, #4
 800297a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800297c:	2202      	movs	r2, #2
 800297e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002986:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002988:	d075      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	f7ff ffd4 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	2300      	movs	r3, #0
 8002990:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	0711      	lsls	r1, r2, #28
 8002998:	d50f      	bpl.n	80029ba <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	0712      	lsls	r2, r2, #28
 800299e:	d50c      	bpl.n	80029ba <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029a0:	f06f 0208 	mvn.w	r2, #8
 80029a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029a6:	2204      	movs	r2, #4
 80029a8:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	079b      	lsls	r3, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b0:	d067      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80029b2:	f7ff ffc0 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b6:	2300      	movs	r3, #0
 80029b8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	06d0      	lsls	r0, r2, #27
 80029c0:	d510      	bpl.n	80029e4 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	06d1      	lsls	r1, r2, #27
 80029c6:	d50d      	bpl.n	80029e4 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029c8:	f06f 0210 	mvn.w	r2, #16
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ce:	2208      	movs	r2, #8
 80029d0:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029da:	d058      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80029dc:	f7ff ffab 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e0:	2300      	movs	r3, #0
 80029e2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	07d2      	lsls	r2, r2, #31
 80029ea:	d508      	bpl.n	80029fe <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	07d0      	lsls	r0, r2, #31
 80029f0:	d505      	bpl.n	80029fe <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029f2:	f06f 0201 	mvn.w	r2, #1
 80029f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029f8:	4620      	mov	r0, r4
 80029fa:	f7fd ffc5 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	0611      	lsls	r1, r2, #24
 8002a04:	d508      	bpl.n	8002a18 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	0612      	lsls	r2, r2, #24
 8002a0a:	d505      	bpl.n	8002a18 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a12:	4620      	mov	r0, r4
 8002a14:	f000 f8ad 	bl	8002b72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	05d0      	lsls	r0, r2, #23
 8002a1e:	d508      	bpl.n	8002a32 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	0611      	lsls	r1, r2, #24
 8002a24:	d505      	bpl.n	8002a32 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f000 f8a1 	bl	8002b74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	0652      	lsls	r2, r2, #25
 8002a38:	d508      	bpl.n	8002a4c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	0650      	lsls	r0, r2, #25
 8002a3e:	d505      	bpl.n	8002a4c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a46:	4620      	mov	r0, r4
 8002a48:	f7ff ff77 	bl	800293a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	0691      	lsls	r1, r2, #26
 8002a52:	d522      	bpl.n	8002a9a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	0692      	lsls	r2, r2, #26
 8002a58:	d51f      	bpl.n	8002a9a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a5a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a5e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a60:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002a66:	f000 b883 	b.w	8002b70 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	f7ff ff63 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7ff ff62 	bl	8002938 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a74:	e776      	b.n	8002964 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	f7ff ff5d 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f7ff ff5c 	bl	8002938 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a80:	e785      	b.n	800298e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	f7ff ff57 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a86:	4620      	mov	r0, r4
 8002a88:	f7ff ff56 	bl	8002938 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a8c:	e793      	b.n	80029b6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	f7ff ff51 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a92:	4620      	mov	r0, r4
 8002a94:	f7ff ff50 	bl	8002938 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a98:	e7a2      	b.n	80029e0 <HAL_TIM_IRQHandler+0xa4>
}
 8002a9a:	bd10      	pop	{r4, pc}

08002a9c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002a9e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa0:	4290      	cmp	r0, r2
{
 8002aa2:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa4:	d002      	beq.n	8002aac <TIM_Base_SetConfig+0x10>
 8002aa6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002aaa:	d109      	bne.n	8002ac0 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002aac:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ab2:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8002ab4:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ab8:	d009      	beq.n	8002ace <TIM_Base_SetConfig+0x32>
 8002aba:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002abe:	d006      	beq.n	8002ace <TIM_Base_SetConfig+0x32>
 8002ac0:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <TIM_Base_SetConfig+0x70>)
 8002ac2:	4290      	cmp	r0, r2
 8002ac4:	d003      	beq.n	8002ace <TIM_Base_SetConfig+0x32>
 8002ac6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aca:	4290      	cmp	r0, r2
 8002acc:	d103      	bne.n	8002ad6 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ace:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ad6:	694a      	ldr	r2, [r1, #20]
 8002ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002adc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002ade:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae0:	688b      	ldr	r3, [r1, #8]
 8002ae2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae4:	680b      	ldr	r3, [r1, #0]
 8002ae6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae8:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <TIM_Base_SetConfig+0x6c>)
 8002aea:	4298      	cmp	r0, r3
 8002aec:	d007      	beq.n	8002afe <TIM_Base_SetConfig+0x62>
 8002aee:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002af2:	4298      	cmp	r0, r3
 8002af4:	d003      	beq.n	8002afe <TIM_Base_SetConfig+0x62>
 8002af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002afa:	4298      	cmp	r0, r3
 8002afc:	d101      	bne.n	8002b02 <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002afe:	690b      	ldr	r3, [r1, #16]
 8002b00:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b02:	2301      	movs	r3, #1
 8002b04:	6143      	str	r3, [r0, #20]
}
 8002b06:	bd10      	pop	{r4, pc}
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40014000 	.word	0x40014000

08002b10 <HAL_TIM_Base_Init>:
{
 8002b10:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002b12:	4604      	mov	r4, r0
 8002b14:	b350      	cbz	r0, 8002b6c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b1e:	b91b      	cbnz	r3, 8002b28 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002b20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002b24:	f7ff feda 	bl	80028dc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b2a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b30:	1d21      	adds	r1, r4, #4
 8002b32:	f7ff ffb3 	bl	8002a9c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8002b3c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002b42:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002b46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002b4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002b4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002b62:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002b66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002b6a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	e7fc      	b.n	8002b6a <HAL_TIM_Base_Init+0x5a>

08002b70 <HAL_TIMEx_CommutCallback>:
 8002b70:	4770      	bx	lr

08002b72 <HAL_TIMEx_BreakCallback>:
 8002b72:	4770      	bx	lr

08002b74 <HAL_TIMEx_Break2Callback>:
 8002b74:	4770      	bx	lr
	...

08002b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b7c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b7e:	6921      	ldr	r1, [r4, #16]
 8002b80:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b82:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b84:	69c0      	ldr	r0, [r0, #28]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	6961      	ldr	r1, [r4, #20]
 8002b8a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b8c:	4979      	ldr	r1, [pc, #484]	; (8002d74 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b8e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b90:	4029      	ands	r1, r5
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68e1      	ldr	r1, [r4, #12]
 8002b9a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ba2:	4a75      	ldr	r2, [pc, #468]	; (8002d78 <UART_SetConfig+0x200>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ba4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ba6:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ba8:	bf1c      	itt	ne
 8002baa:	6a22      	ldrne	r2, [r4, #32]
 8002bac:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bb8:	4a70      	ldr	r2, [pc, #448]	; (8002d7c <UART_SetConfig+0x204>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d117      	bne.n	8002bee <UART_SetConfig+0x76>
 8002bbe:	4b70      	ldr	r3, [pc, #448]	; (8002d80 <UART_SetConfig+0x208>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	f200 80b0 	bhi.w	8002d30 <UART_SetConfig+0x1b8>
 8002bd0:	4a6c      	ldr	r2, [pc, #432]	; (8002d84 <UART_SetConfig+0x20c>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002bd8:	f040 808b 	bne.w	8002cf2 <UART_SetConfig+0x17a>
  {
    switch (clocksource)
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d822      	bhi.n	8002c26 <UART_SetConfig+0xae>
 8002be0:	e8df f003 	tbb	[pc, r3]
 8002be4:	2185a969 	.word	0x2185a969
 8002be8:	21212182 	.word	0x21212182
 8002bec:	6d          	.byte	0x6d
 8002bed:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bee:	4a66      	ldr	r2, [pc, #408]	; (8002d88 <UART_SetConfig+0x210>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d106      	bne.n	8002c02 <UART_SetConfig+0x8a>
 8002bf4:	4b62      	ldr	r3, [pc, #392]	; (8002d80 <UART_SetConfig+0x208>)
 8002bf6:	4a65      	ldr	r2, [pc, #404]	; (8002d8c <UART_SetConfig+0x214>)
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	e7e7      	b.n	8002bd2 <UART_SetConfig+0x5a>
 8002c02:	4a63      	ldr	r2, [pc, #396]	; (8002d90 <UART_SetConfig+0x218>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d118      	bne.n	8002c3a <UART_SetConfig+0xc2>
 8002c08:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <UART_SetConfig+0x208>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	f000 8087 	beq.w	8002d26 <UART_SetConfig+0x1ae>
 8002c18:	d807      	bhi.n	8002c2a <UART_SetConfig+0xb2>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8094 	beq.w	8002d48 <UART_SetConfig+0x1d0>
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	f000 808b 	beq.w	8002d3c <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c26:	2001      	movs	r0, #1
 8002c28:	e024      	b.n	8002c74 <UART_SetConfig+0xfc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c2a:	2b30      	cmp	r3, #48	; 0x30
 8002c2c:	d1fb      	bne.n	8002c26 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c2e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002c32:	d044      	beq.n	8002cbe <UART_SetConfig+0x146>
 8002c34:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c38:	e08d      	b.n	8002d56 <UART_SetConfig+0x1de>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c3a:	4a4f      	ldr	r2, [pc, #316]	; (8002d78 <UART_SetConfig+0x200>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d1f2      	bne.n	8002c26 <UART_SetConfig+0xae>
 8002c40:	4b4f      	ldr	r3, [pc, #316]	; (8002d80 <UART_SetConfig+0x208>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c4e:	d015      	beq.n	8002c7c <UART_SetConfig+0x104>
 8002c50:	d806      	bhi.n	8002c60 <UART_SetConfig+0xe8>
 8002c52:	b15b      	cbz	r3, 8002c6c <UART_SetConfig+0xf4>
 8002c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c58:	d1e5      	bne.n	8002c26 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c5a:	f7fe fe47 	bl	80018ec <HAL_RCC_GetSysClockFreq>
        break;
 8002c5e:	e007      	b.n	8002c70 <UART_SetConfig+0xf8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c64:	d1df      	bne.n	8002c26 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8002c66:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c6a:	e008      	b.n	8002c7e <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c6c:	f7ff f9da 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c70:	b928      	cbnz	r0, 8002c7e <UART_SetConfig+0x106>
 8002c72:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c74:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002c76:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002c7c:	4845      	ldr	r0, [pc, #276]	; (8002d94 <UART_SetConfig+0x21c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c7e:	6862      	ldr	r2, [r4, #4]
 8002c80:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002c84:	4283      	cmp	r3, r0
 8002c86:	d8ce      	bhi.n	8002c26 <UART_SetConfig+0xae>
 8002c88:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002c8c:	d8cb      	bhi.n	8002c26 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c8e:	0851      	lsrs	r1, r2, #1
 8002c90:	2500      	movs	r5, #0
 8002c92:	468c      	mov	ip, r1
 8002c94:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002c98:	4629      	mov	r1, r5
 8002c9a:	fbe0 c106 	umlal	ip, r1, r0, r6
 8002c9e:	462b      	mov	r3, r5
 8002ca0:	4660      	mov	r0, ip
 8002ca2:	f7fd faa7 	bl	80001f4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ca6:	4b3c      	ldr	r3, [pc, #240]	; (8002d98 <UART_SetConfig+0x220>)
 8002ca8:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d8ba      	bhi.n	8002c26 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	60d8      	str	r0, [r3, #12]
 8002cb4:	e7dd      	b.n	8002c72 <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb6:	f7ff f9b5 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d0d9      	beq.n	8002c72 <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cbe:	6862      	ldr	r2, [r4, #4]
 8002cc0:	0853      	lsrs	r3, r2, #1
 8002cc2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cc6:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cca:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cce:	f1a0 0210 	sub.w	r2, r0, #16
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d8a7      	bhi.n	8002c26 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cd6:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8002cda:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cdc:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cde:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8002ce2:	4318      	orrs	r0, r3
 8002ce4:	60d0      	str	r0, [r2, #12]
 8002ce6:	e7c4      	b.n	8002c72 <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ce8:	f7fe fe00 	bl	80018ec <HAL_RCC_GetSysClockFreq>
        break;
 8002cec:	e7e5      	b.n	8002cba <UART_SetConfig+0x142>
        pclk = (uint32_t) HSI_VALUE;
 8002cee:	4829      	ldr	r0, [pc, #164]	; (8002d94 <UART_SetConfig+0x21c>)
 8002cf0:	e7e5      	b.n	8002cbe <UART_SetConfig+0x146>
    switch (clocksource)
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d897      	bhi.n	8002c26 <UART_SetConfig+0xae>
 8002cf6:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <UART_SetConfig+0x184>)
 8002cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfc:	08002d4f 	.word	0x08002d4f
 8002d00:	08002d21 	.word	0x08002d21
 8002d04:	08002d2d 	.word	0x08002d2d
 8002d08:	08002c27 	.word	0x08002c27
 8002d0c:	08002d43 	.word	0x08002d43
 8002d10:	08002c27 	.word	0x08002c27
 8002d14:	08002c27 	.word	0x08002c27
 8002d18:	08002c27 	.word	0x08002c27
 8002d1c:	08002c35 	.word	0x08002c35
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d20:	f7ff f992 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
        break;
 8002d24:	e015      	b.n	8002d52 <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d26:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d2a:	d0e0      	beq.n	8002cee <UART_SetConfig+0x176>
        pclk = (uint32_t) HSI_VALUE;
 8002d2c:	4819      	ldr	r0, [pc, #100]	; (8002d94 <UART_SetConfig+0x21c>)
 8002d2e:	e012      	b.n	8002d56 <UART_SetConfig+0x1de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d30:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d34:	d1f4      	bne.n	8002d20 <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d36:	f7ff f987 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
        break;
 8002d3a:	e7be      	b.n	8002cba <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d3c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d40:	d0d2      	beq.n	8002ce8 <UART_SetConfig+0x170>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d42:	f7fe fdd3 	bl	80018ec <HAL_RCC_GetSysClockFreq>
        break;
 8002d46:	e004      	b.n	8002d52 <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d48:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d4c:	d0b3      	beq.n	8002cb6 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d4e:	f7ff f969 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d08d      	beq.n	8002c72 <UART_SetConfig+0xfa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d56:	6862      	ldr	r2, [r4, #4]
 8002d58:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002d5c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d60:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002d64:	f1a3 0110 	sub.w	r1, r3, #16
 8002d68:	4291      	cmp	r1, r2
 8002d6a:	f63f af5c 	bhi.w	8002c26 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	60d3      	str	r3, [r2, #12]
 8002d72:	e77e      	b.n	8002c72 <UART_SetConfig+0xfa>
 8002d74:	efff69f3 	.word	0xefff69f3
 8002d78:	40008000 	.word	0x40008000
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40021000 	.word	0x40021000
 8002d84:	0801e2a4 	.word	0x0801e2a4
 8002d88:	40004400 	.word	0x40004400
 8002d8c:	0801e2a7 	.word	0x0801e2a7
 8002d90:	40004800 	.word	0x40004800
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	000ffcff 	.word	0x000ffcff

08002d9c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d9e:	07da      	lsls	r2, r3, #31
{
 8002da0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002da2:	d506      	bpl.n	8002db2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002da4:	6801      	ldr	r1, [r0, #0]
 8002da6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002da8:	684a      	ldr	r2, [r1, #4]
 8002daa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002dae:	4322      	orrs	r2, r4
 8002db0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002db2:	079c      	lsls	r4, r3, #30
 8002db4:	d506      	bpl.n	8002dc4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002db6:	6801      	ldr	r1, [r0, #0]
 8002db8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002dba:	684a      	ldr	r2, [r1, #4]
 8002dbc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dc0:	4322      	orrs	r2, r4
 8002dc2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dc4:	0759      	lsls	r1, r3, #29
 8002dc6:	d506      	bpl.n	8002dd6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dc8:	6801      	ldr	r1, [r0, #0]
 8002dca:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002dcc:	684a      	ldr	r2, [r1, #4]
 8002dce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dd2:	4322      	orrs	r2, r4
 8002dd4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dd6:	071a      	lsls	r2, r3, #28
 8002dd8:	d506      	bpl.n	8002de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dda:	6801      	ldr	r1, [r0, #0]
 8002ddc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002dde:	684a      	ldr	r2, [r1, #4]
 8002de0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002de4:	4322      	orrs	r2, r4
 8002de6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002de8:	06dc      	lsls	r4, r3, #27
 8002dea:	d506      	bpl.n	8002dfa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dec:	6801      	ldr	r1, [r0, #0]
 8002dee:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002df0:	688a      	ldr	r2, [r1, #8]
 8002df2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002df6:	4322      	orrs	r2, r4
 8002df8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dfa:	0699      	lsls	r1, r3, #26
 8002dfc:	d506      	bpl.n	8002e0c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dfe:	6801      	ldr	r1, [r0, #0]
 8002e00:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002e02:	688a      	ldr	r2, [r1, #8]
 8002e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e08:	4322      	orrs	r2, r4
 8002e0a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e0c:	065a      	lsls	r2, r3, #25
 8002e0e:	d50f      	bpl.n	8002e30 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e10:	6801      	ldr	r1, [r0, #0]
 8002e12:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002e14:	684a      	ldr	r2, [r1, #4]
 8002e16:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002e1a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e1c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e20:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e22:	d105      	bne.n	8002e30 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e24:	684a      	ldr	r2, [r1, #4]
 8002e26:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002e28:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002e2c:	4322      	orrs	r2, r4
 8002e2e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	d506      	bpl.n	8002e42 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e34:	6802      	ldr	r2, [r0, #0]
 8002e36:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002e38:	6853      	ldr	r3, [r2, #4]
 8002e3a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	6053      	str	r3, [r2, #4]
  }
}
 8002e42:	bd10      	pop	{r4, pc}

08002e44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e48:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	460e      	mov	r6, r1
 8002e50:	4615      	mov	r5, r2
 8002e52:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e54:	6822      	ldr	r2, [r4, #0]
 8002e56:	69d3      	ldr	r3, [r2, #28]
 8002e58:	ea36 0303 	bics.w	r3, r6, r3
 8002e5c:	bf0c      	ite	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	2300      	movne	r3, #0
 8002e62:	42ab      	cmp	r3, r5
 8002e64:	d001      	beq.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002e66:	2000      	movs	r0, #0
 8002e68:	e025      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002e6e:	d0f2      	beq.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e70:	f7fe f83a 	bl	8000ee8 <HAL_GetTick>
 8002e74:	1bc0      	subs	r0, r0, r7
 8002e76:	4540      	cmp	r0, r8
 8002e78:	6820      	ldr	r0, [r4, #0]
 8002e7a:	d802      	bhi.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x3e>
 8002e7c:	f1b8 0f00 	cmp.w	r8, #0
 8002e80:	d11b      	bne.n	8002eba <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e82:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8a:	e840 3200 	strex	r2, r3, [r0]
 8002e8e:	2a00      	cmp	r2, #0
 8002e90:	d1f7      	bne.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e92:	f100 0308 	add.w	r3, r0, #8
 8002e96:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9e:	f100 0108 	add.w	r1, r0, #8
 8002ea2:	e841 3200 	strex	r2, r3, [r1]
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	d1f3      	bne.n	8002e92 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002eae:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002eb0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8002eb4:	2003      	movs	r0, #3
}
 8002eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002eba:	6803      	ldr	r3, [r0, #0]
 8002ebc:	075a      	lsls	r2, r3, #29
 8002ebe:	d5c9      	bpl.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ec0:	69c3      	ldr	r3, [r0, #28]
 8002ec2:	051b      	lsls	r3, r3, #20
 8002ec4:	d5c6      	bpl.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eca:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ecc:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ed0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed4:	e840 3200 	strex	r2, r3, [r0]
 8002ed8:	2a00      	cmp	r2, #0
 8002eda:	d1f7      	bne.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	f100 0308 	add.w	r3, r0, #8
 8002ee0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee8:	f100 0108 	add.w	r1, r0, #8
 8002eec:	e841 3200 	strex	r2, r3, [r1]
 8002ef0:	2a00      	cmp	r2, #0
 8002ef2:	d1f3      	bne.n	8002edc <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002efa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8002efe:	e7d7      	b.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0x6c>

08002f00 <UART_CheckIdleState>:
{
 8002f00:	b530      	push	{r4, r5, lr}
 8002f02:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f04:	2500      	movs	r5, #0
{
 8002f06:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f08:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002f0c:	f7fd ffec 	bl	8000ee8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f10:	6822      	ldr	r2, [r4, #0]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002f16:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f18:	d415      	bmi.n	8002f46 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	0752      	lsls	r2, r2, #29
 8002f20:	d509      	bpl.n	8002f36 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f22:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002f26:	9200      	str	r2, [sp, #0]
 8002f28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7ff ff88 	bl	8002e44 <UART_WaitOnFlagUntilTimeout>
 8002f34:	b9a0      	cbnz	r0, 8002f60 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002f36:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f38:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002f3a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002f3c:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002f40:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f42:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8002f44:	e00d      	b.n	8002f62 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f46:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002f4a:	9200      	str	r2, [sp, #0]
 8002f4c:	9003      	str	r0, [sp, #12]
 8002f4e:	462a      	mov	r2, r5
 8002f50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff ff75 	bl	8002e44 <UART_WaitOnFlagUntilTimeout>
 8002f5a:	9b03      	ldr	r3, [sp, #12]
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d0dc      	beq.n	8002f1a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002f60:	2003      	movs	r0, #3
}
 8002f62:	b005      	add	sp, #20
 8002f64:	bd30      	pop	{r4, r5, pc}

08002f66 <HAL_UART_Init>:
{
 8002f66:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002f68:	4604      	mov	r4, r0
 8002f6a:	b340      	cbz	r0, 8002fbe <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002f6e:	b91b      	cbnz	r3, 8002f78 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002f70:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8002f74:	f7fd fece 	bl	8000d14 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002f78:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002f7a:	2324      	movs	r3, #36	; 0x24
 8002f7c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002f7e:	6813      	ldr	r3, [r2, #0]
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7ff fdf6 	bl	8002b78 <UART_SetConfig>
 8002f8c:	2801      	cmp	r0, #1
 8002f8e:	d016      	beq.n	8002fbe <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f92:	b113      	cbz	r3, 8002f9a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002f94:	4620      	mov	r0, r4
 8002f96:	f7ff ff01 	bl	8002d9c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002faa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002fb2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002fb4:	601a      	str	r2, [r3, #0]
}
 8002fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002fba:	f7ff bfa1 	b.w	8002f00 <UART_CheckIdleState>
}
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	bd10      	pop	{r4, pc}

08002fc2 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8002fc2:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8002fc4:	b910      	cbnz	r0, 8002fcc <lv_disp_get_scr_act+0xa>
 8002fc6:	f00f f9cd 	bl	8012364 <lv_disp_get_default>
    if(!disp) {
 8002fca:	b100      	cbz	r0, 8002fce <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 8002fcc:	6900      	ldr	r0, [r0, #16]
}
 8002fce:	bd08      	pop	{r3, pc}

08002fd0 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8002fd0:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8002fd2:	b910      	cbnz	r0, 8002fda <lv_disp_get_scr_prev+0xa>
 8002fd4:	f00f f9c6 	bl	8012364 <lv_disp_get_default>
    if(!disp) {
 8002fd8:	b100      	cbz	r0, 8002fdc <lv_disp_get_scr_prev+0xc>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 8002fda:	6940      	ldr	r0, [r0, #20]
}
 8002fdc:	bd08      	pop	{r3, pc}

08002fde <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8002fde:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8002fe0:	b910      	cbnz	r0, 8002fe8 <lv_disp_get_layer_top+0xa>
 8002fe2:	f00f f9bf 	bl	8012364 <lv_disp_get_default>
    if(!disp) {
 8002fe6:	b100      	cbz	r0, 8002fea <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 8002fe8:	69c0      	ldr	r0, [r0, #28]
}
 8002fea:	bd08      	pop	{r3, pc}

08002fec <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8002fec:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8002fee:	b910      	cbnz	r0, 8002ff6 <lv_disp_get_layer_sys+0xa>
 8002ff0:	f00f f9b8 	bl	8012364 <lv_disp_get_default>
    if(!disp) {
 8002ff4:	b100      	cbz	r0, 8002ff8 <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 8002ff6:	6a00      	ldr	r0, [r0, #32]
}
 8002ff8:	bd08      	pop	{r3, pc}

08002ffa <lv_disp_set_theme>:
/**
 * Set the theme of a display
 * @param disp pointer to a display
 */
void lv_disp_set_theme(lv_disp_t * disp, lv_theme_t * th)
{
 8002ffa:	b538      	push	{r3, r4, r5, lr}
 8002ffc:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
 8002ffe:	4604      	mov	r4, r0
 8003000:	b918      	cbnz	r0, 800300a <lv_disp_set_theme+0x10>
 8003002:	f00f f9af 	bl	8012364 <lv_disp_get_default>
    if(!disp) {
 8003006:	4604      	mov	r4, r0
 8003008:	b1c0      	cbz	r0, 800303c <lv_disp_set_theme+0x42>
        return;
    }

    disp->theme = th;

    if(disp->screen_cnt == 3 &&
 800300a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    disp->theme = th;
 800300c:	60a5      	str	r5, [r4, #8]
    if(disp->screen_cnt == 3 &&
 800300e:	2b03      	cmp	r3, #3
 8003010:	d114      	bne.n	800303c <lv_disp_set_theme+0x42>
       lv_obj_get_child_cnt(disp->screens[0]) == 0 &&
 8003012:	68e3      	ldr	r3, [r4, #12]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	f005 f83b 	bl	8008090 <lv_obj_get_child_cnt>
    if(disp->screen_cnt == 3 &&
 800301a:	b978      	cbnz	r0, 800303c <lv_disp_set_theme+0x42>
       lv_obj_get_child_cnt(disp->screens[1]) == 0 &&
 800301c:	68e3      	ldr	r3, [r4, #12]
 800301e:	6858      	ldr	r0, [r3, #4]
 8003020:	f005 f836 	bl	8008090 <lv_obj_get_child_cnt>
       lv_obj_get_child_cnt(disp->screens[0]) == 0 &&
 8003024:	b950      	cbnz	r0, 800303c <lv_disp_set_theme+0x42>
       lv_obj_get_child_cnt(disp->screens[2]) == 0) {
 8003026:	68e3      	ldr	r3, [r4, #12]
 8003028:	6898      	ldr	r0, [r3, #8]
 800302a:	f005 f831 	bl	8008090 <lv_obj_get_child_cnt>
       lv_obj_get_child_cnt(disp->screens[1]) == 0 &&
 800302e:	b928      	cbnz	r0, 800303c <lv_disp_set_theme+0x42>
        lv_theme_apply(disp->screens[0]);
 8003030:	68e3      	ldr	r3, [r4, #12]
 8003032:	6818      	ldr	r0, [r3, #0]
    }
}
 8003034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_theme_apply(disp->screens[0]);
 8003038:	f006 b98c 	b.w	8009354 <lv_theme_apply>
}
 800303c:	bd38      	pop	{r3, r4, r5, pc}

0800303e <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 800303e:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 8003040:	b908      	cbnz	r0, 8003046 <lv_disp_get_theme+0x8>
 8003042:	f00f f98f 	bl	8012364 <lv_disp_get_default>
    return disp->theme;
}
 8003046:	6880      	ldr	r0, [r0, #8]
 8003048:	bd08      	pop	{r3, pc}

0800304a <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 800304a:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800304c:	b910      	cbnz	r0, 8003054 <lv_disp_is_invalidation_enabled+0xa>
 800304e:	f00f f989 	bl	8012364 <lv_disp_get_default>
    if(!disp) {
 8003052:	b128      	cbz	r0, 8003060 <lv_disp_is_invalidation_enabled+0x16>
        LV_LOG_WARN("no display registered");
        return false;
    }

    return (disp->inv_en_cnt > 0);
 8003054:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8003058:	2800      	cmp	r0, #0
 800305a:	bfd4      	ite	le
 800305c:	2000      	movle	r0, #0
 800305e:	2001      	movgt	r0, #1
}
 8003060:	bd08      	pop	{r3, pc}

08003062 <lv_obj_get_event_dsc.isra.0>:

static lv_event_dsc_t * lv_obj_get_event_dsc(const lv_obj_t * obj, uint32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!obj->spec_attr) return NULL;
 8003062:	b150      	cbz	r0, 800307a <lv_obj_get_event_dsc.isra.0+0x18>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8003064:	7e83      	ldrb	r3, [r0, #26]
 8003066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800306a:	428b      	cmp	r3, r1
 800306c:	d904      	bls.n	8003078 <lv_obj_get_event_dsc.isra.0+0x16>

    return &obj->spec_attr->event_dsc[id];
 800306e:	68c0      	ldr	r0, [r0, #12]
 8003070:	230c      	movs	r3, #12
 8003072:	fb03 0001 	mla	r0, r3, r1, r0
 8003076:	4770      	bx	lr
    if(!obj->spec_attr) return NULL;
 8003078:	2000      	movs	r0, #0
}
 800307a:	4770      	bx	lr

0800307c <lv_obj_event_base>:
{
 800307c:	b510      	push	{r4, lr}
 800307e:	460c      	mov	r4, r1
    if(class_p == NULL) base = e->current_target->class_p;
 8003080:	b968      	cbnz	r0, 800309e <lv_obj_event_base+0x22>
 8003082:	684b      	ldr	r3, [r1, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 8003086:	b160      	cbz	r0, 80030a2 <lv_obj_event_base+0x26>
 8003088:	6903      	ldr	r3, [r0, #16]
 800308a:	b143      	cbz	r3, 800309e <lv_obj_event_base+0x22>
    e->user_data = NULL;
 800308c:	2200      	movs	r2, #0
 800308e:	60e2      	str	r2, [r4, #12]
    base->event_cb(base, e);
 8003090:	4621      	mov	r1, r4
 8003092:	4798      	blx	r3
    if(e->deleted) res = LV_RES_INV;
 8003094:	7e20      	ldrb	r0, [r4, #24]
 8003096:	43c0      	mvns	r0, r0
 8003098:	f000 0001 	and.w	r0, r0, #1
 800309c:	e002      	b.n	80030a4 <lv_obj_event_base+0x28>
    while(base && base->event_cb == NULL) base = base->base_class;
 800309e:	6800      	ldr	r0, [r0, #0]
 80030a0:	e7f1      	b.n	8003086 <lv_obj_event_base+0xa>
    if(base == NULL) return LV_RES_OK;
 80030a2:	2001      	movs	r0, #1
}
 80030a4:	bd10      	pop	{r4, pc}
	...

080030a8 <event_send_core>:

static lv_res_t event_send_core(lv_event_t * e)
{
 80030a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030aa:	4604      	mov	r4, r0
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 80030ac:	f000 fac2 	bl	8003634 <lv_indev_get_act>
    if(indev_act) {
 80030b0:	b9e0      	cbnz	r0, 80030ec <event_send_core+0x44>
        if(e->stop_processing) return LV_RES_OK;
        if(e->deleted) return LV_RES_INV;
    }

    lv_res_t res = LV_RES_OK;
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 80030b2:	6863      	ldr	r3, [r4, #4]
 80030b4:	2100      	movs	r1, #0
 80030b6:	6898      	ldr	r0, [r3, #8]
 80030b8:	f7ff ffd3 	bl	8003062 <lv_obj_get_event_dsc.isra.0>

    uint32_t i = 0;
 80030bc:	460e      	mov	r6, r1
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 80030be:	4605      	mov	r5, r0
    while(event_dsc && res == LV_RES_OK) {
 80030c0:	bb25      	cbnz	r5, 800310c <event_send_core+0x64>

        i++;
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
    }

    res = lv_obj_event_base(NULL, e);
 80030c2:	4621      	mov	r1, r4
 80030c4:	4628      	mov	r0, r5
 80030c6:	f7ff ffd9 	bl	800307c <lv_obj_event_base>

    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 80030ca:	4606      	mov	r6, r0
 80030cc:	b1b8      	cbz	r0, 80030fe <event_send_core+0x56>
 80030ce:	6863      	ldr	r3, [r4, #4]
 80030d0:	4629      	mov	r1, r5
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
        }

        i++;
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 80030d2:	6898      	ldr	r0, [r3, #8]
 80030d4:	f7ff ffc5 	bl	8003062 <lv_obj_get_event_dsc.isra.0>
    while(event_dsc && res == LV_RES_OK) {
 80030d8:	2800      	cmp	r0, #0
 80030da:	d04d      	beq.n	8003178 <event_send_core+0xd0>
 80030dc:	2e01      	cmp	r6, #1
 80030de:	d10e      	bne.n	80030fe <event_send_core+0x56>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 80030e0:	6803      	ldr	r3, [r0, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d132      	bne.n	800314c <event_send_core+0xa4>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 80030e6:	6863      	ldr	r3, [r4, #4]
        i++;
 80030e8:	3101      	adds	r1, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 80030ea:	e7f2      	b.n	80030d2 <event_send_core+0x2a>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 80030ec:	6800      	ldr	r0, [r0, #0]
 80030ee:	6883      	ldr	r3, [r0, #8]
 80030f0:	b10b      	cbz	r3, 80030f6 <event_send_core+0x4e>
 80030f2:	7a21      	ldrb	r1, [r4, #8]
 80030f4:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 80030f6:	7e23      	ldrb	r3, [r4, #24]
 80030f8:	079a      	lsls	r2, r3, #30
 80030fa:	d503      	bpl.n	8003104 <event_send_core+0x5c>
 80030fc:	2601      	movs	r6, #1
        res = event_send_core(e);
        if(res != LV_RES_OK) return LV_RES_INV;
    }

    return res;
}
 80030fe:	4630      	mov	r0, r6
 8003100:	b002      	add	sp, #8
 8003102:	bd70      	pop	{r4, r5, r6, pc}
        if(e->deleted) return LV_RES_INV;
 8003104:	07de      	lsls	r6, r3, #31
 8003106:	d5d4      	bpl.n	80030b2 <event_send_core+0xa>
 8003108:	2600      	movs	r6, #0
 800310a:	e7f8      	b.n	80030fe <event_send_core+0x56>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 800310c:	682a      	ldr	r2, [r5, #0]
 800310e:	b93a      	cbnz	r2, 8003120 <event_send_core+0x78>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8003110:	6863      	ldr	r3, [r4, #4]
        i++;
 8003112:	3601      	adds	r6, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8003114:	6898      	ldr	r0, [r3, #8]
 8003116:	4631      	mov	r1, r6
 8003118:	f7ff ffa3 	bl	8003062 <lv_obj_get_event_dsc.isra.0>
 800311c:	4605      	mov	r5, r0
 800311e:	e7cf      	b.n	80030c0 <event_send_core+0x18>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8003120:	f995 1008 	ldrsb.w	r1, [r5, #8]
 8003124:	7a2b      	ldrb	r3, [r5, #8]
 8003126:	2900      	cmp	r1, #0
 8003128:	daf2      	bge.n	8003110 <event_send_core+0x68>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 800312a:	2b80      	cmp	r3, #128	; 0x80
 800312c:	d004      	beq.n	8003138 <event_send_core+0x90>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 800312e:	7a21      	ldrb	r1, [r4, #8]
 8003130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8003134:	428b      	cmp	r3, r1
 8003136:	d1eb      	bne.n	8003110 <event_send_core+0x68>
            e->user_data = event_dsc->user_data;
 8003138:	686b      	ldr	r3, [r5, #4]
 800313a:	60e3      	str	r3, [r4, #12]
            event_dsc->cb(e);
 800313c:	4620      	mov	r0, r4
 800313e:	4790      	blx	r2
            if(e->stop_processing) return LV_RES_OK;
 8003140:	7e23      	ldrb	r3, [r4, #24]
 8003142:	079d      	lsls	r5, r3, #30
 8003144:	d4da      	bmi.n	80030fc <event_send_core+0x54>
            if(e->deleted) return LV_RES_INV;
 8003146:	07d8      	lsls	r0, r3, #31
 8003148:	d5e2      	bpl.n	8003110 <event_send_core+0x68>
 800314a:	e7dd      	b.n	8003108 <event_send_core+0x60>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 800314c:	f990 5008 	ldrsb.w	r5, [r0, #8]
 8003150:	7a02      	ldrb	r2, [r0, #8]
 8003152:	2d00      	cmp	r5, #0
 8003154:	dbc7      	blt.n	80030e6 <event_send_core+0x3e>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8003156:	b112      	cbz	r2, 800315e <event_send_core+0xb6>
 8003158:	7a25      	ldrb	r5, [r4, #8]
 800315a:	4295      	cmp	r5, r2
 800315c:	d1c3      	bne.n	80030e6 <event_send_core+0x3e>
            e->user_data = event_dsc->user_data;
 800315e:	6842      	ldr	r2, [r0, #4]
 8003160:	60e2      	str	r2, [r4, #12]
            event_dsc->cb(e);
 8003162:	4620      	mov	r0, r4
 8003164:	9101      	str	r1, [sp, #4]
 8003166:	4798      	blx	r3
            if(e->stop_processing) return LV_RES_OK;
 8003168:	7e23      	ldrb	r3, [r4, #24]
 800316a:	0799      	lsls	r1, r3, #30
 800316c:	d4c6      	bmi.n	80030fc <event_send_core+0x54>
            if(e->deleted) return LV_RES_INV;
 800316e:	f013 0f01 	tst.w	r3, #1
 8003172:	9901      	ldr	r1, [sp, #4]
 8003174:	d0b7      	beq.n	80030e6 <event_send_core+0x3e>
 8003176:	e7c7      	b.n	8003108 <event_send_core+0x60>
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8003178:	2e01      	cmp	r6, #1
 800317a:	d1c0      	bne.n	80030fe <event_send_core+0x56>
 800317c:	6860      	ldr	r0, [r4, #4]
 800317e:	6843      	ldr	r3, [r0, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0bb      	beq.n	80030fc <event_send_core+0x54>

static bool event_is_bubbled(lv_event_t * e)
{
    if(e->stop_bubbling) return false;
 8003184:	7e23      	ldrb	r3, [r4, #24]
 8003186:	075a      	lsls	r2, r3, #29
 8003188:	d4b8      	bmi.n	80030fc <event_send_core+0x54>

    /*Event codes that always bubble*/
    switch(e->code) {
 800318a:	7a23      	ldrb	r3, [r4, #8]
 800318c:	3b23      	subs	r3, #35	; 0x23
 800318e:	2b01      	cmp	r3, #1
 8003190:	d90a      	bls.n	80031a8 <event_send_core+0x100>
        default:
            break;
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 8003192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003196:	f000 ff48 	bl	800402a <lv_obj_has_flag>
 800319a:	2800      	cmp	r0, #0
 800319c:	d0ae      	beq.n	80030fc <event_send_core+0x54>

    switch(e->code) {
 800319e:	7a23      	ldrb	r3, [r4, #8]
 80031a0:	2b1b      	cmp	r3, #27
 80031a2:	d80b      	bhi.n	80031bc <event_send_core+0x114>
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d8aa      	bhi.n	80030fe <event_send_core+0x56>
        e->current_target = e->current_target->parent;
 80031a8:	6863      	ldr	r3, [r4, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	6063      	str	r3, [r4, #4]
        res = event_send_core(e);
 80031ae:	4620      	mov	r0, r4
 80031b0:	f7ff ff7a 	bl	80030a8 <event_send_core>
        if(e->stop_processing) return LV_RES_OK;
 80031b4:	1e43      	subs	r3, r0, #1
 80031b6:	425e      	negs	r6, r3
 80031b8:	415e      	adcs	r6, r3
 80031ba:	e7a0      	b.n	80030fe <event_send_core+0x56>
    switch(e->code) {
 80031bc:	3b1e      	subs	r3, #30
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	2a0e      	cmp	r2, #14
 80031c2:	d8f1      	bhi.n	80031a8 <event_send_core+0x100>
 80031c4:	2b0e      	cmp	r3, #14
 80031c6:	d8ef      	bhi.n	80031a8 <event_send_core+0x100>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <event_send_core+0x128>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080030ff 	.word	0x080030ff
 80031d4:	080031a9 	.word	0x080031a9
 80031d8:	080031a9 	.word	0x080031a9
 80031dc:	080030ff 	.word	0x080030ff
 80031e0:	080030ff 	.word	0x080030ff
 80031e4:	080030ff 	.word	0x080030ff
 80031e8:	080030ff 	.word	0x080030ff
 80031ec:	080031a9 	.word	0x080031a9
 80031f0:	080031a9 	.word	0x080031a9
 80031f4:	080031a9 	.word	0x080031a9
 80031f8:	080031a9 	.word	0x080031a9
 80031fc:	080030ff 	.word	0x080030ff
 8003200:	080030ff 	.word	0x080030ff
 8003204:	080031a9 	.word	0x080031a9
 8003208:	080030ff 	.word	0x080030ff

0800320c <lv_event_send>:
{
 800320c:	b510      	push	{r4, lr}
 800320e:	b088      	sub	sp, #32
    if(obj == NULL) return LV_RES_OK;
 8003210:	b1b8      	cbz	r0, 8003242 <lv_event_send+0x36>
    e.user_data = NULL;
 8003212:	2300      	movs	r3, #0
    e.param = param;
 8003214:	e9cd 3204 	strd	r3, r2, [sp, #16]
    e.deleted = 0;
 8003218:	f89d 301c 	ldrb.w	r3, [sp, #28]
    e.prev = event_head;
 800321c:	4c0a      	ldr	r4, [pc, #40]	; (8003248 <lv_event_send+0x3c>)
    e.code = event_code;
 800321e:	f88d 100c 	strb.w	r1, [sp, #12]
    e.deleted = 0;
 8003222:	f023 0307 	bic.w	r3, r3, #7
    e.current_target = obj;
 8003226:	e9cd 0001 	strd	r0, r0, [sp, #4]
    e.deleted = 0;
 800322a:	f88d 301c 	strb.w	r3, [sp, #28]
    event_head = &e;
 800322e:	a801      	add	r0, sp, #4
    e.prev = event_head;
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	9306      	str	r3, [sp, #24]
    event_head = &e;
 8003234:	6020      	str	r0, [r4, #0]
    lv_res_t res = event_send_core(&e);
 8003236:	f7ff ff37 	bl	80030a8 <event_send_core>
    event_head = e.prev;
 800323a:	9b06      	ldr	r3, [sp, #24]
 800323c:	6023      	str	r3, [r4, #0]
}
 800323e:	b008      	add	sp, #32
 8003240:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 8003242:	2001      	movs	r0, #1
 8003244:	e7fb      	b.n	800323e <lv_event_send+0x32>
 8003246:	bf00      	nop
 8003248:	20000b3c 	.word	0x20000b3c

0800324c <lv_event_get_target>:
}
 800324c:	6800      	ldr	r0, [r0, #0]
 800324e:	4770      	bx	lr

08003250 <lv_event_get_current_target>:
}
 8003250:	6840      	ldr	r0, [r0, #4]
 8003252:	4770      	bx	lr

08003254 <lv_event_get_code>:
    return e->code & ~LV_EVENT_PREPROCESS;
 8003254:	7a00      	ldrb	r0, [r0, #8]
}
 8003256:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800325a:	4770      	bx	lr

0800325c <lv_event_get_param>:
}
 800325c:	6900      	ldr	r0, [r0, #16]
 800325e:	4770      	bx	lr

08003260 <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <_lv_event_mark_deleted+0x20>)
 8003262:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8003264:	b903      	cbnz	r3, 8003268 <_lv_event_mark_deleted+0x8>
}
 8003266:	4770      	bx	lr
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4282      	cmp	r2, r0
 800326c:	d002      	beq.n	8003274 <_lv_event_mark_deleted+0x14>
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4282      	cmp	r2, r0
 8003272:	d103      	bne.n	800327c <_lv_event_mark_deleted+0x1c>
 8003274:	7e1a      	ldrb	r2, [r3, #24]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	e7f1      	b.n	8003264 <_lv_event_mark_deleted+0x4>
 8003280:	20000b3c 	.word	0x20000b3c

08003284 <lv_obj_add_event_cb>:
{
 8003284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003288:	4606      	mov	r6, r0
 800328a:	4690      	mov	r8, r2
 800328c:	4699      	mov	r9, r3
 800328e:	460f      	mov	r7, r1
    lv_obj_allocate_spec_attr(obj);
 8003290:	f001 f8ae 	bl	80043f0 <lv_obj_allocate_spec_attr>
    obj->spec_attr->event_dsc_cnt++;
 8003294:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8003298:	f89a 501a 	ldrb.w	r5, [sl, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 800329c:	f8da 000c 	ldr.w	r0, [sl, #12]
    obj->spec_attr->event_dsc_cnt++;
 80032a0:	1c6c      	adds	r4, r5, #1
 80032a2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80032a6:	f364 0505 	bfi	r5, r4, #0, #6
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 80032aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    obj->spec_attr->event_dsc_cnt++;
 80032ae:	f88a 501a 	strb.w	r5, [sl, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 80032b2:	00a1      	lsls	r1, r4, #2
 80032b4:	f010 f86e 	bl	8013394 <lv_mem_realloc>
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 80032b8:	68b2      	ldr	r2, [r6, #8]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 80032ba:	f8ca 000c 	str.w	r0, [sl, #12]
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 80032be:	68d3      	ldr	r3, [r2, #12]
 80032c0:	b903      	cbnz	r3, 80032c4 <lv_obj_add_event_cb+0x40>
 80032c2:	e7fe      	b.n	80032c2 <lv_obj_add_event_cb+0x3e>
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 80032c4:	7e94      	ldrb	r4, [r2, #26]
 80032c6:	f06f 010b 	mvn.w	r1, #11
 80032ca:	f004 023f 	and.w	r2, r4, #63	; 0x3f
 80032ce:	240c      	movs	r4, #12
 80032d0:	fb14 1402 	smlabb	r4, r4, r2, r1
 80032d4:	1918      	adds	r0, r3, r4
 80032d6:	511f      	str	r7, [r3, r4]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
 80032d8:	f880 8008 	strb.w	r8, [r0, #8]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 80032dc:	f8c0 9004 	str.w	r9, [r0, #4]
}
 80032e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080032e4 <lv_event_get_indev>:
       e->code == LV_EVENT_DEFOCUSED ||
 80032e4:	7a03      	ldrb	r3, [r0, #8]
    if(e->code == LV_EVENT_PRESSED ||
 80032e6:	3b01      	subs	r3, #1
 80032e8:	2b0f      	cmp	r3, #15
    return e->param;
 80032ea:	bf94      	ite	ls
 80032ec:	6900      	ldrls	r0, [r0, #16]
        return NULL;
 80032ee:	2000      	movhi	r0, #0
}
 80032f0:	4770      	bx	lr

080032f2 <lv_event_get_draw_ctx>:
    if(e->code == LV_EVENT_DRAW_MAIN ||
 80032f2:	7a03      	ldrb	r3, [r0, #8]
 80032f4:	3b14      	subs	r3, #20
 80032f6:	2b05      	cmp	r3, #5
    return e->param;
 80032f8:	bf94      	ite	ls
 80032fa:	6900      	ldrls	r0, [r0, #16]
        return NULL;
 80032fc:	2000      	movhi	r0, #0
}
 80032fe:	4770      	bx	lr

08003300 <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8003300:	7a03      	ldrb	r3, [r0, #8]
 8003302:	2b13      	cmp	r3, #19
 8003304:	d106      	bne.n	8003314 <lv_event_set_ext_draw_size+0x14>
    return e->param;
 8003306:	6902      	ldr	r2, [r0, #16]
        *cur_size = LV_MAX(*cur_size, size);
 8003308:	f9b2 3000 	ldrsh.w	r3, [r2]
 800330c:	4299      	cmp	r1, r3
 800330e:	bfb8      	it	lt
 8003310:	4619      	movlt	r1, r3
 8003312:	8011      	strh	r1, [r2, #0]
}
 8003314:	4770      	bx	lr

08003316 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 8003316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003318:	4607      	mov	r7, r0
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800331a:	2000      	movs	r0, #0
 800331c:	f00f f86a 	bl	80123f4 <lv_indev_get_next>
    lv_indev_t * indev_group = NULL;
 8003320:	2600      	movs	r6, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8003322:	4604      	mov	r4, r0
    lv_indev_t * indev_encoder = NULL;
 8003324:	4635      	mov	r5, r6
    while(indev) {
 8003326:	b934      	cbnz	r4, 8003336 <get_indev+0x20>
            indev_group = indev;
        }
        indev = lv_indev_get_next(indev);
    }

    if(indev_encoder) return indev_encoder;
 8003328:	b9bd      	cbnz	r5, 800335a <get_indev+0x44>
    if(indev_group) return indev_group;
 800332a:	b9c6      	cbnz	r6, 800335e <get_indev+0x48>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 800332c:	4630      	mov	r0, r6
}
 800332e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return lv_indev_get_next(NULL);
 8003332:	f00f b85f 	b.w	80123f4 <lv_indev_get_next>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8003336:	4620      	mov	r0, r4
 8003338:	f000 f982 	bl	8003640 <lv_indev_get_type>
        if(indev->group == g) {
 800333c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800333e:	42bb      	cmp	r3, r7
 8003340:	d105      	bne.n	800334e <get_indev+0x38>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8003342:	2802      	cmp	r0, #2
 8003344:	d008      	beq.n	8003358 <get_indev+0x42>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8003346:	4626      	mov	r6, r4
 8003348:	2804      	cmp	r0, #4
 800334a:	bf08      	it	eq
 800334c:	4625      	moveq	r5, r4
        indev = lv_indev_get_next(indev);
 800334e:	4620      	mov	r0, r4
 8003350:	f00f f850 	bl	80123f4 <lv_indev_get_next>
 8003354:	4604      	mov	r4, r0
 8003356:	e7e6      	b.n	8003326 <get_indev+0x10>
 8003358:	4625      	mov	r5, r4
}
 800335a:	4628      	mov	r0, r5
 800335c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800335e:	4635      	mov	r5, r6
 8003360:	e7fb      	b.n	800335a <get_indev+0x44>

08003362 <focus_next_core>:
{
 8003362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->frozen) return focus_changed;
 8003366:	7f06      	ldrb	r6, [r0, #28]
 8003368:	f016 0601 	ands.w	r6, r6, #1
{
 800336c:	4605      	mov	r5, r0
 800336e:	4689      	mov	r9, r1
 8003370:	4690      	mov	r8, r2
    if(group->frozen) return focus_changed;
 8003372:	d002      	beq.n	800337a <focus_next_core+0x18>
 8003374:	2000      	movs	r0, #0
}
 8003376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_obj_t ** obj_next     = group->obj_focus;
 800337a:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
 800337c:	f04f 0a01 	mov.w	sl, #1
        if(obj_next == NULL) {
 8003380:	2c00      	cmp	r4, #0
 8003382:	d158      	bne.n	8003436 <focus_next_core+0xd4>
            if(group->wrap || obj_sentinel == NULL) {
 8003384:	7f2b      	ldrb	r3, [r5, #28]
 8003386:	071a      	lsls	r2, r3, #28
 8003388:	d401      	bmi.n	800338e <focus_next_core+0x2c>
 800338a:	2e00      	cmp	r6, #0
 800338c:	d1f2      	bne.n	8003374 <focus_next_core+0x12>
                if(!can_begin) return focus_changed;
 800338e:	f1ba 0f00 	cmp.w	sl, #0
 8003392:	d0ef      	beq.n	8003374 <focus_next_core+0x12>
                obj_next  = begin(&group->obj_ll);
 8003394:	4628      	mov	r0, r5
 8003396:	47c8      	blx	r9
 8003398:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
 800339a:	2e00      	cmp	r6, #0
 800339c:	d135      	bne.n	800340a <focus_next_core+0xa8>
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 800339e:	2800      	cmp	r0, #0
 80033a0:	d0e8      	beq.n	8003374 <focus_next_core+0x12>
 80033a2:	4606      	mov	r6, r0
                can_begin = false;
 80033a4:	f04f 0a00 	mov.w	sl, #0
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 80033a8:	6820      	ldr	r0, [r4, #0]
 80033aa:	f000 fe4b 	bl	8004044 <lv_obj_get_state>
 80033ae:	0603      	lsls	r3, r0, #24
 80033b0:	d4e6      	bmi.n	8003380 <focus_next_core+0x1e>
        lv_obj_t * parent = *obj_next;
 80033b2:	6827      	ldr	r7, [r4, #0]
        while(parent) {
 80033b4:	bb77      	cbnz	r7, 8003414 <focus_next_core+0xb2>
    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 80033b6:	68eb      	ldr	r3, [r5, #12]
 80033b8:	42a3      	cmp	r3, r4
 80033ba:	d0db      	beq.n	8003374 <focus_next_core+0x12>
    if(group->obj_focus) {
 80033bc:	b173      	cbz	r3, 80033dc <focus_next_core+0x7a>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 80033be:	4628      	mov	r0, r5
 80033c0:	681e      	ldr	r6, [r3, #0]
 80033c2:	f7ff ffa8 	bl	8003316 <get_indev>
 80033c6:	210f      	movs	r1, #15
 80033c8:	4602      	mov	r2, r0
 80033ca:	4630      	mov	r0, r6
 80033cc:	f7ff ff1e 	bl	800320c <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 80033d0:	2801      	cmp	r0, #1
 80033d2:	d1cf      	bne.n	8003374 <focus_next_core+0x12>
        lv_obj_invalidate(*group->obj_focus);
 80033d4:	68eb      	ldr	r3, [r5, #12]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	f001 ffc6 	bl	8005368 <lv_obj_invalidate>
    group->obj_focus = obj_next;
 80033dc:	60ec      	str	r4, [r5, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 80033de:	4628      	mov	r0, r5
 80033e0:	6824      	ldr	r4, [r4, #0]
 80033e2:	f7ff ff98 	bl	8003316 <get_indev>
 80033e6:	210e      	movs	r1, #14
 80033e8:	4602      	mov	r2, r0
 80033ea:	4620      	mov	r0, r4
 80033ec:	f7ff ff0e 	bl	800320c <lv_event_send>
    if(res != LV_RES_OK) return focus_changed;
 80033f0:	2801      	cmp	r0, #1
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 80033f2:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return focus_changed;
 80033f4:	d1be      	bne.n	8003374 <focus_next_core+0x12>
    lv_obj_invalidate(*group->obj_focus);
 80033f6:	68eb      	ldr	r3, [r5, #12]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	f001 ffb5 	bl	8005368 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 80033fe:	692b      	ldr	r3, [r5, #16]
 8003400:	b10b      	cbz	r3, 8003406 <focus_next_core+0xa4>
 8003402:	4628      	mov	r0, r5
 8003404:	4798      	blx	r3
    return focus_changed;
 8003406:	4620      	mov	r0, r4
 8003408:	e7b5      	b.n	8003376 <focus_next_core+0x14>
                can_begin = false;
 800340a:	f04f 0a00 	mov.w	sl, #0
        if(obj_next == NULL) continue;
 800340e:	2c00      	cmp	r4, #0
 8003410:	d1ca      	bne.n	80033a8 <focus_next_core+0x46>
 8003412:	e7b7      	b.n	8003384 <focus_next_core+0x22>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8003414:	2101      	movs	r1, #1
 8003416:	4638      	mov	r0, r7
 8003418:	f000 fe07 	bl	800402a <lv_obj_has_flag>
 800341c:	b920      	cbnz	r0, 8003428 <focus_next_core+0xc6>
            parent = lv_obj_get_parent(parent);
 800341e:	4638      	mov	r0, r7
 8003420:	f004 fe24 	bl	800806c <lv_obj_get_parent>
 8003424:	4607      	mov	r7, r0
 8003426:	e7c5      	b.n	80033b4 <focus_next_core+0x52>
        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 8003428:	2101      	movs	r1, #1
 800342a:	4638      	mov	r0, r7
 800342c:	f000 fdfd 	bl	800402a <lv_obj_has_flag>
 8003430:	2800      	cmp	r0, #0
 8003432:	d0c0      	beq.n	80033b6 <focus_next_core+0x54>
 8003434:	e7a4      	b.n	8003380 <focus_next_core+0x1e>
            obj_next = move(&group->obj_ll, obj_next);
 8003436:	4621      	mov	r1, r4
 8003438:	4628      	mov	r0, r5
 800343a:	47c0      	blx	r8
        if(obj_sentinel == NULL) {
 800343c:	2e00      	cmp	r6, #0
 800343e:	bf08      	it	eq
 8003440:	4626      	moveq	r6, r4
            if(obj_next == obj_sentinel) return focus_changed;
 8003442:	42b0      	cmp	r0, r6
            obj_next = move(&group->obj_ll, obj_next);
 8003444:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return focus_changed;
 8003446:	d1e2      	bne.n	800340e <focus_next_core+0xac>
 8003448:	e794      	b.n	8003374 <focus_next_core+0x12>
	...

0800344c <_lv_group_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <_lv_group_init+0x8>)
 800344e:	2120      	movs	r1, #32
 8003450:	f00f be11 	b.w	8013076 <_lv_ll_init>
 8003454:	20000de4 	.word	0x20000de4

08003458 <lv_group_get_default>:
}
 8003458:	4b01      	ldr	r3, [pc, #4]	; (8003460 <lv_group_get_default+0x8>)
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000b40 	.word	0x20000b40

08003464 <lv_group_focus_next>:
{
 8003464:	b510      	push	{r4, lr}
 8003466:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 8003468:	4a06      	ldr	r2, [pc, #24]	; (8003484 <lv_group_focus_next+0x20>)
 800346a:	4907      	ldr	r1, [pc, #28]	; (8003488 <lv_group_focus_next+0x24>)
 800346c:	f7ff ff79 	bl	8003362 <focus_next_core>
    if(group->edge_cb) {
 8003470:	6963      	ldr	r3, [r4, #20]
 8003472:	b12b      	cbz	r3, 8003480 <lv_group_focus_next+0x1c>
        if(!focus_changed)
 8003474:	b920      	cbnz	r0, 8003480 <lv_group_focus_next+0x1c>
            group->edge_cb(group, true);
 8003476:	4620      	mov	r0, r4
 8003478:	2101      	movs	r1, #1
}
 800347a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            group->edge_cb(group, true);
 800347e:	4718      	bx	r3
}
 8003480:	bd10      	pop	{r4, pc}
 8003482:	bf00      	nop
 8003484:	08013153 	.word	0x08013153
 8003488:	08013147 	.word	0x08013147

0800348c <lv_group_focus_prev>:
{
 800348c:	b510      	push	{r4, lr}
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 800348e:	4907      	ldr	r1, [pc, #28]	; (80034ac <lv_group_focus_prev+0x20>)
 8003490:	4a07      	ldr	r2, [pc, #28]	; (80034b0 <lv_group_focus_prev+0x24>)
{
 8003492:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 8003494:	f7ff ff65 	bl	8003362 <focus_next_core>
    if(group->edge_cb) {
 8003498:	6963      	ldr	r3, [r4, #20]
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 800349a:	4601      	mov	r1, r0
    if(group->edge_cb) {
 800349c:	b123      	cbz	r3, 80034a8 <lv_group_focus_prev+0x1c>
        if(!focus_changed)
 800349e:	b918      	cbnz	r0, 80034a8 <lv_group_focus_prev+0x1c>
            group->edge_cb(group, false);
 80034a0:	4620      	mov	r0, r4
}
 80034a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            group->edge_cb(group, false);
 80034a6:	4718      	bx	r3
}
 80034a8:	bd10      	pop	{r4, pc}
 80034aa:	bf00      	nop
 80034ac:	0801314d 	.word	0x0801314d
 80034b0:	0801315b 	.word	0x0801315b

080034b4 <lv_group_refocus>:
{
 80034b4:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 80034b6:	7f03      	ldrb	r3, [r0, #28]
 80034b8:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    g->wrap           = 1;
 80034bc:	f043 0308 	orr.w	r3, r3, #8
 80034c0:	7703      	strb	r3, [r0, #28]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80034c2:	075b      	lsls	r3, r3, #29
{
 80034c4:	4604      	mov	r4, r0
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80034c6:	d406      	bmi.n	80034d6 <lv_group_refocus+0x22>
        lv_group_focus_next(g);
 80034c8:	f7ff ffcc 	bl	8003464 <lv_group_focus_next>
    g->wrap = temp_wrap;
 80034cc:	7f23      	ldrb	r3, [r4, #28]
 80034ce:	f365 03c3 	bfi	r3, r5, #3, #1
 80034d2:	7723      	strb	r3, [r4, #28]
}
 80034d4:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 80034d6:	f7ff ffd9 	bl	800348c <lv_group_focus_prev>
 80034da:	e7f7      	b.n	80034cc <lv_group_refocus+0x18>

080034dc <lv_group_remove_obj>:
{
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	4606      	mov	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 80034e0:	f000 fdb2 	bl	8004048 <lv_obj_get_group>
    if(g == NULL) return;
 80034e4:	4604      	mov	r4, r0
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d038      	beq.n	800355c <lv_group_remove_obj+0x80>
    if(g->obj_focus && *g->obj_focus == obj) {
 80034ea:	68c3      	ldr	r3, [r0, #12]
 80034ec:	b1e3      	cbz	r3, 8003528 <lv_group_remove_obj+0x4c>
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	42b3      	cmp	r3, r6
 80034f2:	d119      	bne.n	8003528 <lv_group_remove_obj+0x4c>
        if(g->frozen) g->frozen = 0;
 80034f4:	7f03      	ldrb	r3, [r0, #28]
 80034f6:	07da      	lsls	r2, r3, #31
 80034f8:	bf44      	itt	mi
 80034fa:	f36f 0300 	bfcmi	r3, #0, #1
 80034fe:	7703      	strbmi	r3, [r0, #28]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8003500:	f00f fe21 	bl	8013146 <_lv_ll_get_head>
 8003504:	68e3      	ldr	r3, [r4, #12]
 8003506:	4283      	cmp	r3, r0
 8003508:	d129      	bne.n	800355e <lv_group_remove_obj+0x82>
 800350a:	4620      	mov	r0, r4
 800350c:	f00f fe1e 	bl	801314c <_lv_ll_get_tail>
 8003510:	68e3      	ldr	r3, [r4, #12]
 8003512:	4298      	cmp	r0, r3
 8003514:	d123      	bne.n	800355e <lv_group_remove_obj+0x82>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8003516:	6805      	ldr	r5, [r0, #0]
 8003518:	4620      	mov	r0, r4
 800351a:	f7ff fefc 	bl	8003316 <get_indev>
 800351e:	210f      	movs	r1, #15
 8003520:	4602      	mov	r2, r0
 8003522:	4628      	mov	r0, r5
 8003524:	f7ff fe72 	bl	800320c <lv_event_send>
    if(g->obj_focus && *g->obj_focus == obj) {
 8003528:	68e3      	ldr	r3, [r4, #12]
 800352a:	b123      	cbz	r3, 8003536 <lv_group_remove_obj+0x5a>
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	42b3      	cmp	r3, r6
        g->obj_focus = NULL;
 8003530:	bf04      	itt	eq
 8003532:	2300      	moveq	r3, #0
 8003534:	60e3      	streq	r3, [r4, #12]
    _LV_LL_READ(&g->obj_ll, i) {
 8003536:	4620      	mov	r0, r4
 8003538:	f00f fe05 	bl	8013146 <_lv_ll_get_head>
 800353c:	4605      	mov	r5, r0
 800353e:	b168      	cbz	r0, 800355c <lv_group_remove_obj+0x80>
        if(*i == obj) {
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	42b3      	cmp	r3, r6
            _lv_ll_remove(&g->obj_ll, i);
 8003544:	4629      	mov	r1, r5
 8003546:	4620      	mov	r0, r4
        if(*i == obj) {
 8003548:	d10d      	bne.n	8003566 <lv_group_remove_obj+0x8a>
            _lv_ll_remove(&g->obj_ll, i);
 800354a:	f00f fdd3 	bl	80130f4 <_lv_ll_remove>
            lv_mem_free(i);
 800354e:	4628      	mov	r0, r5
 8003550:	f00f ff08 	bl	8013364 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 8003554:	68b3      	ldr	r3, [r6, #8]
 8003556:	b10b      	cbz	r3, 800355c <lv_group_remove_obj+0x80>
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 800355e:	4620      	mov	r0, r4
 8003560:	f7ff ffa8 	bl	80034b4 <lv_group_refocus>
 8003564:	e7e0      	b.n	8003528 <lv_group_remove_obj+0x4c>
    _LV_LL_READ(&g->obj_ll, i) {
 8003566:	f00f fdf4 	bl	8013152 <_lv_ll_get_next>
 800356a:	e7e7      	b.n	800353c <lv_group_remove_obj+0x60>

0800356c <lv_group_add_obj>:
{
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	460c      	mov	r4, r1
    if(group == NULL) return;
 8003570:	4605      	mov	r5, r0
 8003572:	b398      	cbz	r0, 80035dc <lv_group_add_obj+0x70>
    lv_group_remove_obj(obj);
 8003574:	4608      	mov	r0, r1
 8003576:	f7ff ffb1 	bl	80034dc <lv_group_remove_obj>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800357a:	4628      	mov	r0, r5
 800357c:	f00f fde3 	bl	8013146 <_lv_ll_get_head>
 8003580:	b9c8      	cbnz	r0, 80035b6 <lv_group_add_obj+0x4a>
    lv_group_t * group_cur = lv_obj_get_group(obj);
 8003582:	4620      	mov	r0, r4
 8003584:	f000 fd60 	bl	8004048 <lv_obj_get_group>
    if(group_cur) {
 8003588:	b140      	cbz	r0, 800359c <lv_group_add_obj+0x30>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 800358a:	68a3      	ldr	r3, [r4, #8]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	b153      	cbz	r3, 80035a6 <lv_group_add_obj+0x3a>
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	42a3      	cmp	r3, r4
 8003596:	d106      	bne.n	80035a6 <lv_group_add_obj+0x3a>
            lv_group_refocus(group_cur);
 8003598:	f7ff ff8c 	bl	80034b4 <lv_group_refocus>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 800359c:	68a3      	ldr	r3, [r4, #8]
 800359e:	b913      	cbnz	r3, 80035a6 <lv_group_add_obj+0x3a>
 80035a0:	4620      	mov	r0, r4
 80035a2:	f000 ff25 	bl	80043f0 <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 80035a6:	68a3      	ldr	r3, [r4, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 80035a8:	4628      	mov	r0, r5
    obj->spec_attr->group_p = group;
 80035aa:	609d      	str	r5, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 80035ac:	f00f fd86 	bl	80130bc <_lv_ll_ins_tail>
    LV_ASSERT_MALLOC(next);
 80035b0:	4606      	mov	r6, r0
 80035b2:	b940      	cbnz	r0, 80035c6 <lv_group_add_obj+0x5a>
 80035b4:	e7fe      	b.n	80035b4 <lv_group_add_obj+0x48>
        if((*obj_i) == obj) {
 80035b6:	6803      	ldr	r3, [r0, #0]
 80035b8:	42a3      	cmp	r3, r4
 80035ba:	d00f      	beq.n	80035dc <lv_group_add_obj+0x70>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 80035bc:	4601      	mov	r1, r0
 80035be:	4628      	mov	r0, r5
 80035c0:	f00f fdc7 	bl	8013152 <_lv_ll_get_next>
 80035c4:	e7dc      	b.n	8003580 <lv_group_add_obj+0x14>
    *next = obj;
 80035c6:	6004      	str	r4, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 80035c8:	4628      	mov	r0, r5
 80035ca:	f00f fdbc 	bl	8013146 <_lv_ll_get_head>
 80035ce:	4286      	cmp	r6, r0
 80035d0:	d104      	bne.n	80035dc <lv_group_add_obj+0x70>
        lv_group_refocus(group);
 80035d2:	4628      	mov	r0, r5
}
 80035d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 80035d8:	f7ff bf6c 	b.w	80034b4 <lv_group_refocus>
}
 80035dc:	bd70      	pop	{r4, r5, r6, pc}

080035de <lv_group_get_focused>:
    if(!group) return NULL;
 80035de:	b110      	cbz	r0, 80035e6 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 80035e0:	68c0      	ldr	r0, [r0, #12]
 80035e2:	b100      	cbz	r0, 80035e6 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 80035e4:	6800      	ldr	r0, [r0, #0]
}
 80035e6:	4770      	bx	lr

080035e8 <lv_group_set_editing>:
{
 80035e8:	b538      	push	{r3, r4, r5, lr}
    if(group == NULL) return;
 80035ea:	4603      	mov	r3, r0
 80035ec:	b1e0      	cbz	r0, 8003628 <lv_group_set_editing+0x40>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 80035ee:	7f02      	ldrb	r2, [r0, #28]
 80035f0:	f3c2 0440 	ubfx	r4, r2, #1, #1
 80035f4:	428c      	cmp	r4, r1
 80035f6:	d017      	beq.n	8003628 <lv_group_set_editing+0x40>
    group->editing     = en_val;
 80035f8:	f361 0241 	bfi	r2, r1, #1, #1
 80035fc:	7702      	strb	r2, [r0, #28]
    lv_obj_t * focused = lv_group_get_focused(group);
 80035fe:	f7ff ffee 	bl	80035de <lv_group_get_focused>
    if(focused) {
 8003602:	4604      	mov	r4, r0
 8003604:	b180      	cbz	r0, 8003628 <lv_group_set_editing+0x40>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	4618      	mov	r0, r3
 800360a:	6815      	ldr	r5, [r2, #0]
 800360c:	f7ff fe83 	bl	8003316 <get_indev>
 8003610:	210e      	movs	r1, #14
 8003612:	4602      	mov	r2, r0
 8003614:	4628      	mov	r0, r5
 8003616:	f7ff fdf9 	bl	800320c <lv_event_send>
        if(res != LV_RES_OK) return;
 800361a:	2801      	cmp	r0, #1
 800361c:	d104      	bne.n	8003628 <lv_group_set_editing+0x40>
        lv_obj_invalidate(focused);
 800361e:	4620      	mov	r0, r4
}
 8003620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(focused);
 8003624:	f001 bea0 	b.w	8005368 <lv_obj_invalidate>
}
 8003628:	bd38      	pop	{r3, r4, r5, pc}

0800362a <lv_group_get_editing>:
    if(!group) return false;
 800362a:	b110      	cbz	r0, 8003632 <lv_group_get_editing+0x8>
    return group->editing ? true : false;
 800362c:	7f00      	ldrb	r0, [r0, #28]
 800362e:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 8003632:	4770      	bx	lr

08003634 <lv_indev_get_act>:
}

lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
 8003634:	4b01      	ldr	r3, [pc, #4]	; (800363c <lv_indev_get_act+0x8>)
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000b44 	.word	0x20000b44

08003640 <lv_indev_get_type>:

lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8003640:	b108      	cbz	r0, 8003646 <lv_indev_get_type+0x6>

    return indev->driver->type;
 8003642:	6803      	ldr	r3, [r0, #0]
 8003644:	7818      	ldrb	r0, [r3, #0]
}
 8003646:	4770      	bx	lr

08003648 <lv_indev_reset>:

void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	460d      	mov	r5, r1
    if(indev) {
 800364c:	4604      	mov	r4, r0
 800364e:	2800      	cmp	r0, #0
 8003650:	d03a      	beq.n	80036c8 <lv_indev_reset+0x80>
        indev->proc.reset_query = 1;
 8003652:	7943      	ldrb	r3, [r0, #5]
 8003654:	f043 0302 	orr.w	r3, r3, #2
 8003658:	7143      	strb	r3, [r0, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 800365a:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <lv_indev_reset+0x98>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4283      	cmp	r3, r0
 8003660:	bf02      	ittt	eq
 8003662:	4b20      	ldreq	r3, [pc, #128]	; (80036e4 <lv_indev_reset+0x9c>)
 8003664:	2200      	moveq	r2, #0
 8003666:	601a      	streq	r2, [r3, #0]
        if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8003668:	6803      	ldr	r3, [r0, #0]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	3b01      	subs	r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d80e      	bhi.n	8003690 <lv_indev_reset+0x48>
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8003672:	b171      	cbz	r1, 8003692 <lv_indev_reset+0x4a>
 8003674:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003676:	428b      	cmp	r3, r1
 8003678:	d00b      	beq.n	8003692 <lv_indev_reset+0x4a>
                indev->proc.types.pointer.last_pressed = NULL;
            }
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 800367a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800367c:	42ab      	cmp	r3, r5
 800367e:	d102      	bne.n	8003686 <lv_indev_reset+0x3e>
                indev->proc.types.pointer.act_obj = NULL;
 8003680:	2300      	movs	r3, #0
 8003682:	62a3      	str	r3, [r4, #40]	; 0x28
            }
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 8003684:	b115      	cbz	r5, 800368c <lv_indev_reset+0x44>
 8003686:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003688:	42ab      	cmp	r3, r5
 800368a:	d101      	bne.n	8003690 <lv_indev_reset+0x48>
                indev->proc.types.pointer.last_obj = NULL;
 800368c:	2300      	movs	r3, #0
 800368e:	62e3      	str	r3, [r4, #44]	; 0x2c
            }
            i = lv_indev_get_next(i);
        }
        indev_obj_act = NULL;
    }
}
 8003690:	bd38      	pop	{r3, r4, r5, pc}
                indev->proc.types.pointer.last_pressed = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	6363      	str	r3, [r4, #52]	; 0x34
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 8003696:	2d00      	cmp	r5, #0
 8003698:	d0f2      	beq.n	8003680 <lv_indev_reset+0x38>
 800369a:	e7ee      	b.n	800367a <lv_indev_reset+0x32>
            i->proc.reset_query = 1;
 800369c:	7943      	ldrb	r3, [r0, #5]
 800369e:	f043 0302 	orr.w	r3, r3, #2
 80036a2:	7143      	strb	r3, [r0, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80036a4:	6803      	ldr	r3, [r0, #0]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d80c      	bhi.n	80036c8 <lv_indev_reset+0x80>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 80036ae:	b195      	cbz	r5, 80036d6 <lv_indev_reset+0x8e>
 80036b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80036b2:	42ab      	cmp	r3, r5
 80036b4:	d00f      	beq.n	80036d6 <lv_indev_reset+0x8e>
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 80036b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80036b8:	42ab      	cmp	r3, r5
 80036ba:	d101      	bne.n	80036c0 <lv_indev_reset+0x78>
                    i->proc.types.pointer.act_obj = NULL;
 80036bc:	6284      	str	r4, [r0, #40]	; 0x28
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 80036be:	b115      	cbz	r5, 80036c6 <lv_indev_reset+0x7e>
 80036c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80036c2:	42ab      	cmp	r3, r5
 80036c4:	d100      	bne.n	80036c8 <lv_indev_reset+0x80>
                    i->proc.types.pointer.last_obj = NULL;
 80036c6:	62c4      	str	r4, [r0, #44]	; 0x2c
            i = lv_indev_get_next(i);
 80036c8:	f00e fe94 	bl	80123f4 <lv_indev_get_next>
        while(i) {
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d1e5      	bne.n	800369c <lv_indev_reset+0x54>
        indev_obj_act = NULL;
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <lv_indev_reset+0x9c>)
 80036d2:	6018      	str	r0, [r3, #0]
}
 80036d4:	e7dc      	b.n	8003690 <lv_indev_reset+0x48>
                    i->proc.types.pointer.last_pressed = NULL;
 80036d6:	6344      	str	r4, [r0, #52]	; 0x34
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 80036d8:	2d00      	cmp	r5, #0
 80036da:	d0ef      	beq.n	80036bc <lv_indev_reset+0x74>
 80036dc:	e7eb      	b.n	80036b6 <lv_indev_reset+0x6e>
 80036de:	bf00      	nop
 80036e0:	20000b44 	.word	0x20000b44
 80036e4:	20000b48 	.word	0x20000b48

080036e8 <lv_indev_reset_long_press>:

void lv_indev_reset_long_press(lv_indev_t * indev)
{
    indev->proc.long_pr_sent         = 0;
 80036e8:	7943      	ldrb	r3, [r0, #5]
 80036ea:	f36f 0300 	bfc	r3, #0, #1
{
 80036ee:	b510      	push	{r4, lr}
    indev->proc.long_pr_sent         = 0;
 80036f0:	7143      	strb	r3, [r0, #5]
{
 80036f2:	4604      	mov	r4, r0
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 80036f4:	f00e fe88 	bl	8012408 <lv_tick_get>
 80036f8:	64e0      	str	r0, [r4, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 80036fa:	f00e fe85 	bl	8012408 <lv_tick_get>
 80036fe:	64a0      	str	r0, [r4, #72]	; 0x48
}
 8003700:	bd10      	pop	{r4, pc}

08003702 <lv_indev_get_point>:
    }
}

void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point)
{
    if(indev == NULL) {
 8003702:	b910      	cbnz	r0, 800370a <lv_indev_get_point+0x8>
        point->x = 0;
 8003704:	8008      	strh	r0, [r1, #0]
        point->y = 0;
 8003706:	8048      	strh	r0, [r1, #2]
        return;
 8003708:	4770      	bx	lr
    }
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) {
 800370a:	6803      	ldr	r3, [r0, #0]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8003712:	2b01      	cmp	r3, #1
        point->x = -1;
        point->y = -1;
    }
    else {
        point->x = indev->proc.types.pointer.act_point.x;
 8003714:	bf05      	ittet	eq
 8003716:	f9b0 3008 	ldrsheq.w	r3, [r0, #8]
 800371a:	800b      	strheq	r3, [r1, #0]
        point->x = -1;
 800371c:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->y = indev->proc.types.pointer.act_point.y;
 8003720:	f9b0 300a 	ldrsheq.w	r3, [r0, #10]
        point->x = -1;
 8003724:	bf18      	it	ne
 8003726:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 8003728:	804b      	strh	r3, [r1, #2]
    }
}
 800372a:	4770      	bx	lr

0800372c <lv_indev_get_scroll_dir>:
        return indev->proc.types.keypad.last_key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
    if(indev == NULL) return false;
 800372c:	b158      	cbz	r0, 8003746 <lv_indev_get_scroll_dir+0x1a>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 800372e:	6803      	ldr	r3, [r0, #0]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8003736:	2b01      	cmp	r3, #1
 8003738:	d104      	bne.n	8003744 <lv_indev_get_scroll_dir+0x18>
    return indev->proc.types.pointer.scroll_dir;
 800373a:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800373e:	f000 000f 	and.w	r0, r0, #15
 8003742:	4770      	bx	lr
    if(indev == NULL) return false;
 8003744:	2000      	movs	r0, #0
}
 8003746:	4770      	bx	lr

08003748 <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
    if(indev == NULL) return NULL;
 8003748:	b140      	cbz	r0, 800375c <lv_indev_get_scroll_obj+0x14>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 800374a:	6803      	ldr	r3, [r0, #0]
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <lv_indev_get_scroll_obj+0x12>
    return indev->proc.types.pointer.scroll_obj;
 8003756:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003758:	4770      	bx	lr
    if(indev == NULL) return NULL;
 800375a:	2000      	movs	r0, #0
}
 800375c:	4770      	bx	lr

0800375e <lv_indev_get_vect>:

void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point)
{
    point->x = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	800b      	strh	r3, [r1, #0]
    point->y = 0;
 8003762:	804b      	strh	r3, [r1, #2]

    if(indev == NULL) return;
 8003764:	b158      	cbz	r0, 800377e <lv_indev_get_vect+0x20>

    if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_BUTTON) {
 8003766:	6803      	ldr	r3, [r0, #0]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800376e:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.vect.x;
 8003770:	bf01      	itttt	eq
 8003772:	f9b0 3018 	ldrsheq.w	r3, [r0, #24]
 8003776:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 8003778:	f9b0 301a 	ldrsheq.w	r3, [r0, #26]
 800377c:	804b      	strheq	r3, [r1, #2]
    }
}
 800377e:	4770      	bx	lr

08003780 <lv_indev_get_obj_act>:
}

lv_obj_t * lv_indev_get_obj_act(void)
{
    return indev_obj_act;
}
 8003780:	4b01      	ldr	r3, [pc, #4]	; (8003788 <lv_indev_get_obj_act+0x8>)
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000b48 	.word	0x20000b48

0800378c <lv_indev_scroll_throw_predict>:
 * @param dir `LV_DIR_VER` or `LV_DIR_HOR`
 * @return the difference compared to the current position when the throw would be finished
 */
lv_coord_t lv_indev_scroll_throw_predict(lv_indev_t * indev, lv_dir_t dir)
{
    if(indev == NULL) return 0;
 800378c:	b1c0      	cbz	r0, 80037c0 <lv_indev_scroll_throw_predict+0x34>
    lv_coord_t v;
    switch(dir) {
 800378e:	2903      	cmp	r1, #3
 8003790:	d00b      	beq.n	80037aa <lv_indev_scroll_throw_predict+0x1e>
 8003792:	290c      	cmp	r1, #12
 8003794:	d113      	bne.n	80037be <lv_indev_scroll_throw_predict+0x32>
        case LV_DIR_VER:
            v = indev->proc.types.pointer.scroll_throw_vect_ori.y;
 8003796:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
            break;
        default:
            return 0;
    }

    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 800379a:	6802      	ldr	r2, [r0, #0]
 800379c:	7e52      	ldrb	r2, [r2, #25]
    lv_coord_t sum = 0;
 800379e:	2000      	movs	r0, #0
    while(v) {
        sum += v;
        v = v * (100 - scroll_throw) / 100;
 80037a0:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 80037a4:	2164      	movs	r1, #100	; 0x64
    while(v) {
 80037a6:	b91b      	cbnz	r3, 80037b0 <lv_indev_scroll_throw_predict+0x24>
 80037a8:	4770      	bx	lr
            v = indev->proc.types.pointer.scroll_throw_vect_ori.x;
 80037aa:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
            break;
 80037ae:	e7f4      	b.n	800379a <lv_indev_scroll_throw_predict+0xe>
        sum += v;
 80037b0:	4418      	add	r0, r3
 80037b2:	b200      	sxth	r0, r0
        v = v * (100 - scroll_throw) / 100;
 80037b4:	4353      	muls	r3, r2
 80037b6:	fb93 f3f1 	sdiv	r3, r3, r1
 80037ba:	b21b      	sxth	r3, r3
 80037bc:	e7f3      	b.n	80037a6 <lv_indev_scroll_throw_predict+0x1a>
    switch(dir) {
 80037be:	2000      	movs	r0, #0
    }

    return sum;
}
 80037c0:	4770      	bx	lr

080037c2 <lv_obj_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80037c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_t * parent = obj->parent;
 80037c6:	684e      	ldr	r6, [r1, #4]
{
 80037c8:	460c      	mov	r4, r1
    if(parent) {
 80037ca:	b38e      	cbz	r6, 8003830 <lv_obj_constructor+0x6e>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 80037cc:	4630      	mov	r0, r6
 80037ce:	f002 fd83 	bl	80062d8 <lv_obj_get_scroll_left>
 80037d2:	4680      	mov	r8, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 80037d4:	4630      	mov	r0, r6
 80037d6:	f002 fd28 	bl	800622a <lv_obj_get_scroll_top>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80037da:	2210      	movs	r2, #16
 80037dc:	4605      	mov	r5, r0
 80037de:	2100      	movs	r1, #0
 80037e0:	4630      	mov	r0, r6

        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 80037e2:	8af7      	ldrh	r7, [r6, #22]
 80037e4:	f003 fe52 	bl	800748c <lv_obj_get_style_prop>
 80037e8:	4407      	add	r7, r0
 80037ea:	1b7b      	subs	r3, r7, r5
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	82e3      	strh	r3, [r4, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 80037f0:	3b01      	subs	r3, #1
 80037f2:	8363      	strh	r3, [r4, #26]
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80037f4:	2212      	movs	r2, #18
 80037f6:	2100      	movs	r1, #0
 80037f8:	4630      	mov	r0, r6
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 80037fa:	8ab5      	ldrh	r5, [r6, #20]
 80037fc:	f003 fe46 	bl	800748c <lv_obj_get_style_prop>
 8003800:	4405      	add	r5, r0
 8003802:	eba5 0008 	sub.w	r0, r5, r8
 8003806:	b280      	uxth	r0, r0
 8003808:	82a0      	strh	r0, [r4, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 800380a:	3801      	subs	r0, #1
 800380c:	8320      	strh	r0, [r4, #24]

    /*Set attributes*/
    obj->flags = LV_OBJ_FLAG_CLICKABLE;
    obj->flags |= LV_OBJ_FLAG_SNAPPABLE;
    if(parent) obj->flags |= LV_OBJ_FLAG_PRESS_LOCK;
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 800380e:	f243 3302 	movw	r3, #13058	; 0x3302
 8003812:	61e3      	str	r3, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 8003814:	69e3      	ldr	r3, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLLABLE;
    obj->flags |= LV_OBJ_FLAG_SCROLL_ELASTIC;
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8003816:	b936      	cbnz	r6, 8003826 <lv_obj_constructor+0x64>
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 8003818:	f443 6307 	orr.w	r3, r3, #2160	; 0x870
 800381c:	f043 0304 	orr.w	r3, r3, #4
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8003820:	61e3      	str	r3, [r4, #28]

    LV_TRACE_OBJ_CREATE("finished");
}
 8003822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8003826:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 800382a:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 800382e:	e7f7      	b.n	8003820 <lv_obj_constructor+0x5e>
    obj->flags |= LV_OBJ_FLAG_SNAPPABLE;
 8003830:	f241 0302 	movw	r3, #4098	; 0x1002
 8003834:	e7ed      	b.n	8003812 <lv_obj_constructor+0x50>

08003836 <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8003836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(obj->state == new_state) return;
 800383a:	8c03      	ldrh	r3, [r0, #32]
{
 800383c:	ed2d 8b02 	vpush	{d8}
    if(obj->state == new_state) return;
 8003840:	428b      	cmp	r3, r1
 8003842:	ee08 3a10 	vmov	s16, r3
{
 8003846:	b08b      	sub	sp, #44	; 0x2c
 8003848:	4604      	mov	r4, r0
 800384a:	4688      	mov	r8, r1
    if(obj->state == new_state) return;
 800384c:	f000 8108 	beq.w	8003a60 <lv_obj_set_state+0x22a>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;
 8003850:	8401      	strh	r1, [r0, #32]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8003852:	460a      	mov	r2, r1
 8003854:	4619      	mov	r1, r3
 8003856:	f004 faad 	bl	8007db4 <_lv_obj_style_state_compare>
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 800385a:	9002      	str	r0, [sp, #8]
 800385c:	2800      	cmp	r0, #0
 800385e:	f000 80ff 	beq.w	8003a60 <lv_obj_set_state+0x22a>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003862:	f44f 7020 	mov.w	r0, #640	; 0x280
 8003866:	f00f fdaf 	bl	80133c8 <lv_mem_buf_get>
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 800386a:	f44f 7120 	mov.w	r1, #640	; 0x280
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 800386e:	4606      	mov	r6, r0
    uint32_t tsi = 0;
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8003870:	f04f 0900 	mov.w	r9, #0
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003874:	f00f ff41 	bl	80136fa <lv_memset_00>
        _lv_obj_style_t * obj_style = &obj->styles[i];
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8003878:	ea6f 0308 	mvn.w	r3, r8
    uint32_t tsi = 0;
 800387c:	464f      	mov	r7, r9
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 800387e:	9306      	str	r3, [sp, #24]
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8003880:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8003882:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8003886:	454b      	cmp	r3, r9
 8003888:	d901      	bls.n	800388e <lv_obj_set_state+0x58>
 800388a:	2f1f      	cmp	r7, #31
 800388c:	d914      	bls.n	80038b8 <lv_obj_set_state+0x82>
 800388e:	4635      	mov	r5, r6
    uint32_t tsi = 0;
 8003890:	f04f 0900 	mov.w	r9, #0
                tsi++;
            }
        }
    }

    for(i = 0; i < tsi; i++) {
 8003894:	454f      	cmp	r7, r9
 8003896:	f040 80b7 	bne.w	8003a08 <lv_obj_set_state+0x1d2>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
    }

    lv_mem_buf_release(ts);
 800389a:	4630      	mov	r0, r6
 800389c:	f00f fde0 	bl	8013460 <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 80038a0:	9b02      	ldr	r3, [sp, #8]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	f040 80bf 	bne.w	8003a26 <lv_obj_set_state+0x1f0>
        lv_obj_invalidate(obj);
 80038a8:	4620      	mov	r0, r4
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_invalidate(obj);
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 80038aa:	b00b      	add	sp, #44	; 0x2c
 80038ac:	ecbd 8b02 	vpop	{d8}
 80038b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_invalidate(obj);
 80038b4:	f001 bd58 	b.w	8005368 <lv_obj_invalidate>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 80038b8:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80038bc:	eb0a 0bc9 	add.w	fp, sl, r9, lsl #3
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 80038c0:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 80038c4:	f8db 0004 	ldr.w	r0, [fp, #4]
 80038c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80038cc:	f004 fb73 	bl	8007fb6 <lv_obj_style_get_selector_state>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80038d0:	68e3      	ldr	r3, [r4, #12]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 80038d2:	9003      	str	r0, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80038d4:	442b      	add	r3, r5
 80038d6:	6858      	ldr	r0, [r3, #4]
 80038d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80038dc:	f004 fb6d 	bl	8007fba <lv_obj_style_get_selector_part>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 80038e0:	9b06      	ldr	r3, [sp, #24]
 80038e2:	9a03      	ldr	r2, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80038e4:	9004      	str	r0, [sp, #16]
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 80038e6:	4213      	tst	r3, r2
 80038e8:	d10e      	bne.n	8003908 <lv_obj_set_state+0xd2>
        if(obj_style->is_trans) continue;
 80038ea:	f89b 3007 	ldrb.w	r3, [fp, #7]
 80038ee:	f013 0302 	ands.w	r3, r3, #2
 80038f2:	d109      	bne.n	8003908 <lv_obj_set_state+0xd2>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 80038f4:	f85a 2005 	ldr.w	r2, [sl, r5]
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80038f8:	8890      	ldrh	r0, [r2, #4]
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 80038fa:	79d1      	ldrb	r1, [r2, #7]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80038fc:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003900:	42a8      	cmp	r0, r5
 8003902:	d126      	bne.n	8003952 <lv_obj_set_state+0x11c>
        for(i = 0; i < style->prop_cnt; i++) {
 8003904:	428b      	cmp	r3, r1
 8003906:	d302      	bcc.n	800390e <lv_obj_set_state+0xd8>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8003908:	f109 0901 	add.w	r9, r9, #1
 800390c:	e7b8      	b.n	8003880 <lv_obj_set_state+0x4a>
            const_prop = style->v_p.const_props + i;
 800390e:	6810      	ldr	r0, [r2, #0]
 8003910:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8003914:	f830 0033 	ldrh.w	r0, [r0, r3, lsl #3]
            if(prop_id == prop) {
 8003918:	f3c0 0c0d 	ubfx	ip, r0, #0, #14
 800391c:	f1bc 0f66 	cmp.w	ip, #102	; 0x66
 8003920:	d115      	bne.n	800394e <lv_obj_set_state+0x118>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8003922:	0403      	lsls	r3, r0, #16
 8003924:	d4f0      	bmi.n	8003908 <lv_obj_set_state+0xd2>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8003926:	0440      	lsls	r0, r0, #17
 8003928:	d50f      	bpl.n	800394a <lv_obj_set_state+0x114>
 800392a:	2066      	movs	r0, #102	; 0x66
 800392c:	f010 fbba 	bl	80140a4 <lv_style_prop_get_default>
 8003930:	4605      	mov	r5, r0
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8003932:	f04f 0a00 	mov.w	sl, #0
 8003936:	682b      	ldr	r3, [r5, #0]
 8003938:	f833 300a 	ldrh.w	r3, [r3, sl]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0e3      	beq.n	8003908 <lv_obj_set_state+0xd2>
 8003940:	2f1f      	cmp	r7, #31
 8003942:	d8e1      	bhi.n	8003908 <lv_obj_set_state+0xd2>
 8003944:	4632      	mov	r2, r6
            for(t = 0; t < tsi; t++) {
 8003946:	2300      	movs	r3, #0
 8003948:	e044      	b.n	80039d4 <lv_obj_set_state+0x19e>
 800394a:	686d      	ldr	r5, [r5, #4]
 800394c:	e7f1      	b.n	8003932 <lv_obj_set_state+0xfc>
        for(i = 0; i < style->prop_cnt; i++) {
 800394e:	3301      	adds	r3, #1
 8003950:	e7d8      	b.n	8003904 <lv_obj_set_state+0xce>
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8003952:	2900      	cmp	r1, #0
 8003954:	d0d8      	beq.n	8003908 <lv_obj_set_state+0xd2>

    if(style->prop_cnt > 1) {
 8003956:	2901      	cmp	r1, #1
 8003958:	d014      	beq.n	8003984 <lv_obj_set_state+0x14e>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 800395a:	6810      	ldr	r0, [r2, #0]
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 800395c:	eb00 0581 	add.w	r5, r0, r1, lsl #2
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8003960:	f835 2b02 	ldrh.w	r2, [r5], #2
            if(prop_id == prop) {
 8003964:	f3c2 0c0d 	ubfx	ip, r2, #0, #14
 8003968:	f1bc 0f66 	cmp.w	ip, #102	; 0x66
 800396c:	d106      	bne.n	800397c <lv_obj_set_state+0x146>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 800396e:	0411      	lsls	r1, r2, #16
 8003970:	d4ca      	bmi.n	8003908 <lv_obj_set_state+0xd2>
                    return LV_STYLE_RES_INHERIT;
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8003972:	0455      	lsls	r5, r2, #17
 8003974:	d4d9      	bmi.n	800392a <lv_obj_set_state+0xf4>
                    *value = lv_style_prop_get_default(prop_id);
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                    *value = values[i];
 8003976:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800397a:	e7da      	b.n	8003932 <lv_obj_set_state+0xfc>
        for(i = 0; i < style->prop_cnt; i++) {
 800397c:	3301      	adds	r3, #1
 800397e:	4299      	cmp	r1, r3
 8003980:	d8ee      	bhi.n	8003960 <lv_obj_set_state+0x12a>
 8003982:	e7c1      	b.n	8003908 <lv_obj_set_state+0xd2>
                }
                return LV_STYLE_RES_FOUND;
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8003984:	f3c0 030d 	ubfx	r3, r0, #0, #14
 8003988:	2b66      	cmp	r3, #102	; 0x66
 800398a:	d1bd      	bne.n	8003908 <lv_obj_set_state+0xd2>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 800398c:	0401      	lsls	r1, r0, #16
 800398e:	d4bb      	bmi.n	8003908 <lv_obj_set_state+0xd2>
            return LV_STYLE_RES_INHERIT;
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8003990:	0443      	lsls	r3, r0, #17
 8003992:	d4ca      	bmi.n	800392a <lv_obj_set_state+0xf4>
 8003994:	6815      	ldr	r5, [r2, #0]
 8003996:	e7cc      	b.n	8003932 <lv_obj_set_state+0xfc>
                lv_style_selector_t selector = ts[t].selector;
 8003998:	6851      	ldr	r1, [r2, #4]
 800399a:	9309      	str	r3, [sp, #36]	; 0x24
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 800399c:	4608      	mov	r0, r1
                lv_style_selector_t selector = ts[t].selector;
 800399e:	9208      	str	r2, [sp, #32]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 80039a0:	9107      	str	r1, [sp, #28]
 80039a2:	f004 fb08 	bl	8007fb6 <lv_obj_style_get_selector_state>
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 80039a6:	9907      	ldr	r1, [sp, #28]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 80039a8:	9005      	str	r0, [sp, #20]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 80039aa:	4608      	mov	r0, r1
 80039ac:	f004 fb05 	bl	8007fba <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 80039b0:	6829      	ldr	r1, [r5, #0]
 80039b2:	9a08      	ldr	r2, [sp, #32]
 80039b4:	f831 100a 	ldrh.w	r1, [r1, sl]
 80039b8:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 80039bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039be:	458c      	cmp	ip, r1
 80039c0:	d106      	bne.n	80039d0 <lv_obj_set_state+0x19a>
 80039c2:	9904      	ldr	r1, [sp, #16]
 80039c4:	4281      	cmp	r1, r0
 80039c6:	d103      	bne.n	80039d0 <lv_obj_set_state+0x19a>
 80039c8:	9903      	ldr	r1, [sp, #12]
 80039ca:	9805      	ldr	r0, [sp, #20]
 80039cc:	4281      	cmp	r1, r0
 80039ce:	d918      	bls.n	8003a02 <lv_obj_set_state+0x1cc>
            for(t = 0; t < tsi; t++) {
 80039d0:	3301      	adds	r3, #1
 80039d2:	3214      	adds	r2, #20
 80039d4:	429f      	cmp	r7, r3
 80039d6:	d1df      	bne.n	8003998 <lv_obj_set_state+0x162>
                ts[tsi].time = tr->time;
 80039d8:	2314      	movs	r3, #20
 80039da:	437b      	muls	r3, r7
 80039dc:	68e8      	ldr	r0, [r5, #12]
                ts[tsi].prop = tr->props[j];
 80039de:	6829      	ldr	r1, [r5, #0]
                ts[tsi].time = tr->time;
 80039e0:	52f0      	strh	r0, [r6, r3]
 80039e2:	18f2      	adds	r2, r6, r3
                ts[tsi].delay = tr->delay;
 80039e4:	692b      	ldr	r3, [r5, #16]
 80039e6:	8053      	strh	r3, [r2, #2]
                ts[tsi].path_cb = tr->path_xcb;
 80039e8:	68ab      	ldr	r3, [r5, #8]
 80039ea:	60d3      	str	r3, [r2, #12]
                ts[tsi].prop = tr->props[j];
 80039ec:	f831 300a 	ldrh.w	r3, [r1, sl]
 80039f0:	8113      	strh	r3, [r2, #8]
                ts[tsi].user_data = tr->user_data;
 80039f2:	686b      	ldr	r3, [r5, #4]
 80039f4:	6113      	str	r3, [r2, #16]
                ts[tsi].selector = obj_style->selector;
 80039f6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80039fa:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80039fe:	6053      	str	r3, [r2, #4]
                tsi++;
 8003a00:	3701      	adds	r7, #1
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8003a02:	f10a 0a02 	add.w	sl, sl, #2
 8003a06:	e796      	b.n	8003936 <lv_obj_set_state+0x100>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8003a08:	6868      	ldr	r0, [r5, #4]
 8003a0a:	f004 fad6 	bl	8007fba <lv_obj_style_get_selector_part>
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8003a0e:	9500      	str	r5, [sp, #0]
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8003a10:	4601      	mov	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8003a12:	ee18 2a10 	vmov	r2, s16
 8003a16:	4643      	mov	r3, r8
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f004 f90f 	bl	8007c3c <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 8003a1e:	f109 0901 	add.w	r9, r9, #1
 8003a22:	3514      	adds	r5, #20
 8003a24:	e736      	b.n	8003894 <lv_obj_set_state+0x5e>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 8003a26:	9b02      	ldr	r3, [sp, #8]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d10b      	bne.n	8003a44 <lv_obj_set_state+0x20e>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8003a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a30:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8003a34:	4620      	mov	r0, r4
}
 8003a36:	b00b      	add	sp, #44	; 0x2c
 8003a38:	ecbd 8b02 	vpop	{d8}
 8003a3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8003a40:	f003 bdea 	b.w	8007618 <lv_obj_refresh_style>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 8003a44:	9b02      	ldr	r3, [sp, #8]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d10a      	bne.n	8003a60 <lv_obj_set_state+0x22a>
        lv_obj_invalidate(obj);
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f001 fc8c 	bl	8005368 <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 8003a50:	4620      	mov	r0, r4
}
 8003a52:	b00b      	add	sp, #44	; 0x2c
 8003a54:	ecbd 8b02 	vpop	{d8}
 8003a58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_ext_draw_size(obj);
 8003a5c:	f001 b88d 	b.w	8004b7a <lv_obj_refresh_ext_draw_size>
}
 8003a60:	b00b      	add	sp, #44	; 0x2c
 8003a62:	ecbd 8b02 	vpop	{d8}
 8003a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003a6c <lv_obj_draw>:
{
 8003a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a70:	b0a3      	sub	sp, #140	; 0x8c
 8003a72:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 8003a74:	f7ff fbee 	bl	8003254 <lv_event_get_code>
 8003a78:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f7ff fbe6 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_COVER_CHECK) {
 8003a80:	2e12      	cmp	r6, #18
    lv_obj_t * obj = lv_event_get_target(e);
 8003a82:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 8003a84:	d14b      	bne.n	8003b1e <lv_obj_draw+0xb2>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8003a86:	4628      	mov	r0, r5
 8003a88:	f7ff fbe8 	bl	800325c <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 8003a8c:	7803      	ldrb	r3, [r0, #0]
 8003a8e:	2b02      	cmp	r3, #2
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8003a90:	4605      	mov	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 8003a92:	d008      	beq.n	8003aa6 <lv_obj_draw+0x3a>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8003a94:	2217      	movs	r2, #23
 8003a96:	2100      	movs	r1, #0
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f003 fcf7 	bl	800748c <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8003a9e:	4606      	mov	r6, r0
 8003aa0:	b120      	cbz	r0, 8003aac <lv_obj_draw+0x40>
            info->res = LV_COVER_RES_MASKED;
 8003aa2:	2302      	movs	r3, #2
            info->res = LV_COVER_RES_NOT_COVER;
 8003aa4:	702b      	strb	r3, [r5, #0]
}
 8003aa6:	b023      	add	sp, #140	; 0x8c
 8003aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8003aac:	4601      	mov	r1, r0
 8003aae:	220b      	movs	r2, #11
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f003 fceb 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8003ab6:	2268      	movs	r2, #104	; 0x68
    return (lv_coord_t)v.num;
 8003ab8:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8003abc:	4631      	mov	r1, r6
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f003 fce4 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8003ac4:	2269      	movs	r2, #105	; 0x69
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8003ac6:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8003ac8:	4631      	mov	r1, r6
 8003aca:	4620      	mov	r0, r4
 8003acc:	f003 fcde 	bl	800748c <lv_obj_get_style_prop>
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
    dest->y1 = src->y1;
 8003ad0:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
    dest->y2 = src->y2;
 8003ad4:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
        coords.x1 -= w;
 8003ad8:	8aa1      	ldrh	r1, [r4, #20]
    dest->x2 = src->x2;
 8003ada:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
 8003ade:	b2bb      	uxth	r3, r7
        coords.y1 -= h;
 8003ae0:	b280      	uxth	r0, r0
        coords.x1 -= w;
 8003ae2:	1ac9      	subs	r1, r1, r3
        coords.y1 -= h;
 8003ae4:	1a12      	subs	r2, r2, r0
        coords.y2 += h;
 8003ae6:	4460      	add	r0, ip
        coords.x1 -= w;
 8003ae8:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
        coords.x2 += w;
 8003aec:	4473      	add	r3, lr
        coords.y1 -= h;
 8003aee:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
        coords.y2 += h;
 8003af2:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8003af6:	4642      	mov	r2, r8
 8003af8:	6868      	ldr	r0, [r5, #4]
        coords.x2 += w;
 8003afa:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8003afe:	a910      	add	r1, sp, #64	; 0x40
 8003b00:	f00e ffba 	bl	8012a78 <_lv_area_is_in>
 8003b04:	b908      	cbnz	r0, 8003b0a <lv_obj_draw+0x9e>
            info->res = LV_COVER_RES_NOT_COVER;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e7cc      	b.n	8003aa4 <lv_obj_draw+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8003b0a:	2221      	movs	r2, #33	; 0x21
 8003b0c:	4631      	mov	r1, r6
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f003 fcbc 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003b14:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 8003b16:	28fc      	cmp	r0, #252	; 0xfc
 8003b18:	d9f5      	bls.n	8003b06 <lv_obj_draw+0x9a>
        info->res = LV_COVER_RES_COVER;
 8003b1a:	702e      	strb	r6, [r5, #0]
 8003b1c:	e7c3      	b.n	8003aa6 <lv_obj_draw+0x3a>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8003b1e:	2e15      	cmp	r6, #21
 8003b20:	f040 808a 	bne.w	8003c38 <lv_obj_draw+0x1cc>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8003b24:	4628      	mov	r0, r5
 8003b26:	f7ff fbe4 	bl	80032f2 <lv_event_get_draw_ctx>
        lv_draw_rect_dsc_init(&draw_dsc);
 8003b2a:	af04      	add	r7, sp, #16
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8003b2c:	4606      	mov	r6, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 8003b2e:	4638      	mov	r0, r7
 8003b30:	f007 fb66 	bl	800b200 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8003b34:	2234      	movs	r2, #52	; 0x34
 8003b36:	2100      	movs	r1, #0
 8003b38:	4620      	mov	r0, r4
 8003b3a:	f003 fca7 	bl	800748c <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8003b3e:	b128      	cbz	r0, 8003b4c <lv_obj_draw+0xe0>
            draw_dsc.border_post = 1;
 8003b40:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8003b4c:	463a      	mov	r2, r7
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4620      	mov	r0, r4
 8003b52:	f000 fd6c 	bl	800462e <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8003b56:	2268      	movs	r2, #104	; 0x68
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f003 fc96 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8003b60:	2269      	movs	r2, #105	; 0x69
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8003b62:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8003b64:	2100      	movs	r1, #0
 8003b66:	4620      	mov	r0, r4
 8003b68:	f003 fc90 	bl	800748c <lv_obj_get_style_prop>
 8003b6c:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
        coords.x1 -= w;
 8003b70:	8aa1      	ldrh	r1, [r4, #20]
    dest->y2 = src->y2;
 8003b72:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
    dest->y1 = src->y1;
 8003b76:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8003b7a:	b2ab      	uxth	r3, r5
 8003b7c:	1ac9      	subs	r1, r1, r3
        coords.x2 += w;
 8003b7e:	4473      	add	r3, lr
 8003b80:	f8ad 300c 	strh.w	r3, [sp, #12]
        coords.y1 -= h;
 8003b84:	b283      	uxth	r3, r0
 8003b86:	1ad2      	subs	r2, r2, r3
        coords.x1 -= w;
 8003b88:	f8ad 1008 	strh.w	r1, [sp, #8]
        coords.y2 += h;
 8003b8c:	4463      	add	r3, ip
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8003b8e:	4631      	mov	r1, r6
 8003b90:	a810      	add	r0, sp, #64	; 0x40
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 8003b92:	2500      	movs	r5, #0
        coords.y1 -= h;
 8003b94:	f8ad 200a 	strh.w	r2, [sp, #10]
        coords.y2 += h;
 8003b98:	f8ad 300e 	strh.w	r3, [sp, #14]
        part_dsc.draw_area = &coords;
 8003b9c:	f10d 0808 	add.w	r8, sp, #8
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8003ba0:	f000 ffde 	bl	8004b60 <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 8003ba4:	4bc3      	ldr	r3, [pc, #780]	; (8003eb4 <lv_obj_draw+0x448>)
 8003ba6:	9311      	str	r3, [sp, #68]	; 0x44
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8003ba8:	aa10      	add	r2, sp, #64	; 0x40
 8003baa:	211a      	movs	r1, #26
 8003bac:	4620      	mov	r0, r4
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 8003bae:	9512      	str	r5, [sp, #72]	; 0x48
        part_dsc.rect_dsc = &draw_dsc;
 8003bb0:	9714      	str	r7, [sp, #80]	; 0x50
        part_dsc.draw_area = &coords;
 8003bb2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
        part_dsc.part = LV_PART_MAIN;
 8003bb6:	951d      	str	r5, [sp, #116]	; 0x74
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8003bb8:	f7ff fb28 	bl	800320c <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8003bbc:	2217      	movs	r2, #23
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f003 fc63 	bl	800748c <lv_obj_get_style_prop>
    return (bool)v.num;
 8003bc6:	f8dd 901c 	ldr.w	r9, [sp, #28]
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 8003bca:	b398      	cbz	r0, 8003c34 <lv_obj_draw+0x1c8>
 8003bcc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8003bd0:	b383      	cbz	r3, 8003c34 <lv_obj_draw+0x1c8>
            draw_dsc.bg_img_src = NULL;
 8003bd2:	9507      	str	r5, [sp, #28]
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 8003bd4:	2501      	movs	r5, #1
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8003bd6:	4642      	mov	r2, r8
 8003bd8:	4639      	mov	r1, r7
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f007 fb34 	bl	800b248 <lv_draw_rect>
        if(clip_corner) {
 8003be0:	b315      	cbz	r5, 8003c28 <lv_obj_draw+0x1bc>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8003be2:	2018      	movs	r0, #24
 8003be4:	f00f fbf0 	bl	80133c8 <lv_mem_buf_get>
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 8003be8:	f104 0114 	add.w	r1, r4, #20
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8003bec:	4605      	mov	r5, r0
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 8003bee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f007 f8d0 	bl	800ad98 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 8003bf8:	f504 7190 	add.w	r1, r4, #288	; 0x120
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f006 ff1b 	bl	800aa38 <lv_draw_mask_add>
            if(bg_img_src) {
 8003c02:	f1b9 0f00 	cmp.w	r9, #0
 8003c06:	d00f      	beq.n	8003c28 <lv_obj_draw+0x1bc>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f88d 3013 	strb.w	r3, [sp, #19]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 8003c0e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 8003c12:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8003c16:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
                draw_dsc.bg_img_src = bg_img_src;
 8003c1a:	f8cd 901c 	str.w	r9, [sp, #28]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8003c1e:	4642      	mov	r2, r8
 8003c20:	4639      	mov	r1, r7
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8003c22:	4630      	mov	r0, r6
 8003c24:	f007 fb10 	bl	800b248 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8003c28:	aa10      	add	r2, sp, #64	; 0x40
 8003c2a:	211b      	movs	r1, #27
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f7ff faed 	bl	800320c <lv_event_send>
 8003c32:	e738      	b.n	8003aa6 <lv_obj_draw+0x3a>
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 8003c34:	2500      	movs	r5, #0
 8003c36:	e7ce      	b.n	8003bd6 <lv_obj_draw+0x16a>
    else if(code == LV_EVENT_DRAW_POST) {
 8003c38:	2e18      	cmp	r6, #24
 8003c3a:	f47f af34 	bne.w	8003aa6 <lv_obj_draw+0x3a>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f7ff fb57 	bl	80032f2 <lv_event_get_draw_ctx>
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8003c44:	aa02      	add	r2, sp, #8
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8003c46:	4606      	mov	r6, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8003c48:	4669      	mov	r1, sp
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f002 fefe 	bl	8006a4c <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8003c50:	4668      	mov	r0, sp
 8003c52:	f00e fde2 	bl	801281a <lv_area_get_size>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	f000 80bc 	beq.w	8003dd4 <lv_obj_draw+0x368>
    lv_draw_rect_dsc_init(dsc);
 8003c5c:	ad04      	add	r5, sp, #16
 8003c5e:	4628      	mov	r0, r5
 8003c60:	f007 face 	bl	800b200 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8003c64:	2221      	movs	r2, #33	; 0x21
 8003c66:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f003 fc0e 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003c70:	b2c0      	uxtb	r0, r0
    if(dsc->bg_opa > LV_OPA_MIN) {
 8003c72:	2802      	cmp	r0, #2
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8003c74:	f88d 0013 	strb.w	r0, [sp, #19]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8003c78:	d907      	bls.n	8003c8a <lv_obj_draw+0x21e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003c80:	4620      	mov	r0, r4
 8003c82:	f003 fc03 	bl	800748c <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8003c86:	f88d 0014 	strb.w	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8003c8a:	2231      	movs	r2, #49	; 0x31
 8003c8c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003c90:	4620      	mov	r0, r4
 8003c92:	f003 fbfb 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003c96:	b2c0      	uxtb	r0, r0
    if(dsc->border_opa > LV_OPA_MIN) {
 8003c98:	2802      	cmp	r0, #2
    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8003c9a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
    if(dsc->border_opa > LV_OPA_MIN) {
 8003c9e:	d913      	bls.n	8003cc8 <lv_obj_draw+0x25c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8003ca0:	2232      	movs	r2, #50	; 0x32
 8003ca2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f003 fbf0 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003cac:	b200      	sxth	r0, r0
        if(dsc->border_width > 0) {
 8003cae:	2800      	cmp	r0, #0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8003cb0:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        if(dsc->border_width > 0) {
 8003cb4:	f340 80f5 	ble.w	8003ea2 <lv_obj_draw+0x436>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8003cb8:	2230      	movs	r2, #48	; 0x30
 8003cba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f003 fbe4 	bl	800748c <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 8003cc4:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8003cc8:	2245      	movs	r2, #69	; 0x45
 8003cca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f003 fbdc 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003cd4:	b2c0      	uxtb	r0, r0
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8003cd6:	2802      	cmp	r0, #2
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 8003cd8:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8003cdc:	d91b      	bls.n	8003d16 <lv_obj_draw+0x2aa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8003cde:	2240      	movs	r2, #64	; 0x40
 8003ce0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f003 fbd1 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003cea:	b200      	sxth	r0, r0
        if(dsc->shadow_width > 0) {
 8003cec:	2800      	cmp	r0, #0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 8003cee:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
        if(dsc->shadow_width > 0) {
 8003cf2:	f340 80da 	ble.w	8003eaa <lv_obj_draw+0x43e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8003cf6:	2243      	movs	r2, #67	; 0x43
 8003cf8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f003 fbc5 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8003d02:	2244      	movs	r2, #68	; 0x44
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 8003d04:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8003d08:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f003 fbbd 	bl	800748c <lv_obj_get_style_prop>
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8003d12:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
}

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8003d16:	2260      	movs	r2, #96	; 0x60
 8003d18:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f003 fbb5 	bl	800748c <lv_obj_get_style_prop>
    if(opa < LV_OPA_MAX) {
 8003d22:	b2c0      	uxtb	r0, r0
 8003d24:	28fc      	cmp	r0, #252	; 0xfc
 8003d26:	d80b      	bhi.n	8003d40 <lv_obj_draw+0x2d4>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8003d28:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003d2c:	4343      	muls	r3, r0
 8003d2e:	121b      	asrs	r3, r3, #8
 8003d30:	f88d 3013 	strb.w	r3, [sp, #19]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 8003d34:	4343      	muls	r3, r0
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 8003d3c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 8003d40:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8003d44:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	d046      	beq.n	8003de0 <lv_obj_draw+0x374>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8003d52:	220b      	movs	r2, #11
 8003d54:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f003 fb97 	bl	800748c <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8003d5e:	4631      	mov	r1, r6
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 8003d60:	f8ad 0010 	strh.w	r0, [sp, #16]
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8003d64:	a810      	add	r0, sp, #64	; 0x40
 8003d66:	f000 fefb 	bl	8004b60 <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 8003d6a:	4b52      	ldr	r3, [pc, #328]	; (8003eb4 <lv_obj_draw+0x448>)
 8003d6c:	9311      	str	r3, [sp, #68]	; 0x44
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	9312      	str	r3, [sp, #72]	; 0x48
    if(lv_area_get_size(&hor_area) > 0) {
 8003d72:	4668      	mov	r0, sp
    part_dsc.part = LV_PART_SCROLLBAR;
 8003d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    part_dsc.rect_dsc = &draw_dsc;
 8003d78:	9514      	str	r5, [sp, #80]	; 0x50
    part_dsc.part = LV_PART_SCROLLBAR;
 8003d7a:	931d      	str	r3, [sp, #116]	; 0x74
    if(lv_area_get_size(&hor_area) > 0) {
 8003d7c:	f00e fd4d 	bl	801281a <lv_area_get_size>
 8003d80:	b180      	cbz	r0, 8003da4 <lv_obj_draw+0x338>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8003d82:	aa10      	add	r2, sp, #64	; 0x40
 8003d84:	211a      	movs	r1, #26
 8003d86:	4620      	mov	r0, r4
        part_dsc.draw_area = &hor_area;
 8003d88:	f8cd d04c 	str.w	sp, [sp, #76]	; 0x4c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8003d8c:	f7ff fa3e 	bl	800320c <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 8003d90:	466a      	mov	r2, sp
 8003d92:	4629      	mov	r1, r5
 8003d94:	4630      	mov	r0, r6
 8003d96:	f007 fa57 	bl	800b248 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8003d9a:	aa10      	add	r2, sp, #64	; 0x40
 8003d9c:	211b      	movs	r1, #27
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f7ff fa34 	bl	800320c <lv_event_send>
    if(lv_area_get_size(&ver_area) > 0) {
 8003da4:	a802      	add	r0, sp, #8
 8003da6:	f00e fd38 	bl	801281a <lv_area_get_size>
 8003daa:	b1c8      	cbz	r0, 8003de0 <lv_obj_draw+0x374>
        part_dsc.draw_area = &ver_area;
 8003dac:	ab02      	add	r3, sp, #8
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8003dae:	aa10      	add	r2, sp, #64	; 0x40
 8003db0:	211a      	movs	r1, #26
 8003db2:	4620      	mov	r0, r4
        part_dsc.draw_area = &ver_area;
 8003db4:	9313      	str	r3, [sp, #76]	; 0x4c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8003db6:	f7ff fa29 	bl	800320c <lv_event_send>
        part_dsc.draw_area = &ver_area;
 8003dba:	ab02      	add	r3, sp, #8
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	4630      	mov	r0, r6
        part_dsc.draw_area = &ver_area;
 8003dc2:	9313      	str	r3, [sp, #76]	; 0x4c
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 8003dc4:	f007 fa40 	bl	800b248 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8003dc8:	aa10      	add	r2, sp, #64	; 0x40
 8003dca:	211b      	movs	r1, #27
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f7ff fa1d 	bl	800320c <lv_event_send>
 8003dd2:	e005      	b.n	8003de0 <lv_obj_draw+0x374>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8003dd4:	a802      	add	r0, sp, #8
 8003dd6:	f00e fd20 	bl	801281a <lv_area_get_size>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	f47f af3e 	bne.w	8003c5c <lv_obj_draw+0x1f0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8003de0:	2217      	movs	r2, #23
 8003de2:	2100      	movs	r1, #0
 8003de4:	4620      	mov	r0, r4
 8003de6:	f003 fb51 	bl	800748c <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8003dea:	b150      	cbz	r0, 8003e02 <lv_obj_draw+0x396>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8003dec:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8003df0:	f006 fe6e 	bl	800aad0 <lv_draw_mask_remove_custom>
            if(param) {
 8003df4:	4605      	mov	r5, r0
 8003df6:	b120      	cbz	r0, 8003e02 <lv_obj_draw+0x396>
                lv_draw_mask_free_param(param);
 8003df8:	f006 fe80 	bl	800aafc <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f00f fb2f 	bl	8013460 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8003e02:	2234      	movs	r2, #52	; 0x34
 8003e04:	2100      	movs	r1, #0
 8003e06:	4620      	mov	r0, r4
 8003e08:	f003 fb40 	bl	800748c <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	f43f ae4a 	beq.w	8003aa6 <lv_obj_draw+0x3a>
            lv_draw_rect_dsc_init(&draw_dsc);
 8003e12:	f10d 0810 	add.w	r8, sp, #16
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8003e16:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 8003e18:	4640      	mov	r0, r8
 8003e1a:	f007 f9f1 	bl	800b200 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8003e1e:	4642      	mov	r2, r8
 8003e20:	4629      	mov	r1, r5
 8003e22:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8003e24:	f88d 5013 	strb.w	r5, [sp, #19]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 8003e28:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 8003e2c:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8003e30:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8003e34:	f000 fbfb 	bl	800462e <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8003e38:	2268      	movs	r2, #104	; 0x68
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f003 fb25 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8003e42:	2269      	movs	r2, #105	; 0x69
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8003e44:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8003e46:	4629      	mov	r1, r5
 8003e48:	4620      	mov	r0, r4
 8003e4a:	f003 fb1f 	bl	800748c <lv_obj_get_style_prop>
    dest->y2 = src->y2;
 8003e4e:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
    dest->y1 = src->y1;
 8003e52:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
            coords.x1 -= w;
 8003e56:	8aa1      	ldrh	r1, [r4, #20]
    dest->x2 = src->x2;
 8003e58:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
 8003e5c:	b2bb      	uxth	r3, r7
            coords.y1 -= h;
 8003e5e:	b280      	uxth	r0, r0
 8003e60:	1a12      	subs	r2, r2, r0
            coords.x1 -= w;
 8003e62:	1ac9      	subs	r1, r1, r3
            coords.y2 += h;
 8003e64:	4460      	add	r0, ip
            coords.x2 += w;
 8003e66:	4473      	add	r3, lr
            coords.x1 -= w;
 8003e68:	f8ad 1008 	strh.w	r1, [sp, #8]
            coords.y2 += h;
 8003e6c:	f8ad 000e 	strh.w	r0, [sp, #14]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8003e70:	4631      	mov	r1, r6
 8003e72:	a810      	add	r0, sp, #64	; 0x40
            coords.x2 += w;
 8003e74:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.y1 -= h;
 8003e78:	f8ad 200a 	strh.w	r2, [sp, #10]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8003e7c:	f000 fe70 	bl	8004b60 <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <lv_obj_draw+0x448>)
 8003e82:	9311      	str	r3, [sp, #68]	; 0x44
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8003e84:	2301      	movs	r3, #1
 8003e86:	9312      	str	r3, [sp, #72]	; 0x48
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8003e88:	aa10      	add	r2, sp, #64	; 0x40
            part_dsc.draw_area = &coords;
 8003e8a:	ab02      	add	r3, sp, #8
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8003e8c:	211a      	movs	r1, #26
 8003e8e:	4620      	mov	r0, r4
            part_dsc.rect_dsc = &draw_dsc;
 8003e90:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
            part_dsc.draw_area = &coords;
 8003e94:	9313      	str	r3, [sp, #76]	; 0x4c
            part_dsc.part = LV_PART_MAIN;
 8003e96:	951d      	str	r5, [sp, #116]	; 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8003e98:	f7ff f9b8 	bl	800320c <lv_event_send>
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8003e9c:	aa02      	add	r2, sp, #8
 8003e9e:	4641      	mov	r1, r8
 8003ea0:	e6bf      	b.n	8003c22 <lv_obj_draw+0x1b6>
            dsc->border_opa = LV_OPA_TRANSP;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8003ea8:	e70e      	b.n	8003cc8 <lv_obj_draw+0x25c>
            dsc->shadow_opa = LV_OPA_TRANSP;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 8003eb0:	e731      	b.n	8003d16 <lv_obj_draw+0x2aa>
 8003eb2:	bf00      	nop
 8003eb4:	0801e2b4 	.word	0x0801e2b4

08003eb8 <lv_init>:
{
 8003eb8:	b510      	push	{r4, lr}
    if(lv_initialized) {
 8003eba:	4c11      	ldr	r4, [pc, #68]	; (8003f00 <lv_init+0x48>)
 8003ebc:	7823      	ldrb	r3, [r4, #0]
 8003ebe:	b9f3      	cbnz	r3, 8003efe <lv_init+0x46>
    lv_mem_init();
 8003ec0:	f00f fa24 	bl	801330c <lv_mem_init>
    _lv_timer_core_init();
 8003ec4:	f010 fb38 	bl	8014538 <_lv_timer_core_init>
    _lv_fs_init();
 8003ec8:	f00e ff3a 	bl	8012d40 <_lv_fs_init>
    _lv_anim_core_init();
 8003ecc:	f00e fb8c 	bl	80125e8 <_lv_anim_core_init>
    _lv_group_init();
 8003ed0:	f7ff fabc 	bl	800344c <_lv_group_init>
    lv_draw_init();
 8003ed4:	f005 fa5d 	bl	8009392 <lv_draw_init>
    _lv_obj_style_init();
 8003ed8:	f003 facc 	bl	8007474 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8003edc:	4809      	ldr	r0, [pc, #36]	; (8003f04 <lv_init+0x4c>)
 8003ede:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003ee2:	f00f f8c8 	bl	8013076 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8003ee6:	4808      	ldr	r0, [pc, #32]	; (8003f08 <lv_init+0x50>)
 8003ee8:	215c      	movs	r1, #92	; 0x5c
 8003eea:	f00f f8c4 	bl	8013076 <_lv_ll_init>
    _lv_refr_init();
 8003eee:	f004 fa9d 	bl	800842c <_lv_refr_init>
    _lv_img_decoder_init();
 8003ef2:	f007 fdf7 	bl	800bae4 <_lv_img_decoder_init>
    lv_extra_init();
 8003ef6:	f00d f987 	bl	8011208 <lv_extra_init>
    lv_initialized = true;
 8003efa:	2301      	movs	r3, #1
 8003efc:	7023      	strb	r3, [r4, #0]
}
 8003efe:	bd10      	pop	{r4, pc}
 8003f00:	20000b4c 	.word	0x20000b4c
 8003f04:	20000d48 	.word	0x20000d48
 8003f08:	20000e28 	.word	0x20000e28

08003f0c <lv_obj_create>:
{
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8003f10:	4803      	ldr	r0, [pc, #12]	; (8003f20 <lv_obj_create+0x14>)
 8003f12:	f000 faa1 	bl	8004458 <lv_obj_class_create_obj>
 8003f16:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8003f18:	f000 fb2b 	bl	8004572 <lv_obj_class_init_obj>
}
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	bd10      	pop	{r4, pc}
 8003f20:	0801e2b4 	.word	0x0801e2b4

08003f24 <lv_obj_add_flag>:
{
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f26:	b085      	sub	sp, #20
 8003f28:	460d      	mov	r5, r1
 8003f2a:	4604      	mov	r4, r0
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8003f2c:	f000 ff74 	bl	8004e18 <lv_obj_is_layout_positioned>
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 8003f30:	f015 0701 	ands.w	r7, r5, #1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8003f34:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 8003f36:	d002      	beq.n	8003f3e <lv_obj_add_flag+0x1a>
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f001 fa15 	bl	8005368 <lv_obj_invalidate>
    obj->flags |= f;
 8003f3e:	69e3      	ldr	r3, [r4, #28]
 8003f40:	432b      	orrs	r3, r5
 8003f42:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8003f44:	b117      	cbz	r7, 8003f4c <lv_obj_add_flag+0x28>
        lv_obj_invalidate(obj);
 8003f46:	4620      	mov	r0, r4
 8003f48:	f001 fa0e 	bl	8005368 <lv_obj_invalidate>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f000 ff63 	bl	8004e18 <lv_obj_is_layout_positioned>
 8003f52:	42b0      	cmp	r0, r6
 8003f54:	d102      	bne.n	8003f5c <lv_obj_add_flag+0x38>
 8003f56:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 8003f5a:	d007      	beq.n	8003f6c <lv_obj_add_flag+0x48>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f004 f885 	bl	800806c <lv_obj_get_parent>
 8003f62:	f000 ff73 	bl	8004e4c <lv_obj_mark_layout_as_dirty>
        lv_obj_mark_layout_as_dirty(obj);
 8003f66:	4620      	mov	r0, r4
 8003f68:	f000 ff70 	bl	8004e4c <lv_obj_mark_layout_as_dirty>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8003f6c:	06eb      	lsls	r3, r5, #27
 8003f6e:	d50c      	bpl.n	8003f8a <lv_obj_add_flag+0x66>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8003f70:	aa02      	add	r2, sp, #8
 8003f72:	4669      	mov	r1, sp
 8003f74:	4620      	mov	r0, r4
 8003f76:	f002 fd69 	bl	8006a4c <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8003f7a:	4669      	mov	r1, sp
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f001 f9d2 	bl	8005326 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8003f82:	a902      	add	r1, sp, #8
 8003f84:	4620      	mov	r0, r4
 8003f86:	f001 f9ce 	bl	8005326 <lv_obj_invalidate_area>
}
 8003f8a:	b005      	add	sp, #20
 8003f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f8e <lv_obj_clear_flag>:
{
 8003f8e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003f90:	460d      	mov	r5, r1
 8003f92:	4604      	mov	r4, r0
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8003f94:	f000 ff40 	bl	8004e18 <lv_obj_is_layout_positioned>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8003f98:	06ea      	lsls	r2, r5, #27
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8003f9a:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8003f9c:	d50c      	bpl.n	8003fb8 <lv_obj_clear_flag+0x2a>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8003f9e:	aa02      	add	r2, sp, #8
 8003fa0:	4669      	mov	r1, sp
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f002 fd52 	bl	8006a4c <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8003fa8:	4669      	mov	r1, sp
 8003faa:	4620      	mov	r0, r4
 8003fac:	f001 f9bb 	bl	8005326 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8003fb0:	a902      	add	r1, sp, #8
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f001 f9b7 	bl	8005326 <lv_obj_invalidate_area>
    obj->flags &= (~f);
 8003fb8:	69e3      	ldr	r3, [r4, #28]
 8003fba:	ea23 0305 	bic.w	r3, r3, r5
 8003fbe:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8003fc0:	07eb      	lsls	r3, r5, #31
 8003fc2:	d50e      	bpl.n	8003fe2 <lv_obj_clear_flag+0x54>
        lv_obj_invalidate(obj);
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f001 f9cf 	bl	8005368 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f000 ff24 	bl	8004e18 <lv_obj_is_layout_positioned>
 8003fd0:	b138      	cbz	r0, 8003fe2 <lv_obj_clear_flag+0x54>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f004 f84a 	bl	800806c <lv_obj_get_parent>
 8003fd8:	f000 ff38 	bl	8004e4c <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f000 ff35 	bl	8004e4c <lv_obj_mark_layout_as_dirty>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f000 ff18 	bl	8004e18 <lv_obj_is_layout_positioned>
 8003fe8:	42b0      	cmp	r0, r6
 8003fea:	d102      	bne.n	8003ff2 <lv_obj_clear_flag+0x64>
 8003fec:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 8003ff0:	d007      	beq.n	8004002 <lv_obj_clear_flag+0x74>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f004 f83a 	bl	800806c <lv_obj_get_parent>
}
 8003ff8:	b004      	add	sp, #16
 8003ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003ffe:	f000 bf25 	b.w	8004e4c <lv_obj_mark_layout_as_dirty>
}
 8004002:	b004      	add	sp, #16
 8004004:	bd70      	pop	{r4, r5, r6, pc}

08004006 <lv_obj_add_state>:
    lv_state_t new_state = obj->state | state;
 8004006:	8c02      	ldrh	r2, [r0, #32]
{
 8004008:	460b      	mov	r3, r1
    if(obj->state != new_state) {
 800400a:	4393      	bics	r3, r2
    lv_state_t new_state = obj->state | state;
 800400c:	ea42 0101 	orr.w	r1, r2, r1
    if(obj->state != new_state) {
 8004010:	d001      	beq.n	8004016 <lv_obj_add_state+0x10>
        lv_obj_set_state(obj, new_state);
 8004012:	f7ff bc10 	b.w	8003836 <lv_obj_set_state>
}
 8004016:	4770      	bx	lr

08004018 <lv_obj_clear_state>:
    lv_state_t new_state = obj->state & (~state);
 8004018:	8c03      	ldrh	r3, [r0, #32]
{
 800401a:	460a      	mov	r2, r1
    if(obj->state != new_state) {
 800401c:	421a      	tst	r2, r3
    lv_state_t new_state = obj->state & (~state);
 800401e:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
 8004022:	d001      	beq.n	8004028 <lv_obj_clear_state+0x10>
        lv_obj_set_state(obj, new_state);
 8004024:	f7ff bc07 	b.w	8003836 <lv_obj_set_state>
}
 8004028:	4770      	bx	lr

0800402a <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 800402a:	69c3      	ldr	r3, [r0, #28]
 800402c:	ea31 0303 	bics.w	r3, r1, r3
}
 8004030:	bf0c      	ite	eq
 8004032:	2001      	moveq	r0, #1
 8004034:	2000      	movne	r0, #0
 8004036:	4770      	bx	lr

08004038 <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 8004038:	69c3      	ldr	r3, [r0, #28]
 800403a:	4219      	tst	r1, r3
}
 800403c:	bf14      	ite	ne
 800403e:	2001      	movne	r0, #1
 8004040:	2000      	moveq	r0, #0
 8004042:	4770      	bx	lr

08004044 <lv_obj_get_state>:
}
 8004044:	8c00      	ldrh	r0, [r0, #32]
 8004046:	4770      	bx	lr

08004048 <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 8004048:	6880      	ldr	r0, [r0, #8]
 800404a:	b100      	cbz	r0, 800404e <lv_obj_get_group+0x6>
 800404c:	6880      	ldr	r0, [r0, #8]
}
 800404e:	4770      	bx	lr

08004050 <lv_obj_event>:
{
 8004050:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_event_code_t code = lv_event_get_code(e);
 8004052:	4608      	mov	r0, r1
{
 8004054:	b085      	sub	sp, #20
 8004056:	460e      	mov	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
 8004058:	f7ff f8fc 	bl	8003254 <lv_event_get_code>
 800405c:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_current_target(e);
 800405e:	4630      	mov	r0, r6
 8004060:	f7ff f8f6 	bl	8003250 <lv_event_get_current_target>
    if(code == LV_EVENT_PRESSED) {
 8004064:	2d01      	cmp	r5, #1
    lv_obj_t * obj = lv_event_get_current_target(e);
 8004066:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSED) {
 8004068:	d105      	bne.n	8004076 <lv_obj_event+0x26>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 800406a:	2120      	movs	r1, #32
}
 800406c:	b005      	add	sp, #20
 800406e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_add_state(obj, state);
 8004072:	f7ff bfc8 	b.w	8004006 <lv_obj_add_state>
    else if(code == LV_EVENT_RELEASED) {
 8004076:	2d08      	cmp	r5, #8
 8004078:	d11e      	bne.n	80040b8 <lv_obj_event+0x68>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 800407a:	2120      	movs	r1, #32
 800407c:	f7ff ffcc 	bl	8004018 <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 8004080:	4630      	mov	r0, r6
 8004082:	f7ff f8eb 	bl	800325c <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8004086:	f7ff fb5f 	bl	8003748 <lv_indev_get_scroll_obj>
 800408a:	bb28      	cbnz	r0, 80040d8 <lv_obj_event+0x88>
    return (obj->flags & f)  == f ? true : false;
 800408c:	69e3      	ldr	r3, [r4, #28]
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 800408e:	071f      	lsls	r7, r3, #28
 8004090:	d522      	bpl.n	80040d8 <lv_obj_event+0x88>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8004092:	8c23      	ldrh	r3, [r4, #32]
 8004094:	07de      	lsls	r6, r3, #31
 8004096:	f04f 0101 	mov.w	r1, #1
 800409a:	4620      	mov	r0, r4
 800409c:	d402      	bmi.n	80040a4 <lv_obj_event+0x54>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 800409e:	f7ff ffb2 	bl	8004006 <lv_obj_add_state>
            if(c != LV_KEY_ENTER) {
 80040a2:	e001      	b.n	80040a8 <lv_obj_event+0x58>
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
 80040a4:	f7ff ffb8 	bl	8004018 <lv_obj_clear_state>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80040a8:	2200      	movs	r2, #0
 80040aa:	211c      	movs	r1, #28
 80040ac:	4620      	mov	r0, r4
}
 80040ae:	b005      	add	sp, #20
 80040b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80040b4:	f7ff b8aa 	b.w	800320c <lv_event_send>
    else if(code == LV_EVENT_PRESS_LOST) {
 80040b8:	2d03      	cmp	r5, #3
 80040ba:	d105      	bne.n	80040c8 <lv_obj_event+0x78>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 80040bc:	2120      	movs	r1, #32
}
 80040be:	b005      	add	sp, #20
 80040c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 80040c4:	f7ff bfa8 	b.w	8004018 <lv_obj_clear_state>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 80040c8:	2d2a      	cmp	r5, #42	; 0x2a
 80040ca:	d10f      	bne.n	80040ec <lv_obj_event+0x9c>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80040cc:	f003 ffe0 	bl	8008090 <lv_obj_get_child_cnt>
        for(uint32_t i = 0; i < child_cnt; i++) {
 80040d0:	2500      	movs	r5, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80040d2:	4606      	mov	r6, r0
        for(uint32_t i = 0; i < child_cnt; i++) {
 80040d4:	42b5      	cmp	r5, r6
 80040d6:	d101      	bne.n	80040dc <lv_obj_event+0x8c>
}
 80040d8:	b005      	add	sp, #20
 80040da:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_obj_t * child = obj->spec_attr->children[i];
 80040dc:	68a3      	ldr	r3, [r4, #8]
 80040de:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 80040e0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80040e4:	f000 feb2 	bl	8004e4c <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 80040e8:	3501      	adds	r5, #1
 80040ea:	e7f3      	b.n	80040d4 <lv_obj_event+0x84>
    else if(code == LV_EVENT_KEY) {
 80040ec:	2d0d      	cmp	r5, #13
 80040ee:	f040 8097 	bne.w	8004220 <lv_obj_event+0x1d0>
    return (obj->flags & f)  == f ? true : false;
 80040f2:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 80040f4:	071d      	lsls	r5, r3, #28
 80040f6:	d515      	bpl.n	8004124 <lv_obj_event+0xd4>
            char c = *((char *)lv_event_get_param(e));
 80040f8:	4630      	mov	r0, r6
 80040fa:	f7ff f8af 	bl	800325c <lv_event_get_param>
 80040fe:	7805      	ldrb	r5, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8004100:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 8004104:	2b11      	cmp	r3, #17
 8004106:	d102      	bne.n	800410e <lv_obj_event+0xbe>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8004108:	2101      	movs	r1, #1
 800410a:	4620      	mov	r0, r4
 800410c:	e7c7      	b.n	800409e <lv_obj_event+0x4e>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 800410e:	2d14      	cmp	r5, #20
 8004110:	d001      	beq.n	8004116 <lv_obj_event+0xc6>
 8004112:	2d12      	cmp	r5, #18
 8004114:	d103      	bne.n	800411e <lv_obj_event+0xce>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8004116:	2101      	movs	r1, #1
 8004118:	4620      	mov	r0, r4
 800411a:	f7ff ff7d 	bl	8004018 <lv_obj_clear_state>
            if(c != LV_KEY_ENTER) {
 800411e:	2d0a      	cmp	r5, #10
 8004120:	d0da      	beq.n	80040d8 <lv_obj_event+0x88>
 8004122:	e7c1      	b.n	80040a8 <lv_obj_event+0x58>
    return (obj->flags & f)  == f ? true : false;
 8004124:	f403 6301 	and.w	r3, r3, #2064	; 0x810
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 8004128:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800412c:	d1d4      	bne.n	80040d8 <lv_obj_event+0x88>
 800412e:	f000 fa0c 	bl	800454a <lv_obj_is_editable>
 8004132:	2800      	cmp	r0, #0
 8004134:	d1d0      	bne.n	80040d8 <lv_obj_event+0x88>
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8004136:	4620      	mov	r0, r4
 8004138:	f002 f8ce 	bl	80062d8 <lv_obj_get_scroll_left>
 800413c:	4607      	mov	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800413e:	4620      	mov	r0, r4
 8004140:	f002 f934 	bl	80063ac <lv_obj_get_scroll_right>
 8004144:	4605      	mov	r5, r0
            char c = *((char *)lv_event_get_param(e));
 8004146:	4630      	mov	r0, r6
 8004148:	f7ff f888 	bl	800325c <lv_event_get_param>
 800414c:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_DOWN) {
 800414e:	2b12      	cmp	r3, #18
 8004150:	d10d      	bne.n	800416e <lv_obj_event+0x11e>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8004152:	4620      	mov	r0, r4
 8004154:	f002 f863 	bl	800621e <lv_obj_get_scroll_y>
 8004158:	4605      	mov	r5, r0
 800415a:	4620      	mov	r0, r4
 800415c:	f000 fef4 	bl	8004f48 <lv_obj_get_height>
 8004160:	2800      	cmp	r0, #0
 8004162:	4601      	mov	r1, r0
 8004164:	da00      	bge.n	8004168 <lv_obj_event+0x118>
 8004166:	1cc1      	adds	r1, r0, #3
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8004168:	eb05 01a1 	add.w	r1, r5, r1, asr #2
 800416c:	e00d      	b.n	800418a <lv_obj_event+0x13a>
            else if(c == LV_KEY_UP) {
 800416e:	2b11      	cmp	r3, #17
 8004170:	d113      	bne.n	800419a <lv_obj_event+0x14a>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8004172:	4620      	mov	r0, r4
 8004174:	f002 f853 	bl	800621e <lv_obj_get_scroll_y>
 8004178:	4605      	mov	r5, r0
 800417a:	4620      	mov	r0, r4
 800417c:	f000 fee4 	bl	8004f48 <lv_obj_get_height>
 8004180:	1e01      	subs	r1, r0, #0
 8004182:	da00      	bge.n	8004186 <lv_obj_event+0x136>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8004184:	3103      	adds	r1, #3
 8004186:	eba5 01a1 	sub.w	r1, r5, r1, asr #2
 800418a:	2200      	movs	r2, #0
 800418c:	b209      	sxth	r1, r1
 800418e:	4620      	mov	r0, r4
}
 8004190:	b005      	add	sp, #20
 8004192:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8004196:	f002 baab 	b.w	80066f0 <lv_obj_scroll_to_y>
            else if(c == LV_KEY_RIGHT) {
 800419a:	2b13      	cmp	r3, #19
 800419c:	d127      	bne.n	80041ee <lv_obj_event+0x19e>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 800419e:	4620      	mov	r0, r4
 80041a0:	f002 f823 	bl	80061ea <lv_obj_get_scroll_dir>
 80041a4:	0780      	lsls	r0, r0, #30
 80041a6:	d003      	beq.n	80041b0 <lv_obj_event+0x160>
 80041a8:	2f00      	cmp	r7, #0
 80041aa:	dc0c      	bgt.n	80041c6 <lv_obj_event+0x176>
 80041ac:	2d00      	cmp	r5, #0
 80041ae:	dc0a      	bgt.n	80041c6 <lv_obj_event+0x176>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 80041b0:	4620      	mov	r0, r4
 80041b2:	f002 f834 	bl	800621e <lv_obj_get_scroll_y>
 80041b6:	4605      	mov	r5, r0
 80041b8:	4620      	mov	r0, r4
 80041ba:	f000 fec5 	bl	8004f48 <lv_obj_get_height>
 80041be:	1e01      	subs	r1, r0, #0
 80041c0:	bfb8      	it	lt
 80041c2:	3103      	addlt	r1, #3
 80041c4:	e7d0      	b.n	8004168 <lv_obj_event+0x118>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 80041c6:	4620      	mov	r0, r4
 80041c8:	f002 f823 	bl	8006212 <lv_obj_get_scroll_x>
 80041cc:	4605      	mov	r5, r0
 80041ce:	4620      	mov	r0, r4
 80041d0:	f000 feb4 	bl	8004f3c <lv_obj_get_width>
 80041d4:	1e01      	subs	r1, r0, #0
 80041d6:	bfb8      	it	lt
 80041d8:	3103      	addlt	r1, #3
 80041da:	eb05 01a1 	add.w	r1, r5, r1, asr #2
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 80041de:	2200      	movs	r2, #0
 80041e0:	b209      	sxth	r1, r1
 80041e2:	4620      	mov	r0, r4
}
 80041e4:	b005      	add	sp, #20
 80041e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 80041ea:	f002 ba6b 	b.w	80066c4 <lv_obj_scroll_to_x>
            else if(c == LV_KEY_LEFT) {
 80041ee:	2b14      	cmp	r3, #20
 80041f0:	f47f af72 	bne.w	80040d8 <lv_obj_event+0x88>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 80041f4:	4620      	mov	r0, r4
 80041f6:	f001 fff8 	bl	80061ea <lv_obj_get_scroll_dir>
 80041fa:	0781      	lsls	r1, r0, #30
 80041fc:	d0b9      	beq.n	8004172 <lv_obj_event+0x122>
 80041fe:	2f00      	cmp	r7, #0
 8004200:	dc01      	bgt.n	8004206 <lv_obj_event+0x1b6>
 8004202:	2d00      	cmp	r5, #0
 8004204:	ddb5      	ble.n	8004172 <lv_obj_event+0x122>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8004206:	4620      	mov	r0, r4
 8004208:	f002 f803 	bl	8006212 <lv_obj_get_scroll_x>
 800420c:	4605      	mov	r5, r0
 800420e:	4620      	mov	r0, r4
 8004210:	f000 fe94 	bl	8004f3c <lv_obj_get_width>
 8004214:	1e01      	subs	r1, r0, #0
 8004216:	bfb8      	it	lt
 8004218:	3103      	addlt	r1, #3
 800421a:	eba5 01a1 	sub.w	r1, r5, r1, asr #2
 800421e:	e7de      	b.n	80041de <lv_obj_event+0x18e>
    else if(code == LV_EVENT_FOCUSED) {
 8004220:	2d0e      	cmp	r5, #14
 8004222:	d126      	bne.n	8004272 <lv_obj_event+0x222>
    return (obj->flags & f)  == f ? true : false;
 8004224:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8004226:	055a      	lsls	r2, r3, #21
 8004228:	d502      	bpl.n	8004230 <lv_obj_event+0x1e0>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 800422a:	2101      	movs	r1, #1
 800422c:	f002 fbf0 	bl	8006a10 <lv_obj_scroll_to_view_recursive>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8004230:	4620      	mov	r0, r4
 8004232:	f7ff ff09 	bl	8004048 <lv_obj_get_group>
 8004236:	f7ff f9f8 	bl	800362a <lv_group_get_editing>
 800423a:	4605      	mov	r5, r0
        lv_indev_t * indev = lv_indev_get_act();
 800423c:	f7ff f9fa 	bl	8003634 <lv_indev_get_act>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8004240:	b910      	cbnz	r0, 8004248 <lv_obj_event+0x1f8>
 8004242:	4630      	mov	r0, r6
 8004244:	f7ff f84e 	bl	80032e4 <lv_event_get_indev>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8004248:	f7ff f9fa 	bl	8003640 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 800424c:	2802      	cmp	r0, #2
 800424e:	d008      	beq.n	8004262 <lv_obj_event+0x212>
        lv_state_t state = LV_STATE_FOCUSED;
 8004250:	2804      	cmp	r0, #4
 8004252:	bf0c      	ite	eq
 8004254:	2106      	moveq	r1, #6
 8004256:	2102      	movne	r1, #2
        if(editing) {
 8004258:	b12d      	cbz	r5, 8004266 <lv_obj_event+0x216>
            lv_obj_add_state(obj, state);
 800425a:	f041 0108 	orr.w	r1, r1, #8
 800425e:	4620      	mov	r0, r4
 8004260:	e704      	b.n	800406c <lv_obj_event+0x1c>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8004262:	2106      	movs	r1, #6
 8004264:	e7f8      	b.n	8004258 <lv_obj_event+0x208>
            lv_obj_add_state(obj, state);
 8004266:	4620      	mov	r0, r4
 8004268:	f7ff fecd 	bl	8004006 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 800426c:	2108      	movs	r1, #8
 800426e:	4620      	mov	r0, r4
 8004270:	e725      	b.n	80040be <lv_obj_event+0x6e>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8004272:	2d09      	cmp	r5, #9
 8004274:	d101      	bne.n	800427a <lv_obj_event+0x22a>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8004276:	2140      	movs	r1, #64	; 0x40
 8004278:	e6f8      	b.n	800406c <lv_obj_event+0x1c>
    else if(code == LV_EVENT_SCROLL_END) {
 800427a:	2d0a      	cmp	r5, #10
 800427c:	d116      	bne.n	80042ac <lv_obj_event+0x25c>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 800427e:	2140      	movs	r1, #64	; 0x40
 8004280:	f7ff feca 	bl	8004018 <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 8004284:	4620      	mov	r0, r4
 8004286:	f001 ffa8 	bl	80061da <lv_obj_get_scrollbar_mode>
 800428a:	2802      	cmp	r0, #2
 800428c:	f47f af24 	bne.w	80040d8 <lv_obj_event+0x88>
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004290:	aa02      	add	r2, sp, #8
 8004292:	4669      	mov	r1, sp
 8004294:	4620      	mov	r0, r4
 8004296:	f002 fbd9 	bl	8006a4c <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 800429a:	4669      	mov	r1, sp
 800429c:	4620      	mov	r0, r4
 800429e:	f001 f842 	bl	8005326 <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 80042a2:	a902      	add	r1, sp, #8
 80042a4:	4620      	mov	r0, r4
 80042a6:	f001 f83e 	bl	8005326 <lv_obj_invalidate_area>
 80042aa:	e715      	b.n	80040d8 <lv_obj_event+0x88>
    else if(code == LV_EVENT_DEFOCUSED) {
 80042ac:	2d0f      	cmp	r5, #15
 80042ae:	d101      	bne.n	80042b4 <lv_obj_event+0x264>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 80042b0:	210e      	movs	r1, #14
 80042b2:	e704      	b.n	80040be <lv_obj_event+0x6e>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80042b4:	2d29      	cmp	r5, #41	; 0x29
 80042b6:	d120      	bne.n	80042fa <lv_obj_event+0x2aa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80042b8:	2209      	movs	r2, #9
 80042ba:	2100      	movs	r1, #0
 80042bc:	f003 f8e6 	bl	800748c <lv_obj_get_style_prop>
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 80042c0:	220a      	movs	r2, #10
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80042c2:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 80042c4:	2100      	movs	r1, #0
 80042c6:	4620      	mov	r0, r4
 80042c8:	f003 f8e0 	bl	800748c <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 80042cc:	b280      	uxth	r0, r0
        if(layout || align) {
 80042ce:	b908      	cbnz	r0, 80042d4 <lv_obj_event+0x284>
 80042d0:	b2ed      	uxtb	r5, r5
 80042d2:	b115      	cbz	r5, 80042da <lv_obj_event+0x28a>
            lv_obj_mark_layout_as_dirty(obj);
 80042d4:	4620      	mov	r0, r4
 80042d6:	f000 fdb9 	bl	8004e4c <lv_obj_mark_layout_as_dirty>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80042da:	4620      	mov	r0, r4
 80042dc:	f003 fed8 	bl	8008090 <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 80042e0:	2500      	movs	r5, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80042e2:	4606      	mov	r6, r0
        for(i = 0; i < child_cnt; i++) {
 80042e4:	42b5      	cmp	r5, r6
 80042e6:	f43f aef7 	beq.w	80040d8 <lv_obj_event+0x88>
            lv_obj_t * child = obj->spec_attr->children[i];
 80042ea:	68a3      	ldr	r3, [r4, #8]
 80042ec:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 80042ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80042f2:	f000 fdab 	bl	8004e4c <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 80042f6:	3501      	adds	r5, #1
 80042f8:	e7f4      	b.n	80042e4 <lv_obj_event+0x294>
    else if(code == LV_EVENT_CHILD_CHANGED) {
 80042fa:	2d22      	cmp	r5, #34	; 0x22
 80042fc:	d128      	bne.n	8004350 <lv_obj_event+0x300>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80042fe:	2201      	movs	r2, #1
 8004300:	2100      	movs	r1, #0
 8004302:	f003 f8c3 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8004306:	2204      	movs	r2, #4
 8004308:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800430a:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800430c:	4620      	mov	r0, r4
 800430e:	f003 f8bd 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8004312:	2209      	movs	r2, #9
 8004314:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8004316:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8004318:	4620      	mov	r0, r4
 800431a:	f003 f8b7 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 800431e:	220a      	movs	r2, #10
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8004320:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004322:	2100      	movs	r1, #0
 8004324:	4620      	mov	r0, r4
 8004326:	f003 f8b1 	bl	800748c <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 800432a:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 800432c:	b950      	cbnz	r0, 8004344 <lv_obj_event+0x2f4>
 800432e:	b2ff      	uxtb	r7, r7
 8004330:	b947      	cbnz	r7, 8004344 <lv_obj_event+0x2f4>
 8004332:	b236      	sxth	r6, r6
 8004334:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8004338:	429e      	cmp	r6, r3
 800433a:	d003      	beq.n	8004344 <lv_obj_event+0x2f4>
 800433c:	b22d      	sxth	r5, r5
 800433e:	429d      	cmp	r5, r3
 8004340:	f47f aeca 	bne.w	80040d8 <lv_obj_event+0x88>
            lv_obj_mark_layout_as_dirty(obj);
 8004344:	4620      	mov	r0, r4
}
 8004346:	b005      	add	sp, #20
 8004348:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_mark_layout_as_dirty(obj);
 800434c:	f000 bd7e 	b.w	8004e4c <lv_obj_mark_layout_as_dirty>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8004350:	2d13      	cmp	r5, #19
 8004352:	d109      	bne.n	8004368 <lv_obj_event+0x318>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8004354:	2100      	movs	r1, #0
 8004356:	f000 fb9c 	bl	8004a92 <lv_obj_calculate_ext_draw_size>
 800435a:	4601      	mov	r1, r0
        lv_event_set_ext_draw_size(e, d);
 800435c:	4630      	mov	r0, r6
}
 800435e:	b005      	add	sp, #20
 8004360:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_event_set_ext_draw_size(e, d);
 8004364:	f7fe bfcc 	b.w	8003300 <lv_event_set_ext_draw_size>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8004368:	2d18      	cmp	r5, #24
 800436a:	f63f aeb5 	bhi.w	80040d8 <lv_obj_event+0x88>
 800436e:	f04f 7092 	mov.w	r0, #19136512	; 0x1240000
 8004372:	fa20 f505 	lsr.w	r5, r0, r5
 8004376:	07eb      	lsls	r3, r5, #31
 8004378:	f57f aeae 	bpl.w	80040d8 <lv_obj_event+0x88>
        lv_obj_draw(e);
 800437c:	4630      	mov	r0, r6
}
 800437e:	b005      	add	sp, #20
 8004380:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_draw(e);
 8004384:	f7ff bb72 	b.w	8003a6c <lv_obj_draw>

08004388 <lv_obj_destructor>:
{
 8004388:	b510      	push	{r4, lr}
    _lv_event_mark_deleted(obj);
 800438a:	4608      	mov	r0, r1
{
 800438c:	460c      	mov	r4, r1
    _lv_event_mark_deleted(obj);
 800438e:	f7fe ff67 	bl	8003260 <_lv_event_mark_deleted>
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 8004392:	2000      	movs	r0, #0
 8004394:	f003 f874 	bl	8007480 <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8004398:	4a14      	ldr	r2, [pc, #80]	; (80043ec <lv_obj_destructor+0x64>)
 800439a:	2100      	movs	r1, #0
 800439c:	4620      	mov	r0, r4
 800439e:	f003 fb1d 	bl	80079dc <lv_obj_remove_style>
    lv_obj_enable_style_refresh(true);
 80043a2:	2001      	movs	r0, #1
 80043a4:	f003 f86c 	bl	8007480 <lv_obj_enable_style_refresh>
    lv_anim_del(obj, NULL);
 80043a8:	2100      	movs	r1, #0
 80043aa:	4620      	mov	r0, r4
 80043ac:	f00e f950 	bl	8012650 <lv_anim_del>
    lv_group_t * group = lv_obj_get_group(obj);
 80043b0:	4620      	mov	r0, r4
 80043b2:	f7ff fe49 	bl	8004048 <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 80043b6:	b110      	cbz	r0, 80043be <lv_obj_destructor+0x36>
 80043b8:	4620      	mov	r0, r4
 80043ba:	f7ff f88f 	bl	80034dc <lv_group_remove_obj>
    if(obj->spec_attr) {
 80043be:	68a3      	ldr	r3, [r4, #8]
 80043c0:	b19b      	cbz	r3, 80043ea <lv_obj_destructor+0x62>
        if(obj->spec_attr->children) {
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	b120      	cbz	r0, 80043d0 <lv_obj_destructor+0x48>
            lv_mem_free(obj->spec_attr->children);
 80043c6:	f00e ffcd 	bl	8013364 <lv_mem_free>
            obj->spec_attr->children = NULL;
 80043ca:	68a3      	ldr	r3, [r4, #8]
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
        if(obj->spec_attr->event_dsc) {
 80043d0:	68a3      	ldr	r3, [r4, #8]
 80043d2:	68d8      	ldr	r0, [r3, #12]
 80043d4:	b120      	cbz	r0, 80043e0 <lv_obj_destructor+0x58>
            lv_mem_free(obj->spec_attr->event_dsc);
 80043d6:	f00e ffc5 	bl	8013364 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 80043da:	68a3      	ldr	r3, [r4, #8]
 80043dc:	2200      	movs	r2, #0
 80043de:	60da      	str	r2, [r3, #12]
        lv_mem_free(obj->spec_attr);
 80043e0:	68a0      	ldr	r0, [r4, #8]
 80043e2:	f00e ffbf 	bl	8013364 <lv_mem_free>
        obj->spec_attr = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60a3      	str	r3, [r4, #8]
}
 80043ea:	bd10      	pop	{r4, pc}
 80043ec:	000fffff 	.word	0x000fffff

080043f0 <lv_obj_allocate_spec_attr>:
    if(obj->spec_attr == NULL) {
 80043f0:	6883      	ldr	r3, [r0, #8]
{
 80043f2:	b510      	push	{r4, lr}
 80043f4:	4604      	mov	r4, r0
    if(obj->spec_attr == NULL) {
 80043f6:	b99b      	cbnz	r3, 8004420 <lv_obj_allocate_spec_attr+0x30>
        x++;
 80043f8:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <lv_obj_allocate_spec_attr+0x34>)
 80043fa:	6813      	ldr	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 80043fc:	201c      	movs	r0, #28
        x++;
 80043fe:	3301      	adds	r3, #1
 8004400:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8004402:	f00e ff91 	bl	8013328 <lv_mem_alloc>
 8004406:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8004408:	b900      	cbnz	r0, 800440c <lv_obj_allocate_spec_attr+0x1c>
 800440a:	e7fe      	b.n	800440a <lv_obj_allocate_spec_attr+0x1a>
        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 800440c:	211c      	movs	r1, #28
 800440e:	f00f f974 	bl	80136fa <lv_memset_00>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8004412:	68a2      	ldr	r2, [r4, #8]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8004414:	8b13      	ldrh	r3, [r2, #24]
 8004416:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800441a:	f043 0303 	orr.w	r3, r3, #3
 800441e:	8313      	strh	r3, [r2, #24]
}
 8004420:	bd10      	pop	{r4, pc}
 8004422:	bf00      	nop
 8004424:	20000b50 	.word	0x20000b50

08004428 <lv_obj_check_type>:
    if(obj == NULL) return false;
 8004428:	b118      	cbz	r0, 8004432 <lv_obj_check_type+0xa>
    return obj->class_p == class_p ? true : false;
 800442a:	6800      	ldr	r0, [r0, #0]
 800442c:	1a43      	subs	r3, r0, r1
 800442e:	4258      	negs	r0, r3
 8004430:	4158      	adcs	r0, r3
}
 8004432:	4770      	bx	lr

08004434 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 8004434:	b570      	push	{r4, r5, r6, lr}
    const lv_obj_class_t * original_class_p = obj->class_p;
 8004436:	6805      	ldr	r5, [r0, #0]

    if(obj->class_p->base_class) {
 8004438:	682b      	ldr	r3, [r5, #0]
{
 800443a:	4604      	mov	r4, r0
    if(obj->class_p->base_class) {
 800443c:	b113      	cbz	r3, 8004444 <lv_obj_construct+0x10>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 800443e:	6003      	str	r3, [r0, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 8004440:	f7ff fff8 	bl	8004434 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8004444:	686b      	ldr	r3, [r5, #4]
    obj->class_p = original_class_p;
 8004446:	6025      	str	r5, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8004448:	b123      	cbz	r3, 8004454 <lv_obj_construct+0x20>
 800444a:	4621      	mov	r1, r4
 800444c:	4628      	mov	r0, r5
}
 800444e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8004452:	4718      	bx	r3
}
 8004454:	bd70      	pop	{r4, r5, r6, pc}
	...

08004458 <lv_obj_class_create_obj>:

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
    while(base && base->instance_size == 0) base = base->base_class;
 8004458:	4a34      	ldr	r2, [pc, #208]	; (800452c <lv_obj_class_create_obj+0xd4>)
{
 800445a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800445c:	460d      	mov	r5, r1
 800445e:	4606      	mov	r6, r0
    const lv_obj_class_t * base = class_p;
 8004460:	4601      	mov	r1, r0
    while(base && base->instance_size == 0) base = base->base_class;
 8004462:	b121      	cbz	r1, 800446e <lv_obj_class_create_obj+0x16>
 8004464:	698b      	ldr	r3, [r1, #24]
 8004466:	421a      	tst	r2, r3
 8004468:	d018      	beq.n	800449c <lv_obj_class_create_obj+0x44>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/

    return base->instance_size;
 800446a:	f3c3 110f 	ubfx	r1, r3, #4, #16
    lv_obj_t * obj = lv_mem_alloc(s);
 800446e:	4608      	mov	r0, r1
 8004470:	9101      	str	r1, [sp, #4]
 8004472:	f00e ff59 	bl	8013328 <lv_mem_alloc>
    if(obj == NULL) return NULL;
 8004476:	4604      	mov	r4, r0
 8004478:	b168      	cbz	r0, 8004496 <lv_obj_class_create_obj+0x3e>
    lv_memset_00(obj, s);
 800447a:	9901      	ldr	r1, [sp, #4]
 800447c:	f00f f93d 	bl	80136fa <lv_memset_00>
    obj->parent = parent;
 8004480:	e9c4 6500 	strd	r6, r5, [r4]
    if(parent == NULL) {
 8004484:	bb85      	cbnz	r5, 80044e8 <lv_obj_class_create_obj+0x90>
        lv_disp_t * disp = lv_disp_get_default();
 8004486:	f00d ff6d 	bl	8012364 <lv_disp_get_default>
        if(!disp) {
 800448a:	4606      	mov	r6, r0
 800448c:	b940      	cbnz	r0, 80044a0 <lv_obj_class_create_obj+0x48>
            lv_mem_free(obj);
 800448e:	4620      	mov	r0, r4
 8004490:	f00e ff68 	bl	8013364 <lv_mem_free>
            return NULL;
 8004494:	462c      	mov	r4, r5
}
 8004496:	4620      	mov	r0, r4
 8004498:	b002      	add	sp, #8
 800449a:	bd70      	pop	{r4, r5, r6, pc}
    while(base && base->instance_size == 0) base = base->base_class;
 800449c:	6809      	ldr	r1, [r1, #0]
 800449e:	e7e0      	b.n	8004462 <lv_obj_class_create_obj+0xa>
        if(disp->screens == NULL) {
 80044a0:	68c0      	ldr	r0, [r0, #12]
 80044a2:	b998      	cbnz	r0, 80044cc <lv_obj_class_create_obj+0x74>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 80044a4:	2004      	movs	r0, #4
 80044a6:	f00e ff3f 	bl	8013328 <lv_mem_alloc>
            disp->screen_cnt = 1;
 80044aa:	2301      	movs	r3, #1
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 80044ac:	60f0      	str	r0, [r6, #12]
            disp->screens[0] = obj;
 80044ae:	6004      	str	r4, [r0, #0]
            disp->screen_cnt = 1;
 80044b0:	6273      	str	r3, [r6, #36]	; 0x24
        obj->coords.x1 = 0;
 80044b2:	2500      	movs	r5, #0
 80044b4:	6165      	str	r5, [r4, #20]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 80044b6:	4628      	mov	r0, r5
 80044b8:	f00d ff5a 	bl	8012370 <lv_disp_get_hor_res>
 80044bc:	3801      	subs	r0, #1
 80044be:	8320      	strh	r0, [r4, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 80044c0:	4628      	mov	r0, r5
 80044c2:	f00d ff65 	bl	8012390 <lv_disp_get_ver_res>
 80044c6:	3801      	subs	r0, #1
 80044c8:	8360      	strh	r0, [r4, #26]
 80044ca:	e7e4      	b.n	8004496 <lv_obj_class_create_obj+0x3e>
            disp->screen_cnt++;
 80044cc:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80044ce:	3101      	adds	r1, #1
 80044d0:	6271      	str	r1, [r6, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 80044d2:	0089      	lsls	r1, r1, #2
 80044d4:	f00e ff5e 	bl	8013394 <lv_mem_realloc>
            disp->screens[disp->screen_cnt - 1] = obj;
 80044d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 80044da:	60f0      	str	r0, [r6, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 80044dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044e0:	3b01      	subs	r3, #1
 80044e2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80044e6:	e7e4      	b.n	80044b2 <lv_obj_class_create_obj+0x5a>
        if(parent->spec_attr == NULL) {
 80044e8:	68ab      	ldr	r3, [r5, #8]
 80044ea:	b913      	cbnz	r3, 80044f2 <lv_obj_class_create_obj+0x9a>
            lv_obj_allocate_spec_attr(parent);
 80044ec:	4628      	mov	r0, r5
 80044ee:	f7ff ff7f 	bl	80043f0 <lv_obj_allocate_spec_attr>
        if(parent->spec_attr->children == NULL) {
 80044f2:	68ae      	ldr	r6, [r5, #8]
 80044f4:	6830      	ldr	r0, [r6, #0]
 80044f6:	b948      	cbnz	r0, 800450c <lv_obj_class_create_obj+0xb4>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 80044f8:	2004      	movs	r0, #4
 80044fa:	f00e ff15 	bl	8013328 <lv_mem_alloc>
            parent->spec_attr->children[0] = obj;
 80044fe:	68ab      	ldr	r3, [r5, #8]
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8004500:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[0] = obj;
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	6014      	str	r4, [r2, #0]
            parent->spec_attr->child_cnt = 1;
 8004506:	2201      	movs	r2, #1
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	e7c4      	b.n	8004496 <lv_obj_class_create_obj+0x3e>
            parent->spec_attr->child_cnt++;
 800450c:	6871      	ldr	r1, [r6, #4]
 800450e:	3101      	adds	r1, #1
 8004510:	6071      	str	r1, [r6, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8004512:	0089      	lsls	r1, r1, #2
 8004514:	f00e ff3e 	bl	8013394 <lv_mem_realloc>
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8004518:	68aa      	ldr	r2, [r5, #8]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800451a:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 800451c:	6853      	ldr	r3, [r2, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004524:	3b01      	subs	r3, #1
 8004526:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800452a:	e7b4      	b.n	8004496 <lv_obj_class_create_obj+0x3e>
 800452c:	000ffff0 	.word	0x000ffff0

08004530 <_lv_obj_destruct>:
{
 8004530:	b510      	push	{r4, lr}
 8004532:	4604      	mov	r4, r0
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 8004534:	6820      	ldr	r0, [r4, #0]
 8004536:	6883      	ldr	r3, [r0, #8]
 8004538:	b10b      	cbz	r3, 800453e <_lv_obj_destruct+0xe>
 800453a:	4621      	mov	r1, r4
 800453c:	4798      	blx	r3
    if(obj->class_p->base_class) {
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	b10b      	cbz	r3, 8004548 <_lv_obj_destruct+0x18>
        obj->class_p = obj->class_p->base_class;
 8004544:	6023      	str	r3, [r4, #0]
        _lv_obj_destruct(obj);
 8004546:	e7f5      	b.n	8004534 <_lv_obj_destruct+0x4>
}
 8004548:	bd10      	pop	{r4, pc}

0800454a <lv_obj_is_editable>:
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 800454a:	6800      	ldr	r0, [r0, #0]
 800454c:	b130      	cbz	r0, 800455c <lv_obj_is_editable+0x12>
 800454e:	7e03      	ldrb	r3, [r0, #24]
 8004550:	f013 0303 	ands.w	r3, r3, #3
 8004554:	d0f9      	beq.n	800454a <lv_obj_is_editable>
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 8004556:	3b01      	subs	r3, #1
 8004558:	4258      	negs	r0, r3
 800455a:	4158      	adcs	r0, r3
}
 800455c:	4770      	bx	lr

0800455e <lv_obj_is_group_def>:
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 800455e:	6800      	ldr	r0, [r0, #0]
 8004560:	b130      	cbz	r0, 8004570 <lv_obj_is_group_def+0x12>
 8004562:	7e03      	ldrb	r3, [r0, #24]
 8004564:	f013 030c 	ands.w	r3, r3, #12
 8004568:	d0f9      	beq.n	800455e <lv_obj_is_group_def>
    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 800456a:	3b04      	subs	r3, #4
 800456c:	4258      	negs	r0, r3
 800456e:	4158      	adcs	r0, r3
}
 8004570:	4770      	bx	lr

08004572 <lv_obj_class_init_obj>:
{
 8004572:	b538      	push	{r3, r4, r5, lr}
 8004574:	4604      	mov	r4, r0
    lv_obj_mark_layout_as_dirty(obj);
 8004576:	f000 fc69 	bl	8004e4c <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 800457a:	2000      	movs	r0, #0
 800457c:	f002 ff80 	bl	8007480 <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 8004580:	4620      	mov	r0, r4
 8004582:	f004 fee7 	bl	8009354 <lv_theme_apply>
    lv_obj_construct(obj);
 8004586:	4620      	mov	r0, r4
 8004588:	f7ff ff54 	bl	8004434 <lv_obj_construct>
    lv_obj_enable_style_refresh(true);
 800458c:	2001      	movs	r0, #1
 800458e:	f002 ff77 	bl	8007480 <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8004592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004596:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800459a:	4620      	mov	r0, r4
 800459c:	f003 f83c 	bl	8007618 <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 80045a0:	4620      	mov	r0, r4
 80045a2:	f000 fd55 	bl	8005050 <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 80045a6:	f7fe ff57 	bl	8003458 <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 80045aa:	4602      	mov	r2, r0
 80045ac:	b138      	cbz	r0, 80045be <lv_obj_class_init_obj+0x4c>
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7ff ffd5 	bl	800455e <lv_obj_is_group_def>
 80045b4:	b118      	cbz	r0, 80045be <lv_obj_class_init_obj+0x4c>
        lv_group_add_obj(def_group, obj);
 80045b6:	4621      	mov	r1, r4
 80045b8:	4610      	mov	r0, r2
 80045ba:	f7fe ffd7 	bl	800356c <lv_group_add_obj>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80045be:	4620      	mov	r0, r4
 80045c0:	f003 fd54 	bl	800806c <lv_obj_get_parent>
    if(parent) {
 80045c4:	4605      	mov	r5, r0
 80045c6:	b168      	cbz	r0, 80045e4 <lv_obj_class_init_obj+0x72>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80045c8:	4622      	mov	r2, r4
 80045ca:	2122      	movs	r1, #34	; 0x22
 80045cc:	f7fe fe1e 	bl	800320c <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 80045d0:	4622      	mov	r2, r4
 80045d2:	4628      	mov	r0, r5
 80045d4:	2123      	movs	r1, #35	; 0x23
 80045d6:	f7fe fe19 	bl	800320c <lv_event_send>
        lv_obj_invalidate(obj);
 80045da:	4620      	mov	r0, r4
}
 80045dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(obj);
 80045e0:	f000 bec2 	b.w	8005368 <lv_obj_invalidate>
}
 80045e4:	bd38      	pop	{r3, r4, r5, pc}

080045e6 <lv_obj_get_style_opa>:
{
 80045e6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80045e8:	2260      	movs	r2, #96	; 0x60
 80045ea:	f002 ff4f 	bl	800748c <lv_obj_get_style_prop>
}
 80045ee:	b2c0      	uxtb	r0, r0
 80045f0:	bd08      	pop	{r3, pc}

080045f2 <lv_obj_get_style_blend_mode>:
{
 80045f2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80045f4:	2267      	movs	r2, #103	; 0x67
 80045f6:	f002 ff49 	bl	800748c <lv_obj_get_style_prop>
}
 80045fa:	b2c0      	uxtb	r0, r0
 80045fc:	bd08      	pop	{r3, pc}

080045fe <lv_obj_get_style_bg_color_filtered>:
{
 80045fe:	b538      	push	{r3, r4, r5, lr}
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 8004600:	2220      	movs	r2, #32
{
 8004602:	4604      	mov	r4, r0
 8004604:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 8004606:	f002 ff41 	bl	800748c <lv_obj_get_style_prop>
 800460a:	4629      	mov	r1, r5
 800460c:	4602      	mov	r2, r0
 800460e:	4620      	mov	r0, r4
 8004610:	f003 fbb4 	bl	8007d7c <_lv_obj_style_apply_color_filter>
}
 8004614:	bd38      	pop	{r3, r4, r5, pc}

08004616 <lv_obj_get_style_text_color_filtered>:
{
 8004616:	b538      	push	{r3, r4, r5, lr}
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8004618:	2255      	movs	r2, #85	; 0x55
{
 800461a:	4604      	mov	r4, r0
 800461c:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 800461e:	f002 ff35 	bl	800748c <lv_obj_get_style_prop>
 8004622:	4629      	mov	r1, r5
 8004624:	4602      	mov	r2, r0
 8004626:	4620      	mov	r0, r4
 8004628:	f003 fba8 	bl	8007d7c <_lv_obj_style_apply_color_filter>
}
 800462c:	bd38      	pop	{r3, r4, r5, pc}

0800462e <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 800462e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004630:	4606      	mov	r6, r0
 8004632:	4614      	mov	r4, r2
    lv_opa_t opa = LV_OPA_COVER;
    if(part != LV_PART_MAIN) {
 8004634:	460d      	mov	r5, r1
 8004636:	b171      	cbz	r1, 8004656 <lv_obj_init_draw_rect_dsc+0x28>
        opa = lv_obj_get_style_opa(obj, part);
 8004638:	f7ff ffd5 	bl	80045e6 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 800463c:	2802      	cmp	r0, #2
        opa = lv_obj_get_style_opa(obj, part);
 800463e:	4607      	mov	r7, r0
        if(opa <= LV_OPA_MIN) {
 8004640:	f200 8138 	bhi.w	80048b4 <lv_obj_init_draw_rect_dsc+0x286>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 8004644:	2300      	movs	r3, #0
 8004646:	70e3      	strb	r3, [r4, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 8004648:	7563      	strb	r3, [r4, #21]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 800464a:	7723      	strb	r3, [r4, #28]
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 800464c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8004650:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
        }
    }
}
 8004654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_opa_t opa = LV_OPA_COVER;
 8004656:	27ff      	movs	r7, #255	; 0xff
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8004658:	220b      	movs	r2, #11
 800465a:	4629      	mov	r1, r5
 800465c:	4630      	mov	r0, r6
 800465e:	f002 ff15 	bl	800748c <lv_obj_get_style_prop>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8004662:	78e3      	ldrb	r3, [r4, #3]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8004664:	8020      	strh	r0, [r4, #0]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8004666:	b1f3      	cbz	r3, 80046a6 <lv_obj_init_draw_rect_dsc+0x78>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8004668:	2221      	movs	r2, #33	; 0x21
 800466a:	4629      	mov	r1, r5
 800466c:	4630      	mov	r0, r6
 800466e:	f002 ff0d 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004672:	b2c0      	uxtb	r0, r0
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8004674:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8004676:	70e0      	strb	r0, [r4, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8004678:	d915      	bls.n	80046a6 <lv_obj_init_draw_rect_dsc+0x78>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 800467a:	4629      	mov	r1, r5
 800467c:	4630      	mov	r0, r6
 800467e:	f7ff ffbe 	bl	80045fe <lv_obj_get_style_bg_color_filtered>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 8004682:	4629      	mov	r1, r5
 8004684:	7120      	strb	r0, [r4, #4]
 8004686:	2226      	movs	r2, #38	; 0x26
 8004688:	4630      	mov	r0, r6
 800468a:	f002 feff 	bl	800748c <lv_obj_get_style_prop>
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 800468e:	4601      	mov	r1, r0
 8004690:	2800      	cmp	r0, #0
 8004692:	f000 80c3 	beq.w	800481c <lv_obj_init_draw_rect_dsc+0x1ee>
 8004696:	7943      	ldrb	r3, [r0, #5]
 8004698:	075a      	lsls	r2, r3, #29
 800469a:	f000 80bf 	beq.w	800481c <lv_obj_init_draw_rect_dsc+0x1ee>
                lv_memcpy(&draw_dsc->bg_grad, grad, sizeof(*grad));
 800469e:	2206      	movs	r2, #6
 80046a0:	1d60      	adds	r0, r4, #5
 80046a2:	f00e ff0b 	bl	80134bc <lv_memcpy>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80046a6:	2232      	movs	r2, #50	; 0x32
 80046a8:	4629      	mov	r1, r5
 80046aa:	4630      	mov	r0, r6
 80046ac:	f002 feee 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80046b0:	b200      	sxth	r0, r0
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 80046b2:	8360      	strh	r0, [r4, #26]
    if(draw_dsc->border_width) {
 80046b4:	b1f0      	cbz	r0, 80046f4 <lv_obj_init_draw_rect_dsc+0xc6>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 80046b6:	7f23      	ldrb	r3, [r4, #28]
 80046b8:	b1e3      	cbz	r3, 80046f4 <lv_obj_init_draw_rect_dsc+0xc6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80046ba:	2231      	movs	r2, #49	; 0x31
 80046bc:	4629      	mov	r1, r5
 80046be:	4630      	mov	r0, r6
 80046c0:	f002 fee4 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80046c4:	b2c0      	uxtb	r0, r0
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80046c6:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 80046c8:	7720      	strb	r0, [r4, #28]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80046ca:	d913      	bls.n	80046f4 <lv_obj_init_draw_rect_dsc+0xc6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 80046cc:	2233      	movs	r2, #51	; 0x33
 80046ce:	4629      	mov	r1, r5
 80046d0:	4630      	mov	r0, r6
 80046d2:	f002 fedb 	bl	800748c <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80046d6:	7f63      	ldrb	r3, [r4, #29]
 80046d8:	f360 0345 	bfi	r3, r0, #1, #5
 80046dc:	7763      	strb	r3, [r4, #29]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 80046de:	2230      	movs	r2, #48	; 0x30
 80046e0:	4629      	mov	r1, r5
 80046e2:	4630      	mov	r0, r6
 80046e4:	f002 fed2 	bl	800748c <lv_obj_get_style_prop>
 80046e8:	4629      	mov	r1, r5
 80046ea:	4602      	mov	r2, r0
 80046ec:	4630      	mov	r0, r6
 80046ee:	f003 fb45 	bl	8007d7c <_lv_obj_style_apply_color_filter>
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 80046f2:	7620      	strb	r0, [r4, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 80046f4:	2235      	movs	r2, #53	; 0x35
 80046f6:	4629      	mov	r1, r5
 80046f8:	4630      	mov	r0, r6
 80046fa:	f002 fec7 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80046fe:	b200      	sxth	r0, r0
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8004700:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->outline_width) {
 8004702:	b1e8      	cbz	r0, 8004740 <lv_obj_init_draw_rect_dsc+0x112>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8004704:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004708:	b1d3      	cbz	r3, 8004740 <lv_obj_init_draw_rect_dsc+0x112>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 800470a:	2237      	movs	r2, #55	; 0x37
 800470c:	4629      	mov	r1, r5
 800470e:	4630      	mov	r0, r6
 8004710:	f002 febc 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004714:	b2c0      	uxtb	r0, r0
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8004716:	2802      	cmp	r0, #2
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8004718:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 800471c:	d910      	bls.n	8004740 <lv_obj_init_draw_rect_dsc+0x112>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 800471e:	2238      	movs	r2, #56	; 0x38
 8004720:	4629      	mov	r1, r5
 8004722:	4630      	mov	r0, r6
 8004724:	f002 feb2 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 8004728:	2236      	movs	r2, #54	; 0x36
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 800472a:	8460      	strh	r0, [r4, #34]	; 0x22
 800472c:	4629      	mov	r1, r5
 800472e:	4630      	mov	r0, r6
 8004730:	f002 feac 	bl	800748c <lv_obj_get_style_prop>
 8004734:	4629      	mov	r1, r5
 8004736:	4602      	mov	r2, r0
 8004738:	4630      	mov	r0, r6
 800473a:	f003 fb1f 	bl	8007d7c <_lv_obj_style_apply_color_filter>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 800473e:	77a0      	strb	r0, [r4, #30]
    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 8004740:	7d63      	ldrb	r3, [r4, #21]
 8004742:	b303      	cbz	r3, 8004786 <lv_obj_init_draw_rect_dsc+0x158>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 8004744:	2228      	movs	r2, #40	; 0x28
 8004746:	4629      	mov	r1, r5
 8004748:	4630      	mov	r0, r6
 800474a:	f002 fe9f 	bl	800748c <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 800474e:	60e0      	str	r0, [r4, #12]
        if(draw_dsc->bg_img_src) {
 8004750:	b1c8      	cbz	r0, 8004786 <lv_obj_init_draw_rect_dsc+0x158>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 8004752:	2229      	movs	r2, #41	; 0x29
 8004754:	4629      	mov	r1, r5
 8004756:	4630      	mov	r0, r6
 8004758:	f002 fe98 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800475c:	b2c0      	uxtb	r0, r0
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 800475e:	2802      	cmp	r0, #2
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 8004760:	7560      	strb	r0, [r4, #21]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8004762:	d910      	bls.n	8004786 <lv_obj_init_draw_rect_dsc+0x158>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 8004764:	68e0      	ldr	r0, [r4, #12]
 8004766:	f005 f8b1 	bl	80098cc <lv_img_src_get_type>
 800476a:	2802      	cmp	r0, #2
 800476c:	f040 8087 	bne.w	800487e <lv_obj_init_draw_rect_dsc+0x250>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8004770:	2257      	movs	r2, #87	; 0x57
 8004772:	4629      	mov	r1, r5
 8004774:	4630      	mov	r0, r6
 8004776:	f002 fe89 	bl	800748c <lv_obj_get_style_prop>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 800477a:	4629      	mov	r1, r5
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 800477c:	6120      	str	r0, [r4, #16]
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 800477e:	4630      	mov	r0, r6
 8004780:	f7ff ff49 	bl	8004616 <lv_obj_get_style_text_color_filtered>
 8004784:	7520      	strb	r0, [r4, #20]
    if(draw_dsc->shadow_opa) {
 8004786:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800478a:	b39b      	cbz	r3, 80047f4 <lv_obj_init_draw_rect_dsc+0x1c6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 800478c:	2240      	movs	r2, #64	; 0x40
 800478e:	4629      	mov	r1, r5
 8004790:	4630      	mov	r0, r6
 8004792:	f002 fe7b 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004796:	b200      	sxth	r0, r0
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8004798:	84e0      	strh	r0, [r4, #38]	; 0x26
        if(draw_dsc->shadow_width) {
 800479a:	b358      	cbz	r0, 80047f4 <lv_obj_init_draw_rect_dsc+0x1c6>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 800479c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d927      	bls.n	80047f4 <lv_obj_init_draw_rect_dsc+0x1c6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80047a4:	2245      	movs	r2, #69	; 0x45
 80047a6:	4629      	mov	r1, r5
 80047a8:	4630      	mov	r0, r6
 80047aa:	f002 fe6f 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80047ae:	b2c0      	uxtb	r0, r0
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 80047b0:	2802      	cmp	r0, #2
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 80047b2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 80047b6:	d91d      	bls.n	80047f4 <lv_obj_init_draw_rect_dsc+0x1c6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 80047b8:	2241      	movs	r2, #65	; 0x41
 80047ba:	4629      	mov	r1, r5
 80047bc:	4630      	mov	r0, r6
 80047be:	f002 fe65 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 80047c2:	2242      	movs	r2, #66	; 0x42
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 80047c4:	8520      	strh	r0, [r4, #40]	; 0x28
 80047c6:	4629      	mov	r1, r5
 80047c8:	4630      	mov	r0, r6
 80047ca:	f002 fe5f 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 80047ce:	2243      	movs	r2, #67	; 0x43
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 80047d0:	8560      	strh	r0, [r4, #42]	; 0x2a
 80047d2:	4629      	mov	r1, r5
 80047d4:	4630      	mov	r0, r6
 80047d6:	f002 fe59 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 80047da:	2244      	movs	r2, #68	; 0x44
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 80047dc:	85a0      	strh	r0, [r4, #44]	; 0x2c
 80047de:	4629      	mov	r1, r5
 80047e0:	4630      	mov	r0, r6
 80047e2:	f002 fe53 	bl	800748c <lv_obj_get_style_prop>
 80047e6:	4629      	mov	r1, r5
 80047e8:	4602      	mov	r2, r0
 80047ea:	4630      	mov	r0, r6
 80047ec:	f003 fac6 	bl	8007d7c <_lv_obj_style_apply_color_filter>
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 80047f0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    if(part != LV_PART_MAIN) {
 80047f4:	2d00      	cmp	r5, #0
 80047f6:	f43f af2d 	beq.w	8004654 <lv_obj_init_draw_rect_dsc+0x26>
        if(opa < LV_OPA_MAX) {
 80047fa:	2ffc      	cmp	r7, #252	; 0xfc
 80047fc:	f63f af2a 	bhi.w	8004654 <lv_obj_init_draw_rect_dsc+0x26>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8004800:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8004804:	fb13 f007 	smulbb	r0, r3, r7
 8004808:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800480c:	70e0      	strb	r0, [r4, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 800480e:	7560      	strb	r0, [r4, #21]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8004810:	7720      	strb	r0, [r4, #28]
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8004812:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8004816:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 800481a:	e71b      	b.n	8004654 <lv_obj_init_draw_rect_dsc+0x26>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 800481c:	2223      	movs	r2, #35	; 0x23
 800481e:	4629      	mov	r1, r5
 8004820:	4630      	mov	r0, r6
 8004822:	f002 fe33 	bl	800748c <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 8004826:	7aa3      	ldrb	r3, [r4, #10]
 8004828:	f360 0302 	bfi	r3, r0, #0, #3
 800482c:	72a3      	strb	r3, [r4, #10]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 800482e:	075b      	lsls	r3, r3, #29
 8004830:	d01b      	beq.n	800486a <lv_obj_init_draw_rect_dsc+0x23c>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 8004832:	4629      	mov	r1, r5
 8004834:	4630      	mov	r0, r6
 8004836:	f7ff fee2 	bl	80045fe <lv_obj_get_style_bg_color_filtered>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 800483a:	2222      	movs	r2, #34	; 0x22
 800483c:	7160      	strb	r0, [r4, #5]
 800483e:	4629      	mov	r1, r5
 8004840:	4630      	mov	r0, r6
 8004842:	f002 fe23 	bl	800748c <lv_obj_get_style_prop>
 8004846:	4629      	mov	r1, r5
 8004848:	4602      	mov	r2, r0
 800484a:	4630      	mov	r0, r6
 800484c:	f003 fa96 	bl	8007d7c <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 8004850:	2224      	movs	r2, #36	; 0x24
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 8004852:	71e0      	strb	r0, [r4, #7]
 8004854:	4629      	mov	r1, r5
 8004856:	4630      	mov	r0, r6
 8004858:	f002 fe18 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 800485c:	2225      	movs	r2, #37	; 0x25
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 800485e:	71a0      	strb	r0, [r4, #6]
 8004860:	4629      	mov	r1, r5
 8004862:	4630      	mov	r0, r6
 8004864:	f002 fe12 	bl	800748c <lv_obj_get_style_prop>
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 8004868:	7220      	strb	r0, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 800486a:	2227      	movs	r2, #39	; 0x27
 800486c:	4629      	mov	r1, r5
 800486e:	4630      	mov	r0, r6
 8004870:	f002 fe0c 	bl	800748c <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 8004874:	7aa3      	ldrb	r3, [r4, #10]
 8004876:	f360 03c5 	bfi	r3, r0, #3, #3
 800487a:	72a3      	strb	r3, [r4, #10]
 800487c:	e713      	b.n	80046a6 <lv_obj_init_draw_rect_dsc+0x78>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 800487e:	222a      	movs	r2, #42	; 0x2a
 8004880:	4629      	mov	r1, r5
 8004882:	4630      	mov	r0, r6
 8004884:	f002 fe02 	bl	800748c <lv_obj_get_style_prop>
 8004888:	4629      	mov	r1, r5
 800488a:	4602      	mov	r2, r0
 800488c:	4630      	mov	r0, r6
 800488e:	f003 fa75 	bl	8007d7c <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 8004892:	222b      	movs	r2, #43	; 0x2b
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 8004894:	7520      	strb	r0, [r4, #20]
 8004896:	4629      	mov	r1, r5
 8004898:	4630      	mov	r0, r6
 800489a:	f002 fdf7 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 800489e:	222c      	movs	r2, #44	; 0x2c
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 80048a0:	75a0      	strb	r0, [r4, #22]
 80048a2:	4629      	mov	r1, r5
 80048a4:	4630      	mov	r0, r6
 80048a6:	f002 fdf1 	bl	800748c <lv_obj_get_style_prop>
    return (bool)v.num;
 80048aa:	3800      	subs	r0, #0
 80048ac:	bf18      	it	ne
 80048ae:	2001      	movne	r0, #1
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 80048b0:	75e0      	strb	r0, [r4, #23]
 80048b2:	e768      	b.n	8004786 <lv_obj_init_draw_rect_dsc+0x158>
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80048b4:	4629      	mov	r1, r5
 80048b6:	4630      	mov	r0, r6
 80048b8:	f7ff fe9b 	bl	80045f2 <lv_obj_get_style_blend_mode>
 80048bc:	70a0      	strb	r0, [r4, #2]
 80048be:	e6cb      	b.n	8004658 <lv_obj_init_draw_rect_dsc+0x2a>

080048c0 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 80048c4:	2256      	movs	r2, #86	; 0x56
 80048c6:	4606      	mov	r6, r0
 80048c8:	460d      	mov	r5, r1
 80048ca:	f002 fddf 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80048ce:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 80048d0:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 80048d2:	7620      	strb	r0, [r4, #24]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 80048d4:	d908      	bls.n	80048e8 <lv_obj_init_draw_label_dsc+0x28>

    if(part != LV_PART_MAIN) {
 80048d6:	b17d      	cbz	r5, 80048f8 <lv_obj_init_draw_label_dsc+0x38>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 80048d8:	4629      	mov	r1, r5
 80048da:	4630      	mov	r0, r6
 80048dc:	f7ff fe83 	bl	80045e6 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 80048e0:	2802      	cmp	r0, #2
 80048e2:	d802      	bhi.n	80048ea <lv_obj_init_draw_label_dsc+0x2a>
            draw_dsc->opa = LV_OPA_TRANSP;
 80048e4:	2300      	movs	r3, #0
 80048e6:	7623      	strb	r3, [r4, #24]
#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
}
 80048e8:	bd70      	pop	{r4, r5, r6, pc}
        if(opa < LV_OPA_MAX) {
 80048ea:	28fc      	cmp	r0, #252	; 0xfc
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 80048ec:	bf9f      	itttt	ls
 80048ee:	7e23      	ldrbls	r3, [r4, #24]
 80048f0:	fb13 f000 	smulbbls	r0, r3, r0
 80048f4:	1200      	asrls	r0, r0, #8
 80048f6:	7620      	strbls	r0, [r4, #24]
    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 80048f8:	4629      	mov	r1, r5
 80048fa:	4630      	mov	r0, r6
 80048fc:	f7ff fe8b 	bl	8004616 <lv_obj_get_style_text_color_filtered>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8004900:	2258      	movs	r2, #88	; 0x58
 8004902:	7320      	strb	r0, [r4, #12]
 8004904:	4629      	mov	r1, r5
 8004906:	4630      	mov	r0, r6
 8004908:	f002 fdc0 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 800490c:	2259      	movs	r2, #89	; 0x59
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 800490e:	8260      	strh	r0, [r4, #18]
 8004910:	4629      	mov	r1, r5
 8004912:	4630      	mov	r0, r6
 8004914:	f002 fdba 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 8004918:	225a      	movs	r2, #90	; 0x5a
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 800491a:	8220      	strh	r0, [r4, #16]
 800491c:	4629      	mov	r1, r5
 800491e:	4630      	mov	r0, r6
 8004920:	f002 fdb4 	bl	800748c <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8004924:	7f23      	ldrb	r3, [r4, #28]
 8004926:	f360 0302 	bfi	r3, r0, #0, #3
 800492a:	7723      	strb	r3, [r4, #28]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 800492c:	b13d      	cbz	r5, 800493e <lv_obj_init_draw_label_dsc+0x7e>
 800492e:	4629      	mov	r1, r5
 8004930:	4630      	mov	r0, r6
 8004932:	f7ff fe5e 	bl	80045f2 <lv_obj_get_style_blend_mode>
 8004936:	7f23      	ldrb	r3, [r4, #28]
 8004938:	f360 03c5 	bfi	r3, r0, #3, #3
 800493c:	7723      	strb	r3, [r4, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 800493e:	2257      	movs	r2, #87	; 0x57
 8004940:	4629      	mov	r1, r5
 8004942:	4630      	mov	r0, r6
 8004944:	f002 fda2 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 8004948:	225b      	movs	r2, #91	; 0x5b
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 800494a:	6020      	str	r0, [r4, #0]
 800494c:	4629      	mov	r1, r5
 800494e:	4630      	mov	r0, r6
 8004950:	f002 fd9c 	bl	800748c <lv_obj_get_style_prop>
    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 8004954:	76a0      	strb	r0, [r4, #26]
 8004956:	e7c7      	b.n	80048e8 <lv_obj_init_draw_label_dsc+0x28>

08004958 <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint32_t part, lv_draw_img_dsc_t * draw_dsc)
{
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 800495c:	2246      	movs	r2, #70	; 0x46
 800495e:	4605      	mov	r5, r0
 8004960:	460e      	mov	r6, r1
 8004962:	f002 fd93 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004966:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8004968:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
 800496a:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 800496c:	d908      	bls.n	8004980 <lv_obj_init_draw_img_dsc+0x28>

    if(part != LV_PART_MAIN) {
 800496e:	b17e      	cbz	r6, 8004990 <lv_obj_init_draw_img_dsc+0x38>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8004970:	4631      	mov	r1, r6
 8004972:	4628      	mov	r0, r5
 8004974:	f7ff fe37 	bl	80045e6 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 8004978:	2802      	cmp	r0, #2
 800497a:	d802      	bhi.n	8004982 <lv_obj_init_draw_img_dsc+0x2a>
            draw_dsc->opa = LV_OPA_TRANSP;
 800497c:	2300      	movs	r3, #0
 800497e:	72a3      	strb	r3, [r4, #10]
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
    }
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 8004980:	bd70      	pop	{r4, r5, r6, pc}
        if(opa < LV_OPA_MAX) {
 8004982:	28fc      	cmp	r0, #252	; 0xfc
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8004984:	bf9f      	itttt	ls
 8004986:	7aa3      	ldrbls	r3, [r4, #10]
 8004988:	fb13 f000 	smulbbls	r0, r3, r0
 800498c:	1200      	asrls	r0, r0, #8
 800498e:	72a0      	strbls	r0, [r4, #10]
    draw_dsc->angle = 0;
 8004990:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004994:	6023      	str	r3, [r4, #0]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004996:	8b2b      	ldrh	r3, [r5, #24]
 8004998:	8aaa      	ldrh	r2, [r5, #20]
 800499a:	3301      	adds	r3, #1
 800499c:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 800499e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80049a2:	fa02 f383 	sxtah	r3, r2, r3
 80049a6:	105b      	asrs	r3, r3, #1
 80049a8:	80a3      	strh	r3, [r4, #4]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80049aa:	8b6b      	ldrh	r3, [r5, #26]
 80049ac:	8aea      	ldrh	r2, [r5, #22]
 80049ae:	3301      	adds	r3, #1
 80049b0:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 80049b2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80049b6:	fa02 f383 	sxtah	r3, r2, r3
 80049ba:	105b      	asrs	r3, r3, #1
 80049bc:	80e3      	strh	r3, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 80049be:	2248      	movs	r2, #72	; 0x48
 80049c0:	4631      	mov	r1, r6
 80049c2:	4628      	mov	r0, r5
 80049c4:	f002 fd62 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80049c8:	b2c0      	uxtb	r0, r0
    draw_dsc->recolor_opa = lv_obj_get_style_img_recolor_opa(obj, part);
 80049ca:	7260      	strb	r0, [r4, #9]
    if(draw_dsc->recolor_opa > 0) {
 80049cc:	b150      	cbz	r0, 80049e4 <lv_obj_init_draw_img_dsc+0x8c>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR));
 80049ce:	2247      	movs	r2, #71	; 0x47
 80049d0:	4631      	mov	r1, r6
 80049d2:	4628      	mov	r0, r5
 80049d4:	f002 fd5a 	bl	800748c <lv_obj_get_style_prop>
 80049d8:	4631      	mov	r1, r6
 80049da:	4602      	mov	r2, r0
 80049dc:	4628      	mov	r0, r5
 80049de:	f003 f9cd 	bl	8007d7c <_lv_obj_style_apply_color_filter>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
 80049e2:	7220      	strb	r0, [r4, #8]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80049e4:	2e00      	cmp	r6, #0
 80049e6:	d0cb      	beq.n	8004980 <lv_obj_init_draw_img_dsc+0x28>
 80049e8:	4631      	mov	r1, r6
 80049ea:	4628      	mov	r0, r5
 80049ec:	f7ff fe01 	bl	80045f2 <lv_obj_get_style_blend_mode>
 80049f0:	7ae3      	ldrb	r3, [r4, #11]
 80049f2:	f360 0303 	bfi	r3, r0, #0, #4
 80049f6:	72e3      	strb	r3, [r4, #11]
 80049f8:	e7c2      	b.n	8004980 <lv_obj_init_draw_img_dsc+0x28>

080049fa <lv_obj_init_draw_arc_dsc>:
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}

void lv_obj_init_draw_arc_dsc(lv_obj_t * obj, uint32_t part, lv_draw_arc_dsc_t * draw_dsc)
{
 80049fa:	b570      	push	{r4, r5, r6, lr}
 80049fc:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80049fe:	2250      	movs	r2, #80	; 0x50
 8004a00:	4606      	mov	r6, r0
 8004a02:	460d      	mov	r5, r1
 8004a04:	f002 fd42 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004a08:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_arc_width(obj, part);
 8004a0a:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 8004a0c:	b188      	cbz	r0, 8004a32 <lv_obj_init_draw_arc_dsc+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_OPA);
 8004a0e:	2253      	movs	r2, #83	; 0x53
 8004a10:	4629      	mov	r1, r5
 8004a12:	4630      	mov	r0, r6
 8004a14:	f002 fd3a 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004a18:	b2c0      	uxtb	r0, r0

    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004a1a:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
 8004a1c:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004a1e:	d908      	bls.n	8004a32 <lv_obj_init_draw_arc_dsc+0x38>

    if(part != LV_PART_MAIN) {
 8004a20:	b17d      	cbz	r5, 8004a42 <lv_obj_init_draw_arc_dsc+0x48>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8004a22:	4629      	mov	r1, r5
 8004a24:	4630      	mov	r0, r6
 8004a26:	f7ff fdde 	bl	80045e6 <lv_obj_get_style_opa>
        if(opa <= LV_OPA_MIN) {
 8004a2a:	2802      	cmp	r0, #2
 8004a2c:	d802      	bhi.n	8004a34 <lv_obj_init_draw_arc_dsc+0x3a>
            draw_dsc->opa = LV_OPA_TRANSP;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	7323      	strb	r3, [r4, #12]
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
        if(opa < LV_OPA_MAX) {
 8004a34:	28fc      	cmp	r0, #252	; 0xfc
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8004a36:	bf9f      	itttt	ls
 8004a38:	7b23      	ldrbls	r3, [r4, #12]
 8004a3a:	fb13 f000 	smulbbls	r0, r3, r0
 8004a3e:	1200      	asrls	r0, r0, #8
 8004a40:	7320      	strbls	r0, [r4, #12]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_COLOR));
 8004a42:	2252      	movs	r2, #82	; 0x52
 8004a44:	4629      	mov	r1, r5
 8004a46:	4630      	mov	r0, r6
 8004a48:	f002 fd20 	bl	800748c <lv_obj_get_style_prop>
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	4602      	mov	r2, r0
 8004a50:	4630      	mov	r0, r6
 8004a52:	f003 f993 	bl	8007d7c <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_IMG_SRC);
 8004a56:	2254      	movs	r2, #84	; 0x54
    draw_dsc->color = lv_obj_get_style_arc_color_filtered(obj, part);
 8004a58:	7020      	strb	r0, [r4, #0]
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f002 fd15 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8004a62:	2251      	movs	r2, #81	; 0x51
    draw_dsc->img_src = lv_obj_get_style_arc_img_src(obj, part);
 8004a64:	60a0      	str	r0, [r4, #8]
 8004a66:	4629      	mov	r1, r5
 8004a68:	4630      	mov	r0, r6
 8004a6a:	f002 fd0f 	bl	800748c <lv_obj_get_style_prop>
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 8004a6e:	7b63      	ldrb	r3, [r4, #13]
    return (bool)v.num;
 8004a70:	3800      	subs	r0, #0
 8004a72:	bf18      	it	ne
 8004a74:	2001      	movne	r0, #1
 8004a76:	f360 0382 	bfi	r3, r0, #2, #1
 8004a7a:	7363      	strb	r3, [r4, #13]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004a7c:	2d00      	cmp	r5, #0
 8004a7e:	d0d8      	beq.n	8004a32 <lv_obj_init_draw_arc_dsc+0x38>
 8004a80:	4629      	mov	r1, r5
 8004a82:	4630      	mov	r0, r6
 8004a84:	f7ff fdb5 	bl	80045f2 <lv_obj_get_style_blend_mode>
 8004a88:	7b63      	ldrb	r3, [r4, #13]
 8004a8a:	f360 0301 	bfi	r3, r0, #0, #2
 8004a8e:	7363      	strb	r3, [r4, #13]
 8004a90:	e7cf      	b.n	8004a32 <lv_obj_init_draw_arc_dsc+0x38>

08004a92 <lv_obj_calculate_ext_draw_size>:

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 8004a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8004a94:	2240      	movs	r2, #64	; 0x40
 8004a96:	4605      	mov	r5, r0
 8004a98:	460e      	mov	r6, r1
 8004a9a:	f002 fcf7 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004a9e:	b207      	sxth	r7, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 8004aa0:	bb7f      	cbnz	r7, 8004b02 <lv_obj_calculate_ext_draw_size+0x70>
    lv_coord_t s = 0;
 8004aa2:	2400      	movs	r4, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8004aa4:	2235      	movs	r2, #53	; 0x35
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f002 fcef 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004aae:	b207      	sxth	r7, r0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 8004ab0:	b197      	cbz	r7, 8004ad8 <lv_obj_calculate_ext_draw_size+0x46>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8004ab2:	2237      	movs	r2, #55	; 0x37
 8004ab4:	4631      	mov	r1, r6
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f002 fce8 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004abc:	b2c0      	uxtb	r0, r0
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
        if(outline_opa > LV_OPA_MIN) {
 8004abe:	2802      	cmp	r0, #2
 8004ac0:	d90a      	bls.n	8004ad8 <lv_obj_calculate_ext_draw_size+0x46>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8004ac2:	2238      	movs	r2, #56	; 0x38
 8004ac4:	4631      	mov	r1, r6
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f002 fce0 	bl	800748c <lv_obj_get_style_prop>
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
            s = LV_MAX(s, outline_pad + outline_width);
 8004acc:	fa07 f080 	sxtah	r0, r7, r0
 8004ad0:	4284      	cmp	r4, r0
 8004ad2:	bfb8      	it	lt
 8004ad4:	4604      	movlt	r4, r0
 8004ad6:	b224      	sxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8004ad8:	4631      	mov	r1, r6
 8004ada:	2268      	movs	r2, #104	; 0x68
 8004adc:	4628      	mov	r0, r5
 8004ade:	f002 fcd5 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004ae2:	2269      	movs	r2, #105	; 0x69
    return (lv_coord_t)v.num;
 8004ae4:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f002 fccf 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004aee:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 8004af0:	42b8      	cmp	r0, r7
 8004af2:	bfb8      	it	lt
 8004af4:	4638      	movlt	r0, r7
    if(wh > 0) s += wh;
 8004af6:	2800      	cmp	r0, #0
 8004af8:	bfc4      	itt	gt
 8004afa:	1824      	addgt	r4, r4, r0
 8004afc:	b224      	sxthgt	r4, r4

    return s;
}
 8004afe:	4620      	mov	r0, r4
 8004b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8004b02:	2245      	movs	r2, #69	; 0x45
 8004b04:	4631      	mov	r1, r6
 8004b06:	4628      	mov	r0, r5
 8004b08:	f002 fcc0 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004b0c:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 8004b0e:	2802      	cmp	r0, #2
 8004b10:	d9c7      	bls.n	8004aa2 <lv_obj_calculate_ext_draw_size+0x10>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8004b12:	2243      	movs	r2, #67	; 0x43
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	f002 fcb8 	bl	800748c <lv_obj_get_style_prop>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 8004b1c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8004b20:	3001      	adds	r0, #1
 8004b22:	eb00 0767 	add.w	r7, r0, r7, asr #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8004b26:	2241      	movs	r2, #65	; 0x41
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f002 fcae 	bl	800748c <lv_obj_get_style_prop>
 8004b30:	b2bc      	uxth	r4, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8004b32:	2242      	movs	r2, #66	; 0x42
    return (lv_coord_t)v.num;
 8004b34:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8004b36:	4631      	mov	r1, r6
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f002 fca7 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004b3e:	b203      	sxth	r3, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bfb8      	it	lt
 8004b44:	425b      	neglt	r3, r3
 8004b46:	2f00      	cmp	r7, #0
 8004b48:	bfb8      	it	lt
 8004b4a:	427f      	neglt	r7, r7
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	b2bf      	uxth	r7, r7
 8004b50:	42bb      	cmp	r3, r7
 8004b52:	bf2c      	ite	cs
 8004b54:	18e4      	addcs	r4, r4, r3
 8004b56:	19e4      	addcc	r4, r4, r7
            s = LV_MAX(s, sh_width);
 8004b58:	b224      	sxth	r4, r4
 8004b5a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004b5e:	e7a1      	b.n	8004aa4 <lv_obj_calculate_ext_draw_size+0x12>

08004b60 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4604      	mov	r4, r0
 8004b64:	460d      	mov	r5, r1
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 8004b66:	2148      	movs	r1, #72	; 0x48
 8004b68:	f00e fdc7 	bl	80136fa <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 8004b6c:	6025      	str	r5, [r4, #0]
}
 8004b6e:	bd38      	pop	{r3, r4, r5, pc}

08004b70 <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8004b70:	6880      	ldr	r0, [r0, #8]
 8004b72:	b108      	cbz	r0, 8004b78 <_lv_obj_get_ext_draw_size+0x8>
 8004b74:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
    else return 0;
}
 8004b78:	4770      	bx	lr

08004b7a <lv_obj_refresh_ext_draw_size>:
{
 8004b7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b7c:	4604      	mov	r4, r0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8004b7e:	f7ff fff7 	bl	8004b70 <_lv_obj_get_ext_draw_size>
    lv_coord_t s_new = 0;
 8004b82:	2300      	movs	r3, #0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8004b84:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8004b86:	f10d 0206 	add.w	r2, sp, #6
 8004b8a:	2113      	movs	r1, #19
 8004b8c:	4620      	mov	r0, r4
    lv_coord_t s_new = 0;
 8004b8e:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8004b92:	f7fe fb3b 	bl	800320c <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 8004b96:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8004b9a:	42ab      	cmp	r3, r5
 8004b9c:	d002      	beq.n	8004ba4 <lv_obj_refresh_ext_draw_size+0x2a>
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f000 fbe2 	bl	8005368 <lv_obj_invalidate>
    if(obj->spec_attr) {
 8004ba4:	68a2      	ldr	r2, [r4, #8]
        obj->spec_attr->ext_draw_size = s_new;
 8004ba6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    if(obj->spec_attr) {
 8004baa:	b14a      	cbz	r2, 8004bc0 <lv_obj_refresh_ext_draw_size+0x46>
        obj->spec_attr->ext_draw_size = s_new;
 8004bac:	82d3      	strh	r3, [r2, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 8004bae:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8004bb2:	42ab      	cmp	r3, r5
 8004bb4:	d002      	beq.n	8004bbc <lv_obj_refresh_ext_draw_size+0x42>
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f000 fbd6 	bl	8005368 <lv_obj_invalidate>
}
 8004bbc:	b003      	add	sp, #12
 8004bbe:	bd30      	pop	{r4, r5, pc}
    else if(s_new != 0) {
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f4      	beq.n	8004bae <lv_obj_refresh_ext_draw_size+0x34>
        lv_obj_allocate_spec_attr(obj);
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f7ff fc13 	bl	80043f0 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 8004bca:	68a3      	ldr	r3, [r4, #8]
 8004bcc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004bd0:	82da      	strh	r2, [r3, #22]
 8004bd2:	e7ec      	b.n	8004bae <lv_obj_refresh_ext_draw_size+0x34>

08004bd4 <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 8004bd4:	6880      	ldr	r0, [r0, #8]
 8004bd6:	b108      	cbz	r0, 8004bdc <_lv_obj_get_layer_type+0x8>
 8004bd8:	7e80      	ldrb	r0, [r0, #26]
 8004bda:	0980      	lsrs	r0, r0, #6
    else return LV_LAYER_TYPE_NONE;
}
 8004bdc:	4770      	bx	lr

08004bde <lv_obj_get_style_base_dir.constprop.0>:
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
 8004bde:	b508      	push	{r3, lr}
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8004be0:	2216      	movs	r2, #22
 8004be2:	2100      	movs	r1, #0
 8004be4:	f002 fc52 	bl	800748c <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
}
 8004be8:	b2c0      	uxtb	r0, r0
 8004bea:	bd08      	pop	{r3, pc}

08004bec <lv_obj_get_style_border_width.constprop.0>:
static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 8004bec:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004bee:	2232      	movs	r2, #50	; 0x32
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	f002 fc4b 	bl	800748c <lv_obj_get_style_prop>
}
 8004bf6:	b200      	sxth	r0, r0
 8004bf8:	bd08      	pop	{r3, pc}

08004bfa <lv_obj_get_style_pad_right.constprop.0>:
static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
 8004bfa:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004bfc:	2213      	movs	r2, #19
 8004bfe:	2100      	movs	r1, #0
 8004c00:	f002 fc44 	bl	800748c <lv_obj_get_style_prop>
}
 8004c04:	b200      	sxth	r0, r0
 8004c06:	bd08      	pop	{r3, pc}

08004c08 <lv_obj_get_style_pad_left.constprop.0>:
static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
 8004c08:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004c0a:	2212      	movs	r2, #18
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	f002 fc3d 	bl	800748c <lv_obj_get_style_prop>
}
 8004c12:	b200      	sxth	r0, r0
 8004c14:	bd08      	pop	{r3, pc}

08004c16 <lv_obj_get_style_pad_bottom.constprop.0>:
static inline lv_coord_t lv_obj_get_style_pad_bottom(const struct _lv_obj_t * obj, uint32_t part)
 8004c16:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004c18:	2211      	movs	r2, #17
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	f002 fc36 	bl	800748c <lv_obj_get_style_prop>
}
 8004c20:	b200      	sxth	r0, r0
 8004c22:	bd08      	pop	{r3, pc}

08004c24 <lv_obj_get_style_pad_top.constprop.0>:
static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
 8004c24:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004c26:	2210      	movs	r2, #16
 8004c28:	2100      	movs	r1, #0
 8004c2a:	f002 fc2f 	bl	800748c <lv_obj_get_style_prop>
}
 8004c2e:	b200      	sxth	r0, r0
 8004c30:	bd08      	pop	{r3, pc}

08004c32 <transform_point>:
        }
    }
}

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 8004c32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c36:	460f      	mov	r7, r1
 8004c38:	4691      	mov	r9, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	226d      	movs	r2, #109	; 0x6d
 8004c3e:	4604      	mov	r4, r0
 8004c40:	f002 fc24 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8004c44:	226c      	movs	r2, #108	; 0x6c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8004c46:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8004c48:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f002 fc1c 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004c54:	b205      	sxth	r5, r0
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 8004c56:	f1b8 0f00 	cmp.w	r8, #0
 8004c5a:	d102      	bne.n	8004c62 <transform_point+0x30>
 8004c5c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004c60:	d065      	beq.n	8004d2e <transform_point+0xfc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 8004c62:	226e      	movs	r2, #110	; 0x6e
 8004c64:	2100      	movs	r1, #0
 8004c66:	4620      	mov	r0, r4
 8004c68:	f002 fc10 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 8004c6c:	226f      	movs	r2, #111	; 0x6f

    lv_point_t pivot = {
 8004c6e:	f8ad 0004 	strh.w	r0, [sp, #4]
 8004c72:	2100      	movs	r1, #0
 8004c74:	4620      	mov	r0, r4
 8004c76:	f002 fc09 	bl	800748c <lv_obj_get_style_prop>
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 8004c7a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8004c7e:	f402 41c0 	and.w	r1, r2, #24576	; 0x6000
    return (lv_coord_t)v.num;
 8004c82:	b203      	sxth	r3, r0
 8004c84:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    lv_point_t pivot = {
 8004c88:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(LV_COORD_IS_PCT(pivot.x)) {
 8004c8c:	d117      	bne.n	8004cbe <transform_point+0x8c>
 8004c8e:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004c92:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8004c96:	dc12      	bgt.n	8004cbe <transform_point+0x8c>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 8004c98:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	bfc8      	it	gt
 8004ca0:	f5c2 717a 	rsbgt	r1, r2, #1000	; 0x3e8
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004ca4:	8b22      	ldrh	r2, [r4, #24]
 8004ca6:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 8004caa:	3201      	adds	r2, #1
 8004cac:	eba2 020c 	sub.w	r2, r2, ip
 8004cb0:	b212      	sxth	r2, r2
 8004cb2:	434a      	muls	r2, r1
 8004cb4:	2164      	movs	r1, #100	; 0x64
 8004cb6:	fb92 f2f1 	sdiv	r2, r2, r1
 8004cba:	f8ad 2004 	strh.w	r2, [sp, #4]
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 8004cbe:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8004cc2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004cc6:	d115      	bne.n	8004cf4 <transform_point+0xc2>
 8004cc8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8004ccc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004cd0:	dc10      	bgt.n	8004cf4 <transform_point+0xc2>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 8004cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	bfc8      	it	gt
 8004cda:	f5c3 727a 	rsbgt	r2, r3, #1000	; 0x3e8
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004cde:	8b63      	ldrh	r3, [r4, #26]
 8004ce0:	8ae1      	ldrh	r1, [r4, #22]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	1a5b      	subs	r3, r3, r1
 8004ce6:	b21b      	sxth	r3, r3
 8004ce8:	4353      	muls	r3, r2
 8004cea:	2264      	movs	r2, #100	; 0x64
 8004cec:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cf0:	f8ad 3006 	strh.w	r3, [sp, #6]
    }

    pivot.x = obj->coords.x1 + pivot.x;
 8004cf4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004cf8:	8aa3      	ldrh	r3, [r4, #20]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f8ad 3004 	strh.w	r3, [sp, #4]
    pivot.y = obj->coords.y1 + pivot.y;
 8004d00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004d04:	8ae3      	ldrh	r3, [r4, #22]
 8004d06:	4413      	add	r3, r2
 8004d08:	f8ad 3006 	strh.w	r3, [sp, #6]

    if(inv) {
 8004d0c:	f1b9 0f00 	cmp.w	r9, #0
 8004d10:	d007      	beq.n	8004d22 <transform_point+0xf0>
        angle = -angle;
 8004d12:	4276      	negs	r6, r6
        zoom = (256 * 256) / zoom;
 8004d14:	f44f 3080 	mov.w	r0, #65536	; 0x10000
        angle = -angle;
 8004d18:	fa0f f886 	sxth.w	r8, r6
        zoom = (256 * 256) / zoom;
 8004d1c:	fb90 f5f5 	sdiv	r5, r0, r5
 8004d20:	b22d      	sxth	r5, r5
    }

    lv_point_transform(p, angle, zoom, &pivot);
 8004d22:	ab01      	add	r3, sp, #4
 8004d24:	462a      	mov	r2, r5
 8004d26:	4641      	mov	r1, r8
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f00d ff3b 	bl	8012ba4 <lv_point_transform>
}
 8004d2e:	b003      	add	sp, #12
 8004d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004d34 <lv_obj_set_x>:
{
 8004d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8004d36:	2300      	movs	r3, #0
{
 8004d38:	460c      	mov	r4, r1
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8004d3a:	aa01      	add	r2, sp, #4
 8004d3c:	2107      	movs	r1, #7
{
 8004d3e:	4605      	mov	r5, r0
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8004d40:	f002 ff36 	bl	8007bb0 <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8004d44:	2801      	cmp	r0, #1
 8004d46:	d104      	bne.n	8004d52 <lv_obj_set_x+0x1e>
 8004d48:	9b01      	ldr	r3, [sp, #4]
 8004d4a:	42a3      	cmp	r3, r4
 8004d4c:	d103      	bne.n	8004d56 <lv_obj_set_x+0x22>
}
 8004d4e:	b003      	add	sp, #12
 8004d50:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8004d52:	2800      	cmp	r0, #0
 8004d54:	d1fb      	bne.n	8004d4e <lv_obj_set_x+0x1a>
        lv_obj_set_style_x(obj, x, 0);
 8004d56:	2200      	movs	r2, #0
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f003 f950 	bl	8008000 <lv_obj_set_style_x>
}
 8004d60:	e7f5      	b.n	8004d4e <lv_obj_set_x+0x1a>

08004d62 <lv_obj_set_y>:
{
 8004d62:	b537      	push	{r0, r1, r2, r4, r5, lr}
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8004d64:	2300      	movs	r3, #0
{
 8004d66:	460c      	mov	r4, r1
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8004d68:	aa01      	add	r2, sp, #4
 8004d6a:	2108      	movs	r1, #8
{
 8004d6c:	4605      	mov	r5, r0
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8004d6e:	f002 ff1f 	bl	8007bb0 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8004d72:	2801      	cmp	r0, #1
 8004d74:	d104      	bne.n	8004d80 <lv_obj_set_y+0x1e>
 8004d76:	9b01      	ldr	r3, [sp, #4]
 8004d78:	42a3      	cmp	r3, r4
 8004d7a:	d103      	bne.n	8004d84 <lv_obj_set_y+0x22>
}
 8004d7c:	b003      	add	sp, #12
 8004d7e:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d1fb      	bne.n	8004d7c <lv_obj_set_y+0x1a>
        lv_obj_set_style_y(obj, y, 0);
 8004d84:	2200      	movs	r2, #0
 8004d86:	4621      	mov	r1, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f003 f93e 	bl	800800a <lv_obj_set_style_y>
}
 8004d8e:	e7f5      	b.n	8004d7c <lv_obj_set_y+0x1a>

08004d90 <lv_obj_set_pos>:
{
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4604      	mov	r4, r0
 8004d94:	4615      	mov	r5, r2
    lv_obj_set_x(obj, x);
 8004d96:	f7ff ffcd 	bl	8004d34 <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	4620      	mov	r0, r4
}
 8004d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_y(obj, y);
 8004da2:	f7ff bfde 	b.w	8004d62 <lv_obj_set_y>

08004da6 <lv_obj_set_width>:
{
 8004da6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8004da8:	2300      	movs	r3, #0
{
 8004daa:	460c      	mov	r4, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8004dac:	aa01      	add	r2, sp, #4
 8004dae:	2101      	movs	r1, #1
{
 8004db0:	4605      	mov	r5, r0
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8004db2:	f002 fefd 	bl	8007bb0 <lv_obj_get_local_style_prop>
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8004db6:	2801      	cmp	r0, #1
 8004db8:	d104      	bne.n	8004dc4 <lv_obj_set_width+0x1e>
 8004dba:	9b01      	ldr	r3, [sp, #4]
 8004dbc:	42a3      	cmp	r3, r4
 8004dbe:	d103      	bne.n	8004dc8 <lv_obj_set_width+0x22>
}
 8004dc0:	b003      	add	sp, #12
 8004dc2:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d1fb      	bne.n	8004dc0 <lv_obj_set_width+0x1a>
        lv_obj_set_style_width(obj, w, 0);
 8004dc8:	2200      	movs	r2, #0
 8004dca:	4621      	mov	r1, r4
 8004dcc:	4628      	mov	r0, r5
 8004dce:	f003 f908 	bl	8007fe2 <lv_obj_set_style_width>
}
 8004dd2:	e7f5      	b.n	8004dc0 <lv_obj_set_width+0x1a>

08004dd4 <lv_obj_set_height>:
{
 8004dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8004dd6:	2300      	movs	r3, #0
{
 8004dd8:	460c      	mov	r4, r1
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8004dda:	aa01      	add	r2, sp, #4
 8004ddc:	2104      	movs	r1, #4
{
 8004dde:	4605      	mov	r5, r0
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8004de0:	f002 fee6 	bl	8007bb0 <lv_obj_get_local_style_prop>
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8004de4:	2801      	cmp	r0, #1
 8004de6:	d104      	bne.n	8004df2 <lv_obj_set_height+0x1e>
 8004de8:	9b01      	ldr	r3, [sp, #4]
 8004dea:	42a3      	cmp	r3, r4
 8004dec:	d103      	bne.n	8004df6 <lv_obj_set_height+0x22>
}
 8004dee:	b003      	add	sp, #12
 8004df0:	bd30      	pop	{r4, r5, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d1fb      	bne.n	8004dee <lv_obj_set_height+0x1a>
        lv_obj_set_style_height(obj, h, 0);
 8004df6:	2200      	movs	r2, #0
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f003 f8fb 	bl	8007ff6 <lv_obj_set_style_height>
}
 8004e00:	e7f5      	b.n	8004dee <lv_obj_set_height+0x1a>

08004e02 <lv_obj_set_size>:
{
 8004e02:	b538      	push	{r3, r4, r5, lr}
 8004e04:	4604      	mov	r4, r0
 8004e06:	4615      	mov	r5, r2
    lv_obj_set_width(obj, w);
 8004e08:	f7ff ffcd 	bl	8004da6 <lv_obj_set_width>
    lv_obj_set_height(obj, h);
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	4620      	mov	r0, r4
}
 8004e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_height(obj, h);
 8004e14:	f7ff bfde 	b.w	8004dd4 <lv_obj_set_height>

08004e18 <lv_obj_is_layout_positioned>:
{
 8004e18:	b538      	push	{r3, r4, r5, lr}
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8004e1a:	490b      	ldr	r1, [pc, #44]	; (8004e48 <lv_obj_is_layout_positioned+0x30>)
{
 8004e1c:	4605      	mov	r5, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8004e1e:	f7ff f90b 	bl	8004038 <lv_obj_has_flag_any>
 8004e22:	4604      	mov	r4, r0
 8004e24:	b108      	cbz	r0, 8004e2a <lv_obj_is_layout_positioned+0x12>
 8004e26:	2000      	movs	r0, #0
}
 8004e28:	bd38      	pop	{r3, r4, r5, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f003 f91e 	bl	800806c <lv_obj_get_parent>
    if(parent == NULL) return false;
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d0f8      	beq.n	8004e26 <lv_obj_is_layout_positioned+0xe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004e34:	220a      	movs	r2, #10
 8004e36:	4621      	mov	r1, r4
 8004e38:	f002 fb28 	bl	800748c <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8004e3c:	b280      	uxth	r0, r0
    if(layout) return true;
 8004e3e:	3800      	subs	r0, #0
 8004e40:	bf18      	it	ne
 8004e42:	2001      	movne	r0, #1
 8004e44:	e7f0      	b.n	8004e28 <lv_obj_is_layout_positioned+0x10>
 8004e46:	bf00      	nop
 8004e48:	00060001 	.word	0x00060001

08004e4c <lv_obj_mark_layout_as_dirty>:
    obj->layout_inv = 1;
 8004e4c:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8004e50:	f042 0201 	orr.w	r2, r2, #1
{
 8004e54:	b508      	push	{r3, lr}
    obj->layout_inv = 1;
 8004e56:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8004e5a:	f003 f8e0 	bl	800801e <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 8004e5e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8004e62:	f042 0202 	orr.w	r2, r2, #2
 8004e66:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8004e6a:	f003 f8df 	bl	800802c <lv_obj_get_disp>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8004e6e:	6840      	ldr	r0, [r0, #4]
 8004e70:	b118      	cbz	r0, 8004e7a <lv_obj_mark_layout_as_dirty+0x2e>
}
 8004e72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8004e76:	f00f bc74 	b.w	8014762 <lv_timer_resume>
}
 8004e7a:	bd08      	pop	{r3, pc}

08004e7c <lv_layout_register>:
{
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    layout_cnt++;
 8004e7e:	4e0c      	ldr	r6, [pc, #48]	; (8004eb0 <lv_layout_register+0x34>)
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004e80:	4f0c      	ldr	r7, [pc, #48]	; (8004eb4 <lv_layout_register+0x38>)
    layout_cnt++;
 8004e82:	6833      	ldr	r3, [r6, #0]
 8004e84:	3301      	adds	r3, #1
{
 8004e86:	4605      	mov	r5, r0
 8004e88:	460c      	mov	r4, r1
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004e8a:	6838      	ldr	r0, [r7, #0]
    layout_cnt++;
 8004e8c:	6033      	str	r3, [r6, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004e8e:	00d9      	lsls	r1, r3, #3
 8004e90:	f00e fa80 	bl	8013394 <lv_mem_realloc>
 8004e94:	4603      	mov	r3, r0
 8004e96:	6038      	str	r0, [r7, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 8004e98:	b900      	cbnz	r0, 8004e9c <lv_layout_register+0x20>
 8004e9a:	e7fe      	b.n	8004e9a <lv_layout_register+0x1e>
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
 8004e9c:	6830      	ldr	r0, [r6, #0]
 8004e9e:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8004ea2:	3a01      	subs	r2, #1
 8004ea4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8004ea8:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
 8004eac:	604c      	str	r4, [r1, #4]
}
 8004eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb0:	20000b54 	.word	0x20000b54
 8004eb4:	20000e34 	.word	0x20000e34

08004eb8 <lv_obj_align>:
{
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4615      	mov	r5, r2
 8004ebe:	461e      	mov	r6, r3
    lv_obj_set_style_align(obj, align, 0);
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f003 f8a7 	bl	8008014 <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 8004ec6:	4632      	mov	r2, r6
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4620      	mov	r0, r4
}
 8004ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 8004ed0:	f7ff bf5e 	b.w	8004d90 <lv_obj_set_pos>

08004ed4 <lv_obj_get_coords>:
    dest->x1 = src->x1;
 8004ed4:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8004ed8:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 8004eda:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 8004ede:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 8004ee0:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8004ee4:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 8004ee6:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8004eea:	80cb      	strh	r3, [r1, #6]
}
 8004eec:	4770      	bx	lr

08004eee <lv_obj_get_y>:
{
 8004eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef0:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004ef2:	f003 f8bb 	bl	800806c <lv_obj_get_parent>
    if(parent) {
 8004ef6:	4607      	mov	r7, r0
 8004ef8:	b190      	cbz	r0, 8004f20 <lv_obj_get_y+0x32>
        rel_y = obj->coords.y1 - parent->coords.y1;
 8004efa:	8ae6      	ldrh	r6, [r4, #22]
 8004efc:	8ac5      	ldrh	r5, [r0, #22]
        rel_y += lv_obj_get_scroll_y(parent);
 8004efe:	f001 f98e 	bl	800621e <lv_obj_get_scroll_y>
        rel_y = obj->coords.y1 - parent->coords.y1;
 8004f02:	1b76      	subs	r6, r6, r5
 8004f04:	b2b6      	uxth	r6, r6
        rel_y += lv_obj_get_scroll_y(parent);
 8004f06:	1835      	adds	r5, r6, r0
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004f08:	4638      	mov	r0, r7
 8004f0a:	f7ff fe8b 	bl	8004c24 <lv_obj_get_style_pad_top.constprop.0>
        rel_y += lv_obj_get_scroll_y(parent);
 8004f0e:	b2ad      	uxth	r5, r5
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004f10:	1a2c      	subs	r4, r5, r0
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004f12:	4638      	mov	r0, r7
 8004f14:	f7ff fe6a 	bl	8004bec <lv_obj_get_style_border_width.constprop.0>
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004f18:	b2a4      	uxth	r4, r4
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004f1a:	1a20      	subs	r0, r4, r0
 8004f1c:	b200      	sxth	r0, r0
}
 8004f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rel_y = obj->coords.y1;
 8004f20:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8004f24:	e7fb      	b.n	8004f1e <lv_obj_get_y+0x30>

08004f26 <lv_obj_get_y2>:
{
 8004f26:	b510      	push	{r4, lr}
 8004f28:	4604      	mov	r4, r0
    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 8004f2a:	f7ff ffe0 	bl	8004eee <lv_obj_get_y>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004f2e:	8b63      	ldrh	r3, [r4, #26]
 8004f30:	8ae2      	ldrh	r2, [r4, #22]
 8004f32:	3301      	adds	r3, #1
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	4418      	add	r0, r3
}
 8004f38:	b200      	sxth	r0, r0
 8004f3a:	bd10      	pop	{r4, pc}

08004f3c <lv_obj_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004f3c:	8b03      	ldrh	r3, [r0, #24]
 8004f3e:	8a80      	ldrh	r0, [r0, #20]
 8004f40:	3301      	adds	r3, #1
 8004f42:	1a18      	subs	r0, r3, r0
}
 8004f44:	b200      	sxth	r0, r0
 8004f46:	4770      	bx	lr

08004f48 <lv_obj_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004f48:	8b43      	ldrh	r3, [r0, #26]
 8004f4a:	8ac0      	ldrh	r0, [r0, #22]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	1a18      	subs	r0, r3, r0
}
 8004f50:	b200      	sxth	r0, r0
 8004f52:	4770      	bx	lr

08004f54 <lv_obj_get_content_width>:
{
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	4604      	mov	r4, r0
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8004f58:	f7ff fe56 	bl	8004c08 <lv_obj_get_style_pad_left.constprop.0>
 8004f5c:	4606      	mov	r6, r0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f7ff fe4b 	bl	8004bfa <lv_obj_get_style_pad_right.constprop.0>
 8004f64:	4605      	mov	r5, r0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004f66:	4620      	mov	r0, r4
 8004f68:	f7ff fe40 	bl	8004bec <lv_obj_get_style_border_width.constprop.0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004f6c:	8b21      	ldrh	r1, [r4, #24]
 8004f6e:	8aa2      	ldrh	r2, [r4, #20]
 8004f70:	3101      	adds	r1, #1
 8004f72:	1a89      	subs	r1, r1, r2
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8004f74:	1b8a      	subs	r2, r1, r6
 8004f76:	1b53      	subs	r3, r2, r5
 8004f78:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
}
 8004f7c:	b200      	sxth	r0, r0
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}

08004f80 <lv_obj_get_content_height>:
{
 8004f80:	b570      	push	{r4, r5, r6, lr}
 8004f82:	4604      	mov	r4, r0
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8004f84:	f7ff fe4e 	bl	8004c24 <lv_obj_get_style_pad_top.constprop.0>
 8004f88:	4606      	mov	r6, r0
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f7ff fe43 	bl	8004c16 <lv_obj_get_style_pad_bottom.constprop.0>
 8004f90:	4605      	mov	r5, r0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004f92:	4620      	mov	r0, r4
 8004f94:	f7ff fe2a 	bl	8004bec <lv_obj_get_style_border_width.constprop.0>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004f98:	8b61      	ldrh	r1, [r4, #26]
 8004f9a:	8ae2      	ldrh	r2, [r4, #22]
 8004f9c:	3101      	adds	r1, #1
 8004f9e:	1a89      	subs	r1, r1, r2
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8004fa0:	1b8a      	subs	r2, r1, r6
 8004fa2:	1b53      	subs	r3, r2, r5
 8004fa4:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
}
 8004fa8:	b200      	sxth	r0, r0
 8004faa:	bd70      	pop	{r4, r5, r6, pc}

08004fac <lv_obj_get_content_coords>:
{
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4605      	mov	r5, r0
 8004fb0:	460c      	mov	r4, r1
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004fb2:	f7ff fe1b 	bl	8004bec <lv_obj_get_style_border_width.constprop.0>
    dest->x1 = src->x1;
 8004fb6:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8004fba:	8023      	strh	r3, [r4, #0]
    dest->y1 = src->y1;
 8004fbc:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8004fc0:	8063      	strh	r3, [r4, #2]
    lv_area_increase(area, -border_width, -border_width);
 8004fc2:	4240      	negs	r0, r0
    dest->x2 = src->x2;
 8004fc4:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8004fc8:	80a3      	strh	r3, [r4, #4]
 8004fca:	b202      	sxth	r2, r0
    dest->y2 = src->y2;
 8004fcc:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8004fd0:	80e3      	strh	r3, [r4, #6]
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f00d fc2e 	bl	8012836 <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f7ff fe14 	bl	8004c08 <lv_obj_get_style_pad_left.constprop.0>
 8004fe0:	8823      	ldrh	r3, [r4, #0]
 8004fe2:	4418      	add	r0, r3
 8004fe4:	8020      	strh	r0, [r4, #0]
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f7ff fe07 	bl	8004bfa <lv_obj_get_style_pad_right.constprop.0>
 8004fec:	88a3      	ldrh	r3, [r4, #4]
 8004fee:	1a18      	subs	r0, r3, r0
 8004ff0:	80a0      	strh	r0, [r4, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	f7ff fe16 	bl	8004c24 <lv_obj_get_style_pad_top.constprop.0>
 8004ff8:	8863      	ldrh	r3, [r4, #2]
 8004ffa:	4418      	add	r0, r3
 8004ffc:	8060      	strh	r0, [r4, #2]
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8004ffe:	4628      	mov	r0, r5
 8005000:	f7ff fe09 	bl	8004c16 <lv_obj_get_style_pad_bottom.constprop.0>
 8005004:	88e3      	ldrh	r3, [r4, #6]
 8005006:	1a18      	subs	r0, r3, r0
 8005008:	80e0      	strh	r0, [r4, #6]
}
 800500a:	bd38      	pop	{r3, r4, r5, pc}

0800500c <lv_obj_get_self_width>:
{
 800500c:	b507      	push	{r0, r1, r2, lr}
    lv_point_t p = {0, LV_COORD_MIN};
 800500e:	2300      	movs	r3, #0
 8005010:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8005014:	aa01      	add	r2, sp, #4
    lv_point_t p = {0, LV_COORD_MIN};
 8005016:	f24e 0301 	movw	r3, #57345	; 0xe001
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 800501a:	212c      	movs	r1, #44	; 0x2c
    lv_point_t p = {0, LV_COORD_MIN};
 800501c:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8005020:	f7fe f8f4 	bl	800320c <lv_event_send>
}
 8005024:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8005028:	b003      	add	sp, #12
 800502a:	f85d fb04 	ldr.w	pc, [sp], #4

0800502e <lv_obj_get_self_height>:
{
 800502e:	b507      	push	{r0, r1, r2, lr}
    lv_point_t p = {LV_COORD_MIN, 0};
 8005030:	f24e 0301 	movw	r3, #57345	; 0xe001
 8005034:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8005038:	aa01      	add	r2, sp, #4
    lv_point_t p = {LV_COORD_MIN, 0};
 800503a:	2300      	movs	r3, #0
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 800503c:	212c      	movs	r1, #44	; 0x2c
    lv_point_t p = {LV_COORD_MIN, 0};
 800503e:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8005042:	f7fe f8e3 	bl	800320c <lv_event_send>
}
 8005046:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 800504a:	b003      	add	sp, #12
 800504c:	f85d fb04 	ldr.w	pc, [sp], #4

08005050 <lv_obj_refresh_self_size>:
{
 8005050:	b538      	push	{r3, r4, r5, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8005052:	2201      	movs	r2, #1
 8005054:	2100      	movs	r1, #0
 8005056:	4604      	mov	r4, r0
 8005058:	f002 fa18 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800505c:	2204      	movs	r2, #4
    return (lv_coord_t)v.num;
 800505e:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8005060:	2100      	movs	r1, #0
 8005062:	4620      	mov	r0, r4
 8005064:	f002 fa12 	bl	800748c <lv_obj_get_style_prop>
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8005068:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800506c:	429d      	cmp	r5, r3
    return (lv_coord_t)v.num;
 800506e:	b200      	sxth	r0, r0
 8005070:	d001      	beq.n	8005076 <lv_obj_refresh_self_size+0x26>
 8005072:	4298      	cmp	r0, r3
 8005074:	d104      	bne.n	8005080 <lv_obj_refresh_self_size+0x30>
    lv_obj_mark_layout_as_dirty(obj);
 8005076:	4620      	mov	r0, r4
 8005078:	f7ff fee8 	bl	8004e4c <lv_obj_mark_layout_as_dirty>
    return true;
 800507c:	2001      	movs	r0, #1
}
 800507e:	bd38      	pop	{r3, r4, r5, pc}
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8005080:	2000      	movs	r0, #0
 8005082:	e7fc      	b.n	800507e <lv_obj_refresh_self_size+0x2e>

08005084 <lv_obj_move_children_by>:
{
 8005084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005088:	460e      	mov	r6, r1
 800508a:	4617      	mov	r7, r2
 800508c:	4680      	mov	r8, r0
 800508e:	9301      	str	r3, [sp, #4]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005090:	f002 fffe 	bl	8008090 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8005094:	2500      	movs	r5, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005096:	4681      	mov	r9, r0
        child->coords.x1 += x_diff;
 8005098:	fa1f fa86 	uxth.w	sl, r6
        child->coords.y1 += y_diff;
 800509c:	fa1f fb87 	uxth.w	fp, r7
    for(i = 0; i < child_cnt; i++) {
 80050a0:	454d      	cmp	r5, r9
 80050a2:	d102      	bne.n	80050aa <lv_obj_move_children_by+0x26>
}
 80050a4:	b003      	add	sp, #12
 80050a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_t * child = obj->spec_attr->children[i];
 80050aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 80050b4:	9b01      	ldr	r3, [sp, #4]
 80050b6:	b99b      	cbnz	r3, 80050e0 <lv_obj_move_children_by+0x5c>
        child->coords.x1 += x_diff;
 80050b8:	8aa3      	ldrh	r3, [r4, #20]
 80050ba:	4453      	add	r3, sl
 80050bc:	82a3      	strh	r3, [r4, #20]
        child->coords.y1 += y_diff;
 80050be:	8ae3      	ldrh	r3, [r4, #22]
 80050c0:	445b      	add	r3, fp
 80050c2:	82e3      	strh	r3, [r4, #22]
        child->coords.x2 += x_diff;
 80050c4:	8b23      	ldrh	r3, [r4, #24]
 80050c6:	4453      	add	r3, sl
 80050c8:	8323      	strh	r3, [r4, #24]
        child->coords.y2 += y_diff;
 80050ca:	8b63      	ldrh	r3, [r4, #26]
 80050cc:	445b      	add	r3, fp
 80050ce:	8363      	strh	r3, [r4, #26]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 80050d0:	463a      	mov	r2, r7
 80050d2:	2300      	movs	r3, #0
 80050d4:	4631      	mov	r1, r6
 80050d6:	4620      	mov	r0, r4
 80050d8:	f7ff ffd4 	bl	8005084 <lv_obj_move_children_by>
    for(i = 0; i < child_cnt; i++) {
 80050dc:	3501      	adds	r5, #1
 80050de:	e7df      	b.n	80050a0 <lv_obj_move_children_by+0x1c>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 80050e0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80050e4:	4620      	mov	r0, r4
 80050e6:	f7fe ffa0 	bl	800402a <lv_obj_has_flag>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d0e4      	beq.n	80050b8 <lv_obj_move_children_by+0x34>
 80050ee:	e7f5      	b.n	80050dc <lv_obj_move_children_by+0x58>

080050f0 <lv_obj_transform_point>:
{
 80050f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f4:	4604      	mov	r4, r0
 80050f6:	460d      	mov	r5, r1
 80050f8:	4616      	mov	r6, r2
 80050fa:	461f      	mov	r7, r3
    if(obj) {
 80050fc:	b324      	cbz	r4, 8005148 <lv_obj_transform_point+0x58>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80050fe:	4620      	mov	r0, r4
 8005100:	f7ff fd68 	bl	8004bd4 <_lv_obj_get_layer_type>
 8005104:	4680      	mov	r8, r0
        if(inv) {
 8005106:	b197      	cbz	r7, 800512e <lv_obj_transform_point+0x3e>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8005108:	b13e      	cbz	r6, 800511a <lv_obj_transform_point+0x2a>
 800510a:	4620      	mov	r0, r4
 800510c:	f002 ffae 	bl	800806c <lv_obj_get_parent>
 8005110:	2301      	movs	r3, #1
 8005112:	461a      	mov	r2, r3
 8005114:	4629      	mov	r1, r5
 8005116:	f7ff ffeb 	bl	80050f0 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 800511a:	f1b8 0f02 	cmp.w	r8, #2
 800511e:	d113      	bne.n	8005148 <lv_obj_transform_point+0x58>
 8005120:	4629      	mov	r1, r5
 8005122:	4620      	mov	r0, r4
 8005124:	2201      	movs	r2, #1
}
 8005126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            if(do_tranf) transform_point(obj, p, inv);
 800512a:	f7ff bd82 	b.w	8004c32 <transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 800512e:	2802      	cmp	r0, #2
 8005130:	d104      	bne.n	800513c <lv_obj_transform_point+0x4c>
 8005132:	463a      	mov	r2, r7
 8005134:	4629      	mov	r1, r5
 8005136:	4620      	mov	r0, r4
 8005138:	f7ff fd7b 	bl	8004c32 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800513c:	b126      	cbz	r6, 8005148 <lv_obj_transform_point+0x58>
 800513e:	4620      	mov	r0, r4
 8005140:	f002 ff94 	bl	800806c <lv_obj_get_parent>
 8005144:	4604      	mov	r4, r0
 8005146:	e7d9      	b.n	80050fc <lv_obj_transform_point+0xc>
}
 8005148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800514c <lv_obj_get_transformed_area>:
{
 800514c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800514e:	460c      	mov	r4, r1
 8005150:	b085      	sub	sp, #20
        {area->x1, area->y1},
 8005152:	f9b1 1000 	ldrsh.w	r1, [r1]
    lv_point_t p[4] = {
 8005156:	f8ad 1000 	strh.w	r1, [sp]
 800515a:	f8ad 1004 	strh.w	r1, [sp, #4]
        {area->x1, area->y2},
 800515e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
        {area->x1, area->y1},
 8005162:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
        {area->x2, area->y1},
 8005166:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
    lv_point_t p[4] = {
 800516a:	f8ad 1006 	strh.w	r1, [sp, #6]
{
 800516e:	4605      	mov	r5, r0
 8005170:	4616      	mov	r6, r2
 8005172:	461f      	mov	r7, r3
    lv_point_t p[4] = {
 8005174:	f8ad 100e 	strh.w	r1, [sp, #14]
    lv_obj_transform_point(obj, &p[0], recursive, inv);
 8005178:	4669      	mov	r1, sp
    lv_point_t p[4] = {
 800517a:	f8ad e002 	strh.w	lr, [sp, #2]
 800517e:	f8ad c008 	strh.w	ip, [sp, #8]
 8005182:	f8ad e00a 	strh.w	lr, [sp, #10]
 8005186:	f8ad c00c 	strh.w	ip, [sp, #12]
    lv_obj_transform_point(obj, &p[0], recursive, inv);
 800518a:	f7ff ffb1 	bl	80050f0 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 800518e:	463b      	mov	r3, r7
 8005190:	4632      	mov	r2, r6
 8005192:	a901      	add	r1, sp, #4
 8005194:	4628      	mov	r0, r5
 8005196:	f7ff ffab 	bl	80050f0 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 800519a:	463b      	mov	r3, r7
 800519c:	4632      	mov	r2, r6
 800519e:	a902      	add	r1, sp, #8
 80051a0:	4628      	mov	r0, r5
 80051a2:	f7ff ffa5 	bl	80050f0 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 80051a6:	463b      	mov	r3, r7
 80051a8:	4632      	mov	r2, r6
 80051aa:	a903      	add	r1, sp, #12
 80051ac:	4628      	mov	r0, r5
 80051ae:	f7ff ff9f 	bl	80050f0 <lv_obj_transform_point>
    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 80051b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80051b6:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 80051ba:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80051be:	f9bd 1000 	ldrsh.w	r1, [sp]
 80051c2:	42ab      	cmp	r3, r5
 80051c4:	461a      	mov	r2, r3
 80051c6:	bfa8      	it	ge
 80051c8:	462a      	movge	r2, r5
 80051ca:	4282      	cmp	r2, r0
 80051cc:	bfa8      	it	ge
 80051ce:	4602      	movge	r2, r0
 80051d0:	428a      	cmp	r2, r1
 80051d2:	bfa8      	it	ge
 80051d4:	460a      	movge	r2, r1
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 80051d6:	42ab      	cmp	r3, r5
 80051d8:	bfb8      	it	lt
 80051da:	462b      	movlt	r3, r5
 80051dc:	4283      	cmp	r3, r0
 80051de:	bfb8      	it	lt
 80051e0:	4603      	movlt	r3, r0
 80051e2:	428b      	cmp	r3, r1
 80051e4:	bfb8      	it	lt
 80051e6:	460b      	movlt	r3, r1
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 80051e8:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 80051ec:	80a3      	strh	r3, [r4, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 80051ee:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80051f2:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 80051f6:	8022      	strh	r2, [r4, #0]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 80051f8:	42ab      	cmp	r3, r5
 80051fa:	461a      	mov	r2, r3
 80051fc:	bfa8      	it	ge
 80051fe:	462a      	movge	r2, r5
 8005200:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8005204:	4282      	cmp	r2, r0
 8005206:	bfa8      	it	ge
 8005208:	4602      	movge	r2, r0
 800520a:	428a      	cmp	r2, r1
 800520c:	bfa8      	it	ge
 800520e:	460a      	movge	r2, r1
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 8005210:	42ab      	cmp	r3, r5
 8005212:	bfb8      	it	lt
 8005214:	462b      	movlt	r3, r5
 8005216:	4283      	cmp	r3, r0
 8005218:	bfb8      	it	lt
 800521a:	4603      	movlt	r3, r0
 800521c:	428b      	cmp	r3, r1
 800521e:	bfb8      	it	lt
 8005220:	460b      	movlt	r3, r1
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 8005222:	8062      	strh	r2, [r4, #2]
    lv_area_increase(area, 5, 5);
 8005224:	2205      	movs	r2, #5
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 8005226:	80e3      	strh	r3, [r4, #6]
    lv_area_increase(area, 5, 5);
 8005228:	4611      	mov	r1, r2
 800522a:	4620      	mov	r0, r4
 800522c:	f00d fb03 	bl	8012836 <lv_area_increase>
}
 8005230:	b005      	add	sp, #20
 8005232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005234 <lv_obj_area_is_visible>:
{
 8005234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005236:	460d      	mov	r5, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8005238:	2101      	movs	r1, #1
{
 800523a:	4604      	mov	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 800523c:	f7fe fef5 	bl	800402a <lv_obj_has_flag>
 8005240:	b110      	cbz	r0, 8005248 <lv_obj_area_is_visible+0x14>
 8005242:	2000      	movs	r0, #0
}
 8005244:	b003      	add	sp, #12
 8005246:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8005248:	4620      	mov	r0, r4
 800524a:	f002 fee8 	bl	800801e <lv_obj_get_screen>
 800524e:	4606      	mov	r6, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8005250:	f002 feec 	bl	800802c <lv_obj_get_disp>
 8005254:	4607      	mov	r7, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8005256:	f7fd feb4 	bl	8002fc2 <lv_disp_get_scr_act>
 800525a:	4286      	cmp	r6, r0
 800525c:	d131      	bne.n	80052c2 <lv_obj_area_is_visible+0x8e>
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800525e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005262:	4620      	mov	r0, r4
 8005264:	f7fe fee8 	bl	8004038 <lv_obj_has_flag_any>
 8005268:	b9e8      	cbnz	r0, 80052a6 <lv_obj_area_is_visible+0x72>
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800526a:	4620      	mov	r0, r4
 800526c:	f7ff fc80 	bl	8004b70 <_lv_obj_get_ext_draw_size>
    dest->y1 = src->y1;
 8005270:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 8005274:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    dest->y2 = src->y2;
 8005278:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
        obj_coords.x1 -= ext_size;
 800527c:	8aa1      	ldrh	r1, [r4, #20]
 800527e:	b280      	uxth	r0, r0
 8005280:	1a09      	subs	r1, r1, r0
        obj_coords.y1 -= ext_size;
 8005282:	1a12      	subs	r2, r2, r0
        obj_coords.x2 += ext_size;
 8005284:	4403      	add	r3, r0
        obj_coords.y2 += ext_size;
 8005286:	4430      	add	r0, r6
        obj_coords.x1 -= ext_size;
 8005288:	f8ad 1000 	strh.w	r1, [sp]
        obj_coords.y1 -= ext_size;
 800528c:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.y2 += ext_size;
 8005290:	f8ad 0006 	strh.w	r0, [sp, #6]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8005294:	466a      	mov	r2, sp
 8005296:	4629      	mov	r1, r5
 8005298:	4628      	mov	r0, r5
        obj_coords.x2 += ext_size;
 800529a:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 800529e:	f00d faea 	bl	8012876 <_lv_area_intersect>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d0ce      	beq.n	8005244 <lv_obj_area_is_visible+0x10>
    lv_obj_get_transformed_area(obj, area, true, false);
 80052a6:	4620      	mov	r0, r4
 80052a8:	2300      	movs	r3, #0
 80052aa:	2201      	movs	r2, #1
 80052ac:	4629      	mov	r1, r5
 80052ae:	f7ff ff4d 	bl	800514c <lv_obj_get_transformed_area>
    lv_obj_t * par = lv_obj_get_parent(obj);
 80052b2:	4620      	mov	r0, r4
 80052b4:	f002 feda 	bl	800806c <lv_obj_get_parent>
            lv_area_t par_area = par->coords;
 80052b8:	466e      	mov	r6, sp
    lv_obj_t * par = lv_obj_get_parent(obj);
 80052ba:	4604      	mov	r4, r0
    while(par != NULL) {
 80052bc:	b98c      	cbnz	r4, 80052e2 <lv_obj_area_is_visible+0xae>
    return true;
 80052be:	2001      	movs	r0, #1
 80052c0:	e7c0      	b.n	8005244 <lv_obj_area_is_visible+0x10>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 80052c2:	4638      	mov	r0, r7
 80052c4:	f7fd fe84 	bl	8002fd0 <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 80052c8:	4286      	cmp	r6, r0
 80052ca:	d0c8      	beq.n	800525e <lv_obj_area_is_visible+0x2a>
       obj_scr != lv_disp_get_layer_top(disp) &&
 80052cc:	4638      	mov	r0, r7
 80052ce:	f7fd fe86 	bl	8002fde <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 80052d2:	4286      	cmp	r6, r0
 80052d4:	d0c3      	beq.n	800525e <lv_obj_area_is_visible+0x2a>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 80052d6:	4638      	mov	r0, r7
 80052d8:	f7fd fe88 	bl	8002fec <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 80052dc:	4286      	cmp	r6, r0
 80052de:	d1b0      	bne.n	8005242 <lv_obj_area_is_visible+0xe>
 80052e0:	e7bd      	b.n	800525e <lv_obj_area_is_visible+0x2a>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 80052e2:	2101      	movs	r1, #1
 80052e4:	4620      	mov	r0, r4
 80052e6:	f7fe fea0 	bl	800402a <lv_obj_has_flag>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d1a9      	bne.n	8005242 <lv_obj_area_is_visible+0xe>
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 80052ee:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80052f2:	4620      	mov	r0, r4
 80052f4:	f7fe fea0 	bl	8004038 <lv_obj_has_flag_any>
 80052f8:	4603      	mov	r3, r0
 80052fa:	b978      	cbnz	r0, 800531c <lv_obj_area_is_visible+0xe8>
            lv_area_t par_area = par->coords;
 80052fc:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
            lv_obj_get_transformed_area(par, &par_area, true, false);
 8005300:	2201      	movs	r2, #1
            lv_area_t par_area = par->coords;
 8005302:	e886 0003 	stmia.w	r6, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 8005306:	4631      	mov	r1, r6
 8005308:	4620      	mov	r0, r4
 800530a:	f7ff ff1f 	bl	800514c <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 800530e:	4632      	mov	r2, r6
 8005310:	4629      	mov	r1, r5
 8005312:	4628      	mov	r0, r5
 8005314:	f00d faaf 	bl	8012876 <_lv_area_intersect>
 8005318:	2800      	cmp	r0, #0
 800531a:	d093      	beq.n	8005244 <lv_obj_area_is_visible+0x10>
        par = lv_obj_get_parent(par);
 800531c:	4620      	mov	r0, r4
 800531e:	f002 fea5 	bl	800806c <lv_obj_get_parent>
 8005322:	4604      	mov	r4, r0
 8005324:	e7ca      	b.n	80052bc <lv_obj_area_is_visible+0x88>

08005326 <lv_obj_invalidate_area>:
{
 8005326:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005328:	460c      	mov	r4, r1
 800532a:	4605      	mov	r5, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj);
 800532c:	f002 fe7e 	bl	800802c <lv_obj_get_disp>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 8005330:	f7fd fe8b 	bl	800304a <lv_disp_is_invalidation_enabled>
 8005334:	b1b0      	cbz	r0, 8005364 <lv_obj_invalidate_area+0x3e>
    dest->x1 = src->x1;
 8005336:	8823      	ldrh	r3, [r4, #0]
 8005338:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 800533c:	8863      	ldrh	r3, [r4, #2]
 800533e:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8005342:	88a3      	ldrh	r3, [r4, #4]
 8005344:	f8ad 3004 	strh.w	r3, [sp, #4]
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 8005348:	4669      	mov	r1, sp
    dest->y2 = src->y2;
 800534a:	88e3      	ldrh	r3, [r4, #6]
 800534c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8005350:	4628      	mov	r0, r5
 8005352:	f7ff ff6f 	bl	8005234 <lv_obj_area_is_visible>
 8005356:	b128      	cbz	r0, 8005364 <lv_obj_invalidate_area+0x3e>
    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 8005358:	4628      	mov	r0, r5
 800535a:	f002 fe67 	bl	800802c <lv_obj_get_disp>
 800535e:	4669      	mov	r1, sp
 8005360:	f003 fd68 	bl	8008e34 <_lv_inv_area>
}
 8005364:	b003      	add	sp, #12
 8005366:	bd30      	pop	{r4, r5, pc}

08005368 <lv_obj_invalidate>:
{
 8005368:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800536a:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800536c:	f7ff fc00 	bl	8004b70 <_lv_obj_get_ext_draw_size>
    dest->y1 = src->y1;
 8005370:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    dest->x2 = src->x2;
 8005374:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 8005378:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    obj_coords.x1 -= ext_size;
 800537c:	8aa5      	ldrh	r5, [r4, #20]
 800537e:	b283      	uxth	r3, r0
    obj_coords.y1 -= ext_size;
 8005380:	1ac9      	subs	r1, r1, r3
    obj_coords.x2 += ext_size;
 8005382:	441a      	add	r2, r3
    obj_coords.x1 -= ext_size;
 8005384:	1aed      	subs	r5, r5, r3
    obj_coords.y1 -= ext_size;
 8005386:	f8ad 1002 	strh.w	r1, [sp, #2]
    obj_coords.y2 += ext_size;
 800538a:	4433      	add	r3, r6
    lv_obj_invalidate_area(obj, &obj_coords);
 800538c:	4669      	mov	r1, sp
 800538e:	4620      	mov	r0, r4
    obj_coords.x1 -= ext_size;
 8005390:	f8ad 5000 	strh.w	r5, [sp]
    obj_coords.x2 += ext_size;
 8005394:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 8005398:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 800539c:	f7ff ffc3 	bl	8005326 <lv_obj_invalidate_area>
}
 80053a0:	b002      	add	sp, #8
 80053a2:	bd70      	pop	{r4, r5, r6, pc}

080053a4 <lv_obj_move_to>:
{
 80053a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t * parent = obj->parent;
 80053a8:	6847      	ldr	r7, [r0, #4]
{
 80053aa:	4604      	mov	r4, r0
    if(parent) {
 80053ac:	b31f      	cbz	r7, 80053f6 <lv_obj_move_to+0x52>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 80053ae:	4638      	mov	r0, r7
            x += pad_left + parent->coords.x1;
 80053b0:	b28e      	uxth	r6, r1
            y += pad_top + parent->coords.y1;
 80053b2:	fa1f f882 	uxth.w	r8, r2
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 80053b6:	f7ff fc27 	bl	8004c08 <lv_obj_get_style_pad_left.constprop.0>
 80053ba:	4605      	mov	r5, r0
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 80053bc:	4638      	mov	r0, r7
 80053be:	f7ff fc31 	bl	8004c24 <lv_obj_get_style_pad_top.constprop.0>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80053c2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 80053c6:	4681      	mov	r9, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80053c8:	4620      	mov	r0, r4
 80053ca:	f7fe fe2e 	bl	800402a <lv_obj_has_flag>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d06b      	beq.n	80054aa <lv_obj_move_to+0x106>
            x += pad_left + parent->coords.x1;
 80053d2:	8abb      	ldrh	r3, [r7, #20]
            y += pad_top + parent->coords.y1;
 80053d4:	8afa      	ldrh	r2, [r7, #22]
            x += pad_left + parent->coords.x1;
 80053d6:	441e      	add	r6, r3
 80053d8:	4435      	add	r5, r6
            y += pad_top + parent->coords.y1;
 80053da:	4442      	add	r2, r8
            x += pad_left + parent->coords.x1;
 80053dc:	b22d      	sxth	r5, r5
            y += pad_top + parent->coords.y1;
 80053de:	444a      	add	r2, r9
        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 80053e0:	4638      	mov	r0, r7
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 80053e2:	fa0f f882 	sxth.w	r8, r2
        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 80053e6:	f7ff fc01 	bl	8004bec <lv_obj_get_style_border_width.constprop.0>
        x += border_width;
 80053ea:	fa15 f180 	uxtah	r1, r5, r0
        y += border_width;
 80053ee:	fa18 f280 	uxtah	r2, r8, r0
        x += border_width;
 80053f2:	b209      	sxth	r1, r1
        y += border_width;
 80053f4:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
 80053f6:	8aa3      	ldrh	r3, [r4, #20]
    diff.y = y - obj->coords.y1;
 80053f8:	8ae0      	ldrh	r0, [r4, #22]
    diff.x = x - obj->coords.x1;
 80053fa:	1ac9      	subs	r1, r1, r3
    diff.y = y - obj->coords.y1;
 80053fc:	1a12      	subs	r2, r2, r0
    diff.x = x - obj->coords.x1;
 80053fe:	fa1f f881 	uxth.w	r8, r1
    diff.y = y - obj->coords.y1;
 8005402:	fa1f fa82 	uxth.w	sl, r2
    if(diff.x == 0 && diff.y == 0) return;
 8005406:	ea58 030a 	orrs.w	r3, r8, sl
    diff.x = x - obj->coords.x1;
 800540a:	b20d      	sxth	r5, r1
    diff.y = y - obj->coords.y1;
 800540c:	b216      	sxth	r6, r2
    if(diff.x == 0 && diff.y == 0) return;
 800540e:	d049      	beq.n	80054a4 <lv_obj_move_to+0x100>
    lv_obj_invalidate(obj);
 8005410:	4620      	mov	r0, r4
 8005412:	f7ff ffa9 	bl	8005368 <lv_obj_invalidate>
    dest->x1 = src->x1;
 8005416:	8aa3      	ldrh	r3, [r4, #20]
 8005418:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 800541c:	8ae3      	ldrh	r3, [r4, #22]
 800541e:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8005422:	8b23      	ldrh	r3, [r4, #24]
 8005424:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 8005428:	8b63      	ldrh	r3, [r4, #26]
 800542a:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(parent) {
 800542e:	2f00      	cmp	r7, #0
 8005430:	d04f      	beq.n	80054d2 <lv_obj_move_to+0x12e>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8005432:	a902      	add	r1, sp, #8
 8005434:	4638      	mov	r0, r7
 8005436:	f7ff fdb9 	bl	8004fac <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800543a:	2200      	movs	r2, #0
 800543c:	a902      	add	r1, sp, #8
 800543e:	4668      	mov	r0, sp
 8005440:	f00d fb1a 	bl	8012a78 <_lv_area_is_in>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8005444:	4681      	mov	r9, r0
 8005446:	b910      	cbnz	r0, 800544e <lv_obj_move_to+0xaa>
 8005448:	4638      	mov	r0, r7
 800544a:	f001 fe94 	bl	8007176 <lv_obj_scrollbar_invalidate>
    obj->coords.x1 += diff.x;
 800544e:	8aa3      	ldrh	r3, [r4, #20]
 8005450:	4443      	add	r3, r8
 8005452:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
 8005454:	8ae3      	ldrh	r3, [r4, #22]
 8005456:	4453      	add	r3, sl
 8005458:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
 800545a:	8b23      	ldrh	r3, [r4, #24]
 800545c:	4498      	add	r8, r3
    obj->coords.y2 += diff.y;
 800545e:	8b63      	ldrh	r3, [r4, #26]
    obj->coords.x2 += diff.x;
 8005460:	f8a4 8018 	strh.w	r8, [r4, #24]
    obj->coords.y2 += diff.y;
 8005464:	449a      	add	sl, r3
 8005466:	f8a4 a01a 	strh.w	sl, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 800546a:	2300      	movs	r3, #0
 800546c:	4632      	mov	r2, r6
 800546e:	4629      	mov	r1, r5
 8005470:	4620      	mov	r0, r4
 8005472:	f7ff fe07 	bl	8005084 <lv_obj_move_children_by>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8005476:	b127      	cbz	r7, 8005482 <lv_obj_move_to+0xde>
 8005478:	4622      	mov	r2, r4
 800547a:	2122      	movs	r1, #34	; 0x22
 800547c:	4638      	mov	r0, r7
 800547e:	f7fd fec5 	bl	800320c <lv_event_send>
    lv_obj_invalidate(obj);
 8005482:	4620      	mov	r0, r4
 8005484:	f7ff ff70 	bl	8005368 <lv_obj_invalidate>
    if(parent) {
 8005488:	b167      	cbz	r7, 80054a4 <lv_obj_move_to+0x100>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 800548a:	2200      	movs	r2, #0
 800548c:	a902      	add	r1, sp, #8
 800548e:	f104 0014 	add.w	r0, r4, #20
 8005492:	f00d faf1 	bl	8012a78 <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8005496:	f1b9 0f00 	cmp.w	r9, #0
 800549a:	d100      	bne.n	800549e <lv_obj_move_to+0xfa>
 800549c:	b110      	cbz	r0, 80054a4 <lv_obj_move_to+0x100>
 800549e:	4638      	mov	r0, r7
 80054a0:	f001 fe69 	bl	8007176 <lv_obj_scrollbar_invalidate>
}
 80054a4:	b004      	add	sp, #16
 80054a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 80054aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80054ae:	4638      	mov	r0, r7
 80054b0:	441d      	add	r5, r3
 80054b2:	f000 feae 	bl	8006212 <lv_obj_get_scroll_x>
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 80054b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 80054ba:	1a2d      	subs	r5, r5, r0
 80054bc:	1971      	adds	r1, r6, r5
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 80054be:	4638      	mov	r0, r7
 80054c0:	4499      	add	r9, r3
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 80054c2:	b20d      	sxth	r5, r1
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 80054c4:	f000 feab 	bl	800621e <lv_obj_get_scroll_y>
 80054c8:	eba9 0000 	sub.w	r0, r9, r0
 80054cc:	eb08 0200 	add.w	r2, r8, r0
 80054d0:	e786      	b.n	80053e0 <lv_obj_move_to+0x3c>
    bool on1 = false;
 80054d2:	46b9      	mov	r9, r7
 80054d4:	e7bb      	b.n	800544e <lv_obj_move_to+0xaa>
	...

080054d8 <lv_obj_refr_pos>:
{
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	ed2d 8b02 	vpush	{d8}
 80054e0:	b087      	sub	sp, #28
 80054e2:	4680      	mov	r8, r0
    if(lv_obj_is_layout_positioned(obj)) return;
 80054e4:	f7ff fc98 	bl	8004e18 <lv_obj_is_layout_positioned>
 80054e8:	9001      	str	r0, [sp, #4]
 80054ea:	2800      	cmp	r0, #0
 80054ec:	f040 8123 	bne.w	8005736 <lv_obj_refr_pos+0x25e>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80054f0:	4640      	mov	r0, r8
 80054f2:	f002 fdbb 	bl	800806c <lv_obj_get_parent>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 80054f6:	9901      	ldr	r1, [sp, #4]
 80054f8:	ee08 0a10 	vmov	s16, r0
 80054fc:	2207      	movs	r2, #7
 80054fe:	4640      	mov	r0, r8
 8005500:	f001 ffc4 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8005504:	9901      	ldr	r1, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8005506:	4682      	mov	sl, r0
    return (lv_coord_t)v.num;
 8005508:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 800550a:	2208      	movs	r2, #8
 800550c:	4640      	mov	r0, r8
 800550e:	f001 ffbd 	bl	800748c <lv_obj_get_style_prop>
    if(parent == NULL) {
 8005512:	ee18 3a10 	vmov	r3, s16
 8005516:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 8005518:	b205      	sxth	r5, r0
 800551a:	b94b      	cbnz	r3, 8005530 <lv_obj_refr_pos+0x58>
        lv_obj_move_to(obj, x, y);
 800551c:	462a      	mov	r2, r5
 800551e:	4621      	mov	r1, r4
 8005520:	4640      	mov	r0, r8
}
 8005522:	b007      	add	sp, #28
 8005524:	ecbd 8b02 	vpop	{d8}
 8005528:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_move_to(obj, x, y);
 800552c:	f7ff bf3a 	b.w	80053a4 <lv_obj_move_to>
    lv_coord_t pw = lv_obj_get_content_width(parent);
 8005530:	ee18 0a10 	vmov	r0, s16
 8005534:	f7ff fd0e 	bl	8004f54 <lv_obj_get_content_width>
 8005538:	4607      	mov	r7, r0
    lv_coord_t ph = lv_obj_get_content_height(parent);
 800553a:	ee18 0a10 	vmov	r0, s16
 800553e:	f7ff fd1f 	bl	8004f80 <lv_obj_get_content_height>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8005542:	f40a 4ac0 	and.w	sl, sl, #24576	; 0x6000
 8005546:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
    lv_coord_t ph = lv_obj_get_content_height(parent);
 800554a:	4606      	mov	r6, r0
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 800554c:	d10f      	bne.n	800556e <lv_obj_refr_pos+0x96>
 800554e:	f424 43c0 	bic.w	r3, r4, #24576	; 0x6000
 8005552:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005556:	dc0a      	bgt.n	800556e <lv_obj_refr_pos+0x96>
 8005558:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800555c:	461c      	mov	r4, r3
 800555e:	bfc8      	it	gt
 8005560:	f5c3 747a 	rsbgt	r4, r3, #1000	; 0x3e8
 8005564:	437c      	muls	r4, r7
 8005566:	2364      	movs	r3, #100	; 0x64
 8005568:	fb94 f4f3 	sdiv	r4, r4, r3
 800556c:	b224      	sxth	r4, r4
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 800556e:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
 8005572:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 8005576:	d10f      	bne.n	8005598 <lv_obj_refr_pos+0xc0>
 8005578:	f425 43c0 	bic.w	r3, r5, #24576	; 0x6000
 800557c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005580:	dc0a      	bgt.n	8005598 <lv_obj_refr_pos+0xc0>
 8005582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005586:	461d      	mov	r5, r3
 8005588:	bfc8      	it	gt
 800558a:	f5c3 757a 	rsbgt	r5, r3, #1000	; 0x3e8
 800558e:	4375      	muls	r5, r6
 8005590:	2364      	movs	r3, #100	; 0x64
 8005592:	fb95 f5f3 	sdiv	r5, r5, r3
 8005596:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8005598:	226a      	movs	r2, #106	; 0x6a
 800559a:	2100      	movs	r1, #0
 800559c:	4640      	mov	r0, r8
 800559e:	f001 ff75 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80055a2:	226b      	movs	r2, #107	; 0x6b
    return (lv_coord_t)v.num;
 80055a4:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 80055a6:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80055a8:	2100      	movs	r1, #0
 80055aa:	4640      	mov	r0, r8
    return (lv_coord_t)v.num;
 80055ac:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80055ae:	f001 ff6d 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80055b2:	f8b8 2018 	ldrh.w	r2, [r8, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80055b6:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	3201      	adds	r2, #1
 80055be:	b293      	uxth	r3, r2
 80055c0:	9a01      	ldr	r2, [sp, #4]
 80055c2:	9303      	str	r3, [sp, #12]
 80055c4:	1a9a      	subs	r2, r3, r2
 80055c6:	fa0f fb82 	sxth.w	fp, r2
 80055ca:	f8b8 201a 	ldrh.w	r2, [r8, #26]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80055ce:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 80055d2:	9302      	str	r3, [sp, #8]
 80055d4:	3201      	adds	r2, #1
 80055d6:	b293      	uxth	r3, r2
 80055d8:	9a02      	ldr	r2, [sp, #8]
 80055da:	9304      	str	r3, [sp, #16]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80055dc:	f40a 4ac0 	and.w	sl, sl, #24576	; 0x6000
 80055e0:	eba3 0902 	sub.w	r9, r3, r2
 80055e4:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
 80055e8:	9b05      	ldr	r3, [sp, #20]
 80055ea:	fa0f fc80 	sxth.w	ip, r0
 80055ee:	fa0f f989 	sxth.w	r9, r9
 80055f2:	d110      	bne.n	8005616 <lv_obj_refr_pos+0x13e>
 80055f4:	f423 41c0 	bic.w	r1, r3, #24576	; 0x6000
 80055f8:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 80055fc:	dc0b      	bgt.n	8005616 <lv_obj_refr_pos+0x13e>
 80055fe:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8005602:	460b      	mov	r3, r1
 8005604:	bfc8      	it	gt
 8005606:	f5c1 737a 	rsbgt	r3, r1, #1000	; 0x3e8
 800560a:	fb03 f30b 	mul.w	r3, r3, fp
 800560e:	2264      	movs	r2, #100	; 0x64
 8005610:	fb93 f3f2 	sdiv	r3, r3, r2
 8005614:	b21b      	sxth	r3, r3
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8005616:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 800561a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800561e:	d110      	bne.n	8005642 <lv_obj_refr_pos+0x16a>
 8005620:	f42c 42c0 	bic.w	r2, ip, #24576	; 0x6000
 8005624:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8005628:	dc0b      	bgt.n	8005642 <lv_obj_refr_pos+0x16a>
 800562a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800562e:	bfc8      	it	gt
 8005630:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 8005634:	fb02 f209 	mul.w	r2, r2, r9
 8005638:	2164      	movs	r1, #100	; 0x64
 800563a:	fb92 f2f1 	sdiv	r2, r2, r1
 800563e:	fa0f fc82 	sxth.w	ip, r2
    x += tr_x;
 8005642:	441c      	add	r4, r3
 8005644:	b2a3      	uxth	r3, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8005646:	2209      	movs	r2, #9
 8005648:	2100      	movs	r1, #0
 800564a:	4640      	mov	r0, r8
    y += tr_y;
 800564c:	4465      	add	r5, ip
    x += tr_x;
 800564e:	9305      	str	r3, [sp, #20]
 8005650:	f001 ff1c 	bl	800748c <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 8005654:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    y += tr_y;
 8005658:	fa1f fa85 	uxth.w	sl, r5
    if(align == LV_ALIGN_DEFAULT) {
 800565c:	9b05      	ldr	r3, [sp, #20]
    x += tr_x;
 800565e:	b224      	sxth	r4, r4
    y += tr_y;
 8005660:	b22d      	sxth	r5, r5
    if(align == LV_ALIGN_DEFAULT) {
 8005662:	d10d      	bne.n	8005680 <lv_obj_refr_pos+0x1a8>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8005664:	ee18 0a10 	vmov	r0, s16
 8005668:	9302      	str	r3, [sp, #8]
 800566a:	f7ff fab8 	bl	8004bde <lv_obj_get_style_base_dir.constprop.0>
 800566e:	2801      	cmp	r0, #1
 8005670:	9b02      	ldr	r3, [sp, #8]
 8005672:	f47f af53 	bne.w	800551c <lv_obj_refr_pos+0x44>
                x += pw - w;
 8005676:	9a01      	ldr	r2, [sp, #4]
 8005678:	9903      	ldr	r1, [sp, #12]
 800567a:	1a54      	subs	r4, r2, r1
 800567c:	443c      	add	r4, r7
 800567e:	e020      	b.n	80056c2 <lv_obj_refr_pos+0x1ea>
    if(align == LV_ALIGN_TOP_LEFT) {
 8005680:	2801      	cmp	r0, #1
 8005682:	f43f af4b 	beq.w	800551c <lv_obj_refr_pos+0x44>
        switch(align) {
 8005686:	3802      	subs	r0, #2
 8005688:	2807      	cmp	r0, #7
 800568a:	f63f af47 	bhi.w	800551c <lv_obj_refr_pos+0x44>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <lv_obj_refr_pos+0x1bc>)
 8005690:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8005694:	080056b5 	.word	0x080056b5
 8005698:	08005677 	.word	0x08005677
 800569c:	080056db 	.word	0x080056db
 80056a0:	080056c9 	.word	0x080056c9
 80056a4:	080056e9 	.word	0x080056e9
 80056a8:	080056ff 	.word	0x080056ff
 80056ac:	080056f3 	.word	0x080056f3
 80056b0:	0800570f 	.word	0x0800570f
                x += pw / 2 - w / 2;
 80056b4:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 80056b8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80056bc:	1064      	asrs	r4, r4, #1
 80056be:	ebc4 0467 	rsb	r4, r4, r7, asr #1
                x += pw - w;
 80056c2:	4423      	add	r3, r4
 80056c4:	b21c      	sxth	r4, r3
                break;
 80056c6:	e729      	b.n	800551c <lv_obj_refr_pos+0x44>
                x += pw / 2 - w / 2;
 80056c8:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 80056cc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80056d0:	1064      	asrs	r4, r4, #1
 80056d2:	ebc4 0467 	rsb	r4, r4, r7, asr #1
                x += pw - w;
 80056d6:	4423      	add	r3, r4
 80056d8:	b21c      	sxth	r4, r3
                y += ph - h;
 80056da:	9b02      	ldr	r3, [sp, #8]
 80056dc:	9a04      	ldr	r2, [sp, #16]
 80056de:	1a9d      	subs	r5, r3, r2
 80056e0:	4435      	add	r5, r6
                y += ph / 2 - h / 2;
 80056e2:	4455      	add	r5, sl
 80056e4:	b22d      	sxth	r5, r5
                break;
 80056e6:	e719      	b.n	800551c <lv_obj_refr_pos+0x44>
                x += pw - w;
 80056e8:	9a01      	ldr	r2, [sp, #4]
 80056ea:	9903      	ldr	r1, [sp, #12]
 80056ec:	1a54      	subs	r4, r2, r1
 80056ee:	443c      	add	r4, r7
 80056f0:	e7f1      	b.n	80056d6 <lv_obj_refr_pos+0x1fe>
                x += pw - w;
 80056f2:	9a01      	ldr	r2, [sp, #4]
 80056f4:	9903      	ldr	r1, [sp, #12]
 80056f6:	1a54      	subs	r4, r2, r1
 80056f8:	443c      	add	r4, r7
 80056fa:	4423      	add	r3, r4
 80056fc:	b21c      	sxth	r4, r3
                y += ph / 2 - h / 2;
 80056fe:	eb09 75d9 	add.w	r5, r9, r9, lsr #31
 8005702:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8005706:	106d      	asrs	r5, r5, #1
 8005708:	ebc5 0566 	rsb	r5, r5, r6, asr #1
 800570c:	e7e9      	b.n	80056e2 <lv_obj_refr_pos+0x20a>
                x += pw / 2 - w / 2;
 800570e:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
                y += ph / 2 - h / 2;
 8005712:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
                x += pw / 2 - w / 2;
 8005716:	1064      	asrs	r4, r4, #1
 8005718:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
                y += ph / 2 - h / 2;
 800571c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8005720:	ea4f 0969 	mov.w	r9, r9, asr #1
                x += pw / 2 - w / 2;
 8005724:	ebc4 0767 	rsb	r7, r4, r7, asr #1
                y += ph / 2 - h / 2;
 8005728:	ebc9 0666 	rsb	r6, r9, r6, asr #1
                x += pw / 2 - w / 2;
 800572c:	441f      	add	r7, r3
                y += ph / 2 - h / 2;
 800572e:	4456      	add	r6, sl
                x += pw / 2 - w / 2;
 8005730:	b23c      	sxth	r4, r7
                y += ph / 2 - h / 2;
 8005732:	b235      	sxth	r5, r6
                break;
 8005734:	e6f2      	b.n	800551c <lv_obj_refr_pos+0x44>
}
 8005736:	b007      	add	sp, #28
 8005738:	ecbd 8b02 	vpop	{d8}
 800573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005740 <lv_obj_is_visible>:
{
 8005740:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005742:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8005744:	f7ff fa14 	bl	8004b70 <_lv_obj_get_ext_draw_size>
    dest->y1 = src->y1;
 8005748:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    dest->x2 = src->x2;
 800574c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 8005750:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    obj_coords.x1 -= ext_size;
 8005754:	8aa5      	ldrh	r5, [r4, #20]
 8005756:	b283      	uxth	r3, r0
    obj_coords.y1 -= ext_size;
 8005758:	1ac9      	subs	r1, r1, r3
    obj_coords.x2 += ext_size;
 800575a:	441a      	add	r2, r3
    obj_coords.x1 -= ext_size;
 800575c:	1aed      	subs	r5, r5, r3
    obj_coords.y1 -= ext_size;
 800575e:	f8ad 1002 	strh.w	r1, [sp, #2]
    obj_coords.y2 += ext_size;
 8005762:	4433      	add	r3, r6
    return lv_obj_area_is_visible(obj, &obj_coords);
 8005764:	4669      	mov	r1, sp
 8005766:	4620      	mov	r0, r4
    obj_coords.x1 -= ext_size;
 8005768:	f8ad 5000 	strh.w	r5, [sp]
    obj_coords.x2 += ext_size;
 800576c:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 8005770:	f8ad 3006 	strh.w	r3, [sp, #6]
    return lv_obj_area_is_visible(obj, &obj_coords);
 8005774:	f7ff fd5e 	bl	8005234 <lv_obj_area_is_visible>
}
 8005778:	b002      	add	sp, #8
 800577a:	bd70      	pop	{r4, r5, r6, pc}

0800577c <lv_obj_set_ext_click_area>:
{
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4605      	mov	r5, r0
 8005780:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8005782:	f7fe fe35 	bl	80043f0 <lv_obj_allocate_spec_attr>
    obj->spec_attr->ext_click_pad = size;
 8005786:	68ab      	ldr	r3, [r5, #8]
 8005788:	829c      	strh	r4, [r3, #20]
}
 800578a:	bd38      	pop	{r3, r4, r5, pc}

0800578c <lv_clamp_width>:
{
 800578c:	b510      	push	{r4, lr}
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 800578e:	f401 44c0 	and.w	r4, r1, #24576	; 0x6000
 8005792:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8005796:	d10f      	bne.n	80057b8 <lv_clamp_width+0x2c>
 8005798:	f421 44c0 	bic.w	r4, r1, #24576	; 0x6000
 800579c:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80057a0:	dc0a      	bgt.n	80057b8 <lv_clamp_width+0x2c>
 80057a2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80057a6:	4621      	mov	r1, r4
 80057a8:	bfc8      	it	gt
 80057aa:	f5c4 717a 	rsbgt	r1, r4, #1000	; 0x3e8
 80057ae:	4359      	muls	r1, r3
 80057b0:	2464      	movs	r4, #100	; 0x64
 80057b2:	fb91 f1f4 	sdiv	r1, r1, r4
 80057b6:	b209      	sxth	r1, r1
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 80057b8:	f402 44c0 	and.w	r4, r2, #24576	; 0x6000
 80057bc:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80057c0:	d10f      	bne.n	80057e2 <lv_clamp_width+0x56>
 80057c2:	f422 44c0 	bic.w	r4, r2, #24576	; 0x6000
 80057c6:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80057ca:	dc0a      	bgt.n	80057e2 <lv_clamp_width+0x56>
 80057cc:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80057d0:	4622      	mov	r2, r4
 80057d2:	bfc8      	it	gt
 80057d4:	f5c4 727a 	rsbgt	r2, r4, #1000	; 0x3e8
 80057d8:	4353      	muls	r3, r2
 80057da:	2264      	movs	r2, #100	; 0x64
 80057dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80057e0:	b21a      	sxth	r2, r3
    return LV_CLAMP(min_width, width, max_width);
 80057e2:	4290      	cmp	r0, r2
 80057e4:	bfa8      	it	ge
 80057e6:	4610      	movge	r0, r2
}
 80057e8:	4288      	cmp	r0, r1
 80057ea:	bfb8      	it	lt
 80057ec:	4608      	movlt	r0, r1
 80057ee:	bd10      	pop	{r4, pc}

080057f0 <lv_obj_refr_size>:
{
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(obj->w_layout && obj->h_layout) return false;
 80057f4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
{
 80057f8:	ed2d 8b02 	vpush	{d8}
    if(obj->w_layout && obj->h_layout) return false;
 80057fc:	f003 0306 	and.w	r3, r3, #6
 8005800:	2b06      	cmp	r3, #6
{
 8005802:	b08d      	sub	sp, #52	; 0x34
 8005804:	4604      	mov	r4, r0
    if(obj->w_layout && obj->h_layout) return false;
 8005806:	d003      	beq.n	8005810 <lv_obj_refr_size+0x20>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005808:	f002 fc30 	bl	800806c <lv_obj_get_parent>
    if(parent == NULL) return false;
 800580c:	4607      	mov	r7, r0
 800580e:	b908      	cbnz	r0, 8005814 <lv_obj_refr_size+0x24>
    if(obj->w_layout && obj->h_layout) return false;
 8005810:	2000      	movs	r0, #0
 8005812:	e08b      	b.n	800592c <lv_obj_refr_size+0x13c>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8005814:	4620      	mov	r0, r4
 8005816:	f000 fd5f 	bl	80062d8 <lv_obj_get_scroll_left>
    if(obj->w_layout) {
 800581a:	f894 6023 	ldrb.w	r6, [r4, #35]	; 0x23
 800581e:	f016 0604 	ands.w	r6, r6, #4
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8005822:	ee08 0a10 	vmov	s16, r0
    if(obj->w_layout) {
 8005826:	f000 8086 	beq.w	8005936 <lv_obj_refr_size+0x146>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800582a:	8b26      	ldrh	r6, [r4, #24]
 800582c:	8aa0      	ldrh	r0, [r4, #20]
 800582e:	3601      	adds	r6, #1
 8005830:	1a36      	subs	r6, r6, r0
 8005832:	b233      	sxth	r3, r6
 8005834:	9302      	str	r3, [sp, #8]
    bool w_is_content = false;
 8005836:	2300      	movs	r3, #0
 8005838:	9301      	str	r3, [sp, #4]
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 800583a:	4620      	mov	r0, r4
 800583c:	f000 fcf5 	bl	800622a <lv_obj_get_scroll_top>
    if(obj->h_layout) {
 8005840:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
 8005844:	f015 0502 	ands.w	r5, r5, #2
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8005848:	ee08 0a90 	vmov	s17, r0
    if(obj->h_layout) {
 800584c:	f000 819c 	beq.w	8005b88 <lv_obj_refr_size+0x398>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005850:	8b65      	ldrh	r5, [r4, #26]
 8005852:	8ae0      	ldrh	r0, [r4, #22]
    if(w_is_content || h_is_content) {
 8005854:	9b01      	ldr	r3, [sp, #4]
 8005856:	3501      	adds	r5, #1
 8005858:	1a2d      	subs	r5, r5, r0
 800585a:	b22d      	sxth	r5, r5
 800585c:	2b00      	cmp	r3, #0
 800585e:	f040 8200 	bne.w	8005c62 <lv_obj_refr_size+0x472>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005862:	8b23      	ldrh	r3, [r4, #24]
 8005864:	8aa2      	ldrh	r2, [r4, #20]
 8005866:	3301      	adds	r3, #1
 8005868:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 800586a:	9a02      	ldr	r2, [sp, #8]
 800586c:	b21b      	sxth	r3, r3
 800586e:	4293      	cmp	r3, r2
 8005870:	d106      	bne.n	8005880 <lv_obj_refr_size+0x90>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005872:	8b63      	ldrh	r3, [r4, #26]
 8005874:	8ae2      	ldrh	r2, [r4, #22]
 8005876:	3301      	adds	r3, #1
 8005878:	1a9b      	subs	r3, r3, r2
 800587a:	b21b      	sxth	r3, r3
 800587c:	42ab      	cmp	r3, r5
 800587e:	d0c7      	beq.n	8005810 <lv_obj_refr_size+0x20>
    lv_obj_invalidate(obj);
 8005880:	4620      	mov	r0, r4
 8005882:	f7ff fd71 	bl	8005368 <lv_obj_invalidate>
    dest->x1 = src->x1;
 8005886:	8aa3      	ldrh	r3, [r4, #20]
 8005888:	f8ad 3020 	strh.w	r3, [sp, #32]
    dest->y1 = src->y1;
 800588c:	8ae3      	ldrh	r3, [r4, #22]
 800588e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 8005892:	8b23      	ldrh	r3, [r4, #24]
 8005894:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    lv_obj_get_content_coords(parent, &parent_fit_area);
 8005898:	a90a      	add	r1, sp, #40	; 0x28
    dest->y2 = src->y2;
 800589a:	8b63      	ldrh	r3, [r4, #26]
 800589c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80058a0:	4638      	mov	r0, r7
 80058a2:	f7ff fb83 	bl	8004fac <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 80058a6:	2200      	movs	r2, #0
 80058a8:	a90a      	add	r1, sp, #40	; 0x28
 80058aa:	a808      	add	r0, sp, #32
 80058ac:	f00d f8e4 	bl	8012a78 <_lv_area_is_in>
    lv_area_copy(coords, &obj->coords);
 80058b0:	f104 0914 	add.w	r9, r4, #20
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 80058b4:	4680      	mov	r8, r0
 80058b6:	b910      	cbnz	r0, 80058be <lv_obj_refr_size+0xce>
 80058b8:	4638      	mov	r0, r7
 80058ba:	f001 fc5c 	bl	8007176 <lv_obj_scrollbar_invalidate>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80058be:	8ae0      	ldrh	r0, [r4, #22]
 80058c0:	3801      	subs	r0, #1
 80058c2:	4405      	add	r5, r0
 80058c4:	8365      	strh	r5, [r4, #26]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80058c6:	4620      	mov	r0, r4
 80058c8:	f7ff f989 	bl	8004bde <lv_obj_get_style_base_dir.constprop.0>
 80058cc:	2801      	cmp	r0, #1
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80058ce:	bf0c      	ite	eq
 80058d0:	8b20      	ldrheq	r0, [r4, #24]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80058d2:	8aa0      	ldrhne	r0, [r4, #20]
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80058d4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80058d8:	bf0b      	itete	eq
 80058da:	3001      	addeq	r0, #1
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80058dc:	f100 30ff 	addne.w	r0, r0, #4294967295
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80058e0:	1b86      	subeq	r6, r0, r6
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80058e2:	1836      	addne	r6, r6, r0
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80058e4:	bf0c      	ite	eq
 80058e6:	82a6      	strheq	r6, [r4, #20]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80058e8:	8326      	strhne	r6, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 80058ea:	aa08      	add	r2, sp, #32
 80058ec:	2129      	movs	r1, #41	; 0x29
 80058ee:	4620      	mov	r0, r4
 80058f0:	f7fd fc8c 	bl	800320c <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80058f4:	4622      	mov	r2, r4
 80058f6:	2122      	movs	r1, #34	; 0x22
 80058f8:	4638      	mov	r0, r7
 80058fa:	f7fd fc87 	bl	800320c <lv_event_send>
    lv_obj_invalidate(obj);
 80058fe:	4620      	mov	r0, r4
 8005900:	f7ff fd32 	bl	8005368 <lv_obj_invalidate>
    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 8005904:	2100      	movs	r1, #0
 8005906:	4620      	mov	r0, r4
 8005908:	f001 fc55 	bl	80071b6 <lv_obj_readjust_scroll>
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 800590c:	2200      	movs	r2, #0
 800590e:	a90a      	add	r1, sp, #40	; 0x28
 8005910:	4648      	mov	r0, r9
 8005912:	f00d f8b1 	bl	8012a78 <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8005916:	f1b8 0f00 	cmp.w	r8, #0
 800591a:	d100      	bne.n	800591e <lv_obj_refr_size+0x12e>
 800591c:	b110      	cbz	r0, 8005924 <lv_obj_refr_size+0x134>
 800591e:	4638      	mov	r0, r7
 8005920:	f001 fc29 	bl	8007176 <lv_obj_scrollbar_invalidate>
    lv_obj_refresh_ext_draw_size(obj);
 8005924:	4620      	mov	r0, r4
 8005926:	f7ff f928 	bl	8004b7a <lv_obj_refresh_ext_draw_size>
    return true;
 800592a:	2001      	movs	r0, #1
}
 800592c:	b00d      	add	sp, #52	; 0x34
 800592e:	ecbd 8b02 	vpop	{d8}
 8005932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8005936:	2201      	movs	r2, #1
 8005938:	4631      	mov	r1, r6
 800593a:	4620      	mov	r0, r4
 800593c:	f001 fda6 	bl	800748c <lv_obj_get_style_prop>
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 8005940:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 8005944:	b205      	sxth	r5, r0
 8005946:	1aea      	subs	r2, r5, r3
 8005948:	4253      	negs	r3, r2
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 800594a:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 800594e:	4153      	adcs	r3, r2
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8005950:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 8005954:	9301      	str	r3, [sp, #4]
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8005956:	d106      	bne.n	8005966 <lv_obj_refr_size+0x176>
 8005958:	f425 46c0 	bic.w	r6, r5, #24576	; 0x6000
 800595c:	f5b6 6ffa 	cmp.w	r6, #2000	; 0x7d0
 8005960:	bfcc      	ite	gt
 8005962:	2600      	movgt	r6, #0
 8005964:	2601      	movle	r6, #1
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8005966:	4638      	mov	r0, r7
 8005968:	f7ff faf4 	bl	8004f54 <lv_obj_get_content_width>
        if(w_is_content) {
 800596c:	f242 78d1 	movw	r8, #10193	; 0x27d1
 8005970:	4545      	cmp	r5, r8
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8005972:	9002      	str	r0, [sp, #8]
        if(w_is_content) {
 8005974:	f040 80dc 	bne.w	8005b30 <lv_obj_refr_size+0x340>
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8005978:	2200      	movs	r2, #0
 800597a:	4611      	mov	r1, r2
 800597c:	4620      	mov	r0, r4
 800597e:	f000 fea1 	bl	80066c4 <lv_obj_scroll_to_x>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8005982:	4620      	mov	r0, r4
 8005984:	f7ff f932 	bl	8004bec <lv_obj_get_style_border_width.constprop.0>
 8005988:	4606      	mov	r6, r0
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 800598a:	4620      	mov	r0, r4
 800598c:	f7ff f935 	bl	8004bfa <lv_obj_get_style_pad_right.constprop.0>
 8005990:	fa10 f086 	uxtah	r0, r0, r6
 8005994:	b2b5      	uxth	r5, r6
 8005996:	b286      	uxth	r6, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8005998:	4620      	mov	r0, r4
 800599a:	f7ff f935 	bl	8004c08 <lv_obj_get_style_pad_left.constprop.0>
 800599e:	4428      	add	r0, r5
 80059a0:	fa1f f980 	uxth.w	r9, r0
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 80059a4:	4620      	mov	r0, r4
 80059a6:	f7ff fb31 	bl	800500c <lv_obj_get_self_width>
 80059aa:	eb06 0309 	add.w	r3, r6, r9
 80059ae:	4418      	add	r0, r3
 80059b0:	b205      	sxth	r5, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80059b2:	4620      	mov	r0, r4
 80059b4:	f002 fb6c 	bl	8008090 <lv_obj_get_child_cnt>
 80059b8:	9003      	str	r0, [sp, #12]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80059ba:	4620      	mov	r0, r4
 80059bc:	f7ff f90f 	bl	8004bde <lv_obj_get_style_base_dir.constprop.0>
 80059c0:	2801      	cmp	r0, #1
 80059c2:	d00e      	beq.n	80059e2 <lv_obj_refr_size+0x1f2>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80059c4:	fa0f f389 	sxth.w	r3, r9
    lv_coord_t child_res = LV_COORD_MIN;
 80059c8:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8005cb8 <lv_obj_refr_size+0x4c8>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80059cc:	9304      	str	r3, [sp, #16]
        for(i = 0; i < child_cnt; i++) {
 80059ce:	f04f 0a00 	mov.w	sl, #0
 80059d2:	9b03      	ldr	r3, [sp, #12]
 80059d4:	4553      	cmp	r3, sl
 80059d6:	d16c      	bne.n	8005ab2 <lv_obj_refr_size+0x2c2>
        if(child_res != LV_COORD_MIN) {
 80059d8:	4bb7      	ldr	r3, [pc, #732]	; (8005cb8 <lv_obj_refr_size+0x4c8>)
 80059da:	4598      	cmp	r8, r3
 80059dc:	d016      	beq.n	8005a0c <lv_obj_refr_size+0x21c>
            child_res += pad_right;
 80059de:	44b0      	add	r8, r6
 80059e0:	e00c      	b.n	80059fc <lv_obj_refr_size+0x20c>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80059e2:	b233      	sxth	r3, r6
    lv_coord_t child_res = LV_COORD_MIN;
 80059e4:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8005cb8 <lv_obj_refr_size+0x4c8>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80059e8:	9304      	str	r3, [sp, #16]
        for(i = 0; i < child_cnt; i++) {
 80059ea:	f04f 0a00 	mov.w	sl, #0
 80059ee:	9b03      	ldr	r3, [sp, #12]
 80059f0:	4553      	cmp	r3, sl
 80059f2:	d11e      	bne.n	8005a32 <lv_obj_refr_size+0x242>
        if(child_res != LV_COORD_MIN) {
 80059f4:	4bb0      	ldr	r3, [pc, #704]	; (8005cb8 <lv_obj_refr_size+0x4c8>)
 80059f6:	4598      	cmp	r8, r3
 80059f8:	d008      	beq.n	8005a0c <lv_obj_refr_size+0x21c>
            child_res += pad_left;
 80059fa:	44c8      	add	r8, r9
    if(child_res == LV_COORD_MIN) return self_w;
 80059fc:	4bae      	ldr	r3, [pc, #696]	; (8005cb8 <lv_obj_refr_size+0x4c8>)
            child_res += pad_right;
 80059fe:	fa0f f888 	sxth.w	r8, r8
    if(child_res == LV_COORD_MIN) return self_w;
 8005a02:	4598      	cmp	r8, r3
 8005a04:	d002      	beq.n	8005a0c <lv_obj_refr_size+0x21c>
    else return LV_MAX(child_res, self_w);
 8005a06:	4545      	cmp	r5, r8
 8005a08:	bfb8      	it	lt
 8005a0a:	4645      	movlt	r5, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4620      	mov	r0, r4
 8005a12:	f001 fd3b 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8005a16:	2203      	movs	r2, #3
    return (lv_coord_t)v.num;
 8005a18:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f001 fd35 	bl	800748c <lv_obj_get_style_prop>
        w = lv_clamp_width(w, minw, maxw, parent_w);
 8005a22:	9b02      	ldr	r3, [sp, #8]
 8005a24:	b202      	sxth	r2, r0
 8005a26:	4631      	mov	r1, r6
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f7ff feaf 	bl	800578c <lv_clamp_width>
 8005a2e:	9002      	str	r0, [sp, #8]
 8005a30:	e703      	b.n	800583a <lv_obj_refr_size+0x4a>
            lv_obj_t * child = obj->spec_attr->children[i];
 8005a32:	68a3      	ldr	r3, [r4, #8]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005a34:	49a1      	ldr	r1, [pc, #644]	; (8005cbc <lv_obj_refr_size+0x4cc>)
            lv_obj_t * child = obj->spec_attr->children[i];
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f853 b02a 	ldr.w	fp, [r3, sl, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005a3c:	4658      	mov	r0, fp
 8005a3e:	f7fe fafb 	bl	8004038 <lv_obj_has_flag_any>
 8005a42:	bb48      	cbnz	r0, 8005a98 <lv_obj_refr_size+0x2a8>
            if(!lv_obj_is_layout_positioned(child)) {
 8005a44:	4658      	mov	r0, fp
 8005a46:	f7ff f9e7 	bl	8004e18 <lv_obj_is_layout_positioned>
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	bb38      	cbnz	r0, 8005a9e <lv_obj_refr_size+0x2ae>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8005a4e:	2209      	movs	r2, #9
 8005a50:	4658      	mov	r0, fp
 8005a52:	f001 fd1b 	bl	800748c <lv_obj_get_style_prop>
    return (lv_align_t)v.num;
 8005a56:	b2c0      	uxtb	r0, r0
                switch(align) {
 8005a58:	2808      	cmp	r0, #8
 8005a5a:	d806      	bhi.n	8005a6a <lv_obj_refr_size+0x27a>
 8005a5c:	e8df f000 	tbb	[pc, r0]
 8005a60:	1f05051f 	.word	0x1f05051f
 8005a64:	051f0505 	.word	0x051f0505
 8005a68:	1f          	.byte	0x1f
 8005a69:	00          	.byte	0x00
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8005a6a:	2207      	movs	r2, #7
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4658      	mov	r0, fp
 8005a70:	f001 fd0c 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005a74:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_x(child, 0) == 0) {
 8005a76:	b978      	cbnz	r0, 8005a98 <lv_obj_refr_size+0x2a8>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005a78:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 8005a7c:	f8bb 3014 	ldrh.w	r3, [fp, #20]
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 8005a80:	9904      	ldr	r1, [sp, #16]
 8005a82:	3201      	adds	r2, #1
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	fa01 f383 	sxtah	r3, r1, r3
 8005a8c:	4598      	cmp	r8, r3
 8005a8e:	dc03      	bgt.n	8005a98 <lv_obj_refr_size+0x2a8>
 8005a90:	eb06 0802 	add.w	r8, r6, r2
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8005a94:	fa0f f888 	sxth.w	r8, r8
        for(i = 0; i < child_cnt; i++) {
 8005a98:	f10a 0a01 	add.w	sl, sl, #1
 8005a9c:	e7a7      	b.n	80059ee <lv_obj_refr_size+0x1fe>
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8005a9e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8005aa2:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	4598      	cmp	r8, r3
 8005aac:	bfb8      	it	lt
 8005aae:	4698      	movlt	r8, r3
 8005ab0:	e7f0      	b.n	8005a94 <lv_obj_refr_size+0x2a4>
            lv_obj_t * child = obj->spec_attr->children[i];
 8005ab2:	68a3      	ldr	r3, [r4, #8]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005ab4:	4981      	ldr	r1, [pc, #516]	; (8005cbc <lv_obj_refr_size+0x4cc>)
            lv_obj_t * child = obj->spec_attr->children[i];
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f853 b02a 	ldr.w	fp, [r3, sl, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005abc:	4658      	mov	r0, fp
 8005abe:	f7fe fabb 	bl	8004038 <lv_obj_has_flag_any>
 8005ac2:	bb90      	cbnz	r0, 8005b2a <lv_obj_refr_size+0x33a>
            if(!lv_obj_is_layout_positioned(child)) {
 8005ac4:	4658      	mov	r0, fp
 8005ac6:	f7ff f9a7 	bl	8004e18 <lv_obj_is_layout_positioned>
 8005aca:	4601      	mov	r1, r0
 8005acc:	b960      	cbnz	r0, 8005ae8 <lv_obj_refr_size+0x2f8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8005ace:	2209      	movs	r2, #9
 8005ad0:	4658      	mov	r0, fp
 8005ad2:	f001 fcdb 	bl	800748c <lv_obj_get_style_prop>
                switch(align) {
 8005ad6:	b2c0      	uxtb	r0, r0
 8005ad8:	2807      	cmp	r0, #7
 8005ada:	d80f      	bhi.n	8005afc <lv_obj_refr_size+0x30c>
 8005adc:	2201      	movs	r2, #1
 8005ade:	fa02 f000 	lsl.w	r0, r2, r0
 8005ae2:	f010 0f93 	tst.w	r0, #147	; 0x93
 8005ae6:	d009      	beq.n	8005afc <lv_obj_refr_size+0x30c>
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8005ae8:	f9bb 3018 	ldrsh.w	r3, [fp, #24]
 8005aec:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	3301      	adds	r3, #1
 8005af4:	4598      	cmp	r8, r3
 8005af6:	bfb8      	it	lt
 8005af8:	4698      	movlt	r8, r3
 8005afa:	e014      	b.n	8005b26 <lv_obj_refr_size+0x336>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8005afc:	2208      	movs	r2, #8
 8005afe:	2100      	movs	r1, #0
 8005b00:	4658      	mov	r0, fp
 8005b02:	f001 fcc3 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005b06:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8005b08:	b978      	cbnz	r0, 8005b2a <lv_obj_refr_size+0x33a>
 8005b0a:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 8005b0e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8005b12:	9904      	ldr	r1, [sp, #16]
 8005b14:	3201      	adds	r2, #1
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	fa01 f383 	sxtah	r3, r1, r3
 8005b1e:	4598      	cmp	r8, r3
 8005b20:	dc03      	bgt.n	8005b2a <lv_obj_refr_size+0x33a>
 8005b22:	eb09 0802 	add.w	r8, r9, r2
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8005b26:	fa0f f888 	sxth.w	r8, r8
        for(i = 0; i < child_cnt; i++) {
 8005b2a:	f10a 0a01 	add.w	sl, sl, #1
 8005b2e:	e750      	b.n	80059d2 <lv_obj_refr_size+0x1e2>
        else if(w_is_pct) {
 8005b30:	2e00      	cmp	r6, #0
 8005b32:	f43f af6b 	beq.w	8005a0c <lv_obj_refr_size+0x21c>
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8005b36:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8005b3a:	f011 0104 	ands.w	r1, r1, #4
 8005b3e:	d116      	bne.n	8005b6e <lv_obj_refr_size+0x37e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8005b40:	2201      	movs	r2, #1
 8005b42:	4638      	mov	r0, r7
 8005b44:	f001 fca2 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005b48:	b200      	sxth	r0, r0
 8005b4a:	4540      	cmp	r0, r8
 8005b4c:	d10f      	bne.n	8005b6e <lv_obj_refr_size+0x37e>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f7ff f84c 	bl	8004bec <lv_obj_get_style_border_width.constprop.0>
 8005b54:	4605      	mov	r5, r0
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 8005b56:	4620      	mov	r0, r4
 8005b58:	f7ff f856 	bl	8004c08 <lv_obj_get_style_pad_left.constprop.0>
 8005b5c:	1946      	adds	r6, r0, r5
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7ff f84b 	bl	8004bfa <lv_obj_get_style_pad_right.constprop.0>
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 8005b64:	b2b6      	uxth	r6, r6
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8005b66:	4405      	add	r5, r0
 8005b68:	4435      	add	r5, r6
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 8005b6a:	b22d      	sxth	r5, r5
 8005b6c:	e74e      	b.n	8005a0c <lv_obj_refr_size+0x21c>
 8005b6e:	f425 45c0 	bic.w	r5, r5, #24576	; 0x6000
 8005b72:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8005b76:	9b02      	ldr	r3, [sp, #8]
 8005b78:	bfc8      	it	gt
 8005b7a:	f5c5 757a 	rsbgt	r5, r5, #1000	; 0x3e8
 8005b7e:	435d      	muls	r5, r3
 8005b80:	2064      	movs	r0, #100	; 0x64
 8005b82:	fb95 f5f0 	sdiv	r5, r5, r0
 8005b86:	e7f0      	b.n	8005b6a <lv_obj_refr_size+0x37a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8005b88:	2204      	movs	r2, #4
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f001 fc7d 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005b92:	fa0f f980 	sxth.w	r9, r0
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8005b96:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8005b9a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005b9e:	d106      	bne.n	8005bae <lv_obj_refr_size+0x3be>
 8005ba0:	f429 45c0 	bic.w	r5, r9, #24576	; 0x6000
 8005ba4:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8005ba8:	bfcc      	ite	gt
 8005baa:	2500      	movgt	r5, #0
 8005bac:	2501      	movle	r5, #1
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8005bae:	4638      	mov	r0, r7
 8005bb0:	f7ff f9e6 	bl	8004f80 <lv_obj_get_content_height>
        if(h_is_content) {
 8005bb4:	f242 78d1 	movw	r8, #10193	; 0x27d1
 8005bb8:	45c1      	cmp	r9, r8
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8005bba:	4683      	mov	fp, r0
        if(h_is_content) {
 8005bbc:	f040 8098 	bne.w	8005cf0 <lv_obj_refr_size+0x500>
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 fd93 	bl	80066f0 <lv_obj_scroll_to_y>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f7ff f80e 	bl	8004bec <lv_obj_get_style_border_width.constprop.0>
 8005bd0:	4605      	mov	r5, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7ff f826 	bl	8004c24 <lv_obj_get_style_pad_top.constprop.0>
 8005bd8:	fa10 f085 	uxtah	r0, r0, r5
 8005bdc:	b283      	uxth	r3, r0
 8005bde:	9303      	str	r3, [sp, #12]
 8005be0:	b203      	sxth	r3, r0
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8005be2:	4620      	mov	r0, r4
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8005be4:	9305      	str	r3, [sp, #20]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8005be6:	f7ff f816 	bl	8004c16 <lv_obj_get_style_pad_bottom.constprop.0>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8005bea:	fa1f f885 	uxth.w	r8, r5
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8005bee:	4440      	add	r0, r8
 8005bf0:	b283      	uxth	r3, r0
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8005bf2:	4620      	mov	r0, r4
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8005bf4:	9304      	str	r3, [sp, #16]
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8005bf6:	f7ff fa1a 	bl	800502e <lv_obj_get_self_height>
 8005bfa:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	4418      	add	r0, r3
 8005c02:	b205      	sxth	r5, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005c04:	4620      	mov	r0, r4
 8005c06:	f002 fa43 	bl	8008090 <lv_obj_get_child_cnt>
    lv_coord_t child_res = LV_COORD_MIN;
 8005c0a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8005cb8 <lv_obj_refr_size+0x4c8>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005c0e:	9006      	str	r0, [sp, #24]
    for(i = 0; i < child_cnt; i++) {
 8005c10:	f04f 0a00 	mov.w	sl, #0
 8005c14:	9b06      	ldr	r3, [sp, #24]
 8005c16:	4553      	cmp	r3, sl
 8005c18:	d12c      	bne.n	8005c74 <lv_obj_refr_size+0x484>
    if(child_res != LV_COORD_MIN) {
 8005c1a:	4b27      	ldr	r3, [pc, #156]	; (8005cb8 <lv_obj_refr_size+0x4c8>)
 8005c1c:	4598      	cmp	r8, r3
 8005c1e:	d006      	beq.n	8005c2e <lv_obj_refr_size+0x43e>
        child_res += pad_bottom;
 8005c20:	9b04      	ldr	r3, [sp, #16]
 8005c22:	4443      	add	r3, r8
        return LV_MAX(child_res, self_h);
 8005c24:	fa0f f883 	sxth.w	r8, r3
 8005c28:	4545      	cmp	r5, r8
 8005c2a:	bfb8      	it	lt
 8005c2c:	4645      	movlt	r5, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8005c2e:	2205      	movs	r2, #5
 8005c30:	2100      	movs	r1, #0
 8005c32:	4620      	mov	r0, r4
 8005c34:	f001 fc2a 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8005c38:	2206      	movs	r2, #6
    return (lv_coord_t)v.num;
 8005c3a:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8005c3e:	2100      	movs	r1, #0
 8005c40:	4620      	mov	r0, r4
 8005c42:	f001 fc23 	bl	800748c <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8005c46:	465b      	mov	r3, fp
 8005c48:	b202      	sxth	r2, r0
 8005c4a:	4641      	mov	r1, r8
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f7ff fd9d 	bl	800578c <lv_clamp_width>
    if(w_is_content || h_is_content) {
 8005c52:	9b01      	ldr	r3, [sp, #4]
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8005c54:	4605      	mov	r5, r0
    if(w_is_content || h_is_content) {
 8005c56:	b923      	cbnz	r3, 8005c62 <lv_obj_refr_size+0x472>
 8005c58:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8005c5c:	4599      	cmp	r9, r3
 8005c5e:	f47f ae00 	bne.w	8005862 <lv_obj_refr_size+0x72>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 8005c62:	ee18 2a90 	vmov	r2, s17
 8005c66:	ee18 1a10 	vmov	r1, s16
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 fd55 	bl	800671c <lv_obj_scroll_to>
 8005c72:	e5f6      	b.n	8005862 <lv_obj_refr_size+0x72>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005c74:	68a3      	ldr	r3, [r4, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005c76:	4911      	ldr	r1, [pc, #68]	; (8005cbc <lv_obj_refr_size+0x4cc>)
        lv_obj_t * child = obj->spec_attr->children[i];
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f853 602a 	ldr.w	r6, [r3, sl, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f7fe f9da 	bl	8004038 <lv_obj_has_flag_any>
 8005c84:	bb88      	cbnz	r0, 8005cea <lv_obj_refr_size+0x4fa>
        if(!lv_obj_is_layout_positioned(child)) {
 8005c86:	4630      	mov	r0, r6
 8005c88:	f7ff f8c6 	bl	8004e18 <lv_obj_is_layout_positioned>
 8005c8c:	4601      	mov	r1, r0
 8005c8e:	b940      	cbnz	r0, 8005ca2 <lv_obj_refr_size+0x4b2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8005c90:	9007      	str	r0, [sp, #28]
 8005c92:	2209      	movs	r2, #9
 8005c94:	4630      	mov	r0, r6
 8005c96:	f001 fbf9 	bl	800748c <lv_obj_get_style_prop>
    return (lv_align_t)v.num;
 8005c9a:	b2c0      	uxtb	r0, r0
            switch(align) {
 8005c9c:	2803      	cmp	r0, #3
 8005c9e:	9907      	ldr	r1, [sp, #28]
 8005ca0:	d80e      	bhi.n	8005cc0 <lv_obj_refr_size+0x4d0>
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8005ca2:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
 8005ca6:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	3301      	adds	r3, #1
 8005cae:	4598      	cmp	r8, r3
 8005cb0:	bfb8      	it	lt
 8005cb2:	4698      	movlt	r8, r3
 8005cb4:	e017      	b.n	8005ce6 <lv_obj_refr_size+0x4f6>
 8005cb6:	bf00      	nop
 8005cb8:	ffffe001 	.word	0xffffe001
 8005cbc:	00040001 	.word	0x00040001
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f001 fbe2 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005cc8:	b200      	sxth	r0, r0
                    if(lv_obj_get_style_y(child, 0) == 0) {
 8005cca:	b970      	cbnz	r0, 8005cea <lv_obj_refr_size+0x4fa>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005ccc:	8b72      	ldrh	r2, [r6, #26]
 8005cce:	8af3      	ldrh	r3, [r6, #22]
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 8005cd0:	9905      	ldr	r1, [sp, #20]
 8005cd2:	3201      	adds	r2, #1
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	fa01 f383 	sxtah	r3, r1, r3
 8005cdc:	4598      	cmp	r8, r3
 8005cde:	dc04      	bgt.n	8005cea <lv_obj_refr_size+0x4fa>
 8005ce0:	9b03      	ldr	r3, [sp, #12]
 8005ce2:	eb03 0802 	add.w	r8, r3, r2
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8005ce6:	fa0f f888 	sxth.w	r8, r8
    for(i = 0; i < child_cnt; i++) {
 8005cea:	f10a 0a01 	add.w	sl, sl, #1
 8005cee:	e791      	b.n	8005c14 <lv_obj_refr_size+0x424>
        else if(h_is_pct) {
 8005cf0:	b345      	cbz	r5, 8005d44 <lv_obj_refr_size+0x554>
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8005cf2:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8005cf6:	f011 0102 	ands.w	r1, r1, #2
 8005cfa:	d116      	bne.n	8005d2a <lv_obj_refr_size+0x53a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	4638      	mov	r0, r7
 8005d00:	f001 fbc4 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005d04:	b200      	sxth	r0, r0
 8005d06:	4540      	cmp	r0, r8
 8005d08:	d10f      	bne.n	8005d2a <lv_obj_refr_size+0x53a>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f7fe ff6e 	bl	8004bec <lv_obj_get_style_border_width.constprop.0>
 8005d10:	4680      	mov	r8, r0
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 8005d12:	4620      	mov	r0, r4
 8005d14:	f7fe ff86 	bl	8004c24 <lv_obj_get_style_pad_top.constprop.0>
 8005d18:	4440      	add	r0, r8
 8005d1a:	b285      	uxth	r5, r0
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f7fe ff7a 	bl	8004c16 <lv_obj_get_style_pad_bottom.constprop.0>
 8005d22:	4440      	add	r0, r8
 8005d24:	4405      	add	r5, r0
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 8005d26:	b22d      	sxth	r5, r5
 8005d28:	e781      	b.n	8005c2e <lv_obj_refr_size+0x43e>
 8005d2a:	f429 45c0 	bic.w	r5, r9, #24576	; 0x6000
 8005d2e:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8005d32:	bfc8      	it	gt
 8005d34:	f5c5 757a 	rsbgt	r5, r5, #1000	; 0x3e8
 8005d38:	fb05 f50b 	mul.w	r5, r5, fp
 8005d3c:	2064      	movs	r0, #100	; 0x64
 8005d3e:	fb95 f5f0 	sdiv	r5, r5, r0
 8005d42:	e7f0      	b.n	8005d26 <lv_obj_refr_size+0x536>
 8005d44:	464d      	mov	r5, r9
 8005d46:	e772      	b.n	8005c2e <lv_obj_refr_size+0x43e>

08005d48 <layout_update_core>:
{
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4604      	mov	r4, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005d4c:	f002 f9a0 	bl	8008090 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8005d50:	2500      	movs	r5, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005d52:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 8005d54:	42b5      	cmp	r5, r6
 8005d56:	d127      	bne.n	8005da8 <layout_update_core+0x60>
    if(obj->layout_inv == 0) return;
 8005d58:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005d5c:	07da      	lsls	r2, r3, #31
 8005d5e:	d52b      	bpl.n	8005db8 <layout_update_core+0x70>
    obj->layout_inv = 0;
 8005d60:	f36f 0300 	bfc	r3, #0, #1
 8005d64:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_refr_size(obj);
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f7ff fd41 	bl	80057f0 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f7ff fbb2 	bl	80054d8 <lv_obj_refr_pos>
    if(child_cnt > 0) {
 8005d74:	b305      	cbz	r5, 8005db8 <layout_update_core+0x70>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8005d76:	220a      	movs	r2, #10
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f001 fb86 	bl	800748c <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8005d80:	b283      	uxth	r3, r0
        if(layout_id > 0 && layout_id <= layout_cnt) {
 8005d82:	b1cb      	cbz	r3, 8005db8 <layout_update_core+0x70>
 8005d84:	4a0d      	ldr	r2, [pc, #52]	; (8005dbc <layout_update_core+0x74>)
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d315      	bcc.n	8005db8 <layout_update_core+0x70>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 8005d8c:	4a0c      	ldr	r2, [pc, #48]	; (8005dc0 <layout_update_core+0x78>)
 8005d8e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005da0:	6849      	ldr	r1, [r1, #4]
}
 8005da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 8005da6:	4718      	bx	r3
        lv_obj_t * child = obj->spec_attr->children[i];
 8005da8:	68a3      	ldr	r3, [r4, #8]
 8005daa:	681b      	ldr	r3, [r3, #0]
        layout_update_core(child);
 8005dac:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005db0:	f7ff ffca 	bl	8005d48 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 8005db4:	3501      	adds	r5, #1
 8005db6:	e7cd      	b.n	8005d54 <layout_update_core+0xc>
}
 8005db8:	bd70      	pop	{r4, r5, r6, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000b54 	.word	0x20000b54
 8005dc0:	20000e34 	.word	0x20000e34

08005dc4 <lv_obj_update_layout>:
{
 8005dc4:	b538      	push	{r3, r4, r5, lr}
    if(mutex) {
 8005dc6:	4d0b      	ldr	r5, [pc, #44]	; (8005df4 <lv_obj_update_layout+0x30>)
 8005dc8:	782b      	ldrb	r3, [r5, #0]
 8005dca:	b953      	cbnz	r3, 8005de2 <lv_obj_update_layout+0x1e>
    mutex = true;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	702b      	strb	r3, [r5, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8005dd0:	f002 f925 	bl	800801e <lv_obj_get_screen>
 8005dd4:	4604      	mov	r4, r0
    while(scr->scr_layout_inv) {
 8005dd6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005dda:	f013 0202 	ands.w	r2, r3, #2
 8005dde:	d101      	bne.n	8005de4 <lv_obj_update_layout+0x20>
    mutex = false;
 8005de0:	702a      	strb	r2, [r5, #0]
}
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
        scr->scr_layout_inv = 0;
 8005de4:	f36f 0341 	bfc	r3, #1, #1
 8005de8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        layout_update_core(scr);
 8005dec:	4620      	mov	r0, r4
 8005dee:	f7ff ffab 	bl	8005d48 <layout_update_core>
 8005df2:	e7f0      	b.n	8005dd6 <lv_obj_update_layout+0x12>
 8005df4:	20000b58 	.word	0x20000b58

08005df8 <lv_obj_align_to>:
{
 8005df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfc:	b085      	sub	sp, #20
 8005dfe:	468b      	mov	fp, r1
 8005e00:	469a      	mov	sl, r3
 8005e02:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8005e06:	9201      	str	r2, [sp, #4]
 8005e08:	4604      	mov	r4, r0
 8005e0a:	9303      	str	r3, [sp, #12]
    lv_obj_update_layout(obj);
 8005e0c:	f7ff ffda 	bl	8005dc4 <lv_obj_update_layout>
    if(base == NULL) base = lv_obj_get_parent(obj);
 8005e10:	f1bb 0f00 	cmp.w	fp, #0
 8005e14:	d103      	bne.n	8005e1e <lv_obj_align_to+0x26>
 8005e16:	4620      	mov	r0, r4
 8005e18:	f002 f928 	bl	800806c <lv_obj_get_parent>
 8005e1c:	4683      	mov	fp, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f002 f924 	bl	800806c <lv_obj_get_parent>
 8005e24:	4605      	mov	r5, r0
    lv_coord_t pborder = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8005e26:	f7fe fee1 	bl	8004bec <lv_obj_get_style_border_width.constprop.0>
 8005e2a:	4680      	mov	r8, r0
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f7fe feeb 	bl	8004c08 <lv_obj_get_style_pad_left.constprop.0>
 8005e32:	fa10 f088 	uxtah	r0, r0, r8
 8005e36:	b203      	sxth	r3, r0
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 8005e38:	4628      	mov	r0, r5
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
 8005e3a:	9300      	str	r3, [sp, #0]
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 8005e3c:	f7fe fef2 	bl	8004c24 <lv_obj_get_style_pad_top.constprop.0>
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
 8005e40:	fa1f f688 	uxth.w	r6, r8
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 8005e44:	4430      	add	r0, r6
 8005e46:	b203      	sxth	r3, r0
    lv_coord_t bborder = lv_obj_get_style_border_width(base, LV_PART_MAIN);
 8005e48:	4658      	mov	r0, fp
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 8005e4a:	9302      	str	r3, [sp, #8]
    lv_coord_t bborder = lv_obj_get_style_border_width(base, LV_PART_MAIN);
 8005e4c:	f7fe fece 	bl	8004bec <lv_obj_get_style_border_width.constprop.0>
 8005e50:	4607      	mov	r7, r0
    lv_coord_t bleft = lv_obj_get_style_pad_left(base, LV_PART_MAIN) + bborder;
 8005e52:	4658      	mov	r0, fp
 8005e54:	f7fe fed8 	bl	8004c08 <lv_obj_get_style_pad_left.constprop.0>
 8005e58:	fa10 f087 	uxtah	r0, r0, r7
 8005e5c:	b2be      	uxth	r6, r7
 8005e5e:	fa0f f880 	sxth.w	r8, r0
 8005e62:	b287      	uxth	r7, r0
    lv_coord_t btop = lv_obj_get_style_pad_top(base, LV_PART_MAIN) + bborder;
 8005e64:	4658      	mov	r0, fp
 8005e66:	f7fe fedd 	bl	8004c24 <lv_obj_get_style_pad_top.constprop.0>
    if(align == LV_ALIGN_DEFAULT) {
 8005e6a:	9b01      	ldr	r3, [sp, #4]
    lv_coord_t btop = lv_obj_get_style_pad_top(base, LV_PART_MAIN) + bborder;
 8005e6c:	4430      	add	r0, r6
 8005e6e:	b286      	uxth	r6, r0
 8005e70:	fa0f f980 	sxth.w	r9, r0
    if(align == LV_ALIGN_DEFAULT) {
 8005e74:	b983      	cbnz	r3, 8005e98 <lv_obj_align_to+0xa0>
        if(lv_obj_get_style_base_dir(base, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8005e76:	4658      	mov	r0, fp
 8005e78:	f7fe feb1 	bl	8004bde <lv_obj_get_style_base_dir.constprop.0>
 8005e7c:	2801      	cmp	r0, #1
 8005e7e:	d177      	bne.n	8005f70 <lv_obj_align_to+0x178>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8005e80:	4658      	mov	r0, fp
 8005e82:	f7ff f867 	bl	8004f54 <lv_obj_get_content_width>
 8005e86:	8b26      	ldrh	r6, [r4, #24]
 8005e88:	8aa3      	ldrh	r3, [r4, #20]
 8005e8a:	43f6      	mvns	r6, r6
 8005e8c:	441e      	add	r6, r3
 8005e8e:	4437      	add	r7, r6
 8005e90:	4438      	add	r0, r7
 8005e92:	fa0f f880 	sxth.w	r8, r0
            break;
 8005e96:	e06b      	b.n	8005f70 <lv_obj_align_to+0x178>
    switch(align) {
 8005e98:	9b01      	ldr	r3, [sp, #4]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	2b14      	cmp	r3, #20
 8005e9e:	f200 8176 	bhi.w	800618e <lv_obj_align_to+0x396>
 8005ea2:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <lv_obj_align_to+0xb0>)
 8005ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea8:	08005f71 	.word	0x08005f71
 8005eac:	08005f4b 	.word	0x08005f4b
 8005eb0:	08005e81 	.word	0x08005e81
 8005eb4:	08006003 	.word	0x08006003
 8005eb8:	08005fdd 	.word	0x08005fdd
 8005ebc:	0800601b 	.word	0x0800601b
 8005ec0:	08005f23 	.word	0x08005f23
 8005ec4:	08006033 	.word	0x08006033
 8005ec8:	08005efd 	.word	0x08005efd
 8005ecc:	0800604b 	.word	0x0800604b
 8005ed0:	0800605d 	.word	0x0800605d
 8005ed4:	08006095 	.word	0x08006095
 8005ed8:	080060a9 	.word	0x080060a9
 8005edc:	080060b5 	.word	0x080060b5
 8005ee0:	080060ef 	.word	0x080060ef
 8005ee4:	08006103 	.word	0x08006103
 8005ee8:	08006115 	.word	0x08006115
 8005eec:	08006151 	.word	0x08006151
 8005ef0:	0800616b 	.word	0x0800616b
 8005ef4:	08006177 	.word	0x08006177
 8005ef8:	08006183 	.word	0x08006183
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 8005efc:	4658      	mov	r0, fp
 8005efe:	f7ff f829 	bl	8004f54 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005f02:	8b22      	ldrh	r2, [r4, #24]
 8005f04:	8aa3      	ldrh	r3, [r4, #20]
 8005f06:	3201      	adds	r2, #1
 8005f08:	1ad2      	subs	r2, r2, r3
 8005f0a:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 8005f0e:	fa03 f282 	sxtah	r2, r3, r2
 8005f12:	eba7 0762 	sub.w	r7, r7, r2, asr #1
 8005f16:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f1a:	eb07 0760 	add.w	r7, r7, r0, asr #1
 8005f1e:	fa0f f887 	sxth.w	r8, r7
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 8005f22:	4658      	mov	r0, fp
 8005f24:	f7ff f82c 	bl	8004f80 <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005f28:	8b67      	ldrh	r7, [r4, #26]
 8005f2a:	8ae2      	ldrh	r2, [r4, #22]
 8005f2c:	3701      	adds	r7, #1
 8005f2e:	1abf      	subs	r7, r7, r2
 8005f30:	f3c7 32c0 	ubfx	r2, r7, #15, #1
 8005f34:	fa02 f787 	sxtah	r7, r2, r7
 8005f38:	eba6 0667 	sub.w	r6, r6, r7, asr #1
 8005f3c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f40:	eb06 0660 	add.w	r6, r6, r0, asr #1
 8005f44:	fa0f f986 	sxth.w	r9, r6
            break;
 8005f48:	e012      	b.n	8005f70 <lv_obj_align_to+0x178>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 8005f4a:	4658      	mov	r0, fp
 8005f4c:	f7ff f802 	bl	8004f54 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005f50:	8b26      	ldrh	r6, [r4, #24]
 8005f52:	8aa3      	ldrh	r3, [r4, #20]
 8005f54:	3601      	adds	r6, #1
 8005f56:	1af6      	subs	r6, r6, r3
 8005f58:	f3c6 33c0 	ubfx	r3, r6, #15, #1
 8005f5c:	fa03 f686 	sxtah	r6, r3, r6
 8005f60:	eba7 0766 	sub.w	r7, r7, r6, asr #1
 8005f64:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f68:	eb07 0760 	add.w	r7, r7, r0, asr #1
 8005f6c:	fa0f f887 	sxth.w	r8, r7
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005f70:	4628      	mov	r0, r5
 8005f72:	f7fe fe34 	bl	8004bde <lv_obj_get_style_base_dir.constprop.0>
 8005f76:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 8005f7a:	2801      	cmp	r0, #1
 8005f7c:	f9b5 0014 	ldrsh.w	r0, [r5, #20]
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 8005f80:	449a      	add	sl, r3
 8005f82:	ebaa 0a00 	sub.w	sl, sl, r0
 8005f86:	fa1f f688 	uxth.w	r6, r8
 8005f8a:	4628      	mov	r0, r5
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005f8c:	f040 8103 	bne.w	8006196 <lv_obj_align_to+0x39e>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 8005f90:	f000 fa0c 	bl	80063ac <lv_obj_get_scroll_right>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
 8005f94:	9b00      	ldr	r3, [sp, #0]
 8005f96:	4450      	add	r0, sl
 8005f98:	eba0 0803 	sub.w	r8, r0, r3
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 8005f9c:	f9bb 0016 	ldrsh.w	r0, [fp, #22]
 8005fa0:	9b03      	ldr	r3, [sp, #12]
 8005fa2:	4403      	add	r3, r0
 8005fa4:	f9b5 0016 	ldrsh.w	r0, [r5, #22]
 8005fa8:	eba3 0b00 	sub.w	fp, r3, r0
 8005fac:	4628      	mov	r0, r5
 8005fae:	f000 f93c 	bl	800622a <lv_obj_get_scroll_top>
 8005fb2:	9b02      	ldr	r3, [sp, #8]
 8005fb4:	4458      	add	r0, fp
 8005fb6:	1ac5      	subs	r5, r0, r3
 8005fb8:	eb05 0209 	add.w	r2, r5, r9
 8005fbc:	b295      	uxth	r5, r2
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	f002 f826 	bl	8008014 <lv_obj_set_style_align>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
 8005fc8:	4446      	add	r6, r8
 8005fca:	b236      	sxth	r6, r6
    lv_obj_set_pos(obj, x, y);
 8005fcc:	b22a      	sxth	r2, r5
 8005fce:	4631      	mov	r1, r6
 8005fd0:	4620      	mov	r0, r4
}
 8005fd2:	b005      	add	sp, #20
 8005fd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_set_pos(obj, x, y);
 8005fd8:	f7fe beda 	b.w	8004d90 <lv_obj_set_pos>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 8005fdc:	4658      	mov	r0, fp
 8005fde:	f7fe ffb9 	bl	8004f54 <lv_obj_get_content_width>
 8005fe2:	8b22      	ldrh	r2, [r4, #24]
 8005fe4:	8aa3      	ldrh	r3, [r4, #20]
 8005fe6:	3201      	adds	r2, #1
 8005fe8:	1ad2      	subs	r2, r2, r3
 8005fea:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 8005fee:	fa03 f282 	sxtah	r2, r3, r2
 8005ff2:	eba7 0762 	sub.w	r7, r7, r2, asr #1
 8005ff6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005ffa:	eb07 0760 	add.w	r7, r7, r0, asr #1
 8005ffe:	fa0f f887 	sxth.w	r8, r7
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 8006002:	4658      	mov	r0, fp
 8006004:	f7fe ffbc 	bl	8004f80 <lv_obj_get_content_height>
 8006008:	8b67      	ldrh	r7, [r4, #26]
 800600a:	8ae2      	ldrh	r2, [r4, #22]
 800600c:	43ff      	mvns	r7, r7
 800600e:	4417      	add	r7, r2
 8006010:	443e      	add	r6, r7
 8006012:	4430      	add	r0, r6
 8006014:	fa0f f980 	sxth.w	r9, r0
            break;
 8006018:	e7aa      	b.n	8005f70 <lv_obj_align_to+0x178>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 800601a:	4658      	mov	r0, fp
 800601c:	f7fe ff9a 	bl	8004f54 <lv_obj_get_content_width>
 8006020:	8b22      	ldrh	r2, [r4, #24]
 8006022:	8aa3      	ldrh	r3, [r4, #20]
 8006024:	43d2      	mvns	r2, r2
 8006026:	441a      	add	r2, r3
 8006028:	4417      	add	r7, r2
 800602a:	4438      	add	r0, r7
 800602c:	fa0f f880 	sxth.w	r8, r0
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 8006030:	e7e7      	b.n	8006002 <lv_obj_align_to+0x20a>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8006032:	4658      	mov	r0, fp
 8006034:	f7fe ff8e 	bl	8004f54 <lv_obj_get_content_width>
 8006038:	8b22      	ldrh	r2, [r4, #24]
 800603a:	8aa3      	ldrh	r3, [r4, #20]
 800603c:	43d2      	mvns	r2, r2
 800603e:	441a      	add	r2, r3
 8006040:	4417      	add	r7, r2
 8006042:	4438      	add	r0, r7
 8006044:	fa0f f880 	sxth.w	r8, r0
 8006048:	e76b      	b.n	8005f22 <lv_obj_align_to+0x12a>
            y = -lv_obj_get_height(obj);
 800604a:	8ae2      	ldrh	r2, [r4, #22]
 800604c:	8b60      	ldrh	r0, [r4, #26]
 800604e:	3a01      	subs	r2, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006050:	1a12      	subs	r2, r2, r0
 8006052:	fa0f f982 	sxth.w	r9, r2
            x = 0;
 8006056:	f04f 0800 	mov.w	r8, #0
            break;
 800605a:	e789      	b.n	8005f70 <lv_obj_align_to+0x178>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800605c:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8006060:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 8006064:	3301      	adds	r3, #1
 8006066:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006068:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 800606c:	8b22      	ldrh	r2, [r4, #24]
 800606e:	fa00 f083 	sxtah	r0, r0, r3
 8006072:	8aa3      	ldrh	r3, [r4, #20]
 8006074:	3201      	adds	r2, #1
 8006076:	1ad2      	subs	r2, r2, r3
 8006078:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 800607c:	fa03 f382 	sxtah	r3, r3, r2
 8006080:	105b      	asrs	r3, r3, #1
 8006082:	ebc3 0360 	rsb	r3, r3, r0, asr #1
            y = -lv_obj_get_height(obj);
 8006086:	8ae2      	ldrh	r2, [r4, #22]
 8006088:	8b60      	ldrh	r0, [r4, #26]
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800608a:	fa0f f883 	sxth.w	r8, r3
            y = -lv_obj_get_height(obj);
 800608e:	3a01      	subs	r2, #1
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8006090:	1a12      	subs	r2, r2, r0
 8006092:	e05a      	b.n	800614a <lv_obj_align_to+0x352>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006094:	8b22      	ldrh	r2, [r4, #24]
 8006096:	8aa3      	ldrh	r3, [r4, #20]
 8006098:	f8bb 0014 	ldrh.w	r0, [fp, #20]
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 80060a2:	4413      	add	r3, r2
 80060a4:	1a1b      	subs	r3, r3, r0
 80060a6:	e7ee      	b.n	8006086 <lv_obj_align_to+0x28e>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80060a8:	f8bb 201a 	ldrh.w	r2, [fp, #26]
 80060ac:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 80060b0:	3201      	adds	r2, #1
 80060b2:	e7cd      	b.n	8006050 <lv_obj_align_to+0x258>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80060b4:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80060b8:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 80060bc:	3301      	adds	r3, #1
 80060be:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80060c0:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 80060c4:	8b22      	ldrh	r2, [r4, #24]
 80060c6:	fa00 f083 	sxtah	r0, r0, r3
 80060ca:	8aa3      	ldrh	r3, [r4, #20]
 80060cc:	3201      	adds	r2, #1
 80060ce:	1ad2      	subs	r2, r2, r3
 80060d0:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 80060d4:	fa03 f382 	sxtah	r3, r3, r2
 80060d8:	105b      	asrs	r3, r3, #1
 80060da:	ebc3 0360 	rsb	r3, r3, r0, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80060de:	f8bb 201a 	ldrh.w	r2, [fp, #26]
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80060e2:	fa0f f883 	sxth.w	r8, r3
 80060e6:	3201      	adds	r2, #1
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80060e8:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 80060ec:	e7d0      	b.n	8006090 <lv_obj_align_to+0x298>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80060ee:	8b22      	ldrh	r2, [r4, #24]
 80060f0:	8aa3      	ldrh	r3, [r4, #20]
 80060f2:	f8bb 0014 	ldrh.w	r0, [fp, #20]
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 80060fc:	4413      	add	r3, r2
 80060fe:	1a1b      	subs	r3, r3, r0
 8006100:	e7ed      	b.n	80060de <lv_obj_align_to+0x2e6>
            x = -lv_obj_get_width(obj);
 8006102:	8aa3      	ldrh	r3, [r4, #20]
 8006104:	8b20      	ldrh	r0, [r4, #24]
 8006106:	3b01      	subs	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006108:	1a1b      	subs	r3, r3, r0
 800610a:	fa0f f883 	sxth.w	r8, r3
            y = 0;
 800610e:	f04f 0900 	mov.w	r9, #0
            break;
 8006112:	e72d      	b.n	8005f70 <lv_obj_align_to+0x178>
            x = -lv_obj_get_width(obj);
 8006114:	8aa3      	ldrh	r3, [r4, #20]
 8006116:	8b20      	ldrh	r0, [r4, #24]
 8006118:	3b01      	subs	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800611a:	f8bb 201a 	ldrh.w	r2, [fp, #26]
 800611e:	8b66      	ldrh	r6, [r4, #26]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006120:	1a1b      	subs	r3, r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006122:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8006126:	3201      	adds	r2, #1
 8006128:	1a12      	subs	r2, r2, r0
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800612a:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 800612e:	fa00 f082 	sxtah	r0, r0, r2
 8006132:	8ae2      	ldrh	r2, [r4, #22]
 8006134:	3601      	adds	r6, #1
 8006136:	1ab6      	subs	r6, r6, r2
 8006138:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 800613c:	fa02 f286 	sxtah	r2, r2, r6
 8006140:	1052      	asrs	r2, r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006142:	fa0f f883 	sxth.w	r8, r3
 8006146:	ebc2 0260 	rsb	r2, r2, r0, asr #1
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800614a:	fa0f f982 	sxth.w	r9, r2
            break;
 800614e:	e70f      	b.n	8005f70 <lv_obj_align_to+0x178>
            x = -lv_obj_get_width(obj);
 8006150:	8aa3      	ldrh	r3, [r4, #20]
 8006152:	8b20      	ldrh	r0, [r4, #24]
 8006154:	3b01      	subs	r3, #1
 8006156:	1a1b      	subs	r3, r3, r0
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8006158:	8ae2      	ldrh	r2, [r4, #22]
 800615a:	8b60      	ldrh	r0, [r4, #26]
 800615c:	1a12      	subs	r2, r2, r0
 800615e:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 8006162:	fa0f f883 	sxth.w	r8, r3
 8006166:	4402      	add	r2, r0
 8006168:	e7be      	b.n	80060e8 <lv_obj_align_to+0x2f0>
 800616a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800616e:	f8bb 0014 	ldrh.w	r0, [fp, #20]
 8006172:	3301      	adds	r3, #1
 8006174:	e7c8      	b.n	8006108 <lv_obj_align_to+0x310>
 8006176:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800617a:	f8bb 0014 	ldrh.w	r0, [fp, #20]
 800617e:	3301      	adds	r3, #1
 8006180:	e7cb      	b.n	800611a <lv_obj_align_to+0x322>
 8006182:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8006186:	f8bb 0014 	ldrh.w	r0, [fp, #20]
 800618a:	3301      	adds	r3, #1
 800618c:	e7e3      	b.n	8006156 <lv_obj_align_to+0x35e>
    lv_coord_t y = 0;
 800618e:	f04f 0900 	mov.w	r9, #0
    lv_coord_t x = 0;
 8006192:	46c8      	mov	r8, r9
 8006194:	e6ec      	b.n	8005f70 <lv_obj_align_to+0x178>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
 8006196:	f000 f89f 	bl	80062d8 <lv_obj_get_scroll_left>
 800619a:	e6fb      	b.n	8005f94 <lv_obj_align_to+0x19c>

0800619c <lv_obj_get_style_base_dir>:
{
 800619c:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800619e:	2216      	movs	r2, #22
 80061a0:	f001 f974 	bl	800748c <lv_obj_get_style_prop>
}
 80061a4:	b2c0      	uxtb	r0, r0
 80061a6:	bd08      	pop	{r3, pc}

080061a8 <scroll_anim_ready_cb>:
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 80061a8:	6800      	ldr	r0, [r0, #0]
 80061aa:	2200      	movs	r2, #0
 80061ac:	210a      	movs	r1, #10
 80061ae:	f7fd b82d 	b.w	800320c <lv_event_send>

080061b2 <lv_obj_set_scrollbar_mode>:
{
 80061b2:	b538      	push	{r3, r4, r5, lr}
 80061b4:	4604      	mov	r4, r0
 80061b6:	460d      	mov	r5, r1
    lv_obj_allocate_spec_attr(obj);
 80061b8:	f7fe f91a 	bl	80043f0 <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 80061bc:	68a2      	ldr	r2, [r4, #8]
 80061be:	7e13      	ldrb	r3, [r2, #24]
 80061c0:	f003 0103 	and.w	r1, r3, #3
 80061c4:	42a9      	cmp	r1, r5
 80061c6:	d007      	beq.n	80061d8 <lv_obj_set_scrollbar_mode+0x26>
    obj->spec_attr->scrollbar_mode = mode;
 80061c8:	f365 0301 	bfi	r3, r5, #0, #2
 80061cc:	7613      	strb	r3, [r2, #24]
    lv_obj_invalidate(obj);
 80061ce:	4620      	mov	r0, r4
}
 80061d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(obj);
 80061d4:	f7ff b8c8 	b.w	8005368 <lv_obj_invalidate>
}
 80061d8:	bd38      	pop	{r3, r4, r5, pc}

080061da <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 80061da:	6883      	ldr	r3, [r0, #8]
 80061dc:	b11b      	cbz	r3, 80061e6 <lv_obj_get_scrollbar_mode+0xc>
 80061de:	7e18      	ldrb	r0, [r3, #24]
 80061e0:	f000 0003 	and.w	r0, r0, #3
 80061e4:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 80061e6:	2003      	movs	r0, #3
}
 80061e8:	4770      	bx	lr

080061ea <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 80061ea:	6883      	ldr	r3, [r0, #8]
 80061ec:	b11b      	cbz	r3, 80061f6 <lv_obj_get_scroll_dir+0xc>
 80061ee:	7e58      	ldrb	r0, [r3, #25]
 80061f0:	f000 000f 	and.w	r0, r0, #15
 80061f4:	4770      	bx	lr
    else return LV_DIR_ALL;
 80061f6:	200f      	movs	r0, #15
}
 80061f8:	4770      	bx	lr

080061fa <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 80061fa:	6880      	ldr	r0, [r0, #8]
 80061fc:	b110      	cbz	r0, 8006204 <lv_obj_get_scroll_snap_x+0xa>
 80061fe:	7e00      	ldrb	r0, [r0, #24]
 8006200:	f3c0 0081 	ubfx	r0, r0, #2, #2
}
 8006204:	4770      	bx	lr

08006206 <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8006206:	6880      	ldr	r0, [r0, #8]
 8006208:	b110      	cbz	r0, 8006210 <lv_obj_get_scroll_snap_y+0xa>
 800620a:	7e00      	ldrb	r0, [r0, #24]
 800620c:	f3c0 1001 	ubfx	r0, r0, #4, #2
}
 8006210:	4770      	bx	lr

08006212 <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 8006212:	6880      	ldr	r0, [r0, #8]
 8006214:	b110      	cbz	r0, 800621c <lv_obj_get_scroll_x+0xa>
    return -obj->spec_attr->scroll.x;
 8006216:	8a00      	ldrh	r0, [r0, #16]
 8006218:	4240      	negs	r0, r0
 800621a:	b200      	sxth	r0, r0
}
 800621c:	4770      	bx	lr

0800621e <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 800621e:	6880      	ldr	r0, [r0, #8]
 8006220:	b110      	cbz	r0, 8006228 <lv_obj_get_scroll_y+0xa>
    return -obj->spec_attr->scroll.y;
 8006222:	8a40      	ldrh	r0, [r0, #18]
 8006224:	4240      	negs	r0, r0
 8006226:	b200      	sxth	r0, r0
}
 8006228:	4770      	bx	lr

0800622a <lv_obj_get_scroll_top>:
 800622a:	f7ff bff8 	b.w	800621e <lv_obj_get_scroll_y>
	...

08006230 <lv_obj_get_scroll_bottom>:
{
 8006230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006234:	4606      	mov	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006236:	f001 ff2b 	bl	8008090 <lv_obj_get_child_cnt>
    lv_coord_t child_res = LV_COORD_MIN;
 800623a:	4d25      	ldr	r5, [pc, #148]	; (80062d0 <lv_obj_get_scroll_bottom+0xa0>)
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800623c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80062d4 <lv_obj_get_scroll_bottom+0xa4>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006240:	4607      	mov	r7, r0
    for(i = 0; i < child_cnt; i++) {
 8006242:	2400      	movs	r4, #0
 8006244:	42bc      	cmp	r4, r7
 8006246:	d132      	bne.n	80062ae <lv_obj_get_scroll_bottom+0x7e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006248:	2210      	movs	r2, #16
 800624a:	2100      	movs	r1, #0
 800624c:	4630      	mov	r0, r6
 800624e:	f001 f91d 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006252:	2211      	movs	r2, #17
 8006254:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006256:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006258:	4630      	mov	r0, r6
 800625a:	f001 f917 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800625e:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006260:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006262:	2100      	movs	r1, #0
 8006264:	4630      	mov	r0, r6
 8006266:	f001 f911 	bl	800748c <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 800626a:	4b19      	ldr	r3, [pc, #100]	; (80062d0 <lv_obj_get_scroll_bottom+0xa0>)
 800626c:	429d      	cmp	r5, r3
 800626e:	4681      	mov	r9, r0
 8006270:	d005      	beq.n	800627e <lv_obj_get_scroll_bottom+0x4e>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 8006272:	8b73      	ldrh	r3, [r6, #26]
 8006274:	eb08 0700 	add.w	r7, r8, r0
 8006278:	1aff      	subs	r7, r7, r3
 800627a:	443d      	add	r5, r7
 800627c:	b22d      	sxth	r5, r5
    lv_coord_t self_h = lv_obj_get_self_height(obj);
 800627e:	4630      	mov	r0, r6
 8006280:	f7fe fed5 	bl	800502e <lv_obj_get_self_height>
 8006284:	4607      	mov	r7, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8006286:	4630      	mov	r0, r6
 8006288:	f7fe fe5e 	bl	8004f48 <lv_obj_get_height>
 800628c:	eb04 0108 	add.w	r1, r4, r8
 8006290:	eb01 0249 	add.w	r2, r1, r9, lsl #1
 8006294:	19d4      	adds	r4, r2, r7
 8006296:	1a23      	subs	r3, r4, r0
    self_h -= lv_obj_get_scroll_y(obj);
 8006298:	4630      	mov	r0, r6
 800629a:	f7ff ffc0 	bl	800621e <lv_obj_get_scroll_y>
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 800629e:	b29b      	uxth	r3, r3
    self_h -= lv_obj_get_scroll_y(obj);
 80062a0:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_h);
 80062a2:	b200      	sxth	r0, r0
}
 80062a4:	42a8      	cmp	r0, r5
 80062a6:	bfb8      	it	lt
 80062a8:	4628      	movlt	r0, r5
 80062aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_obj_t * child = obj->spec_attr->children[i];
 80062ae:	68b3      	ldr	r3, [r6, #8]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80062b6:	4649      	mov	r1, r9
 80062b8:	4640      	mov	r0, r8
 80062ba:	f7fd febd 	bl	8004038 <lv_obj_has_flag_any>
 80062be:	b920      	cbnz	r0, 80062ca <lv_obj_get_scroll_bottom+0x9a>
        child_res = LV_MAX(child_res, child->coords.y2);
 80062c0:	f9b8 301a 	ldrsh.w	r3, [r8, #26]
 80062c4:	429d      	cmp	r5, r3
 80062c6:	bfb8      	it	lt
 80062c8:	461d      	movlt	r5, r3
    for(i = 0; i < child_cnt; i++) {
 80062ca:	3401      	adds	r4, #1
 80062cc:	e7ba      	b.n	8006244 <lv_obj_get_scroll_bottom+0x14>
 80062ce:	bf00      	nop
 80062d0:	ffffe001 	.word	0xffffe001
 80062d4:	00040001 	.word	0x00040001

080062d8 <lv_obj_get_scroll_left>:
{
 80062d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80062dc:	2100      	movs	r1, #0
{
 80062de:	4605      	mov	r5, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80062e0:	f7ff ff5c 	bl	800619c <lv_obj_get_style_base_dir>
 80062e4:	2801      	cmp	r0, #1
 80062e6:	d006      	beq.n	80062f6 <lv_obj_get_scroll_left+0x1e>
        if(obj->spec_attr == NULL) return 0;
 80062e8:	68a8      	ldr	r0, [r5, #8]
 80062ea:	b110      	cbz	r0, 80062f2 <lv_obj_get_scroll_left+0x1a>
        return -obj->spec_attr->scroll.x;
 80062ec:	8a00      	ldrh	r0, [r0, #16]
 80062ee:	4240      	negs	r0, r0
 80062f0:	b200      	sxth	r0, r0
}
 80062f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80062f6:	2213      	movs	r2, #19
 80062f8:	2100      	movs	r1, #0
 80062fa:	4628      	mov	r0, r5
 80062fc:	f001 f8c6 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006300:	2212      	movs	r2, #18
 8006302:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006304:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006306:	4628      	mov	r0, r5
 8006308:	f001 f8c0 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800630c:	2100      	movs	r1, #0
 800630e:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006310:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006312:	4628      	mov	r0, r5
 8006314:	f001 f8ba 	bl	800748c <lv_obj_get_style_prop>
 8006318:	4680      	mov	r8, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800631a:	4628      	mov	r0, r5
 800631c:	f001 feb8 	bl	8008090 <lv_obj_get_child_cnt>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8006320:	4920      	ldr	r1, [pc, #128]	; (80063a4 <lv_obj_get_scroll_left+0xcc>)
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006322:	4604      	mov	r4, r0
    lv_coord_t x1 = LV_COORD_MAX;
 8006324:	f641 79ff 	movw	r9, #8191	; 0x1fff
    for(i = 0; i < child_cnt; i++) {
 8006328:	2600      	movs	r6, #0
 800632a:	42b4      	cmp	r4, r6
 800632c:	d12a      	bne.n	8006384 <lv_obj_get_scroll_left+0xac>
    if(x1 != LV_COORD_MAX) {
 800632e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006332:	4599      	cmp	r9, r3
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8006334:	bf14      	ite	ne
 8006336:	8aa8      	ldrhne	r0, [r5, #20]
        child_res = LV_COORD_MIN;
 8006338:	4e1b      	ldreq	r6, [pc, #108]	; (80063a8 <lv_obj_get_scroll_left+0xd0>)
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 800633a:	fa1f fa8a 	uxth.w	sl, sl
 800633e:	fa1f f888 	uxth.w	r8, r8
 8006342:	bf1e      	ittt	ne
 8006344:	eb0a 0608 	addne.w	r6, sl, r8
 8006348:	1836      	addne	r6, r6, r0
 800634a:	eba6 0609 	subne.w	r6, r6, r9
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 800634e:	4628      	mov	r0, r5
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8006350:	bf18      	it	ne
 8006352:	b236      	sxthne	r6, r6
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8006354:	f7fe fe5a 	bl	800500c <lv_obj_get_self_width>
 8006358:	4681      	mov	r9, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800635a:	4628      	mov	r0, r5
 800635c:	f7fe fdee 	bl	8004f3c <lv_obj_get_width>
 8006360:	eb0a 0307 	add.w	r3, sl, r7
 8006364:	4602      	mov	r2, r0
    self_w += lv_obj_get_scroll_x(obj);
 8006366:	4628      	mov	r0, r5
 8006368:	f7ff ff53 	bl	8006212 <lv_obj_get_scroll_x>
 800636c:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 8006370:	eb03 0409 	add.w	r4, r3, r9
 8006374:	b2a4      	uxth	r4, r4
 8006376:	4404      	add	r4, r0
 8006378:	1aa0      	subs	r0, r4, r2
    return LV_MAX(child_res, self_w);
 800637a:	b200      	sxth	r0, r0
 800637c:	42b0      	cmp	r0, r6
 800637e:	bfb8      	it	lt
 8006380:	4630      	movlt	r0, r6
 8006382:	e7b6      	b.n	80062f2 <lv_obj_get_scroll_left+0x1a>
        lv_obj_t * child = obj->spec_attr->children[i];
 8006384:	68ab      	ldr	r3, [r5, #8]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f853 b026 	ldr.w	fp, [r3, r6, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800638c:	4658      	mov	r0, fp
 800638e:	f7fd fe53 	bl	8004038 <lv_obj_has_flag_any>
 8006392:	4904      	ldr	r1, [pc, #16]	; (80063a4 <lv_obj_get_scroll_left+0xcc>)
 8006394:	b920      	cbnz	r0, 80063a0 <lv_obj_get_scroll_left+0xc8>
        x1 = LV_MIN(x1, child->coords.x1);
 8006396:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 800639a:	4599      	cmp	r9, r3
 800639c:	bfa8      	it	ge
 800639e:	4699      	movge	r9, r3
    for(i = 0; i < child_cnt; i++) {
 80063a0:	3601      	adds	r6, #1
 80063a2:	e7c2      	b.n	800632a <lv_obj_get_scroll_left+0x52>
 80063a4:	00040001 	.word	0x00040001
 80063a8:	ffffe001 	.word	0xffffe001

080063ac <lv_obj_get_scroll_right>:
{
 80063ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80063b0:	2100      	movs	r1, #0
{
 80063b2:	4606      	mov	r6, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80063b4:	f7ff fef2 	bl	800619c <lv_obj_get_style_base_dir>
 80063b8:	2801      	cmp	r0, #1
 80063ba:	d105      	bne.n	80063c8 <lv_obj_get_scroll_right+0x1c>
        if(obj->spec_attr == NULL) return 0;
 80063bc:	68b0      	ldr	r0, [r6, #8]
 80063be:	b108      	cbz	r0, 80063c4 <lv_obj_get_scroll_right+0x18>
        return obj->spec_attr->scroll.x;
 80063c0:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
}
 80063c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80063c8:	4630      	mov	r0, r6
 80063ca:	f001 fe61 	bl	8008090 <lv_obj_get_child_cnt>
    lv_coord_t child_res = LV_COORD_MIN;
 80063ce:	4d24      	ldr	r5, [pc, #144]	; (8006460 <lv_obj_get_scroll_right+0xb4>)
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80063d0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006464 <lv_obj_get_scroll_right+0xb8>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80063d4:	4607      	mov	r7, r0
    for(i = 0; i < child_cnt; i++) {
 80063d6:	2400      	movs	r4, #0
 80063d8:	42a7      	cmp	r7, r4
 80063da:	d130      	bne.n	800643e <lv_obj_get_scroll_right+0x92>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80063dc:	2213      	movs	r2, #19
 80063de:	2100      	movs	r1, #0
 80063e0:	4630      	mov	r0, r6
 80063e2:	f001 f853 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80063e6:	2212      	movs	r2, #18
 80063e8:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80063ea:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80063ec:	4630      	mov	r0, r6
 80063ee:	f001 f84d 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80063f2:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80063f4:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80063f6:	2100      	movs	r1, #0
 80063f8:	4630      	mov	r0, r6
 80063fa:	f001 f847 	bl	800748c <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 80063fe:	4b18      	ldr	r3, [pc, #96]	; (8006460 <lv_obj_get_scroll_right+0xb4>)
 8006400:	429d      	cmp	r5, r3
 8006402:	4681      	mov	r9, r0
 8006404:	d004      	beq.n	8006410 <lv_obj_get_scroll_right+0x64>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 8006406:	1827      	adds	r7, r4, r0
 8006408:	8b30      	ldrh	r0, [r6, #24]
 800640a:	1a3f      	subs	r7, r7, r0
 800640c:	443d      	add	r5, r7
 800640e:	b22d      	sxth	r5, r5
    self_w = lv_obj_get_self_width(obj);
 8006410:	4630      	mov	r0, r6
 8006412:	f7fe fdfb 	bl	800500c <lv_obj_get_self_width>
 8006416:	4607      	mov	r7, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8006418:	4630      	mov	r0, r6
 800641a:	f7fe fd8f 	bl	8004f3c <lv_obj_get_width>
 800641e:	eb04 0108 	add.w	r1, r4, r8
 8006422:	eb01 0249 	add.w	r2, r1, r9, lsl #1
 8006426:	19d4      	adds	r4, r2, r7
 8006428:	1a23      	subs	r3, r4, r0
    self_w -= lv_obj_get_scroll_x(obj);
 800642a:	4630      	mov	r0, r6
 800642c:	f7ff fef1 	bl	8006212 <lv_obj_get_scroll_x>
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8006430:	b29b      	uxth	r3, r3
    self_w -= lv_obj_get_scroll_x(obj);
 8006432:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_w);
 8006434:	b200      	sxth	r0, r0
 8006436:	42a8      	cmp	r0, r5
 8006438:	bfb8      	it	lt
 800643a:	4628      	movlt	r0, r5
 800643c:	e7c2      	b.n	80063c4 <lv_obj_get_scroll_right+0x18>
        lv_obj_t * child = obj->spec_attr->children[i];
 800643e:	68b3      	ldr	r3, [r6, #8]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8006446:	4649      	mov	r1, r9
 8006448:	4640      	mov	r0, r8
 800644a:	f7fd fdf5 	bl	8004038 <lv_obj_has_flag_any>
 800644e:	b920      	cbnz	r0, 800645a <lv_obj_get_scroll_right+0xae>
        child_res = LV_MAX(child_res, child->coords.x2);
 8006450:	f9b8 3018 	ldrsh.w	r3, [r8, #24]
 8006454:	429d      	cmp	r5, r3
 8006456:	bfb8      	it	lt
 8006458:	461d      	movlt	r5, r3
    for(i = 0; i < child_cnt; i++) {
 800645a:	3401      	adds	r4, #1
 800645c:	e7bc      	b.n	80063d8 <lv_obj_get_scroll_right+0x2c>
 800645e:	bf00      	nop
 8006460:	ffffe001 	.word	0xffffe001
 8006464:	00040001 	.word	0x00040001

08006468 <_lv_obj_scroll_by_raw>:
    if(x == 0 && y == 0) return LV_RES_OK;
 8006468:	ea51 0302 	orrs.w	r3, r1, r2
{
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4604      	mov	r4, r0
 8006470:	460d      	mov	r5, r1
 8006472:	4616      	mov	r6, r2
    if(x == 0 && y == 0) return LV_RES_OK;
 8006474:	d01b      	beq.n	80064ae <_lv_obj_scroll_by_raw+0x46>
    lv_obj_allocate_spec_attr(obj);
 8006476:	f7fd ffbb 	bl	80043f0 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	8a1a      	ldrh	r2, [r3, #16]
 800647e:	442a      	add	r2, r5
 8006480:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 8006482:	8a5a      	ldrh	r2, [r3, #18]
 8006484:	4432      	add	r2, r6
 8006486:	825a      	strh	r2, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 8006488:	4629      	mov	r1, r5
 800648a:	2301      	movs	r3, #1
 800648c:	4632      	mov	r2, r6
 800648e:	4620      	mov	r0, r4
 8006490:	f7fe fdf8 	bl	8005084 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8006494:	2200      	movs	r2, #0
 8006496:	210b      	movs	r1, #11
 8006498:	4620      	mov	r0, r4
 800649a:	f7fc feb7 	bl	800320c <lv_event_send>
    if(res != LV_RES_OK) return res;
 800649e:	2801      	cmp	r0, #1
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 80064a0:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 80064a2:	d102      	bne.n	80064aa <_lv_obj_scroll_by_raw+0x42>
    lv_obj_invalidate(obj);
 80064a4:	4620      	mov	r0, r4
 80064a6:	f7fe ff5f 	bl	8005368 <lv_obj_invalidate>
}
 80064aa:	4628      	mov	r0, r5
 80064ac:	bd70      	pop	{r4, r5, r6, pc}
    if(x == 0 && y == 0) return LV_RES_OK;
 80064ae:	2501      	movs	r5, #1
 80064b0:	e7fb      	b.n	80064aa <_lv_obj_scroll_by_raw+0x42>

080064b2 <scroll_y_anim>:
{
 80064b2:	b508      	push	{r3, lr}
 80064b4:	4603      	mov	r3, r0
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 80064b6:	f7ff feb2 	bl	800621e <lv_obj_get_scroll_y>
 80064ba:	4408      	add	r0, r1
 80064bc:	b202      	sxth	r2, r0
 80064be:	2100      	movs	r1, #0
 80064c0:	4618      	mov	r0, r3
}
 80064c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 80064c6:	f7ff bfcf 	b.w	8006468 <_lv_obj_scroll_by_raw>

080064ca <scroll_x_anim>:
{
 80064ca:	b508      	push	{r3, lr}
 80064cc:	4603      	mov	r3, r0
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 80064ce:	f7ff fea0 	bl	8006212 <lv_obj_get_scroll_x>
 80064d2:	4401      	add	r1, r0
 80064d4:	2200      	movs	r2, #0
 80064d6:	4618      	mov	r0, r3
 80064d8:	b209      	sxth	r1, r1
}
 80064da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 80064de:	f7ff bfc3 	b.w	8006468 <_lv_obj_scroll_by_raw>
	...

080064e4 <lv_obj_scroll_by>:
{
 80064e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064e6:	4616      	mov	r6, r2
    if(dx == 0 && dy == 0) return;
 80064e8:	ea51 0206 	orrs.w	r2, r1, r6
{
 80064ec:	b093      	sub	sp, #76	; 0x4c
 80064ee:	4604      	mov	r4, r0
 80064f0:	460d      	mov	r5, r1
    if(dx == 0 && dy == 0) return;
 80064f2:	d05c      	beq.n	80065ae <lv_obj_scroll_by+0xca>
    if(anim_en == LV_ANIM_ON) {
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d15c      	bne.n	80065b2 <lv_obj_scroll_by+0xce>
        lv_disp_t * d = lv_obj_get_disp(obj);
 80064f8:	f001 fd98 	bl	800802c <lv_obj_get_disp>
 80064fc:	4607      	mov	r7, r0
        lv_anim_init(&a);
 80064fe:	a801      	add	r0, sp, #4
 8006500:	f00c f88c 	bl	801261c <lv_anim_init>
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8006504:	4b39      	ldr	r3, [pc, #228]	; (80065ec <lv_obj_scroll_by+0x108>)
    a->var = var;
 8006506:	9401      	str	r4, [sp, #4]
    a->ready_cb = ready_cb;
 8006508:	9304      	str	r3, [sp, #16]
        if(dx) {
 800650a:	b33d      	cbz	r5, 800655c <lv_obj_scroll_by+0x78>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 800650c:	4638      	mov	r0, r7
 800650e:	f00b ff2f 	bl	8012370 <lv_disp_get_hor_res>
 8006512:	462a      	mov	r2, r5
 8006514:	2100      	movs	r1, #0
 8006516:	f340 005d 	sbfx	r0, r0, #1, #30
 800651a:	f00c f923 	bl	8012764 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800651e:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8006522:	bf28      	it	cs
 8006524:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 8006528:	28c8      	cmp	r0, #200	; 0xc8
 800652a:	bf38      	it	cc
 800652c:	20c8      	movcc	r0, #200	; 0xc8
 800652e:	900c      	str	r0, [sp, #48]	; 0x30
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 8006530:	4620      	mov	r0, r4
 8006532:	f7ff fe6e 	bl	8006212 <lv_obj_get_scroll_x>
            lv_anim_set_values(&a, -sx, -sx + dx);
 8006536:	4243      	negs	r3, r0
 8006538:	1a29      	subs	r1, r5, r0
    a->current_value = start;
 800653a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 800653e:	4b2c      	ldr	r3, [pc, #176]	; (80065f0 <lv_obj_scroll_by+0x10c>)
    a->end_value = end;
 8006540:	910b      	str	r1, [sp, #44]	; 0x2c
    a->exec_cb = exec_cb;
 8006542:	9302      	str	r3, [sp, #8]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8006544:	aa01      	add	r2, sp, #4
    a->path_cb = path_cb;
 8006546:	4b2b      	ldr	r3, [pc, #172]	; (80065f4 <lv_obj_scroll_by+0x110>)
 8006548:	9308      	str	r3, [sp, #32]
 800654a:	2109      	movs	r1, #9
 800654c:	4620      	mov	r0, r4
 800654e:	f7fc fe5d 	bl	800320c <lv_event_send>
            if(res != LV_RES_OK) return;
 8006552:	2801      	cmp	r0, #1
 8006554:	d12b      	bne.n	80065ae <lv_obj_scroll_by+0xca>
            lv_anim_start(&a);
 8006556:	a801      	add	r0, sp, #4
 8006558:	f00c f8aa 	bl	80126b0 <lv_anim_start>
        if(dy) {
 800655c:	b33e      	cbz	r6, 80065ae <lv_obj_scroll_by+0xca>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 800655e:	4638      	mov	r0, r7
 8006560:	f00b ff16 	bl	8012390 <lv_disp_get_ver_res>
 8006564:	4632      	mov	r2, r6
 8006566:	2100      	movs	r1, #0
 8006568:	f340 005d 	sbfx	r0, r0, #1, #30
 800656c:	f00c f8fa 	bl	8012764 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8006570:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8006574:	bf28      	it	cs
 8006576:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 800657a:	28c8      	cmp	r0, #200	; 0xc8
 800657c:	bf38      	it	cc
 800657e:	20c8      	movcc	r0, #200	; 0xc8
 8006580:	900c      	str	r0, [sp, #48]	; 0x30
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 8006582:	4620      	mov	r0, r4
 8006584:	f7ff fe4b 	bl	800621e <lv_obj_get_scroll_y>
            lv_anim_set_values(&a, -sy, -sy + dy);
 8006588:	4243      	negs	r3, r0
    a->current_value = start;
 800658a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800658e:	1a30      	subs	r0, r6, r0
    a->exec_cb = exec_cb;
 8006590:	4b19      	ldr	r3, [pc, #100]	; (80065f8 <lv_obj_scroll_by+0x114>)
    a->end_value = end;
 8006592:	900b      	str	r0, [sp, #44]	; 0x2c
    a->exec_cb = exec_cb;
 8006594:	9302      	str	r3, [sp, #8]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8006596:	aa01      	add	r2, sp, #4
    a->path_cb = path_cb;
 8006598:	4b16      	ldr	r3, [pc, #88]	; (80065f4 <lv_obj_scroll_by+0x110>)
 800659a:	9308      	str	r3, [sp, #32]
 800659c:	2109      	movs	r1, #9
 800659e:	4620      	mov	r0, r4
 80065a0:	f7fc fe34 	bl	800320c <lv_event_send>
            if(res != LV_RES_OK) return;
 80065a4:	2801      	cmp	r0, #1
 80065a6:	d102      	bne.n	80065ae <lv_obj_scroll_by+0xca>
            lv_anim_start(&a);
 80065a8:	a801      	add	r0, sp, #4
 80065aa:	f00c f881 	bl	80126b0 <lv_anim_start>
}
 80065ae:	b013      	add	sp, #76	; 0x4c
 80065b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_anim_del(obj, scroll_y_anim);
 80065b2:	4911      	ldr	r1, [pc, #68]	; (80065f8 <lv_obj_scroll_by+0x114>)
 80065b4:	f00c f84c 	bl	8012650 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 80065b8:	490d      	ldr	r1, [pc, #52]	; (80065f0 <lv_obj_scroll_by+0x10c>)
 80065ba:	4620      	mov	r0, r4
 80065bc:	f00c f848 	bl	8012650 <lv_anim_del>
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 80065c0:	2200      	movs	r2, #0
 80065c2:	2109      	movs	r1, #9
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7fc fe21 	bl	800320c <lv_event_send>
        if(res != LV_RES_OK) return;
 80065ca:	2801      	cmp	r0, #1
 80065cc:	d1ef      	bne.n	80065ae <lv_obj_scroll_by+0xca>
        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 80065ce:	4632      	mov	r2, r6
 80065d0:	4629      	mov	r1, r5
 80065d2:	4620      	mov	r0, r4
 80065d4:	f7ff ff48 	bl	8006468 <_lv_obj_scroll_by_raw>
        if(res != LV_RES_OK) return;
 80065d8:	2801      	cmp	r0, #1
 80065da:	d1e8      	bne.n	80065ae <lv_obj_scroll_by+0xca>
        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 80065dc:	2200      	movs	r2, #0
 80065de:	210a      	movs	r1, #10
 80065e0:	4620      	mov	r0, r4
}
 80065e2:	b013      	add	sp, #76	; 0x4c
 80065e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 80065e8:	f7fc be10 	b.w	800320c <lv_event_send>
 80065ec:	080061a9 	.word	0x080061a9
 80065f0:	080064cb 	.word	0x080064cb
 80065f4:	08012781 	.word	0x08012781
 80065f8:	080064b3 	.word	0x080064b3

080065fc <lv_obj_scroll_by_bounded>:
{
 80065fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006600:	4699      	mov	r9, r3
    if(dx == 0 && dy == 0) return;
 8006602:	ea51 0302 	orrs.w	r3, r1, r2
{
 8006606:	4607      	mov	r7, r0
 8006608:	460c      	mov	r4, r1
 800660a:	4615      	mov	r5, r2
    if(dx == 0 && dy == 0) return;
 800660c:	d058      	beq.n	80066c0 <lv_obj_scroll_by_bounded+0xc4>
    lv_obj_update_layout(obj);
 800660e:	f7ff fbd9 	bl	8005dc4 <lv_obj_update_layout>
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 8006612:	4638      	mov	r0, r7
 8006614:	f7ff fdfd 	bl	8006212 <lv_obj_get_scroll_x>
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8006618:	2100      	movs	r1, #0
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 800661a:	fa1f f880 	uxth.w	r8, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800661e:	4638      	mov	r0, r7
 8006620:	f7ff fdbc 	bl	800619c <lv_obj_get_style_base_dir>
    lv_coord_t x_bounded = x_current + dx;
 8006624:	eba4 0408 	sub.w	r4, r4, r8
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8006628:	2801      	cmp	r0, #1
    lv_coord_t x_bounded = x_current + dx;
 800662a:	b224      	sxth	r4, r4
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800662c:	d033      	beq.n	8006696 <lv_obj_scroll_by_bounded+0x9a>
        if(x_bounded < 0) {
 800662e:	2c00      	cmp	r4, #0
 8006630:	da42      	bge.n	80066b8 <lv_obj_scroll_by_bounded+0xbc>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8006632:	4638      	mov	r0, r7
 8006634:	f7ff fe50 	bl	80062d8 <lv_obj_get_scroll_left>
 8006638:	4606      	mov	r6, r0
 800663a:	4638      	mov	r0, r7
 800663c:	f7ff feb6 	bl	80063ac <lv_obj_get_scroll_right>
 8006640:	1832      	adds	r2, r6, r0
 8006642:	b212      	sxth	r2, r2
            if(scroll_max < 0) scroll_max = 0;
 8006644:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 8006648:	4252      	negs	r2, r2
 800664a:	4294      	cmp	r4, r2
 800664c:	da00      	bge.n	8006650 <lv_obj_scroll_by_bounded+0x54>
 800664e:	b214      	sxth	r4, r2
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 8006650:	4638      	mov	r0, r7
 8006652:	f7ff fde4 	bl	800621e <lv_obj_get_scroll_y>
 8006656:	b286      	uxth	r6, r0
    lv_coord_t y_bounded = y_current + dy;
 8006658:	1bad      	subs	r5, r5, r6
 800665a:	b22d      	sxth	r5, r5
    if(y_bounded < 0) {
 800665c:	2d00      	cmp	r5, #0
 800665e:	da2d      	bge.n	80066bc <lv_obj_scroll_by_bounded+0xc0>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 8006660:	4638      	mov	r0, r7
 8006662:	f7ff fde5 	bl	8006230 <lv_obj_get_scroll_bottom>
 8006666:	1833      	adds	r3, r6, r0
 8006668:	b21b      	sxth	r3, r3
        if(scroll_max < 0) scroll_max = 0;
 800666a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 800666e:	425b      	negs	r3, r3
 8006670:	429d      	cmp	r5, r3
 8006672:	da00      	bge.n	8006676 <lv_obj_scroll_by_bounded+0x7a>
 8006674:	b21d      	sxth	r5, r3
    dx = x_bounded - x_current;
 8006676:	eb08 0104 	add.w	r1, r8, r4
    dy = y_bounded - y_current;
 800667a:	4435      	add	r5, r6
    dx = x_bounded - x_current;
 800667c:	b289      	uxth	r1, r1
    dy = y_bounded - y_current;
 800667e:	b2aa      	uxth	r2, r5
    if(dx || dy) {
 8006680:	ea51 0302 	orrs.w	r3, r1, r2
 8006684:	d01c      	beq.n	80066c0 <lv_obj_scroll_by_bounded+0xc4>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 8006686:	464b      	mov	r3, r9
 8006688:	4638      	mov	r0, r7
 800668a:	b212      	sxth	r2, r2
}
 800668c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 8006690:	b209      	sxth	r1, r1
 8006692:	f7ff bf27 	b.w	80064e4 <lv_obj_scroll_by>
        if(x_bounded > 0) {
 8006696:	2c00      	cmp	r4, #0
 8006698:	dd0e      	ble.n	80066b8 <lv_obj_scroll_by_bounded+0xbc>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800669a:	4638      	mov	r0, r7
 800669c:	f7ff fe1c 	bl	80062d8 <lv_obj_get_scroll_left>
 80066a0:	4606      	mov	r6, r0
 80066a2:	4638      	mov	r0, r7
 80066a4:	f7ff fe82 	bl	80063ac <lv_obj_get_scroll_right>
 80066a8:	4406      	add	r6, r0
 80066aa:	b236      	sxth	r6, r6
            if(x_bounded > scroll_max) x_bounded = scroll_max;
 80066ac:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80066b0:	42b4      	cmp	r4, r6
 80066b2:	bfa8      	it	ge
 80066b4:	4634      	movge	r4, r6
 80066b6:	e7cb      	b.n	8006650 <lv_obj_scroll_by_bounded+0x54>
 80066b8:	2400      	movs	r4, #0
 80066ba:	e7c9      	b.n	8006650 <lv_obj_scroll_by_bounded+0x54>
 80066bc:	2500      	movs	r5, #0
 80066be:	e7da      	b.n	8006676 <lv_obj_scroll_by_bounded+0x7a>
}
 80066c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080066c4 <lv_obj_scroll_to_x>:
{
 80066c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066c6:	4604      	mov	r4, r0
 80066c8:	460d      	mov	r5, r1
    lv_anim_del(obj, scroll_x_anim);
 80066ca:	4908      	ldr	r1, [pc, #32]	; (80066ec <lv_obj_scroll_to_x+0x28>)
{
 80066cc:	9201      	str	r2, [sp, #4]
    lv_anim_del(obj, scroll_x_anim);
 80066ce:	f00b ffbf 	bl	8012650 <lv_anim_del>
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 80066d2:	4620      	mov	r0, r4
 80066d4:	f7ff fd9d 	bl	8006212 <lv_obj_get_scroll_x>
    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 80066d8:	9b01      	ldr	r3, [sp, #4]
    lv_coord_t diff = -x + scroll_x;
 80066da:	1b40      	subs	r0, r0, r5
    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 80066dc:	b201      	sxth	r1, r0
 80066de:	2200      	movs	r2, #0
 80066e0:	4620      	mov	r0, r4
}
 80066e2:	b003      	add	sp, #12
 80066e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 80066e8:	f7ff bf88 	b.w	80065fc <lv_obj_scroll_by_bounded>
 80066ec:	080064cb 	.word	0x080064cb

080066f0 <lv_obj_scroll_to_y>:
{
 80066f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066f2:	4604      	mov	r4, r0
 80066f4:	460d      	mov	r5, r1
    lv_anim_del(obj, scroll_y_anim);
 80066f6:	4908      	ldr	r1, [pc, #32]	; (8006718 <lv_obj_scroll_to_y+0x28>)
{
 80066f8:	9201      	str	r2, [sp, #4]
    lv_anim_del(obj, scroll_y_anim);
 80066fa:	f00b ffa9 	bl	8012650 <lv_anim_del>
    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 80066fe:	4620      	mov	r0, r4
 8006700:	f7ff fd8d 	bl	800621e <lv_obj_get_scroll_y>
    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 8006704:	9b01      	ldr	r3, [sp, #4]
    lv_coord_t diff = -y + scroll_y;
 8006706:	1b40      	subs	r0, r0, r5
    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 8006708:	b202      	sxth	r2, r0
 800670a:	2100      	movs	r1, #0
 800670c:	4620      	mov	r0, r4
}
 800670e:	b003      	add	sp, #12
 8006710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 8006714:	f7ff bf72 	b.w	80065fc <lv_obj_scroll_by_bounded>
 8006718:	080064b3 	.word	0x080064b3

0800671c <lv_obj_scroll_to>:
{
 800671c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800671e:	4615      	mov	r5, r2
 8006720:	461a      	mov	r2, r3
 8006722:	4604      	mov	r4, r0
    lv_obj_scroll_to_x(obj, x, anim_en);
 8006724:	9301      	str	r3, [sp, #4]
 8006726:	f7ff ffcd 	bl	80066c4 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 800672a:	9a01      	ldr	r2, [sp, #4]
 800672c:	4629      	mov	r1, r5
 800672e:	4620      	mov	r0, r4
}
 8006730:	b003      	add	sp, #12
 8006732:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_obj_scroll_to_y(obj, y, anim_en);
 8006736:	f7ff bfdb 	b.w	80066f0 <lv_obj_scroll_to_y>
	...

0800673c <scroll_area_into_view>:
}

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 800673c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006740:	b08b      	sub	sp, #44	; 0x2c
 8006742:	4680      	mov	r8, r0
    lv_obj_t * parent = lv_obj_get_parent(child);
 8006744:	4608      	mov	r0, r1
{
 8006746:	468b      	mov	fp, r1
 8006748:	4691      	mov	r9, r2
 800674a:	9305      	str	r3, [sp, #20]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800674c:	f001 fc8e 	bl	800806c <lv_obj_get_parent>
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 8006750:	2110      	movs	r1, #16
    lv_obj_t * parent = lv_obj_get_parent(child);
 8006752:	4606      	mov	r6, r0
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 8006754:	f7fd fc69 	bl	800402a <lv_obj_has_flag>
 8006758:	2800      	cmp	r0, #0
 800675a:	f000 814f 	beq.w	80069fc <scroll_area_into_view+0x2c0>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 800675e:	4630      	mov	r0, r6
 8006760:	f7ff fd43 	bl	80061ea <lv_obj_get_scroll_dir>
 8006764:	9001      	str	r0, [sp, #4]
    lv_coord_t snap_goal = 0;
    lv_coord_t act = 0;
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 8006766:	4630      	mov	r0, r6
 8006768:	f7ff fd4d 	bl	8006206 <lv_obj_get_scroll_snap_y>
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800676c:	4607      	mov	r7, r0
 800676e:	2800      	cmp	r0, #0
 8006770:	f000 80db 	beq.w	800692a <scroll_area_into_view+0x1ee>
 8006774:	f10b 0a14 	add.w	sl, fp, #20
 8006778:	2232      	movs	r2, #50	; 0x32
 800677a:	2100      	movs	r1, #0
 800677c:	4630      	mov	r0, r6
 800677e:	f000 fe85 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006782:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006784:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006786:	2100      	movs	r1, #0
 8006788:	4630      	mov	r0, r6
 800678a:	f000 fe7f 	bl	800748c <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 800678e:	fa10 f084 	uxtah	r0, r0, r4
 8006792:	b2a3      	uxth	r3, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006794:	2211      	movs	r2, #17
 8006796:	b284      	uxth	r4, r0
 8006798:	2100      	movs	r1, #0
 800679a:	4630      	mov	r0, r6
 800679c:	9302      	str	r3, [sp, #8]
 800679e:	f000 fe75 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 80067a2:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 80067a6:	8af1      	ldrh	r1, [r6, #22]
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 80067a8:	9b02      	ldr	r3, [sp, #8]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 80067aa:	1aa5      	subs	r5, r4, r2
 80067ac:	440d      	add	r5, r1
 80067ae:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 80067b2:	4418      	add	r0, r3
 80067b4:	b283      	uxth	r3, r0
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 80067b6:	1a6d      	subs	r5, r5, r1
 80067b8:	fa12 f280 	uxtah	r2, r2, r0
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 80067bc:	8b71      	ldrh	r1, [r6, #26]
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 80067be:	9303      	str	r3, [sp, #12]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 80067c0:	b292      	uxth	r2, r2
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 80067c2:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80067c6:	9104      	str	r1, [sp, #16]
 80067c8:	1a51      	subs	r1, r2, r1
 80067ca:	4419      	add	r1, r3
 80067cc:	b209      	sxth	r1, r1
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 80067ce:	4630      	mov	r0, r6
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 80067d0:	9209      	str	r2, [sp, #36]	; 0x24
 80067d2:	9308      	str	r3, [sp, #32]
 80067d4:	9107      	str	r1, [sp, #28]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 80067d6:	f7fe fbb7 	bl	8004f48 <lv_obj_get_height>
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 80067da:	b22d      	sxth	r5, r5
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 80067dc:	2d00      	cmp	r5, #0
 80067de:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 80067e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 80067e4:	9006      	str	r0, [sp, #24]
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 80067e6:	f2c0 80a2 	blt.w	800692e <scroll_area_into_view+0x1f2>
 80067ea:	2900      	cmp	r1, #0
 80067ec:	da06      	bge.n	80067fc <scroll_area_into_view+0xc0>
    else if(top_diff > 0) {
 80067ee:	b12d      	cbz	r5, 80067fc <scroll_area_into_view+0xc0>
        y_scroll = top_diff;
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 80067f0:	4630      	mov	r0, r6
 80067f2:	f7ff fd14 	bl	800621e <lv_obj_get_scroll_y>
        if(st - y_scroll < 0) y_scroll = 0;
 80067f6:	1b40      	subs	r0, r0, r5
 80067f8:	2800      	cmp	r0, #0
 80067fa:	da00      	bge.n	80067fe <scroll_area_into_view+0xc2>
 80067fc:	2500      	movs	r5, #0
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 80067fe:	2f02      	cmp	r7, #2
 8006800:	f000 80a3 	beq.w	800694a <scroll_area_into_view+0x20e>
 8006804:	2f03      	cmp	r7, #3
 8006806:	f000 80a7 	beq.w	8006958 <scroll_area_into_view+0x21c>
 800680a:	2f01      	cmp	r7, #1
 800680c:	d105      	bne.n	800681a <scroll_area_into_view+0xde>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.y1 + ptop;
            act = area_tmp->y1 + y_scroll;
            y_scroll += snap_goal - act;
 800680e:	8af5      	ldrh	r5, [r6, #22]
 8006810:	4425      	add	r5, r4
 8006812:	f8ba 4002 	ldrh.w	r4, [sl, #2]
 8006816:	1b2d      	subs	r5, r5, r4
            break;
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.y2 - pbottom;
            act = area_tmp->y2 + y_scroll;
            y_scroll += snap_goal - act;
 8006818:	b22d      	sxth	r5, r5
            y_scroll += snap_goal - act;
            break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 800681a:	4630      	mov	r0, r6
 800681c:	f7ff fced 	bl	80061fa <lv_obj_get_scroll_snap_x>
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 8006820:	4682      	mov	sl, r0
 8006822:	b108      	cbz	r0, 8006828 <scroll_area_into_view+0xec>
 8006824:	f10b 0814 	add.w	r8, fp, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006828:	2212      	movs	r2, #18
 800682a:	2100      	movs	r1, #0
 800682c:	4630      	mov	r0, r6
 800682e:	f000 fe2d 	bl	800748c <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 8006832:	9b02      	ldr	r3, [sp, #8]
 8006834:	4418      	add	r0, r3
 8006836:	b287      	uxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006838:	2213      	movs	r2, #19
 800683a:	2100      	movs	r1, #0
 800683c:	4630      	mov	r0, r6
 800683e:	f000 fe25 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 8006842:	9b02      	ldr	r3, [sp, #8]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8006844:	f8b9 2000 	ldrh.w	r2, [r9]
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 8006848:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 800684c:	4418      	add	r0, r3
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800684e:	8ab3      	ldrh	r3, [r6, #20]
 8006850:	1abc      	subs	r4, r7, r2
 8006852:	441c      	add	r4, r3
 8006854:	f8b8 3000 	ldrh.w	r3, [r8]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 8006858:	fa1f fb80 	uxth.w	fp, r0
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800685c:	1ae4      	subs	r4, r4, r3
 800685e:	fa12 f080 	uxtah	r0, r2, r0
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 8006862:	8b33      	ldrh	r3, [r6, #24]
 8006864:	b280      	uxth	r0, r0
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8006866:	b224      	sxth	r4, r4
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 8006868:	1ac2      	subs	r2, r0, r3
 800686a:	440a      	add	r2, r1
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800686c:	2c00      	cmp	r4, #0
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800686e:	b212      	sxth	r2, r2
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 8006870:	f2c0 808d 	blt.w	800698e <scroll_area_into_view+0x252>
 8006874:	2a00      	cmp	r2, #0
 8006876:	da06      	bge.n	8006886 <scroll_area_into_view+0x14a>
    else if(left_diff > 0) {
 8006878:	b12c      	cbz	r4, 8006886 <scroll_area_into_view+0x14a>
        x_scroll = left_diff;
        /*Do not let scrolling in*/
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 800687a:	4630      	mov	r0, r6
 800687c:	f7ff fd2c 	bl	80062d8 <lv_obj_get_scroll_left>
        if(sl - x_scroll < 0) x_scroll = 0;
 8006880:	1b00      	subs	r0, r0, r4
 8006882:	2800      	cmp	r0, #0
 8006884:	da00      	bge.n	8006888 <scroll_area_into_view+0x14c>
 8006886:	2400      	movs	r4, #0
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8006888:	4630      	mov	r0, r6
 800688a:	f7fe fb57 	bl	8004f3c <lv_obj_get_width>
    switch(snap_x) {
 800688e:	f1ba 0f02 	cmp.w	sl, #2
 8006892:	f000 8089 	beq.w	80069a8 <scroll_area_into_view+0x26c>
 8006896:	f1ba 0f03 	cmp.w	sl, #3
 800689a:	f000 808d 	beq.w	80069b8 <scroll_area_into_view+0x27c>
 800689e:	f1ba 0f01 	cmp.w	sl, #1
 80068a2:	d105      	bne.n	80068b0 <scroll_area_into_view+0x174>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.x1 + pleft;
            act = area_tmp->x1 + x_scroll;
            x_scroll += snap_goal - act;
 80068a4:	8ab4      	ldrh	r4, [r6, #20]
 80068a6:	443c      	add	r4, r7
 80068a8:	f8b8 7000 	ldrh.w	r7, [r8]
 80068ac:	1be4      	subs	r4, r4, r7
            break;
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.x2 - pright;
            act = area_tmp->x2 + x_scroll;
            x_scroll += snap_goal - act;
 80068ae:	b224      	sxth	r4, r4
            x_scroll += snap_goal - act;
            break;
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 80068b0:	4955      	ldr	r1, [pc, #340]	; (8006a08 <scroll_area_into_view+0x2cc>)
 80068b2:	4630      	mov	r0, r6
 80068b4:	f00b fecc 	bl	8012650 <lv_anim_del>
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 80068b8:	4954      	ldr	r1, [pc, #336]	; (8006a0c <scroll_area_into_view+0x2d0>)
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 80068ba:	4607      	mov	r7, r0
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 80068bc:	4630      	mov	r0, r6
 80068be:	f00b fec7 	bl	8012650 <lv_anim_del>
    if(y_del || x_del) {
 80068c2:	2f00      	cmp	r7, #0
 80068c4:	f040 8092 	bne.w	80069ec <scroll_area_into_view+0x2b0>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	f040 808f 	bne.w	80069ec <scroll_area_into_view+0x2b0>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
        if(res != LV_RES_OK) return;
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 80068ce:	9b01      	ldr	r3, [sp, #4]
 80068d0:	07d8      	lsls	r0, r3, #31
 80068d2:	f140 8096 	bpl.w	8006a02 <scroll_area_into_view+0x2c6>
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 80068d6:	9b01      	ldr	r3, [sp, #4]
 80068d8:	0799      	lsls	r1, r3, #30
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 80068da:	9b01      	ldr	r3, [sp, #4]
 80068dc:	bf58      	it	pl
 80068de:	ea04 74e4 	andpl.w	r4, r4, r4, asr #31
 80068e2:	075a      	lsls	r2, r3, #29
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 80068e4:	9b01      	ldr	r3, [sp, #4]

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 80068e6:	9a05      	ldr	r2, [sp, #20]
 80068e8:	bf58      	it	pl
 80068ea:	ea25 75e5 	bicpl.w	r5, r5, r5, asr #31
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 80068ee:	071b      	lsls	r3, r3, #28
 80068f0:	bf58      	it	pl
 80068f2:	ea05 75e5 	andpl.w	r5, r5, r5, asr #31
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 80068f6:	f8b9 3000 	ldrh.w	r3, [r9]
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	bf14      	ite	ne
 80068fe:	4622      	movne	r2, r4
 8006900:	2200      	moveq	r2, #0
 8006902:	4413      	add	r3, r2
 8006904:	f8a9 3000 	strh.w	r3, [r9]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8006908:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 800690c:	bf14      	ite	ne
 800690e:	462a      	movne	r2, r5
 8006910:	2200      	moveq	r2, #0
 8006912:	4413      	add	r3, r2
 8006914:	f8a9 3002 	strh.w	r3, [r9, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8006918:	9b05      	ldr	r3, [sp, #20]
 800691a:	462a      	mov	r2, r5
 800691c:	4621      	mov	r1, r4
 800691e:	4630      	mov	r0, r6
}
 8006920:	b00b      	add	sp, #44	; 0x2c
 8006922:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8006926:	f7ff bddd 	b.w	80064e4 <lv_obj_scroll_by>
    else area_tmp = area;
 800692a:	46c2      	mov	sl, r8
 800692c:	e724      	b.n	8006778 <scroll_area_into_view+0x3c>
    else if(bottom_diff > 0) {
 800692e:	2900      	cmp	r1, #0
 8006930:	f77f af64 	ble.w	80067fc <scroll_area_into_view+0xc0>
        y_scroll = -bottom_diff;
 8006934:	9904      	ldr	r1, [sp, #16]
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 8006936:	4630      	mov	r0, r6
        y_scroll = -bottom_diff;
 8006938:	1a8d      	subs	r5, r1, r2
 800693a:	1aed      	subs	r5, r5, r3
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800693c:	f7ff fc78 	bl	8006230 <lv_obj_get_scroll_bottom>
        y_scroll = -bottom_diff;
 8006940:	b22d      	sxth	r5, r5
        if(sb + y_scroll < 0) y_scroll = 0;
 8006942:	42e8      	cmn	r0, r5
 8006944:	f57f af5b 	bpl.w	80067fe <scroll_area_into_view+0xc2>
 8006948:	e758      	b.n	80067fc <scroll_area_into_view+0xc0>
            y_scroll += snap_goal - act;
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	8b75      	ldrh	r5, [r6, #26]
 800694e:	1aed      	subs	r5, r5, r3
 8006950:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8006954:	1aed      	subs	r5, r5, r3
 8006956:	e75f      	b.n	8006818 <scroll_area_into_view+0xdc>
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8006958:	9803      	ldr	r0, [sp, #12]
 800695a:	9b06      	ldr	r3, [sp, #24]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800695c:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8006960:	4420      	add	r0, r4
 8006962:	1a1f      	subs	r7, r3, r0
 8006964:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            y_scroll += snap_goal - act;
 8006968:	8af0      	ldrh	r0, [r6, #22]
 800696a:	3301      	adds	r3, #1
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 800696c:	f3c7 35c0 	ubfx	r5, r7, #15, #1
 8006970:	1a9b      	subs	r3, r3, r2
            y_scroll += snap_goal - act;
 8006972:	4404      	add	r4, r0
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 8006974:	fa05 f787 	sxtah	r7, r5, r7
            y_scroll += snap_goal - act;
 8006978:	1aa4      	subs	r4, r4, r2
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800697a:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 800697e:	fa05 f383 	sxtah	r3, r5, r3
            y_scroll += snap_goal - act;
 8006982:	eb04 0767 	add.w	r7, r4, r7, asr #1
 8006986:	eba7 0363 	sub.w	r3, r7, r3, asr #1
 800698a:	b21d      	sxth	r5, r3
            break;
 800698c:	e745      	b.n	800681a <scroll_area_into_view+0xde>
    else if(right_diff > 0) {
 800698e:	2a00      	cmp	r2, #0
 8006990:	f77f af79 	ble.w	8006886 <scroll_area_into_view+0x14a>
        x_scroll = -right_diff;
 8006994:	1a1c      	subs	r4, r3, r0
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 8006996:	4630      	mov	r0, r6
        x_scroll = -right_diff;
 8006998:	1a64      	subs	r4, r4, r1
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 800699a:	f7ff fd07 	bl	80063ac <lv_obj_get_scroll_right>
        x_scroll = -right_diff;
 800699e:	b224      	sxth	r4, r4
        if(sr + x_scroll < 0) x_scroll = 0;
 80069a0:	42e0      	cmn	r0, r4
 80069a2:	f57f af71 	bpl.w	8006888 <scroll_area_into_view+0x14c>
 80069a6:	e76e      	b.n	8006886 <scroll_area_into_view+0x14a>
            x_scroll += snap_goal - act;
 80069a8:	8b34      	ldrh	r4, [r6, #24]
 80069aa:	eba4 040b 	sub.w	r4, r4, fp
 80069ae:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80069b2:	eba4 040b 	sub.w	r4, r4, fp
 80069b6:	e77a      	b.n	80068ae <scroll_area_into_view+0x172>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80069b8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80069bc:	f8b8 2000 	ldrh.w	r2, [r8]
            x_scroll += snap_goal - act;
 80069c0:	8ab4      	ldrh	r4, [r6, #20]
 80069c2:	3301      	adds	r3, #1
 80069c4:	443c      	add	r4, r7
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	1aa4      	subs	r4, r4, r2
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 80069ca:	44bb      	add	fp, r7
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 80069cc:	f3c3 32c0 	ubfx	r2, r3, #15, #1
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 80069d0:	eba0 070b 	sub.w	r7, r0, fp
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 80069d4:	fa02 f383 	sxtah	r3, r2, r3
            x_scroll += snap_goal - act;
 80069d8:	eba4 0363 	sub.w	r3, r4, r3, asr #1
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 80069dc:	f3c7 34c0 	ubfx	r4, r7, #15, #1
 80069e0:	fa04 f787 	sxtah	r7, r4, r7
            x_scroll += snap_goal - act;
 80069e4:	eb03 0767 	add.w	r7, r3, r7, asr #1
 80069e8:	b23c      	sxth	r4, r7
            break;
 80069ea:	e761      	b.n	80068b0 <scroll_area_into_view+0x174>
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 80069ec:	2200      	movs	r2, #0
 80069ee:	210a      	movs	r1, #10
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7fc fc0b 	bl	800320c <lv_event_send>
        if(res != LV_RES_OK) return;
 80069f6:	2801      	cmp	r0, #1
 80069f8:	f43f af69 	beq.w	80068ce <scroll_area_into_view+0x192>
}
 80069fc:	b00b      	add	sp, #44	; 0x2c
 80069fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a02:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006a06:	e766      	b.n	80068d6 <scroll_area_into_view+0x19a>
 8006a08:	080064b3 	.word	0x080064b3
 8006a0c:	080064cb 	.word	0x080064cb

08006a10 <lv_obj_scroll_to_view_recursive>:
{
 8006a10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a12:	4604      	mov	r4, r0
 8006a14:	460e      	mov	r6, r1
    lv_obj_update_layout(obj);
 8006a16:	f7ff f9d5 	bl	8005dc4 <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 8006a1a:	2300      	movs	r3, #0
    lv_obj_t * parent = lv_obj_get_parent(child);
 8006a1c:	4620      	mov	r0, r4
    lv_point_t p = {0, 0};
 8006a1e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006a22:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_t * parent = lv_obj_get_parent(child);
 8006a26:	f001 fb21 	bl	800806c <lv_obj_get_parent>
    lv_obj_t * child = obj;
 8006a2a:	4621      	mov	r1, r4
    lv_obj_t * parent = lv_obj_get_parent(child);
 8006a2c:	4605      	mov	r5, r0
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 8006a2e:	3414      	adds	r4, #20
    while(parent) {
 8006a30:	b90d      	cbnz	r5, 8006a36 <lv_obj_scroll_to_view_recursive+0x26>
}
 8006a32:	b002      	add	sp, #8
 8006a34:	bd70      	pop	{r4, r5, r6, pc}
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 8006a36:	4633      	mov	r3, r6
 8006a38:	aa01      	add	r2, sp, #4
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f7ff fe7e 	bl	800673c <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 8006a40:	4628      	mov	r0, r5
 8006a42:	f001 fb13 	bl	800806c <lv_obj_get_parent>
 8006a46:	4629      	mov	r1, r5
 8006a48:	4605      	mov	r5, r0
 8006a4a:	e7f1      	b.n	8006a30 <lv_obj_scroll_to_view_recursive+0x20>

08006a4c <lv_obj_get_scrollbar_area>:
{
 8006a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a50:	b093      	sub	sp, #76	; 0x4c
    lv_area_set(hor_area, 0, 0, -1, -1);
 8006a52:	f04f 37ff 	mov.w	r7, #4294967295
{
 8006a56:	460d      	mov	r5, r1
 8006a58:	4616      	mov	r6, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	4611      	mov	r1, r2
{
 8006a5e:	4604      	mov	r4, r0
    lv_area_set(hor_area, 0, 0, -1, -1);
 8006a60:	463b      	mov	r3, r7
 8006a62:	4628      	mov	r0, r5
 8006a64:	9700      	str	r7, [sp, #0]
 8006a66:	f00b fec7 	bl	80127f8 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	463b      	mov	r3, r7
 8006a70:	4630      	mov	r0, r6
 8006a72:	9700      	str	r7, [sp, #0]
 8006a74:	f00b fec0 	bl	80127f8 <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 8006a78:	2110      	movs	r1, #16
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f7fd fad5 	bl	800402a <lv_obj_has_flag>
 8006a80:	9003      	str	r0, [sp, #12]
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d047      	beq.n	8006b16 <lv_obj_get_scrollbar_area+0xca>
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 8006a86:	4620      	mov	r0, r4
 8006a88:	f7ff fba7 	bl	80061da <lv_obj_get_scrollbar_mode>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 8006a8c:	4681      	mov	r9, r0
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d041      	beq.n	8006b16 <lv_obj_get_scrollbar_area+0xca>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8006a92:	2000      	movs	r0, #0
 8006a94:	f00b fcae 	bl	80123f4 <lv_indev_get_next>
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 8006a98:	f1b9 0f02 	cmp.w	r9, #2
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8006a9c:	4683      	mov	fp, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 8006a9e:	d037      	beq.n	8006b10 <lv_obj_get_scrollbar_area+0xc4>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f7ff fbbc 	bl	800621e <lv_obj_get_scroll_y>
 8006aa6:	4607      	mov	r7, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f7ff fbc1 	bl	8006230 <lv_obj_get_scroll_bottom>
 8006aae:	9007      	str	r0, [sp, #28]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f7ff fc11 	bl	80062d8 <lv_obj_get_scroll_left>
 8006ab6:	900e      	str	r0, [sp, #56]	; 0x38
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7ff fc77 	bl	80063ac <lv_obj_get_scroll_right>
 8006abe:	9008      	str	r0, [sp, #32]
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f7ff fb92 	bl	80061ea <lv_obj_get_scroll_dir>
    if((dir & LV_DIR_VER) &&
 8006ac6:	f010 0a0c 	ands.w	sl, r0, #12
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 8006aca:	4680      	mov	r8, r0
    if((dir & LV_DIR_VER) &&
 8006acc:	d00e      	beq.n	8006aec <lv_obj_get_scrollbar_area+0xa0>
 8006ace:	f1b9 0f01 	cmp.w	r9, #1
 8006ad2:	d030      	beq.n	8006b36 <lv_obj_get_scrollbar_area+0xea>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8006ad4:	f1b9 0f03 	cmp.w	r9, #3
 8006ad8:	d120      	bne.n	8006b1c <lv_obj_get_scrollbar_area+0xd0>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8006ada:	2f00      	cmp	r7, #0
 8006adc:	dc2b      	bgt.n	8006b36 <lv_obj_get_scrollbar_area+0xea>
 8006ade:	9b07      	ldr	r3, [sp, #28]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bfd4      	ite	le
 8006ae4:	f04f 0a00 	movle.w	sl, #0
 8006ae8:	f04f 0a01 	movgt.w	sl, #1
    if((dir & LV_DIR_HOR) &&
 8006aec:	f018 0f03 	tst.w	r8, #3
 8006af0:	d127      	bne.n	8006b42 <lv_obj_get_scrollbar_area+0xf6>
    if(!hor_draw && !ver_draw) return;
 8006af2:	f1ba 0f00 	cmp.w	sl, #0
 8006af6:	d00e      	beq.n	8006b16 <lv_obj_get_scrollbar_area+0xca>
 8006af8:	2300      	movs	r3, #0
 8006afa:	9303      	str	r3, [sp, #12]
 8006afc:	e02e      	b.n	8006b5c <lv_obj_get_scrollbar_area+0x110>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 8006afe:	4658      	mov	r0, fp
 8006b00:	f7fc fe22 	bl	8003748 <lv_indev_get_scroll_obj>
 8006b04:	4284      	cmp	r4, r0
 8006b06:	d0cb      	beq.n	8006aa0 <lv_obj_get_scrollbar_area+0x54>
            indev = lv_indev_get_next(indev);
 8006b08:	4658      	mov	r0, fp
 8006b0a:	f00b fc73 	bl	80123f4 <lv_indev_get_next>
 8006b0e:	4683      	mov	fp, r0
        while(indev) {
 8006b10:	f1bb 0f00 	cmp.w	fp, #0
 8006b14:	d1f3      	bne.n	8006afe <lv_obj_get_scrollbar_area+0xb2>
}
 8006b16:	b013      	add	sp, #76	; 0x4c
 8006b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8006b1c:	f1b9 0f02 	cmp.w	r9, #2
 8006b20:	d10c      	bne.n	8006b3c <lv_obj_get_scrollbar_area+0xf0>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 8006b22:	4658      	mov	r0, fp
 8006b24:	f7fc fe02 	bl	800372c <lv_indev_get_scroll_dir>
 8006b28:	f1a0 030c 	sub.w	r3, r0, #12
 8006b2c:	f1d3 0a00 	rsbs	sl, r3, #0
 8006b30:	eb4a 0a03 	adc.w	sl, sl, r3
 8006b34:	e7da      	b.n	8006aec <lv_obj_get_scrollbar_area+0xa0>
        ver_draw = true;
 8006b36:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006b3a:	e7d7      	b.n	8006aec <lv_obj_get_scrollbar_area+0xa0>
    bool ver_draw = false;
 8006b3c:	f04f 0a00 	mov.w	sl, #0
 8006b40:	e7d4      	b.n	8006aec <lv_obj_get_scrollbar_area+0xa0>
    if((dir & LV_DIR_HOR) &&
 8006b42:	f1b9 0f01 	cmp.w	r9, #1
 8006b46:	d009      	beq.n	8006b5c <lv_obj_get_scrollbar_area+0x110>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8006b48:	f1b9 0f03 	cmp.w	r9, #3
 8006b4c:	f040 80c9 	bne.w	8006ce2 <lv_obj_get_scrollbar_area+0x296>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8006b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	dc02      	bgt.n	8006b5c <lv_obj_get_scrollbar_area+0x110>
 8006b56:	9b08      	ldr	r3, [sp, #32]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	ddca      	ble.n	8006af2 <lv_obj_get_scrollbar_area+0xa6>
    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_SCROLLBAR) == LV_BASE_DIR_RTL ? true : false;
 8006b5c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006b60:	4620      	mov	r0, r4
 8006b62:	f7ff fb1b 	bl	800619c <lv_obj_get_style_base_dir>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006b66:	2210      	movs	r2, #16
 8006b68:	9004      	str	r0, [sp, #16]
 8006b6a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 fc8c 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006b74:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006b76:	900d      	str	r0, [sp, #52]	; 0x34
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006b78:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f000 fc85 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006b82:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006b84:	900c      	str	r0, [sp, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006b86:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f000 fc7e 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006b90:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006b92:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006b94:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fc77 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006ba4:	900a      	str	r0, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 fc70 	bl	800748c <lv_obj_get_style_prop>
 8006bac:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t obj_h = lv_obj_get_height(obj);
 8006bae:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8006bb0:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8006bb4:	f7fe f9c8 	bl	8004f48 <lv_obj_get_height>
 8006bb8:	4681      	mov	r9, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f7fe f9be 	bl	8004f3c <lv_obj_get_width>
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 8006bc0:	f1ba 0f00 	cmp.w	sl, #0
 8006bc4:	bf14      	ite	ne
 8006bc6:	4643      	movne	r3, r8
 8006bc8:	2300      	moveq	r3, #0
 8006bca:	9306      	str	r3, [sp, #24]
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 8006bcc:	9b03      	ldr	r3, [sp, #12]
    lv_coord_t obj_w = lv_obj_get_width(obj);
 8006bce:	9005      	str	r0, [sp, #20]
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 8006bd0:	2b00      	cmp	r3, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8006bd2:	f04f 0221 	mov.w	r2, #33	; 0x21
 8006bd6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006bda:	4620      	mov	r0, r4
 8006bdc:	bf08      	it	eq
 8006bde:	f04f 0800 	moveq.w	r8, #0
 8006be2:	f000 fc53 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8006be6:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8006be8:	2801      	cmp	r0, #1
 8006bea:	f240 8085 	bls.w	8006cf8 <lv_obj_get_scrollbar_area+0x2ac>
    if(ver_draw && content_h) {
 8006bee:	f1ba 0f00 	cmp.w	sl, #0
 8006bf2:	f040 808c 	bne.w	8006d0e <lv_obj_get_scrollbar_area+0x2c2>
    if(hor_draw && content_w) {
 8006bf6:	9b03      	ldr	r3, [sp, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d08c      	beq.n	8006b16 <lv_obj_get_scrollbar_area+0xca>
    lv_coord_t content_w = obj_w + sl + sr;
 8006bfc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8006c00:	9a08      	ldr	r2, [sp, #32]
 8006c02:	9303      	str	r3, [sp, #12]
 8006c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c06:	4413      	add	r3, r2
 8006c08:	fa1f f883 	uxth.w	r8, r3
 8006c0c:	9b05      	ldr	r3, [sp, #20]
 8006c0e:	fa18 f383 	uxtah	r3, r8, r3
 8006c12:	b219      	sxth	r1, r3
    if(hor_draw && content_w) {
 8006c14:	2900      	cmp	r1, #0
 8006c16:	f43f af7e 	beq.w	8006b16 <lv_obj_get_scrollbar_area+0xca>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 8006c1a:	8b62      	ldrh	r2, [r4, #26]
 8006c1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 8006c1e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8006c22:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
        hor_area->y2 = obj->coords.y2 - bottom_space;
 8006c26:	1ad2      	subs	r2, r2, r3
        hor_area->y1 = hor_area->y2 - tickness + 1;
 8006c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2a:	f1c3 0001 	rsb	r0, r3, #1
        hor_area->x1 = obj->coords.x1;
 8006c2e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8006c32:	802b      	strh	r3, [r5, #0]
        hor_area->x2 = obj->coords.x2;
 8006c34:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8006c38:	80ab      	strh	r3, [r5, #4]
        hor_area->y2 = obj->coords.y2 - bottom_space;
 8006c3a:	b292      	uxth	r2, r2
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 8006c3c:	9b05      	ldr	r3, [sp, #20]
        hor_area->y2 = obj->coords.y2 - bottom_space;
 8006c3e:	80ea      	strh	r2, [r5, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 8006c40:	4402      	add	r2, r0
 8006c42:	806a      	strh	r2, [r5, #2]
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 8006c44:	eba3 0309 	sub.w	r3, r3, r9
 8006c48:	9a06      	ldr	r2, [sp, #24]
 8006c4a:	eba3 030a 	sub.w	r3, r3, sl
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	9a05      	ldr	r2, [sp, #20]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8006c52:	2000      	movs	r0, #0
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 8006c54:	4353      	muls	r3, r2
 8006c56:	fb93 f3f1 	sdiv	r3, r3, r1
 8006c5a:	b21e      	sxth	r6, r3
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8006c5c:	f00b fba8 	bl	80123b0 <lv_disp_get_dpi>
 8006c60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c64:	0040      	lsls	r0, r0, #1
 8006c66:	28ef      	cmp	r0, #239	; 0xef
 8006c68:	f340 8171 	ble.w	8006f4e <lv_obj_get_scrollbar_area+0x502>
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	f00b fb9f 	bl	80123b0 <lv_disp_get_dpi>
 8006c72:	2250      	movs	r2, #80	; 0x50
 8006c74:	210a      	movs	r1, #10
 8006c76:	fb00 2001 	mla	r0, r0, r1, r2
 8006c7a:	22a0      	movs	r2, #160	; 0xa0
 8006c7c:	fb90 f0f2 	sdiv	r0, r0, r2
 8006c80:	4286      	cmp	r6, r0
 8006c82:	dc13      	bgt.n	8006cac <lv_obj_get_scrollbar_area+0x260>
 8006c84:	2000      	movs	r0, #0
 8006c86:	f00b fb93 	bl	80123b0 <lv_disp_get_dpi>
 8006c8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c8e:	0040      	lsls	r0, r0, #1
 8006c90:	28ef      	cmp	r0, #239	; 0xef
 8006c92:	f340 815e 	ble.w	8006f52 <lv_obj_get_scrollbar_area+0x506>
 8006c96:	2000      	movs	r0, #0
 8006c98:	f00b fb8a 	bl	80123b0 <lv_disp_get_dpi>
 8006c9c:	210a      	movs	r1, #10
 8006c9e:	2250      	movs	r2, #80	; 0x50
 8006ca0:	fb00 2001 	mla	r0, r0, r1, r2
 8006ca4:	23a0      	movs	r3, #160	; 0xa0
 8006ca6:	fb90 f3f3 	sdiv	r3, r0, r3
 8006caa:	b21e      	sxth	r6, r3
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 8006cac:	fa0f f888 	sxth.w	r8, r8
        if(scroll_w <= 0) {
 8006cb0:	f1b8 0f00 	cmp.w	r8, #0
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 8006cb4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8006cb8:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8006cbc:	f8bd b018 	ldrh.w	fp, [sp, #24]
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 8006cc0:	f8b4 c014 	ldrh.w	ip, [r4, #20]
        if(scroll_w <= 0) {
 8006cc4:	f300 8151 	bgt.w	8006f6a <lv_obj_get_scrollbar_area+0x51e>
            if(rtl) {
 8006cc8:	9b04      	ldr	r3, [sp, #16]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	8b23      	ldrh	r3, [r4, #24]
 8006cce:	f040 8142 	bne.w	8006f56 <lv_obj_get_scrollbar_area+0x50a>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 8006cd2:	1e51      	subs	r1, r2, #1
 8006cd4:	4461      	add	r1, ip
 8006cd6:	448b      	add	fp, r1
                hor_area->x2 = obj->coords.x2 - right_space;
 8006cd8:	1bdf      	subs	r7, r3, r7
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 8006cda:	f8a5 b000 	strh.w	fp, [r5]
                hor_area->x2 = obj->coords.x2 - right_space;
 8006cde:	80af      	strh	r7, [r5, #4]
 8006ce0:	e719      	b.n	8006b16 <lv_obj_get_scrollbar_area+0xca>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8006ce2:	f1b9 0f02 	cmp.w	r9, #2
 8006ce6:	f47f af04 	bne.w	8006af2 <lv_obj_get_scrollbar_area+0xa6>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 8006cea:	4658      	mov	r0, fp
 8006cec:	f7fc fd1e 	bl	800372c <lv_indev_get_scroll_dir>
 8006cf0:	2803      	cmp	r0, #3
 8006cf2:	f47f aefe 	bne.w	8006af2 <lv_obj_get_scrollbar_area+0xa6>
 8006cf6:	e731      	b.n	8006b5c <lv_obj_get_scrollbar_area+0x110>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8006cf8:	2231      	movs	r2, #49	; 0x31
 8006cfa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 fbc4 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8006d04:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8006d06:	2801      	cmp	r0, #1
 8006d08:	f63f af71 	bhi.w	8006bee <lv_obj_get_scrollbar_area+0x1a2>
 8006d0c:	e703      	b.n	8006b16 <lv_obj_get_scrollbar_area+0xca>
    lv_coord_t content_h = obj_h + st + sb;
 8006d0e:	fa1f f389 	uxth.w	r3, r9
 8006d12:	9311      	str	r3, [sp, #68]	; 0x44
 8006d14:	9b07      	ldr	r3, [sp, #28]
 8006d16:	441f      	add	r7, r3
 8006d18:	b2bf      	uxth	r7, r7
 8006d1a:	fa17 f389 	uxtah	r3, r7, r9
 8006d1e:	b218      	sxth	r0, r3
    if(ver_draw && content_h) {
 8006d20:	2800      	cmp	r0, #0
 8006d22:	f43f af68 	beq.w	8006bf6 <lv_obj_get_scrollbar_area+0x1aa>
        ver_area->y1 = obj->coords.y1;
 8006d26:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8006d2a:	8073      	strh	r3, [r6, #2]
        ver_area->y2 = obj->coords.y2;
 8006d2c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8006d30:	80f3      	strh	r3, [r6, #6]
        if(rtl) {
 8006d32:	9b04      	ldr	r3, [sp, #16]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 8006d34:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
        if(rtl) {
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d15a      	bne.n	8006df2 <lv_obj_get_scrollbar_area+0x3a6>
            ver_area->x1 = obj->coords.x1 + left_space;
 8006d3c:	8aa1      	ldrh	r1, [r4, #20]
 8006d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d40:	4419      	add	r1, r3
 8006d42:	b289      	uxth	r1, r1
            ver_area->x2 = ver_area->x1 + tickness - 1;
 8006d44:	3a01      	subs	r2, #1
            ver_area->x1 = obj->coords.x1 + left_space;
 8006d46:	8031      	strh	r1, [r6, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 8006d48:	4411      	add	r1, r2
 8006d4a:	80b1      	strh	r1, [r6, #4]
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 8006d4c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8006d50:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d52:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8006d56:	9310      	str	r3, [sp, #64]	; 0x40
 8006d58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d5c:	eba9 0303 	sub.w	r3, r9, r3
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	eba3 0308 	sub.w	r3, r3, r8
 8006d66:	fb09 f303 	mul.w	r3, r9, r3
 8006d6a:	fb93 f3f0 	sdiv	r3, r3, r0
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8006d6e:	2000      	movs	r0, #0
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 8006d70:	fa0f fa83 	sxth.w	sl, r3
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8006d74:	f00b fb1c 	bl	80123b0 <lv_disp_get_dpi>
 8006d78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006d7c:	0040      	lsls	r0, r0, #1
 8006d7e:	28ef      	cmp	r0, #239	; 0xef
 8006d80:	dd41      	ble.n	8006e06 <lv_obj_get_scrollbar_area+0x3ba>
 8006d82:	2000      	movs	r0, #0
 8006d84:	f00b fb14 	bl	80123b0 <lv_disp_get_dpi>
 8006d88:	2250      	movs	r2, #80	; 0x50
 8006d8a:	210a      	movs	r1, #10
 8006d8c:	fb00 2001 	mla	r0, r0, r1, r2
 8006d90:	22a0      	movs	r2, #160	; 0xa0
 8006d92:	fb90 f0f2 	sdiv	r0, r0, r2
 8006d96:	4582      	cmp	sl, r0
 8006d98:	dc13      	bgt.n	8006dc2 <lv_obj_get_scrollbar_area+0x376>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	f00b fb08 	bl	80123b0 <lv_disp_get_dpi>
 8006da0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006da4:	0040      	lsls	r0, r0, #1
 8006da6:	28ef      	cmp	r0, #239	; 0xef
 8006da8:	dd2f      	ble.n	8006e0a <lv_obj_get_scrollbar_area+0x3be>
 8006daa:	2000      	movs	r0, #0
 8006dac:	f00b fb00 	bl	80123b0 <lv_disp_get_dpi>
 8006db0:	210a      	movs	r1, #10
 8006db2:	2250      	movs	r2, #80	; 0x50
 8006db4:	fb00 2001 	mla	r0, r0, r1, r2
 8006db8:	23a0      	movs	r3, #160	; 0xa0
 8006dba:	fb90 f3f3 	sdiv	r3, r0, r3
 8006dbe:	fa0f fa83 	sxth.w	sl, r3
            ver_area->y1 = obj->coords.y1 + top_space;
 8006dc2:	8ae0      	ldrh	r0, [r4, #22]
 8006dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8006dc6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8006dca:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 8006dce:	b23f      	sxth	r7, r7
            ver_area->y1 = obj->coords.y1 + top_space;
 8006dd0:	fa10 f083 	uxtah	r0, r0, r3
        if(scroll_h <= 0) {
 8006dd4:	2f00      	cmp	r7, #0
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8006dd6:	fa1f fb88 	uxth.w	fp, r8
            ver_area->y1 = obj->coords.y1 + top_space;
 8006dda:	b280      	uxth	r0, r0
        if(scroll_h <= 0) {
 8006ddc:	dc18      	bgt.n	8006e10 <lv_obj_get_scrollbar_area+0x3c4>
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 8006dde:	8b63      	ldrh	r3, [r4, #26]
            ver_area->y1 = obj->coords.y1 + top_space;
 8006de0:	8070      	strh	r0, [r6, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 8006de2:	ea6f 0909 	mvn.w	r9, r9
 8006de6:	4499      	add	r9, r3
 8006de8:	eba9 0b0b 	sub.w	fp, r9, fp
 8006dec:	f8a6 b006 	strh.w	fp, [r6, #6]
 8006df0:	e701      	b.n	8006bf6 <lv_obj_get_scrollbar_area+0x1aa>
            ver_area->x2 = obj->coords.x2 - right_space;
 8006df2:	8b23      	ldrh	r3, [r4, #24]
 8006df4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006df6:	1a5b      	subs	r3, r3, r1
 8006df8:	b29b      	uxth	r3, r3
            ver_area->x1 = ver_area->x2 - tickness + 1;
 8006dfa:	f1c2 0201 	rsb	r2, r2, #1
            ver_area->x2 = obj->coords.x2 - right_space;
 8006dfe:	80b3      	strh	r3, [r6, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 8006e00:	4413      	add	r3, r2
 8006e02:	8033      	strh	r3, [r6, #0]
 8006e04:	e7a2      	b.n	8006d4c <lv_obj_get_scrollbar_area+0x300>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8006e06:	2001      	movs	r0, #1
 8006e08:	e7c5      	b.n	8006d96 <lv_obj_get_scrollbar_area+0x34a>
 8006e0a:	f04f 0a01 	mov.w	sl, #1
 8006e0e:	e7d8      	b.n	8006dc2 <lv_obj_get_scrollbar_area+0x376>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8006e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e12:	eb01 0209 	add.w	r2, r1, r9
 8006e16:	1a9a      	subs	r2, r3, r2
 8006e18:	fa1f fe8a 	uxth.w	lr, sl
 8006e1c:	eba2 020b 	sub.w	r2, r2, fp
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 8006e20:	9b07      	ldr	r3, [sp, #28]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8006e22:	eba2 020e 	sub.w	r2, r2, lr
 8006e26:	fa1f fc82 	uxth.w	ip, r2
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8006e2a:	fa10 f282 	uxtah	r2, r0, r2
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 8006e2e:	fb1c fc03 	smulbb	ip, ip, r3
 8006e32:	fb9c f7f7 	sdiv	r7, ip, r7
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8006e36:	1bd7      	subs	r7, r2, r7
 8006e38:	fa0f fc87 	sxth.w	ip, r7
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 8006e3c:	f10e 33ff 	add.w	r3, lr, #4294967295
 8006e40:	fa13 f787 	uxtah	r7, r3, r7
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8006e44:	f8a6 c002 	strh.w	ip, [r6, #2]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 8006e48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 8006e4a:	80f7      	strh	r7, [r6, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 8006e4c:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
 8006e50:	443b      	add	r3, r7
 8006e52:	459c      	cmp	ip, r3
 8006e54:	da2f      	bge.n	8006eb6 <lv_obj_get_scrollbar_area+0x46a>
                ver_area->y1 = obj->coords.y1 + top_space;
 8006e56:	440f      	add	r7, r1
 8006e58:	b23f      	sxth	r7, r7
 8006e5a:	8077      	strh	r7, [r6, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f00b faa7 	bl	80123b0 <lv_disp_get_dpi>
 8006e62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006e66:	0040      	lsls	r0, r0, #1
 8006e68:	28ef      	cmp	r0, #239	; 0xef
 8006e6a:	dd68      	ble.n	8006f3e <lv_obj_get_scrollbar_area+0x4f2>
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	f00b fa9f 	bl	80123b0 <lv_disp_get_dpi>
 8006e72:	2350      	movs	r3, #80	; 0x50
 8006e74:	220a      	movs	r2, #10
 8006e76:	fb00 3002 	mla	r0, r0, r2, r3
 8006e7a:	23a0      	movs	r3, #160	; 0xa0
 8006e7c:	fb90 f0f3 	sdiv	r0, r0, r3
 8006e80:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8006e84:	4438      	add	r0, r7
 8006e86:	4298      	cmp	r0, r3
 8006e88:	dd15      	ble.n	8006eb6 <lv_obj_get_scrollbar_area+0x46a>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	8877      	ldrh	r7, [r6, #2]
 8006e8e:	f00b fa8f 	bl	80123b0 <lv_disp_get_dpi>
 8006e92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006e96:	0040      	lsls	r0, r0, #1
 8006e98:	28ef      	cmp	r0, #239	; 0xef
 8006e9a:	dd52      	ble.n	8006f42 <lv_obj_get_scrollbar_area+0x4f6>
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	f00b fa87 	bl	80123b0 <lv_disp_get_dpi>
 8006ea2:	2350      	movs	r3, #80	; 0x50
 8006ea4:	220a      	movs	r2, #10
 8006ea6:	fb00 3002 	mla	r0, r0, r2, r3
 8006eaa:	23a0      	movs	r3, #160	; 0xa0
 8006eac:	fb90 f0f3 	sdiv	r0, r0, r3
 8006eb0:	b280      	uxth	r0, r0
 8006eb2:	4438      	add	r0, r7
 8006eb4:	80f0      	strh	r0, [r6, #6]
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 8006eb6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8006eba:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006ebc:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 8006ec0:	eba3 0808 	sub.w	r8, r3, r8
 8006ec4:	eba8 0801 	sub.w	r8, r8, r1
 8006ec8:	4542      	cmp	r2, r8
 8006eca:	f77f ae94 	ble.w	8006bf6 <lv_obj_get_scrollbar_area+0x1aa>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 8006ece:	eba3 0309 	sub.w	r3, r3, r9
 8006ed2:	eba3 0b0b 	sub.w	fp, r3, fp
 8006ed6:	fa0f fb8b 	sxth.w	fp, fp
 8006eda:	f8a6 b006 	strh.w	fp, [r6, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 8006ede:	2000      	movs	r0, #0
 8006ee0:	f00b fa66 	bl	80123b0 <lv_disp_get_dpi>
 8006ee4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ee8:	0040      	lsls	r0, r0, #1
 8006eea:	28ef      	cmp	r0, #239	; 0xef
 8006eec:	dd2b      	ble.n	8006f46 <lv_obj_get_scrollbar_area+0x4fa>
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f00b fa5e 	bl	80123b0 <lv_disp_get_dpi>
 8006ef4:	2350      	movs	r3, #80	; 0x50
 8006ef6:	220a      	movs	r2, #10
 8006ef8:	fb00 3002 	mla	r0, r0, r2, r3
 8006efc:	23a0      	movs	r3, #160	; 0xa0
 8006efe:	fb90 f0f3 	sdiv	r0, r0, r3
 8006f02:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8006f06:	ebab 0b00 	sub.w	fp, fp, r0
 8006f0a:	459b      	cmp	fp, r3
 8006f0c:	f6bf ae73 	bge.w	8006bf6 <lv_obj_get_scrollbar_area+0x1aa>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8006f10:	2000      	movs	r0, #0
 8006f12:	88f7      	ldrh	r7, [r6, #6]
 8006f14:	f00b fa4c 	bl	80123b0 <lv_disp_get_dpi>
 8006f18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f1c:	0040      	lsls	r0, r0, #1
 8006f1e:	28ef      	cmp	r0, #239	; 0xef
 8006f20:	dd13      	ble.n	8006f4a <lv_obj_get_scrollbar_area+0x4fe>
 8006f22:	2000      	movs	r0, #0
 8006f24:	f00b fa44 	bl	80123b0 <lv_disp_get_dpi>
 8006f28:	2350      	movs	r3, #80	; 0x50
 8006f2a:	220a      	movs	r2, #10
 8006f2c:	fb00 3002 	mla	r0, r0, r2, r3
 8006f30:	23a0      	movs	r3, #160	; 0xa0
 8006f32:	fb90 f0f3 	sdiv	r0, r0, r3
 8006f36:	b280      	uxth	r0, r0
 8006f38:	1a38      	subs	r0, r7, r0
 8006f3a:	8070      	strh	r0, [r6, #2]
 8006f3c:	e65b      	b.n	8006bf6 <lv_obj_get_scrollbar_area+0x1aa>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 8006f3e:	2001      	movs	r0, #1
 8006f40:	e79e      	b.n	8006e80 <lv_obj_get_scrollbar_area+0x434>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8006f42:	2001      	movs	r0, #1
 8006f44:	e7b5      	b.n	8006eb2 <lv_obj_get_scrollbar_area+0x466>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 8006f46:	2001      	movs	r0, #1
 8006f48:	e7db      	b.n	8006f02 <lv_obj_get_scrollbar_area+0x4b6>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8006f4a:	2001      	movs	r0, #1
 8006f4c:	e7f4      	b.n	8006f38 <lv_obj_get_scrollbar_area+0x4ec>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8006f4e:	2001      	movs	r0, #1
 8006f50:	e696      	b.n	8006c80 <lv_obj_get_scrollbar_area+0x234>
 8006f52:	2601      	movs	r6, #1
 8006f54:	e6aa      	b.n	8006cac <lv_obj_get_scrollbar_area+0x260>
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 8006f56:	43ff      	mvns	r7, r7
 8006f58:	441f      	add	r7, r3
                hor_area->x1 = obj->coords.x1 + left_space;
 8006f5a:	eb02 010c 	add.w	r1, r2, ip
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 8006f5e:	eba7 0b0b 	sub.w	fp, r7, fp
                hor_area->x1 = obj->coords.x1 + left_space;
 8006f62:	8029      	strh	r1, [r5, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 8006f64:	f8a5 b004 	strh.w	fp, [r5, #4]
 8006f68:	e5d5      	b.n	8006b16 <lv_obj_get_scrollbar_area+0xca>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 8006f6a:	9803      	ldr	r0, [sp, #12]
 8006f6c:	19d1      	adds	r1, r2, r7
 8006f6e:	b2b3      	uxth	r3, r6
 8006f70:	1a46      	subs	r6, r0, r1
 8006f72:	eba6 060b 	sub.w	r6, r6, fp
 8006f76:	1af6      	subs	r6, r6, r3
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 8006f78:	9908      	ldr	r1, [sp, #32]
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 8006f7a:	b2b6      	uxth	r6, r6
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 8006f7c:	fb16 f101 	smulbb	r1, r6, r1
 8006f80:	fb91 f1f8 	sdiv	r1, r1, r8
            sb_x = rem - sb_x;
 8006f84:	1a71      	subs	r1, r6, r1
 8006f86:	b28e      	uxth	r6, r1
            if(rtl) {
 8006f88:	9904      	ldr	r1, [sp, #16]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	2901      	cmp	r1, #1
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	eb02 010c 	add.w	r1, r2, ip
 8006f94:	f040 8082 	bne.w	800709c <lv_obj_get_scrollbar_area+0x650>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 8006f98:	4459      	add	r1, fp
 8006f9a:	4431      	add	r1, r6
 8006f9c:	b20e      	sxth	r6, r1
 8006f9e:	802e      	strh	r6, [r5, #0]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 8006fa0:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 8006fa4:	fa13 f181 	uxtah	r1, r3, r1
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 8006fa8:	9b06      	ldr	r3, [sp, #24]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 8006faa:	80a9      	strh	r1, [r5, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 8006fac:	4481      	add	r9, r0
 8006fae:	4499      	add	r9, r3
 8006fb0:	454e      	cmp	r6, r9
 8006fb2:	da32      	bge.n	800701a <lv_obj_get_scrollbar_area+0x5ce>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 8006fb4:	4410      	add	r0, r2
 8006fb6:	4483      	add	fp, r0
 8006fb8:	fa0f fb8b 	sxth.w	fp, fp
 8006fbc:	f8a5 b000 	strh.w	fp, [r5]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	f00b f9f5 	bl	80123b0 <lv_disp_get_dpi>
 8006fc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006fca:	0040      	lsls	r0, r0, #1
 8006fcc:	28ef      	cmp	r0, #239	; 0xef
 8006fce:	dd5f      	ble.n	8007090 <lv_obj_get_scrollbar_area+0x644>
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	f00b f9ed 	bl	80123b0 <lv_disp_get_dpi>
 8006fd6:	2350      	movs	r3, #80	; 0x50
 8006fd8:	220a      	movs	r2, #10
 8006fda:	fb00 3002 	mla	r0, r0, r2, r3
 8006fde:	23a0      	movs	r3, #160	; 0xa0
 8006fe0:	fb90 f0f3 	sdiv	r0, r0, r3
 8006fe4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006fe8:	4483      	add	fp, r0
 8006fea:	459b      	cmp	fp, r3
 8006fec:	dd15      	ble.n	800701a <lv_obj_get_scrollbar_area+0x5ce>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8006fee:	2000      	movs	r0, #0
 8006ff0:	882e      	ldrh	r6, [r5, #0]
 8006ff2:	f00b f9dd 	bl	80123b0 <lv_disp_get_dpi>
 8006ff6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ffa:	0040      	lsls	r0, r0, #1
 8006ffc:	28ef      	cmp	r0, #239	; 0xef
 8006ffe:	dd49      	ble.n	8007094 <lv_obj_get_scrollbar_area+0x648>
 8007000:	2000      	movs	r0, #0
 8007002:	f00b f9d5 	bl	80123b0 <lv_disp_get_dpi>
 8007006:	2350      	movs	r3, #80	; 0x50
 8007008:	220a      	movs	r2, #10
 800700a:	fb00 3002 	mla	r0, r0, r2, r3
 800700e:	23a0      	movs	r3, #160	; 0xa0
 8007010:	fb90 f0f3 	sdiv	r0, r0, r3
 8007014:	b280      	uxth	r0, r0
 8007016:	4430      	add	r0, r6
 8007018:	80a8      	strh	r0, [r5, #4]
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 800701a:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 800701e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8007022:	eba3 0a0a 	sub.w	sl, r3, sl
 8007026:	4552      	cmp	r2, sl
 8007028:	f77f ad75 	ble.w	8006b16 <lv_obj_get_scrollbar_area+0xca>
                    hor_area->x2 = obj->coords.x2 - right_space;
 800702c:	1bdf      	subs	r7, r3, r7
 800702e:	b23f      	sxth	r7, r7
 8007030:	80af      	strh	r7, [r5, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8007032:	2000      	movs	r0, #0
 8007034:	f00b f9bc 	bl	80123b0 <lv_disp_get_dpi>
 8007038:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800703c:	0040      	lsls	r0, r0, #1
 800703e:	28ef      	cmp	r0, #239	; 0xef
 8007040:	dd2a      	ble.n	8007098 <lv_obj_get_scrollbar_area+0x64c>
 8007042:	2000      	movs	r0, #0
 8007044:	f00b f9b4 	bl	80123b0 <lv_disp_get_dpi>
 8007048:	2350      	movs	r3, #80	; 0x50
 800704a:	220a      	movs	r2, #10
 800704c:	fb00 3002 	mla	r0, r0, r2, r3
 8007050:	23a0      	movs	r3, #160	; 0xa0
 8007052:	fb90 f0f3 	sdiv	r0, r0, r3
 8007056:	f9b5 3000 	ldrsh.w	r3, [r5]
 800705a:	1a3f      	subs	r7, r7, r0
 800705c:	429f      	cmp	r7, r3
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800705e:	f6bf ad5a 	bge.w	8006b16 <lv_obj_get_scrollbar_area+0xca>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8007062:	2000      	movs	r0, #0
 8007064:	88ac      	ldrh	r4, [r5, #4]
 8007066:	f00b f9a3 	bl	80123b0 <lv_disp_get_dpi>
 800706a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800706e:	0040      	lsls	r0, r0, #1
 8007070:	28ef      	cmp	r0, #239	; 0xef
 8007072:	dd7e      	ble.n	8007172 <lv_obj_get_scrollbar_area+0x726>
 8007074:	2000      	movs	r0, #0
 8007076:	f00b f99b 	bl	80123b0 <lv_disp_get_dpi>
 800707a:	2350      	movs	r3, #80	; 0x50
 800707c:	220a      	movs	r2, #10
 800707e:	fb00 3002 	mla	r0, r0, r2, r3
 8007082:	23a0      	movs	r3, #160	; 0xa0
 8007084:	fb90 f0f3 	sdiv	r0, r0, r3
 8007088:	b280      	uxth	r0, r0
 800708a:	1a20      	subs	r0, r4, r0
 800708c:	8028      	strh	r0, [r5, #0]
 800708e:	e542      	b.n	8006b16 <lv_obj_get_scrollbar_area+0xca>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 8007090:	9804      	ldr	r0, [sp, #16]
 8007092:	e7a7      	b.n	8006fe4 <lv_obj_get_scrollbar_area+0x598>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8007094:	2001      	movs	r0, #1
 8007096:	e7be      	b.n	8007016 <lv_obj_get_scrollbar_area+0x5ca>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8007098:	2001      	movs	r0, #1
 800709a:	e7dc      	b.n	8007056 <lv_obj_get_scrollbar_area+0x60a>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800709c:	4431      	add	r1, r6
 800709e:	b20e      	sxth	r6, r1
 80070a0:	802e      	strh	r6, [r5, #0]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 80070a2:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80070a6:	4481      	add	r9, r0
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 80070a8:	fa13 f181 	uxtah	r1, r3, r1
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 80070ac:	454e      	cmp	r6, r9
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 80070ae:	80a9      	strh	r1, [r5, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 80070b0:	da2f      	bge.n	8007112 <lv_obj_get_scrollbar_area+0x6c6>
                    hor_area->x1 = obj->coords.x1 + left_space;
 80070b2:	4402      	add	r2, r0
 80070b4:	b216      	sxth	r6, r2
 80070b6:	802e      	strh	r6, [r5, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 80070b8:	2000      	movs	r0, #0
 80070ba:	f00b f979 	bl	80123b0 <lv_disp_get_dpi>
 80070be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80070c2:	0040      	lsls	r0, r0, #1
 80070c4:	28ef      	cmp	r0, #239	; 0xef
 80070c6:	dd4e      	ble.n	8007166 <lv_obj_get_scrollbar_area+0x71a>
 80070c8:	2000      	movs	r0, #0
 80070ca:	f00b f971 	bl	80123b0 <lv_disp_get_dpi>
 80070ce:	210a      	movs	r1, #10
 80070d0:	2350      	movs	r3, #80	; 0x50
 80070d2:	fb00 3001 	mla	r0, r0, r1, r3
 80070d6:	22a0      	movs	r2, #160	; 0xa0
 80070d8:	fb90 f2f2 	sdiv	r2, r0, r2
 80070dc:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80070e0:	4432      	add	r2, r6
 80070e2:	429a      	cmp	r2, r3
 80070e4:	dd15      	ble.n	8007112 <lv_obj_get_scrollbar_area+0x6c6>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 80070e6:	2000      	movs	r0, #0
 80070e8:	882e      	ldrh	r6, [r5, #0]
 80070ea:	f00b f961 	bl	80123b0 <lv_disp_get_dpi>
 80070ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80070f2:	0040      	lsls	r0, r0, #1
 80070f4:	28ef      	cmp	r0, #239	; 0xef
 80070f6:	dd38      	ble.n	800716a <lv_obj_get_scrollbar_area+0x71e>
 80070f8:	2000      	movs	r0, #0
 80070fa:	f00b f959 	bl	80123b0 <lv_disp_get_dpi>
 80070fe:	2350      	movs	r3, #80	; 0x50
 8007100:	220a      	movs	r2, #10
 8007102:	fb00 3002 	mla	r0, r0, r2, r3
 8007106:	23a0      	movs	r3, #160	; 0xa0
 8007108:	fb90 f0f3 	sdiv	r0, r0, r3
 800710c:	b280      	uxth	r0, r0
 800710e:	4430      	add	r0, r6
 8007110:	80a8      	strh	r0, [r5, #4]
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 8007112:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8007116:	9b06      	ldr	r3, [sp, #24]
 8007118:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	eba3 0a0a 	sub.w	sl, r3, sl
 8007122:	4551      	cmp	r1, sl
 8007124:	f77f acf7 	ble.w	8006b16 <lv_obj_get_scrollbar_area+0xca>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 8007128:	1bd2      	subs	r2, r2, r7
 800712a:	eba2 0b0b 	sub.w	fp, r2, fp
 800712e:	fa0f fb8b 	sxth.w	fp, fp
 8007132:	f8a5 b004 	strh.w	fp, [r5, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8007136:	2000      	movs	r0, #0
 8007138:	f00b f93a 	bl	80123b0 <lv_disp_get_dpi>
 800713c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007140:	0040      	lsls	r0, r0, #1
 8007142:	28ef      	cmp	r0, #239	; 0xef
 8007144:	dd13      	ble.n	800716e <lv_obj_get_scrollbar_area+0x722>
 8007146:	2000      	movs	r0, #0
 8007148:	f00b f932 	bl	80123b0 <lv_disp_get_dpi>
 800714c:	2350      	movs	r3, #80	; 0x50
 800714e:	220a      	movs	r2, #10
 8007150:	fb00 3002 	mla	r0, r0, r2, r3
 8007154:	23a0      	movs	r3, #160	; 0xa0
 8007156:	fb90 f0f3 	sdiv	r0, r0, r3
 800715a:	f9b5 3000 	ldrsh.w	r3, [r5]
 800715e:	ebab 0b00 	sub.w	fp, fp, r0
 8007162:	459b      	cmp	fp, r3
 8007164:	e77b      	b.n	800705e <lv_obj_get_scrollbar_area+0x612>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 8007166:	2201      	movs	r2, #1
 8007168:	e7b8      	b.n	80070dc <lv_obj_get_scrollbar_area+0x690>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800716a:	2001      	movs	r0, #1
 800716c:	e7cf      	b.n	800710e <lv_obj_get_scrollbar_area+0x6c2>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800716e:	2001      	movs	r0, #1
 8007170:	e7f3      	b.n	800715a <lv_obj_get_scrollbar_area+0x70e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8007172:	2001      	movs	r0, #1
 8007174:	e789      	b.n	800708a <lv_obj_get_scrollbar_area+0x63e>

08007176 <lv_obj_scrollbar_invalidate>:
{
 8007176:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8007178:	aa02      	add	r2, sp, #8
 800717a:	4669      	mov	r1, sp
{
 800717c:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800717e:	f7ff fc65 	bl	8006a4c <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8007182:	4668      	mov	r0, sp
 8007184:	f00b fb49 	bl	801281a <lv_area_get_size>
 8007188:	b918      	cbnz	r0, 8007192 <lv_obj_scrollbar_invalidate+0x1c>
 800718a:	a802      	add	r0, sp, #8
 800718c:	f00b fb45 	bl	801281a <lv_area_get_size>
 8007190:	b178      	cbz	r0, 80071b2 <lv_obj_scrollbar_invalidate+0x3c>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 8007192:	4668      	mov	r0, sp
 8007194:	f00b fb41 	bl	801281a <lv_area_get_size>
 8007198:	b118      	cbz	r0, 80071a2 <lv_obj_scrollbar_invalidate+0x2c>
 800719a:	4669      	mov	r1, sp
 800719c:	4620      	mov	r0, r4
 800719e:	f7fe f8c2 	bl	8005326 <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 80071a2:	a802      	add	r0, sp, #8
 80071a4:	f00b fb39 	bl	801281a <lv_area_get_size>
 80071a8:	b118      	cbz	r0, 80071b2 <lv_obj_scrollbar_invalidate+0x3c>
 80071aa:	a902      	add	r1, sp, #8
 80071ac:	4620      	mov	r0, r4
 80071ae:	f7fe f8ba 	bl	8005326 <lv_obj_invalidate_area>
}
 80071b2:	b004      	add	sp, #16
 80071b4:	bd10      	pop	{r4, pc}

080071b6 <lv_obj_readjust_scroll>:
{
 80071b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071b8:	4604      	mov	r4, r0
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 80071ba:	f7ff f824 	bl	8006206 <lv_obj_get_scroll_snap_y>
{
 80071be:	460e      	mov	r6, r1
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 80071c0:	4605      	mov	r5, r0
 80071c2:	b9a0      	cbnz	r0, 80071ee <lv_obj_readjust_scroll+0x38>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 80071c4:	4620      	mov	r0, r4
 80071c6:	f7ff f82a 	bl	800621e <lv_obj_get_scroll_y>
 80071ca:	4607      	mov	r7, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 80071cc:	4620      	mov	r0, r4
 80071ce:	f7ff f82f 	bl	8006230 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 80071d2:	1e03      	subs	r3, r0, #0
 80071d4:	da0b      	bge.n	80071ee <lv_obj_readjust_scroll+0x38>
 80071d6:	2f00      	cmp	r7, #0
 80071d8:	dd09      	ble.n	80071ee <lv_obj_readjust_scroll+0x38>
            sb = LV_MIN(st, -sb);
 80071da:	425a      	negs	r2, r3
 80071dc:	42ba      	cmp	r2, r7
 80071de:	bfa8      	it	ge
 80071e0:	463a      	movge	r2, r7
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 80071e2:	4633      	mov	r3, r6
 80071e4:	b212      	sxth	r2, r2
 80071e6:	4629      	mov	r1, r5
 80071e8:	4620      	mov	r0, r4
 80071ea:	f7ff f97b 	bl	80064e4 <lv_obj_scroll_by>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 80071ee:	4620      	mov	r0, r4
 80071f0:	f7ff f803 	bl	80061fa <lv_obj_get_scroll_snap_x>
 80071f4:	bb38      	cbnz	r0, 8007246 <lv_obj_readjust_scroll+0x90>
 80071f6:	9001      	str	r0, [sp, #4]
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7ff f86d 	bl	80062d8 <lv_obj_get_scroll_left>
 80071fe:	4607      	mov	r7, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8007200:	4620      	mov	r0, r4
 8007202:	f7ff f8d3 	bl	80063ac <lv_obj_get_scroll_right>
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8007206:	9a01      	ldr	r2, [sp, #4]
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8007208:	4605      	mov	r5, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800720a:	4611      	mov	r1, r2
 800720c:	4620      	mov	r0, r4
 800720e:	f7fe ffc5 	bl	800619c <lv_obj_get_style_base_dir>
 8007212:	2801      	cmp	r0, #1
 8007214:	9a01      	ldr	r2, [sp, #4]
 8007216:	d00f      	beq.n	8007238 <lv_obj_readjust_scroll+0x82>
            if(sr < 0 && sl > 0) {
 8007218:	2d00      	cmp	r5, #0
 800721a:	da14      	bge.n	8007246 <lv_obj_readjust_scroll+0x90>
 800721c:	2f00      	cmp	r7, #0
 800721e:	dd12      	ble.n	8007246 <lv_obj_readjust_scroll+0x90>
                sr = LV_MIN(sl, -sr);
 8007220:	426d      	negs	r5, r5
 8007222:	42bd      	cmp	r5, r7
 8007224:	bfa8      	it	ge
 8007226:	463d      	movge	r5, r7
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 8007228:	4633      	mov	r3, r6
 800722a:	b229      	sxth	r1, r5
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 800722c:	4620      	mov	r0, r4
}
 800722e:	b003      	add	sp, #12
 8007230:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 8007234:	f7ff b956 	b.w	80064e4 <lv_obj_scroll_by>
            if(sl < 0 && sr > 0) {
 8007238:	2f00      	cmp	r7, #0
 800723a:	da04      	bge.n	8007246 <lv_obj_readjust_scroll+0x90>
 800723c:	2d00      	cmp	r5, #0
 800723e:	dd02      	ble.n	8007246 <lv_obj_readjust_scroll+0x90>
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 8007240:	4633      	mov	r3, r6
 8007242:	4639      	mov	r1, r7
 8007244:	e7f2      	b.n	800722c <lv_obj_readjust_scroll+0x76>
}
 8007246:	b003      	add	sp, #12
 8007248:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800724a <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 800724a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724c:	4607      	mov	r7, r0
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800724e:	f000 ff1f 	bl	8008090 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8007252:	2400      	movs	r4, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8007254:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 8007256:	42b4      	cmp	r4, r6
 8007258:	d100      	bne.n	800725c <refresh_children_style+0x12>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
        lv_obj_invalidate(child);

        refresh_children_style(child); /*Check children too*/
    }
}
 800725a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * child = obj->spec_attr->children[i];
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        lv_obj_invalidate(child);
 8007264:	4628      	mov	r0, r5
 8007266:	f7fe f87f 	bl	8005368 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800726a:	2200      	movs	r2, #0
 800726c:	212a      	movs	r1, #42	; 0x2a
 800726e:	4628      	mov	r0, r5
 8007270:	f7fb ffcc 	bl	800320c <lv_event_send>
        lv_obj_invalidate(child);
 8007274:	4628      	mov	r0, r5
 8007276:	f7fe f877 	bl	8005368 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 800727a:	4628      	mov	r0, r5
 800727c:	f7ff ffe5 	bl	800724a <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 8007280:	3401      	adds	r4, #1
 8007282:	e7e8      	b.n	8007256 <refresh_children_style+0xc>

08007284 <get_local_style>:
    for(i = 0; i < obj->style_cnt; i++) {
 8007284:	8c43      	ldrh	r3, [r0, #34]	; 0x22
{
 8007286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728a:	4605      	mov	r5, r0
        if(obj->styles[i].is_local &&
 800728c:	68c0      	ldr	r0, [r0, #12]
{
 800728e:	460c      	mov	r4, r1
    for(i = 0; i < obj->style_cnt; i++) {
 8007290:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8007294:	2200      	movs	r2, #0
 8007296:	4293      	cmp	r3, r2
 8007298:	d80d      	bhi.n	80072b6 <get_local_style+0x32>
    obj->style_cnt++;
 800729a:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 800729c:	3301      	adds	r3, #1
 800729e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072a2:	f363 02c8 	bfi	r2, r3, #3, #6
 80072a6:	846a      	strh	r2, [r5, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80072a8:	00d9      	lsls	r1, r3, #3
 80072aa:	f00c f873 	bl	8013394 <lv_mem_realloc>
 80072ae:	4602      	mov	r2, r0
 80072b0:	60e8      	str	r0, [r5, #12]
    LV_ASSERT_MALLOC(obj->styles);
 80072b2:	b978      	cbnz	r0, 80072d4 <get_local_style+0x50>
 80072b4:	e7fe      	b.n	80072b4 <get_local_style+0x30>
        if(obj->styles[i].is_local &&
 80072b6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80072ba:	79ce      	ldrb	r6, [r1, #7]
 80072bc:	07f6      	lsls	r6, r6, #31
 80072be:	d507      	bpl.n	80072d0 <get_local_style+0x4c>
           obj->styles[i].selector == selector) {
 80072c0:	684e      	ldr	r6, [r1, #4]
 80072c2:	f3c6 0617 	ubfx	r6, r6, #0, #24
        if(obj->styles[i].is_local &&
 80072c6:	42a6      	cmp	r6, r4
 80072c8:	d102      	bne.n	80072d0 <get_local_style+0x4c>
            return obj->styles[i].style;
 80072ca:	6808      	ldr	r0, [r1, #0]
}
 80072cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 80072d0:	3201      	adds	r2, #1
 80072d2:	e7e0      	b.n	8007296 <get_local_style+0x12>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 80072d4:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80072d6:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80072da:	1e5f      	subs	r7, r3, #1
 80072dc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80072e0:	3b02      	subs	r3, #2
 80072e2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80072e6:	00fe      	lsls	r6, r7, #3
 80072e8:	b9e7      	cbnz	r7, 8007324 <get_local_style+0xa0>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 80072ea:	1990      	adds	r0, r2, r6
 80072ec:	2108      	movs	r1, #8
 80072ee:	f00c fa04 	bl	80136fa <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 80072f2:	2008      	movs	r0, #8
 80072f4:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80072f8:	f00c f816 	bl	8013328 <lv_mem_alloc>
    lv_style_init(obj->styles[i].style);
 80072fc:	68eb      	ldr	r3, [r5, #12]
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 80072fe:	f848 0037 	str.w	r0, [r8, r7, lsl #3]
    lv_style_init(obj->styles[i].style);
 8007302:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
 8007306:	f00c fe22 	bl	8013f4e <lv_style_init>
    obj->styles[i].is_local = 1;
 800730a:	68e9      	ldr	r1, [r5, #12]
 800730c:	198b      	adds	r3, r1, r6
 800730e:	79da      	ldrb	r2, [r3, #7]
 8007310:	f042 0201 	orr.w	r2, r2, #1
 8007314:	71da      	strb	r2, [r3, #7]
    obj->styles[i].selector = selector;
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	f364 0217 	bfi	r2, r4, #0, #24
 800731c:	605a      	str	r2, [r3, #4]
    return obj->styles[i].style;
 800731e:	f851 0037 	ldr.w	r0, [r1, r7, lsl #3]
 8007322:	e7d3      	b.n	80072cc <get_local_style+0x48>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 8007324:	79d9      	ldrb	r1, [r3, #7]
 8007326:	0789      	lsls	r1, r1, #30
 8007328:	f1a3 0308 	sub.w	r3, r3, #8
 800732c:	d1dd      	bne.n	80072ea <get_local_style+0x66>
        obj->styles[i] = obj->styles[i - 1];
 800732e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007332:	4416      	add	r6, r2
 8007334:	e886 0003 	stmia.w	r6, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8007338:	3f01      	subs	r7, #1
 800733a:	e7d4      	b.n	80072e6 <get_local_style+0x62>

0800733c <get_trans_style>:
    for(i = 0; i < obj->style_cnt; i++) {
 800733c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
{
 800733e:	b570      	push	{r4, r5, r6, lr}
 8007340:	4604      	mov	r4, r0
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 8007342:	68c0      	ldr	r0, [r0, #12]
{
 8007344:	460e      	mov	r6, r1
    for(i = 0; i < obj->style_cnt; i++) {
 8007346:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800734a:	2200      	movs	r2, #0
 800734c:	4293      	cmp	r3, r2
 800734e:	d803      	bhi.n	8007358 <get_trans_style+0x1c>
    if(i != obj->style_cnt) return &obj->styles[i];
 8007350:	d00e      	beq.n	8007370 <get_trans_style+0x34>
 8007352:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 8007356:	bd70      	pop	{r4, r5, r6, pc}
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 8007358:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800735c:	79cd      	ldrb	r5, [r1, #7]
 800735e:	07ad      	lsls	r5, r5, #30
 8007360:	d504      	bpl.n	800736c <get_trans_style+0x30>
 8007362:	6849      	ldr	r1, [r1, #4]
 8007364:	f3c1 0117 	ubfx	r1, r1, #0, #24
 8007368:	42b1      	cmp	r1, r6
 800736a:	d0f2      	beq.n	8007352 <get_trans_style+0x16>
    for(i = 0; i < obj->style_cnt; i++) {
 800736c:	3201      	adds	r2, #1
 800736e:	e7ed      	b.n	800734c <get_trans_style+0x10>
    obj->style_cnt++;
 8007370:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8007372:	3301      	adds	r3, #1
 8007374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007378:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800737c:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 800737e:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8007380:	f00c f808 	bl	8013394 <lv_mem_realloc>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8007384:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8007386:	60e0      	str	r0, [r4, #12]
        obj->styles[i] = obj->styles[i - 1];
 8007388:	f402 72fc 	and.w	r2, r2, #504	; 0x1f8
 800738c:	3a08      	subs	r2, #8
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800738e:	4605      	mov	r5, r0
        obj->styles[i] = obj->styles[i - 1];
 8007390:	4601      	mov	r1, r0
 8007392:	3008      	adds	r0, #8
 8007394:	f016 fe28 	bl	801dfe8 <memmove>
    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 8007398:	2108      	movs	r1, #8
 800739a:	4628      	mov	r0, r5
 800739c:	f00c f9ad 	bl	80136fa <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 80073a0:	2008      	movs	r0, #8
 80073a2:	68e5      	ldr	r5, [r4, #12]
 80073a4:	f00b ffc0 	bl	8013328 <lv_mem_alloc>
    lv_style_init(obj->styles[0].style);
 80073a8:	68e3      	ldr	r3, [r4, #12]
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 80073aa:	6028      	str	r0, [r5, #0]
    lv_style_init(obj->styles[0].style);
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	f00c fdce 	bl	8013f4e <lv_style_init>
    obj->styles[0].is_trans = 1;
 80073b2:	68e0      	ldr	r0, [r4, #12]
 80073b4:	79c3      	ldrb	r3, [r0, #7]
 80073b6:	f043 0302 	orr.w	r3, r3, #2
 80073ba:	71c3      	strb	r3, [r0, #7]
    obj->styles[0].selector = selector;
 80073bc:	6843      	ldr	r3, [r0, #4]
 80073be:	f366 0317 	bfi	r3, r6, #0, #24
 80073c2:	6043      	str	r3, [r0, #4]
    return &obj->styles[0];
 80073c4:	e7c7      	b.n	8007356 <get_trans_style+0x1a>
	...

080073c8 <trans_del.isra.0>:
 * @param obj pointer to an object which transition(s) should be removed
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 80073c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	4606      	mov	r6, r0
{
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80073ce:	4828      	ldr	r0, [pc, #160]	; (8007470 <trans_del.isra.0+0xa8>)
    while(tr != NULL) {
        if(tr == tr_limit) break;

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80073d0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8007470 <trans_del.isra.0+0xa8>
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 80073d4:	460d      	mov	r5, r1
 80073d6:	4617      	mov	r7, r2
 80073d8:	4698      	mov	r8, r3
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80073da:	f00b feb7 	bl	801314c <_lv_ll_get_tail>

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 80073de:	f64f 7bff 	movw	fp, #65535	; 0xffff
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80073e2:	4604      	mov	r4, r0
    while(tr != NULL) {
 80073e4:	b914      	cbnz	r4, 80073ec <trans_del.isra.0+0x24>

        }
        tr = tr_prev;
    }
    return removed;
}
 80073e6:	b003      	add	sp, #12
 80073e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(tr == tr_limit) break;
 80073ec:	4544      	cmp	r4, r8
 80073ee:	d0fa      	beq.n	80073e6 <trans_del.isra.0+0x1e>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80073f0:	4621      	mov	r1, r4
 80073f2:	4650      	mov	r0, sl
 80073f4:	f00b feb1 	bl	801315a <_lv_ll_get_prev>
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	42b3      	cmp	r3, r6
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80073fc:	4681      	mov	r9, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 80073fe:	d134      	bne.n	800746a <trans_del.isra.0+0xa2>
 8007400:	68a3      	ldr	r3, [r4, #8]
 8007402:	42ab      	cmp	r3, r5
 8007404:	d002      	beq.n	800740c <trans_del.isra.0+0x44>
 8007406:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 800740a:	d12e      	bne.n	800746a <trans_del.isra.0+0xa2>
 800740c:	88a3      	ldrh	r3, [r4, #4]
 800740e:	42bb      	cmp	r3, r7
 8007410:	d001      	beq.n	8007416 <trans_del.isra.0+0x4e>
 8007412:	455f      	cmp	r7, fp
 8007414:	d129      	bne.n	800746a <trans_del.isra.0+0xa2>
 8007416:	2300      	movs	r3, #0
 8007418:	e017      	b.n	800744a <trans_del.isra.0+0x82>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800741a:	68f0      	ldr	r0, [r6, #12]
 800741c:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8007420:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8007424:	79d1      	ldrb	r1, [r2, #7]
 8007426:	0789      	lsls	r1, r1, #30
 8007428:	d50e      	bpl.n	8007448 <trans_del.isra.0+0x80>
 800742a:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 800742e:	d004      	beq.n	800743a <trans_del.isra.0+0x72>
 8007430:	6852      	ldr	r2, [r2, #4]
 8007432:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8007436:	4295      	cmp	r5, r2
 8007438:	d106      	bne.n	8007448 <trans_del.isra.0+0x80>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 800743a:	88a1      	ldrh	r1, [r4, #4]
 800743c:	f850 000c 	ldr.w	r0, [r0, ip]
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	f00c fdd5 	bl	8013ff0 <lv_style_remove_prop>
 8007446:	9b01      	ldr	r3, [sp, #4]
            for(i = 0; i < obj->style_cnt; i++) {
 8007448:	3301      	adds	r3, #1
 800744a:	8c72      	ldrh	r2, [r6, #34]	; 0x22
 800744c:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 8007450:	4293      	cmp	r3, r2
 8007452:	d3e2      	bcc.n	800741a <trans_del.isra.0+0x52>
            lv_anim_del(tr, NULL);
 8007454:	2100      	movs	r1, #0
 8007456:	4620      	mov	r0, r4
 8007458:	f00b f8fa 	bl	8012650 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800745c:	4650      	mov	r0, sl
 800745e:	4621      	mov	r1, r4
 8007460:	f00b fe48 	bl	80130f4 <_lv_ll_remove>
            lv_mem_free(tr);
 8007464:	4620      	mov	r0, r4
 8007466:	f00b ff7d 	bl	8013364 <lv_mem_free>
            removed = true;
 800746a:	464c      	mov	r4, r9
 800746c:	e7ba      	b.n	80073e4 <trans_del.isra.0+0x1c>
 800746e:	bf00      	nop
 8007470:	20000e38 	.word	0x20000e38

08007474 <_lv_obj_style_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 8007474:	4801      	ldr	r0, [pc, #4]	; (800747c <_lv_obj_style_init+0x8>)
 8007476:	2114      	movs	r1, #20
 8007478:	f00b bdfd 	b.w	8013076 <_lv_ll_init>
 800747c:	20000e38 	.word	0x20000e38

08007480 <lv_obj_enable_style_refresh>:
    style_refr = en;
 8007480:	4b01      	ldr	r3, [pc, #4]	; (8007488 <lv_obj_enable_style_refresh+0x8>)
 8007482:	7018      	strb	r0, [r3, #0]
}
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	2000000c 	.word	0x2000000c

0800748c <lv_obj_get_style_prop>:
{
 800748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	4604      	mov	r4, r0
 8007492:	b085      	sub	sp, #20
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
    return _lv_style_prop_lookup_flags(prop) & flag;
 8007494:	4610      	mov	r0, r2
 8007496:	460e      	mov	r6, r1
 8007498:	4690      	mov	r8, r2
 800749a:	f00c ff8d 	bl	80143b8 <_lv_style_prop_lookup_flags>
 800749e:	f000 0301 	and.w	r3, r0, #1
 80074a2:	9300      	str	r3, [sp, #0]
    while(obj) {
 80074a4:	b974      	cbnz	r4, 80074c4 <lv_obj_get_style_prop+0x38>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 80074a6:	2e00      	cmp	r6, #0
 80074a8:	f040 8091 	bne.w	80075ce <lv_obj_get_style_prop+0x142>
 80074ac:	f1b8 0f01 	cmp.w	r8, #1
 80074b0:	d003      	beq.n	80074ba <lv_obj_get_style_prop+0x2e>
 80074b2:	f1b8 0f04 	cmp.w	r8, #4
 80074b6:	f040 808a 	bne.w	80075ce <lv_obj_get_style_prop+0x142>
            const lv_obj_class_t * cls = obj->class_p;
 80074ba:	6823      	ldr	r3, [r4, #0]
            while(cls) {
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d17b      	bne.n	80075b8 <lv_obj_get_style_prop+0x12c>
                value_act.num = 0;
 80074c0:	4618      	mov	r0, r3
 80074c2:	e05e      	b.n	8007582 <lv_obj_get_style_prop+0xf6>
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 80074c4:	4640      	mov	r0, r8
 80074c6:	f00c fef0 	bl	80142aa <_lv_style_get_prop_group>
    lv_state_t state = obj->state;
 80074ca:	f8b4 b020 	ldrh.w	fp, [r4, #32]
    bool skip_trans = obj->skip_trans;
 80074ce:	f894 9022 	ldrb.w	r9, [r4, #34]	; 0x22
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 80074d2:	2301      	movs	r3, #1
 80074d4:	fa03 f000 	lsl.w	r0, r3, r0
    lv_state_t state_inv = ~state;
 80074d8:	ea6f 0a0b 	mvn.w	sl, fp
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 80074dc:	b2c7      	uxtb	r7, r0
    lv_state_t state_inv = ~state;
 80074de:	fa1f fa8a 	uxth.w	sl, sl
    bool skip_trans = obj->skip_trans;
 80074e2:	f3c9 0980 	ubfx	r9, r9, #2, #1
    for(i = 0; i < obj->style_cnt; i++) {
 80074e6:	2500      	movs	r5, #0
 80074e8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80074ea:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80074ee:	429d      	cmp	r5, r3
 80074f0:	d302      	bcc.n	80074f8 <lv_obj_get_style_prop+0x6c>
 80074f2:	f04f 39ff 	mov.w	r9, #4294967295
 80074f6:	e04a      	b.n	800758e <lv_obj_get_style_prop+0x102>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 80074f8:	68e2      	ldr	r2, [r4, #12]
 80074fa:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 80074fe:	00e8      	lsls	r0, r5, #3
        if(obj_style->is_trans == false) break;
 8007500:	f893 c007 	ldrb.w	ip, [r3, #7]
 8007504:	f01c 0f02 	tst.w	ip, #2
 8007508:	d0f3      	beq.n	80074f2 <lv_obj_get_style_prop+0x66>
        if(skip_trans) continue;
 800750a:	f1b9 0f00 	cmp.w	r9, #0
 800750e:	d001      	beq.n	8007514 <lv_obj_get_style_prop+0x88>
    for(i = 0; i < obj->style_cnt; i++) {
 8007510:	3501      	adds	r5, #1
 8007512:	e7e9      	b.n	80074e8 <lv_obj_get_style_prop+0x5c>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8007514:	685b      	ldr	r3, [r3, #4]
    return selector & 0xFF0000;
 8007516:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800751a:	429e      	cmp	r6, r3
 800751c:	d1f8      	bne.n	8007510 <lv_obj_get_style_prop+0x84>
        if((obj_style->style->has_group & group) == 0) continue;
 800751e:	5810      	ldr	r0, [r2, r0]
 8007520:	7983      	ldrb	r3, [r0, #6]
 8007522:	421f      	tst	r7, r3
 8007524:	d0f4      	beq.n	8007510 <lv_obj_get_style_prop+0x84>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 8007526:	aa03      	add	r2, sp, #12
 8007528:	4641      	mov	r1, r8
 800752a:	f00c fe69 	bl	8014200 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 800752e:	2801      	cmp	r0, #1
 8007530:	d101      	bne.n	8007536 <lv_obj_get_style_prop+0xaa>
        *v = value_tmp;
 8007532:	9803      	ldr	r0, [sp, #12]
        if(found == LV_STYLE_RES_FOUND) break;
 8007534:	e025      	b.n	8007582 <lv_obj_get_style_prop+0xf6>
        else if(found == LV_STYLE_RES_INHERIT) {
 8007536:	2802      	cmp	r0, #2
 8007538:	d1ea      	bne.n	8007510 <lv_obj_get_style_prop+0x84>
        if(!inheritable) break;
 800753a:	9b00      	ldr	r3, [sp, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d132      	bne.n	80075a6 <lv_obj_get_style_prop+0x11a>
 8007540:	e7b1      	b.n	80074a6 <lv_obj_get_style_prop+0x1a>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 8007542:	68e3      	ldr	r3, [r4, #12]
 8007544:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 8007548:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800754c:	7983      	ldrb	r3, [r0, #6]
 800754e:	421f      	tst	r7, r3
 8007550:	d01c      	beq.n	800758c <lv_obj_get_style_prop+0x100>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8007552:	6853      	ldr	r3, [r2, #4]
 8007554:	f3c3 0217 	ubfx	r2, r3, #0, #24
    return selector & 0xFF0000;
 8007558:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800755c:	429e      	cmp	r6, r3
 800755e:	d115      	bne.n	800758c <lv_obj_get_style_prop+0x100>
        if((state_act & state_inv)) continue;
 8007560:	ea12 0f0a 	tst.w	r2, sl
    return selector & 0xFFFF;
 8007564:	b293      	uxth	r3, r2
        if((state_act & state_inv)) continue;
 8007566:	d111      	bne.n	800758c <lv_obj_get_style_prop+0x100>
        if(state_act <= weight) continue;
 8007568:	454b      	cmp	r3, r9
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	dd0e      	ble.n	800758c <lv_obj_get_style_prop+0x100>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800756e:	aa03      	add	r2, sp, #12
 8007570:	4641      	mov	r1, r8
 8007572:	f00c fe45 	bl	8014200 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 8007576:	2801      	cmp	r0, #1
 8007578:	9b01      	ldr	r3, [sp, #4]
 800757a:	d105      	bne.n	8007588 <lv_obj_get_style_prop+0xfc>
            if(state_act == state) {
 800757c:	459b      	cmp	fp, r3
                *v = value_tmp;
 800757e:	9803      	ldr	r0, [sp, #12]
            if(state_act == state) {
 8007580:	d116      	bne.n	80075b0 <lv_obj_get_style_prop+0x124>
}
 8007582:	b005      	add	sp, #20
 8007584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(found == LV_STYLE_RES_INHERIT) {
 8007588:	2802      	cmp	r0, #2
 800758a:	d0d6      	beq.n	800753a <lv_obj_get_style_prop+0xae>
    for(; i < obj->style_cnt; i++) {
 800758c:	3501      	adds	r5, #1
 800758e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8007590:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8007594:	429d      	cmp	r5, r3
 8007596:	d3d4      	bcc.n	8007542 <lv_obj_get_style_prop+0xb6>
    if(weight >= 0) {
 8007598:	f1b9 3fff 	cmp.w	r9, #4294967295
 800759c:	d1c9      	bne.n	8007532 <lv_obj_get_style_prop+0xa6>
        if(!inheritable) break;
 800759e:	9b00      	ldr	r3, [sp, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d080      	beq.n	80074a6 <lv_obj_get_style_prop+0x1a>
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 80075a4:	b936      	cbnz	r6, 80075b4 <lv_obj_get_style_prop+0x128>
        obj = lv_obj_get_parent(obj);
 80075a6:	4620      	mov	r0, r4
 80075a8:	f000 fd60 	bl	800806c <lv_obj_get_parent>
 80075ac:	4604      	mov	r4, r0
 80075ae:	e779      	b.n	80074a4 <lv_obj_get_style_prop+0x18>
 80075b0:	4699      	mov	r9, r3
 80075b2:	e7eb      	b.n	800758c <lv_obj_get_style_prop+0x100>
            part = LV_PART_MAIN;
 80075b4:	2600      	movs	r6, #0
 80075b6:	e775      	b.n	80074a4 <lv_obj_get_style_prop+0x18>
                if(prop == LV_STYLE_WIDTH) {
 80075b8:	f1b8 0f01 	cmp.w	r8, #1
                    if(cls->width_def != 0) break;
 80075bc:	bf0c      	ite	eq
 80075be:	f9b3 0014 	ldrsheq.w	r0, [r3, #20]
                    if(cls->height_def != 0) break;
 80075c2:	f9b3 0016 	ldrshne.w	r0, [r3, #22]
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d1db      	bne.n	8007582 <lv_obj_get_style_prop+0xf6>
                cls = cls->base_class;
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	e776      	b.n	80074bc <lv_obj_get_style_prop+0x30>
            value_act = lv_style_prop_get_default(prop);
 80075ce:	4640      	mov	r0, r8
 80075d0:	f00c fd68 	bl	80140a4 <lv_style_prop_get_default>
    return value_act;
 80075d4:	e7d5      	b.n	8007582 <lv_obj_get_style_prop+0xf6>

080075d6 <trans_anim_start_cb>:
    }

}

static void trans_anim_start_cb(lv_anim_t * a)
{
 80075d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    trans_t * tr = a->var;
 80075d8:	6804      	ldr	r4, [r0, #0]
    return selector & 0xFF0000;
 80075da:	68a1      	ldr	r1, [r4, #8]

    lv_part_t part = lv_obj_style_get_selector_part(tr->selector);
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 80075dc:	88a2      	ldrh	r2, [r4, #4]
 80075de:	6820      	ldr	r0, [r4, #0]
    return selector & 0xFF0000;
 80075e0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 80075e4:	9101      	str	r1, [sp, #4]
 80075e6:	f7ff ff51 	bl	800748c <lv_obj_get_style_prop>

    /*Init prop to an invalid values to be sure `trans_del` won't delete this added `tr`*/
    lv_style_prop_t prop_tmp = tr->prop;
 80075ea:	88a5      	ldrh	r5, [r4, #4]
    tr->prop = LV_STYLE_PROP_INV;

    /*Delete the related transitions if any*/
    trans_del(tr->obj, part, prop_tmp, tr);
 80075ec:	9901      	ldr	r1, [sp, #4]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 80075ee:	60e0      	str	r0, [r4, #12]
    tr->prop = LV_STYLE_PROP_INV;
 80075f0:	2300      	movs	r3, #0
    trans_del(tr->obj, part, prop_tmp, tr);
 80075f2:	462a      	mov	r2, r5
 80075f4:	6820      	ldr	r0, [r4, #0]
    tr->prop = LV_STYLE_PROP_INV;
 80075f6:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 80075f8:	4623      	mov	r3, r4
 80075fa:	f7ff fee5 	bl	80073c8 <trans_del.isra.0>

    tr->prop = prop_tmp;

    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 80075fe:	68a1      	ldr	r1, [r4, #8]
 8007600:	6820      	ldr	r0, [r4, #0]
    tr->prop = prop_tmp;
 8007602:	80a5      	strh	r5, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 8007604:	f7ff fe9a 	bl	800733c <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 8007608:	68e2      	ldr	r2, [r4, #12]
 800760a:	88a1      	ldrh	r1, [r4, #4]
 800760c:	6800      	ldr	r0, [r0, #0]

}
 800760e:	b003      	add	sp, #12
 8007610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 8007614:	f00c beca 	b.w	80143ac <lv_style_set_prop>

08007618 <lv_obj_refresh_style>:
    if(!style_refr) return;
 8007618:	4b58      	ldr	r3, [pc, #352]	; (800777c <lv_obj_refresh_style+0x164>)
 800761a:	781b      	ldrb	r3, [r3, #0]
{
 800761c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007620:	4604      	mov	r4, r0
 8007622:	460d      	mov	r5, r1
 8007624:	4616      	mov	r6, r2
    if(!style_refr) return;
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 80a5 	beq.w	8007776 <lv_obj_refresh_style+0x15e>
    lv_obj_invalidate(obj);
 800762c:	f7fd fe9c 	bl	8005368 <lv_obj_invalidate>
 8007630:	4630      	mov	r0, r6
 8007632:	f00c fec1 	bl	80143b8 <_lv_style_prop_lookup_flags>
 8007636:	f000 0804 	and.w	r8, r0, #4
 800763a:	4630      	mov	r0, r6
 800763c:	f00c febc 	bl	80143b8 <_lv_style_prop_lookup_flags>
 8007640:	f000 0902 	and.w	r9, r0, #2
 8007644:	4630      	mov	r0, r6
 8007646:	f00c feb7 	bl	80143b8 <_lv_style_prop_lookup_flags>
 800764a:	4682      	mov	sl, r0
 800764c:	4630      	mov	r0, r6
 800764e:	f00c feb3 	bl	80143b8 <_lv_style_prop_lookup_flags>
    return selector & 0xFF0000;
 8007652:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8007656:	4607      	mov	r7, r0
    if(is_layout_refr) {
 8007658:	f1b8 0f00 	cmp.w	r8, #0
 800765c:	d00a      	beq.n	8007674 <lv_obj_refresh_style+0x5c>
        if(part == LV_PART_ANY ||
 800765e:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 8007662:	d130      	bne.n	80076c6 <lv_obj_refresh_style+0xae>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 8007664:	2200      	movs	r2, #0
 8007666:	212a      	movs	r1, #42	; 0x2a
 8007668:	4620      	mov	r0, r4
 800766a:	f7fb fdcf 	bl	800320c <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 800766e:	4620      	mov	r0, r4
 8007670:	f7fd fbec 	bl	8004e4c <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 8007674:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 8007678:	d001      	beq.n	800767e <lv_obj_refresh_style+0x66>
 800767a:	2d00      	cmp	r5, #0
 800767c:	d137      	bne.n	80076ee <lv_obj_refresh_style+0xd6>
 800767e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007682:	429e      	cmp	r6, r3
 8007684:	d002      	beq.n	800768c <lv_obj_refresh_style+0x74>
 8007686:	f1b8 0f00 	cmp.w	r8, #0
 800768a:	d005      	beq.n	8007698 <lv_obj_refresh_style+0x80>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800768c:	4620      	mov	r0, r4
 800768e:	f000 fced 	bl	800806c <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 8007692:	b108      	cbz	r0, 8007698 <lv_obj_refresh_style+0x80>
 8007694:	f7fd fbda 	bl	8004e4c <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 8007698:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 800769c:	d000      	beq.n	80076a0 <lv_obj_refresh_style+0x88>
 800769e:	bb35      	cbnz	r5, 80076ee <lv_obj_refresh_style+0xd6>
 80076a0:	06fb      	lsls	r3, r7, #27
 80076a2:	d524      	bpl.n	80076ee <lv_obj_refresh_style+0xd6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 80076a4:	2100      	movs	r1, #0
 80076a6:	226d      	movs	r2, #109	; 0x6d
 80076a8:	4620      	mov	r0, r4
 80076aa:	f7ff feef 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80076ae:	b201      	sxth	r1, r0
    }
}

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 80076b0:	2900      	cmp	r1, #0
 80076b2:	d03c      	beq.n	800772e <lv_obj_refresh_style+0x116>
 80076b4:	2702      	movs	r7, #2
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 80076b6:	68a3      	ldr	r3, [r4, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d055      	beq.n	8007768 <lv_obj_refresh_style+0x150>
            obj->spec_attr->layer_type = layer_type;
 80076bc:	7e9a      	ldrb	r2, [r3, #26]
 80076be:	f367 1287 	bfi	r2, r7, #6, #2
 80076c2:	769a      	strb	r2, [r3, #26]
 80076c4:	e013      	b.n	80076ee <lv_obj_refresh_style+0xd6>
        if(part == LV_PART_ANY ||
 80076c6:	2d00      	cmp	r5, #0
 80076c8:	d0cc      	beq.n	8007664 <lv_obj_refresh_style+0x4c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80076ca:	2204      	movs	r2, #4
 80076cc:	2100      	movs	r1, #0
 80076ce:	4620      	mov	r0, r4
 80076d0:	f7ff fedc 	bl	800748c <lv_obj_get_style_prop>
           part == LV_PART_MAIN ||
 80076d4:	f242 7bd1 	movw	fp, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 80076d8:	b200      	sxth	r0, r0
 80076da:	4558      	cmp	r0, fp
 80076dc:	d0c2      	beq.n	8007664 <lv_obj_refresh_style+0x4c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80076de:	2201      	movs	r2, #1
 80076e0:	2100      	movs	r1, #0
 80076e2:	4620      	mov	r0, r4
 80076e4:	f7ff fed2 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80076e8:	b200      	sxth	r0, r0
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 80076ea:	4558      	cmp	r0, fp
 80076ec:	d0ba      	beq.n	8007664 <lv_obj_refresh_style+0x4c>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 80076ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076f2:	429e      	cmp	r6, r3
 80076f4:	d002      	beq.n	80076fc <lv_obj_refresh_style+0xe4>
 80076f6:	f1b9 0f00 	cmp.w	r9, #0
 80076fa:	d002      	beq.n	8007702 <lv_obj_refresh_style+0xea>
        lv_obj_refresh_ext_draw_size(obj);
 80076fc:	4620      	mov	r0, r4
 80076fe:	f7fd fa3c 	bl	8004b7a <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8007702:	4620      	mov	r0, r4
 8007704:	f7fd fe30 	bl	8005368 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 8007708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800770c:	429e      	cmp	r6, r3
 800770e:	d005      	beq.n	800771c <lv_obj_refresh_style+0x104>
 8007710:	f01a 0f01 	tst.w	sl, #1
 8007714:	d02f      	beq.n	8007776 <lv_obj_refresh_style+0x15e>
 8007716:	ea59 0308 	orrs.w	r3, r9, r8
 800771a:	d02c      	beq.n	8007776 <lv_obj_refresh_style+0x15e>
        if(part != LV_PART_SCROLLBAR) {
 800771c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007720:	d029      	beq.n	8007776 <lv_obj_refresh_style+0x15e>
            refresh_children_style(obj);
 8007722:	4620      	mov	r0, r4
}
 8007724:	b003      	add	sp, #12
 8007726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            refresh_children_style(obj);
 800772a:	f7ff bd8e 	b.w	800724a <refresh_children_style>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800772e:	226c      	movs	r2, #108	; 0x6c
 8007730:	4620      	mov	r0, r4
 8007732:	9101      	str	r1, [sp, #4]
 8007734:	f7ff feaa 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007738:	b200      	sxth	r0, r0
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 800773a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800773e:	d1b9      	bne.n	80076b4 <lv_obj_refresh_style+0x9c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8007740:	9901      	ldr	r1, [sp, #4]
 8007742:	2260      	movs	r2, #96	; 0x60
 8007744:	4620      	mov	r0, r4
 8007746:	f7ff fea1 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800774a:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 800774c:	28ff      	cmp	r0, #255	; 0xff
 800774e:	9901      	ldr	r1, [sp, #4]
 8007750:	d108      	bne.n	8007764 <lv_obj_refresh_style+0x14c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8007752:	2267      	movs	r2, #103	; 0x67
 8007754:	4620      	mov	r0, r4
 8007756:	f7ff fe99 	bl	800748c <lv_obj_get_style_prop>
    return (lv_blend_mode_t)v.num;
 800775a:	b2c7      	uxtb	r7, r0
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800775c:	3f00      	subs	r7, #0
 800775e:	bf18      	it	ne
 8007760:	2701      	movne	r7, #1
 8007762:	e7a8      	b.n	80076b6 <lv_obj_refresh_style+0x9e>
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 8007764:	2701      	movs	r7, #1
 8007766:	e7a6      	b.n	80076b6 <lv_obj_refresh_style+0x9e>
        else if(layer_type != LV_LAYER_TYPE_NONE) {
 8007768:	2f00      	cmp	r7, #0
 800776a:	d0c0      	beq.n	80076ee <lv_obj_refresh_style+0xd6>
            lv_obj_allocate_spec_attr(obj);
 800776c:	4620      	mov	r0, r4
 800776e:	f7fc fe3f 	bl	80043f0 <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 8007772:	68a3      	ldr	r3, [r4, #8]
 8007774:	e7a2      	b.n	80076bc <lv_obj_refresh_style+0xa4>
}
 8007776:	b003      	add	sp, #12
 8007778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777c:	2000000c 	.word	0x2000000c

08007780 <lv_obj_add_style>:
{
 8007780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007784:	4604      	mov	r4, r0
 8007786:	4616      	mov	r6, r2
 8007788:	460f      	mov	r7, r1
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 800778a:	2300      	movs	r3, #0
 800778c:	4631      	mov	r1, r6
 800778e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007792:	f7ff fe19 	bl	80073c8 <trans_del.isra.0>
    for(i = 0; i < obj->style_cnt; i++) {
 8007796:	8c61      	ldrh	r1, [r4, #34]	; 0x22
        if(obj->styles[i].is_trans) continue;
 8007798:	68e0      	ldr	r0, [r4, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800779a:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 800779e:	f04f 0900 	mov.w	r9, #0
 80077a2:	4549      	cmp	r1, r9
 80077a4:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 80077a8:	d83d      	bhi.n	8007826 <lv_obj_add_style+0xa6>
    obj->style_cnt++;
 80077aa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80077ac:	3101      	adds	r1, #1
 80077ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80077b2:	f361 03c8 	bfi	r3, r1, #3, #6
 80077b6:	8463      	strh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80077b8:	00c9      	lsls	r1, r1, #3
 80077ba:	f00b fdeb 	bl	8013394 <lv_mem_realloc>
    for(j = obj->style_cnt - 1; j > i ; j--) {
 80077be:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80077c0:	60e0      	str	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 80077c2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80077c6:	1e5a      	subs	r2, r3, #1
        obj->styles[j] = obj->styles[j - 1];
 80077c8:	f1c3 0302 	rsb	r3, r3, #2
 80077cc:	4591      	cmp	r9, r2
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80077ce:	4605      	mov	r5, r0
        obj->styles[j] = obj->styles[j - 1];
 80077d0:	444b      	add	r3, r9
 80077d2:	ea4f 00c2 	mov.w	r0, r2, lsl #3
 80077d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80077da:	f1a0 0108 	sub.w	r1, r0, #8
 80077de:	bf88      	it	hi
 80077e0:	2308      	movhi	r3, #8
 80077e2:	4419      	add	r1, r3
 80077e4:	4418      	add	r0, r3
 80077e6:	eba2 0209 	sub.w	r2, r2, r9
 80077ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80077ee:	4429      	add	r1, r5
 80077f0:	bf88      	it	hi
 80077f2:	2200      	movhi	r2, #0
 80077f4:	4428      	add	r0, r5
 80077f6:	f016 fbf7 	bl	801dfe8 <memmove>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 80077fa:	eb05 0008 	add.w	r0, r5, r8
 80077fe:	2108      	movs	r1, #8
 8007800:	f00b ff7b 	bl	80136fa <lv_memset_00>
    obj->styles[i].style = style;
 8007804:	68e2      	ldr	r2, [r4, #12]
 8007806:	f842 7008 	str.w	r7, [r2, r8]
 800780a:	eb02 0308 	add.w	r3, r2, r8
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 800780e:	4631      	mov	r1, r6
    obj->styles[i].selector = selector;
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	f366 0217 	bfi	r2, r6, #0, #24
 8007816:	605a      	str	r2, [r3, #4]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 8007818:	4620      	mov	r0, r4
 800781a:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
 800781e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 8007822:	f7ff bef9 	b.w	8007618 <lv_obj_refresh_style>
        if(obj->styles[i].is_trans) continue;
 8007826:	eb00 0308 	add.w	r3, r0, r8
        if(obj->styles[i].is_local) continue;
 800782a:	79db      	ldrb	r3, [r3, #7]
 800782c:	079b      	lsls	r3, r3, #30
 800782e:	d0bc      	beq.n	80077aa <lv_obj_add_style+0x2a>
    for(i = 0; i < obj->style_cnt; i++) {
 8007830:	f109 0901 	add.w	r9, r9, #1
 8007834:	e7b5      	b.n	80077a2 <lv_obj_add_style+0x22>

08007836 <report_style_change_core>:
    for(i = 0; i < obj->style_cnt; i++) {
 8007836:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
{
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 800783a:	f3c2 02c5 	ubfx	r2, r2, #3, #6
{
 800783e:	4605      	mov	r5, r0
 8007840:	460c      	mov	r4, r1
    for(i = 0; i < obj->style_cnt; i++) {
 8007842:	2300      	movs	r3, #0
 8007844:	429a      	cmp	r2, r3
 8007846:	d90c      	bls.n	8007862 <report_style_change_core+0x2c>
        if(style == NULL || obj->styles[i].style == style) {
 8007848:	b125      	cbz	r5, 8007854 <report_style_change_core+0x1e>
 800784a:	68e1      	ldr	r1, [r4, #12]
 800784c:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 8007850:	42a9      	cmp	r1, r5
 8007852:	d10e      	bne.n	8007872 <report_style_change_core+0x3c>
            lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8007854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007858:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800785c:	4620      	mov	r0, r4
 800785e:	f7ff fedb 	bl	8007618 <lv_obj_refresh_style>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8007862:	4620      	mov	r0, r4
 8007864:	f000 fc14 	bl	8008090 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8007868:	2600      	movs	r6, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800786a:	4607      	mov	r7, r0
    for(i = 0; i < child_cnt; i++) {
 800786c:	42be      	cmp	r6, r7
 800786e:	d102      	bne.n	8007876 <report_style_change_core+0x40>
}
 8007870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 8007872:	3301      	adds	r3, #1
 8007874:	e7e6      	b.n	8007844 <report_style_change_core+0xe>
        report_style_change_core(style, obj->spec_attr->children[i]);
 8007876:	68a3      	ldr	r3, [r4, #8]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4628      	mov	r0, r5
 800787c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8007880:	f7ff ffd9 	bl	8007836 <report_style_change_core>
    for(i = 0; i < child_cnt; i++) {
 8007884:	3601      	adds	r6, #1
 8007886:	e7f1      	b.n	800786c <report_style_change_core+0x36>

08007888 <lv_obj_report_style_change>:
    if(!style_refr) return;
 8007888:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <lv_obj_report_style_change+0x34>)
 800788a:	781b      	ldrb	r3, [r3, #0]
{
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	4606      	mov	r6, r0
    if(!style_refr) return;
 8007890:	b123      	cbz	r3, 800789c <lv_obj_report_style_change+0x14>
    lv_disp_t * d = lv_disp_get_next(NULL);
 8007892:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
 8007894:	f00a fda0 	bl	80123d8 <lv_disp_get_next>
 8007898:	4604      	mov	r4, r0
    while(d) {
 800789a:	b960      	cbnz	r0, 80078b6 <lv_obj_report_style_change+0x2e>
}
 800789c:	bd70      	pop	{r4, r5, r6, pc}
            report_style_change_core(style, d->screens[i]);
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	4630      	mov	r0, r6
 80078a2:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 80078a6:	f7ff ffc6 	bl	8007836 <report_style_change_core>
        for(i = 0; i < d->screen_cnt; i++) {
 80078aa:	3501      	adds	r5, #1
 80078ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078ae:	42ab      	cmp	r3, r5
 80078b0:	d8f5      	bhi.n	800789e <lv_obj_report_style_change+0x16>
        d = lv_disp_get_next(d);
 80078b2:	4620      	mov	r0, r4
 80078b4:	e7ee      	b.n	8007894 <lv_obj_report_style_change+0xc>
        for(i = 0; i < d->screen_cnt; i++) {
 80078b6:	2500      	movs	r5, #0
 80078b8:	e7f8      	b.n	80078ac <lv_obj_report_style_change+0x24>
 80078ba:	bf00      	nop
 80078bc:	2000000c 	.word	0x2000000c

080078c0 <trans_anim_cb>:
{
 80078c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    lv_obj_t * obj = tr->obj;
 80078c4:	6806      	ldr	r6, [r0, #0]
{
 80078c6:	4605      	mov	r5, r0
    for(i = 0; i < obj->style_cnt; i++) {
 80078c8:	2300      	movs	r3, #0
 80078ca:	8c72      	ldrh	r2, [r6, #34]	; 0x22
 80078cc:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d93f      	bls.n	8007954 <trans_anim_cb+0x94>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 80078d4:	68f0      	ldr	r0, [r6, #12]
 80078d6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80078da:	00df      	lsls	r7, r3, #3
 80078dc:	79c2      	ldrb	r2, [r0, #7]
 80078de:	0792      	lsls	r2, r2, #30
 80078e0:	d505      	bpl.n	80078ee <trans_anim_cb+0x2e>
 80078e2:	6842      	ldr	r2, [r0, #4]
 80078e4:	68ac      	ldr	r4, [r5, #8]
 80078e6:	f3c2 0217 	ubfx	r2, r2, #0, #24
 80078ea:	42a2      	cmp	r2, r4
 80078ec:	d001      	beq.n	80078f2 <trans_anim_cb+0x32>
    for(i = 0; i < obj->style_cnt; i++) {
 80078ee:	3301      	adds	r3, #1
 80078f0:	e7eb      	b.n	80078ca <trans_anim_cb+0xa>
        switch(tr->prop) {
 80078f2:	88ab      	ldrh	r3, [r5, #4]
 80078f4:	2b61      	cmp	r3, #97	; 0x61
 80078f6:	d056      	beq.n	80079a6 <trans_anim_cb+0xe6>
 80078f8:	d84f      	bhi.n	800799a <trans_anim_cb+0xda>
 80078fa:	2b36      	cmp	r3, #54	; 0x36
 80078fc:	d82d      	bhi.n	800795a <trans_anim_cb+0x9a>
 80078fe:	2b1f      	cmp	r3, #31
 8007900:	d940      	bls.n	8007984 <trans_anim_cb+0xc4>
 8007902:	f1a3 0220 	sub.w	r2, r3, #32
 8007906:	b294      	uxth	r4, r2
 8007908:	2201      	movs	r2, #1
 800790a:	40a2      	lsls	r2, r4
 800790c:	4c31      	ldr	r4, [pc, #196]	; (80079d4 <trans_anim_cb+0x114>)
 800790e:	4014      	ands	r4, r2
 8007910:	bb7c      	cbnz	r4, 8007972 <trans_anim_cb+0xb2>
 8007912:	f412 1fc0 	tst.w	r2, #1572864	; 0x180000
 8007916:	d035      	beq.n	8007984 <trans_anim_cb+0xc4>
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 8007918:	29fe      	cmp	r1, #254	; 0xfe
 800791a:	dc42      	bgt.n	80079a2 <trans_anim_cb+0xe2>
 800791c:	68ec      	ldr	r4, [r5, #12]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 800791e:	6800      	ldr	r0, [r0, #0]
 8007920:	aa01      	add	r2, sp, #4
 8007922:	4619      	mov	r1, r3
 8007924:	f00c fc6c 	bl	8014200 <lv_style_get_prop>
 8007928:	2800      	cmp	r0, #0
 800792a:	d050      	beq.n	80079ce <trans_anim_cb+0x10e>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800792c:	9b01      	ldr	r3, [sp, #4]
 800792e:	ebb3 0804 	subs.w	r8, r3, r4
 8007932:	bf18      	it	ne
 8007934:	f04f 0801 	movne.w	r8, #1
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 8007938:	68f3      	ldr	r3, [r6, #12]
 800793a:	88a9      	ldrh	r1, [r5, #4]
 800793c:	59d8      	ldr	r0, [r3, r7]
 800793e:	4622      	mov	r2, r4
 8007940:	f00c fd34 	bl	80143ac <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 8007944:	f1b8 0f00 	cmp.w	r8, #0
 8007948:	d004      	beq.n	8007954 <trans_anim_cb+0x94>
 800794a:	88aa      	ldrh	r2, [r5, #4]
 800794c:	68a9      	ldr	r1, [r5, #8]
 800794e:	6828      	ldr	r0, [r5, #0]
 8007950:	f7ff fe62 	bl	8007618 <lv_obj_refresh_style>
}
 8007954:	b002      	add	sp, #8
 8007956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch(tr->prop) {
 800795a:	2b55      	cmp	r3, #85	; 0x55
 800795c:	d810      	bhi.n	8007980 <trans_anim_cb+0xc0>
 800795e:	2b43      	cmp	r3, #67	; 0x43
 8007960:	d910      	bls.n	8007984 <trans_anim_cb+0xc4>
 8007962:	f1a3 0444 	sub.w	r4, r3, #68	; 0x44
 8007966:	b2a2      	uxth	r2, r4
 8007968:	2401      	movs	r4, #1
 800796a:	4094      	lsls	r4, r2
 800796c:	4a1a      	ldr	r2, [pc, #104]	; (80079d8 <trans_anim_cb+0x118>)
 800796e:	4022      	ands	r2, r4
 8007970:	b142      	cbz	r2, 8007984 <trans_anim_cb+0xc4>
                if(v <= 0) value_final.color = tr->start_value.color;
 8007972:	2900      	cmp	r1, #0
 8007974:	dc22      	bgt.n	80079bc <trans_anim_cb+0xfc>
 8007976:	7b2a      	ldrb	r2, [r5, #12]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8007978:	2400      	movs	r4, #0
 800797a:	f362 0407 	bfi	r4, r2, #0, #8
 800797e:	e7ce      	b.n	800791e <trans_anim_cb+0x5e>
        switch(tr->prop) {
 8007980:	2b57      	cmp	r3, #87	; 0x57
 8007982:	d0c9      	beq.n	8007918 <trans_anim_cb+0x58>
                if(v == 0) value_final.num = tr->start_value.num;
 8007984:	2900      	cmp	r1, #0
 8007986:	d0c9      	beq.n	800791c <trans_anim_cb+0x5c>
                else if(v == 255) value_final.num = tr->end_value.num;
 8007988:	29ff      	cmp	r1, #255	; 0xff
 800798a:	d00a      	beq.n	80079a2 <trans_anim_cb+0xe2>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 800798c:	e9d5 4203 	ldrd	r4, r2, [r5, #12]
 8007990:	1b12      	subs	r2, r2, r4
 8007992:	4351      	muls	r1, r2
 8007994:	eb04 2421 	add.w	r4, r4, r1, asr #8
 8007998:	e7c1      	b.n	800791e <trans_anim_cb+0x5e>
        switch(tr->prop) {
 800799a:	2b66      	cmp	r3, #102	; 0x66
 800799c:	d0bc      	beq.n	8007918 <trans_anim_cb+0x58>
 800799e:	2b67      	cmp	r3, #103	; 0x67
 80079a0:	e7ef      	b.n	8007982 <trans_anim_cb+0xc2>
                else value_final.ptr = tr->end_value.ptr;
 80079a2:	692c      	ldr	r4, [r5, #16]
 80079a4:	e7bb      	b.n	800791e <trans_anim_cb+0x5e>
                else value_final.num = tr->end_value.num;
 80079a6:	e9d5 4203 	ldrd	r4, r2, [r5, #12]
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 80079aa:	b90c      	cbnz	r4, 80079b0 <trans_anim_cb+0xf0>
 80079ac:	4614      	mov	r4, r2
 80079ae:	e7b6      	b.n	800791e <trans_anim_cb+0x5e>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 80079b0:	2a00      	cmp	r2, #0
 80079b2:	d0b4      	beq.n	800791e <trans_anim_cb+0x5e>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 80079b4:	297f      	cmp	r1, #127	; 0x7f
 80079b6:	bfc8      	it	gt
 80079b8:	4614      	movgt	r4, r2
 80079ba:	e7b0      	b.n	800791e <trans_anim_cb+0x5e>
                else if(v >= 255) value_final.color = tr->end_value.color;
 80079bc:	29fe      	cmp	r1, #254	; 0xfe
 80079be:	7c2a      	ldrb	r2, [r5, #16]
 80079c0:	dcda      	bgt.n	8007978 <trans_anim_cb+0xb8>
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
 80079c2:	7b2c      	ldrb	r4, [r5, #12]
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 80079c4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80079c8:	bf08      	it	eq
 80079ca:	4622      	moveq	r2, r4
 80079cc:	e7d4      	b.n	8007978 <trans_anim_cb+0xb8>
        bool refr = true;
 80079ce:	f04f 0801 	mov.w	r8, #1
 80079d2:	e7b1      	b.n	8007938 <trans_anim_cb+0x78>
 80079d4:	00410005 	.word	0x00410005
 80079d8:	00020009 	.word	0x00020009

080079dc <lv_obj_remove_style>:
{
 80079dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	4604      	mov	r4, r0
    return selector & 0xFFFF;
 80079e2:	fa1f fa82 	uxth.w	sl, r2
    return selector & 0xFF0000;
 80079e6:	f402 057f 	and.w	r5, r2, #16711680	; 0xff0000
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 80079ea:	4688      	mov	r8, r1
 80079ec:	b1d1      	cbz	r1, 8007a24 <lv_obj_remove_style+0x48>
 80079ee:	79ce      	ldrb	r6, [r1, #7]
 80079f0:	3e00      	subs	r6, #0
 80079f2:	bf18      	it	ne
 80079f4:	2601      	movne	r6, #1
 80079f6:	4276      	negs	r6, r6
 80079f8:	b2b6      	uxth	r6, r6
    bool deleted = false;
 80079fa:	2200      	movs	r2, #0
    uint32_t i = 0;
 80079fc:	4617      	mov	r7, r2
        if((state != LV_STATE_ANY && state_act != state) ||
 80079fe:	f64f 7bff 	movw	fp, #65535	; 0xffff
    while(i <  obj->style_cnt) {
 8007a02:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8007a04:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8007a08:	42bb      	cmp	r3, r7
 8007a0a:	d80e      	bhi.n	8007a2a <lv_obj_remove_style+0x4e>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 8007a0c:	2a00      	cmp	r2, #0
 8007a0e:	d064      	beq.n	8007ada <lv_obj_remove_style+0xfe>
 8007a10:	2e00      	cmp	r6, #0
 8007a12:	d062      	beq.n	8007ada <lv_obj_remove_style+0xfe>
        lv_obj_refresh_style(obj, part, prop);
 8007a14:	4629      	mov	r1, r5
 8007a16:	4620      	mov	r0, r4
 8007a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
 8007a1c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, part, prop);
 8007a20:	f7ff bdfa 	b.w	8007618 <lv_obj_refresh_style>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 8007a24:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8007a28:	e7e7      	b.n	80079fa <lv_obj_remove_style+0x1e>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8007a2a:	68e0      	ldr	r0, [r4, #12]
 8007a2c:	eb00 01c7 	add.w	r1, r0, r7, lsl #3
        if((state != LV_STATE_ANY && state_act != state) ||
 8007a30:	45da      	cmp	sl, fp
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8007a32:	684b      	ldr	r3, [r1, #4]
 8007a34:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8007a38:	f3c3 0317 	ubfx	r3, r3, #0, #24
        if((state != LV_STATE_ANY && state_act != state) ||
 8007a3c:	d003      	beq.n	8007a46 <lv_obj_remove_style+0x6a>
 8007a3e:	fa1f fc83 	uxth.w	ip, r3
 8007a42:	45d4      	cmp	ip, sl
 8007a44:	d10d      	bne.n	8007a62 <lv_obj_remove_style+0x86>
 8007a46:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 8007a4a:	d003      	beq.n	8007a54 <lv_obj_remove_style+0x78>
    return selector & 0xFF0000;
 8007a4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
           (part != LV_PART_ANY && part_act != part) ||
 8007a50:	42ab      	cmp	r3, r5
 8007a52:	d106      	bne.n	8007a62 <lv_obj_remove_style+0x86>
 8007a54:	f1b8 0f00 	cmp.w	r8, #0
 8007a58:	d005      	beq.n	8007a66 <lv_obj_remove_style+0x8a>
           (style != NULL && style != obj->styles[i].style)) {
 8007a5a:	f850 3009 	ldr.w	r3, [r0, r9]
 8007a5e:	4543      	cmp	r3, r8
 8007a60:	d001      	beq.n	8007a66 <lv_obj_remove_style+0x8a>
            i++;
 8007a62:	3701      	adds	r7, #1
            continue;
 8007a64:	e7cd      	b.n	8007a02 <lv_obj_remove_style+0x26>
        if(obj->styles[i].is_trans) {
 8007a66:	79cb      	ldrb	r3, [r1, #7]
 8007a68:	0799      	lsls	r1, r3, #30
 8007a6a:	d506      	bpl.n	8007a7a <lv_obj_remove_style+0x9e>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a72:	4629      	mov	r1, r5
 8007a74:	4620      	mov	r0, r4
 8007a76:	f7ff fca7 	bl	80073c8 <trans_del.isra.0>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 8007a7a:	68e3      	ldr	r3, [r4, #12]
 8007a7c:	eb03 0209 	add.w	r2, r3, r9
 8007a80:	79d2      	ldrb	r2, [r2, #7]
 8007a82:	0792      	lsls	r2, r2, #30
 8007a84:	d00c      	beq.n	8007aa0 <lv_obj_remove_style+0xc4>
            lv_style_reset(obj->styles[i].style);
 8007a86:	f853 0009 	ldr.w	r0, [r3, r9]
 8007a8a:	f00c fa63 	bl	8013f54 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 8007a8e:	68e3      	ldr	r3, [r4, #12]
 8007a90:	f853 0009 	ldr.w	r0, [r3, r9]
 8007a94:	f00b fc66 	bl	8013364 <lv_mem_free>
            obj->styles[i].style = NULL;
 8007a98:	68e3      	ldr	r3, [r4, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f843 2009 	str.w	r2, [r3, r9]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 8007aa0:	463a      	mov	r2, r7
 8007aa2:	e006      	b.n	8007ab2 <lv_obj_remove_style+0xd6>
            obj->styles[j] = obj->styles[j + 1];
 8007aa4:	3201      	adds	r2, #1
 8007aa6:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 8007aaa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007aae:	e903 0003 	stmdb	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 8007ab2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
            obj->styles[j] = obj->styles[j + 1];
 8007ab4:	68e0      	ldr	r0, [r4, #12]
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 8007ab6:	f3c3 01c5 	ubfx	r1, r3, #3, #6
 8007aba:	f101 3cff 	add.w	ip, r1, #4294967295
 8007abe:	4594      	cmp	ip, r2
 8007ac0:	d8f0      	bhi.n	8007aa4 <lv_obj_remove_style+0xc8>
        obj->style_cnt--;
 8007ac2:	313f      	adds	r1, #63	; 0x3f
 8007ac4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007ac8:	f361 03c8 	bfi	r3, r1, #3, #6
 8007acc:	8463      	strh	r3, [r4, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8007ace:	00c9      	lsls	r1, r1, #3
 8007ad0:	f00b fc60 	bl	8013394 <lv_mem_realloc>
        deleted = true;
 8007ad4:	2201      	movs	r2, #1
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8007ad6:	60e0      	str	r0, [r4, #12]
        deleted = true;
 8007ad8:	e793      	b.n	8007a02 <lv_obj_remove_style+0x26>
}
 8007ada:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007ae0 <trans_anim_ready_cb>:
{
 8007ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    trans_t * tr = a->var;
 8007ae4:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8007ae6:	4827      	ldr	r0, [pc, #156]	; (8007b84 <trans_anim_ready_cb+0xa4>)
    lv_obj_t * obj = tr->obj;
 8007ae8:	6825      	ldr	r5, [r4, #0]
    lv_style_prop_t prop = tr->prop;
 8007aea:	88a7      	ldrh	r7, [r4, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8007aec:	4e25      	ldr	r6, [pc, #148]	; (8007b84 <trans_anim_ready_cb+0xa4>)
 8007aee:	f00b fb2a 	bl	8013146 <_lv_ll_get_head>
 8007af2:	b930      	cbnz	r0, 8007b02 <trans_anim_ready_cb+0x22>
        for(i = 0; i < obj->style_cnt; i++) {
 8007af4:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 8007af6:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 8007afa:	4282      	cmp	r2, r0
 8007afc:	d814      	bhi.n	8007b28 <trans_anim_ready_cb+0x48>
}
 8007afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 8007b02:	42a0      	cmp	r0, r4
 8007b04:	d00b      	beq.n	8007b1e <trans_anim_ready_cb+0x3e>
 8007b06:	6802      	ldr	r2, [r0, #0]
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d107      	bne.n	8007b1e <trans_anim_ready_cb+0x3e>
 8007b0e:	6882      	ldr	r2, [r0, #8]
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d103      	bne.n	8007b1e <trans_anim_ready_cb+0x3e>
 8007b16:	8882      	ldrh	r2, [r0, #4]
 8007b18:	88a3      	ldrh	r3, [r4, #4]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d0ef      	beq.n	8007afe <trans_anim_ready_cb+0x1e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8007b1e:	4601      	mov	r1, r0
 8007b20:	4630      	mov	r0, r6
 8007b22:	f00b fb16 	bl	8013152 <_lv_ll_get_next>
 8007b26:	e7e4      	b.n	8007af2 <trans_anim_ready_cb+0x12>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 8007b28:	68eb      	ldr	r3, [r5, #12]
 8007b2a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8007b2e:	00c6      	lsls	r6, r0, #3
 8007b30:	79d9      	ldrb	r1, [r3, #7]
 8007b32:	0789      	lsls	r1, r1, #30
 8007b34:	d523      	bpl.n	8007b7e <trans_anim_ready_cb+0x9e>
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	68a1      	ldr	r1, [r4, #8]
 8007b3a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8007b3e:	428b      	cmp	r3, r1
 8007b40:	d11d      	bne.n	8007b7e <trans_anim_ready_cb+0x9e>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8007b42:	4621      	mov	r1, r4
 8007b44:	480f      	ldr	r0, [pc, #60]	; (8007b84 <trans_anim_ready_cb+0xa4>)
 8007b46:	f00b fad5 	bl	80130f4 <_lv_ll_remove>
                lv_mem_free(tr);
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f00b fc0a 	bl	8013364 <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 8007b50:	68ec      	ldr	r4, [r5, #12]
                lv_style_remove_prop(obj_style->style, prop);
 8007b52:	4639      	mov	r1, r7
 8007b54:	59a0      	ldr	r0, [r4, r6]
 8007b56:	f00c fa4b 	bl	8013ff0 <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 8007b5a:	68eb      	ldr	r3, [r5, #12]
 8007b5c:	5998      	ldr	r0, [r3, r6]
                _lv_obj_style_t * obj_style = &obj->styles[i];
 8007b5e:	eb04 0806 	add.w	r8, r4, r6
                if(lv_style_is_empty(obj->styles[i].style)) {
 8007b62:	f00c fb9d 	bl	80142a0 <lv_style_is_empty>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d0c9      	beq.n	8007afe <trans_anim_ready_cb+0x1e>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 8007b6a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007b6e:	59a1      	ldr	r1, [r4, r6]
 8007b70:	4628      	mov	r0, r5
 8007b72:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
}
 8007b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 8007b7a:	f7ff bf2f 	b.w	80079dc <lv_obj_remove_style>
        for(i = 0; i < obj->style_cnt; i++) {
 8007b7e:	3001      	adds	r0, #1
 8007b80:	e7bb      	b.n	8007afa <trans_anim_ready_cb+0x1a>
 8007b82:	bf00      	nop
 8007b84:	20000e38 	.word	0x20000e38

08007b88 <lv_obj_set_local_style_prop>:
{
 8007b88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b8a:	460d      	mov	r5, r1
    lv_style_t * style = get_local_style(obj, selector);
 8007b8c:	4619      	mov	r1, r3
{
 8007b8e:	461c      	mov	r4, r3
 8007b90:	4606      	mov	r6, r0
 8007b92:	9201      	str	r2, [sp, #4]
    lv_style_t * style = get_local_style(obj, selector);
 8007b94:	f7ff fb76 	bl	8007284 <get_local_style>
    lv_style_set_prop(style, prop, value);
 8007b98:	9a01      	ldr	r2, [sp, #4]
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	f00c fc06 	bl	80143ac <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 8007ba0:	462a      	mov	r2, r5
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	4630      	mov	r0, r6
}
 8007ba6:	b002      	add	sp, #8
 8007ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_refresh_style(obj, selector, prop);
 8007bac:	f7ff bd34 	b.w	8007618 <lv_obj_refresh_style>

08007bb0 <lv_obj_get_local_style_prop>:
{
 8007bb0:	b4f0      	push	{r4, r5, r6, r7}
    for(i = 0; i < obj->style_cnt; i++) {
 8007bb2:	8c46      	ldrh	r6, [r0, #34]	; 0x22
 8007bb4:	2500      	movs	r5, #0
 8007bb6:	f3c6 06c5 	ubfx	r6, r6, #3, #6
 8007bba:	42ae      	cmp	r6, r5
 8007bbc:	d802      	bhi.n	8007bc4 <lv_obj_get_local_style_prop+0x14>
}
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	bcf0      	pop	{r4, r5, r6, r7}
 8007bc2:	4770      	bx	lr
        if(obj->styles[i].is_local &&
 8007bc4:	68c4      	ldr	r4, [r0, #12]
 8007bc6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007bca:	79e7      	ldrb	r7, [r4, #7]
 8007bcc:	07ff      	lsls	r7, r7, #31
 8007bce:	d508      	bpl.n	8007be2 <lv_obj_get_local_style_prop+0x32>
           obj->styles[i].selector == selector) {
 8007bd0:	6867      	ldr	r7, [r4, #4]
 8007bd2:	f3c7 0717 	ubfx	r7, r7, #0, #24
        if(obj->styles[i].is_local &&
 8007bd6:	429f      	cmp	r7, r3
 8007bd8:	d103      	bne.n	8007be2 <lv_obj_get_local_style_prop+0x32>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 8007bda:	6820      	ldr	r0, [r4, #0]
}
 8007bdc:	bcf0      	pop	{r4, r5, r6, r7}
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 8007bde:	f00c bb0f 	b.w	8014200 <lv_style_get_prop>
    for(i = 0; i < obj->style_cnt; i++) {
 8007be2:	3501      	adds	r5, #1
 8007be4:	e7e9      	b.n	8007bba <lv_obj_get_local_style_prop+0xa>

08007be6 <lv_obj_remove_local_style_prop>:
{
 8007be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be8:	4604      	mov	r4, r0
    for(i = 0; i < obj->style_cnt; i++) {
 8007bea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
{
 8007bec:	460f      	mov	r7, r1
 8007bee:	4616      	mov	r6, r2
    for(i = 0; i < obj->style_cnt; i++) {
 8007bf0:	f3c0 00c5 	ubfx	r0, r0, #3, #6
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4298      	cmp	r0, r3
 8007bf8:	d803      	bhi.n	8007c02 <lv_obj_remove_local_style_prop+0x1c>
    if(i == obj->style_cnt) return false;
 8007bfa:	d10d      	bne.n	8007c18 <lv_obj_remove_local_style_prop+0x32>
 8007bfc:	2500      	movs	r5, #0
}
 8007bfe:	4628      	mov	r0, r5
 8007c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(obj->styles[i].is_local &&
 8007c02:	68e2      	ldr	r2, [r4, #12]
 8007c04:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007c08:	79d5      	ldrb	r5, [r2, #7]
 8007c0a:	07e9      	lsls	r1, r5, #31
 8007c0c:	d513      	bpl.n	8007c36 <lv_obj_remove_local_style_prop+0x50>
           obj->styles[i].selector == selector) {
 8007c0e:	6852      	ldr	r2, [r2, #4]
 8007c10:	f3c2 0217 	ubfx	r2, r2, #0, #24
        if(obj->styles[i].is_local &&
 8007c14:	42b2      	cmp	r2, r6
 8007c16:	d10e      	bne.n	8007c36 <lv_obj_remove_local_style_prop+0x50>
    lv_res_t res = lv_style_remove_prop(obj->styles[i].style, prop);
 8007c18:	68e2      	ldr	r2, [r4, #12]
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8007c20:	f00c f9e6 	bl	8013ff0 <lv_style_remove_prop>
    if(res == LV_RES_OK) {
 8007c24:	4605      	mov	r5, r0
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d0e8      	beq.n	8007bfc <lv_obj_remove_local_style_prop+0x16>
        lv_obj_refresh_style(obj, selector, prop);
 8007c2a:	463a      	mov	r2, r7
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f7ff fcf2 	bl	8007618 <lv_obj_refresh_style>
 8007c34:	e7e3      	b.n	8007bfe <lv_obj_remove_local_style_prop+0x18>
    for(i = 0; i < obj->style_cnt; i++) {
 8007c36:	3301      	adds	r3, #1
 8007c38:	e7dd      	b.n	8007bf6 <lv_obj_remove_local_style_prop+0x10>
	...

08007c3c <_lv_obj_style_create_transition>:
{
 8007c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	4698      	mov	r8, r3
 8007c42:	b092      	sub	sp, #72	; 0x48
    obj->skip_trans = 1;
 8007c44:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
 8007c48:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    obj->state = prev_state;
 8007c4a:	8402      	strh	r2, [r0, #32]
    obj->skip_trans = 1;
 8007c4c:	f043 0304 	orr.w	r3, r3, #4
 8007c50:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
{
 8007c54:	4615      	mov	r5, r2
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007c56:	8932      	ldrh	r2, [r6, #8]
{
 8007c58:	4604      	mov	r4, r0
 8007c5a:	460f      	mov	r7, r1
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007c5c:	f7ff fc16 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007c60:	8932      	ldrh	r2, [r6, #8]
    obj->state = new_state;
 8007c62:	f8a4 8020 	strh.w	r8, [r4, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007c66:	4682      	mov	sl, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007c68:	4639      	mov	r1, r7
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f7ff fc0e 	bl	800748c <lv_obj_get_style_prop>
    obj->skip_trans = 0;
 8007c70:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 8007c74:	4582      	cmp	sl, r0
    obj->skip_trans = 0;
 8007c76:	f36f 0382 	bfc	r3, #2, #1
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007c7a:	4681      	mov	r9, r0
    obj->skip_trans = 0;
 8007c7c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 8007c80:	d070      	beq.n	8007d64 <_lv_obj_style_create_transition+0x128>
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007c82:	8932      	ldrh	r2, [r6, #8]
    obj->state = prev_state;
 8007c84:	8425      	strh	r5, [r4, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007c86:	4639      	mov	r1, r7
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f7ff fbff 	bl	800748c <lv_obj_get_style_prop>
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 8007c8e:	4639      	mov	r1, r7
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007c90:	4605      	mov	r5, r0
    obj->state = new_state;
 8007c92:	f8a4 8020 	strh.w	r8, [r4, #32]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 8007c96:	4620      	mov	r0, r4
 8007c98:	f7ff fb50 	bl	800733c <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 8007c9c:	8931      	ldrh	r1, [r6, #8]
 8007c9e:	6800      	ldr	r0, [r0, #0]
 8007ca0:	462a      	mov	r2, r5
 8007ca2:	f00c fb83 	bl	80143ac <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 8007ca6:	8933      	ldrh	r3, [r6, #8]
 8007ca8:	2b0b      	cmp	r3, #11
 8007caa:	d122      	bne.n	8007cf2 <_lv_obj_style_create_transition+0xb6>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 8007cac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007cb0:	429d      	cmp	r5, r3
 8007cb2:	d001      	beq.n	8007cb8 <_lv_obj_style_create_transition+0x7c>
 8007cb4:	4599      	cmp	r9, r3
 8007cb6:	d11c      	bne.n	8007cf2 <_lv_obj_style_create_transition+0xb6>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f7fd f93f 	bl	8004f3c <lv_obj_get_width>
 8007cbe:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007cc2:	f340 084f 	sbfx	r8, r0, #1, #16
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f7fd f93e 	bl	8004f48 <lv_obj_get_height>
 8007ccc:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 8007cd0:	f342 034f 	sbfx	r3, r2, #1, #16
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8007cd4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007cd8:	4295      	cmp	r5, r2
 8007cda:	d116      	bne.n	8007d0a <_lv_obj_style_create_transition+0xce>
 8007cdc:	4598      	cmp	r8, r3
 8007cde:	da0e      	bge.n	8007cfe <_lv_obj_style_create_transition+0xc2>
 8007ce0:	f108 0501 	add.w	r5, r8, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8007ce4:	4591      	cmp	r9, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8007ce6:	b22d      	sxth	r5, r5
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8007ce8:	d103      	bne.n	8007cf2 <_lv_obj_style_create_transition+0xb6>
 8007cea:	f108 0301 	add.w	r3, r8, #1
 8007cee:	fa0f f983 	sxth.w	r9, r3
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8007cf2:	481e      	ldr	r0, [pc, #120]	; (8007d6c <_lv_obj_style_create_transition+0x130>)
 8007cf4:	f00b f9c7 	bl	8013086 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(tr);
 8007cf8:	4680      	mov	r8, r0
 8007cfa:	b958      	cbnz	r0, 8007d14 <_lv_obj_style_create_transition+0xd8>
 8007cfc:	e7fe      	b.n	8007cfc <_lv_obj_style_create_transition+0xc0>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8007cfe:	1c5d      	adds	r5, r3, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8007d00:	4591      	cmp	r9, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8007d02:	b22d      	sxth	r5, r5
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8007d04:	d1f5      	bne.n	8007cf2 <_lv_obj_style_create_transition+0xb6>
 8007d06:	3301      	adds	r3, #1
 8007d08:	e7f1      	b.n	8007cee <_lv_obj_style_create_transition+0xb2>
 8007d0a:	4591      	cmp	r9, r2
 8007d0c:	d1f1      	bne.n	8007cf2 <_lv_obj_style_create_transition+0xb6>
 8007d0e:	4598      	cmp	r8, r3
 8007d10:	daf9      	bge.n	8007d06 <_lv_obj_style_create_transition+0xca>
 8007d12:	e7ea      	b.n	8007cea <_lv_obj_style_create_transition+0xae>
    tr->prop = tr_dsc->prop;
 8007d14:	8933      	ldrh	r3, [r6, #8]
 8007d16:	8083      	strh	r3, [r0, #4]
    tr->end_value = v2;
 8007d18:	e9c0 5903 	strd	r5, r9, [r0, #12]
    tr->obj = obj;
 8007d1c:	6004      	str	r4, [r0, #0]
    tr->selector = part;
 8007d1e:	6087      	str	r7, [r0, #8]
    lv_anim_init(&a);
 8007d20:	a801      	add	r0, sp, #4
 8007d22:	f00a fc7b 	bl	801261c <lv_anim_init>
    a->end_value = end;
 8007d26:	22ff      	movs	r2, #255	; 0xff
 8007d28:	920b      	str	r2, [sp, #44]	; 0x2c
    a->time = duration;
 8007d2a:	8832      	ldrh	r2, [r6, #0]
 8007d2c:	920c      	str	r2, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
 8007d2e:	8872      	ldrh	r2, [r6, #2]
    a->exec_cb = exec_cb;
 8007d30:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <_lv_obj_style_create_transition+0x134>)
 8007d32:	9302      	str	r3, [sp, #8]
    a->act_time = -(int32_t)(delay);
 8007d34:	4252      	negs	r2, r2
    a->start_cb = start_cb;
 8007d36:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <_lv_obj_style_create_transition+0x138>)
    a->act_time = -(int32_t)(delay);
 8007d38:	920d      	str	r2, [sp, #52]	; 0x34
    a->path_cb = path_cb;
 8007d3a:	68f2      	ldr	r2, [r6, #12]
    a->start_cb = start_cb;
 8007d3c:	9303      	str	r3, [sp, #12]
    a->path_cb = path_cb;
 8007d3e:	9208      	str	r2, [sp, #32]
    a->ready_cb = ready_cb;
 8007d40:	4b0d      	ldr	r3, [pc, #52]	; (8007d78 <_lv_obj_style_create_transition+0x13c>)
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 8007d42:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
    a->ready_cb = ready_cb;
 8007d46:	9304      	str	r3, [sp, #16]
    a->start_value = start;
 8007d48:	2300      	movs	r3, #0
    a->early_apply = en;
 8007d4a:	f363 0200 	bfi	r2, r3, #0, #1
    a->current_value = start;
 8007d4e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    lv_anim_start(&a);
 8007d52:	a801      	add	r0, sp, #4
    a.user_data = tr_dsc->user_data;
 8007d54:	6933      	ldr	r3, [r6, #16]
    a->var = var;
 8007d56:	f8cd 8004 	str.w	r8, [sp, #4]
    a->early_apply = en;
 8007d5a:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 8007d5e:	9307      	str	r3, [sp, #28]
    lv_anim_start(&a);
 8007d60:	f00a fca6 	bl	80126b0 <lv_anim_start>
}
 8007d64:	b012      	add	sp, #72	; 0x48
 8007d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20000e38 	.word	0x20000e38
 8007d70:	080078c1 	.word	0x080078c1
 8007d74:	080075d7 	.word	0x080075d7
 8007d78:	08007ae1 	.word	0x08007ae1

08007d7c <_lv_obj_style_apply_color_filter>:
{
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	460f      	mov	r7, r1
 8007d80:	4615      	mov	r5, r2
    if(obj == NULL) return v;
 8007d82:	4606      	mov	r6, r0
 8007d84:	b1a0      	cbz	r0, 8007db0 <_lv_obj_style_apply_color_filter+0x34>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 8007d86:	2261      	movs	r2, #97	; 0x61
 8007d88:	f7ff fb80 	bl	800748c <lv_obj_get_style_prop>
    if(f && f->filter_cb) {
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	b178      	cbz	r0, 8007db0 <_lv_obj_style_apply_color_filter+0x34>
 8007d90:	6803      	ldr	r3, [r0, #0]
 8007d92:	b16b      	cbz	r3, 8007db0 <_lv_obj_style_apply_color_filter+0x34>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 8007d94:	2262      	movs	r2, #98	; 0x62
 8007d96:	4639      	mov	r1, r7
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f7ff fb77 	bl	800748c <lv_obj_get_style_prop>
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 8007d9e:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 8007da2:	d005      	beq.n	8007db0 <_lv_obj_style_apply_color_filter+0x34>
 8007da4:	4629      	mov	r1, r5
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	4620      	mov	r0, r4
 8007daa:	4798      	blx	r3
 8007dac:	f360 0507 	bfi	r5, r0, #0, #8
}
 8007db0:	4628      	mov	r0, r5
 8007db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007db4 <_lv_obj_style_state_compare>:
{
 8007db4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 8007db8:	2500      	movs	r5, #0
{
 8007dba:	4607      	mov	r7, r0
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 8007dbc:	462e      	mov	r6, r5
        bool valid1 = state_act & (~state1) ? false : true;
 8007dbe:	ea6f 0801 	mvn.w	r8, r1
        bool valid2 = state_act & (~state2) ? false : true;
 8007dc2:	ea6f 0902 	mvn.w	r9, r2
    for(i = 0; i < obj->style_cnt; i++) {
 8007dc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007dc8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8007dcc:	42ab      	cmp	r3, r5
 8007dce:	f240 8096 	bls.w	8007efe <_lv_obj_style_state_compare+0x14a>
        if(obj->styles[i].is_trans) continue;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8007dd8:	00e9      	lsls	r1, r5, #3
 8007dda:	79d0      	ldrb	r0, [r2, #7]
 8007ddc:	0784      	lsls	r4, r0, #30
 8007dde:	f100 808b 	bmi.w	8007ef8 <_lv_obj_style_state_compare+0x144>
        bool valid1 = state_act & (~state1) ? false : true;
 8007de2:	8892      	ldrh	r2, [r2, #4]
 8007de4:	ea18 0f02 	tst.w	r8, r2
 8007de8:	bf0c      	ite	eq
 8007dea:	2001      	moveq	r0, #1
 8007dec:	2000      	movne	r0, #0
        bool valid2 = state_act & (~state2) ? false : true;
 8007dee:	ea19 0f02 	tst.w	r9, r2
        if(valid1 != valid2) {
 8007df2:	bf0c      	ite	eq
 8007df4:	2201      	moveq	r2, #1
 8007df6:	2200      	movne	r2, #0
 8007df8:	4290      	cmp	r0, r2
 8007dfa:	d07d      	beq.n	8007ef8 <_lv_obj_style_state_compare+0x144>
            lv_style_t * style = obj->styles[i].style;
 8007dfc:	585c      	ldr	r4, [r3, r1]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 8007dfe:	aa01      	add	r2, sp, #4
 8007e00:	2110      	movs	r1, #16
 8007e02:	4620      	mov	r0, r4
 8007e04:	f00c f9fc 	bl	8014200 <lv_style_get_prop>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d177      	bne.n	8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 8007e0c:	aa01      	add	r2, sp, #4
 8007e0e:	2111      	movs	r1, #17
 8007e10:	4620      	mov	r0, r4
 8007e12:	f00c f9f5 	bl	8014200 <lv_style_get_prop>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d170      	bne.n	8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 8007e1a:	aa01      	add	r2, sp, #4
 8007e1c:	2112      	movs	r1, #18
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f00c f9ee 	bl	8014200 <lv_style_get_prop>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d169      	bne.n	8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 8007e28:	aa01      	add	r2, sp, #4
 8007e2a:	2113      	movs	r1, #19
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f00c f9e7 	bl	8014200 <lv_style_get_prop>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d162      	bne.n	8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 8007e36:	aa01      	add	r2, sp, #4
 8007e38:	2115      	movs	r1, #21
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f00c f9e0 	bl	8014200 <lv_style_get_prop>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d15b      	bne.n	8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 8007e44:	aa01      	add	r2, sp, #4
 8007e46:	2114      	movs	r1, #20
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f00c f9d9 	bl	8014200 <lv_style_get_prop>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d154      	bne.n	8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 8007e52:	aa01      	add	r2, sp, #4
 8007e54:	210a      	movs	r1, #10
 8007e56:	4620      	mov	r0, r4
 8007e58:	f00c f9d2 	bl	8014200 <lv_style_get_prop>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d14d      	bne.n	8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 8007e60:	aa01      	add	r2, sp, #4
 8007e62:	216a      	movs	r1, #106	; 0x6a
 8007e64:	4620      	mov	r0, r4
 8007e66:	f00c f9cb 	bl	8014200 <lv_style_get_prop>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d146      	bne.n	8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 8007e6e:	aa01      	add	r2, sp, #4
 8007e70:	216b      	movs	r1, #107	; 0x6b
 8007e72:	4620      	mov	r0, r4
 8007e74:	f00c f9c4 	bl	8014200 <lv_style_get_prop>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d13f      	bne.n	8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 8007e7c:	aa01      	add	r2, sp, #4
 8007e7e:	2101      	movs	r1, #1
 8007e80:	4620      	mov	r0, r4
 8007e82:	f00c f9bd 	bl	8014200 <lv_style_get_prop>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d138      	bne.n	8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 8007e8a:	aa01      	add	r2, sp, #4
 8007e8c:	2104      	movs	r1, #4
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f00c f9b6 	bl	8014200 <lv_style_get_prop>
 8007e94:	bb90      	cbnz	r0, 8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 8007e96:	aa01      	add	r2, sp, #4
 8007e98:	2102      	movs	r1, #2
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f00c f9b0 	bl	8014200 <lv_style_get_prop>
 8007ea0:	bb60      	cbnz	r0, 8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 8007ea2:	aa01      	add	r2, sp, #4
 8007ea4:	2103      	movs	r1, #3
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f00c f9aa 	bl	8014200 <lv_style_get_prop>
 8007eac:	bb30      	cbnz	r0, 8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 8007eae:	aa01      	add	r2, sp, #4
 8007eb0:	2105      	movs	r1, #5
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f00c f9a4 	bl	8014200 <lv_style_get_prop>
 8007eb8:	bb00      	cbnz	r0, 8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 8007eba:	aa01      	add	r2, sp, #4
 8007ebc:	2106      	movs	r1, #6
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f00c f99e 	bl	8014200 <lv_style_get_prop>
 8007ec4:	b9d0      	cbnz	r0, 8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 8007ec6:	aa01      	add	r2, sp, #4
 8007ec8:	2132      	movs	r1, #50	; 0x32
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f00c f998 	bl	8014200 <lv_style_get_prop>
 8007ed0:	b9a0      	cbnz	r0, 8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 8007ed2:	aa01      	add	r2, sp, #4
 8007ed4:	216d      	movs	r1, #109	; 0x6d
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f00c f992 	bl	8014200 <lv_style_get_prop>
 8007edc:	b970      	cbnz	r0, 8007efc <_lv_obj_style_state_compare+0x148>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 8007ede:	aa01      	add	r2, sp, #4
 8007ee0:	216c      	movs	r1, #108	; 0x6c
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f00c f98c 	bl	8014200 <lv_style_get_prop>
 8007ee8:	b940      	cbnz	r0, 8007efc <_lv_obj_style_state_compare+0x148>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007eea:	aa01      	add	r2, sp, #4
 8007eec:	2168      	movs	r1, #104	; 0x68
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f00c f986 	bl	8014200 <lv_style_get_prop>
 8007ef4:	b138      	cbz	r0, 8007f06 <_lv_obj_style_state_compare+0x152>
 8007ef6:	2602      	movs	r6, #2
    for(i = 0; i < obj->style_cnt; i++) {
 8007ef8:	3501      	adds	r5, #1
 8007efa:	e764      	b.n	8007dc6 <_lv_obj_style_state_compare+0x12>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 8007efc:	2603      	movs	r6, #3
}
 8007efe:	4630      	mov	r0, r6
 8007f00:	b003      	add	sp, #12
 8007f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007f06:	aa01      	add	r2, sp, #4
 8007f08:	2169      	movs	r1, #105	; 0x69
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f00c f978 	bl	8014200 <lv_style_get_prop>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d1f0      	bne.n	8007ef6 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007f14:	aa01      	add	r2, sp, #4
 8007f16:	216d      	movs	r1, #109	; 0x6d
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f00c f971 	bl	8014200 <lv_style_get_prop>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d1e9      	bne.n	8007ef6 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007f22:	aa01      	add	r2, sp, #4
 8007f24:	216c      	movs	r1, #108	; 0x6c
 8007f26:	4620      	mov	r0, r4
 8007f28:	f00c f96a 	bl	8014200 <lv_style_get_prop>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d1e2      	bne.n	8007ef6 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007f30:	aa01      	add	r2, sp, #4
 8007f32:	2137      	movs	r1, #55	; 0x37
 8007f34:	4620      	mov	r0, r4
 8007f36:	f00c f963 	bl	8014200 <lv_style_get_prop>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d1db      	bne.n	8007ef6 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007f3e:	aa01      	add	r2, sp, #4
 8007f40:	2138      	movs	r1, #56	; 0x38
 8007f42:	4620      	mov	r0, r4
 8007f44:	f00c f95c 	bl	8014200 <lv_style_get_prop>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d1d4      	bne.n	8007ef6 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007f4c:	aa01      	add	r2, sp, #4
 8007f4e:	2135      	movs	r1, #53	; 0x35
 8007f50:	4620      	mov	r0, r4
 8007f52:	f00c f955 	bl	8014200 <lv_style_get_prop>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d1cd      	bne.n	8007ef6 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007f5a:	aa01      	add	r2, sp, #4
 8007f5c:	2140      	movs	r1, #64	; 0x40
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f00c f94e 	bl	8014200 <lv_style_get_prop>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d1c6      	bne.n	8007ef6 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007f68:	aa01      	add	r2, sp, #4
 8007f6a:	2145      	movs	r1, #69	; 0x45
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f00c f947 	bl	8014200 <lv_style_get_prop>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d1bf      	bne.n	8007ef6 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007f76:	aa01      	add	r2, sp, #4
 8007f78:	2141      	movs	r1, #65	; 0x41
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f00c f940 	bl	8014200 <lv_style_get_prop>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d1b8      	bne.n	8007ef6 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007f84:	aa01      	add	r2, sp, #4
 8007f86:	2142      	movs	r1, #66	; 0x42
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f00c f939 	bl	8014200 <lv_style_get_prop>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d1b1      	bne.n	8007ef6 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007f92:	aa01      	add	r2, sp, #4
 8007f94:	2143      	movs	r1, #67	; 0x43
 8007f96:	4620      	mov	r0, r4
 8007f98:	f00c f932 	bl	8014200 <lv_style_get_prop>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d1aa      	bne.n	8007ef6 <_lv_obj_style_state_compare+0x142>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007fa0:	aa01      	add	r2, sp, #4
 8007fa2:	2149      	movs	r1, #73	; 0x49
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f00c f92b 	bl	8014200 <lv_style_get_prop>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d1a3      	bne.n	8007ef6 <_lv_obj_style_state_compare+0x142>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 8007fae:	2e01      	cmp	r6, #1
 8007fb0:	bf38      	it	cc
 8007fb2:	2601      	movcc	r6, #1
 8007fb4:	e7a0      	b.n	8007ef8 <_lv_obj_style_state_compare+0x144>

08007fb6 <lv_obj_style_get_selector_state>:
}
 8007fb6:	b280      	uxth	r0, r0
 8007fb8:	4770      	bx	lr

08007fba <lv_obj_style_get_selector_part>:
}
 8007fba:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8007fbe:	4770      	bx	lr

08007fc0 <lv_obj_calculate_style_text_align>:
{
 8007fc0:	b570      	push	{r4, r5, r6, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 8007fc2:	225b      	movs	r2, #91	; 0x5b
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	460e      	mov	r6, r1
 8007fc8:	f7ff fa60 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8007fcc:	2216      	movs	r2, #22
    return (lv_text_align_t)v.num;
 8007fce:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f7ff fa5a 	bl	800748c <lv_obj_get_style_prop>
}
 8007fd8:	2c01      	cmp	r4, #1
 8007fda:	4620      	mov	r0, r4
 8007fdc:	bf38      	it	cc
 8007fde:	2001      	movcc	r0, #1
 8007fe0:	bd70      	pop	{r4, r5, r6, pc}

08007fe2 <lv_obj_set_style_width>:
#include "lv_obj.h"

void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 8007fe2:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 8007fe4:	460a      	mov	r2, r1
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	f7ff bdce 	b.w	8007b88 <lv_obj_set_local_style_prop>

08007fec <lv_obj_set_style_min_width>:
}

void lv_obj_set_style_min_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 8007fec:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MIN_WIDTH, v, selector);
 8007fee:	460a      	mov	r2, r1
 8007ff0:	2102      	movs	r1, #2
 8007ff2:	f7ff bdc9 	b.w	8007b88 <lv_obj_set_local_style_prop>

08007ff6 <lv_obj_set_style_height>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_WIDTH, v, selector);
}

void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 8007ff6:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
 8007ff8:	460a      	mov	r2, r1
 8007ffa:	2104      	movs	r1, #4
 8007ffc:	f7ff bdc4 	b.w	8007b88 <lv_obj_set_local_style_prop>

08008000 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 8008000:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 8008002:	460a      	mov	r2, r1
 8008004:	2107      	movs	r1, #7
 8008006:	f7ff bdbf 	b.w	8007b88 <lv_obj_set_local_style_prop>

0800800a <lv_obj_set_style_y>:
}

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800800a:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 800800c:	460a      	mov	r2, r1
 800800e:	2108      	movs	r1, #8
 8008010:	f7ff bdba 	b.w	8007b88 <lv_obj_set_local_style_prop>

08008014 <lv_obj_set_style_align>:
}

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
 8008014:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 8008016:	460a      	mov	r2, r1
 8008018:	2109      	movs	r1, #9
 800801a:	f7ff bdb5 	b.w	8007b88 <lv_obj_set_local_style_prop>

0800801e <lv_obj_get_screen>:
    return NULL;
}

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
 800801e:	b108      	cbz	r0, 8008024 <lv_obj_get_screen+0x6>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 8008020:	6843      	ldr	r3, [r0, #4]
    } while(par != NULL);
 8008022:	b903      	cbnz	r3, 8008026 <lv_obj_get_screen+0x8>
}
 8008024:	4770      	bx	lr
 8008026:	4618      	mov	r0, r3
 8008028:	e7f9      	b.n	800801e <lv_obj_get_screen>
	...

0800802c <lv_obj_get_disp>:
{
 800802c:	b538      	push	{r3, r4, r5, lr}
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800802e:	6843      	ldr	r3, [r0, #4]
{
 8008030:	4604      	mov	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 8008032:	b113      	cbz	r3, 800803a <lv_obj_get_disp+0xe>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 8008034:	f7ff fff3 	bl	800801e <lv_obj_get_screen>
 8008038:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800803a:	480b      	ldr	r0, [pc, #44]	; (8008068 <lv_obj_get_disp+0x3c>)
 800803c:	4d0a      	ldr	r5, [pc, #40]	; (8008068 <lv_obj_get_disp+0x3c>)
 800803e:	f00b f882 	bl	8013146 <_lv_ll_get_head>
 8008042:	b178      	cbz	r0, 8008064 <lv_obj_get_disp+0x38>
        for(i = 0; i < d->screen_cnt; i++) {
 8008044:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008046:	2300      	movs	r3, #0
 8008048:	e005      	b.n	8008056 <lv_obj_get_disp+0x2a>
            if(d->screens[i] == scr) return d;
 800804a:	68c1      	ldr	r1, [r0, #12]
 800804c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008050:	42a1      	cmp	r1, r4
 8008052:	d007      	beq.n	8008064 <lv_obj_get_disp+0x38>
        for(i = 0; i < d->screen_cnt; i++) {
 8008054:	3301      	adds	r3, #1
 8008056:	429a      	cmp	r2, r3
 8008058:	d1f7      	bne.n	800804a <lv_obj_get_disp+0x1e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800805a:	4601      	mov	r1, r0
 800805c:	4628      	mov	r0, r5
 800805e:	f00b f878 	bl	8013152 <_lv_ll_get_next>
 8008062:	e7ee      	b.n	8008042 <lv_obj_get_disp+0x16>
}
 8008064:	bd38      	pop	{r3, r4, r5, pc}
 8008066:	bf00      	nop
 8008068:	20000d48 	.word	0x20000d48

0800806c <lv_obj_get_parent>:
    if(obj == NULL) return NULL;
 800806c:	b100      	cbz	r0, 8008070 <lv_obj_get_parent+0x4>
    return obj->parent;
 800806e:	6840      	ldr	r0, [r0, #4]
}
 8008070:	4770      	bx	lr

08008072 <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 8008072:	6880      	ldr	r0, [r0, #8]
 8008074:	b158      	cbz	r0, 800808e <lv_obj_get_child+0x1c>

    uint32_t idu;
    if(id < 0) {
 8008076:	2900      	cmp	r1, #0
        id = obj->spec_attr->child_cnt + id;
 8008078:	6843      	ldr	r3, [r0, #4]
    if(id < 0) {
 800807a:	da01      	bge.n	8008080 <lv_obj_get_child+0xe>
        if(id < 0) return NULL;
 800807c:	18c9      	adds	r1, r1, r3
 800807e:	d405      	bmi.n	800808c <lv_obj_get_child+0x1a>
    }
    else {
        idu = id;
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 8008080:	4299      	cmp	r1, r3
 8008082:	d203      	bcs.n	800808c <lv_obj_get_child+0x1a>
    else return obj->spec_attr->children[id];
 8008084:	6803      	ldr	r3, [r0, #0]
 8008086:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800808a:	4770      	bx	lr
    if(obj->spec_attr == NULL) return NULL;
 800808c:	2000      	movs	r0, #0
}
 800808e:	4770      	bx	lr

08008090 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 8008090:	6880      	ldr	r0, [r0, #8]
 8008092:	b100      	cbz	r0, 8008096 <lv_obj_get_child_cnt+0x6>
    return obj->spec_attr->child_cnt;
 8008094:	6840      	ldr	r0, [r0, #4]
}
 8008096:	4770      	bx	lr

08008098 <lv_obj_get_index>:

uint32_t lv_obj_get_index(const lv_obj_t * obj)
{
 8008098:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return NULL;
 800809a:	4604      	mov	r4, r0
 800809c:	b1a0      	cbz	r0, 80080c8 <lv_obj_get_index+0x30>
    return obj->parent;
 800809e:	6845      	ldr	r5, [r0, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
    if(parent == NULL) return 0;
 80080a0:	b1a5      	cbz	r5, 80080cc <lv_obj_get_index+0x34>

    uint32_t i = 0;
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 80080a2:	4628      	mov	r0, r5
 80080a4:	f7ff fff4 	bl	8008090 <lv_obj_get_child_cnt>
 80080a8:	2200      	movs	r2, #0
 80080aa:	4606      	mov	r6, r0
 80080ac:	4296      	cmp	r6, r2
 80080ae:	d103      	bne.n	80080b8 <lv_obj_get_index+0x20>
        if(lv_obj_get_child(parent, i) == obj) return i;
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 80080b0:	f04f 32ff 	mov.w	r2, #4294967295
}
 80080b4:	4610      	mov	r0, r2
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
        if(lv_obj_get_child(parent, i) == obj) return i;
 80080b8:	4611      	mov	r1, r2
 80080ba:	4628      	mov	r0, r5
 80080bc:	f7ff ffd9 	bl	8008072 <lv_obj_get_child>
 80080c0:	4284      	cmp	r4, r0
 80080c2:	d0f7      	beq.n	80080b4 <lv_obj_get_index+0x1c>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 80080c4:	3201      	adds	r2, #1
 80080c6:	e7f1      	b.n	80080ac <lv_obj_get_index+0x14>
    if(parent == NULL) return 0;
 80080c8:	4602      	mov	r2, r0
 80080ca:	e7f3      	b.n	80080b4 <lv_obj_get_index+0x1c>
 80080cc:	462a      	mov	r2, r5
 80080ce:	e7f1      	b.n	80080b4 <lv_obj_get_index+0x1c>

080080d0 <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 80080d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 80080d4:	2200      	movs	r2, #0
 80080d6:	2121      	movs	r1, #33	; 0x21
{
 80080d8:	4605      	mov	r5, r0
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 80080da:	f7fb f897 	bl	800320c <lv_event_send>
    if(res == LV_RES_INV) return;
 80080de:	2800      	cmp	r0, #0
 80080e0:	d071      	beq.n	80081c6 <obj_del_core+0xf6>

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
    while(child) {
        obj_del_core(child);
        child = lv_obj_get_child(obj, 0);
 80080e2:	2100      	movs	r1, #0
 80080e4:	4628      	mov	r0, r5
 80080e6:	f7ff ffc4 	bl	8008072 <lv_obj_get_child>
 80080ea:	4606      	mov	r6, r0
    while(child) {
 80080ec:	bb70      	cbnz	r0, 800814c <obj_del_core+0x7c>
    }

    lv_group_t * group = lv_obj_get_group(obj);
 80080ee:	4628      	mov	r0, r5
 80080f0:	f7fb ffaa 	bl	8004048 <lv_obj_get_group>
 80080f4:	4607      	mov	r7, r0

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80080f6:	4630      	mov	r0, r6
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
            lv_indev_reset(indev, obj);
        }
        indev = lv_indev_get_next(indev);
 80080f8:	f00a f97c 	bl	80123f4 <lv_indev_get_next>
 80080fc:	4604      	mov	r4, r0
    while(indev) {
 80080fe:	bb48      	cbnz	r0, 8008154 <obj_del_core+0x84>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destruct(obj);
 8008100:	4628      	mov	r0, r5
 8008102:	f7fc fa15 	bl	8004530 <_lv_obj_destruct>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 8008106:	686b      	ldr	r3, [r5, #4]
        lv_disp_t * disp = lv_obj_get_disp(obj);
 8008108:	4628      	mov	r0, r5
    if(obj->parent == NULL) {
 800810a:	2b00      	cmp	r3, #0
 800810c:	d143      	bne.n	8008196 <obj_del_core+0xc6>
        lv_disp_t * disp = lv_obj_get_disp(obj);
 800810e:	f7ff ff8d 	bl	800802c <lv_obj_get_disp>
        uint32_t i;
        /*Find the screen in the list*/
        for(i = 0; i < disp->screen_cnt; i++) {
 8008112:	6a46      	ldr	r6, [r0, #36]	; 0x24
            if(disp->screens[i] == obj) break;
 8008114:	f8d0 800c 	ldr.w	r8, [r0, #12]
        lv_disp_t * disp = lv_obj_get_disp(obj);
 8008118:	4607      	mov	r7, r0
        for(i = 0; i < disp->screen_cnt; i++) {
 800811a:	42b4      	cmp	r4, r6
 800811c:	d135      	bne.n	800818a <obj_del_core+0xba>
        }

        uint32_t id = i;
        for(i = id; i < disp->screen_cnt - 1; i++) {
            disp->screens[i] = disp->screens[i + 1];
 800811e:	3e01      	subs	r6, #1
 8008120:	00a0      	lsls	r0, r4, #2
 8008122:	1b32      	subs	r2, r6, r4
 8008124:	1d01      	adds	r1, r0, #4
 8008126:	0092      	lsls	r2, r2, #2
 8008128:	42b4      	cmp	r4, r6
 800812a:	bf88      	it	hi
 800812c:	2200      	movhi	r2, #0
 800812e:	4441      	add	r1, r8
 8008130:	4440      	add	r0, r8
 8008132:	f015 ff59 	bl	801dfe8 <memmove>
        }
        disp->screen_cnt--;
 8008136:	627e      	str	r6, [r7, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 8008138:	00b1      	lsls	r1, r6, #2
 800813a:	4640      	mov	r0, r8
 800813c:	f00b f92a 	bl	8013394 <lv_mem_realloc>
 8008140:	60f8      	str	r0, [r7, #12]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 8008142:	4628      	mov	r0, r5
}
 8008144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_mem_free(obj);
 8008148:	f00b b90c 	b.w	8013364 <lv_mem_free>
        obj_del_core(child);
 800814c:	4630      	mov	r0, r6
 800814e:	f7ff ffbf 	bl	80080d0 <obj_del_core>
 8008152:	e7c6      	b.n	80080e2 <obj_del_core+0x12>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 8008154:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008156:	429d      	cmp	r5, r3
 8008158:	d002      	beq.n	8008160 <obj_del_core+0x90>
 800815a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800815c:	429d      	cmp	r5, r3
 800815e:	d103      	bne.n	8008168 <obj_del_core+0x98>
            lv_indev_reset(indev, obj);
 8008160:	4629      	mov	r1, r5
 8008162:	4620      	mov	r0, r4
 8008164:	f7fb fa70 	bl	8003648 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 8008168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800816a:	429d      	cmp	r5, r3
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800816c:	6d63      	ldr	r3, [r4, #84]	; 0x54
            indev->proc.types.pointer.last_pressed = NULL;
 800816e:	bf08      	it	eq
 8008170:	6366      	streq	r6, [r4, #52]	; 0x34
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8008172:	429f      	cmp	r7, r3
 8008174:	d107      	bne.n	8008186 <obj_del_core+0xb6>
 8008176:	f7fb fb03 	bl	8003780 <lv_indev_get_obj_act>
 800817a:	4285      	cmp	r5, r0
 800817c:	d103      	bne.n	8008186 <obj_del_core+0xb6>
            lv_indev_reset(indev, obj);
 800817e:	4629      	mov	r1, r5
 8008180:	4620      	mov	r0, r4
 8008182:	f7fb fa61 	bl	8003648 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 8008186:	4620      	mov	r0, r4
 8008188:	e7b6      	b.n	80080f8 <obj_del_core+0x28>
            if(disp->screens[i] == obj) break;
 800818a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800818e:	429d      	cmp	r5, r3
 8008190:	d0c5      	beq.n	800811e <obj_del_core+0x4e>
        for(i = 0; i < disp->screen_cnt; i++) {
 8008192:	3401      	adds	r4, #1
 8008194:	e7c1      	b.n	800811a <obj_del_core+0x4a>
        uint32_t id = lv_obj_get_index(obj);
 8008196:	f7ff ff7f 	bl	8008098 <lv_obj_get_index>
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800819a:	686b      	ldr	r3, [r5, #4]
 800819c:	689c      	ldr	r4, [r3, #8]
 800819e:	6861      	ldr	r1, [r4, #4]
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 80081a0:	6823      	ldr	r3, [r4, #0]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 80081a2:	3901      	subs	r1, #1
 80081a4:	4288      	cmp	r0, r1
 80081a6:	d306      	bcc.n	80081b6 <obj_del_core+0xe6>
        obj->parent->spec_attr->child_cnt--;
 80081a8:	6061      	str	r1, [r4, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 80081aa:	4618      	mov	r0, r3
 80081ac:	0089      	lsls	r1, r1, #2
 80081ae:	f00b f8f1 	bl	8013394 <lv_mem_realloc>
 80081b2:	6020      	str	r0, [r4, #0]
 80081b4:	e7c5      	b.n	8008142 <obj_del_core+0x72>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 80081b6:	3001      	adds	r0, #1
 80081b8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80081bc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80081c0:	f843 2c04 	str.w	r2, [r3, #-4]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 80081c4:	e7e9      	b.n	800819a <obj_del_core+0xca>
}
 80081c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081ca <lv_obj_del>:
{
 80081ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081cc:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
 80081ce:	f7fd f8cb 	bl	8005368 <lv_obj_invalidate>
    if(obj == NULL) return NULL;
 80081d2:	b315      	cbz	r5, 800821a <lv_obj_del+0x50>
    return obj->parent;
 80081d4:	686c      	ldr	r4, [r5, #4]
    if(par) {
 80081d6:	b304      	cbz	r4, 800821a <lv_obj_del+0x50>
        lv_obj_scrollbar_invalidate(par);
 80081d8:	4620      	mov	r0, r4
 80081da:	f7fe ffcc 	bl	8007176 <lv_obj_scrollbar_invalidate>
    bool act_scr_del = false;
 80081de:	2700      	movs	r7, #0
    lv_disp_t * disp = NULL;
 80081e0:	463e      	mov	r6, r7
    obj_del_core(obj);
 80081e2:	4628      	mov	r0, r5
 80081e4:	f7ff ff74 	bl	80080d0 <obj_del_core>
    if(par) {
 80081e8:	b19c      	cbz	r4, 8008212 <lv_obj_del+0x48>
        lv_obj_update_layout(par);
 80081ea:	4620      	mov	r0, r4
 80081ec:	f7fd fdea 	bl	8005dc4 <lv_obj_update_layout>
        lv_obj_readjust_scroll(par, LV_ANIM_OFF);
 80081f0:	2100      	movs	r1, #0
 80081f2:	4620      	mov	r0, r4
 80081f4:	f7fe ffdf 	bl	80071b6 <lv_obj_readjust_scroll>
        lv_obj_scrollbar_invalidate(par);
 80081f8:	4620      	mov	r0, r4
 80081fa:	f7fe ffbc 	bl	8007176 <lv_obj_scrollbar_invalidate>
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 80081fe:	2200      	movs	r2, #0
 8008200:	2122      	movs	r1, #34	; 0x22
 8008202:	4620      	mov	r0, r4
 8008204:	f7fb f802 	bl	800320c <lv_event_send>
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 8008208:	2200      	movs	r2, #0
 800820a:	2124      	movs	r1, #36	; 0x24
 800820c:	4620      	mov	r0, r4
 800820e:	f7fa fffd 	bl	800320c <lv_event_send>
    if(act_scr_del) {
 8008212:	b10f      	cbz	r7, 8008218 <lv_obj_del+0x4e>
        disp->act_scr = NULL;
 8008214:	2300      	movs	r3, #0
 8008216:	6133      	str	r3, [r6, #16]
}
 8008218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        disp = lv_obj_get_disp(obj);
 800821a:	4628      	mov	r0, r5
 800821c:	f7ff ff06 	bl	800802c <lv_obj_get_disp>
        if(!disp) return;   /*Shouldn't happen*/
 8008220:	4606      	mov	r6, r0
 8008222:	2800      	cmp	r0, #0
 8008224:	d0f8      	beq.n	8008218 <lv_obj_del+0x4e>
        if(disp->act_scr == obj) act_scr_del = true;
 8008226:	6907      	ldr	r7, [r0, #16]
 8008228:	1b7b      	subs	r3, r7, r5
 800822a:	425f      	negs	r7, r3
 800822c:	415f      	adcs	r7, r3
 800822e:	2400      	movs	r4, #0
 8008230:	e7d7      	b.n	80081e2 <lv_obj_del+0x18>

08008232 <lv_obj_set_parent>:
    if(obj->parent == NULL) {
 8008232:	6843      	ldr	r3, [r0, #4]
{
 8008234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008238:	4604      	mov	r4, r0
 800823a:	460d      	mov	r5, r1
    if(obj->parent == NULL) {
 800823c:	2b00      	cmp	r3, #0
 800823e:	d066      	beq.n	800830e <lv_obj_set_parent+0xdc>
    if(parent == NULL) {
 8008240:	2900      	cmp	r1, #0
 8008242:	d064      	beq.n	800830e <lv_obj_set_parent+0xdc>
    lv_obj_invalidate(obj);
 8008244:	f7fd f890 	bl	8005368 <lv_obj_invalidate>
    lv_obj_allocate_spec_attr(parent);
 8008248:	4628      	mov	r0, r5
 800824a:	f7fc f8d1 	bl	80043f0 <lv_obj_allocate_spec_attr>
    lv_obj_t * old_parent = obj->parent;
 800824e:	6866      	ldr	r6, [r4, #4]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 8008250:	4620      	mov	r0, r4
 8008252:	f7ff ff21 	bl	8008098 <lv_obj_get_index>
        old_parent->spec_attr->children[i] = old_parent->spec_attr->children[i + 1];
 8008256:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800825a:	f8d8 2000 	ldr.w	r2, [r8]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 800825e:	4603      	mov	r3, r0
 8008260:	4630      	mov	r0, r6
 8008262:	f7ff ff15 	bl	8008090 <lv_obj_get_child_cnt>
 8008266:	3801      	subs	r0, #1
 8008268:	4298      	cmp	r0, r3
 800826a:	dc43      	bgt.n	80082f4 <lv_obj_set_parent+0xc2>
    old_parent->spec_attr->child_cnt--;
 800826c:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008270:	3f01      	subs	r7, #1
 8008272:	f8c8 7004 	str.w	r7, [r8, #4]
    if(old_parent->spec_attr->child_cnt) {
 8008276:	2f00      	cmp	r7, #0
 8008278:	d043      	beq.n	8008302 <lv_obj_set_parent+0xd0>
        old_parent->spec_attr->children = lv_mem_realloc(old_parent->spec_attr->children,
 800827a:	00b9      	lsls	r1, r7, #2
 800827c:	4610      	mov	r0, r2
 800827e:	f00b f889 	bl	8013394 <lv_mem_realloc>
 8008282:	f8c8 0000 	str.w	r0, [r8]
    parent->spec_attr->child_cnt++;
 8008286:	68af      	ldr	r7, [r5, #8]
 8008288:	6879      	ldr	r1, [r7, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800828a:	6838      	ldr	r0, [r7, #0]
    parent->spec_attr->child_cnt++;
 800828c:	3101      	adds	r1, #1
 800828e:	6079      	str	r1, [r7, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8008290:	0089      	lsls	r1, r1, #2
 8008292:	f00b f87f 	bl	8013394 <lv_mem_realloc>
 8008296:	6038      	str	r0, [r7, #0]
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 8008298:	4628      	mov	r0, r5
 800829a:	f7ff fef9 	bl	8008090 <lv_obj_get_child_cnt>
 800829e:	68ab      	ldr	r3, [r5, #8]
 80082a0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3801      	subs	r0, #1
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 80082a8:	2100      	movs	r1, #0
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 80082aa:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 80082ae:	4630      	mov	r0, r6
    obj->parent = parent;
 80082b0:	6065      	str	r5, [r4, #4]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 80082b2:	f7fe ff80 	bl	80071b6 <lv_obj_readjust_scroll>
    lv_obj_scrollbar_invalidate(old_parent);
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7fe ff5d 	bl	8007176 <lv_obj_scrollbar_invalidate>
    lv_event_send(old_parent, LV_EVENT_CHILD_CHANGED, obj);
 80082bc:	4622      	mov	r2, r4
 80082be:	2122      	movs	r1, #34	; 0x22
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7fa ffa3 	bl	800320c <lv_event_send>
    lv_event_send(old_parent, LV_EVENT_CHILD_DELETED, NULL);
 80082c6:	2200      	movs	r2, #0
 80082c8:	2124      	movs	r1, #36	; 0x24
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7fa ff9e 	bl	800320c <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80082d0:	4622      	mov	r2, r4
 80082d2:	2122      	movs	r1, #34	; 0x22
 80082d4:	4628      	mov	r0, r5
 80082d6:	f7fa ff99 	bl	800320c <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CREATED, NULL);
 80082da:	2200      	movs	r2, #0
 80082dc:	2123      	movs	r1, #35	; 0x23
 80082de:	4628      	mov	r0, r5
 80082e0:	f7fa ff94 	bl	800320c <lv_event_send>
    lv_obj_mark_layout_as_dirty(obj);
 80082e4:	4620      	mov	r0, r4
 80082e6:	f7fc fdb1 	bl	8004e4c <lv_obj_mark_layout_as_dirty>
    lv_obj_invalidate(obj);
 80082ea:	4620      	mov	r0, r4
}
 80082ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(obj);
 80082f0:	f7fd b83a 	b.w	8005368 <lv_obj_invalidate>
        old_parent->spec_attr->children[i] = old_parent->spec_attr->children[i + 1];
 80082f4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80082f8:	6849      	ldr	r1, [r1, #4]
 80082fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 80082fe:	3301      	adds	r3, #1
 8008300:	e7ae      	b.n	8008260 <lv_obj_set_parent+0x2e>
        lv_mem_free(old_parent->spec_attr->children);
 8008302:	4610      	mov	r0, r2
 8008304:	f00b f82e 	bl	8013364 <lv_mem_free>
        old_parent->spec_attr->children = NULL;
 8008308:	68b3      	ldr	r3, [r6, #8]
 800830a:	601f      	str	r7, [r3, #0]
 800830c:	e7bb      	b.n	8008286 <lv_obj_set_parent+0x54>
}
 800830e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008312 <lv_obj_move_to_index>:
{
 8008312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(index < 0) {
 8008314:	1e0c      	subs	r4, r1, #0
{
 8008316:	4605      	mov	r5, r0
    if(index < 0) {
 8008318:	da13      	bge.n	8008342 <lv_obj_move_to_index+0x30>
    if(obj == NULL) return NULL;
 800831a:	b100      	cbz	r0, 800831e <lv_obj_move_to_index+0xc>
    return obj->parent;
 800831c:	6840      	ldr	r0, [r0, #4]
        index = lv_obj_get_child_cnt(lv_obj_get_parent(obj)) + index;
 800831e:	f7ff feb7 	bl	8008090 <lv_obj_get_child_cnt>
 8008322:	4404      	add	r4, r0
    if(obj == NULL) return NULL;
 8008324:	b11d      	cbz	r5, 800832e <lv_obj_move_to_index+0x1c>
    return obj->parent;
 8008326:	686e      	ldr	r6, [r5, #4]
    if(index < 0) return;
 8008328:	2c00      	cmp	r4, #0
 800832a:	da0d      	bge.n	8008348 <lv_obj_move_to_index+0x36>
}
 800832c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(obj == NULL) return NULL;
 800832e:	462e      	mov	r6, r5
 8008330:	e7fa      	b.n	8008328 <lv_obj_move_to_index+0x16>
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 8008332:	1b02      	subs	r2, r0, r4
 8008334:	1c60      	adds	r0, r4, #1
 8008336:	0092      	lsls	r2, r2, #2
 8008338:	eb07 0184 	add.w	r1, r7, r4, lsl #2
 800833c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8008340:	e015      	b.n	800836e <lv_obj_move_to_index+0x5c>
    if(obj == NULL) return NULL;
 8008342:	2800      	cmp	r0, #0
 8008344:	d1ef      	bne.n	8008326 <lv_obj_move_to_index+0x14>
 8008346:	462e      	mov	r6, r5
    if(index >= (int32_t) lv_obj_get_child_cnt(parent)) return;
 8008348:	4630      	mov	r0, r6
 800834a:	f7ff fea1 	bl	8008090 <lv_obj_get_child_cnt>
 800834e:	42a0      	cmp	r0, r4
 8008350:	ddec      	ble.n	800832c <lv_obj_move_to_index+0x1a>
    const int32_t old_index = lv_obj_get_index(obj);
 8008352:	4628      	mov	r0, r5
 8008354:	f7ff fea0 	bl	8008098 <lv_obj_get_index>
    if(index == old_index) return;
 8008358:	4284      	cmp	r4, r0
 800835a:	d0e7      	beq.n	800832c <lv_obj_move_to_index+0x1a>
    parent->spec_attr->children[index] = obj;
 800835c:	68b3      	ldr	r3, [r6, #8]
 800835e:	681f      	ldr	r7, [r3, #0]
    if(index < old_index) {
 8008360:	dbe7      	blt.n	8008332 <lv_obj_move_to_index+0x20>
 8008362:	0083      	lsls	r3, r0, #2
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 8008364:	1a22      	subs	r2, r4, r0
 8008366:	1d19      	adds	r1, r3, #4
 8008368:	0092      	lsls	r2, r2, #2
 800836a:	4439      	add	r1, r7
 800836c:	18f8      	adds	r0, r7, r3
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 800836e:	f015 fe3b 	bl	801dfe8 <memmove>
    parent->spec_attr->children[index] = obj;
 8008372:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, NULL);
 8008376:	4630      	mov	r0, r6
 8008378:	2200      	movs	r2, #0
 800837a:	2122      	movs	r1, #34	; 0x22
 800837c:	f7fa ff46 	bl	800320c <lv_event_send>
    lv_obj_invalidate(parent);
 8008380:	4630      	mov	r0, r6
}
 8008382:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_invalidate(parent);
 8008386:	f7fc bfef 	b.w	8005368 <lv_obj_invalidate>

0800838a <call_flush_cb>:
            draw_buf->buf_act = draw_buf->buf1;
    }
}

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 800838a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 800838c:	8905      	ldrh	r5, [r0, #8]
 800838e:	880c      	ldrh	r4, [r1, #0]
        .y1 = area->y1 + drv->offset_y,
 8008390:	884e      	ldrh	r6, [r1, #2]
        .x2 = area->x2 + drv->offset_x,
        .y2 = area->y2 + drv->offset_y
    };

    drv->flush_cb(drv, &offset_area, color_p);
 8008392:	6943      	ldr	r3, [r0, #20]
        .x1 = area->x1 + drv->offset_x,
 8008394:	442c      	add	r4, r5
    lv_area_t offset_area = {
 8008396:	f8ad 4000 	strh.w	r4, [sp]
        .y1 = area->y1 + drv->offset_y,
 800839a:	8944      	ldrh	r4, [r0, #10]
 800839c:	4426      	add	r6, r4
    lv_area_t offset_area = {
 800839e:	f8ad 6002 	strh.w	r6, [sp, #2]
        .x2 = area->x2 + drv->offset_x,
 80083a2:	888e      	ldrh	r6, [r1, #4]
        .y2 = area->y2 + drv->offset_y
 80083a4:	88c9      	ldrh	r1, [r1, #6]
        .x2 = area->x2 + drv->offset_x,
 80083a6:	4435      	add	r5, r6
        .y2 = area->y2 + drv->offset_y
 80083a8:	440c      	add	r4, r1
    lv_area_t offset_area = {
 80083aa:	f8ad 5004 	strh.w	r5, [sp, #4]
 80083ae:	f8ad 4006 	strh.w	r4, [sp, #6]
    drv->flush_cb(drv, &offset_area, color_p);
 80083b2:	4669      	mov	r1, sp
 80083b4:	4798      	blx	r3
}
 80083b6:	b002      	add	sp, #8
 80083b8:	bd70      	pop	{r4, r5, r6, pc}

080083ba <lv_refr_get_top_obj>:
{
 80083ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 80083bc:	2200      	movs	r2, #0
{
 80083be:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 80083c0:	3114      	adds	r1, #20
{
 80083c2:	4606      	mov	r6, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 80083c4:	f00a fb58 	bl	8012a78 <_lv_area_is_in>
 80083c8:	b910      	cbnz	r0, 80083d0 <lv_refr_get_top_obj+0x16>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 80083ca:	2000      	movs	r0, #0
}
 80083cc:	b002      	add	sp, #8
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 80083d0:	2101      	movs	r1, #1
 80083d2:	4620      	mov	r0, r4
 80083d4:	f7fb fe29 	bl	800402a <lv_obj_has_flag>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d1f6      	bne.n	80083ca <lv_refr_get_top_obj+0x10>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 80083dc:	4620      	mov	r0, r4
 80083de:	f7fc fbf9 	bl	8004bd4 <_lv_obj_get_layer_type>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d1f1      	bne.n	80083ca <lv_refr_get_top_obj+0x10>
    info.res = LV_COVER_RES_COVER;
 80083e6:	f88d 0000 	strb.w	r0, [sp]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 80083ea:	466a      	mov	r2, sp
 80083ec:	2112      	movs	r1, #18
 80083ee:	4620      	mov	r0, r4
    info.area = area_p;
 80083f0:	9601      	str	r6, [sp, #4]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 80083f2:	f7fa ff0b 	bl	800320c <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 80083f6:	f89d 3000 	ldrb.w	r3, [sp]
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d0e5      	beq.n	80083ca <lv_refr_get_top_obj+0x10>
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 80083fe:	4620      	mov	r0, r4
 8008400:	f7ff fe46 	bl	8008090 <lv_obj_get_child_cnt>
    for(i = child_cnt - 1; i >= 0; i--) {
 8008404:	1e45      	subs	r5, r0, #1
 8008406:	2d00      	cmp	r5, #0
 8008408:	da05      	bge.n	8008416 <lv_refr_get_top_obj+0x5c>
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 800840a:	f89d 3000 	ldrb.w	r3, [sp]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1db      	bne.n	80083ca <lv_refr_get_top_obj+0x10>
 8008412:	4620      	mov	r0, r4
 8008414:	e7da      	b.n	80083cc <lv_refr_get_top_obj+0x12>
        lv_obj_t * child = obj->spec_attr->children[i];
 8008416:	68a3      	ldr	r3, [r4, #8]
 8008418:	681b      	ldr	r3, [r3, #0]
        found_p = lv_refr_get_top_obj(area_p, child);
 800841a:	4630      	mov	r0, r6
 800841c:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8008420:	f7ff ffcb 	bl	80083ba <lv_refr_get_top_obj>
        if(found_p != NULL) {
 8008424:	2800      	cmp	r0, #0
 8008426:	d1d1      	bne.n	80083cc <lv_refr_get_top_obj+0x12>
    for(i = child_cnt - 1; i >= 0; i--) {
 8008428:	3d01      	subs	r5, #1
 800842a:	e7ec      	b.n	8008406 <lv_refr_get_top_obj+0x4c>

0800842c <_lv_refr_init>:
}
 800842c:	4770      	bx	lr

0800842e <lv_obj_redraw>:
{
 800842e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008432:	460c      	mov	r4, r1
 8008434:	b087      	sub	sp, #28
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8008436:	f8d0 8008 	ldr.w	r8, [r0, #8]
    lv_obj_get_coords(obj, &obj_coords_ext);
 800843a:	a902      	add	r1, sp, #8
{
 800843c:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 800843e:	4620      	mov	r0, r4
 8008440:	f7fc fd48 	bl	8004ed4 <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 8008444:	4620      	mov	r0, r4
 8008446:	f7fc fb93 	bl	8004b70 <_lv_obj_get_ext_draw_size>
 800844a:	4602      	mov	r2, r0
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800844c:	4601      	mov	r1, r0
 800844e:	a802      	add	r0, sp, #8
 8008450:	f00a f9f1 	bl	8012836 <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 8008454:	aa02      	add	r2, sp, #8
 8008456:	4641      	mov	r1, r8
 8008458:	4668      	mov	r0, sp
 800845a:	f00a fa0c 	bl	8012876 <_lv_area_intersect>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800845e:	b378      	cbz	r0, 80084c0 <lv_obj_redraw+0x92>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 8008460:	462a      	mov	r2, r5
 8008462:	2114      	movs	r1, #20
        draw_ctx->clip_area = &clip_coords_for_obj;
 8008464:	f8c5 d008 	str.w	sp, [r5, #8]
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 8008468:	4620      	mov	r0, r4
 800846a:	f7fa fecf 	bl	800320c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 800846e:	462a      	mov	r2, r5
 8008470:	2115      	movs	r1, #21
 8008472:	4620      	mov	r0, r4
 8008474:	f7fa feca 	bl	800320c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 8008478:	462a      	mov	r2, r5
 800847a:	2116      	movs	r1, #22
 800847c:	4620      	mov	r0, r4
 800847e:	f7fa fec5 	bl	800320c <lv_event_send>
 8008482:	2601      	movs	r6, #1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8008484:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008488:	4620      	mov	r0, r4
 800848a:	f7fb fdce 	bl	800402a <lv_obj_has_flag>
 800848e:	af04      	add	r7, sp, #16
 8008490:	b1f8      	cbz	r0, 80084d2 <lv_obj_redraw+0xa4>
        clip_coords_for_children  = *clip_area_ori;
 8008492:	f8d8 0000 	ldr.w	r0, [r8]
 8008496:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800849a:	463b      	mov	r3, r7
 800849c:	c303      	stmia	r3!, {r0, r1}
        draw_ctx->clip_area = &clip_coords_for_children;
 800849e:	60af      	str	r7, [r5, #8]
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80084a0:	4620      	mov	r0, r4
 80084a2:	f7ff fdf5 	bl	8008090 <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 80084a6:	2700      	movs	r7, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80084a8:	4681      	mov	r9, r0
        for(i = 0; i < child_cnt; i++) {
 80084aa:	454f      	cmp	r7, r9
 80084ac:	d019      	beq.n	80084e2 <lv_obj_redraw+0xb4>
            lv_obj_t * child = obj->spec_attr->children[i];
 80084ae:	68a3      	ldr	r3, [r4, #8]
 80084b0:	681b      	ldr	r3, [r3, #0]
            refr_obj(draw_ctx, child);
 80084b2:	4628      	mov	r0, r5
 80084b4:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80084b8:	f000 f82a 	bl	8008510 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 80084bc:	3701      	adds	r7, #1
 80084be:	e7f4      	b.n	80084aa <lv_obj_redraw+0x7c>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 80084c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80084c4:	4620      	mov	r0, r4
 80084c6:	f7fb fdb0 	bl	800402a <lv_obj_has_flag>
    if(should_draw) {
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d1c8      	bne.n	8008460 <lv_obj_redraw+0x32>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 80084ce:	4606      	mov	r6, r0
 80084d0:	e7d8      	b.n	8008484 <lv_obj_redraw+0x56>
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 80084d2:	f104 0214 	add.w	r2, r4, #20
 80084d6:	4641      	mov	r1, r8
 80084d8:	4638      	mov	r0, r7
 80084da:	f00a f9cc 	bl	8012876 <_lv_area_intersect>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d1dd      	bne.n	800849e <lv_obj_redraw+0x70>
    if(should_draw) {
 80084e2:	b186      	cbz	r6, 8008506 <lv_obj_redraw+0xd8>
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 80084e4:	462a      	mov	r2, r5
 80084e6:	2117      	movs	r1, #23
        draw_ctx->clip_area = &clip_coords_for_obj;
 80084e8:	f8c5 d008 	str.w	sp, [r5, #8]
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 80084ec:	4620      	mov	r0, r4
 80084ee:	f7fa fe8d 	bl	800320c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 80084f2:	462a      	mov	r2, r5
 80084f4:	2118      	movs	r1, #24
 80084f6:	4620      	mov	r0, r4
 80084f8:	f7fa fe88 	bl	800320c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 80084fc:	462a      	mov	r2, r5
 80084fe:	2119      	movs	r1, #25
 8008500:	4620      	mov	r0, r4
 8008502:	f7fa fe83 	bl	800320c <lv_event_send>
    draw_ctx->clip_area = clip_area_ori;
 8008506:	f8c5 8008 	str.w	r8, [r5, #8]
}
 800850a:	b007      	add	sp, #28
 800850c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008510 <refr_obj>:
{
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	ed2d 8b02 	vpush	{d8}
 8008518:	460c      	mov	r4, r1
 800851a:	b091      	sub	sp, #68	; 0x44
 800851c:	4607      	mov	r7, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800851e:	2101      	movs	r1, #1
 8008520:	4620      	mov	r0, r4
 8008522:	f7fb fd82 	bl	800402a <lv_obj_has_flag>
 8008526:	4606      	mov	r6, r0
 8008528:	2800      	cmp	r0, #0
 800852a:	f040 8181 	bne.w	8008830 <refr_obj+0x320>
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800852e:	4620      	mov	r0, r4
 8008530:	f7fc fb50 	bl	8004bd4 <_lv_obj_get_layer_type>
    if(layer_type == LV_LAYER_TYPE_NONE) {
 8008534:	4683      	mov	fp, r0
 8008536:	b940      	cbnz	r0, 800854a <refr_obj+0x3a>
        lv_obj_redraw(draw_ctx, obj);
 8008538:	4621      	mov	r1, r4
 800853a:	4638      	mov	r0, r7
}
 800853c:	b011      	add	sp, #68	; 0x44
 800853e:	ecbd 8b02 	vpop	{d8}
 8008542:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_redraw(draw_ctx, obj);
 8008546:	f7ff bf72 	b.w	800842e <lv_obj_redraw>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800854a:	2260      	movs	r2, #96	; 0x60
 800854c:	4631      	mov	r1, r6
 800854e:	4620      	mov	r0, r4
 8008550:	f7fe ff9c 	bl	800748c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8008554:	fa5f fa80 	uxtb.w	sl, r0
        if(opa < LV_OPA_MIN) return;
 8008558:	f1ba 0f01 	cmp.w	sl, #1
 800855c:	f240 8168 	bls.w	8008830 <refr_obj+0x320>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 8008560:	4620      	mov	r0, r4
 8008562:	f7fc fb05 	bl	8004b70 <_lv_obj_get_ext_draw_size>
    lv_obj_get_coords(obj, &obj_coords_ext);
 8008566:	f10d 0814 	add.w	r8, sp, #20
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800856a:	9001      	str	r0, [sp, #4]
    lv_obj_get_coords(obj, &obj_coords_ext);
 800856c:	4641      	mov	r1, r8
 800856e:	4620      	mov	r0, r4
 8008570:	f7fc fcb0 	bl	8004ed4 <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 8008574:	9a01      	ldr	r2, [sp, #4]
 8008576:	4640      	mov	r0, r8
 8008578:	4611      	mov	r1, r2
 800857a:	f00a f95c 	bl	8012836 <lv_area_increase>
    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 800857e:	f1bb 0f02 	cmp.w	fp, #2
 8008582:	f040 80ab 	bne.w	80086dc <refr_obj+0x1cc>
        lv_area_t tranf_coords = obj_coords_ext;
 8008586:	e898 0003 	ldmia.w	r8, {r0, r1}
 800858a:	ad09      	add	r5, sp, #36	; 0x24
 800858c:	e885 0003 	stmia.w	r5, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 8008590:	4632      	mov	r2, r6
 8008592:	4629      	mov	r1, r5
 8008594:	4620      	mov	r0, r4
 8008596:	4633      	mov	r3, r6
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 8008598:	f10d 091c 	add.w	r9, sp, #28
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 800859c:	f7fc fdd6 	bl	800514c <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 80085a0:	68b9      	ldr	r1, [r7, #8]
 80085a2:	462a      	mov	r2, r5
 80085a4:	4648      	mov	r0, r9
 80085a6:	f00a f966 	bl	8012876 <_lv_area_intersect>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	f000 8140 	beq.w	8008830 <refr_obj+0x320>
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 80085b0:	e899 0003 	ldmia.w	r9, {r0, r1}
 80085b4:	ad0b      	add	r5, sp, #44	; 0x2c
 80085b6:	e885 0003 	stmia.w	r5, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 80085ba:	4632      	mov	r2, r6
 80085bc:	4629      	mov	r1, r5
 80085be:	2301      	movs	r3, #1
 80085c0:	4620      	mov	r0, r4
 80085c2:	f7fc fdc3 	bl	800514c <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 80085c6:	4642      	mov	r2, r8
 80085c8:	4629      	mov	r1, r5
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 80085ca:	4628      	mov	r0, r5
 80085cc:	f00a f953 	bl	8012876 <_lv_area_intersect>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	f000 812d 	beq.w	8008830 <refr_obj+0x320>
        *layer_area_out = clip_coords_for_obj;
 80085d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80085da:	ab03      	add	r3, sp, #12
 80085dc:	e883 0003 	stmia.w	r3, {r0, r1}
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 80085e0:	ad03      	add	r5, sp, #12
 80085e2:	f104 0314 	add.w	r3, r4, #20
 80085e6:	2200      	movs	r2, #0
 80085e8:	4619      	mov	r1, r3
 80085ea:	4628      	mov	r0, r5
 80085ec:	ee08 3a10 	vmov	s16, r3
 80085f0:	f00a fa42 	bl	8012a78 <_lv_area_is_in>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d079      	beq.n	80086ec <refr_obj+0x1dc>
            info.res = LV_COVER_RES_COVER;
 80085f8:	2300      	movs	r3, #0
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 80085fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80085fc:	2112      	movs	r1, #18
 80085fe:	4620      	mov	r0, r4
            info.res = LV_COVER_RES_COVER;
 8008600:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            info.area = &layer_area_full;
 8008604:	950c      	str	r5, [sp, #48]	; 0x30
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8008606:	f7fa fe01 	bl	800320c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800860a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800860e:	f1b8 0800 	subs.w	r8, r8, #0
 8008612:	bf18      	it	ne
 8008614:	f04f 0801 	movne.w	r8, #1
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 8008618:	f1bb 0f01 	cmp.w	fp, #1
 800861c:	bf08      	it	eq
 800861e:	f048 0802 	orreq.w	r8, r8, #2
        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 8008622:	4642      	mov	r2, r8
 8008624:	4629      	mov	r1, r5
 8008626:	4638      	mov	r0, r7
 8008628:	f001 fd92 	bl	800a150 <lv_draw_layer_create>
        if(layer_ctx == NULL) {
 800862c:	4681      	mov	r9, r0
 800862e:	2800      	cmp	r0, #0
 8008630:	f000 80fe 	beq.w	8008830 <refr_obj+0x320>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 8008634:	226e      	movs	r2, #110	; 0x6e
 8008636:	2100      	movs	r1, #0
 8008638:	4620      	mov	r0, r4
 800863a:	f7fe ff27 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800863e:	226f      	movs	r2, #111	; 0x6f
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 8008640:	4683      	mov	fp, r0
    return (lv_coord_t)v.num;
 8008642:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 8008644:	2100      	movs	r1, #0
 8008646:	4620      	mov	r0, r4
 8008648:	f7fe ff20 	bl	800748c <lv_obj_get_style_prop>
        if(LV_COORD_IS_PCT(pivot.x)) {
 800864c:	f40b 4bc0 	and.w	fp, fp, #24576	; 0x6000
 8008650:	f5bb 5f00 	cmp.w	fp, #8192	; 0x2000
    return (lv_coord_t)v.num;
 8008654:	b206      	sxth	r6, r0
 8008656:	d114      	bne.n	8008682 <refr_obj+0x172>
 8008658:	f425 42c0 	bic.w	r2, r5, #24576	; 0x6000
 800865c:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8008660:	dc0f      	bgt.n	8008682 <refr_obj+0x172>
 8008662:	8b25      	ldrh	r5, [r4, #24]
 8008664:	8aa1      	ldrh	r1, [r4, #20]
 8008666:	3501      	adds	r5, #1
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 8008668:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800866c:	eba5 0501 	sub.w	r5, r5, r1
 8008670:	bfc8      	it	gt
 8008672:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 8008676:	b22d      	sxth	r5, r5
 8008678:	4355      	muls	r5, r2
 800867a:	2264      	movs	r2, #100	; 0x64
 800867c:	fb95 f5f2 	sdiv	r5, r5, r2
 8008680:	b22d      	sxth	r5, r5
        if(LV_COORD_IS_PCT(pivot.y)) {
 8008682:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8008686:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800868a:	d114      	bne.n	80086b6 <refr_obj+0x1a6>
 800868c:	f426 42c0 	bic.w	r2, r6, #24576	; 0x6000
 8008690:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8008694:	dc0f      	bgt.n	80086b6 <refr_obj+0x1a6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008696:	8b66      	ldrh	r6, [r4, #26]
 8008698:	8ae1      	ldrh	r1, [r4, #22]
 800869a:	3601      	adds	r6, #1
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800869c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80086a0:	eba6 0601 	sub.w	r6, r6, r1
 80086a4:	bfc8      	it	gt
 80086a6:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 80086aa:	b236      	sxth	r6, r6
 80086ac:	4356      	muls	r6, r2
 80086ae:	2264      	movs	r2, #100	; 0x64
 80086b0:	fb96 f6f2 	sdiv	r6, r6, r2
 80086b4:	b236      	sxth	r6, r6
        lv_draw_img_dsc_init(&draw_dsc);
 80086b6:	a80b      	add	r0, sp, #44	; 0x2c
 80086b8:	f001 f8d6 	bl	8009868 <lv_draw_img_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 80086bc:	226d      	movs	r2, #109	; 0x6d
 80086be:	2100      	movs	r1, #0
 80086c0:	4620      	mov	r0, r4
        draw_dsc.opa = opa;
 80086c2:	f88d a036 	strb.w	sl, [sp, #54]	; 0x36
 80086c6:	f7fe fee1 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80086ca:	b202      	sxth	r2, r0
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 80086cc:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 80086d0:	dd0f      	ble.n	80086f2 <refr_obj+0x1e2>
 80086d2:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 80086d6:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 80086da:	e00e      	b.n	80086fa <refr_obj+0x1ea>
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 80086dc:	f1bb 0f01 	cmp.w	fp, #1
 80086e0:	f040 80a6 	bne.w	8008830 <refr_obj+0x320>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 80086e4:	68b9      	ldr	r1, [r7, #8]
 80086e6:	ad0b      	add	r5, sp, #44	; 0x2c
 80086e8:	4642      	mov	r2, r8
 80086ea:	e76e      	b.n	80085ca <refr_obj+0xba>
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 80086ec:	f04f 0801 	mov.w	r8, #1
 80086f0:	e792      	b.n	8008618 <refr_obj+0x108>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 80086f2:	2a00      	cmp	r2, #0
 80086f4:	db39      	blt.n	800876a <refr_obj+0x25a>
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 80086f6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 80086fa:	226c      	movs	r2, #108	; 0x6c
 80086fc:	2100      	movs	r1, #0
 80086fe:	4620      	mov	r0, r4
 8008700:	f7fe fec4 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8008704:	2267      	movs	r2, #103	; 0x67
        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 8008706:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 800870a:	2100      	movs	r1, #0
 800870c:	4620      	mov	r0, r4
 800870e:	f7fe febd 	bl	800748c <lv_obj_get_style_prop>
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 8008712:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 8008716:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800871a:	f360 0203 	bfi	r2, r0, #0, #4
 800871e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 8008722:	4a46      	ldr	r2, [pc, #280]	; (800883c <refr_obj+0x32c>)
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	6812      	ldr	r2, [r2, #0]
 8008728:	7c12      	ldrb	r2, [r2, #16]
 800872a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800872e:	f362 0100 	bfi	r1, r2, #0, #1
        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8008732:	f018 0a02 	ands.w	sl, r8, #2
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 8008736:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800873a:	d013      	beq.n	8008764 <refr_obj+0x254>
            layer_ctx->area_act = layer_ctx->area_full;
 800873c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8008740:	f109 0208 	add.w	r2, r9, #8
 8008744:	e882 0003 	stmia.w	r2, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8008748:	f8b9 1012 	ldrh.w	r1, [r9, #18]
 800874c:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8008750:	440a      	add	r2, r1
 8008752:	3a01      	subs	r2, #1
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8008754:	f9b9 1006 	ldrsh.w	r1, [r9, #6]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8008758:	b212      	sxth	r2, r2
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800875a:	428a      	cmp	r2, r1
 800875c:	bfa8      	it	ge
 800875e:	460a      	movge	r2, r1
 8008760:	f8a9 200e 	strh.w	r2, [r9, #14]
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 8008764:	f109 0b08 	add.w	fp, r9, #8
 8008768:	e00e      	b.n	8008788 <refr_obj+0x278>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800876a:	f500 6061 	add.w	r0, r0, #3600	; 0xe10
 800876e:	e7b2      	b.n	80086d6 <refr_obj+0x1c6>
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 8008770:	f8b9 200e 	ldrh.w	r2, [r9, #14]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8008774:	f8b9 1012 	ldrh.w	r1, [r9, #18]
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 8008778:	3201      	adds	r2, #1
 800877a:	b292      	uxth	r2, r2
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800877c:	3901      	subs	r1, #1
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800877e:	f8a9 200a 	strh.w	r2, [r9, #10]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8008782:	440a      	add	r2, r1
 8008784:	f8a9 200e 	strh.w	r2, [r9, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 8008788:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 800878c:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8008790:	4291      	cmp	r1, r2
 8008792:	dc49      	bgt.n	8008828 <refr_obj+0x318>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8008794:	f1ba 0f00 	cmp.w	sl, #0
 8008798:	d02d      	beq.n	80087f6 <refr_obj+0x2e6>
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800879a:	f1b8 0f02 	cmp.w	r8, #2
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 800879e:	f04f 0200 	mov.w	r2, #0
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 80087a2:	d01c      	beq.n	80087de <refr_obj+0x2ce>
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 80087a4:	ee18 1a10 	vmov	r1, s16
 80087a8:	4658      	mov	r0, fp
 80087aa:	f00a f965 	bl	8012a78 <_lv_area_is_in>
 80087ae:	b168      	cbz	r0, 80087cc <refr_obj+0x2bc>
            info.res = LV_COVER_RES_COVER;
 80087b0:	f04f 0300 	mov.w	r3, #0
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 80087b4:	aa09      	add	r2, sp, #36	; 0x24
 80087b6:	2112      	movs	r1, #18
 80087b8:	4620      	mov	r0, r4
            info.res = LV_COVER_RES_COVER;
 80087ba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            info.area = &layer_ctx->area_act;
 80087be:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 80087c2:	f7fa fd23 	bl	800320c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 80087c6:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 80087ca:	b142      	cbz	r2, 80087de <refr_obj+0x2ce>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 80087cc:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 80087d0:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 80087d4:	440a      	add	r2, r1
 80087d6:	3a01      	subs	r2, #1
 80087d8:	f8a9 200e 	strh.w	r2, [r9, #14]
 80087dc:	2201      	movs	r2, #1
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 80087de:	f9b9 1006 	ldrsh.w	r1, [r9, #6]
 80087e2:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
 80087e6:	4288      	cmp	r0, r1
 80087e8:	bfc8      	it	gt
 80087ea:	f8a9 100e 	strhgt.w	r1, [r9, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 80087ee:	4638      	mov	r0, r7
 80087f0:	4649      	mov	r1, r9
 80087f2:	f001 fcdc 	bl	800a1ae <lv_draw_layer_adjust>
            lv_obj_redraw(draw_ctx, obj);
 80087f6:	4621      	mov	r1, r4
 80087f8:	4638      	mov	r0, r7
 80087fa:	f7ff fe18 	bl	800842e <lv_obj_redraw>
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	8aa2      	ldrh	r2, [r4, #20]
 8008802:	8808      	ldrh	r0, [r1, #0]
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 8008804:	8849      	ldrh	r1, [r1, #2]
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 8008806:	1a12      	subs	r2, r2, r0
 8008808:	442a      	add	r2, r5
 800880a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 800880e:	8ae2      	ldrh	r2, [r4, #22]
 8008810:	1a52      	subs	r2, r2, r1
 8008812:	4432      	add	r2, r6
 8008814:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 8008818:	4649      	mov	r1, r9
 800881a:	aa0b      	add	r2, sp, #44	; 0x2c
 800881c:	4638      	mov	r0, r7
 800881e:	f001 fcca 	bl	800a1b6 <lv_draw_layer_blend>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 8008822:	f1ba 0f00 	cmp.w	sl, #0
 8008826:	d1a3      	bne.n	8008770 <refr_obj+0x260>
        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 8008828:	4649      	mov	r1, r9
 800882a:	4638      	mov	r0, r7
 800882c:	f001 fcc7 	bl	800a1be <lv_draw_layer_destroy>
}
 8008830:	b011      	add	sp, #68	; 0x44
 8008832:	ecbd 8b02 	vpop	{d8}
 8008836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883a:	bf00      	nop
 800883c:	20000b5c 	.word	0x20000b5c

08008840 <refr_obj_and_children>:
{
 8008840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008844:	4606      	mov	r6, r0
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 8008846:	460d      	mov	r5, r1
 8008848:	b929      	cbnz	r1, 8008856 <refr_obj_and_children+0x16>
 800884a:	4b1f      	ldr	r3, [pc, #124]	; (80088c8 <refr_obj_and_children+0x88>)
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	f7fa fbb8 	bl	8002fc2 <lv_disp_get_scr_act>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 8008852:	4605      	mov	r5, r0
 8008854:	b140      	cbz	r0, 8008868 <refr_obj_and_children+0x28>
    refr_obj(draw_ctx, top_obj);
 8008856:	4630      	mov	r0, r6
 8008858:	4629      	mov	r1, r5
 800885a:	f7ff fe59 	bl	8008510 <refr_obj>
    parent = lv_obj_get_parent(top_obj);
 800885e:	4628      	mov	r0, r5
 8008860:	f7ff fc04 	bl	800806c <lv_obj_get_parent>
        parent = lv_obj_get_parent(parent);
 8008864:	4604      	mov	r4, r0
    while(parent != NULL) {
 8008866:	b908      	cbnz	r0, 800886c <refr_obj_and_children+0x2c>
}
 8008868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 800886c:	4620      	mov	r0, r4
 800886e:	f7ff fc0f 	bl	8008090 <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 8008872:	2700      	movs	r7, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 8008874:	4680      	mov	r8, r0
        bool go = false;
 8008876:	46b9      	mov	r9, r7
        for(i = 0; i < child_cnt; i++) {
 8008878:	4547      	cmp	r7, r8
 800887a:	d113      	bne.n	80088a4 <refr_obj_and_children+0x64>
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 800887c:	4632      	mov	r2, r6
 800887e:	2117      	movs	r1, #23
 8008880:	4620      	mov	r0, r4
 8008882:	f7fa fcc3 	bl	800320c <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 8008886:	4632      	mov	r2, r6
 8008888:	2118      	movs	r1, #24
 800888a:	4620      	mov	r0, r4
 800888c:	f7fa fcbe 	bl	800320c <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 8008890:	4632      	mov	r2, r6
 8008892:	2119      	movs	r1, #25
 8008894:	4620      	mov	r0, r4
 8008896:	f7fa fcb9 	bl	800320c <lv_event_send>
        parent = lv_obj_get_parent(parent);
 800889a:	4620      	mov	r0, r4
 800889c:	f7ff fbe6 	bl	800806c <lv_obj_get_parent>
 80088a0:	4625      	mov	r5, r4
 80088a2:	e7df      	b.n	8008864 <refr_obj_and_children+0x24>
            lv_obj_t * child = parent->spec_attr->children[i];
 80088a4:	68a3      	ldr	r3, [r4, #8]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
            if(!go) {
 80088ac:	f1b9 0f00 	cmp.w	r9, #0
 80088b0:	d106      	bne.n	80088c0 <refr_obj_and_children+0x80>
                if(child == border_p) go = true;
 80088b2:	1a6b      	subs	r3, r5, r1
 80088b4:	f1d3 0900 	rsbs	r9, r3, #0
 80088b8:	eb49 0903 	adc.w	r9, r9, r3
        for(i = 0; i < child_cnt; i++) {
 80088bc:	3701      	adds	r7, #1
 80088be:	e7db      	b.n	8008878 <refr_obj_and_children+0x38>
                refr_obj(draw_ctx, child);
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7ff fe25 	bl	8008510 <refr_obj>
 80088c6:	e7f9      	b.n	80088bc <refr_obj_and_children+0x7c>
 80088c8:	20000b5c 	.word	0x20000b5c

080088cc <refr_area_part>:
{
 80088cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 80088d0:	4c77      	ldr	r4, [pc, #476]	; (8008ab0 <refr_area_part+0x1e4>)
{
 80088d2:	4605      	mov	r5, r0
 80088d4:	b0a7      	sub	sp, #156	; 0x9c
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 80088d6:	6820      	ldr	r0, [r4, #0]
 80088d8:	f009 fd88 	bl	80123ec <lv_disp_get_draw_buf>
    if(draw_ctx->init_buf)
 80088dc:	68eb      	ldr	r3, [r5, #12]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 80088de:	4606      	mov	r6, r0
    if(draw_ctx->init_buf)
 80088e0:	b10b      	cbz	r3, 80088e6 <refr_area_part+0x1a>
        draw_ctx->init_buf(draw_ctx);
 80088e2:	4628      	mov	r0, r5
 80088e4:	4798      	blx	r3
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 80088e6:	6833      	ldr	r3, [r6, #0]
 80088e8:	b973      	cbnz	r3, 8008908 <refr_area_part+0x3c>
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 80088ea:	6820      	ldr	r0, [r4, #0]
 80088ec:	686e      	ldr	r6, [r5, #4]
 80088ee:	f7fa fb68 	bl	8002fc2 <lv_disp_get_scr_act>
 80088f2:	4601      	mov	r1, r0
 80088f4:	4630      	mov	r0, r6
 80088f6:	f7ff fd60 	bl	80083ba <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	695e      	ldr	r6, [r3, #20]
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 80088fe:	4607      	mov	r7, r0
    if(disp_refr->prev_scr) {
 8008900:	b9be      	cbnz	r6, 8008932 <refr_area_part+0x66>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8008902:	2800      	cmp	r0, #0
 8008904:	d146      	bne.n	8008994 <refr_area_part+0xc8>
 8008906:	e01b      	b.n	8008940 <refr_area_part+0x74>
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 8008908:	6873      	ldr	r3, [r6, #4]
 800890a:	b143      	cbz	r3, 800891e <refr_area_part+0x52>
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	8813      	ldrh	r3, [r2, #0]
 8008912:	8852      	ldrh	r2, [r2, #2]
 8008914:	fb13 f302 	smulbb	r3, r3, r2
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 8008918:	68f2      	ldr	r2, [r6, #12]
 800891a:	429a      	cmp	r2, r3
 800891c:	d1e5      	bne.n	80088ea <refr_area_part+0x1e>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800891e:	6822      	ldr	r2, [r4, #0]
        while(draw_buf->flushing) {
 8008920:	6933      	ldr	r3, [r6, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0e1      	beq.n	80088ea <refr_area_part+0x1e>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8008926:	6810      	ldr	r0, [r2, #0]
 8008928:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800892a:	2b00      	cmp	r3, #0
 800892c:	d0f8      	beq.n	8008920 <refr_area_part+0x54>
 800892e:	4798      	blx	r3
 8008930:	e7f5      	b.n	800891e <refr_area_part+0x52>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 8008932:	4631      	mov	r1, r6
 8008934:	6868      	ldr	r0, [r5, #4]
 8008936:	f7ff fd40 	bl	80083ba <lv_refr_get_top_obj>
 800893a:	4606      	mov	r6, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800893c:	bb57      	cbnz	r7, 8008994 <refr_area_part+0xc8>
 800893e:	bb48      	cbnz	r0, 8008994 <refr_area_part+0xc8>
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8008940:	6820      	ldr	r0, [r4, #0]
 8008942:	f009 fd15 	bl	8012370 <lv_disp_get_hor_res>
 8008946:	4606      	mov	r6, r0
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	f009 fd21 	bl	8012390 <lv_disp_get_ver_res>
 800894e:	3801      	subs	r0, #1
        lv_area_set(&a, 0, 0,
 8008950:	b200      	sxth	r0, r0
 8008952:	2200      	movs	r2, #0
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8008954:	1e73      	subs	r3, r6, #1
        lv_area_set(&a, 0, 0,
 8008956:	9000      	str	r0, [sp, #0]
 8008958:	b21b      	sxth	r3, r3
 800895a:	4611      	mov	r1, r2
 800895c:	a818      	add	r0, sp, #96	; 0x60
 800895e:	f009 ff4b 	bl	80127f8 <lv_area_set>
        if(draw_ctx->draw_bg) {
 8008962:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008964:	2b00      	cmp	r3, #0
 8008966:	d053      	beq.n	8008a10 <refr_area_part+0x144>
            lv_draw_rect_dsc_init(&dsc);
 8008968:	a81a      	add	r0, sp, #104	; 0x68
 800896a:	f002 fc49 	bl	800b200 <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008972:	921d      	str	r2, [sp, #116]	; 0x74
            dsc.bg_img_opa = disp_refr->bg_opa;
 8008974:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8008978:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
            dsc.bg_color = disp_refr->bg_color;
 800897c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8008980:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            dsc.bg_opa = disp_refr->bg_opa;
 8008984:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 8008988:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800898a:	aa18      	add	r2, sp, #96	; 0x60
 800898c:	a91a      	add	r1, sp, #104	; 0x68
 800898e:	4628      	mov	r0, r5
 8008990:	4798      	blx	r3
 8008992:	2600      	movs	r6, #0
    if(disp_refr->draw_prev_over_act) {
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800899a:	07d2      	lsls	r2, r2, #31
 800899c:	d561      	bpl.n	8008a62 <refr_area_part+0x196>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800899e:	b907      	cbnz	r7, 80089a2 <refr_area_part+0xd6>
 80089a0:	691f      	ldr	r7, [r3, #16]
        refr_obj_and_children(draw_ctx, top_act_scr);
 80089a2:	4639      	mov	r1, r7
 80089a4:	4628      	mov	r0, r5
 80089a6:	f7ff ff4b 	bl	8008840 <refr_obj_and_children>
        if(disp_refr->prev_scr) {
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	6959      	ldr	r1, [r3, #20]
 80089ae:	b129      	cbz	r1, 80089bc <refr_area_part+0xf0>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 80089b0:	2e00      	cmp	r6, #0
 80089b2:	bf18      	it	ne
 80089b4:	4631      	movne	r1, r6
        refr_obj_and_children(draw_ctx, top_act_scr);
 80089b6:	4628      	mov	r0, r5
 80089b8:	f7ff ff42 	bl	8008840 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 80089bc:	6820      	ldr	r0, [r4, #0]
 80089be:	f7fa fb0e 	bl	8002fde <lv_disp_get_layer_top>
 80089c2:	4601      	mov	r1, r0
 80089c4:	4628      	mov	r0, r5
 80089c6:	f7ff ff3b 	bl	8008840 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 80089ca:	6820      	ldr	r0, [r4, #0]
 80089cc:	f7fa fb0e 	bl	8002fec <lv_disp_get_layer_sys>
 80089d0:	4601      	mov	r1, r0
 80089d2:	4628      	mov	r0, r5
 80089d4:	f7ff ff34 	bl	8008840 <refr_obj_and_children>
    draw_buf_flush(disp_refr);
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	9309      	str	r3, [sp, #36]	; 0x24
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 80089dc:	4618      	mov	r0, r3
 80089de:	f009 fd05 	bl	80123ec <lv_disp_get_draw_buf>
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 80089e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 80089e4:	9003      	str	r0, [sp, #12]
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 80089ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80089ec:	b10b      	cbz	r3, 80089f2 <refr_area_part+0x126>
 80089ee:	4628      	mov	r0, r5
 80089f0:	4798      	blx	r3
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 80089f2:	9b03      	ldr	r3, [sp, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d140      	bne.n	8008a7c <refr_area_part+0x1b0>
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 80089fa:	6820      	ldr	r0, [r4, #0]
    draw_buf->flushing = 1;
 80089fc:	9a03      	ldr	r2, [sp, #12]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 80089fe:	6806      	ldr	r6, [r0, #0]
    draw_buf->flushing = 1;
 8008a00:	2301      	movs	r3, #1
 8008a02:	6113      	str	r3, [r2, #16]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8008a04:	68f2      	ldr	r2, [r6, #12]
 8008a06:	6991      	ldr	r1, [r2, #24]
 8008a08:	07cc      	lsls	r4, r1, #31
 8008a0a:	d453      	bmi.n	8008ab4 <refr_area_part+0x1e8>
    else draw_buf->flushing_last = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	e054      	b.n	8008aba <refr_area_part+0x1ee>
        else if(disp_refr->bg_img) {
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008a14:	b198      	cbz	r0, 8008a3e <refr_area_part+0x172>
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 8008a16:	a917      	add	r1, sp, #92	; 0x5c
 8008a18:	f002 ffa8 	bl	800b96c <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 8008a1c:	2801      	cmp	r0, #1
 8008a1e:	d1b8      	bne.n	8008992 <refr_area_part+0xc6>
                lv_draw_img_dsc_init(&dsc);
 8008a20:	a81a      	add	r0, sp, #104	; 0x68
 8008a22:	f000 ff21 	bl	8009868 <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8008a2c:	f88d 2072 	strb.w	r2, [sp, #114]	; 0x72
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 8008a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a32:	aa18      	add	r2, sp, #96	; 0x60
 8008a34:	a91a      	add	r1, sp, #104	; 0x68
 8008a36:	4628      	mov	r0, r5
 8008a38:	f000 ff64 	bl	8009904 <lv_draw_img>
                LV_LOG_WARN("Can't draw the background image");
 8008a3c:	e7a9      	b.n	8008992 <refr_area_part+0xc6>
            lv_draw_rect_dsc_init(&dsc);
 8008a3e:	a81a      	add	r0, sp, #104	; 0x68
 8008a40:	f002 fbde 	bl	800b200 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8008a4a:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            dsc.bg_opa = disp_refr->bg_opa;
 8008a4e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 8008a52:	686a      	ldr	r2, [r5, #4]
            dsc.bg_opa = disp_refr->bg_opa;
 8008a54:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 8008a58:	a91a      	add	r1, sp, #104	; 0x68
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f002 fbf4 	bl	800b248 <lv_draw_rect>
 8008a60:	e797      	b.n	8008992 <refr_area_part+0xc6>
        if(disp_refr->prev_scr) {
 8008a62:	6959      	ldr	r1, [r3, #20]
 8008a64:	b129      	cbz	r1, 8008a72 <refr_area_part+0x1a6>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 8008a66:	2e00      	cmp	r6, #0
 8008a68:	bf18      	it	ne
 8008a6a:	4631      	movne	r1, r6
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	f7ff fee7 	bl	8008840 <refr_obj_and_children>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 8008a72:	b90f      	cbnz	r7, 8008a78 <refr_area_part+0x1ac>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	691f      	ldr	r7, [r3, #16]
        refr_obj_and_children(draw_ctx, top_act_scr);
 8008a78:	4639      	mov	r1, r7
 8008a7a:	e79c      	b.n	80089b6 <refr_area_part+0xea>
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 8008a7c:	9b03      	ldr	r3, [sp, #12]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0ba      	beq.n	80089fa <refr_area_part+0x12e>
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	8813      	ldrh	r3, [r2, #0]
 8008a8a:	8852      	ldrh	r2, [r2, #2]
 8008a8c:	fb13 f302 	smulbb	r3, r3, r2
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 8008a90:	9a03      	ldr	r2, [sp, #12]
 8008a92:	68d2      	ldr	r2, [r2, #12]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d0b0      	beq.n	80089fa <refr_area_part+0x12e>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	6818      	ldr	r0, [r3, #0]
        while(draw_buf->flushing) {
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0aa      	beq.n	80089fa <refr_area_part+0x12e>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8008aa4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0f8      	beq.n	8008a9c <refr_area_part+0x1d0>
 8008aaa:	4798      	blx	r3
 8008aac:	e7f4      	b.n	8008a98 <refr_area_part+0x1cc>
 8008aae:	bf00      	nop
 8008ab0:	20000b5c 	.word	0x20000b5c
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8008ab4:	6992      	ldr	r2, [r2, #24]
 8008ab6:	0791      	lsls	r1, r2, #30
 8008ab8:	d5a8      	bpl.n	8008a0c <refr_area_part+0x140>
    else draw_buf->flushing_last = 0;
 8008aba:	9a03      	ldr	r2, [sp, #12]
 8008abc:	6153      	str	r3, [r2, #20]
    bool flushing_last = draw_buf->flushing_last;
 8008abe:	9b03      	ldr	r3, [sp, #12]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	930e      	str	r3, [sp, #56]	; 0x38
    if(disp->driver->flush_cb) {
 8008ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	695a      	ldr	r2, [r3, #20]
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	f000 809a 	beq.w	8008c04 <refr_area_part+0x338>
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 8008ad0:	7c1a      	ldrb	r2, [r3, #16]
 8008ad2:	f012 0f30 	tst.w	r2, #48	; 0x30
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 8008ad6:	e9d5 5400 	ldrd	r5, r4, [r5]
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 8008ada:	f000 81a7 	beq.w	8008e2c <refr_area_part+0x560>
 8008ade:	0752      	lsls	r2, r2, #29
 8008ae0:	f140 81a4 	bpl.w	8008e2c <refr_area_part+0x560>
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 8008ae4:	7c33      	ldrb	r3, [r6, #16]
 8008ae6:	f003 0206 	and.w	r2, r3, #6
 8008aea:	2a06      	cmp	r2, #6
 8008aec:	f000 808a 	beq.w	8008c04 <refr_area_part+0x338>
    if(drv->rotated == LV_DISP_ROT_180) {
 8008af0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8008af4:	2a20      	cmp	r2, #32
 8008af6:	d137      	bne.n	8008b68 <refr_area_part+0x29c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008af8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8008afc:	8822      	ldrh	r2, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008afe:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 8008b02:	8861      	ldrh	r1, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008b04:	f10e 0301 	add.w	r3, lr, #1
 8008b08:	1a98      	subs	r0, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008b0a:	f108 0301 	add.w	r3, r8, #1
 8008b0e:	1a5b      	subs	r3, r3, r1
    while(i > j) {
 8008b10:	fb10 5303 	smlabb	r3, r0, r3, r5
 8008b14:	f105 3cff 	add.w	ip, r5, #4294967295
 8008b18:	469b      	mov	fp, r3
 8008b1a:	ea6f 0a05 	mvn.w	sl, r5
 8008b1e:	ebab 0003 	sub.w	r0, fp, r3
 8008b22:	eb0a 0903 	add.w	r9, sl, r3
 8008b26:	4548      	cmp	r0, r9
 8008b28:	d315      	bcc.n	8008b56 <refr_area_part+0x28a>
    area->y2 = drv->ver_res - area->y1 - 1;
 8008b2a:	8873      	ldrh	r3, [r6, #2]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	1a59      	subs	r1, r3, r1
    area->y1 = drv->ver_res - tmp_coord - 1;
 8008b32:	eba3 0308 	sub.w	r3, r3, r8
 8008b36:	8063      	strh	r3, [r4, #2]
 8008b38:	8833      	ldrh	r3, [r6, #0]
    area->y2 = drv->ver_res - area->y1 - 1;
 8008b3a:	80e1      	strh	r1, [r4, #6]
    area->x2 = drv->hor_res - area->x1 - 1;
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	1a9a      	subs	r2, r3, r2
    area->x1 = drv->hor_res - tmp_coord - 1;
 8008b42:	eba3 030e 	sub.w	r3, r3, lr
    area->x2 = drv->hor_res - area->x1 - 1;
 8008b46:	80a2      	strh	r2, [r4, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 8008b48:	8023      	strh	r3, [r4, #0]
        call_flush_cb(drv, area, color_p);
 8008b4a:	462a      	mov	r2, r5
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	4630      	mov	r0, r6
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 8008b50:	f7ff fc1b 	bl	800838a <call_flush_cb>
 8008b54:	e056      	b.n	8008c04 <refr_area_part+0x338>
        tmp = color_p[i];
 8008b56:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
        color_p[i] = color_p[j];
 8008b5a:	f81c 9f01 	ldrb.w	r9, [ip, #1]!
 8008b5e:	f883 9000 	strb.w	r9, [r3]
        color_p[j] = tmp;
 8008b62:	f88c 0000 	strb.w	r0, [ip]
        j++;
 8008b66:	e7da      	b.n	8008b1e <refr_area_part+0x252>
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 8008b68:	06db      	lsls	r3, r3, #27
 8008b6a:	d54b      	bpl.n	8008c04 <refr_area_part+0x338>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8008b6c:	f009 fc3e 	bl	80123ec <lv_disp_get_draw_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008b70:	8823      	ldrh	r3, [r4, #0]
 8008b72:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8008b76:	930a      	str	r3, [sp, #40]	; 0x28
 8008b78:	9006      	str	r0, [sp, #24]
 8008b7a:	1c53      	adds	r3, r2, #1
 8008b7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b7e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b86:	1a1b      	subs	r3, r3, r0
 8008b88:	b298      	uxth	r0, r3
 8008b8a:	fa0f fa83 	sxth.w	sl, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008b8e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8008b92:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b94:	8863      	ldrh	r3, [r4, #2]
 8008b96:	9307      	str	r3, [sp, #28]
 8008b98:	88e3      	ldrh	r3, [r4, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008b9a:	900c      	str	r0, [sp, #48]	; 0x30
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008b9c:	9807      	ldr	r0, [sp, #28]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	1a1b      	subs	r3, r3, r0
 8008ba2:	b21b      	sxth	r3, r3
 8008ba4:	9308      	str	r3, [sp, #32]
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 8008ba6:	9808      	ldr	r0, [sp, #32]
 8008ba8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008bac:	fbb3 f3fa 	udiv	r3, r3, sl
 8008bb0:	4283      	cmp	r3, r0
 8008bb2:	bfa8      	it	ge
 8008bb4:	4603      	movge	r3, r0
 8008bb6:	9310      	str	r3, [sp, #64]	; 0x40
        if(drv->rotated == LV_DISP_ROT_90) {
 8008bb8:	7c33      	ldrb	r3, [r6, #16]
 8008bba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bbe:	2b10      	cmp	r3, #16
 8008bc0:	d136      	bne.n	8008c30 <refr_area_part+0x364>
            area->y2 = drv->ver_res - area->x1 - 1;
 8008bc2:	8873      	ldrh	r3, [r6, #2]
 8008bc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bc6:	1e5a      	subs	r2, r3, #1
 8008bc8:	1a52      	subs	r2, r2, r1
 8008bca:	80e2      	strh	r2, [r4, #6]
            area->y1 = area->y2 - area_w + 1;
 8008bcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bce:	1a9b      	subs	r3, r3, r2
 8008bd0:	8063      	strh	r3, [r4, #2]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8008bd2:	eb0a 73da 	add.w	r3, sl, sl, lsr #31
 8008bd6:	105b      	asrs	r3, r3, #1
 8008bd8:	9314      	str	r3, [sp, #80]	; 0x50
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8008bda:	f10a 0301 	add.w	r3, sl, #1
 8008bde:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8008be2:	105b      	asrs	r3, r3, #1
 8008be4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008be6:	2300      	movs	r3, #0
 8008be8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8008bec:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8008bf0:	9315      	str	r3, [sp, #84]	; 0x54
        while(row < area_h) {
 8008bf2:	9b08      	ldr	r3, [sp, #32]
 8008bf4:	9a04      	ldr	r2, [sp, #16]
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	dc1d      	bgt.n	8008c36 <refr_area_part+0x36a>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 8008bfa:	9b05      	ldr	r3, [sp, #20]
 8008bfc:	b113      	cbz	r3, 8008c04 <refr_area_part+0x338>
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f00a fc2e 	bl	8013460 <lv_mem_buf_release>
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 8008c04:	9b03      	ldr	r3, [sp, #12]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	b17a      	cbz	r2, 8008c2a <refr_area_part+0x35e>
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	b16b      	cbz	r3, 8008c2a <refr_area_part+0x35e>
 8008c0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c10:	6809      	ldr	r1, [r1, #0]
 8008c12:	7c09      	ldrb	r1, [r1, #16]
 8008c14:	07c9      	lsls	r1, r1, #31
 8008c16:	d501      	bpl.n	8008c1c <refr_area_part+0x350>
 8008c18:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008c1a:	b131      	cbz	r1, 8008c2a <refr_area_part+0x35e>
        if(draw_buf->buf_act == draw_buf->buf1)
 8008c1c:	9903      	ldr	r1, [sp, #12]
 8008c1e:	6889      	ldr	r1, [r1, #8]
            draw_buf->buf_act = draw_buf->buf2;
 8008c20:	428a      	cmp	r2, r1
 8008c22:	bf18      	it	ne
 8008c24:	4613      	movne	r3, r2
 8008c26:	9a03      	ldr	r2, [sp, #12]
 8008c28:	6093      	str	r3, [r2, #8]
}
 8008c2a:	b027      	add	sp, #156	; 0x9c
 8008c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            area->y1 = area->x1;
 8008c30:	8061      	strh	r1, [r4, #2]
            area->y2 = area->y1 + area_w - 1;
 8008c32:	80e2      	strh	r2, [r4, #6]
 8008c34:	e7cd      	b.n	8008bd2 <refr_area_part+0x306>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 8008c36:	9b08      	ldr	r3, [sp, #32]
 8008c38:	9a04      	ldr	r2, [sp, #16]
 8008c3a:	eba3 0b02 	sub.w	fp, r3, r2
 8008c3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
            draw_buf->flushing = 1;
 8008c40:	9a06      	ldr	r2, [sp, #24]
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 8008c42:	459b      	cmp	fp, r3
 8008c44:	bfa8      	it	ge
 8008c46:	469b      	movge	fp, r3
            draw_buf->flushing = 1;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	6113      	str	r3, [r2, #16]
            if((row == 0) && (area_h >= area_w)) {
 8008c4c:	9b04      	ldr	r3, [sp, #16]
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 8008c4e:	fa0f f88b 	sxth.w	r8, fp
            if((row == 0) && (area_h >= area_w)) {
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f040 808f 	bne.w	8008d76 <refr_area_part+0x4aa>
 8008c58:	9b08      	ldr	r3, [sp, #32]
 8008c5a:	459a      	cmp	sl, r3
 8008c5c:	f300 808b 	bgt.w	8008d76 <refr_area_part+0x4aa>
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8008c60:	7c33      	ldrb	r3, [r6, #16]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8008c62:	f8dd 8010 	ldr.w	r8, [sp, #16]
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8008c66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c6a:	9311      	str	r3, [sp, #68]	; 0x44
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8008c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	4640      	mov	r0, r8
 8008c74:	930d      	str	r3, [sp, #52]	; 0x34
 8008c76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c78:	b203      	sxth	r3, r0
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	da3e      	bge.n	8008cfc <refr_area_part+0x430>
 8008c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c80:	eba3 0e00 	sub.w	lr, r3, r0
 8008c84:	fa0f fe8e 	sxth.w	lr, lr
                    &color_p[inv_i * w + inv_j],
 8008c88:	fb0a f30e 	mul.w	r3, sl, lr
 8008c8c:	9312      	str	r3, [sp, #72]	; 0x48
 8008c8e:	f04f 0c00 	mov.w	ip, #0
 8008c92:	e01d      	b.n	8008cd0 <refr_area_part+0x404>
            lv_coord_t inv_j = (w - 1) - j;
 8008c94:	990d      	ldr	r1, [sp, #52]	; 0x34
                    &color_p[inv_i * w + inv_j],
 8008c96:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008c98:	1acb      	subs	r3, r1, r3
 8008c9a:	b219      	sxth	r1, r3
 8008c9c:	fa07 f383 	sxtah	r3, r7, r3
            if(is_270) {
 8008ca0:	9f11      	ldr	r7, [sp, #68]	; 0x44
                    &color_p[i * w + j],
 8008ca2:	eb02 0908 	add.w	r9, r2, r8
            if(is_270) {
 8008ca6:	2f30      	cmp	r7, #48	; 0x30
                    &color_p[j * w + inv_i]
 8008ca8:	fb0a e202 	mla	r2, sl, r2, lr
 8008cac:	f815 7009 	ldrb.w	r7, [r5, r9]
                    &color_p[inv_j * w + i],
 8008cb0:	fb0a 0101 	mla	r1, sl, r1, r0
            if(is_270) {
 8008cb4:	d116      	bne.n	8008ce4 <refr_area_part+0x418>
    *a = *b;
 8008cb6:	f815 b001 	ldrb.w	fp, [r5, r1]
 8008cba:	f805 b009 	strb.w	fp, [r5, r9]
    *b = *c;
 8008cbe:	f815 9003 	ldrb.w	r9, [r5, r3]
 8008cc2:	f805 9001 	strb.w	r9, [r5, r1]
    *c = *d;
 8008cc6:	5ca9      	ldrb	r1, [r5, r2]
 8008cc8:	54e9      	strb	r1, [r5, r3]
    *d = tmp;
 8008cca:	54af      	strb	r7, [r5, r2]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8008ccc:	f10c 0c01 	add.w	ip, ip, #1
 8008cd0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008cd2:	fa0f f28c 	sxth.w	r2, ip
 8008cd6:	428a      	cmp	r2, r1
 8008cd8:	fa1f f38c 	uxth.w	r3, ip
 8008cdc:	dbda      	blt.n	8008c94 <refr_area_part+0x3c8>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8008cde:	3001      	adds	r0, #1
 8008ce0:	44d0      	add	r8, sl
 8008ce2:	e7c8      	b.n	8008c76 <refr_area_part+0x3aa>
    *a = *b;
 8008ce4:	f815 b002 	ldrb.w	fp, [r5, r2]
 8008ce8:	f805 b009 	strb.w	fp, [r5, r9]
    *b = *c;
 8008cec:	f815 9003 	ldrb.w	r9, [r5, r3]
 8008cf0:	f805 9002 	strb.w	r9, [r5, r2]
    *c = *d;
 8008cf4:	5c6a      	ldrb	r2, [r5, r1]
 8008cf6:	54ea      	strb	r2, [r5, r3]
    *d = tmp;
 8008cf8:	546f      	strb	r7, [r5, r1]
}
 8008cfa:	e7e7      	b.n	8008ccc <refr_area_part+0x400>
                if(drv->rotated == LV_DISP_ROT_90) {
 8008cfc:	7c33      	ldrb	r3, [r6, #16]
 8008cfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d02:	2b10      	cmp	r3, #16
 8008d04:	d12a      	bne.n	8008d5c <refr_area_part+0x490>
                    area->x1 = init_y_off;
 8008d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d08:	8023      	strh	r3, [r4, #0]
                    area->x2 = init_y_off + area_w - 1;
 8008d0a:	9b07      	ldr	r3, [sp, #28]
 8008d0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	4413      	add	r3, r2
 8008d12:	80a3      	strh	r3, [r4, #4]
                    area->x1 = area->x2 - area_w + 1;
 8008d14:	46d0      	mov	r8, sl
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	9a08      	ldr	r2, [sp, #32]
 8008d1a:	4443      	add	r3, r8
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	dc7d      	bgt.n	8008e1c <refr_area_part+0x550>
 8008d20:	9b06      	ldr	r3, [sp, #24]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	07df      	lsls	r7, r3, #31
 8008d26:	d579      	bpl.n	8008e1c <refr_area_part+0x550>
 8008d28:	9b06      	ldr	r3, [sp, #24]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	0798      	lsls	r0, r3, #30
 8008d2e:	d575      	bpl.n	8008e1c <refr_area_part+0x550>
                draw_buf->flushing_last = 1;
 8008d30:	2301      	movs	r3, #1
                draw_buf->flushing_last = 0;
 8008d32:	9a06      	ldr	r2, [sp, #24]
 8008d34:	6153      	str	r3, [r2, #20]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 8008d36:	9a05      	ldr	r2, [sp, #20]
 8008d38:	4621      	mov	r1, r4
 8008d3a:	2a00      	cmp	r2, #0
 8008d3c:	bf08      	it	eq
 8008d3e:	462a      	moveq	r2, r5
 8008d40:	4630      	mov	r0, r6
 8008d42:	f7ff fb22 	bl	800838a <call_flush_cb>
            while(draw_buf->flushing) {
 8008d46:	9b06      	ldr	r3, [sp, #24]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d168      	bne.n	8008e20 <refr_area_part+0x554>
            row += height;
 8008d4e:	9b04      	ldr	r3, [sp, #16]
 8008d50:	4443      	add	r3, r8
 8008d52:	b21b      	sxth	r3, r3
            color_p += area_w * height;
 8008d54:	fb08 550a 	mla	r5, r8, sl, r5
            row += height;
 8008d58:	9304      	str	r3, [sp, #16]
 8008d5a:	e74a      	b.n	8008bf2 <refr_area_part+0x326>
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8008d5c:	8833      	ldrh	r3, [r6, #0]
 8008d5e:	9a07      	ldr	r2, [sp, #28]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	1a9b      	subs	r3, r3, r2
                    area->x1 = area->x2 - area_w + 1;
 8008d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8008d66:	b29b      	uxth	r3, r3
                    area->x1 = area->x2 - area_w + 1;
 8008d68:	3201      	adds	r2, #1
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8008d6a:	80a3      	strh	r3, [r4, #4]
                    area->x1 = area->x2 - area_w + 1;
 8008d6c:	4413      	add	r3, r2
 8008d6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d70:	1a9b      	subs	r3, r3, r2
 8008d72:	8023      	strh	r3, [r4, #0]
 8008d74:	e7ce      	b.n	8008d14 <refr_area_part+0x448>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 8008d76:	9b05      	ldr	r3, [sp, #20]
 8008d78:	b923      	cbnz	r3, 8008d84 <refr_area_part+0x4b8>
 8008d7a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8008d7e:	f00a fb23 	bl	80133c8 <lv_mem_buf_get>
 8008d82:	9005      	str	r0, [sp, #20]
    uint32_t invert = (area_w * area_h) - 1;
 8008d84:	fb0a f308 	mul.w	r3, sl, r8
    uint32_t initial_i = ((area_w - 1) * area_h);
 8008d88:	eba3 0908 	sub.w	r9, r3, r8
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 8008d8c:	7c30      	ldrb	r0, [r6, #16]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	eba3 0309 	sub.w	r3, r3, r9
 8008d94:	f000 0030 	and.w	r0, r0, #48	; 0x30
    for(lv_coord_t y = 0; y < area_h; y++) {
 8008d98:	46ae      	mov	lr, r5
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	930d      	str	r3, [sp, #52]	; 0x34
 8008d9e:	b20a      	sxth	r2, r1
 8008da0:	4590      	cmp	r8, r2
 8008da2:	dc11      	bgt.n	8008dc8 <refr_area_part+0x4fc>
                if(drv->rotated == LV_DISP_ROT_90) {
 8008da4:	7c33      	ldrb	r3, [r6, #16]
                    area->x1 = init_y_off + row;
 8008da6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                if(drv->rotated == LV_DISP_ROT_90) {
 8008daa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008dae:	2b10      	cmp	r3, #16
                    area->x2 = init_y_off + row + height - 1;
 8008db0:	fa1f fb8b 	uxth.w	fp, fp
                if(drv->rotated == LV_DISP_ROT_90) {
 8008db4:	d126      	bne.n	8008e04 <refr_area_part+0x538>
                    area->x1 = init_y_off + row;
 8008db6:	9b07      	ldr	r3, [sp, #28]
 8008db8:	4413      	add	r3, r2
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	8023      	strh	r3, [r4, #0]
                    area->x2 = init_y_off + row + height - 1;
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	449b      	add	fp, r3
 8008dc2:	f8a4 b004 	strh.w	fp, [r4, #4]
 8008dc6:	e7a6      	b.n	8008d16 <refr_area_part+0x44a>
        if(invert_i)
 8008dc8:	2830      	cmp	r0, #48	; 0x30
 8008dca:	bf08      	it	eq
 8008dcc:	9b0d      	ldreq	r3, [sp, #52]	; 0x34
 8008dce:	eb01 0209 	add.w	r2, r1, r9
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8008dd2:	f04f 0c00 	mov.w	ip, #0
 8008dd6:	bf08      	it	eq
 8008dd8:	1a5a      	subeq	r2, r3, r1
        for(lv_coord_t x = 0; x < area_w; x++) {
 8008dda:	fa0f f38c 	sxth.w	r3, ip
 8008dde:	459a      	cmp	sl, r3
 8008de0:	dc03      	bgt.n	8008dea <refr_area_part+0x51e>
 8008de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008de4:	3101      	adds	r1, #1
 8008de6:	449e      	add	lr, r3
    for(lv_coord_t y = 0; y < area_h; y++) {
 8008de8:	e7d9      	b.n	8008d9e <refr_area_part+0x4d2>
            rot_buf[i] = *(orig_color_p++);
 8008dea:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8008dee:	463b      	mov	r3, r7
 8008df0:	9f05      	ldr	r7, [sp, #20]
            if(invert_i)
 8008df2:	2830      	cmp	r0, #48	; 0x30
            rot_buf[i] = *(orig_color_p++);
 8008df4:	54bb      	strb	r3, [r7, r2]
                i += area_h;
 8008df6:	f10c 0c01 	add.w	ip, ip, #1
 8008dfa:	bf0c      	ite	eq
 8008dfc:	4442      	addeq	r2, r8
                i -= area_h;
 8008dfe:	eba2 0208 	subne.w	r2, r2, r8
        for(lv_coord_t x = 0; x < area_w; x++) {
 8008e02:	e7ea      	b.n	8008dda <refr_area_part+0x50e>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 8008e04:	8833      	ldrh	r3, [r6, #0]
 8008e06:	9907      	ldr	r1, [sp, #28]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	1a5b      	subs	r3, r3, r1
 8008e0c:	1a9b      	subs	r3, r3, r2
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	80a3      	strh	r3, [r4, #4]
                    area->x1 = area->x2 - height + 1;
 8008e12:	3301      	adds	r3, #1
 8008e14:	eba3 030b 	sub.w	r3, r3, fp
 8008e18:	8023      	strh	r3, [r4, #0]
 8008e1a:	e77c      	b.n	8008d16 <refr_area_part+0x44a>
                draw_buf->flushing_last = 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	e788      	b.n	8008d32 <refr_area_part+0x466>
                if(drv->wait_cb) drv->wait_cb(drv);
 8008e20:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d08f      	beq.n	8008d46 <refr_area_part+0x47a>
 8008e26:	4630      	mov	r0, r6
 8008e28:	4798      	blx	r3
 8008e2a:	e78c      	b.n	8008d46 <refr_area_part+0x47a>
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 8008e2c:	462a      	mov	r2, r5
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4618      	mov	r0, r3
 8008e32:	e68d      	b.n	8008b50 <refr_area_part+0x284>

08008e34 <_lv_inv_area>:
{
 8008e34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008e36:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
 8008e38:	4604      	mov	r4, r0
 8008e3a:	b918      	cbnz	r0, 8008e44 <_lv_inv_area+0x10>
 8008e3c:	f009 fa92 	bl	8012364 <lv_disp_get_default>
    if(!disp) return;
 8008e40:	4604      	mov	r4, r0
 8008e42:	b158      	cbz	r0, 8008e5c <_lv_inv_area+0x28>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 8008e44:	4620      	mov	r0, r4
 8008e46:	f7fa f900 	bl	800304a <lv_disp_is_invalidation_enabled>
 8008e4a:	b138      	cbz	r0, 8008e5c <_lv_inv_area+0x28>
    if(disp->rendering_in_progress) {
 8008e4c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008e50:	f013 0304 	ands.w	r3, r3, #4
 8008e54:	d102      	bne.n	8008e5c <_lv_inv_area+0x28>
    if(area_p == NULL) {
 8008e56:	b91d      	cbnz	r5, 8008e60 <_lv_inv_area+0x2c>
        disp->inv_p = 0;
 8008e58:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
}
 8008e5c:	b004      	add	sp, #16
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8008e60:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 8008e62:	f8ad 3000 	strh.w	r3, [sp]
    scr_area.y1 = 0;
 8008e66:	f8ad 3002 	strh.w	r3, [sp, #2]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8008e6a:	f009 fa81 	bl	8012370 <lv_disp_get_hor_res>
 8008e6e:	3801      	subs	r0, #1
 8008e70:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8008e74:	4620      	mov	r0, r4
 8008e76:	f009 fa8b 	bl	8012390 <lv_disp_get_ver_res>
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8008e7a:	466e      	mov	r6, sp
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8008e7c:	3801      	subs	r0, #1
 8008e7e:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8008e82:	4632      	mov	r2, r6
 8008e84:	4629      	mov	r1, r5
 8008e86:	a802      	add	r0, sp, #8
 8008e88:	f009 fcf5 	bl	8012876 <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d0e5      	beq.n	8008e5c <_lv_inv_area+0x28>
    if(disp->driver->full_refresh) {
 8008e90:	6820      	ldr	r0, [r4, #0]
 8008e92:	7c03      	ldrb	r3, [r0, #16]
 8008e94:	079b      	lsls	r3, r3, #30
 8008e96:	d50e      	bpl.n	8008eb6 <_lv_inv_area+0x82>
        disp->inv_areas[0] = scr_area;
 8008e98:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008e9c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8008ea0:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 8008ea4:	2301      	movs	r3, #1
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8008ea6:	6860      	ldr	r0, [r4, #4]
    disp->inv_p++;
 8008ea8:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d0d5      	beq.n	8008e5c <_lv_inv_area+0x28>
 8008eb0:	f00b fc57 	bl	8014762 <lv_timer_resume>
 8008eb4:	e7d2      	b.n	8008e5c <_lv_inv_area+0x28>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 8008eb6:	6983      	ldr	r3, [r0, #24]
 8008eb8:	b10b      	cbz	r3, 8008ebe <_lv_inv_area+0x8a>
 8008eba:	a902      	add	r1, sp, #8
 8008ebc:	4798      	blx	r3
{
 8008ebe:	2500      	movs	r5, #0
    for(i = 0; i < disp->inv_p; i++) {
 8008ec0:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 8008ec4:	b2aa      	uxth	r2, r5
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d813      	bhi.n	8008ef2 <_lv_inv_area+0xbe>
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 8008eca:	2b1f      	cmp	r3, #31
 8008ecc:	d81d      	bhi.n	8008f0a <_lv_inv_area+0xd6>
    dest->x1 = src->x1;
 8008ece:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008ed2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8008ed6:	861a      	strh	r2, [r3, #48]	; 0x30
    dest->y1 = src->y1;
 8008ed8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8008edc:	865a      	strh	r2, [r3, #50]	; 0x32
    dest->x2 = src->x2;
 8008ede:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8008ee2:	869a      	strh	r2, [r3, #52]	; 0x34
    dest->y2 = src->y2;
 8008ee4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8008ee8:	86da      	strh	r2, [r3, #54]	; 0x36
    disp->inv_p++;
 8008eea:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 8008eee:	3301      	adds	r3, #1
 8008ef0:	e7d9      	b.n	8008ea6 <_lv_inv_area+0x72>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 8008ef2:	b2a9      	uxth	r1, r5
 8008ef4:	3106      	adds	r1, #6
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8008efc:	a802      	add	r0, sp, #8
 8008efe:	f009 fdbb 	bl	8012a78 <_lv_area_is_in>
 8008f02:	3501      	adds	r5, #1
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d0db      	beq.n	8008ec0 <_lv_inv_area+0x8c>
 8008f08:	e7a8      	b.n	8008e5c <_lv_inv_area+0x28>
        disp->inv_p = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    dest->x1 = src->x1;
 8008f10:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f14:	8623      	strh	r3, [r4, #48]	; 0x30
    dest->y1 = src->y1;
 8008f16:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008f1a:	8663      	strh	r3, [r4, #50]	; 0x32
    dest->x2 = src->x2;
 8008f1c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008f20:	86a3      	strh	r3, [r4, #52]	; 0x34
    dest->y2 = src->y2;
 8008f22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008f26:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 8008f28:	e7df      	b.n	8008eea <_lv_inv_area+0xb6>
	...

08008f2c <_lv_refr_get_disp_refreshing>:
}
 8008f2c:	4b01      	ldr	r3, [pc, #4]	; (8008f34 <_lv_refr_get_disp_refreshing+0x8>)
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20000b5c 	.word	0x20000b5c

08008f38 <_lv_disp_refr_timer>:
{
 8008f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	ed2d 8b02 	vpush	{d8}
 8008f40:	b08d      	sub	sp, #52	; 0x34
 8008f42:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
 8008f44:	f009 fa60 	bl	8012408 <lv_tick_get>
    volatile uint32_t elaps = 0;
 8008f48:	2300      	movs	r3, #0
    uint32_t start = lv_tick_get();
 8008f4a:	ee08 0a10 	vmov	s16, r0
    volatile uint32_t elaps = 0;
 8008f4e:	4c9a      	ldr	r4, [pc, #616]	; (80091b8 <_lv_disp_refr_timer+0x280>)
 8008f50:	9309      	str	r3, [sp, #36]	; 0x24
    if(tmr) {
 8008f52:	b30d      	cbz	r5, 8008f98 <_lv_disp_refr_timer+0x60>
        disp_refr = tmr->user_data;
 8008f54:	68eb      	ldr	r3, [r5, #12]
 8008f56:	6023      	str	r3, [r4, #0]
        lv_timer_pause(tmr);
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f00b fbfd 	bl	8014758 <lv_timer_pause>
    lv_obj_update_layout(disp_refr->act_scr);
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	6918      	ldr	r0, [r3, #16]
 8008f62:	f7fc ff2f 	bl	8005dc4 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	6958      	ldr	r0, [r3, #20]
 8008f6a:	b108      	cbz	r0, 8008f70 <_lv_disp_refr_timer+0x38>
 8008f6c:	f7fc ff2a 	bl	8005dc4 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	69d8      	ldr	r0, [r3, #28]
 8008f74:	f7fc ff26 	bl	8005dc4 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	6a18      	ldr	r0, [r3, #32]
 8008f7c:	f7fc ff22 	bl	8005dc4 <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	691a      	ldr	r2, [r3, #16]
 8008f84:	2a00      	cmp	r2, #0
 8008f86:	f040 80bc 	bne.w	8009102 <_lv_disp_refr_timer+0x1ca>
        disp_refr->inv_p = 0;
 8008f8a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
 8008f8e:	b00d      	add	sp, #52	; 0x34
 8008f90:	ecbd 8b02 	vpop	{d8}
 8008f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disp_refr = lv_disp_get_default();
 8008f98:	f009 f9e4 	bl	8012364 <lv_disp_get_default>
 8008f9c:	6020      	str	r0, [r4, #0]
 8008f9e:	e7de      	b.n	8008f5e <_lv_disp_refr_timer+0x26>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8008fa0:	443b      	add	r3, r7
 8008fa2:	f893 6130 	ldrb.w	r6, [r3, #304]	; 0x130
 8008fa6:	2e00      	cmp	r6, #0
 8008fa8:	d065      	beq.n	8009076 <_lv_disp_refr_timer+0x13e>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8008faa:	3701      	adds	r7, #1
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 8008fb2:	4297      	cmp	r7, r2
 8008fb4:	d3f4      	bcc.n	8008fa0 <_lv_disp_refr_timer+0x68>
    px_num = 0;
 8008fb6:	4981      	ldr	r1, [pc, #516]	; (80091bc <_lv_disp_refr_timer+0x284>)
 8008fb8:	2000      	movs	r0, #0
 8008fba:	6008      	str	r0, [r1, #0]
    if(disp_refr->inv_p == 0) return;
 8008fbc:	b382      	cbz	r2, 8009020 <_lv_disp_refr_timer+0xe8>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8008fbe:	f102 38ff 	add.w	r8, r2, #4294967295
        if(disp_refr->inv_area_joined[i] == 0) {
 8008fc2:	f503 7298 	add.w	r2, r3, #304	; 0x130
 8008fc6:	f812 1008 	ldrb.w	r1, [r2, r8]
 8008fca:	b121      	cbz	r1, 8008fd6 <_lv_disp_refr_timer+0x9e>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8008fcc:	f1b8 0801 	subs.w	r8, r8, #1
 8008fd0:	d2f9      	bcs.n	8008fc6 <_lv_disp_refr_timer+0x8e>
    int32_t last_i = 0;
 8008fd2:	f04f 0800 	mov.w	r8, #0
    if(disp_refr->driver->render_start_cb) {
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008fda:	b103      	cbz	r3, 8008fde <_lv_disp_refr_timer+0xa6>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 8008fdc:	4798      	blx	r3
    disp_refr->driver->draw_buf->last_area = 0;
 8008fde:	6821      	ldr	r1, [r4, #0]
 8008fe0:	680b      	ldr	r3, [r1, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	7e1a      	ldrb	r2, [r3, #24]
 8008fe6:	f36f 0200 	bfc	r2, #0, #1
 8008fea:	761a      	strb	r2, [r3, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 8008fec:	7e1a      	ldrb	r2, [r3, #24]
 8008fee:	f36f 0241 	bfc	r2, #1, #1
 8008ff2:	761a      	strb	r2, [r3, #24]
    disp_refr->rendering_in_progress = true;
 8008ff4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8008ff8:	f043 0304 	orr.w	r3, r3, #4
 8008ffc:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    for(i = 0; i < disp_refr->inv_p; i++) {
 8009000:	2300      	movs	r3, #0
 8009002:	9302      	str	r3, [sp, #8]
        draw_ctx->buf_area = &sub_area;
 8009004:	f10d 0928 	add.w	r9, sp, #40	; 0x28
    for(i = 0; i < disp_refr->inv_p; i++) {
 8009008:	6827      	ldr	r7, [r4, #0]
 800900a:	9a02      	ldr	r2, [sp, #8]
 800900c:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8009010:	429a      	cmp	r2, r3
 8009012:	db7a      	blt.n	800910a <_lv_disp_refr_timer+0x1d2>
    disp_refr->rendering_in_progress = false;
 8009014:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009018:	f36f 0382 	bfc	r3, #2, #1
 800901c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(disp_refr->inv_p != 0) {
 8009020:	6820      	ldr	r0, [r4, #0]
 8009022:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 8009026:	b1db      	cbz	r3, 8009060 <_lv_disp_refr_timer+0x128>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 8009028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800902c:	3030      	adds	r0, #48	; 0x30
 800902e:	f00a fb64 	bl	80136fa <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 8009032:	6820      	ldr	r0, [r4, #0]
 8009034:	2120      	movs	r1, #32
 8009036:	f500 7098 	add.w	r0, r0, #304	; 0x130
 800903a:	f00a fb5e 	bl	80136fa <lv_memset_00>
        disp_refr->inv_p = 0;
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	2200      	movs	r2, #0
 8009042:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        elaps = lv_tick_elaps(start);
 8009046:	ee18 0a10 	vmov	r0, s16
 800904a:	f009 f9df 	bl	801240c <lv_tick_elaps>
        if(disp_refr->driver->monitor_cb) {
 800904e:	6823      	ldr	r3, [r4, #0]
        elaps = lv_tick_elaps(start);
 8009050:	9009      	str	r0, [sp, #36]	; 0x24
        if(disp_refr->driver->monitor_cb) {
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009056:	b11b      	cbz	r3, 8009060 <_lv_disp_refr_timer+0x128>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 8009058:	4a58      	ldr	r2, [pc, #352]	; (80091bc <_lv_disp_refr_timer+0x284>)
 800905a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800905c:	6812      	ldr	r2, [r2, #0]
 800905e:	4798      	blx	r3
    lv_mem_buf_free_all();
 8009060:	f00a fa12 	bl	8013488 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 8009064:	f009 f8d4 	bl	8012210 <_lv_font_clean_up_fmt_txt>
}
 8009068:	b00d      	add	sp, #52	; 0x34
 800906a:	ecbd 8b02 	vpop	{d8}
 800906e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _lv_draw_mask_cleanup();
 8009072:	f001 bd5d 	b.w	800ab30 <_lv_draw_mask_cleanup>
 8009076:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
 800907a:	f10a 0830 	add.w	r8, sl, #48	; 0x30
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800907e:	6820      	ldr	r0, [r4, #0]
 8009080:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 8009084:	429e      	cmp	r6, r3
 8009086:	d290      	bcs.n	8008faa <_lv_disp_refr_timer+0x72>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8009088:	1983      	adds	r3, r0, r6
 800908a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800908e:	2b00      	cmp	r3, #0
 8009090:	d135      	bne.n	80090fe <_lv_disp_refr_timer+0x1c6>
 8009092:	42b7      	cmp	r7, r6
 8009094:	d033      	beq.n	80090fe <_lv_disp_refr_timer+0x1c6>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8009096:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
 800909a:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800909e:	eb00 010b 	add.w	r1, r0, fp
 80090a2:	4440      	add	r0, r8
 80090a4:	f009 fccb 	bl	8012a3e <_lv_area_is_on>
 80090a8:	b348      	cbz	r0, 80090fe <_lv_disp_refr_timer+0x1c6>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 80090aa:	6821      	ldr	r1, [r4, #0]
 80090ac:	a80a      	add	r0, sp, #40	; 0x28
 80090ae:	eb01 020b 	add.w	r2, r1, fp
 80090b2:	4441      	add	r1, r8
 80090b4:	f009 fc09 	bl	80128ca <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80090b8:	a80a      	add	r0, sp, #40	; 0x28
 80090ba:	f009 fbae 	bl	801281a <lv_area_get_size>
 80090be:	9002      	str	r0, [sp, #8]
 80090c0:	6820      	ldr	r0, [r4, #0]
 80090c2:	4440      	add	r0, r8
 80090c4:	f009 fba9 	bl	801281a <lv_area_get_size>
 80090c8:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 80090ca:	6820      	ldr	r0, [r4, #0]
 80090cc:	4458      	add	r0, fp
 80090ce:	f009 fba4 	bl	801281a <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80090d2:	9b02      	ldr	r3, [sp, #8]
 80090d4:	4405      	add	r5, r0
 80090d6:	42ab      	cmp	r3, r5
 80090d8:	d211      	bcs.n	80090fe <_lv_disp_refr_timer+0x1c6>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 80090da:	6823      	ldr	r3, [r4, #0]
    dest->x1 = src->x1;
 80090dc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80090e0:	eb03 020a 	add.w	r2, r3, sl
                disp_refr->inv_area_joined[join_from] = 1;
 80090e4:	4433      	add	r3, r6
 80090e6:	8611      	strh	r1, [r2, #48]	; 0x30
    dest->y1 = src->y1;
 80090e8:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 80090ec:	8651      	strh	r1, [r2, #50]	; 0x32
    dest->x2 = src->x2;
 80090ee:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80090f2:	8691      	strh	r1, [r2, #52]	; 0x34
    dest->y2 = src->y2;
 80090f4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80090f8:	86d1      	strh	r1, [r2, #54]	; 0x36
 80090fa:	f883 9130 	strb.w	r9, [r3, #304]	; 0x130
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80090fe:	3601      	adds	r6, #1
 8009100:	e7bd      	b.n	800907e <_lv_disp_refr_timer+0x146>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8009102:	2700      	movs	r7, #0
                disp_refr->inv_area_joined[join_from] = 1;
 8009104:	f04f 0901 	mov.w	r9, #1
 8009108:	e750      	b.n	8008fac <_lv_disp_refr_timer+0x74>
        if(disp_refr->inv_area_joined[i] == 0) {
 800910a:	9b02      	ldr	r3, [sp, #8]
 800910c:	18fb      	adds	r3, r7, r3
 800910e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009112:	2b00      	cmp	r3, #0
 8009114:	d143      	bne.n	800919e <_lv_disp_refr_timer+0x266>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	9a02      	ldr	r2, [sp, #8]
 800911a:	68cb      	ldr	r3, [r1, #12]
 800911c:	4542      	cmp	r2, r8
 800911e:	bf02      	ittt	eq
 8009120:	7e1a      	ldrbeq	r2, [r3, #24]
 8009122:	f042 0201 	orreq.w	r2, r2, #1
 8009126:	761a      	strbeq	r2, [r3, #24]
            disp_refr->driver->draw_buf->last_part = 0;
 8009128:	7e1a      	ldrb	r2, [r3, #24]
 800912a:	f36f 0241 	bfc	r2, #1, #1
 800912e:	761a      	strb	r2, [r3, #24]
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 8009130:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8009132:	9a02      	ldr	r2, [sp, #8]
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	602b      	str	r3, [r5, #0]
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 8009138:	7c0b      	ldrb	r3, [r1, #16]
 800913a:	00d6      	lsls	r6, r2, #3
 800913c:	f106 0230 	add.w	r2, r6, #48	; 0x30
 8009140:	079b      	lsls	r3, r3, #30
 8009142:	9204      	str	r2, [sp, #16]
 8009144:	d03c      	beq.n	80091c0 <_lv_disp_refr_timer+0x288>
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8009146:	4638      	mov	r0, r7
 8009148:	f009 f912 	bl	8012370 <lv_disp_get_hor_res>
 800914c:	4606      	mov	r6, r0
 800914e:	6820      	ldr	r0, [r4, #0]
 8009150:	f009 f91e 	bl	8012390 <lv_disp_get_ver_res>
 8009154:	3801      	subs	r0, #1
 8009156:	2200      	movs	r2, #0
 8009158:	b200      	sxth	r0, r0
 800915a:	1e73      	subs	r3, r6, #1
 800915c:	9000      	str	r0, [sp, #0]
 800915e:	b21b      	sxth	r3, r3
 8009160:	4611      	mov	r1, r2
 8009162:	4648      	mov	r0, r9
 8009164:	f009 fb48 	bl	80127f8 <lv_area_set>
        if(disp_refr->driver->full_refresh) {
 8009168:	6823      	ldr	r3, [r4, #0]
        draw_ctx->buf_area = &disp_area;
 800916a:	f8c5 9004 	str.w	r9, [r5, #4]
        if(disp_refr->driver->full_refresh) {
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	7c1a      	ldrb	r2, [r3, #16]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	f012 0f02 	tst.w	r2, #2
 8009178:	d015      	beq.n	80091a6 <_lv_disp_refr_timer+0x26e>
            disp_refr->driver->draw_buf->last_part = 1;
 800917a:	7e1a      	ldrb	r2, [r3, #24]
 800917c:	f042 0202 	orr.w	r2, r2, #2
 8009180:	761a      	strb	r2, [r3, #24]
            draw_ctx->clip_area = &disp_area;
 8009182:	f8c5 9008 	str.w	r9, [r5, #8]
        refr_area_part(draw_ctx);
 8009186:	4628      	mov	r0, r5
 8009188:	f7ff fba0 	bl	80088cc <refr_area_part>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	6820      	ldr	r0, [r4, #0]
 8009190:	4418      	add	r0, r3
 8009192:	f009 fb42 	bl	801281a <lv_area_get_size>
 8009196:	4a09      	ldr	r2, [pc, #36]	; (80091bc <_lv_disp_refr_timer+0x284>)
 8009198:	6813      	ldr	r3, [r2, #0]
 800919a:	4418      	add	r0, r3
 800919c:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800919e:	9b02      	ldr	r3, [sp, #8]
 80091a0:	3301      	adds	r3, #1
 80091a2:	9302      	str	r3, [sp, #8]
 80091a4:	e730      	b.n	8009008 <_lv_disp_refr_timer+0xd0>
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 80091a6:	6999      	ldr	r1, [r3, #24]
 80091a8:	7e1a      	ldrb	r2, [r3, #24]
 80091aa:	f361 0241 	bfi	r2, r1, #1, #1
 80091ae:	761a      	strb	r2, [r3, #24]
            refr_area(&disp_refr->inv_areas[i]);
 80091b0:	9b04      	ldr	r3, [sp, #16]
 80091b2:	441f      	add	r7, r3
            draw_ctx->clip_area = area_p;
 80091b4:	60af      	str	r7, [r5, #8]
            refr_area_part(draw_ctx);
 80091b6:	e7e6      	b.n	8009186 <_lv_disp_refr_timer+0x24e>
 80091b8:	20000b5c 	.word	0x20000b5c
 80091bc:	20000b60 	.word	0x20000b60
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80091c0:	443e      	add	r6, r7
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 80091c2:	4638      	mov	r0, r7
 80091c4:	f8b6 a034 	ldrh.w	sl, [r6, #52]	; 0x34
 80091c8:	8e33      	ldrh	r3, [r6, #48]	; 0x30
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80091ca:	8e72      	ldrh	r2, [r6, #50]	; 0x32
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80091cc:	f10a 0a01 	add.w	sl, sl, #1
 80091d0:	ebaa 0a03 	sub.w	sl, sl, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80091d4:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80091d8:	9303      	str	r3, [sp, #12]
 80091da:	f103 0b01 	add.w	fp, r3, #1
 80091de:	ebab 0b02 	sub.w	fp, fp, r2
 80091e2:	f009 f8d5 	bl	8012390 <lv_disp_get_ver_res>
 80091e6:	9b03      	ldr	r3, [sp, #12]
 80091e8:	4283      	cmp	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80091ea:	fa0f fa8a 	sxth.w	sl, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80091ee:	fa0f fb8b 	sxth.w	fp, fp
 80091f2:	db5c      	blt.n	80092ae <_lv_disp_refr_timer+0x376>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80091f4:	6820      	ldr	r0, [r4, #0]
 80091f6:	f009 f8cb 	bl	8012390 <lv_disp_get_ver_res>
 80091fa:	3801      	subs	r0, #1
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 80091fc:	b203      	sxth	r3, r0
    int32_t max_row = get_max_row(disp_refr, w, h);
 80091fe:	6822      	ldr	r2, [r4, #0]
 8009200:	6812      	ldr	r2, [r2, #0]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 8009202:	68d1      	ldr	r1, [r2, #12]
    if(disp_refr->driver->rounder_cb) {
 8009204:	6992      	ldr	r2, [r2, #24]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 8009206:	68cf      	ldr	r7, [r1, #12]
 8009208:	fbb7 f7fa 	udiv	r7, r7, sl
    if(max_row > area_h) max_row = area_h;
 800920c:	455f      	cmp	r7, fp
 800920e:	bfa8      	it	ge
 8009210:	465f      	movge	r7, fp
    if(disp_refr->driver->rounder_cb) {
 8009212:	2a00      	cmp	r2, #0
 8009214:	d052      	beq.n	80092bc <_lv_disp_refr_timer+0x384>
        tmp.x1 = 0;
 8009216:	2200      	movs	r2, #0
 8009218:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
        tmp.x2 = 0;
 800921c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        tmp.y1 = 0;
 8009220:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        lv_coord_t h_tmp = max_row;
 8009224:	fa0f fa87 	sxth.w	sl, r7
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 8009228:	6822      	ldr	r2, [r4, #0]
 800922a:	9303      	str	r3, [sp, #12]
 800922c:	6810      	ldr	r0, [r2, #0]
 800922e:	46d3      	mov	fp, sl
 8009230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009234:	fa0f fa8a 	sxth.w	sl, sl
 8009238:	6982      	ldr	r2, [r0, #24]
            tmp.y2 = h_tmp - 1;
 800923a:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800923e:	4649      	mov	r1, r9
 8009240:	4790      	blx	r2
 8009242:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
 8009246:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
            if(lv_area_get_height(&tmp) <= max_row) break;
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	3101      	adds	r1, #1
 800924e:	1a8a      	subs	r2, r1, r2
 8009250:	b212      	sxth	r2, r2
 8009252:	4297      	cmp	r7, r2
 8009254:	da2e      	bge.n	80092b4 <_lv_disp_refr_timer+0x37c>
        } while(h_tmp > 0);
 8009256:	f1ba 0f00 	cmp.w	sl, #0
 800925a:	dce5      	bgt.n	8009228 <_lv_disp_refr_timer+0x2f0>
            return 0;
 800925c:	2200      	movs	r2, #0
 800925e:	9203      	str	r2, [sp, #12]
        sub_area.y2 = row + max_row - 1;
 8009260:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8009264:	f9b6 0032 	ldrsh.w	r0, [r6, #50]	; 0x32
 8009268:	1e51      	subs	r1, r2, #1
    lv_coord_t row_last = 0;
 800926a:	f04f 0a00 	mov.w	sl, #0
 800926e:	9105      	str	r1, [sp, #20]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8009270:	9f03      	ldr	r7, [sp, #12]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8009272:	6821      	ldr	r1, [r4, #0]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8009274:	eb00 0e07 	add.w	lr, r0, r7
 8009278:	f10e 3eff 	add.w	lr, lr, #4294967295
 800927c:	459e      	cmp	lr, r3
 800927e:	dd1f      	ble.n	80092c0 <_lv_disp_refr_timer+0x388>
    if(y2 != row_last) {
 8009280:	4553      	cmp	r3, sl
 8009282:	d083      	beq.n	800918c <_lv_disp_refr_timer+0x254>
        sub_area.x1 = area_p->x1;
 8009284:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8009286:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
        sub_area.x2 = area_p->x2;
 800928a:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
        sub_area.y2 = y2;
 800928c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8009290:	680b      	ldr	r3, [r1, #0]
        sub_area.x2 = area_p->x2;
 8009292:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8009296:	68db      	ldr	r3, [r3, #12]
        sub_area.y1 = row;
 8009298:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        draw_ctx->clip_area = &sub_area;
 800929c:	e9c5 9901 	strd	r9, r9, [r5, #4]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 80092a0:	689a      	ldr	r2, [r3, #8]
 80092a2:	602a      	str	r2, [r5, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 80092a4:	7e1a      	ldrb	r2, [r3, #24]
 80092a6:	f042 0202 	orr.w	r2, r2, #2
 80092aa:	761a      	strb	r2, [r3, #24]
 80092ac:	e76b      	b.n	8009186 <_lv_disp_refr_timer+0x24e>
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 80092ae:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80092b2:	e7a4      	b.n	80091fe <_lv_disp_refr_timer+0x2c6>
        if(h_tmp <= 0) {
 80092b4:	f1bb 0f00 	cmp.w	fp, #0
 80092b8:	ddd0      	ble.n	800925c <_lv_disp_refr_timer+0x324>
            max_row = tmp.y2 + 1;
 80092ba:	460f      	mov	r7, r1
    return max_row;
 80092bc:	9703      	str	r7, [sp, #12]
 80092be:	e7cf      	b.n	8009260 <_lv_disp_refr_timer+0x328>
        sub_area.x1 = area_p->x1;
 80092c0:	f8b6 e030 	ldrh.w	lr, [r6, #48]	; 0x30
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 80092c4:	6809      	ldr	r1, [r1, #0]
 80092c6:	9f05      	ldr	r7, [sp, #20]
        sub_area.x1 = area_p->x1;
 80092c8:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
        sub_area.x2 = area_p->x2;
 80092cc:	f8b6 e034 	ldrh.w	lr, [r6, #52]	; 0x34
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 80092d0:	68c9      	ldr	r1, [r1, #12]
        sub_area.y1 = row;
 80092d2:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 80092d6:	fa1f fb80 	uxth.w	fp, r0
 80092da:	fa17 f080 	uxtah	r0, r7, r0
 80092de:	b200      	sxth	r0, r0
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 80092e0:	4283      	cmp	r3, r0
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 80092e2:	688f      	ldr	r7, [r1, #8]
        sub_area.y2 = row + max_row - 1;
 80092e4:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
        sub_area.x2 = area_p->x2;
 80092e8:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
        draw_ctx->clip_area = &sub_area;
 80092ec:	e9c5 9901 	strd	r9, r9, [r5, #4]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 80092f0:	602f      	str	r7, [r5, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 80092f2:	bfb8      	it	lt
 80092f4:	f8ad 302e 	strhlt.w	r3, [sp, #46]	; 0x2e
        row_last = sub_area.y2;
 80092f8:	f9bd a02e 	ldrsh.w	sl, [sp, #46]	; 0x2e
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 80092fc:	4553      	cmp	r3, sl
 80092fe:	bf02      	ittt	eq
 8009300:	7e08      	ldrbeq	r0, [r1, #24]
 8009302:	f040 0002 	orreq.w	r0, r0, #2
 8009306:	7608      	strbeq	r0, [r1, #24]
        refr_area_part(draw_ctx);
 8009308:	4628      	mov	r0, r5
 800930a:	e9cd 3206 	strd	r3, r2, [sp, #24]
 800930e:	f7ff fadd 	bl	80088cc <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8009312:	9a07      	ldr	r2, [sp, #28]
 8009314:	9b06      	ldr	r3, [sp, #24]
 8009316:	eb02 000b 	add.w	r0, r2, fp
 800931a:	b200      	sxth	r0, r0
 800931c:	e7a8      	b.n	8009270 <_lv_disp_refr_timer+0x338>
 800931e:	bf00      	nop

08009320 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	4604      	mov	r4, r0
    if(th->parent) apply_theme(th->parent, obj);
 8009324:	6840      	ldr	r0, [r0, #4]
{
 8009326:	460d      	mov	r5, r1
    if(th->parent) apply_theme(th->parent, obj);
 8009328:	b108      	cbz	r0, 800932e <apply_theme+0xe>
 800932a:	f7ff fff9 	bl	8009320 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	b123      	cbz	r3, 800933c <apply_theme+0x1c>
 8009332:	4629      	mov	r1, r5
 8009334:	4620      	mov	r0, r4
}
 8009336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(th->apply_cb) th->apply_cb(th, obj);
 800933a:	4718      	bx	r3
}
 800933c:	bd70      	pop	{r4, r5, r6, pc}

0800933e <lv_theme_get_from_obj>:
{
 800933e:	b508      	push	{r3, lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 8009340:	b128      	cbz	r0, 800934e <lv_theme_get_from_obj+0x10>
 8009342:	f7fe fe73 	bl	800802c <lv_obj_get_disp>
}
 8009346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_theme(disp);
 800934a:	f7f9 be78 	b.w	800303e <lv_disp_get_theme>
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800934e:	f009 f809 	bl	8012364 <lv_disp_get_default>
 8009352:	e7f8      	b.n	8009346 <lv_theme_get_from_obj+0x8>

08009354 <lv_theme_apply>:
{
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	4605      	mov	r5, r0
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 8009358:	f7ff fff1 	bl	800933e <lv_theme_get_from_obj>
    if(th == NULL) return;
 800935c:	4604      	mov	r4, r0
 800935e:	b150      	cbz	r0, 8009376 <lv_theme_apply+0x22>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8009360:	4628      	mov	r0, r5
 8009362:	2100      	movs	r1, #0
 8009364:	4a04      	ldr	r2, [pc, #16]	; (8009378 <lv_theme_apply+0x24>)
 8009366:	f7fe fb39 	bl	80079dc <lv_obj_remove_style>
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 800936a:	4629      	mov	r1, r5
 800936c:	4620      	mov	r0, r4
}
 800936e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 8009372:	f7ff bfd5 	b.w	8009320 <apply_theme>
}
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	000fffff 	.word	0x000fffff

0800937c <lv_theme_get_color_primary>:
{
 800937c:	b508      	push	{r3, lr}
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 800937e:	f7ff ffde 	bl	800933e <lv_theme_get_from_obj>
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 8009382:	b920      	cbnz	r0, 800938e <lv_theme_get_color_primary+0x12>
}
 8009384:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 8009388:	2011      	movs	r0, #17
 800938a:	f009 bcd1 	b.w	8012d30 <lv_palette_main>
 800938e:	7c00      	ldrb	r0, [r0, #16]
}
 8009390:	bd08      	pop	{r3, pc}

08009392 <lv_draw_init>:
 **********************/

void lv_draw_init(void)
{
    /*Nothing to init now*/
}
 8009392:	4770      	bx	lr

08009394 <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8009394:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009396:	b103      	cbz	r3, 800939a <lv_draw_wait_for_finish+0x6>
 8009398:	4718      	bx	r3
}
 800939a:	4770      	bx	lr

0800939c <lv_draw_arc_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_arc_dsc_init(lv_draw_arc_dsc_t * dsc)
{
 800939c:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_arc_dsc_t));
 800939e:	2110      	movs	r1, #16
{
 80093a0:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_arc_dsc_t));
 80093a2:	f00a f9aa 	bl	80136fa <lv_memset_00>
    dsc->width = 1;
 80093a6:	2301      	movs	r3, #1
 80093a8:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
 80093aa:	23ff      	movs	r3, #255	; 0xff
 80093ac:	7323      	strb	r3, [r4, #12]
    dsc->color = lv_color_black();
 80093ae:	2300      	movs	r3, #0
 80093b0:	7023      	strb	r3, [r4, #0]
}
 80093b2:	bd10      	pop	{r4, pc}

080093b4 <lv_draw_arc>:

void lv_draw_arc(lv_draw_ctx_t * draw_ctx, const lv_draw_arc_dsc_t * dsc, const lv_point_t * center, uint16_t radius,
                 uint16_t start_angle, uint16_t end_angle)
{
 80093b4:	b4f0      	push	{r4, r5, r6, r7}
    if(dsc->opa <= LV_OPA_MIN) return;
 80093b6:	f891 c00c 	ldrb.w	ip, [r1, #12]
{
 80093ba:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 80093be:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
 80093c2:	f1bc 0f02 	cmp.w	ip, #2
 80093c6:	d90a      	bls.n	80093de <lv_draw_arc+0x2a>
    if(dsc->width == 0) return;
 80093c8:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80093cc:	b13c      	cbz	r4, 80093de <lv_draw_arc+0x2a>
    if(start_angle == end_angle) return;
 80093ce:	42be      	cmp	r6, r7
 80093d0:	d005      	beq.n	80093de <lv_draw_arc+0x2a>

    draw_ctx->draw_arc(draw_ctx, dsc, center, radius, start_angle, end_angle);
 80093d2:	6944      	ldr	r4, [r0, #20]
 80093d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80093d8:	46a4      	mov	ip, r4

    //    const lv_draw_backend_t * backend = lv_draw_backend_get();
    //    backend->draw_arc(center_x, center_y, radius, start_angle, end_angle, clip_area, dsc);
}
 80093da:	bcf0      	pop	{r4, r5, r6, r7}
    draw_ctx->draw_arc(draw_ctx, dsc, center, radius, start_angle, end_angle);
 80093dc:	4760      	bx	ip
}
 80093de:	bcf0      	pop	{r4, r5, r6, r7}
 80093e0:	4770      	bx	lr

080093e2 <lv_draw_arc_get_area>:

void lv_draw_arc_get_area(lv_coord_t x, lv_coord_t y, uint16_t radius,  uint16_t start_angle, uint16_t end_angle,
                          lv_coord_t w, bool rounded, lv_area_t * area)
{
 80093e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e6:	b085      	sub	sp, #20
 80093e8:	461f      	mov	r7, r3
 80093ea:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80093ee:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80093f2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
    lv_coord_t rout = radius;

    /*Special case: full arc invalidation */
    if(end_angle == start_angle + 360) {
 80093f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
{
 80093fa:	4691      	mov	r9, r2
    if(end_angle == start_angle + 360) {
 80093fc:	429d      	cmp	r5, r3
{
 80093fe:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8009402:	4606      	mov	r6, r0
    lv_coord_t rout = radius;
 8009404:	fa0f fb89 	sxth.w	fp, r9
    if(end_angle == start_angle + 360) {
 8009408:	d112      	bne.n	8009430 <lv_draw_arc_get_area+0x4e>
        area->x1 = x - rout;
 800940a:	b2b6      	uxth	r6, r6
 800940c:	eba6 0309 	sub.w	r3, r6, r9
        area->y1 = y - rout;
 8009410:	b289      	uxth	r1, r1
        area->x1 = x - rout;
 8009412:	f8a8 3000 	strh.w	r3, [r8]
        area->x2 = x + rout;
 8009416:	444e      	add	r6, r9
        area->y1 = y - rout;
 8009418:	eba1 0309 	sub.w	r3, r1, r9
        area->y2 = y + rout;
 800941c:	4449      	add	r1, r9
        area->y1 = y - rout;
 800941e:	f8a8 3002 	strh.w	r3, [r8, #2]
        area->x2 = x + rout;
 8009422:	f8a8 6004 	strh.w	r6, [r8, #4]
        area->y2 = y + rout;
 8009426:	f8a8 1006 	strh.w	r1, [r8, #6]
        area->x1 = x - rout;
        area->y1 = y - rout;
        area->x2 = x + rout;
        area->y2 = y + rout;
    }
}
 800942a:	b005      	add	sp, #20
 800942c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(start_angle > 360) start_angle -= 360;
 8009430:	f5b7 7fb4 	cmp.w	r7, #360	; 0x168
 8009434:	bf84      	itt	hi
 8009436:	f5a7 77b4 	subhi.w	r7, r7, #360	; 0x168
 800943a:	b2bf      	uxthhi	r7, r7
    if(end_angle > 360) end_angle -= 360;
 800943c:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 8009440:	bf88      	it	hi
 8009442:	f5a5 75b4 	subhi.w	r5, r5, #360	; 0x168
    lv_coord_t rin = radius - w;
 8009446:	eba9 0a02 	sub.w	sl, r9, r2
    if(end_angle > 360) end_angle -= 360;
 800944a:	bf88      	it	hi
 800944c:	b2ad      	uxthhi	r5, r5
    lv_coord_t rin = radius - w;
 800944e:	fa0f fa8a 	sxth.w	sl, sl
    lv_coord_t extra_area = rounded ? w / 2 + 1 : 0;
 8009452:	b124      	cbz	r4, 800945e <lv_draw_arc_get_area+0x7c>
 8009454:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 8009458:	1064      	asrs	r4, r4, #1
 800945a:	3401      	adds	r4, #1
 800945c:	b224      	sxth	r4, r4
    uint8_t start_quarter = start_angle / 90;
 800945e:	235a      	movs	r3, #90	; 0x5a
 8009460:	fbb7 f2f3 	udiv	r2, r7, r3
 8009464:	b2d2      	uxtb	r2, r2
    if(start_quarter == 4) start_quarter = 3;
 8009466:	2a04      	cmp	r2, #4
    uint8_t end_quarter = end_angle / 90;
 8009468:	fbb5 f3f3 	udiv	r3, r5, r3
 800946c:	b2db      	uxtb	r3, r3
    if(start_quarter == 4) start_quarter = 3;
 800946e:	f000 81d7 	beq.w	8009820 <lv_draw_arc_get_area+0x43e>
    if(end_quarter == 4) end_quarter = 3;
 8009472:	2b04      	cmp	r3, #4
 8009474:	bf08      	it	eq
 8009476:	2303      	moveq	r3, #3
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 8009478:	4293      	cmp	r3, r2
 800947a:	f040 80d7 	bne.w	800962c <lv_draw_arc_get_area+0x24a>
 800947e:	42af      	cmp	r7, r5
 8009480:	f200 80d4 	bhi.w	800962c <lv_draw_arc_get_area+0x24a>
        if(start_quarter == 0) {
 8009484:	bbbb      	cbnz	r3, 80094f6 <lv_draw_arc_get_area+0x114>
            area->y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8009486:	b238      	sxth	r0, r7
 8009488:	9100      	str	r1, [sp, #0]
 800948a:	f009 fe75 	bl	8013178 <lv_trigo_sin>
 800948e:	9900      	ldr	r1, [sp, #0]
 8009490:	b2a4      	uxth	r4, r4
 8009492:	fa1f f981 	uxth.w	r9, r1
 8009496:	eba9 0304 	sub.w	r3, r9, r4
 800949a:	fb00 f00a 	mul.w	r0, r0, sl
 800949e:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 80094a2:	f8a8 0002 	strh.w	r0, [r8, #2]
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80094a6:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 80094aa:	b200      	sxth	r0, r0
 80094ac:	f009 fe64 	bl	8013178 <lv_trigo_sin>
 80094b0:	b2b7      	uxth	r7, r6
 80094b2:	fb00 f00b 	mul.w	r0, r0, fp
 80094b6:	fa14 f686 	uxtah	r6, r4, r6
 80094ba:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 80094be:	f8a8 6004 	strh.w	r6, [r8, #4]
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80094c2:	b228      	sxth	r0, r5
 80094c4:	f009 fe58 	bl	8013178 <lv_trigo_sin>
 80094c8:	eb09 0104 	add.w	r1, r9, r4
 80094cc:	fb0b f000 	mul.w	r0, fp, r0
 80094d0:	eb01 31e0 	add.w	r1, r1, r0, asr #15
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80094d4:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80094d8:	f8a8 1006 	strh.w	r1, [r8, #6]
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80094dc:	b200      	sxth	r0, r0
 80094de:	f009 fe4b 	bl	8013178 <lv_trigo_sin>
 80094e2:	fb0a f000 	mul.w	r0, sl, r0
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80094e6:	1b3c      	subs	r4, r7, r4
 80094e8:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 80094ec:	f8a8 4000 	strh.w	r4, [r8]
 80094f0:	e79b      	b.n	800942a <lv_draw_arc_get_area+0x48>
    if(start_quarter == 4) start_quarter = 3;
 80094f2:	2203      	movs	r2, #3
 80094f4:	e7c0      	b.n	8009478 <lv_draw_arc_get_area+0x96>
        else if(start_quarter == 1) {
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d130      	bne.n	800955c <lv_draw_arc_get_area+0x17a>
            area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80094fa:	b238      	sxth	r0, r7
 80094fc:	9100      	str	r1, [sp, #0]
 80094fe:	f009 fe3b 	bl	8013178 <lv_trigo_sin>
 8009502:	9900      	ldr	r1, [sp, #0]
 8009504:	b2a4      	uxth	r4, r4
 8009506:	fa1f f981 	uxth.w	r9, r1
 800950a:	fb00 f00b 	mul.w	r0, r0, fp
 800950e:	fa14 f181 	uxtah	r1, r4, r1
 8009512:	eb01 31e0 	add.w	r1, r1, r0, asr #15
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8009516:	f107 005a 	add.w	r0, r7, #90	; 0x5a
            area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800951a:	f8a8 1006 	strh.w	r1, [r8, #6]
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800951e:	b200      	sxth	r0, r0
 8009520:	f009 fe2a 	bl	8013178 <lv_trigo_sin>
 8009524:	b2b7      	uxth	r7, r6
 8009526:	fb00 f00a 	mul.w	r0, r0, sl
 800952a:	fa14 f686 	uxtah	r6, r4, r6
 800952e:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8009532:	f8a8 6004 	strh.w	r6, [r8, #4]
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8009536:	b228      	sxth	r0, r5
 8009538:	f009 fe1e 	bl	8013178 <lv_trigo_sin>
 800953c:	eba9 0904 	sub.w	r9, r9, r4
 8009540:	fb0a f000 	mul.w	r0, sl, r0
 8009544:	eb09 39e0 	add.w	r9, r9, r0, asr #15
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8009548:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800954c:	f8a8 9002 	strh.w	r9, [r8, #2]
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8009550:	b200      	sxth	r0, r0
 8009552:	f009 fe11 	bl	8013178 <lv_trigo_sin>
 8009556:	fb0b f000 	mul.w	r0, fp, r0
 800955a:	e7c4      	b.n	80094e6 <lv_draw_arc_get_area+0x104>
        else if(start_quarter == 2) {
 800955c:	2b02      	cmp	r3, #2
 800955e:	d132      	bne.n	80095c6 <lv_draw_arc_get_area+0x1e4>
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8009560:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8009564:	b200      	sxth	r0, r0
 8009566:	9100      	str	r1, [sp, #0]
 8009568:	f009 fe06 	bl	8013178 <lv_trigo_sin>
 800956c:	b2a4      	uxth	r4, r4
 800956e:	b2b6      	uxth	r6, r6
 8009570:	1b33      	subs	r3, r6, r4
 8009572:	fb00 f00b 	mul.w	r0, r0, fp
 8009576:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 800957a:	f8a8 0000 	strh.w	r0, [r8]
            area->y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800957e:	b238      	sxth	r0, r7
 8009580:	f009 fdfa 	bl	8013178 <lv_trigo_sin>
 8009584:	9900      	ldr	r1, [sp, #0]
 8009586:	fb00 f00a 	mul.w	r0, r0, sl
 800958a:	b28f      	uxth	r7, r1
 800958c:	fa14 f181 	uxtah	r1, r4, r1
 8009590:	eb01 31e0 	add.w	r1, r1, r0, asr #15
 8009594:	f8a8 1006 	strh.w	r1, [r8, #6]
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8009598:	b228      	sxth	r0, r5
 800959a:	f009 fded 	bl	8013178 <lv_trigo_sin>
 800959e:	1b3f      	subs	r7, r7, r4
 80095a0:	fb0b f000 	mul.w	r0, fp, r0
 80095a4:	eb07 37e0 	add.w	r7, r7, r0, asr #15
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80095a8:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80095ac:	f8a8 7002 	strh.w	r7, [r8, #2]
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80095b0:	b200      	sxth	r0, r0
 80095b2:	f009 fde1 	bl	8013178 <lv_trigo_sin>
 80095b6:	4426      	add	r6, r4
 80095b8:	fb0a f000 	mul.w	r0, sl, r0
 80095bc:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 80095c0:	f8a8 6004 	strh.w	r6, [r8, #4]
 80095c4:	e731      	b.n	800942a <lv_draw_arc_get_area+0x48>
        else if(start_quarter == 3) {
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	f47f af2f 	bne.w	800942a <lv_draw_arc_get_area+0x48>
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80095cc:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 80095d0:	b200      	sxth	r0, r0
 80095d2:	9100      	str	r1, [sp, #0]
 80095d4:	f009 fdd0 	bl	8013178 <lv_trigo_sin>
 80095d8:	b2a4      	uxth	r4, r4
 80095da:	b2b6      	uxth	r6, r6
 80095dc:	1b33      	subs	r3, r6, r4
 80095de:	fb00 f00a 	mul.w	r0, r0, sl
 80095e2:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 80095e6:	f8a8 0000 	strh.w	r0, [r8]
            area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80095ea:	b238      	sxth	r0, r7
 80095ec:	f009 fdc4 	bl	8013178 <lv_trigo_sin>
 80095f0:	9900      	ldr	r1, [sp, #0]
 80095f2:	b28f      	uxth	r7, r1
 80095f4:	1b3b      	subs	r3, r7, r4
 80095f6:	fb00 f00b 	mul.w	r0, r0, fp
 80095fa:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 80095fe:	f8a8 0002 	strh.w	r0, [r8, #2]
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8009602:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8009606:	b200      	sxth	r0, r0
 8009608:	f009 fdb6 	bl	8013178 <lv_trigo_sin>
 800960c:	4426      	add	r6, r4
 800960e:	fb0b f000 	mul.w	r0, fp, r0
 8009612:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8009616:	f8a8 6004 	strh.w	r6, [r8, #4]
            area->y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800961a:	b228      	sxth	r0, r5
 800961c:	f009 fdac 	bl	8013178 <lv_trigo_sin>
 8009620:	443c      	add	r4, r7
 8009622:	fb0a f000 	mul.w	r0, sl, r0
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8009626:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 800962a:	e040      	b.n	80096ae <lv_draw_arc_get_area+0x2cc>
        area->x1 = x - rout;
 800962c:	b2b0      	uxth	r0, r6
 800962e:	9000      	str	r0, [sp, #0]
        area->y1 = y - rout;
 8009630:	b288      	uxth	r0, r1
 8009632:	9001      	str	r0, [sp, #4]
    else if(start_quarter == 0 && end_quarter == 1) {
 8009634:	2a00      	cmp	r2, #0
 8009636:	d13d      	bne.n	80096b4 <lv_draw_arc_get_area+0x2d2>
 8009638:	2b01      	cmp	r3, #1
 800963a:	f47f aee6 	bne.w	800940a <lv_draw_arc_get_area+0x28>
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800963e:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8009642:	b200      	sxth	r0, r0
 8009644:	f009 fd98 	bl	8013178 <lv_trigo_sin>
 8009648:	9b00      	ldr	r3, [sp, #0]
 800964a:	b2a4      	uxth	r4, r4
 800964c:	1b1b      	subs	r3, r3, r4
 800964e:	fb00 f00b 	mul.w	r0, r0, fp
 8009652:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8009656:	b22b      	sxth	r3, r5
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8009658:	f8a8 0000 	strh.w	r0, [r8]
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 800965c:	4618      	mov	r0, r3
 800965e:	9302      	str	r3, [sp, #8]
 8009660:	f009 fd8a 	bl	8013178 <lv_trigo_sin>
 8009664:	b23d      	sxth	r5, r7
 8009666:	4606      	mov	r6, r0
 8009668:	4628      	mov	r0, r5
 800966a:	f009 fd85 	bl	8013178 <lv_trigo_sin>
 800966e:	4286      	cmp	r6, r0
 8009670:	bfb6      	itet	lt
 8009672:	9b02      	ldrlt	r3, [sp, #8]
 8009674:	4628      	movge	r0, r5
 8009676:	4618      	movlt	r0, r3
 8009678:	f009 fd7e 	bl	8013178 <lv_trigo_sin>
                                lv_trigo_sin(start_angle))  * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800967c:	9b01      	ldr	r3, [sp, #4]
 800967e:	fb00 f00a 	mul.w	r0, r0, sl
 8009682:	eba3 0a04 	sub.w	sl, r3, r4
 8009686:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 800968a:	f8a8 0002 	strh.w	r0, [r8, #2]
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800968e:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8009692:	b200      	sxth	r0, r0
 8009694:	f009 fd70 	bl	8013178 <lv_trigo_sin>
 8009698:	9b00      	ldr	r3, [sp, #0]
 800969a:	fb0b f000 	mul.w	r0, fp, r0
 800969e:	4423      	add	r3, r4
 80096a0:	eb03 3be0 	add.w	fp, r3, r0, asr #15
        area->y2 = y + rout + extra_area;
 80096a4:	9b01      	ldr	r3, [sp, #4]
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80096a6:	f8a8 b004 	strh.w	fp, [r8, #4]
        area->y2 = y + rout + extra_area;
 80096aa:	4499      	add	r9, r3
 80096ac:	444c      	add	r4, r9
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80096ae:	f8a8 4006 	strh.w	r4, [r8, #6]
 80096b2:	e6ba      	b.n	800942a <lv_draw_arc_get_area+0x48>
    else if(start_quarter == 1 && end_quarter == 2) {
 80096b4:	2a01      	cmp	r2, #1
 80096b6:	d137      	bne.n	8009728 <lv_draw_arc_get_area+0x346>
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	f47f aea6 	bne.w	800940a <lv_draw_arc_get_area+0x28>
        area->x1 = x - rout;
 80096be:	9b00      	ldr	r3, [sp, #0]
        area->x1 = x - rout - extra_area;
 80096c0:	b2a4      	uxth	r4, r4
        area->x1 = x - rout;
 80096c2:	eba3 0909 	sub.w	r9, r3, r9
        area->x1 = x - rout - extra_area;
 80096c6:	eba9 0904 	sub.w	r9, r9, r4
 80096ca:	f8a8 9000 	strh.w	r9, [r8]
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80096ce:	b228      	sxth	r0, r5
 80096d0:	f009 fd52 	bl	8013178 <lv_trigo_sin>
 80096d4:	9b01      	ldr	r3, [sp, #4]
 80096d6:	fb00 f00b 	mul.w	r0, r0, fp
 80096da:	1b1b      	subs	r3, r3, r4
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 80096dc:	f107 065a 	add.w	r6, r7, #90	; 0x5a
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80096e0:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 80096e4:	b236      	sxth	r6, r6
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80096e6:	f8a8 0002 	strh.w	r0, [r8, #2]
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 80096ea:	4630      	mov	r0, r6
 80096ec:	f009 fd44 	bl	8013178 <lv_trigo_sin>
 80096f0:	355a      	adds	r5, #90	; 0x5a
 80096f2:	b22d      	sxth	r5, r5
 80096f4:	4681      	mov	r9, r0
 80096f6:	4628      	mov	r0, r5
 80096f8:	f009 fd3e 	bl	8013178 <lv_trigo_sin>
 80096fc:	4581      	cmp	r9, r0
 80096fe:	bfcc      	ite	gt
 8009700:	4630      	movgt	r0, r6
 8009702:	4628      	movle	r0, r5
 8009704:	f009 fd38 	bl	8013178 <lv_trigo_sin>
                                lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8009708:	9b00      	ldr	r3, [sp, #0]
 800970a:	fb00 f00a 	mul.w	r0, r0, sl
 800970e:	4423      	add	r3, r4
 8009710:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8009714:	f8a8 0004 	strh.w	r0, [r8, #4]
        area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8009718:	b238      	sxth	r0, r7
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800971a:	f009 fd2d 	bl	8013178 <lv_trigo_sin>
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	fb0b f000 	mul.w	r0, fp, r0
 8009724:	441c      	add	r4, r3
 8009726:	e77e      	b.n	8009626 <lv_draw_arc_get_area+0x244>
    else if(start_quarter == 2 && end_quarter == 3) {
 8009728:	2a02      	cmp	r2, #2
 800972a:	d141      	bne.n	80097b0 <lv_draw_arc_get_area+0x3ce>
 800972c:	2b03      	cmp	r3, #3
 800972e:	f47f ae6c 	bne.w	800940a <lv_draw_arc_get_area+0x28>
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8009732:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8009736:	b200      	sxth	r0, r0
 8009738:	f009 fd1e 	bl	8013178 <lv_trigo_sin>
 800973c:	9b00      	ldr	r3, [sp, #0]
 800973e:	b2a4      	uxth	r4, r4
 8009740:	1b1b      	subs	r3, r3, r4
 8009742:	fb00 f00b 	mul.w	r0, r0, fp
 8009746:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        area->y1 = y - rout;
 800974a:	9b01      	ldr	r3, [sp, #4]
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800974c:	f8a8 0000 	strh.w	r0, [r8]
        area->y1 = y - rout;
 8009750:	eba3 0909 	sub.w	r9, r3, r9
        area->y1 = y - rout - extra_area;
 8009754:	eba9 0904 	sub.w	r9, r9, r4
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8009758:	f105 005a 	add.w	r0, r5, #90	; 0x5a
        area->y1 = y - rout - extra_area;
 800975c:	f8a8 9002 	strh.w	r9, [r8, #2]
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8009760:	b200      	sxth	r0, r0
 8009762:	f009 fd09 	bl	8013178 <lv_trigo_sin>
 8009766:	9b00      	ldr	r3, [sp, #0]
 8009768:	fb0b f000 	mul.w	r0, fp, r0
 800976c:	eb04 0b03 	add.w	fp, r4, r3
 8009770:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8009774:	b22d      	sxth	r5, r5
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8009776:	f8a8 b004 	strh.w	fp, [r8, #4]
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 800977a:	4628      	mov	r0, r5
 800977c:	f009 fcfc 	bl	8013178 <lv_trigo_sin>
 8009780:	b23f      	sxth	r7, r7
 8009782:	fb00 f60a 	mul.w	r6, r0, sl
 8009786:	4638      	mov	r0, r7
 8009788:	f009 fcf6 	bl	8013178 <lv_trigo_sin>
 800978c:	fb0a f000 	mul.w	r0, sl, r0
 8009790:	4286      	cmp	r6, r0
 8009792:	bfcc      	ite	gt
 8009794:	4628      	movgt	r0, r5
 8009796:	4638      	movle	r0, r7
 8009798:	f009 fcee 	bl	8013178 <lv_trigo_sin>
                               lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800979c:	9b01      	ldr	r3, [sp, #4]
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 800979e:	fb0a f000 	mul.w	r0, sl, r0
 80097a2:	f3c0 30cf 	ubfx	r0, r0, #15, #16
                               lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80097a6:	441c      	add	r4, r3
 80097a8:	4420      	add	r0, r4
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 80097aa:	f8a8 0006 	strh.w	r0, [r8, #6]
 80097ae:	e63c      	b.n	800942a <lv_draw_arc_get_area+0x48>
    else if(start_quarter == 3 && end_quarter == 0) {
 80097b0:	2a03      	cmp	r2, #3
 80097b2:	f47f ae2a 	bne.w	800940a <lv_draw_arc_get_area+0x28>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f47f ae27 	bne.w	800940a <lv_draw_arc_get_area+0x28>
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 80097bc:	f105 035a 	add.w	r3, r5, #90	; 0x5a
 80097c0:	b21b      	sxth	r3, r3
 80097c2:	4618      	mov	r0, r3
 80097c4:	9303      	str	r3, [sp, #12]
 80097c6:	f009 fcd7 	bl	8013178 <lv_trigo_sin>
 80097ca:	f107 065a 	add.w	r6, r7, #90	; 0x5a
 80097ce:	b236      	sxth	r6, r6
 80097d0:	9002      	str	r0, [sp, #8]
 80097d2:	4630      	mov	r0, r6
 80097d4:	f009 fcd0 	bl	8013178 <lv_trigo_sin>
 80097d8:	9a02      	ldr	r2, [sp, #8]
 80097da:	4282      	cmp	r2, r0
 80097dc:	bfb6      	itet	lt
 80097de:	9b03      	ldrlt	r3, [sp, #12]
 80097e0:	4630      	movge	r0, r6
 80097e2:	4618      	movlt	r0, r3
 80097e4:	f009 fcc8 	bl	8013178 <lv_trigo_sin>
                                lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80097e8:	9b00      	ldr	r3, [sp, #0]
 80097ea:	b2a4      	uxth	r4, r4
 80097ec:	fb00 f00a 	mul.w	r0, r0, sl
 80097f0:	eba3 0a04 	sub.w	sl, r3, r4
 80097f4:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 80097f8:	f8a8 0000 	strh.w	r0, [r8]
        area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80097fc:	b238      	sxth	r0, r7
 80097fe:	f009 fcbb 	bl	8013178 <lv_trigo_sin>
 8009802:	9b01      	ldr	r3, [sp, #4]
 8009804:	fb00 f00b 	mul.w	r0, r0, fp
 8009808:	1b1b      	subs	r3, r3, r4
 800980a:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        area->x2 = x + rout + extra_area;
 800980e:	9b00      	ldr	r3, [sp, #0]
        area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8009810:	f8a8 0002 	strh.w	r0, [r8, #2]
        area->x2 = x + rout + extra_area;
 8009814:	4499      	add	r9, r3
 8009816:	44a1      	add	r9, r4
 8009818:	f8a8 9004 	strh.w	r9, [r8, #4]
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800981c:	b228      	sxth	r0, r5
 800981e:	e77c      	b.n	800971a <lv_draw_arc_get_area+0x338>
    if(end_quarter == 4) end_quarter = 3;
 8009820:	2b04      	cmp	r3, #4
 8009822:	f47f ae66 	bne.w	80094f2 <lv_draw_arc_get_area+0x110>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 8009826:	42af      	cmp	r7, r5
 8009828:	f63f adef 	bhi.w	800940a <lv_draw_arc_get_area+0x28>
 800982c:	e6ce      	b.n	80095cc <lv_draw_arc_get_area+0x1ea>

0800982e <show_error>:
    return LV_RES_OK;
}


static void show_error(lv_draw_ctx_t * draw_ctx, const lv_area_t * coords, const char * msg)
{
 800982e:	b530      	push	{r4, r5, lr}
 8009830:	b099      	sub	sp, #100	; 0x64
 8009832:	4604      	mov	r4, r0
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 8009834:	a80c      	add	r0, sp, #48	; 0x30
{
 8009836:	460d      	mov	r5, r1
 8009838:	9203      	str	r2, [sp, #12]
    lv_draw_rect_dsc_init(&rect_dsc);
 800983a:	f001 fce1 	bl	800b200 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 800983e:	2201      	movs	r2, #1
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 8009840:	a90c      	add	r1, sp, #48	; 0x30
    rect_dsc.bg_color = lv_color_white();
 8009842:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 8009846:	4620      	mov	r0, r4
 8009848:	462a      	mov	r2, r5
 800984a:	f001 fcfd 	bl	800b248 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800984e:	a804      	add	r0, sp, #16
 8009850:	f000 f9a2 	bl	8009b98 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 8009854:	2200      	movs	r2, #0
 8009856:	9200      	str	r2, [sp, #0]
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	462a      	mov	r2, r5
 800985c:	a904      	add	r1, sp, #16
 800985e:	4620      	mov	r0, r4
 8009860:	f000 f9b8 	bl	8009bd4 <lv_draw_label>
}
 8009864:	b019      	add	sp, #100	; 0x64
 8009866:	bd30      	pop	{r4, r5, pc}

08009868 <lv_draw_img_dsc_init>:
{
 8009868:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800986a:	2114      	movs	r1, #20
{
 800986c:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800986e:	f009 ff44 	bl	80136fa <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 8009872:	23ff      	movs	r3, #255	; 0xff
 8009874:	72a3      	strb	r3, [r4, #10]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 8009876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800987a:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 800987c:	7c23      	ldrb	r3, [r4, #16]
    dsc->recolor = lv_color_black();
 800987e:	2200      	movs	r2, #0
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8009880:	f362 0300 	bfi	r3, r2, #0, #1
    dsc->recolor = lv_color_black();
 8009884:	7222      	strb	r2, [r4, #8]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8009886:	7423      	strb	r3, [r4, #16]
}
 8009888:	bd10      	pop	{r4, pc}
	...

0800988c <lv_img_cf_get_px_size>:
    switch(cf) {
 800988c:	3804      	subs	r0, #4
 800988e:	b2c0      	uxtb	r0, r0
 8009890:	280a      	cmp	r0, #10
 8009892:	bf9a      	itte	ls
 8009894:	4b01      	ldrls	r3, [pc, #4]	; (800989c <lv_img_cf_get_px_size+0x10>)
 8009896:	5c18      	ldrbls	r0, [r3, r0]
{
 8009898:	2000      	movhi	r0, #0
}
 800989a:	4770      	bx	lr
 800989c:	0801e2d8 	.word	0x0801e2d8

080098a0 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
 80098a0:	2803      	cmp	r0, #3
 80098a2:	d003      	beq.n	80098ac <lv_img_cf_is_chroma_keyed+0xc>
 80098a4:	1f83      	subs	r3, r0, #6
 80098a6:	4258      	negs	r0, r3
 80098a8:	4158      	adcs	r0, r3
 80098aa:	4770      	bx	lr
            is_chroma_keyed = true;
 80098ac:	2001      	movs	r0, #1
}
 80098ae:	4770      	bx	lr

080098b0 <lv_img_cf_has_alpha>:
    switch(cf) {
 80098b0:	280e      	cmp	r0, #14
 80098b2:	d809      	bhi.n	80098c8 <lv_img_cf_has_alpha+0x18>
 80098b4:	2301      	movs	r3, #1
 80098b6:	fa03 f000 	lsl.w	r0, r3, r0
 80098ba:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 80098be:	4218      	tst	r0, r3
 80098c0:	bf14      	ite	ne
 80098c2:	2001      	movne	r0, #1
 80098c4:	2000      	moveq	r0, #0
 80098c6:	4770      	bx	lr
{
 80098c8:	2000      	movs	r0, #0
}
 80098ca:	4770      	bx	lr

080098cc <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 80098cc:	b150      	cbz	r0, 80098e4 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 80098ce:	7803      	ldrb	r3, [r0, #0]
 80098d0:	f1a3 0220 	sub.w	r2, r3, #32
 80098d4:	2a5f      	cmp	r2, #95	; 0x5f
 80098d6:	d907      	bls.n	80098e8 <lv_img_src_get_type+0x1c>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 80098d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80098dc:	bf14      	ite	ne
 80098de:	2002      	movne	r0, #2
 80098e0:	2000      	moveq	r0, #0
 80098e2:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 80098e4:	2003      	movs	r0, #3
 80098e6:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 80098e8:	2001      	movs	r0, #1
}
 80098ea:	4770      	bx	lr

080098ec <lv_draw_img_decoded>:
{
 80098ec:	b430      	push	{r4, r5}
    if(draw_ctx->draw_img_decoded == NULL) return;
 80098ee:	6984      	ldr	r4, [r0, #24]
{
 80098f0:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if(draw_ctx->draw_img_decoded == NULL) return;
 80098f4:	b11c      	cbz	r4, 80098fe <lv_draw_img_decoded+0x12>
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 80098f6:	9502      	str	r5, [sp, #8]
 80098f8:	46a4      	mov	ip, r4
}
 80098fa:	bc30      	pop	{r4, r5}
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 80098fc:	4760      	bx	ip
}
 80098fe:	bc30      	pop	{r4, r5}
 8009900:	4770      	bx	lr
	...

08009904 <lv_draw_img>:
{
 8009904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	ed2d 8b02 	vpush	{d8}
 800990c:	4604      	mov	r4, r0
 800990e:	b08d      	sub	sp, #52	; 0x34
 8009910:	460f      	mov	r7, r1
 8009912:	4616      	mov	r6, r2
    if(src == NULL) {
 8009914:	461d      	mov	r5, r3
 8009916:	b94b      	cbnz	r3, 800992c <lv_draw_img+0x28>
        show_error(draw_ctx, coords, "No\ndata");
 8009918:	4a95      	ldr	r2, [pc, #596]	; (8009b70 <lv_draw_img+0x26c>)
 800991a:	4631      	mov	r1, r6
 800991c:	4620      	mov	r0, r4
}
 800991e:	b00d      	add	sp, #52	; 0x34
 8009920:	ecbd 8b02 	vpop	{d8}
 8009924:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        show_error(draw_ctx, coords, "No\ndata");
 8009928:	f7ff bf81 	b.w	800982e <show_error>
    if(dsc->opa <= LV_OPA_MIN) return;
 800992c:	f891 c00a 	ldrb.w	ip, [r1, #10]
 8009930:	f1bc 0f02 	cmp.w	ip, #2
 8009934:	d936      	bls.n	80099a4 <lv_draw_img+0xa0>
    if(draw_ctx->draw_img) {
 8009936:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800993a:	f1b8 0f00 	cmp.w	r8, #0
 800993e:	d12b      	bne.n	8009998 <lv_draw_img+0x94>
    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 8009940:	4628      	mov	r0, r5
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	7a39      	ldrb	r1, [r7, #8]
 8009946:	f001 fd2d 	bl	800b3a4 <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
 800994a:	4605      	mov	r5, r0
 800994c:	2800      	cmp	r0, #0
 800994e:	d0e3      	beq.n	8009918 <lv_draw_img+0x14>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 8009950:	f890 8014 	ldrb.w	r8, [r0, #20]
 8009954:	f008 021f 	and.w	r2, r8, #31
 8009958:	4610      	mov	r0, r2
 800995a:	f7ff ffa1 	bl	80098a0 <lv_img_cf_is_chroma_keyed>
 800995e:	bb70      	cbnz	r0, 80099be <lv_draw_img+0xba>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 8009960:	2a0e      	cmp	r2, #14
 8009962:	4690      	mov	r8, r2
 8009964:	d023      	beq.n	80099ae <lv_draw_img+0xaa>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 8009966:	2a14      	cmp	r2, #20
 8009968:	d008      	beq.n	800997c <lv_draw_img+0x78>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800996a:	4610      	mov	r0, r2
 800996c:	f7ff ffa0 	bl	80098b0 <lv_img_cf_has_alpha>
    else cf = LV_IMG_CF_TRUE_COLOR;
 8009970:	2800      	cmp	r0, #0
 8009972:	bf14      	ite	ne
 8009974:	f04f 0805 	movne.w	r8, #5
 8009978:	f04f 0804 	moveq.w	r8, #4
    if(cdsc->dec_dsc.error_msg != NULL) {
 800997c:	6a2a      	ldr	r2, [r5, #32]
 800997e:	b30a      	cbz	r2, 80099c4 <lv_draw_img+0xc0>
        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 8009980:	4631      	mov	r1, r6
 8009982:	4620      	mov	r0, r4
 8009984:	f7ff ff53 	bl	800982e <show_error>

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 8009988:	4628      	mov	r0, r5
}
 800998a:	b00d      	add	sp, #52	; 0x34
 800998c:	ecbd 8b02 	vpop	{d8}
 8009990:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_img_decoder_close(&cache->dec_dsc);
 8009994:	f002 b886 	b.w	800baa4 <lv_img_decoder_close>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 8009998:	47c0      	blx	r8
    if(res != LV_RES_OK) {
 800999a:	2801      	cmp	r0, #1
 800999c:	d002      	beq.n	80099a4 <lv_draw_img+0xa0>
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 800999e:	7abb      	ldrb	r3, [r7, #10]
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d8cd      	bhi.n	8009940 <lv_draw_img+0x3c>
}
 80099a4:	b00d      	add	sp, #52	; 0x34
 80099a6:	ecbd 8b02 	vpop	{d8}
 80099aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099b4:	d0e2      	beq.n	800997c <lv_draw_img+0x78>
            cdsc->dec_dsc.img_data = NULL;
 80099b6:	61a8      	str	r0, [r5, #24]
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 80099b8:	f04f 0805 	mov.w	r8, #5
 80099bc:	e7de      	b.n	800997c <lv_draw_img+0x78>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 80099be:	f04f 0806 	mov.w	r8, #6
 80099c2:	e7db      	b.n	800997c <lv_draw_img+0x78>
    else if(cdsc->dec_dsc.img_data) {
 80099c4:	69ab      	ldr	r3, [r5, #24]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d055      	beq.n	8009a76 <lv_draw_img+0x172>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 80099ca:	683b      	ldr	r3, [r7, #0]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
 80099cc:	f9b6 c000 	ldrsh.w	ip, [r6]
    dest->y1 = src->y1;
 80099d0:	f9b6 e002 	ldrsh.w	lr, [r6, #2]
    dest->x2 = src->x2;
 80099d4:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
    dest->y2 = src->y2;
 80099d8:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
    dest->x1 = src->x1;
 80099dc:	f8ad c020 	strh.w	ip, [sp, #32]
 80099e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    dest->y1 = src->y1;
 80099e4:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 80099e8:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 80099ec:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80099f0:	d026      	beq.n	8009a40 <lv_draw_img+0x13c>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 80099f2:	4638      	mov	r0, r7
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80099f4:	3201      	adds	r2, #1
 80099f6:	f930 3b04 	ldrsh.w	r3, [r0], #4
 80099fa:	9001      	str	r0, [sp, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80099fc:	3101      	adds	r1, #1
 80099fe:	8878      	ldrh	r0, [r7, #2]
 8009a00:	9000      	str	r0, [sp, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009a02:	eba2 020e 	sub.w	r2, r2, lr
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009a06:	eba1 010c 	sub.w	r1, r1, ip
 8009a0a:	b212      	sxth	r2, r2
 8009a0c:	b209      	sxth	r1, r1
 8009a0e:	a808      	add	r0, sp, #32
 8009a10:	f001 fc49 	bl	800b2a6 <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 8009a14:	8832      	ldrh	r2, [r6, #0]
 8009a16:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8009a1a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
 8009a1e:	4413      	add	r3, r2
 8009a20:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8009a24:	8873      	ldrh	r3, [r6, #2]
 8009a26:	4419      	add	r1, r3
 8009a28:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
 8009a2c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8009a30:	440a      	add	r2, r1
 8009a32:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
 8009a36:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 8009a40:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8009a44:	68a1      	ldr	r1, [r4, #8]
 8009a46:	aa08      	add	r2, sp, #32
 8009a48:	4648      	mov	r0, r9
 8009a4a:	f008 ff14 	bl	8012876 <_lv_area_intersect>
        if(union_ok == false) {
 8009a4e:	b918      	cbnz	r0, 8009a58 <lv_draw_img+0x154>
    lv_img_decoder_close(&cache->dec_dsc);
 8009a50:	4628      	mov	r0, r5
 8009a52:	f002 f827 	bl	800baa4 <lv_img_decoder_close>
    if(res != LV_RES_OK) {
 8009a56:	e7a5      	b.n	80099a4 <lv_draw_img+0xa0>
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8009a58:	f8cd 8000 	str.w	r8, [sp]
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8009a5c:	f8d4 a008 	ldr.w	sl, [r4, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8009a60:	69ab      	ldr	r3, [r5, #24]
        draw_ctx->clip_area = &clip_com;
 8009a62:	f8c4 9008 	str.w	r9, [r4, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8009a66:	4632      	mov	r2, r6
 8009a68:	4639      	mov	r1, r7
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f7ff ff3e 	bl	80098ec <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 8009a70:	f8c4 a008 	str.w	sl, [r4, #8]
 8009a74:	e788      	b.n	8009988 <lv_draw_img+0x84>
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 8009a76:	68a1      	ldr	r1, [r4, #8]
 8009a78:	4632      	mov	r2, r6
 8009a7a:	a806      	add	r0, sp, #24
 8009a7c:	f008 fefb 	bl	8012876 <_lv_area_intersect>
        if(union_ok == false) {
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d0e5      	beq.n	8009a50 <lv_draw_img+0x14c>
 8009a84:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009a88:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	1a9b      	subs	r3, r3, r2
 8009a90:	b21b      	sxth	r3, r3
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8009a92:	0058      	lsls	r0, r3, #1
 8009a94:	9305      	str	r3, [sp, #20]
 8009a96:	f009 fc97 	bl	80133c8 <lv_mem_buf_get>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8009a9a:	68a3      	ldr	r3, [r4, #8]
 8009a9c:	9303      	str	r3, [sp, #12]
    dest->x1 = src->x1;
 8009a9e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8009aa2:	f8ad 3020 	strh.w	r3, [sp, #32]
    dest->y1 = src->y1;
 8009aa6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8009aaa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        lv_area_set_height(&line, 1);
 8009aae:	f10d 0b20 	add.w	fp, sp, #32
    dest->x2 = src->x2;
 8009ab2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009ab6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8009aba:	2101      	movs	r1, #1
    dest->y2 = src->y2;
 8009abc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009ac0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8009ac4:	4681      	mov	r9, r0
        lv_area_set_height(&line, 1);
 8009ac6:	4658      	mov	r0, fp
 8009ac8:	f008 fea2 	bl	8012810 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 8009acc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8009ad0:	f9b6 2000 	ldrsh.w	r2, [r6]
        int32_t y = mask_com.y1 - coords->y1;
 8009ad4:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8009ad8:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8009adc:	1a9b      	subs	r3, r3, r2
 8009ade:	b21b      	sxth	r3, r3
        int32_t y = mask_com.y1 - coords->y1;
 8009ae0:	ebaa 0101 	sub.w	r1, sl, r1
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8009ae4:	ee08 3a10 	vmov	s16, r3
        int32_t y = mask_com.y1 - coords->y1;
 8009ae8:	9104      	str	r1, [sp, #16]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8009aea:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8009aee:	459a      	cmp	sl, r3
 8009af0:	dd05      	ble.n	8009afe <lv_draw_img+0x1fa>
        draw_ctx->clip_area = clip_area_ori;
 8009af2:	9b03      	ldr	r3, [sp, #12]
 8009af4:	60a3      	str	r3, [r4, #8]
        lv_mem_buf_release(buf);
 8009af6:	4648      	mov	r0, r9
 8009af8:	f009 fcb2 	bl	8013460 <lv_mem_buf_release>
 8009afc:	e744      	b.n	8009988 <lv_draw_img+0x84>
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 8009afe:	9903      	ldr	r1, [sp, #12]
 8009b00:	465a      	mov	r2, fp
 8009b02:	a80a      	add	r0, sp, #40	; 0x28
 8009b04:	f008 feb7 	bl	8012876 <_lv_area_intersect>
            if(union_ok == false) continue;
 8009b08:	b370      	cbz	r0, 8009b68 <lv_draw_img+0x264>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8009b0a:	9b05      	ldr	r3, [sp, #20]
 8009b0c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8009b10:	f8cd 9000 	str.w	r9, [sp]
 8009b14:	ee18 1a10 	vmov	r1, s16
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f001 ffb3 	bl	800ba84 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 8009b1e:	2801      	cmp	r0, #1
 8009b20:	d00b      	beq.n	8009b3a <lv_draw_img+0x236>
                lv_img_decoder_close(&cdsc->dec_dsc);
 8009b22:	4628      	mov	r0, r5
 8009b24:	f001 ffbe 	bl	800baa4 <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 8009b28:	4648      	mov	r0, r9
 8009b2a:	f009 fc99 	bl	8013460 <lv_mem_buf_release>
    lv_img_decoder_close(&cache->dec_dsc);
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f001 ffb8 	bl	800baa4 <lv_img_decoder_close>
                draw_ctx->clip_area = clip_area_ori;
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	60a3      	str	r3, [r4, #8]
    if(res != LV_RES_OK) {
 8009b38:	e6ee      	b.n	8009918 <lv_draw_img+0x14>
            draw_ctx->clip_area = &mask_line;
 8009b3a:	ab0a      	add	r3, sp, #40	; 0x28
 8009b3c:	60a3      	str	r3, [r4, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 8009b3e:	f8cd 8000 	str.w	r8, [sp]
 8009b42:	464b      	mov	r3, r9
 8009b44:	465a      	mov	r2, fp
 8009b46:	4639      	mov	r1, r7
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f7ff fecf 	bl	80098ec <lv_draw_img_decoded>
            line.y1++;
 8009b4e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8009b52:	3301      	adds	r3, #1
 8009b54:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
 8009b58:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            y++;
 8009b62:	9b04      	ldr	r3, [sp, #16]
 8009b64:	3301      	adds	r3, #1
 8009b66:	9304      	str	r3, [sp, #16]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8009b68:	f10a 0a01 	add.w	sl, sl, #1
 8009b6c:	e7bd      	b.n	8009aea <lv_draw_img+0x1e6>
 8009b6e:	bf00      	nop
 8009b70:	0801e2d0 	.word	0x0801e2d0

08009b74 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 8009b74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b09      	cmp	r3, #9
 8009b7c:	d90a      	bls.n	8009b94 <hex_char_to_num+0x20>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 8009b7e:	2860      	cmp	r0, #96	; 0x60
 8009b80:	bf84      	itt	hi
 8009b82:	3820      	subhi	r0, #32
 8009b84:	b2c0      	uxtbhi	r0, r0

        switch(hex) {
 8009b86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b8a:	2b05      	cmp	r3, #5
 8009b8c:	bf9a      	itte	ls
 8009b8e:	3837      	subls	r0, #55	; 0x37
 8009b90:	b2c3      	uxtbls	r3, r0
{
 8009b92:	2300      	movhi	r3, #0
                break;
        }
    }

    return result;
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	4770      	bx	lr

08009b98 <lv_draw_label_dsc_init>:
{
 8009b98:	b538      	push	{r3, r4, r5, lr}
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8009b9a:	2120      	movs	r1, #32
{
 8009b9c:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8009b9e:	f009 fdac 	bl	80136fa <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 8009ba2:	23ff      	movs	r3, #255	; 0xff
 8009ba4:	7623      	strb	r3, [r4, #24]
    dsc->font = LV_FONT_DEFAULT;
 8009ba6:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <lv_draw_label_dsc_init+0x2c>)
 8009ba8:	6023      	str	r3, [r4, #0]
    dsc->color = lv_color_black();
 8009baa:	2500      	movs	r5, #0
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8009bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 8009bb0:	e9c4 3301 	strd	r3, r3, [r4, #4]
    dsc->color = lv_color_black();
 8009bb4:	81a5      	strh	r5, [r4, #12]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8009bb6:	2005      	movs	r0, #5
 8009bb8:	f009 f8ba 	bl	8012d30 <lv_palette_main>
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 8009bbc:	7665      	strb	r5, [r4, #25]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8009bbe:	73a0      	strb	r0, [r4, #14]
}
 8009bc0:	bd38      	pop	{r3, r4, r5, pc}
 8009bc2:	bf00      	nop
 8009bc4:	08020240 	.word	0x08020240

08009bc8 <lv_draw_letter>:
{
 8009bc8:	b410      	push	{r4}
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 8009bca:	6a04      	ldr	r4, [r0, #32]
 8009bcc:	46a4      	mov	ip, r4
}
 8009bce:	f85d 4b04 	ldr.w	r4, [sp], #4
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 8009bd2:	4760      	bx	ip

08009bd4 <lv_draw_label>:
{
 8009bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd8:	ed2d 8b02 	vpush	{d8}
 8009bdc:	b0b3      	sub	sp, #204	; 0xcc
 8009bde:	4682      	mov	sl, r0
 8009be0:	9305      	str	r3, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
 8009be2:	7e0b      	ldrb	r3, [r1, #24]
{
 8009be4:	f8dd 80f8 	ldr.w	r8, [sp, #248]	; 0xf8
    if(dsc->opa <= LV_OPA_MIN) return;
 8009be8:	2b02      	cmp	r3, #2
{
 8009bea:	460c      	mov	r4, r1
 8009bec:	4615      	mov	r5, r2
    if(dsc->opa <= LV_OPA_MIN) return;
 8009bee:	f240 80be 	bls.w	8009d6e <lv_draw_label+0x19a>
    if(dsc->font == NULL) {
 8009bf2:	680f      	ldr	r7, [r1, #0]
 8009bf4:	2f00      	cmp	r7, #0
 8009bf6:	f000 80ba 	beq.w	8009d6e <lv_draw_label+0x19a>
    if(draw_ctx->draw_letter == NULL) {
 8009bfa:	6a03      	ldr	r3, [r0, #32]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 80b6 	beq.w	8009d6e <lv_draw_label+0x19a>
    lv_draw_label_dsc_t dsc_mod = *dsc;
 8009c02:	468c      	mov	ip, r1
 8009c04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c08:	ae1e      	add	r6, sp, #120	; 0x78
 8009c0a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009c0c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8009c10:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    if(txt == NULL || txt[0] == '\0')
 8009c14:	9b05      	ldr	r3, [sp, #20]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 80a9 	beq.w	8009d6e <lv_draw_label+0x19a>
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f000 80a5 	beq.w	8009d6e <lv_draw_label+0x19a>
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 8009c24:	f8da 2008 	ldr.w	r2, [sl, #8]
 8009c28:	4629      	mov	r1, r5
 8009c2a:	a817      	add	r0, sp, #92	; 0x5c
 8009c2c:	f008 fe23 	bl	8012876 <_lv_area_intersect>
    if(!clip_ok) return;
 8009c30:	2800      	cmp	r0, #0
 8009c32:	f000 809c 	beq.w	8009d6e <lv_draw_label+0x19a>
    lv_text_align_t align = dsc->align;
 8009c36:	7ea3      	ldrb	r3, [r4, #26]
 8009c38:	9308      	str	r3, [sp, #32]
    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 8009c3a:	7ee3      	ldrb	r3, [r4, #27]
 8009c3c:	0798      	lsls	r0, r3, #30
 8009c3e:	f100 809b 	bmi.w	8009d78 <lv_draw_label+0x1a4>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009c42:	88ab      	ldrh	r3, [r5, #4]
 8009c44:	882a      	ldrh	r2, [r5, #0]
 8009c46:	3301      	adds	r3, #1
 8009c48:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
 8009c4a:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
 8009c4c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009c50:	9206      	str	r2, [sp, #24]
    int32_t line_height = line_height_font + dsc->line_space;
 8009c52:	9906      	ldr	r1, [sp, #24]
 8009c54:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
    pos.y = coords->y1;
 8009c58:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
    int32_t line_height = line_height_font + dsc->line_space;
 8009c5c:	440a      	add	r2, r1
 8009c5e:	920b      	str	r2, [sp, #44]	; 0x2c
    y_ofs = dsc->ofs_y;
 8009c60:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    pos.x = coords->x1;
 8009c64:	882a      	ldrh	r2, [r5, #0]
 8009c66:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    x_ofs = dsc->ofs_x;
 8009c6a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8009c6e:	9210      	str	r2, [sp, #64]	; 0x40
    pos.y += y_ofs;
 8009c70:	1842      	adds	r2, r0, r1
 8009c72:	b292      	uxth	r2, r2
 8009c74:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8009c78:	f1b8 0f00 	cmp.w	r8, #0
 8009c7c:	f040 808d 	bne.w	8009d9a <lv_draw_label+0x1c6>
    uint32_t line_start     = 0;
 8009c80:	2600      	movs	r6, #0
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8009c82:	b21b      	sxth	r3, r3
 8009c84:	ee08 3a10 	vmov	s16, r3
 8009c88:	9805      	ldr	r0, [sp, #20]
 8009c8a:	7ee3      	ldrb	r3, [r4, #27]
 8009c8c:	9301      	str	r3, [sp, #4]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8009c96:	ee18 3a10 	vmov	r3, s16
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	4430      	add	r0, r6
 8009c9e:	f00b f949 	bl	8014f34 <_lv_txt_get_next_line>
 8009ca2:	eb00 0906 	add.w	r9, r0, r6
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8009ca6:	9a06      	ldr	r2, [sp, #24]
 8009ca8:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8009cac:	4413      	add	r3, r2
 8009cae:	f8da 2008 	ldr.w	r2, [sl, #8]
 8009cb2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009cb6:	4293      	cmp	r3, r2
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8009cb8:	9b05      	ldr	r3, [sp, #20]
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8009cba:	f2c0 808f 	blt.w	8009ddc <lv_draw_label+0x208>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8009cbe:	1998      	adds	r0, r3, r6
    if(align == LV_TEXT_ALIGN_CENTER) {
 8009cc0:	9b08      	ldr	r3, [sp, #32]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	f040 80b8 	bne.w	8009e38 <lv_draw_label+0x264>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8009cc8:	7ee3      	ldrb	r3, [r4, #27]
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	463a      	mov	r2, r7
 8009cce:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8009cd2:	eba9 0106 	sub.w	r1, r9, r6
 8009cd6:	f00b faaf 	bl	8015238 <lv_txt_get_width>
 8009cda:	88ab      	ldrh	r3, [r5, #4]
 8009cdc:	882a      	ldrh	r2, [r5, #0]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8009ce2:	b21b      	sxth	r3, r3
 8009ce4:	1a18      	subs	r0, r3, r0
 8009ce6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8009cea:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8009cee:	eb03 0060 	add.w	r0, r3, r0, asr #1
        pos.x += lv_area_get_width(coords) - line_width;
 8009cf2:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    uint32_t sel_start = dsc->sel_start;
 8009cf6:	6863      	ldr	r3, [r4, #4]
 8009cf8:	9306      	str	r3, [sp, #24]
    uint32_t sel_end = dsc->sel_end;
 8009cfa:	68a3      	ldr	r3, [r4, #8]
 8009cfc:	9307      	str	r3, [sp, #28]
    if(sel_start > sel_end) {
 8009cfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009d02:	4293      	cmp	r3, r2
 8009d04:	bf88      	it	hi
 8009d06:	e9cd 2306 	strdhi	r2, r3, [sp, #24]
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 8009d0a:	7f23      	ldrb	r3, [r4, #28]
 8009d0c:	0799      	lsls	r1, r3, #30
 8009d0e:	d018      	beq.n	8009d42 <lv_draw_label+0x16e>
        lv_draw_line_dsc_init(&line_dsc);
 8009d10:	a81b      	add	r0, sp, #108	; 0x6c
 8009d12:	f000 fa72 	bl	800a1fa <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 8009d16:	7b23      	ldrb	r3, [r4, #12]
 8009d18:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 8009d1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
        line_dsc.blend_mode = dsc->blend_mode;
 8009d20:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bf08      	it	eq
 8009d28:	2301      	moveq	r3, #1
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 8009d2a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        line_dsc.opa = dsc->opa;
 8009d2e:	7e23      	ldrb	r3, [r4, #24]
 8009d30:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
        line_dsc.blend_mode = dsc->blend_mode;
 8009d34:	7f23      	ldrb	r3, [r4, #28]
 8009d36:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8009d3a:	f363 0201 	bfi	r2, r3, #0, #2
 8009d3e:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 8009d42:	a826      	add	r0, sp, #152	; 0x98
 8009d44:	f001 fa5c 	bl	800b200 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 8009d48:	7ba3      	ldrb	r3, [r4, #14]
 8009d4a:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
    while(txt[line_start] != '\0') {
 8009d4e:	f04f 0b00 	mov.w	fp, #0
    int32_t pos_x_start = pos.x;
 8009d52:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8009d56:	930f      	str	r3, [sp, #60]	; 0x3c
    while(txt[line_start] != '\0') {
 8009d58:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    uint32_t par_start = 0;
 8009d5c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    while(txt[line_start] != '\0') {
 8009d60:	9b05      	ldr	r3, [sp, #20]
 8009d62:	4433      	add	r3, r6
 8009d64:	930e      	str	r3, [sp, #56]	; 0x38
 8009d66:	9b05      	ldr	r3, [sp, #20]
 8009d68:	5d9b      	ldrb	r3, [r3, r6]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d17b      	bne.n	8009e66 <lv_draw_label+0x292>
}
 8009d6e:	b033      	add	sp, #204	; 0xcc
 8009d70:	ecbd 8b02 	vpop	{d8}
 8009d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 8009d78:	9302      	str	r3, [sp, #8]
 8009d7a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	6822      	ldr	r2, [r4, #0]
 8009d88:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8009d8c:	9905      	ldr	r1, [sp, #20]
 8009d8e:	a826      	add	r0, sp, #152	; 0x98
 8009d90:	f00b fa94 	bl	80152bc <lv_txt_get_size>
        w = p.x;
 8009d94:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 8009d98:	e758      	b.n	8009c4c <lv_draw_label+0x78>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8009d9a:	2900      	cmp	r1, #0
 8009d9c:	f47f af70 	bne.w	8009c80 <lv_draw_label+0xac>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	f6bf af6d 	bge.w	8009c80 <lv_draw_label+0xac>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8009da6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8009daa:	1a09      	subs	r1, r1, r0
 8009dac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009dae:	2900      	cmp	r1, #0
 8009db0:	bfb8      	it	lt
 8009db2:	4249      	neglt	r1, r1
 8009db4:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8009db8:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
            hint->line_start = -1;
 8009dbc:	bfc4      	itt	gt
 8009dbe:	f04f 31ff 	movgt.w	r1, #4294967295
 8009dc2:	f8c8 1000 	strgt.w	r1, [r8]
        last_line_start = hint->line_start;
 8009dc6:	f8d8 6000 	ldr.w	r6, [r8]
    if(hint && last_line_start >= 0) {
 8009dca:	2e00      	cmp	r6, #0
 8009dcc:	f6ff af58 	blt.w	8009c80 <lv_draw_label+0xac>
        pos.y += hint->y;
 8009dd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009dd4:	440a      	add	r2, r1
 8009dd6:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
 8009dda:	e752      	b.n	8009c82 <lv_draw_label+0xae>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8009ddc:	eb03 0b09 	add.w	fp, r3, r9
 8009de0:	7ee3      	ldrb	r3, [r4, #27]
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	2300      	movs	r3, #0
 8009de6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	4639      	mov	r1, r7
 8009dee:	ee18 3a10 	vmov	r3, s16
 8009df2:	4658      	mov	r0, fp
 8009df4:	f00b f89e 	bl	8014f34 <_lv_txt_get_next_line>
        pos.y += line_height;
 8009df8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8009dfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009dfe:	4413      	add	r3, r2
 8009e00:	b21b      	sxth	r3, r3
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8009e02:	4448      	add	r0, r9
        pos.y += line_height;
 8009e04:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8009e08:	f1b8 0f00 	cmp.w	r8, #0
 8009e0c:	d00d      	beq.n	8009e2a <lv_draw_label+0x256>
 8009e0e:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8009e12:	db0a      	blt.n	8009e2a <lv_draw_label+0x256>
 8009e14:	f8d8 2000 	ldr.w	r2, [r8]
 8009e18:	2a00      	cmp	r2, #0
            hint->y          = pos.y - coords->y1;
 8009e1a:	bfbf      	itttt	lt
 8009e1c:	f9b5 2002 	ldrshlt.w	r2, [r5, #2]
            hint->line_start = line_start;
 8009e20:	f8c8 9000 	strlt.w	r9, [r8]
            hint->y          = pos.y - coords->y1;
 8009e24:	1a9b      	sublt	r3, r3, r2
            hint->coord_y    = coords->y1;
 8009e26:	e9c8 3201 	strdlt	r3, r2, [r8, #4]
        if(txt[line_start] == '\0') return;
 8009e2a:	f89b 3000 	ldrb.w	r3, [fp]
 8009e2e:	464e      	mov	r6, r9
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d09c      	beq.n	8009d6e <lv_draw_label+0x19a>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8009e34:	4681      	mov	r9, r0
 8009e36:	e736      	b.n	8009ca6 <lv_draw_label+0xd2>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8009e38:	9b08      	ldr	r3, [sp, #32]
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	f47f af5b 	bne.w	8009cf6 <lv_draw_label+0x122>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8009e40:	7ee3      	ldrb	r3, [r4, #27]
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	463a      	mov	r2, r7
 8009e46:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8009e4a:	eba9 0106 	sub.w	r1, r9, r6
 8009e4e:	f00b f9f3 	bl	8015238 <lv_txt_get_width>
 8009e52:	88ab      	ldrh	r3, [r5, #4]
 8009e54:	882a      	ldrh	r2, [r5, #0]
 8009e56:	3301      	adds	r3, #1
 8009e58:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 8009e5a:	b21b      	sxth	r3, r3
 8009e5c:	1a18      	subs	r0, r3, r0
 8009e5e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8009e62:	4418      	add	r0, r3
 8009e64:	e745      	b.n	8009cf2 <lv_draw_label+0x11e>
        pos.x += x_ofs;
 8009e66:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8009e6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        i         = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	9314      	str	r3, [sp, #80]	; 0x50
        cmd_state = CMD_STATE_WAIT;
 8009e76:	4698      	mov	r8, r3
        while(i < line_end - line_start) {
 8009e78:	eba9 0306 	sub.w	r3, r9, r6
 8009e7c:	9311      	str	r3, [sp, #68]	; 0x44
 8009e7e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e82:	428b      	cmp	r3, r1
 8009e84:	f200 8087 	bhi.w	8009f96 <lv_draw_label+0x3c2>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 8009e88:	7f23      	ldrb	r3, [r4, #28]
 8009e8a:	079a      	lsls	r2, r3, #30
 8009e8c:	d522      	bpl.n	8009ed4 <lv_draw_label+0x300>
            p1.x = pos_x_start;
 8009e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e90:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8009e94:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
            line_dsc.color = color;
 8009e98:	f88d b06c 	strb.w	fp, [sp, #108]	; 0x6c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8009e9c:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8009ea0:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8009ea4:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8009ea8:	6822      	ldr	r2, [r4, #0]
 8009eaa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8009eae:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8009eb2:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8009eb6:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 8009eb8:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8009ebc:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            p2.x = pos.x;
 8009ec0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
            p2.y = p1.y;
 8009ec4:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8009ec8:	aa16      	add	r2, sp, #88	; 0x58
 8009eca:	ab19      	add	r3, sp, #100	; 0x64
 8009ecc:	a91b      	add	r1, sp, #108	; 0x6c
 8009ece:	4650      	mov	r0, sl
 8009ed0:	f000 f99f 	bl	800a212 <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 8009ed4:	7f23      	ldrb	r3, [r4, #28]
 8009ed6:	07db      	lsls	r3, r3, #31
 8009ed8:	d51d      	bpl.n	8009f16 <lv_draw_label+0x342>
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8009eda:	6822      	ldr	r2, [r4, #0]
            p1.x = pos_x_start;
 8009edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8009ede:	8911      	ldrh	r1, [r2, #8]
            p1.x = pos_x_start;
 8009ee0:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8009ee4:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8009ee8:	8952      	ldrh	r2, [r2, #10]
            line_dsc.color = color;
 8009eea:	f88d b06c 	strb.w	fp, [sp, #108]	; 0x6c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8009eee:	440b      	add	r3, r1
 8009ef0:	1a9b      	subs	r3, r3, r2
 8009ef2:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8009ef6:	1a9b      	subs	r3, r3, r2
 8009ef8:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 8009efa:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8009efe:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            p2.x = pos.x;
 8009f02:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
            p2.y = p1.y;
 8009f06:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8009f0a:	aa16      	add	r2, sp, #88	; 0x58
 8009f0c:	ab19      	add	r3, sp, #100	; 0x64
 8009f0e:	a91b      	add	r1, sp, #108	; 0x6c
 8009f10:	4650      	mov	r0, sl
 8009f12:	f000 f97e 	bl	800a212 <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8009f16:	9b05      	ldr	r3, [sp, #20]
 8009f18:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8009f1c:	eb03 0609 	add.w	r6, r3, r9
 8009f20:	7ee3      	ldrb	r3, [r4, #27]
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	2300      	movs	r3, #0
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	4639      	mov	r1, r7
 8009f2a:	ee18 3a10 	vmov	r3, s16
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f00b f800 	bl	8014f34 <_lv_txt_get_next_line>
        pos.x = coords->x1;
 8009f34:	882b      	ldrh	r3, [r5, #0]
 8009f36:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        if(align == LV_TEXT_ALIGN_CENTER) {
 8009f3a:	9b08      	ldr	r3, [sp, #32]
 8009f3c:	2b02      	cmp	r3, #2
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8009f3e:	4601      	mov	r1, r0
 8009f40:	eb09 0800 	add.w	r8, r9, r0
        if(align == LV_TEXT_ALIGN_CENTER) {
 8009f44:	f040 80eb 	bne.w	800a11e <lv_draw_label+0x54a>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8009f48:	7ee3      	ldrb	r3, [r4, #27]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	463a      	mov	r2, r7
 8009f4e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8009f52:	4630      	mov	r0, r6
 8009f54:	f00b f970 	bl	8015238 <lv_txt_get_width>
 8009f58:	88ab      	ldrh	r3, [r5, #4]
 8009f5a:	882a      	ldrh	r2, [r5, #0]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8009f60:	b21b      	sxth	r3, r3
 8009f62:	1a18      	subs	r0, r3, r0
 8009f64:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8009f68:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8009f6c:	eb03 0060 	add.w	r0, r3, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
 8009f70:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
        pos.y += line_height;
 8009f74:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8009f78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f7a:	4413      	add	r3, r2
        if(pos.y > draw_ctx->clip_area->y2) return;
 8009f7c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8009f80:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
 8009f84:	b21b      	sxth	r3, r3
        if(pos.y > draw_ctx->clip_area->y2) return;
 8009f86:	429a      	cmp	r2, r3
        pos.y += line_height;
 8009f88:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        line_start = line_end;
 8009f8c:	464e      	mov	r6, r9
        if(pos.y > draw_ctx->clip_area->y2) return;
 8009f8e:	f6ff aeee 	blt.w	8009d6e <lv_draw_label+0x19a>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8009f92:	46c1      	mov	r9, r8
 8009f94:	e6e4      	b.n	8009d60 <lv_draw_label+0x18c>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8009f96:	9b06      	ldr	r3, [sp, #24]
 8009f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d01d      	beq.n	8009fdc <lv_draw_label+0x408>
 8009fa0:	9b07      	ldr	r3, [sp, #28]
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d01a      	beq.n	8009fdc <lv_draw_label+0x408>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 8009fa6:	4b69      	ldr	r3, [pc, #420]	; (800a14c <lv_draw_label+0x578>)
 8009fa8:	9805      	ldr	r0, [sp, #20]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4431      	add	r1, r6
 8009fae:	4798      	blx	r3
 8009fb0:	900a      	str	r0, [sp, #40]	; 0x28
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8009fb2:	ab14      	add	r3, sp, #80	; 0x50
 8009fb4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009fb6:	aa16      	add	r2, sp, #88	; 0x58
 8009fb8:	a915      	add	r1, sp, #84	; 0x54
 8009fba:	f00b f923 	bl	8015204 <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8009fbe:	7ee3      	ldrb	r3, [r4, #27]
 8009fc0:	f013 0301 	ands.w	r3, r3, #1
 8009fc4:	f000 80a3 	beq.w	800a10e <lv_draw_label+0x53a>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8009fc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009fca:	2a23      	cmp	r2, #35	; 0x23
 8009fcc:	d113      	bne.n	8009ff6 <lv_draw_label+0x422>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8009fce:	f1b8 0f00 	cmp.w	r8, #0
 8009fd2:	d106      	bne.n	8009fe2 <lv_draw_label+0x40e>
                        par_start = i;
 8009fd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009fd6:	9209      	str	r2, [sp, #36]	; 0x24
                        cmd_state = CMD_STATE_PAR;
 8009fd8:	4698      	mov	r8, r3
                        continue;
 8009fda:	e750      	b.n	8009e7e <lv_draw_label+0x2aa>
            uint32_t logical_char_pos = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	930a      	str	r3, [sp, #40]	; 0x28
 8009fe0:	e7e7      	b.n	8009fb2 <lv_draw_label+0x3de>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 8009fe2:	f1b8 0f01 	cmp.w	r8, #1
 8009fe6:	d04a      	beq.n	800a07e <lv_draw_label+0x4aa>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 8009fe8:	f1b8 0f02 	cmp.w	r8, #2
 8009fec:	f040 808f 	bne.w	800a10e <lv_draw_label+0x53a>
                        cmd_state = CMD_STATE_WAIT;
 8009ff0:	f04f 0800 	mov.w	r8, #0
 8009ff4:	e743      	b.n	8009e7e <lv_draw_label+0x2aa>
                if(cmd_state == CMD_STATE_PAR) {
 8009ff6:	f1b8 0f01 	cmp.w	r8, #1
 8009ffa:	f040 8088 	bne.w	800a10e <lv_draw_label+0x53a>
                    if(letter == ' ') {
 8009ffe:	2a20      	cmp	r2, #32
 800a000:	f47f af3d 	bne.w	8009e7e <lv_draw_label+0x2aa>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800a004:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a008:	1a9b      	subs	r3, r3, r2
 800a00a:	2b07      	cmp	r3, #7
 800a00c:	d135      	bne.n	800a07a <lv_draw_label+0x4a6>
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800a00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800a010:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a012:	5858      	ldr	r0, [r3, r1]
 800a014:	9019      	str	r0, [sp, #100]	; 0x64
 800a016:	189a      	adds	r2, r3, r2
 800a018:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a01c:	f3c0 4807 	ubfx	r8, r0, #16, #8
 800a020:	f3c0 6107 	ubfx	r1, r0, #24, #8
 800a024:	930a      	str	r3, [sp, #40]	; 0x28
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800a026:	b2c0      	uxtb	r0, r0
 800a028:	8893      	ldrh	r3, [r2, #4]
 800a02a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 800a02e:	f7ff fda1 	bl	8009b74 <hex_char_to_num>
 800a032:	4602      	mov	r2, r0
 800a034:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 800a038:	f7ff fd9c 	bl	8009b74 <hex_char_to_num>
 800a03c:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800a040:	fa5f f088 	uxtb.w	r0, r8
 800a044:	f7ff fd96 	bl	8009b74 <hex_char_to_num>
 800a048:	4680      	mov	r8, r0
 800a04a:	b2c8      	uxtb	r0, r1
 800a04c:	f7ff fd92 	bl	8009b74 <hex_char_to_num>
 800a050:	eb00 1108 	add.w	r1, r0, r8, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800a054:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 800a058:	f7ff fd8c 	bl	8009b74 <hex_char_to_num>
 800a05c:	4680      	mov	r8, r0
 800a05e:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
 800a062:	f7ff fd87 	bl	8009b74 <hex_char_to_num>
 800a066:	eb00 1008 	add.w	r0, r0, r8, lsl #4
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800a06a:	4301      	orrs	r1, r0
 800a06c:	430a      	orrs	r2, r1
 800a06e:	f3c2 13c0 	ubfx	r3, r2, #7, #1
                            recolor.full = dsc->color.full;
 800a072:	930c      	str	r3, [sp, #48]	; 0x30
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800a074:	f04f 0802 	mov.w	r8, #2
 800a078:	e701      	b.n	8009e7e <lv_draw_label+0x2aa>
                            recolor.full = dsc->color.full;
 800a07a:	7b23      	ldrb	r3, [r4, #12]
 800a07c:	e7f9      	b.n	800a072 <lv_draw_label+0x49e>
            color = dsc->color;
 800a07e:	f894 b00c 	ldrb.w	fp, [r4, #12]
                        cmd_state = CMD_STATE_WAIT;
 800a082:	f04f 0800 	mov.w	r8, #0
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800a086:	e9dd 1215 	ldrd	r1, r2, [sp, #84]	; 0x54
 800a08a:	4638      	mov	r0, r7
 800a08c:	f007 ff74 	bl	8011f78 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800a090:	9b06      	ldr	r3, [sp, #24]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800a092:	900d      	str	r0, [sp, #52]	; 0x34
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800a094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a098:	4293      	cmp	r3, r2
 800a09a:	d023      	beq.n	800a0e4 <lv_draw_label+0x510>
 800a09c:	9b07      	ldr	r3, [sp, #28]
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d020      	beq.n	800a0e4 <lv_draw_label+0x510>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800a0a2:	9b06      	ldr	r3, [sp, #24]
 800a0a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d81c      	bhi.n	800a0e4 <lv_draw_label+0x510>
 800a0aa:	9b07      	ldr	r3, [sp, #28]
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d919      	bls.n	800a0e4 <lv_draw_label+0x510>
                    sel_coords.x1 = pos.x;
 800a0b0:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800a0b4:	8a61      	ldrh	r1, [r4, #18]
                    sel_coords.x1 = pos.x;
 800a0b6:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	440b      	add	r3, r1
                    sel_coords.y1 = pos.y;
 800a0be:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800a0c2:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800a0c6:	4403      	add	r3, r0
 800a0c8:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                    sel_coords.y2 = pos.y + line_height - 1;
 800a0cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ce:	3a01      	subs	r2, #1
 800a0d0:	441a      	add	r2, r3
 800a0d2:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 800a0d6:	a926      	add	r1, sp, #152	; 0x98
 800a0d8:	aa19      	add	r2, sp, #100	; 0x64
 800a0da:	4650      	mov	r0, sl
 800a0dc:	f001 f8b4 	bl	800b248 <lv_draw_rect>
                    color = dsc->sel_color;
 800a0e0:	f894 b00d 	ldrb.w	fp, [r4, #13]
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 800a0e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
            dsc_mod.color = color;
 800a0e6:	f88d b084 	strb.w	fp, [sp, #132]	; 0x84
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 800a0ea:	aa13      	add	r2, sp, #76	; 0x4c
 800a0ec:	a91e      	add	r1, sp, #120	; 0x78
 800a0ee:	4650      	mov	r0, sl
 800a0f0:	f7ff fd6a 	bl	8009bc8 <lv_draw_letter>
            if(letter_w > 0) {
 800a0f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f43f aec1 	beq.w	8009e7e <lv_draw_label+0x2aa>
                pos.x += letter_w + dsc->letter_space;
 800a0fc:	f8bd 004c 	ldrh.w	r0, [sp, #76]	; 0x4c
 800a100:	8a63      	ldrh	r3, [r4, #18]
 800a102:	4418      	add	r0, r3
 800a104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a106:	4403      	add	r3, r0
 800a108:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800a10c:	e6b7      	b.n	8009e7e <lv_draw_label+0x2aa>
            color = dsc->color;
 800a10e:	f894 b00c 	ldrb.w	fp, [r4, #12]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800a112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a114:	f1b8 0f02 	cmp.w	r8, #2
 800a118:	bf08      	it	eq
 800a11a:	469b      	moveq	fp, r3
 800a11c:	e7b3      	b.n	800a086 <lv_draw_label+0x4b2>
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 800a11e:	9b08      	ldr	r3, [sp, #32]
 800a120:	2b03      	cmp	r3, #3
 800a122:	f47f af27 	bne.w	8009f74 <lv_draw_label+0x3a0>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800a126:	7ee3      	ldrb	r3, [r4, #27]
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	463a      	mov	r2, r7
 800a12c:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800a130:	4630      	mov	r0, r6
 800a132:	f00b f881 	bl	8015238 <lv_txt_get_width>
 800a136:	88ab      	ldrh	r3, [r5, #4]
 800a138:	882a      	ldrh	r2, [r5, #0]
 800a13a:	3301      	adds	r3, #1
 800a13c:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800a13e:	b21b      	sxth	r3, r3
 800a140:	1a18      	subs	r0, r3, r0
 800a142:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a146:	4418      	add	r0, r3
 800a148:	e712      	b.n	8009f70 <lv_draw_label+0x39c>
 800a14a:	bf00      	nop
 800a14c:	20000020 	.word	0x20000020

0800a150 <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	4605      	mov	r5, r0
    if(draw_ctx->layer_init == NULL) return NULL;
 800a154:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
{
 800a156:	460e      	mov	r6, r1
 800a158:	4617      	mov	r7, r2
    if(draw_ctx->layer_init == NULL) return NULL;
 800a15a:	b330      	cbz	r0, 800a1aa <lv_draw_layer_create+0x5a>

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 800a15c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800a15e:	f009 f8e3 	bl	8013328 <lv_mem_alloc>
    LV_ASSERT_MALLOC(layer_ctx);
 800a162:	4604      	mov	r4, r0
 800a164:	b900      	cbnz	r0, 800a168 <lv_draw_layer_create+0x18>
 800a166:	e7fe      	b.n	800a166 <lv_draw_layer_create+0x16>
    if(layer_ctx == NULL) {
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 800a168:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800a16a:	f009 fac6 	bl	80136fa <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800a16e:	f7fe fedd 	bl	8008f2c <_lv_refr_get_disp_refreshing>
    layer_ctx->original.buf = draw_ctx->buf;
 800a172:	682b      	ldr	r3, [r5, #0]
 800a174:	6223      	str	r3, [r4, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 800a176:	686b      	ldr	r3, [r5, #4]
 800a178:	61e3      	str	r3, [r4, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 800a17a:	68ab      	ldr	r3, [r5, #8]
 800a17c:	61a3      	str	r3, [r4, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800a17e:	6803      	ldr	r3, [r0, #0]
    layer_ctx->area_full = *layer_area;
 800a180:	6871      	ldr	r1, [r6, #4]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800a182:	7c1b      	ldrb	r3, [r3, #16]
    layer_ctx->area_full = *layer_area;
 800a184:	6830      	ldr	r0, [r6, #0]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800a186:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a18a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    layer_ctx->area_full = *layer_area;
 800a18e:	4623      	mov	r3, r4
 800a190:	c303      	stmia	r3!, {r0, r1}

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 800a192:	463a      	mov	r2, r7
 800a194:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a196:	4628      	mov	r0, r5
 800a198:	4621      	mov	r1, r4
 800a19a:	4798      	blx	r3
    if(NULL == init_layer_ctx) {
 800a19c:	4605      	mov	r5, r0
 800a19e:	b910      	cbnz	r0, 800a1a6 <lv_draw_layer_create+0x56>
        lv_mem_free(layer_ctx);
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f009 f8df 	bl	8013364 <lv_mem_free>
    }
    return init_layer_ctx;
}
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(draw_ctx->layer_init == NULL) return NULL;
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	e7fb      	b.n	800a1a6 <lv_draw_layer_create+0x56>

0800a1ae <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 800a1ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a1b0:	b103      	cbz	r3, 800a1b4 <lv_draw_layer_adjust+0x6>
 800a1b2:	4718      	bx	r3
}
 800a1b4:	4770      	bx	lr

0800a1b6 <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 800a1b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a1b8:	b103      	cbz	r3, 800a1bc <lv_draw_layer_blend+0x6>
 800a1ba:	4718      	bx	r3
}
 800a1bc:	4770      	bx	lr

0800a1be <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 800a1be:	b538      	push	{r3, r4, r5, lr}
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	4605      	mov	r5, r0

    lv_draw_wait_for_finish(draw_ctx);
 800a1c4:	f7ff f8e6 	bl	8009394 <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 800a1c8:	6a23      	ldr	r3, [r4, #32]
 800a1ca:	602b      	str	r3, [r5, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 800a1cc:	69e3      	ldr	r3, [r4, #28]
 800a1ce:	606b      	str	r3, [r5, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 800a1d0:	69a3      	ldr	r3, [r4, #24]
 800a1d2:	60ab      	str	r3, [r5, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800a1d4:	f7fe feaa 	bl	8008f2c <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 800a1d8:	6803      	ldr	r3, [r0, #0]
 800a1da:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800a1de:	7c1a      	ldrb	r2, [r3, #16]
 800a1e0:	f361 1286 	bfi	r2, r1, #6, #1
 800a1e4:	741a      	strb	r2, [r3, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 800a1e6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800a1e8:	b113      	cbz	r3, 800a1f0 <lv_draw_layer_destroy+0x32>
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 800a1f0:	4620      	mov	r0, r4
}
 800a1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_mem_free(layer_ctx);
 800a1f6:	f009 b8b5 	b.w	8013364 <lv_mem_free>

0800a1fa <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 800a1fa:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800a1fc:	210a      	movs	r1, #10
{
 800a1fe:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800a200:	f009 fa7b 	bl	80136fa <lv_memset_00>
    dsc->width = 1;
 800a204:	2301      	movs	r3, #1
 800a206:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
 800a208:	23ff      	movs	r3, #255	; 0xff
 800a20a:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 800a20c:	2300      	movs	r3, #0
 800a20e:	7023      	strb	r3, [r4, #0]
}
 800a210:	bd10      	pop	{r4, pc}

0800a212 <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 800a212:	b470      	push	{r4, r5, r6}
    if(dsc->width == 0) return;
 800a214:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800a218:	b136      	cbz	r6, 800a228 <lv_draw_line+0x16>
    if(dsc->opa <= LV_OPA_MIN) return;
 800a21a:	7a0c      	ldrb	r4, [r1, #8]
 800a21c:	2c02      	cmp	r4, #2
 800a21e:	d903      	bls.n	800a228 <lv_draw_line+0x16>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 800a220:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a222:	46a4      	mov	ip, r4
}
 800a224:	bc70      	pop	{r4, r5, r6}
    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 800a226:	4760      	bx	ip
}
 800a228:	bc70      	pop	{r4, r5, r6}
 800a22a:	4770      	bx	lr

0800a22c <mask_mix>:
}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800a22c:	29fc      	cmp	r1, #252	; 0xfc
 800a22e:	d80a      	bhi.n	800a246 <mask_mix+0x1a>
    if(mask_new <= LV_OPA_MIN) return 0;
 800a230:	2902      	cmp	r1, #2
 800a232:	d907      	bls.n	800a244 <mask_mix+0x18>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800a234:	fb10 f001 	smulbb	r0, r0, r1
 800a238:	f248 0181 	movw	r1, #32897	; 0x8081
 800a23c:	4348      	muls	r0, r1
 800a23e:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 800a242:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
 800a244:	2000      	movs	r0, #0
}
 800a246:	4770      	bx	lr

0800a248 <lv_draw_mask_line>:
{
 800a248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a24c:	9e08      	ldr	r6, [sp, #32]
    abs_x -= p->origo.x;
 800a24e:	8a77      	ldrh	r7, [r6, #18]
    abs_y -= p->origo.y;
 800a250:	8ab4      	ldrh	r4, [r6, #20]
    abs_x -= p->origo.x;
 800a252:	1bc9      	subs	r1, r1, r7
    abs_y -= p->origo.y;
 800a254:	1b14      	subs	r4, r2, r4
    abs_x -= p->origo.x;
 800a256:	b20f      	sxth	r7, r1
        if(p->flat) {
 800a258:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
    if(p->steep == 0) {
 800a25c:	6a31      	ldr	r1, [r6, #32]
{
 800a25e:	4605      	mov	r5, r0
    abs_y -= p->origo.y;
 800a260:	fa0f fc84 	sxth.w	ip, r4
        if(p->flat) {
 800a264:	f002 0001 	and.w	r0, r2, #1
    if(p->steep == 0) {
 800a268:	bba9      	cbnz	r1, 800a2d6 <lv_draw_mask_line+0x8e>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 800a26a:	7c32      	ldrb	r2, [r6, #16]
 800a26c:	f002 0402 	and.w	r4, r2, #2
        if(p->flat) {
 800a270:	b190      	cbz	r0, 800a298 <lv_draw_mask_line+0x50>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 800a272:	b144      	cbz	r4, 800a286 <lv_draw_mask_line+0x3e>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800a274:	f002 0203 	and.w	r2, r2, #3
 800a278:	2a02      	cmp	r2, #2
 800a27a:	d106      	bne.n	800a28a <lv_draw_mask_line+0x42>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800a27c:	f1bc 3fff 	cmp.w	ip, #4294967295
 800a280:	bfac      	ite	ge
 800a282:	2000      	movge	r0, #0
 800a284:	2001      	movlt	r0, #1
}
 800a286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800a28a:	2a03      	cmp	r2, #3
 800a28c:	d102      	bne.n	800a294 <lv_draw_mask_line+0x4c>
 800a28e:	f1bc 0f00 	cmp.w	ip, #0
 800a292:	dcf8      	bgt.n	800a286 <lv_draw_mask_line+0x3e>
                return LV_DRAW_MASK_RES_TRANSP;
 800a294:	2000      	movs	r0, #0
 800a296:	e7f6      	b.n	800a286 <lv_draw_mask_line+0x3e>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 800a298:	2c00      	cmp	r4, #0
 800a29a:	f040 816c 	bne.w	800a576 <lv_draw_mask_line+0x32e>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800a29e:	f002 0003 	and.w	r0, r2, #3
 800a2a2:	2801      	cmp	r0, #1
 800a2a4:	d10a      	bne.n	800a2bc <lv_draw_mask_line+0x74>
 800a2a6:	2f00      	cmp	r7, #0
 800a2a8:	dced      	bgt.n	800a286 <lv_draw_mask_line+0x3e>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800a2aa:	42df      	cmn	r7, r3
 800a2ac:	d4f2      	bmi.n	800a294 <lv_draw_mask_line+0x4c>
                    if(k < 0) k = 0;
 800a2ae:	2f00      	cmp	r7, #0
 800a2b0:	f300 8163 	bgt.w	800a57a <lv_draw_mask_line+0x332>
                    int32_t k = - abs_x;
 800a2b4:	4279      	negs	r1, r7
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800a2b6:	428b      	cmp	r3, r1
 800a2b8:	ddec      	ble.n	800a294 <lv_draw_mask_line+0x4c>
 800a2ba:	e09d      	b.n	800a3f8 <lv_draw_mask_line+0x1b0>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d1f4      	bne.n	800a2aa <lv_draw_mask_line+0x62>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800a2c0:	18f9      	adds	r1, r7, r3
 800a2c2:	f100 8158 	bmi.w	800a576 <lv_draw_mask_line+0x32e>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 800a2c6:	2f00      	cmp	r7, #0
 800a2c8:	dce4      	bgt.n	800a294 <lv_draw_mask_line+0x4c>
                    int32_t k = - abs_x;
 800a2ca:	4278      	negs	r0, r7
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 800a2cc:	4298      	cmp	r0, r3
 800a2ce:	f2c0 809e 	blt.w	800a40e <lv_draw_mask_line+0x1c6>
    return LV_DRAW_MASK_RES_CHANGED;
 800a2d2:	2002      	movs	r0, #2
 800a2d4:	e7d7      	b.n	800a286 <lv_draw_mask_line+0x3e>
    if(p->flat) {
 800a2d6:	f002 0202 	and.w	r2, r2, #2
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	f000 809b 	beq.w	800a416 <lv_draw_mask_line+0x1ce>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800a2e0:	69f0      	ldr	r0, [r6, #28]
 800a2e2:	fb07 f100 	mul.w	r1, r7, r0
    if(p->yx_steep > 0) {
 800a2e6:	2800      	cmp	r0, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800a2e8:	ea4f 21a1 	mov.w	r1, r1, asr #10
            if(p->inv) {
 800a2ec:	b2d2      	uxtb	r2, r2
    if(p->yx_steep > 0) {
 800a2ee:	dd05      	ble.n	800a2fc <lv_draw_mask_line+0xb4>
        if(y_at_x > abs_y) {
 800a2f0:	458c      	cmp	ip, r1
 800a2f2:	da05      	bge.n	800a300 <lv_draw_mask_line+0xb8>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800a2f4:	1e10      	subs	r0, r2, #0
 800a2f6:	bf18      	it	ne
 800a2f8:	2001      	movne	r0, #1
 800a2fa:	e7c4      	b.n	800a286 <lv_draw_mask_line+0x3e>
        if(y_at_x < abs_y) {
 800a2fc:	458c      	cmp	ip, r1
 800a2fe:	dcf9      	bgt.n	800a2f4 <lv_draw_mask_line+0xac>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800a300:	18f9      	adds	r1, r7, r3
 800a302:	4341      	muls	r1, r0
    if(p->yx_steep > 0) {
 800a304:	2800      	cmp	r0, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800a306:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
 800a30a:	dd05      	ble.n	800a318 <lv_draw_mask_line+0xd0>
        if(y_at_x < abs_y) {
 800a30c:	458c      	cmp	ip, r1
 800a30e:	dd09      	ble.n	800a324 <lv_draw_mask_line+0xdc>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800a310:	fab2 f082 	clz	r0, r2
 800a314:	0940      	lsrs	r0, r0, #5
 800a316:	e7b6      	b.n	800a286 <lv_draw_mask_line+0x3e>
        if(y_at_x > abs_y) {
 800a318:	458c      	cmp	ip, r1
 800a31a:	dbf9      	blt.n	800a310 <lv_draw_mask_line+0xc8>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800a31c:	69b4      	ldr	r4, [r6, #24]
 800a31e:	fb0c 4404 	mla	r4, ip, r4, r4
 800a322:	e002      	b.n	800a32a <lv_draw_mask_line+0xe2>
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 800a324:	69b4      	ldr	r4, [r6, #24]
 800a326:	fb04 f40c 	mul.w	r4, r4, ip
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800a32a:	f344 0495 	sbfx	r4, r4, #2, #22
    int32_t xei = xe >> 8;
 800a32e:	1221      	asrs	r1, r4, #8
    if(xef == 0) px_h = 255;
 800a330:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800a334:	bf1f      	itttt	ne
 800a336:	6a70      	ldrne	r0, [r6, #36]	; 0x24
 800a338:	f1c4 08ff 	rsbne	r8, r4, #255	; 0xff
 800a33c:	fb00 f808 	mulne.w	r8, r0, r8
 800a340:	ea4f 2828 	movne.w	r8, r8, asr #8
 800a344:	bf14      	ite	ne
 800a346:	f1c8 08ff 	rsbne	r8, r8, #255	; 0xff
    if(xef == 0) px_h = 255;
 800a34a:	f04f 08ff 	moveq.w	r8, #255	; 0xff
    int32_t k = xei - abs_x;
 800a34e:	1bcf      	subs	r7, r1, r7
    if(xef) {
 800a350:	2c00      	cmp	r4, #0
 800a352:	d053      	beq.n	800a3fc <lv_draw_mask_line+0x1b4>
        if(k >= 0 && k < len) {
 800a354:	2f00      	cmp	r7, #0
 800a356:	db0f      	blt.n	800a378 <lv_draw_mask_line+0x130>
 800a358:	42bb      	cmp	r3, r7
 800a35a:	dd0d      	ble.n	800a378 <lv_draw_mask_line+0x130>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800a35c:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800a360:	f1c8 01ff 	rsb	r1, r8, #255	; 0xff
 800a364:	4361      	muls	r1, r4
 800a366:	f3c1 2147 	ubfx	r1, r1, #9, #8
            if(p->inv) m = 255 - m;
 800a36a:	b90a      	cbnz	r2, 800a370 <lv_draw_mask_line+0x128>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800a36c:	43c9      	mvns	r1, r1
 800a36e:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800a370:	5de8      	ldrb	r0, [r5, r7]
 800a372:	f7ff ff5b 	bl	800a22c <mask_mix>
 800a376:	55e8      	strb	r0, [r5, r7]
        k++;
 800a378:	1c7a      	adds	r2, r7, #1
    while(px_h > p->spx) {
 800a37a:	6a71      	ldr	r1, [r6, #36]	; 0x24
            if(p->inv) m = 255 - m;
 800a37c:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
    while(px_h > p->spx) {
 800a380:	4588      	cmp	r8, r1
            if(p->inv) m = 255 - m;
 800a382:	f000 0002 	and.w	r0, r0, #2
    while(px_h > p->spx) {
 800a386:	dc18      	bgt.n	800a3ba <lv_draw_mask_line+0x172>
    if(k < len && k >= 0) {
 800a388:	4293      	cmp	r3, r2
 800a38a:	dd2a      	ble.n	800a3e2 <lv_draw_mask_line+0x19a>
 800a38c:	2a00      	cmp	r2, #0
 800a38e:	db28      	blt.n	800a3e2 <lv_draw_mask_line+0x19a>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800a390:	69b1      	ldr	r1, [r6, #24]
        if(p->yx_steep < 0) m = 255 - m;
 800a392:	69f4      	ldr	r4, [r6, #28]
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800a394:	fb01 f108 	mul.w	r1, r1, r8
 800a398:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
 800a39a:	fb08 f101 	mul.w	r1, r8, r1
 800a39e:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 800a3a2:	2c00      	cmp	r4, #0
 800a3a4:	bfbc      	itt	lt
 800a3a6:	43c9      	mvnlt	r1, r1
 800a3a8:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
 800a3aa:	b108      	cbz	r0, 800a3b0 <lv_draw_mask_line+0x168>
 800a3ac:	43c9      	mvns	r1, r1
 800a3ae:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800a3b0:	5ca8      	ldrb	r0, [r5, r2]
 800a3b2:	f7ff ff3b 	bl	800a22c <mask_mix>
 800a3b6:	54a8      	strb	r0, [r5, r2]
 800a3b8:	e013      	b.n	800a3e2 <lv_draw_mask_line+0x19a>
        if(k >= 0 && k < len) {
 800a3ba:	2a00      	cmp	r2, #0
 800a3bc:	db0b      	blt.n	800a3d6 <lv_draw_mask_line+0x18e>
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	dd09      	ble.n	800a3d6 <lv_draw_mask_line+0x18e>
            m = px_h - (p->spx >> 1);
 800a3c2:	eba8 0161 	sub.w	r1, r8, r1, asr #1
 800a3c6:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 800a3c8:	b108      	cbz	r0, 800a3ce <lv_draw_mask_line+0x186>
 800a3ca:	43c9      	mvns	r1, r1
 800a3cc:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800a3ce:	5ca8      	ldrb	r0, [r5, r2]
 800a3d0:	f7ff ff2c 	bl	800a22c <mask_mix>
 800a3d4:	54a8      	strb	r0, [r5, r2]
        px_h -= p->spx;
 800a3d6:	6a71      	ldr	r1, [r6, #36]	; 0x24
        k++;
 800a3d8:	3201      	adds	r2, #1
        if(k >= len) break;
 800a3da:	4293      	cmp	r3, r2
        px_h -= p->spx;
 800a3dc:	eba8 0801 	sub.w	r8, r8, r1
        if(k >= len) break;
 800a3e0:	dccb      	bgt.n	800a37a <lv_draw_mask_line+0x132>
    if(p->inv) {
 800a3e2:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800a3e6:	0789      	lsls	r1, r1, #30
 800a3e8:	d50a      	bpl.n	800a400 <lv_draw_mask_line+0x1b8>
        if(k > len) {
 800a3ea:	42bb      	cmp	r3, r7
 800a3ec:	f6ff af52 	blt.w	800a294 <lv_draw_mask_line+0x4c>
        if(k >= 0) {
 800a3f0:	2f00      	cmp	r7, #0
 800a3f2:	f6ff af6e 	blt.w	800a2d2 <lv_draw_mask_line+0x8a>
            lv_memset_00(&mask_buf[0], k);
 800a3f6:	4639      	mov	r1, r7
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	e009      	b.n	800a410 <lv_draw_mask_line+0x1c8>
    int32_t k = xei - abs_x;
 800a3fc:	463a      	mov	r2, r7
 800a3fe:	e7bc      	b.n	800a37a <lv_draw_mask_line+0x132>
        if(k < 0) {
 800a400:	1c50      	adds	r0, r2, #1
 800a402:	f53f af47 	bmi.w	800a294 <lv_draw_mask_line+0x4c>
        if(k <= len) {
 800a406:	4283      	cmp	r3, r0
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 800a408:	f6ff af63 	blt.w	800a2d2 <lv_draw_mask_line+0x8a>
 800a40c:	1a19      	subs	r1, r3, r0
 800a40e:	4428      	add	r0, r5
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800a410:	f009 f973 	bl	80136fa <lv_memset_00>
 800a414:	e75d      	b.n	800a2d2 <lv_draw_mask_line+0x8a>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800a416:	f8d6 e018 	ldr.w	lr, [r6, #24]
 800a41a:	fb0e f40c 	mul.w	r4, lr, ip
    if(p->xy_steep > 0) x_at_y++;
 800a41e:	f1be 0f00 	cmp.w	lr, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800a422:	ea4f 21a4 	mov.w	r1, r4, asr #10
    if(p->xy_steep > 0) x_at_y++;
 800a426:	bfcc      	ite	gt
 800a428:	1c48      	addgt	r0, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800a42a:	4608      	movle	r0, r1
    if(x_at_y < abs_x) {
 800a42c:	4287      	cmp	r7, r0
            if(p->inv) {
 800a42e:	b2d2      	uxtb	r2, r2
    if(x_at_y < abs_x) {
 800a430:	f73f af60 	bgt.w	800a2f4 <lv_draw_mask_line+0xac>
    if(x_at_y > abs_x + len) {
 800a434:	18f8      	adds	r0, r7, r3
 800a436:	4281      	cmp	r1, r0
 800a438:	f73f af6a 	bgt.w	800a310 <lv_draw_mask_line+0xc8>
    int32_t xsi = xs >> 8;
 800a43c:	f344 2c8d 	sbfx	ip, r4, #10, #14
    int32_t xsf = xs & 0xFF;
 800a440:	f3c4 0187 	ubfx	r1, r4, #2, #8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800a444:	4474      	add	r4, lr
    int32_t xei = xe >> 8;
 800a446:	f344 288d 	sbfx	r8, r4, #10, #14
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800a44a:	45c4      	cmp	ip, r8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800a44c:	ea4f 2004 	mov.w	r0, r4, lsl #8
    k = xsi - abs_x;
 800a450:	ebac 0407 	sub.w	r4, ip, r7
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800a454:	f000 8095 	beq.w	800a582 <lv_draw_mask_line+0x33a>
 800a458:	f1be 0f00 	cmp.w	lr, #0
 800a45c:	da4f      	bge.n	800a4fe <lv_draw_mask_line+0x2b6>
        k--;
 800a45e:	f104 39ff 	add.w	r9, r4, #4294967295
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800a462:	2900      	cmp	r1, #0
 800a464:	f000 808b 	beq.w	800a57e <lv_draw_mask_line+0x336>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800a468:	69f7      	ldr	r7, [r6, #28]
 800a46a:	427f      	negs	r7, r7
 800a46c:	434f      	muls	r7, r1
            if(k >= 0 && k < len) {
 800a46e:	2c00      	cmp	r4, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800a470:	ea4f 27a7 	mov.w	r7, r7, asr #10
            if(k >= 0 && k < len) {
 800a474:	db0b      	blt.n	800a48e <lv_draw_mask_line+0x246>
 800a476:	42a3      	cmp	r3, r4
 800a478:	dd09      	ble.n	800a48e <lv_draw_mask_line+0x246>
                m = (y_inters * xsf) >> 9;
 800a47a:	4379      	muls	r1, r7
 800a47c:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800a480:	b10a      	cbz	r2, 800a486 <lv_draw_mask_line+0x23e>
 800a482:	43c9      	mvns	r1, r1
 800a484:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800a486:	5d28      	ldrb	r0, [r5, r4]
 800a488:	f7ff fed0 	bl	800a22c <mask_mix>
 800a48c:	5528      	strb	r0, [r5, r4]
            if(k >= 0 && k < len) {
 800a48e:	f1b9 0f00 	cmp.w	r9, #0
 800a492:	db16      	blt.n	800a4c2 <lv_draw_mask_line+0x27a>
 800a494:	454b      	cmp	r3, r9
 800a496:	dd14      	ble.n	800a4c2 <lv_draw_mask_line+0x27a>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800a498:	69b2      	ldr	r2, [r6, #24]
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800a49a:	f815 0009 	ldrb.w	r0, [r5, r9]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800a49e:	f1c7 07ff 	rsb	r7, r7, #255	; 0xff
 800a4a2:	4251      	negs	r1, r2
 800a4a4:	4379      	muls	r1, r7
                if(p->inv) m = 255 - m;
 800a4a6:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800a4aa:	1289      	asrs	r1, r1, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800a4ac:	4379      	muls	r1, r7
 800a4ae:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800a4b2:	0797      	lsls	r7, r2, #30
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800a4b4:	bf5c      	itt	pl
 800a4b6:	43c9      	mvnpl	r1, r1
 800a4b8:	b2c9      	uxtbpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800a4ba:	f7ff feb7 	bl	800a22c <mask_mix>
 800a4be:	f805 0009 	strb.w	r0, [r5, r9]
            if(p->inv) {
 800a4c2:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800a4c6:	0796      	lsls	r6, r2, #30
 800a4c8:	d514      	bpl.n	800a4f4 <lv_draw_mask_line+0x2ac>
                if(k > len) k = len;
 800a4ca:	454b      	cmp	r3, r9
 800a4cc:	f6ff af01 	blt.w	800a2d2 <lv_draw_mask_line+0x8a>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 800a4d0:	f1b9 0f00 	cmp.w	r9, #0
 800a4d4:	f77f aefd 	ble.w	800a2d2 <lv_draw_mask_line+0x8a>
 800a4d8:	4649      	mov	r1, r9
 800a4da:	e78d      	b.n	800a3f8 <lv_draw_mask_line+0x1b0>
        k++;
 800a4dc:	3401      	adds	r4, #1
 800a4de:	429c      	cmp	r4, r3
 800a4e0:	bfa8      	it	ge
 800a4e2:	461c      	movge	r4, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800a4e4:	2c00      	cmp	r4, #0
 800a4e6:	f43f aed5 	beq.w	800a294 <lv_draw_mask_line+0x4c>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800a4ea:	f77f aef2 	ble.w	800a2d2 <lv_draw_mask_line+0x8a>
 800a4ee:	1b19      	subs	r1, r3, r4
 800a4f0:	1928      	adds	r0, r5, r4
 800a4f2:	e78d      	b.n	800a410 <lv_draw_mask_line+0x1c8>
            k += 2;
 800a4f4:	1c60      	adds	r0, r4, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800a4f6:	4283      	cmp	r3, r0
 800a4f8:	db3d      	blt.n	800a576 <lv_draw_mask_line+0x32e>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	e784      	b.n	800a408 <lv_draw_mask_line+0x1c0>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800a4fe:	69f0      	ldr	r0, [r6, #28]
 800a500:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 800a504:	4348      	muls	r0, r1
            if(k >= 0 && k < len) {
 800a506:	2c00      	cmp	r4, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800a508:	ea4f 28a0 	mov.w	r8, r0, asr #10
            if(k >= 0 && k < len) {
 800a50c:	db0c      	blt.n	800a528 <lv_draw_mask_line+0x2e0>
 800a50e:	42a3      	cmp	r3, r4
 800a510:	dd0a      	ble.n	800a528 <lv_draw_mask_line+0x2e0>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800a512:	fb08 f101 	mul.w	r1, r8, r1
 800a516:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800a51a:	b90a      	cbnz	r2, 800a520 <lv_draw_mask_line+0x2d8>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800a51c:	43c9      	mvns	r1, r1
 800a51e:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800a520:	5d28      	ldrb	r0, [r5, r4]
 800a522:	f7ff fe83 	bl	800a22c <mask_mix>
 800a526:	5528      	strb	r0, [r5, r4]
            if(k >= 0 && k < len) {
 800a528:	1c67      	adds	r7, r4, #1
 800a52a:	d416      	bmi.n	800a55a <lv_draw_mask_line+0x312>
 800a52c:	42bb      	cmp	r3, r7
 800a52e:	dd14      	ble.n	800a55a <lv_draw_mask_line+0x312>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800a530:	69b2      	ldr	r2, [r6, #24]
 800a532:	f1c8 08ff 	rsb	r8, r8, #255	; 0xff
 800a536:	fb02 f108 	mul.w	r1, r2, r8
 800a53a:	1289      	asrs	r1, r1, #10
                if(p->inv) m = 255 - m;
 800a53c:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
                m = ((255 - y_inters) * x_inters) >> 9;
 800a540:	fb08 f101 	mul.w	r1, r8, r1
                if(p->inv) m = 255 - m;
 800a544:	0790      	lsls	r0, r2, #30
                m = ((255 - y_inters) * x_inters) >> 9;
 800a546:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800a54a:	bf48      	it	mi
 800a54c:	43c9      	mvnmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800a54e:	5de8      	ldrb	r0, [r5, r7]
                if(p->inv) m = 255 - m;
 800a550:	bf48      	it	mi
 800a552:	b2c9      	uxtbmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800a554:	f7ff fe6a 	bl	800a22c <mask_mix>
 800a558:	55e8      	strb	r0, [r5, r7]
            if(p->inv) {
 800a55a:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800a55e:	0792      	lsls	r2, r2, #30
 800a560:	d507      	bpl.n	800a572 <lv_draw_mask_line+0x32a>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 800a562:	42a3      	cmp	r3, r4
 800a564:	f6ff ae96 	blt.w	800a294 <lv_draw_mask_line+0x4c>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 800a568:	2c00      	cmp	r4, #0
 800a56a:	f6ff aeb2 	blt.w	800a2d2 <lv_draw_mask_line+0x8a>
 800a56e:	4621      	mov	r1, r4
 800a570:	e742      	b.n	800a3f8 <lv_draw_mask_line+0x1b0>
            k++;
 800a572:	3402      	adds	r4, #2
 800a574:	e7b3      	b.n	800a4de <lv_draw_mask_line+0x296>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800a576:	2001      	movs	r0, #1
 800a578:	e685      	b.n	800a286 <lv_draw_mask_line+0x3e>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	e69c      	b.n	800a2b8 <lv_draw_mask_line+0x70>
        k--;
 800a57e:	464c      	mov	r4, r9
        xsf = 0xFF;
 800a580:	21ff      	movs	r1, #255	; 0xff
        if(k >= 0 && k < len) {
 800a582:	2c00      	cmp	r4, #0
 800a584:	db0d      	blt.n	800a5a2 <lv_draw_mask_line+0x35a>
 800a586:	42a3      	cmp	r3, r4
 800a588:	dd0b      	ble.n	800a5a2 <lv_draw_mask_line+0x35a>
    int32_t xef = xe & 0xFF;
 800a58a:	f3c0 2087 	ubfx	r0, r0, #10, #8
            m = (xsf + xef) >> 1;
 800a58e:	4401      	add	r1, r0
 800a590:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
 800a594:	b10a      	cbz	r2, 800a59a <lv_draw_mask_line+0x352>
 800a596:	43c9      	mvns	r1, r1
 800a598:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800a59a:	5d28      	ldrb	r0, [r5, r4]
 800a59c:	f7ff fe46 	bl	800a22c <mask_mix>
 800a5a0:	5528      	strb	r0, [r5, r4]
        if(p->inv) {
 800a5a2:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800a5a6:	0792      	lsls	r2, r2, #30
 800a5a8:	d598      	bpl.n	800a4dc <lv_draw_mask_line+0x294>
            k = xsi - abs_x;
 800a5aa:	eba8 0107 	sub.w	r1, r8, r7
            if(k >= len) {
 800a5ae:	428b      	cmp	r3, r1
 800a5b0:	f77f ae70 	ble.w	800a294 <lv_draw_mask_line+0x4c>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	f6ff ae8c 	blt.w	800a2d2 <lv_draw_mask_line+0x8a>
 800a5ba:	e71d      	b.n	800a3f8 <lv_draw_mask_line+0x1b0>

0800a5bc <lv_draw_mask_angle>:
{
 800a5bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a5c2:	4606      	mov	r6, r0
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 800a5c4:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 800a5c8:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 800a5cc:	4691      	mov	r9, r2
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 800a5ce:	eba2 0c00 	sub.w	ip, r2, r0
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 800a5d2:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 800a5d6:	2ab3      	cmp	r2, #179	; 0xb3
{
 800a5d8:	4688      	mov	r8, r1
 800a5da:	461f      	mov	r7, r3
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 800a5dc:	eba1 0104 	sub.w	r1, r1, r4
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 800a5e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5e4:	dc6c      	bgt.n	800a6c0 <lv_draw_mask_angle+0x104>
 800a5e6:	2bb3      	cmp	r3, #179	; 0xb3
 800a5e8:	f300 80cf 	bgt.w	800a78a <lv_draw_mask_angle+0x1ce>
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	f000 80cd 	beq.w	800a78c <lv_draw_mask_angle+0x1d0>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 80cf 	beq.w	800a796 <lv_draw_mask_angle+0x1da>
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	f340 80cc 	ble.w	800a796 <lv_draw_mask_angle+0x1da>
        if(abs_y < p->cfg.vertex_p.y) {
 800a5fe:	4548      	cmp	r0, r9
 800a600:	dd04      	ble.n	800a60c <lv_draw_mask_angle+0x50>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800a602:	2501      	movs	r5, #1
}
 800a604:	4628      	mov	r0, r5
 800a606:	b002      	add	sp, #8
 800a608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800a60c:	6d68      	ldr	r0, [r5, #84]	; 0x54
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800a60e:	6aac      	ldr	r4, [r5, #40]	; 0x28
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800a610:	b292      	uxth	r2, r2
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800a612:	fb00 f00c 	mul.w	r0, r0, ip
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800a616:	fb0c 4404 	mla	r4, ip, r4, r4
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800a61a:	f102 3cff 	add.w	ip, r2, #4294967295
 800a61e:	f1bc 0f59 	cmp.w	ip, #89	; 0x59
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800a622:	ea4f 20a0 	mov.w	r0, r0, asr #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800a626:	ea4f 24a4 	mov.w	r4, r4, asr #10
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800a62a:	d83a      	bhi.n	800a6a2 <lv_draw_mask_angle+0xe6>
 800a62c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800a630:	b29b      	uxth	r3, r3
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800a632:	1e5a      	subs	r2, r3, #1
 800a634:	2a59      	cmp	r2, #89	; 0x59
 800a636:	d83a      	bhi.n	800a6ae <lv_draw_mask_angle+0xf2>
 800a638:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 800a63c:	1b00      	subs	r0, r0, r4
        int32_t tmp = start_angle_last + dist - rel_x;
 800a63e:	eb04 0460 	add.w	r4, r4, r0, asr #1
 800a642:	1a64      	subs	r4, r4, r1
        if(tmp > len) tmp = len;
 800a644:	42bc      	cmp	r4, r7
 800a646:	bfa8      	it	ge
 800a648:	463c      	movge	r4, r7
        if(tmp > 0) {
 800a64a:	2c00      	cmp	r4, #0
 800a64c:	dd35      	ble.n	800a6ba <lv_draw_mask_angle+0xfe>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 800a64e:	f105 0310 	add.w	r3, r5, #16
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	464a      	mov	r2, r9
 800a656:	b223      	sxth	r3, r4
 800a658:	4641      	mov	r1, r8
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7ff fdf4 	bl	800a248 <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 800a660:	4682      	mov	sl, r0
 800a662:	b918      	cbnz	r0, 800a66c <lv_draw_mask_angle+0xb0>
                lv_memset_00(&mask_buf[0], tmp);
 800a664:	4621      	mov	r1, r4
 800a666:	4630      	mov	r0, r6
 800a668:	f009 f847 	bl	80136fa <lv_memset_00>
        if(tmp > len) tmp = len;
 800a66c:	42bc      	cmp	r4, r7
 800a66e:	bfa8      	it	ge
 800a670:	463c      	movge	r4, r7
        if(tmp < 0) tmp = 0;
 800a672:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 800a676:	b2a1      	uxth	r1, r4
 800a678:	1a7b      	subs	r3, r7, r1
 800a67a:	4426      	add	r6, r4
 800a67c:	4441      	add	r1, r8
 800a67e:	353c      	adds	r5, #60	; 0x3c
 800a680:	9500      	str	r5, [sp, #0]
 800a682:	b21b      	sxth	r3, r3
 800a684:	464a      	mov	r2, r9
 800a686:	b209      	sxth	r1, r1
 800a688:	4630      	mov	r0, r6
 800a68a:	f7ff fddd 	bl	800a248 <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 800a68e:	4605      	mov	r5, r0
 800a690:	b918      	cbnz	r0, 800a69a <lv_draw_mask_angle+0xde>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 800a692:	1b39      	subs	r1, r7, r4
 800a694:	4630      	mov	r0, r6
 800a696:	f009 f830 	bl	80136fa <lv_memset_00>
        if(res1 == res2) return res1;
 800a69a:	45aa      	cmp	sl, r5
 800a69c:	d0b2      	beq.n	800a604 <lv_draw_mask_angle+0x48>
        else return LV_DRAW_MASK_RES_CHANGED;
 800a69e:	2502      	movs	r5, #2
 800a6a0:	e7b0      	b.n	800a604 <lv_draw_mask_angle+0x48>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800a6a2:	3a5b      	subs	r2, #91	; 0x5b
 800a6a4:	2ab2      	cmp	r2, #178	; 0xb2
 800a6a6:	bf98      	it	ls
 800a6a8:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800a6ac:	e7c0      	b.n	800a630 <lv_draw_mask_angle+0x74>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800a6ae:	3b5b      	subs	r3, #91	; 0x5b
 800a6b0:	2bb2      	cmp	r3, #178	; 0xb2
 800a6b2:	bf98      	it	ls
 800a6b4:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800a6b8:	e7c0      	b.n	800a63c <lv_draw_mask_angle+0x80>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800a6ba:	f04f 0a01 	mov.w	sl, #1
 800a6be:	e7d5      	b.n	800a66c <lv_draw_mask_angle+0xb0>
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 800a6c0:	2ab4      	cmp	r2, #180	; 0xb4
 800a6c2:	d052      	beq.n	800a76a <lv_draw_mask_angle+0x1ae>
 800a6c4:	2bb4      	cmp	r3, #180	; 0xb4
 800a6c6:	dd73      	ble.n	800a7b0 <lv_draw_mask_angle+0x1f4>
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	dd71      	ble.n	800a7b0 <lv_draw_mask_angle+0x1f4>
        if(abs_y > p->cfg.vertex_p.y) {
 800a6cc:	4548      	cmp	r0, r9
 800a6ce:	db98      	blt.n	800a602 <lv_draw_mask_angle+0x46>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800a6d0:	6d68      	ldr	r0, [r5, #84]	; 0x54
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800a6d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800a6d4:	fb00 f00c 	mul.w	r0, r0, ip
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800a6d8:	fb0c 4404 	mla	r4, ip, r4, r4
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800a6dc:	b292      	uxth	r2, r2
 800a6de:	f46f 7c87 	mvn.w	ip, #270	; 0x10e
 800a6e2:	4494      	add	ip, r2
 800a6e4:	f1bc 0f58 	cmp.w	ip, #88	; 0x58
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800a6e8:	ea4f 20a0 	mov.w	r0, r0, asr #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800a6ec:	ea4f 24a4 	mov.w	r4, r4, asr #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800a6f0:	d82c      	bhi.n	800a74c <lv_draw_mask_angle+0x190>
 800a6f2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	f46f 7287 	mvn.w	r2, #270	; 0x10e
 800a6fc:	189a      	adds	r2, r3, r2
 800a6fe:	2a58      	cmp	r2, #88	; 0x58
 800a700:	d82a      	bhi.n	800a758 <lv_draw_mask_angle+0x19c>
 800a702:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 800a706:	1b00      	subs	r0, r0, r4
        int32_t tmp = start_angle_last + dist - rel_x;
 800a708:	eb04 0460 	add.w	r4, r4, r0, asr #1
 800a70c:	1a64      	subs	r4, r4, r1
        if(tmp > len) tmp = len;
 800a70e:	42bc      	cmp	r4, r7
 800a710:	bfa8      	it	ge
 800a712:	463c      	movge	r4, r7
        if(tmp > 0) {
 800a714:	2c00      	cmp	r4, #0
 800a716:	dd25      	ble.n	800a764 <lv_draw_mask_angle+0x1a8>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 800a718:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	464a      	mov	r2, r9
 800a720:	b223      	sxth	r3, r4
 800a722:	4641      	mov	r1, r8
 800a724:	4630      	mov	r0, r6
 800a726:	f7ff fd8f 	bl	800a248 <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 800a72a:	4682      	mov	sl, r0
 800a72c:	b918      	cbnz	r0, 800a736 <lv_draw_mask_angle+0x17a>
                lv_memset_00(&mask_buf[0], tmp);
 800a72e:	4621      	mov	r1, r4
 800a730:	4630      	mov	r0, r6
 800a732:	f008 ffe2 	bl	80136fa <lv_memset_00>
        if(tmp > len) tmp = len;
 800a736:	42bc      	cmp	r4, r7
 800a738:	bfa8      	it	ge
 800a73a:	463c      	movge	r4, r7
        if(tmp < 0) tmp = 0;
 800a73c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 800a740:	b2a1      	uxth	r1, r4
 800a742:	1a7b      	subs	r3, r7, r1
 800a744:	4426      	add	r6, r4
 800a746:	4441      	add	r1, r8
 800a748:	3510      	adds	r5, #16
 800a74a:	e799      	b.n	800a680 <lv_draw_mask_angle+0xc4>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800a74c:	3a5b      	subs	r2, #91	; 0x5b
 800a74e:	2ab2      	cmp	r2, #178	; 0xb2
 800a750:	bf98      	it	ls
 800a752:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800a756:	e7ce      	b.n	800a6f6 <lv_draw_mask_angle+0x13a>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800a758:	3b5b      	subs	r3, #91	; 0x5b
 800a75a:	2bb2      	cmp	r3, #178	; 0xb2
 800a75c:	bf98      	it	ls
 800a75e:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800a762:	e7d0      	b.n	800a706 <lv_draw_mask_angle+0x14a>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800a764:	f04f 0a01 	mov.w	sl, #1
 800a768:	e7e5      	b.n	800a736 <lv_draw_mask_angle+0x17a>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800a76a:	4548      	cmp	r0, r9
 800a76c:	bfcc      	ite	gt
 800a76e:	2401      	movgt	r4, #1
 800a770:	2403      	movle	r4, #3
        if(p->cfg.end_angle == 180) {
 800a772:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a776:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 800a77a:	2bb4      	cmp	r3, #180	; 0xb4
 800a77c:	d11c      	bne.n	800a7b8 <lv_draw_mask_angle+0x1fc>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800a77e:	4548      	cmp	r0, r9
 800a780:	bfcc      	ite	gt
 800a782:	2003      	movgt	r0, #3
 800a784:	2001      	movle	r0, #1
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800a786:	bb5c      	cbnz	r4, 800a7e0 <lv_draw_mask_angle+0x224>
 800a788:	e02f      	b.n	800a7ea <lv_draw_mask_angle+0x22e>
        else if(p->cfg.start_angle == 0) {
 800a78a:	b922      	cbnz	r2, 800a796 <lv_draw_mask_angle+0x1da>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800a78c:	4548      	cmp	r0, r9
 800a78e:	bfcc      	ite	gt
 800a790:	2403      	movgt	r4, #3
 800a792:	2401      	movle	r4, #1
 800a794:	e7ed      	b.n	800a772 <lv_draw_mask_angle+0x1b6>
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 800a796:	4548      	cmp	r0, r9
 800a798:	dc0c      	bgt.n	800a7b4 <lv_draw_mask_angle+0x1f8>
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 800a79a:	f105 0310 	add.w	r3, r5, #16
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	464a      	mov	r2, r9
 800a7a2:	463b      	mov	r3, r7
 800a7a4:	4641      	mov	r1, r8
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f7ff fd4e 	bl	800a248 <lv_draw_mask_line>
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	e7e0      	b.n	800a772 <lv_draw_mask_angle+0x1b6>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800a7b0:	4548      	cmp	r0, r9
 800a7b2:	dcf2      	bgt.n	800a79a <lv_draw_mask_angle+0x1de>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800a7b4:	2403      	movs	r4, #3
 800a7b6:	e7dc      	b.n	800a772 <lv_draw_mask_angle+0x1b6>
        else if(p->cfg.end_angle == 0) {
 800a7b8:	b923      	cbnz	r3, 800a7c4 <lv_draw_mask_angle+0x208>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800a7ba:	4548      	cmp	r0, r9
 800a7bc:	bfd4      	ite	le
 800a7be:	2003      	movle	r0, #3
 800a7c0:	2001      	movgt	r0, #1
 800a7c2:	e7e0      	b.n	800a786 <lv_draw_mask_angle+0x1ca>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 800a7c4:	2bb3      	cmp	r3, #179	; 0xb3
 800a7c6:	dc12      	bgt.n	800a7ee <lv_draw_mask_angle+0x232>
 800a7c8:	4548      	cmp	r0, r9
 800a7ca:	dc12      	bgt.n	800a7f2 <lv_draw_mask_angle+0x236>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 800a7cc:	353c      	adds	r5, #60	; 0x3c
 800a7ce:	9500      	str	r5, [sp, #0]
 800a7d0:	463b      	mov	r3, r7
 800a7d2:	464a      	mov	r2, r9
 800a7d4:	4641      	mov	r1, r8
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	f7ff fd36 	bl	800a248 <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800a7dc:	b12c      	cbz	r4, 800a7ea <lv_draw_mask_angle+0x22e>
 800a7de:	b120      	cbz	r0, 800a7ea <lv_draw_mask_angle+0x22e>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 800a7e0:	2c03      	cmp	r4, #3
 800a7e2:	d108      	bne.n	800a7f6 <lv_draw_mask_angle+0x23a>
 800a7e4:	2803      	cmp	r0, #3
 800a7e6:	f47f af5a 	bne.w	800a69e <lv_draw_mask_angle+0xe2>
 800a7ea:	2500      	movs	r5, #0
 800a7ec:	e70a      	b.n	800a604 <lv_draw_mask_angle+0x48>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800a7ee:	4548      	cmp	r0, r9
 800a7f0:	dcec      	bgt.n	800a7cc <lv_draw_mask_angle+0x210>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800a7f2:	2003      	movs	r0, #3
 800a7f4:	e7c7      	b.n	800a786 <lv_draw_mask_angle+0x1ca>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 800a7f6:	2c01      	cmp	r4, #1
 800a7f8:	f47f af51 	bne.w	800a69e <lv_draw_mask_angle+0xe2>
 800a7fc:	2801      	cmp	r0, #1
 800a7fe:	f47f af4e 	bne.w	800a69e <lv_draw_mask_angle+0xe2>
 800a802:	e6fe      	b.n	800a602 <lv_draw_mask_angle+0x46>

0800a804 <lv_draw_mask_radius>:
{
 800a804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a808:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a80a:	4606      	mov	r6, r0
    bool outer = p->cfg.outer;
 800a80c:	7cb8      	ldrb	r0, [r7, #18]
    dest->y2 = src->y2;
 800a80e:	f9b7 c00e 	ldrsh.w	ip, [r7, #14]
    if(outer == false) {
 800a812:	f010 0001 	ands.w	r0, r0, #1
{
 800a816:	4689      	mov	r9, r1
 800a818:	461d      	mov	r5, r3
    dest->y1 = src->y1;
 800a81a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
    if(outer == false) {
 800a81e:	d135      	bne.n	800a88c <lv_draw_mask_radius+0x88>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 800a820:	428a      	cmp	r2, r1
 800a822:	da02      	bge.n	800a82a <lv_draw_mask_radius+0x26>
            return LV_DRAW_MASK_RES_TRANSP;
 800a824:	2000      	movs	r0, #0
}
 800a826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 800a82a:	4562      	cmp	r2, ip
 800a82c:	dcfa      	bgt.n	800a824 <lv_draw_mask_radius+0x20>
    dest->x1 = src->x1;
 800a82e:	f9b7 e008 	ldrsh.w	lr, [r7, #8]
    int32_t radius = p->cfg.radius;
 800a832:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    dest->x2 = src->x2;
 800a836:	f9b7 800c 	ldrsh.w	r8, [r7, #12]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800a83a:	eb0e 030a 	add.w	r3, lr, sl
 800a83e:	4599      	cmp	r9, r3
 800a840:	ebae 0409 	sub.w	r4, lr, r9
 800a844:	db05      	blt.n	800a852 <lv_draw_mask_radius+0x4e>
 800a846:	eb09 0305 	add.w	r3, r9, r5
 800a84a:	eba8 0b0a 	sub.w	fp, r8, sl
 800a84e:	455b      	cmp	r3, fp
 800a850:	dd07      	ble.n	800a862 <lv_draw_mask_radius+0x5e>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800a852:	eb01 030a 	add.w	r3, r1, sl
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800a856:	429a      	cmp	r2, r3
 800a858:	db33      	blt.n	800a8c2 <lv_draw_mask_radius+0xbe>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800a85a:	ebac 030a 	sub.w	r3, ip, sl
 800a85e:	429a      	cmp	r2, r3
 800a860:	dc2f      	bgt.n	800a8c2 <lv_draw_mask_radius+0xbe>
        if(outer == false) {
 800a862:	b9f8      	cbnz	r0, 800a8a4 <lv_draw_mask_radius+0xa0>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 800a864:	42a5      	cmp	r5, r4
 800a866:	dbdd      	blt.n	800a824 <lv_draw_mask_radius+0x20>
            if(last >= 0) {
 800a868:	2c00      	cmp	r4, #0
 800a86a:	db03      	blt.n	800a874 <lv_draw_mask_radius+0x70>
                lv_memset_00(&mask_buf[0], last);
 800a86c:	4621      	mov	r1, r4
 800a86e:	4630      	mov	r0, r6
 800a870:	f008 ff43 	bl	80136fa <lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
 800a874:	eba8 0109 	sub.w	r1, r8, r9
 800a878:	1c48      	adds	r0, r1, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 800a87a:	2800      	cmp	r0, #0
 800a87c:	ddd2      	ble.n	800a824 <lv_draw_mask_radius+0x20>
            else if(first < len) {
 800a87e:	4285      	cmp	r5, r0
 800a880:	dd0b      	ble.n	800a89a <lv_draw_mask_radius+0x96>
                lv_memset_00(&mask_buf[first], len - first);
 800a882:	1a29      	subs	r1, r5, r0
                    lv_memset_00(&mask_buf[first], last);
 800a884:	4430      	add	r0, r6
        lv_memset_00(&mask_buf[clr_start], clr_len);
 800a886:	f008 ff38 	bl	80136fa <lv_memset_00>
 800a88a:	e009      	b.n	800a8a0 <lv_draw_mask_radius+0x9c>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800a88c:	428a      	cmp	r2, r1
 800a88e:	da01      	bge.n	800a894 <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800a890:	2001      	movs	r0, #1
 800a892:	e7c8      	b.n	800a826 <lv_draw_mask_radius+0x22>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800a894:	4562      	cmp	r2, ip
 800a896:	ddca      	ble.n	800a82e <lv_draw_mask_radius+0x2a>
 800a898:	e7fa      	b.n	800a890 <lv_draw_mask_radius+0x8c>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800a89a:	b90c      	cbnz	r4, 800a8a0 <lv_draw_mask_radius+0x9c>
 800a89c:	4285      	cmp	r5, r0
 800a89e:	d0f7      	beq.n	800a890 <lv_draw_mask_radius+0x8c>
    return LV_DRAW_MASK_RES_CHANGED;
 800a8a0:	2002      	movs	r0, #2
 800a8a2:	e7c0      	b.n	800a826 <lv_draw_mask_radius+0x22>
            if(first < 0) first = 0;
 800a8a4:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
            if(first <= len) {
 800a8a8:	42a8      	cmp	r0, r5
 800a8aa:	dcf9      	bgt.n	800a8a0 <lv_draw_mask_radius+0x9c>
                int32_t last = rect.x2 - abs_x - first + 1;
 800a8ac:	eba8 0109 	sub.w	r1, r8, r9
 800a8b0:	1a09      	subs	r1, r1, r0
 800a8b2:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 800a8b4:	1843      	adds	r3, r0, r1
 800a8b6:	42ab      	cmp	r3, r5
 800a8b8:	bfc8      	it	gt
 800a8ba:	1a29      	subgt	r1, r5, r0
                if(last >= 0) {
 800a8bc:	2900      	cmp	r1, #0
 800a8be:	dbef      	blt.n	800a8a0 <lv_draw_mask_radius+0x9c>
 800a8c0:	e7e0      	b.n	800a884 <lv_draw_mask_radius+0x80>
    abs_y -= rect.y1;
 800a8c2:	b292      	uxth	r2, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a8c4:	b289      	uxth	r1, r1
 800a8c6:	f108 0301 	add.w	r3, r8, #1
 800a8ca:	eba2 0b01 	sub.w	fp, r2, r1
        cir_y = radius - abs_y - 1;
 800a8ce:	fa1f f98a 	uxth.w	r9, sl
 800a8d2:	eba3 030e 	sub.w	r3, r3, lr
 800a8d6:	fa1f f883 	uxth.w	r8, r3
    abs_y -= rect.y1;
 800a8da:	f109 3eff 	add.w	lr, r9, #4294967295
 800a8de:	fa1f f38b 	uxth.w	r3, fp
    if(abs_y < radius) {
 800a8e2:	fa0f fb8b 	sxth.w	fp, fp
 800a8e6:	45da      	cmp	sl, fp
        cir_y = radius - abs_y - 1;
 800a8e8:	fa1f fe8e 	uxth.w	lr, lr
        cir_y = abs_y - (h - radius);
 800a8ec:	bfd5      	itete	le
 800a8ee:	4473      	addle	r3, lr
        cir_y = radius - abs_y - 1;
 800a8f0:	eb01 0309 	addgt.w	r3, r1, r9
        cir_y = abs_y - (h - radius);
 800a8f4:	185b      	addle	r3, r3, r1
        cir_y = radius - abs_y - 1;
 800a8f6:	43d2      	mvngt	r2, r2
        cir_y = abs_y - (h - radius);
 800a8f8:	bfd8      	it	le
 800a8fa:	eba3 030c 	suble.w	r3, r3, ip
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 800a8fe:	f8d7 a014 	ldr.w	sl, [r7, #20]
        cir_y = radius - abs_y - 1;
 800a902:	bfc6      	itte	gt
 800a904:	18d2      	addgt	r2, r2, r3
 800a906:	b213      	sxthgt	r3, r2
        cir_y = abs_y - (h - radius);
 800a908:	b21b      	sxthle	r3, r3
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 800a90a:	f8da 200c 	ldr.w	r2, [sl, #12]
 800a90e:	1c59      	adds	r1, r3, #1
 800a910:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
 800a914:	f832 7011 	ldrh.w	r7, [r2, r1, lsl #1]
    *x_start = c->x_start_on_y[y];
 800a918:	f8da 2008 	ldr.w	r2, [sl, #8]
 800a91c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    return &c->cir_opa[c->opa_start_on_y[y]];
 800a920:	f8da 3004 	ldr.w	r3, [sl, #4]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 800a924:	eba7 070c 	sub.w	r7, r7, ip
    return &c->cir_opa[c->opa_start_on_y[y]];
 800a928:	449c      	add	ip, r3
    lv_coord_t cir_x_right = k + w - radius + x_start;
 800a92a:	eba8 0309 	sub.w	r3, r8, r9
 800a92e:	fa13 f384 	uxtah	r3, r3, r4
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 800a932:	fa1e f484 	uxtah	r4, lr, r4
    lv_coord_t cir_x_right = k + w - radius + x_start;
 800a936:	440b      	add	r3, r1
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 800a938:	1a64      	subs	r4, r4, r1
    lv_coord_t cir_x_right = k + w - radius + x_start;
 800a93a:	b29a      	uxth	r2, r3
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 800a93c:	b23f      	sxth	r7, r7
    lv_coord_t cir_x_right = k + w - radius + x_start;
 800a93e:	b21b      	sxth	r3, r3
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 800a940:	b224      	sxth	r4, r4
    if(outer == false) {
 800a942:	b1b0      	cbz	r0, 800a972 <lv_draw_mask_radius+0x16e>
 800a944:	f107 3bff 	add.w	fp, r7, #4294967295
 800a948:	44e3      	add	fp, ip
 800a94a:	4699      	mov	r9, r3
 800a94c:	46a0      	mov	r8, r4
        for(i = 0; i < aa_len; i++) {
 800a94e:	eba4 0108 	sub.w	r1, r4, r8
 800a952:	b209      	sxth	r1, r1
 800a954:	428f      	cmp	r7, r1
 800a956:	dc44      	bgt.n	800a9e2 <lv_draw_mask_radius+0x1de>
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 800a958:	3401      	adds	r4, #1
 800a95a:	42ac      	cmp	r4, r5
 800a95c:	bfa8      	it	ge
 800a95e:	462c      	movge	r4, r5
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 800a960:	429d      	cmp	r5, r3
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 800a962:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 800a966:	dd5f      	ble.n	800aa28 <lv_draw_mask_radius+0x224>
 800a968:	1b1b      	subs	r3, r3, r4
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	db61      	blt.n	800aa32 <lv_draw_mask_radius+0x22e>
 800a96e:	1b11      	subs	r1, r2, r4
 800a970:	e05c      	b.n	800aa2c <lv_draw_mask_radius+0x228>
 800a972:	eb0c 0907 	add.w	r9, ip, r7
 800a976:	4698      	mov	r8, r3
    if(outer == false) {
 800a978:	4622      	mov	r2, r4
        for(i = 0; i < aa_len; i++) {
 800a97a:	1aa1      	subs	r1, r4, r2
 800a97c:	b209      	sxth	r1, r1
 800a97e:	42b9      	cmp	r1, r7
 800a980:	db14      	blt.n	800a9ac <lv_draw_mask_radius+0x1a8>
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 800a982:	2f00      	cmp	r7, #0
 800a984:	bfa8      	it	ge
 800a986:	19db      	addge	r3, r3, r7
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 800a988:	42ab      	cmp	r3, r5
 800a98a:	bfa8      	it	ge
 800a98c:	462b      	movge	r3, r5
 800a98e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 800a992:	1ae9      	subs	r1, r5, r3
 800a994:	18f0      	adds	r0, r6, r3
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 800a996:	1be4      	subs	r4, r4, r7
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 800a998:	f008 feaf 	bl	80136fa <lv_memset_00>
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 800a99c:	1c61      	adds	r1, r4, #1
 800a99e:	42a9      	cmp	r1, r5
 800a9a0:	bfa8      	it	ge
 800a9a2:	4629      	movge	r1, r5
        lv_memset_00(&mask_buf[0], cir_x_left);
 800a9a4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	e76c      	b.n	800a886 <lv_draw_mask_radius+0x82>
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 800a9ac:	f1b8 0f00 	cmp.w	r8, #0
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 800a9b0:	f819 ad01 	ldrb.w	sl, [r9, #-1]!
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 800a9b4:	db08      	blt.n	800a9c8 <lv_draw_mask_radius+0x1c4>
 800a9b6:	45a8      	cmp	r8, r5
 800a9b8:	da06      	bge.n	800a9c8 <lv_draw_mask_radius+0x1c4>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 800a9ba:	f816 1008 	ldrb.w	r1, [r6, r8]
 800a9be:	4650      	mov	r0, sl
 800a9c0:	f7ff fc34 	bl	800a22c <mask_mix>
 800a9c4:	f806 0008 	strb.w	r0, [r6, r8]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 800a9c8:	2a00      	cmp	r2, #0
 800a9ca:	db06      	blt.n	800a9da <lv_draw_mask_radius+0x1d6>
 800a9cc:	42aa      	cmp	r2, r5
 800a9ce:	da04      	bge.n	800a9da <lv_draw_mask_radius+0x1d6>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 800a9d0:	5cb1      	ldrb	r1, [r6, r2]
 800a9d2:	4650      	mov	r0, sl
 800a9d4:	f7ff fc2a 	bl	800a22c <mask_mix>
 800a9d8:	54b0      	strb	r0, [r6, r2]
        for(i = 0; i < aa_len; i++) {
 800a9da:	3a01      	subs	r2, #1
 800a9dc:	f108 0801 	add.w	r8, r8, #1
 800a9e0:	e7cb      	b.n	800a97a <lv_draw_mask_radius+0x176>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 800a9e2:	f81b a901 	ldrb.w	sl, [fp], #-1
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 800a9e6:	f1b9 0f00 	cmp.w	r9, #0
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 800a9ea:	ea6f 0a0a 	mvn.w	sl, sl
 800a9ee:	fa5f fa8a 	uxtb.w	sl, sl
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 800a9f2:	db08      	blt.n	800aa06 <lv_draw_mask_radius+0x202>
 800a9f4:	45a9      	cmp	r9, r5
 800a9f6:	da06      	bge.n	800aa06 <lv_draw_mask_radius+0x202>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 800a9f8:	f816 1009 	ldrb.w	r1, [r6, r9]
 800a9fc:	4650      	mov	r0, sl
 800a9fe:	f7ff fc15 	bl	800a22c <mask_mix>
 800aa02:	f806 0009 	strb.w	r0, [r6, r9]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 800aa06:	f1b8 0f00 	cmp.w	r8, #0
 800aa0a:	db08      	blt.n	800aa1e <lv_draw_mask_radius+0x21a>
 800aa0c:	4545      	cmp	r5, r8
 800aa0e:	dd06      	ble.n	800aa1e <lv_draw_mask_radius+0x21a>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 800aa10:	f816 1008 	ldrb.w	r1, [r6, r8]
 800aa14:	4650      	mov	r0, sl
 800aa16:	f7ff fc09 	bl	800a22c <mask_mix>
 800aa1a:	f806 0008 	strb.w	r0, [r6, r8]
        for(i = 0; i < aa_len; i++) {
 800aa1e:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa22:	f109 0901 	add.w	r9, r9, #1
 800aa26:	e792      	b.n	800a94e <lv_draw_mask_radius+0x14a>
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 800aa28:	1b29      	subs	r1, r5, r4
 800aa2a:	d402      	bmi.n	800aa32 <lv_draw_mask_radius+0x22e>
 800aa2c:	b209      	sxth	r1, r1
        lv_memset_00(&mask_buf[clr_start], clr_len);
 800aa2e:	1930      	adds	r0, r6, r4
 800aa30:	e729      	b.n	800a886 <lv_draw_mask_radius+0x82>
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 800aa32:	2100      	movs	r1, #0
 800aa34:	e7fb      	b.n	800aa2e <lv_draw_mask_radius+0x22a>
	...

0800aa38 <lv_draw_mask_add>:
{
 800aa38:	b570      	push	{r4, r5, r6, lr}
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800aa3a:	4c09      	ldr	r4, [pc, #36]	; (800aa60 <lv_draw_mask_add+0x28>)
{
 800aa3c:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800aa3e:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
 800aa48:	b12e      	cbz	r6, 800aa56 <lv_draw_mask_add+0x1e>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	2b10      	cmp	r3, #16
 800aa4e:	d1f6      	bne.n	800aa3e <lv_draw_mask_add+0x6>
        return LV_MASK_ID_INV;
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
}
 800aa54:	bd70      	pop	{r4, r5, r6, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 800aa56:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 800aa5a:	6069      	str	r1, [r5, #4]
    return i;
 800aa5c:	b210      	sxth	r0, r2
 800aa5e:	e7f9      	b.n	800aa54 <lv_draw_mask_add+0x1c>
 800aa60:	20000d54 	.word	0x20000d54

0800aa64 <lv_draw_mask_apply>:
{
 800aa64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 800aa68:	4e0e      	ldr	r6, [pc, #56]	; (800aaa4 <lv_draw_mask_apply+0x40>)
{
 800aa6a:	4607      	mov	r7, r0
 800aa6c:	4688      	mov	r8, r1
 800aa6e:	4691      	mov	r9, r2
 800aa70:	469a      	mov	sl, r3
    bool changed = false;
 800aa72:	2500      	movs	r5, #0
    while(m->param) {
 800aa74:	6834      	ldr	r4, [r6, #0]
 800aa76:	b934      	cbnz	r4, 800aa86 <lv_draw_mask_apply+0x22>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800aa78:	2d00      	cmp	r5, #0
 800aa7a:	bf14      	ite	ne
 800aa7c:	2002      	movne	r0, #2
 800aa7e:	2001      	moveq	r0, #1
}
 800aa80:	b002      	add	sp, #8
 800aa82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 800aa86:	9400      	str	r4, [sp, #0]
 800aa88:	6824      	ldr	r4, [r4, #0]
 800aa8a:	4653      	mov	r3, sl
 800aa8c:	464a      	mov	r2, r9
 800aa8e:	4641      	mov	r1, r8
 800aa90:	4638      	mov	r0, r7
 800aa92:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d0f3      	beq.n	800aa80 <lv_draw_mask_apply+0x1c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800aa98:	2802      	cmp	r0, #2
 800aa9a:	bf08      	it	eq
 800aa9c:	2501      	moveq	r5, #1
        m++;
 800aa9e:	3608      	adds	r6, #8
 800aaa0:	e7e8      	b.n	800aa74 <lv_draw_mask_apply+0x10>
 800aaa2:	bf00      	nop
 800aaa4:	20000d54 	.word	0x20000d54

0800aaa8 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
 800aaa8:	1c43      	adds	r3, r0, #1
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800aaaa:	bf18      	it	ne
 800aaac:	4b07      	ldrne	r3, [pc, #28]	; (800aacc <lv_draw_mask_remove_id+0x24>)
 800aaae:	f04f 0200 	mov.w	r2, #0
 800aab2:	bf1d      	ittte	ne
 800aab4:	f853 1030 	ldrne.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 800aab8:	f843 2030 	strne.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800aabc:	eb03 03c0 	addne.w	r3, r3, r0, lsl #3
    _lv_draw_mask_common_dsc_t * p = NULL;
 800aac0:	4611      	moveq	r1, r2
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800aac2:	bf18      	it	ne
 800aac4:	605a      	strne	r2, [r3, #4]
}
 800aac6:	4608      	mov	r0, r1
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	20000d54 	.word	0x20000d54

0800aad0 <lv_draw_mask_remove_custom>:
{
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	2400      	movs	r4, #0
 800aad4:	4d08      	ldr	r5, [pc, #32]	; (800aaf8 <lv_draw_mask_remove_custom+0x28>)
 800aad6:	4606      	mov	r6, r0
    _lv_draw_mask_common_dsc_t * p = NULL;
 800aad8:	4627      	mov	r7, r4
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800aada:	686b      	ldr	r3, [r5, #4]
 800aadc:	42b3      	cmp	r3, r6
 800aade:	d103      	bne.n	800aae8 <lv_draw_mask_remove_custom+0x18>
            lv_draw_mask_remove_id(i);
 800aae0:	b220      	sxth	r0, r4
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800aae2:	682f      	ldr	r7, [r5, #0]
            lv_draw_mask_remove_id(i);
 800aae4:	f7ff ffe0 	bl	800aaa8 <lv_draw_mask_remove_id>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800aae8:	3401      	adds	r4, #1
 800aaea:	2c10      	cmp	r4, #16
 800aaec:	f105 0508 	add.w	r5, r5, #8
 800aaf0:	d1f3      	bne.n	800aada <lv_draw_mask_remove_custom+0xa>
}
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	20000d54 	.word	0x20000d54

0800aafc <lv_draw_mask_free_param>:
{
 800aafc:	b510      	push	{r4, lr}
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 800aafe:	7903      	ldrb	r3, [r0, #4]
 800ab00:	2b02      	cmp	r3, #2
{
 800ab02:	4604      	mov	r4, r0
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 800ab04:	d110      	bne.n	800ab28 <lv_draw_mask_free_param+0x2c>
        if(radius_p->circle) {
 800ab06:	6943      	ldr	r3, [r0, #20]
 800ab08:	b16b      	cbz	r3, 800ab26 <lv_draw_mask_free_param+0x2a>
            if(radius_p->circle->life < 0) {
 800ab0a:	691a      	ldr	r2, [r3, #16]
 800ab0c:	2a00      	cmp	r2, #0
 800ab0e:	da07      	bge.n	800ab20 <lv_draw_mask_free_param+0x24>
                lv_mem_free(radius_p->circle->cir_opa);
 800ab10:	6858      	ldr	r0, [r3, #4]
 800ab12:	f008 fc27 	bl	8013364 <lv_mem_free>
                lv_mem_free(radius_p->circle);
 800ab16:	6960      	ldr	r0, [r4, #20]
}
 800ab18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_mem_free(poly_p->cfg.points);
 800ab1c:	f008 bc22 	b.w	8013364 <lv_mem_free>
                radius_p->circle->used_cnt--;
 800ab20:	695a      	ldr	r2, [r3, #20]
 800ab22:	3a01      	subs	r2, #1
 800ab24:	615a      	str	r2, [r3, #20]
}
 800ab26:	bd10      	pop	{r4, pc}
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 800ab28:	2b05      	cmp	r3, #5
 800ab2a:	d1fc      	bne.n	800ab26 <lv_draw_mask_free_param+0x2a>
        lv_mem_free(poly_p->cfg.points);
 800ab2c:	6880      	ldr	r0, [r0, #8]
 800ab2e:	e7f3      	b.n	800ab18 <lv_draw_mask_free_param+0x1c>

0800ab30 <_lv_draw_mask_cleanup>:
{
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4c08      	ldr	r4, [pc, #32]	; (800ab54 <_lv_draw_mask_cleanup+0x24>)
 800ab34:	2500      	movs	r5, #0
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 800ab36:	6820      	ldr	r0, [r4, #0]
 800ab38:	b108      	cbz	r0, 800ab3e <_lv_draw_mask_cleanup+0xe>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 800ab3a:	f008 fc13 	bl	8013364 <lv_mem_free>
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 800ab3e:	4620      	mov	r0, r4
 800ab40:	211c      	movs	r1, #28
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800ab42:	3507      	adds	r5, #7
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 800ab44:	f008 fdd9 	bl	80136fa <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800ab48:	2d1c      	cmp	r5, #28
 800ab4a:	f104 041c 	add.w	r4, r4, #28
 800ab4e:	d1f2      	bne.n	800ab36 <_lv_draw_mask_cleanup+0x6>
}
 800ab50:	bd38      	pop	{r3, r4, r5, pc}
 800ab52:	bf00      	nop
 800ab54:	20000cd8 	.word	0x20000cd8

0800ab58 <lv_draw_mask_is_any>:
{
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	4e13      	ldr	r6, [pc, #76]	; (800aba8 <lv_draw_mask_is_any+0x50>)
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	b920      	cbnz	r0, 800ab6a <lv_draw_mask_is_any+0x12>
 800ab60:	6830      	ldr	r0, [r6, #0]
 800ab62:	3800      	subs	r0, #0
 800ab64:	bf18      	it	ne
 800ab66:	2001      	movne	r0, #1
}
 800ab68:	bd70      	pop	{r4, r5, r6, pc}
 800ab6a:	2500      	movs	r5, #0
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800ab6c:	f856 3035 	ldr.w	r3, [r6, r5, lsl #3]
        if(comm_param == NULL) continue;
 800ab70:	b923      	cbnz	r3, 800ab7c <lv_draw_mask_is_any+0x24>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800ab72:	3501      	adds	r5, #1
 800ab74:	2d10      	cmp	r5, #16
 800ab76:	d1f9      	bne.n	800ab6c <lv_draw_mask_is_any+0x14>
    return false;
 800ab78:	2000      	movs	r0, #0
 800ab7a:	e7f5      	b.n	800ab68 <lv_draw_mask_is_any+0x10>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 800ab7c:	791a      	ldrb	r2, [r3, #4]
 800ab7e:	2a02      	cmp	r2, #2
 800ab80:	d001      	beq.n	800ab86 <lv_draw_mask_is_any+0x2e>
            return true;
 800ab82:	2001      	movs	r0, #1
 800ab84:	e7f0      	b.n	800ab68 <lv_draw_mask_is_any+0x10>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800ab86:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800ab8a:	f103 0108 	add.w	r1, r3, #8
            if(radius_param->cfg.outer) {
 800ab8e:	7c9b      	ldrb	r3, [r3, #18]
 800ab90:	07db      	lsls	r3, r3, #31
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800ab92:	4620      	mov	r0, r4
            if(radius_param->cfg.outer) {
 800ab94:	d504      	bpl.n	800aba0 <lv_draw_mask_is_any+0x48>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800ab96:	f007 ffb8 	bl	8012b0a <_lv_area_is_out>
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d1e9      	bne.n	800ab72 <lv_draw_mask_is_any+0x1a>
 800ab9e:	e7f0      	b.n	800ab82 <lv_draw_mask_is_any+0x2a>
 800aba0:	f007 ff6a 	bl	8012a78 <_lv_area_is_in>
 800aba4:	e7f9      	b.n	800ab9a <lv_draw_mask_is_any+0x42>
 800aba6:	bf00      	nop
 800aba8:	20000d54 	.word	0x20000d54

0800abac <lv_draw_mask_line_points_init>:
{
 800abac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb0:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800abb4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800abb8:	4615      	mov	r5, r2
 800abba:	460f      	mov	r7, r1
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800abbc:	212c      	movs	r1, #44	; 0x2c
{
 800abbe:	4604      	mov	r4, r0
 800abc0:	4698      	mov	r8, r3
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800abc2:	f008 fd9a 	bl	80136fa <lv_memset_00>
    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 800abc6:	42b5      	cmp	r5, r6
 800abc8:	d106      	bne.n	800abd8 <lv_draw_mask_line_points_init+0x2c>
 800abca:	f1b9 0f03 	cmp.w	r9, #3
 800abce:	d10b      	bne.n	800abe8 <lv_draw_mask_line_points_init+0x3c>
        p1y--;
 800abd0:	3d01      	subs	r5, #1
        p2y--;
 800abd2:	3e01      	subs	r6, #1
        p1y--;
 800abd4:	b22d      	sxth	r5, r5
        p2y--;
 800abd6:	b236      	sxth	r6, r6
    if(p1y > p2y) {
 800abd8:	42b5      	cmp	r5, r6
 800abda:	dd05      	ble.n	800abe8 <lv_draw_mask_line_points_init+0x3c>
 800abdc:	462a      	mov	r2, r5
 800abde:	4635      	mov	r5, r6
 800abe0:	4616      	mov	r6, r2
 800abe2:	463a      	mov	r2, r7
        p1x = t;
 800abe4:	4647      	mov	r7, r8
        p2x = p1x;
 800abe6:	4690      	mov	r8, r2
    param->cfg.side = side;
 800abe8:	7c22      	ldrb	r2, [r4, #16]
    param->cfg.p1.y = p1y;
 800abea:	8165      	strh	r5, [r4, #10]
    param->cfg.side = side;
 800abec:	f369 0201 	bfi	r2, r9, #0, #2
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800abf0:	eba8 0307 	sub.w	r3, r8, r7
    param->origo.y = p1y;
 800abf4:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800abf6:	1b75      	subs	r5, r6, r5
    param->cfg.side = side;
 800abf8:	7422      	strb	r2, [r4, #16]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800abfa:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800abfe:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 800ac02:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800ac06:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 800ac0a:	4291      	cmp	r1, r2
 800ac0c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800ac10:	482b      	ldr	r0, [pc, #172]	; (800acc0 <lv_draw_mask_line_points_init+0x114>)
    param->cfg.p1.x = p1x;
 800ac12:	8127      	strh	r7, [r4, #8]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800ac14:	bfd4      	ite	le
 800ac16:	2100      	movle	r1, #0
 800ac18:	2101      	movgt	r1, #1
 800ac1a:	f361 0200 	bfi	r2, r1, #0, #1
 800ac1e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    param->yx_steep = 0;
 800ac22:	2100      	movs	r1, #0
    if(param->flat) {
 800ac24:	07d2      	lsls	r2, r2, #31
    param->xy_steep = 0;
 800ac26:	e9c4 1106 	strd	r1, r1, [r4, #24]
    param->cfg.p2.x = p2x;
 800ac2a:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
 800ac2e:	81e6      	strh	r6, [r4, #14]
    param->origo.x = p1x;
 800ac30:	8267      	strh	r7, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800ac32:	6020      	str	r0, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 800ac34:	7121      	strb	r1, [r4, #4]
    if(param->flat) {
 800ac36:	d524      	bpl.n	800ac82 <lv_draw_mask_line_points_init+0xd6>
        if(dx) {
 800ac38:	b133      	cbz	r3, 800ac48 <lv_draw_mask_line_points_init+0x9c>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 800ac3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ac3e:	fb92 f2f3 	sdiv	r2, r2, r3
            param->yx_steep = (m * dy) >> 10;
 800ac42:	436a      	muls	r2, r5
 800ac44:	1292      	asrs	r2, r2, #10
 800ac46:	61e2      	str	r2, [r4, #28]
        if(dy) {
 800ac48:	b135      	cbz	r5, 800ac58 <lv_draw_mask_line_points_init+0xac>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800ac4a:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 800ac4e:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
 800ac52:	436b      	muls	r3, r5
 800ac54:	129b      	asrs	r3, r3, #10
 800ac56:	61a3      	str	r3, [r4, #24]
        param->steep = param->yx_steep;
 800ac58:	69e3      	ldr	r3, [r4, #28]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800ac5a:	7c22      	ldrb	r2, [r4, #16]
        param->steep = param->xy_steep;
 800ac5c:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800ac5e:	f012 0203 	ands.w	r2, r2, #3
        if(param->steep > 0) param->inv = 1;
 800ac62:	6a21      	ldr	r1, [r4, #32]
 800ac64:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800ac68:	d11d      	bne.n	800aca6 <lv_draw_mask_line_points_init+0xfa>
 800ac6a:	f36f 0341 	bfc	r3, #1, #1
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800ac6e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if(param->steep < 0) param->spx = -param->spx;
 800ac72:	2900      	cmp	r1, #0
    param->spx = param->steep >> 2;
 800ac74:	ea4f 03a1 	mov.w	r3, r1, asr #2
    if(param->steep < 0) param->spx = -param->spx;
 800ac78:	bfb8      	it	lt
 800ac7a:	425b      	neglt	r3, r3
 800ac7c:	6263      	str	r3, [r4, #36]	; 0x24
}
 800ac7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(dy) {
 800ac82:	b135      	cbz	r5, 800ac92 <lv_draw_mask_line_points_init+0xe6>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800ac84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ac88:	fb92 f2f5 	sdiv	r2, r2, r5
            param->xy_steep = (m * dx) >> 10;
 800ac8c:	435a      	muls	r2, r3
 800ac8e:	1292      	asrs	r2, r2, #10
 800ac90:	61a2      	str	r2, [r4, #24]
        if(dx) {
 800ac92:	b133      	cbz	r3, 800aca2 <lv_draw_mask_line_points_init+0xf6>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800ac94:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 800ac98:	fb96 f3f3 	sdiv	r3, r6, r3
            param->yx_steep = (m * dy) >> 10;
 800ac9c:	435d      	muls	r5, r3
 800ac9e:	12ad      	asrs	r5, r5, #10
 800aca0:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
 800aca2:	69a3      	ldr	r3, [r4, #24]
 800aca4:	e7d9      	b.n	800ac5a <lv_draw_mask_line_points_init+0xae>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800aca6:	2a01      	cmp	r2, #1
 800aca8:	d102      	bne.n	800acb0 <lv_draw_mask_line_points_init+0x104>
 800acaa:	f043 0302 	orr.w	r3, r3, #2
 800acae:	e7de      	b.n	800ac6e <lv_draw_mask_line_points_init+0xc2>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 800acb0:	2a02      	cmp	r2, #2
 800acb2:	d102      	bne.n	800acba <lv_draw_mask_line_points_init+0x10e>
        if(param->steep > 0) param->inv = 1;
 800acb4:	2900      	cmp	r1, #0
 800acb6:	dcf8      	bgt.n	800acaa <lv_draw_mask_line_points_init+0xfe>
 800acb8:	e7d7      	b.n	800ac6a <lv_draw_mask_line_points_init+0xbe>
        if(param->steep > 0) param->inv = 0;
 800acba:	2900      	cmp	r1, #0
 800acbc:	dcd5      	bgt.n	800ac6a <lv_draw_mask_line_points_init+0xbe>
 800acbe:	e7f4      	b.n	800acaa <lv_draw_mask_line_points_init+0xfe>
 800acc0:	0800a249 	.word	0x0800a249

0800acc4 <lv_draw_mask_line_angle_init>:
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800acc4:	2bb4      	cmp	r3, #180	; 0xb4
{
 800acc6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800acca:	461c      	mov	r4, r3
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800accc:	bfc4      	itt	gt
 800acce:	f1a3 04b4 	subgt.w	r4, r3, #180	; 0xb4
 800acd2:	b224      	sxthgt	r4, r4
{
 800acd4:	4606      	mov	r6, r0
    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 800acd6:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800acda:	b200      	sxth	r0, r0
{
 800acdc:	4690      	mov	r8, r2
 800acde:	460f      	mov	r7, r1
    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 800ace0:	f008 fa4a 	bl	8013178 <lv_trigo_sin>
 800ace4:	4605      	mov	r5, r0
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 800ace6:	4620      	mov	r0, r4
 800ace8:	f008 fa46 	bl	8013178 <lv_trigo_sin>
    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 800acec:	eb08 1060 	add.w	r0, r8, r0, asr #5
 800acf0:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800acf4:	9201      	str	r2, [sp, #4]
 800acf6:	eb07 1365 	add.w	r3, r7, r5, asr #5
 800acfa:	b200      	sxth	r0, r0
 800acfc:	9000      	str	r0, [sp, #0]
 800acfe:	b21b      	sxth	r3, r3
 800ad00:	4642      	mov	r2, r8
 800ad02:	4639      	mov	r1, r7
 800ad04:	4630      	mov	r0, r6
 800ad06:	f7ff ff51 	bl	800abac <lv_draw_mask_line_points_init>
}
 800ad0a:	b002      	add	sp, #8
 800ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ad10 <lv_draw_mask_angle_init>:
{
 800ad10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad12:	b085      	sub	sp, #20
 800ad14:	f240 1567 	movw	r5, #359	; 0x167
 800ad18:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 800ad1c:	42ab      	cmp	r3, r5
 800ad1e:	bfa8      	it	ge
 800ad20:	462b      	movge	r3, r5
 800ad22:	42b5      	cmp	r5, r6
 800ad24:	bfa8      	it	ge
 800ad26:	4635      	movge	r5, r6
 800ad28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    if(end_angle < 0)
 800ad2c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    if(end_angle < start_angle) {
 800ad30:	429d      	cmp	r5, r3
{
 800ad32:	4604      	mov	r4, r0
        param->delta_deg = 360 - start_angle + end_angle;
 800ad34:	b29f      	uxth	r7, r3
    if(end_angle < start_angle) {
 800ad36:	da27      	bge.n	800ad88 <lv_draw_mask_angle_init+0x78>
        param->delta_deg = 360 - start_angle + end_angle;
 800ad38:	f505 70b4 	add.w	r0, r5, #360	; 0x168
 800ad3c:	1bc0      	subs	r0, r0, r7
        param->delta_deg = LV_ABS(end_angle - start_angle);
 800ad3e:	b280      	uxth	r0, r0
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800ad40:	2fb3      	cmp	r7, #179	; 0xb3
 800ad42:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 800ad46:	4813      	ldr	r0, [pc, #76]	; (800ad94 <lv_draw_mask_angle_init+0x84>)
 800ad48:	6020      	str	r0, [r4, #0]
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800ad4a:	bf94      	ite	ls
 800ad4c:	2700      	movls	r7, #0
 800ad4e:	2701      	movhi	r7, #1
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 800ad50:	2001      	movs	r0, #1
    param->cfg.start_angle = start_angle;
 800ad52:	81a3      	strh	r3, [r4, #12]
    param->cfg.vertex_p.x = vertex_x;
 800ad54:	8121      	strh	r1, [r4, #8]
    param->cfg.vertex_p.y = vertex_y;
 800ad56:	8162      	strh	r2, [r4, #10]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 800ad58:	7120      	strb	r0, [r4, #4]
    param->cfg.end_angle = end_angle;
 800ad5a:	81e5      	strh	r5, [r4, #14]
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800ad5c:	f104 0010 	add.w	r0, r4, #16
 800ad60:	9700      	str	r7, [sp, #0]
 800ad62:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ad66:	f7ff ffad 	bl	800acc4 <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 800ad6a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ad6e:	2eb3      	cmp	r6, #179	; 0xb3
 800ad70:	bfcc      	ite	gt
 800ad72:	2600      	movgt	r6, #0
 800ad74:	2601      	movle	r6, #1
 800ad76:	462b      	mov	r3, r5
 800ad78:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800ad7c:	960a      	str	r6, [sp, #40]	; 0x28
}
 800ad7e:	b005      	add	sp, #20
 800ad80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 800ad84:	f7ff bf9e 	b.w	800acc4 <lv_draw_mask_line_angle_init>
        param->delta_deg = LV_ABS(end_angle - start_angle);
 800ad88:	1ae8      	subs	r0, r5, r3
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	bfb8      	it	lt
 800ad8e:	4240      	neglt	r0, r0
 800ad90:	e7d5      	b.n	800ad3e <lv_draw_mask_angle_init+0x2e>
 800ad92:	bf00      	nop
 800ad94:	0800a5bd 	.word	0x0800a5bd

0800ad98 <lv_draw_mask_radius_init>:
{
 800ad98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9c:	4607      	mov	r7, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ad9e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ada2:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ada6:	f9b1 6000 	ldrsh.w	r6, [r1]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800adaa:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
    dest->y1 = src->y1;
 800adae:	f8a7 c00a 	strh.w	ip, [r7, #10]
 800adb2:	4690      	mov	r8, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800adb4:	1c61      	adds	r1, r4, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800adb6:	1c42      	adds	r2, r0, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800adb8:	1b89      	subs	r1, r1, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800adba:	eba2 020c 	sub.w	r2, r2, ip
    int32_t short_side = LV_MIN(w, h);
 800adbe:	b212      	sxth	r2, r2
 800adc0:	b209      	sxth	r1, r1
 800adc2:	428a      	cmp	r2, r1
 800adc4:	bfa8      	it	ge
 800adc6:	460a      	movge	r2, r1
    if(radius > short_side >> 1) radius = short_side >> 1;
 800adc8:	ebb8 0f62 	cmp.w	r8, r2, asr #1
 800adcc:	ea4f 0162 	mov.w	r1, r2, asr #1
    param->cfg.outer = inv ? 1 : 0;
 800add0:	7cba      	ldrb	r2, [r7, #18]
    dest->x1 = src->x1;
 800add2:	813e      	strh	r6, [r7, #8]
    if(radius > short_side >> 1) radius = short_side >> 1;
 800add4:	bfc8      	it	gt
 800add6:	fa0f f881 	sxthgt.w	r8, r1
    param->cfg.outer = inv ? 1 : 0;
 800adda:	f363 0200 	bfi	r2, r3, #0, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 800adde:	4b93      	ldr	r3, [pc, #588]	; (800b02c <lv_draw_mask_radius_init+0x294>)
 800ade0:	603b      	str	r3, [r7, #0]
 800ade2:	ea28 75e8 	bic.w	r5, r8, r8, asr #31
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800ade6:	2302      	movs	r3, #2
    if(radius == 0) {
 800ade8:	f1b8 0f00 	cmp.w	r8, #0
{
 800adec:	b095      	sub	sp, #84	; 0x54
    dest->x2 = src->x2;
 800adee:	81bc      	strh	r4, [r7, #12]
    dest->y2 = src->y2;
 800adf0:	81f8      	strh	r0, [r7, #14]
    param->cfg.radius = radius;
 800adf2:	823d      	strh	r5, [r7, #16]
    param->cfg.outer = inv ? 1 : 0;
 800adf4:	74ba      	strb	r2, [r7, #18]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800adf6:	713b      	strb	r3, [r7, #4]
    if(radius == 0) {
 800adf8:	f04f 0600 	mov.w	r6, #0
 800adfc:	dc03      	bgt.n	800ae06 <lv_draw_mask_radius_init+0x6e>
        param->circle = NULL;
 800adfe:	617e      	str	r6, [r7, #20]
}
 800ae00:	b015      	add	sp, #84	; 0x54
 800ae02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae06:	4b8a      	ldr	r3, [pc, #552]	; (800b030 <lv_draw_mask_radius_init+0x298>)
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800ae08:	9600      	str	r6, [sp, #0]
    if(radius == 0) {
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	461a      	mov	r2, r3
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 800ae0e:	f9b1 0018 	ldrsh.w	r0, [r1, #24]
 800ae12:	42a8      	cmp	r0, r5
 800ae14:	d11a      	bne.n	800ae4c <lv_draw_mask_radius_init+0xb4>
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 800ae16:	9b00      	ldr	r3, [sp, #0]
 800ae18:	201c      	movs	r0, #28
 800ae1a:	fb00 2303 	mla	r3, r0, r3, r2
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 800ae1e:	f1b8 0f0f 	cmp.w	r8, #15
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 800ae22:	6959      	ldr	r1, [r3, #20]
 800ae24:	f101 0101 	add.w	r1, r1, #1
 800ae28:	6159      	str	r1, [r3, #20]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	9900      	ldr	r1, [sp, #0]
 800ae2e:	bfcc      	ite	gt
 800ae30:	f345 150f 	sbfxgt	r5, r5, #4, #16
 800ae34:	2501      	movle	r5, #1
 800ae36:	441d      	add	r5, r3
 800ae38:	fb00 2201 	mla	r2, r0, r1, r2
 800ae3c:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800ae40:	bfa8      	it	ge
 800ae42:	f44f 757a 	movge.w	r5, #1000	; 0x3e8
 800ae46:	6115      	str	r5, [r2, #16]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 800ae48:	617a      	str	r2, [r7, #20]
            return;
 800ae4a:	e7d9      	b.n	800ae00 <lv_draw_mask_radius_init+0x68>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800ae4c:	9800      	ldr	r0, [sp, #0]
 800ae4e:	3001      	adds	r0, #1
 800ae50:	2804      	cmp	r0, #4
 800ae52:	9000      	str	r0, [sp, #0]
 800ae54:	f101 011c 	add.w	r1, r1, #28
 800ae58:	d1d9      	bne.n	800ae0e <lv_draw_mask_radius_init+0x76>
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 800ae5a:	2400      	movs	r4, #0
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 800ae5c:	695a      	ldr	r2, [r3, #20]
 800ae5e:	b92a      	cbnz	r2, 800ae6c <lv_draw_mask_radius_init+0xd4>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 800ae60:	b18c      	cbz	r4, 800ae86 <lv_draw_mask_radius_init+0xee>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 800ae62:	6919      	ldr	r1, [r3, #16]
 800ae64:	6922      	ldr	r2, [r4, #16]
 800ae66:	4291      	cmp	r1, r2
 800ae68:	bfb8      	it	lt
 800ae6a:	461c      	movlt	r4, r3
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800ae6c:	9a00      	ldr	r2, [sp, #0]
 800ae6e:	3a01      	subs	r2, #1
 800ae70:	f103 031c 	add.w	r3, r3, #28
 800ae74:	9200      	str	r2, [sp, #0]
 800ae76:	d1f1      	bne.n	800ae5c <lv_draw_mask_radius_init+0xc4>
    if(!entry) {
 800ae78:	b9ec      	cbnz	r4, 800aeb6 <lv_draw_mask_radius_init+0x11e>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 800ae7a:	201c      	movs	r0, #28
 800ae7c:	f008 fa54 	bl	8013328 <lv_mem_alloc>
        LV_ASSERT_MALLOC(entry);
 800ae80:	4604      	mov	r4, r0
 800ae82:	b910      	cbnz	r0, 800ae8a <lv_draw_mask_radius_init+0xf2>
 800ae84:	e7fe      	b.n	800ae84 <lv_draw_mask_radius_init+0xec>
 800ae86:	461c      	mov	r4, r3
 800ae88:	e7f0      	b.n	800ae6c <lv_draw_mask_radius_init+0xd4>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 800ae8a:	211c      	movs	r1, #28
 800ae8c:	f008 fc35 	bl	80136fa <lv_memset_00>
        entry->life = -1;
 800ae90:	f04f 33ff 	mov.w	r3, #4294967295
    if(c->buf) lv_mem_free(c->buf);
 800ae94:	6820      	ldr	r0, [r4, #0]
        CIRCLE_CACHE_AGING(entry->life, radius);
 800ae96:	6123      	str	r3, [r4, #16]
    param->circle = entry;
 800ae98:	617c      	str	r4, [r7, #20]
    c->radius = radius;
 800ae9a:	8325      	strh	r5, [r4, #24]
    if(c->buf) lv_mem_free(c->buf);
 800ae9c:	b108      	cbz	r0, 800aea2 <lv_draw_mask_radius_init+0x10a>
 800ae9e:	f008 fa61 	bl	8013364 <lv_mem_free>
    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 800aea2:	2006      	movs	r0, #6
 800aea4:	fb05 0000 	mla	r0, r5, r0, r0
 800aea8:	f008 fa3e 	bl	8013328 <lv_mem_alloc>
 800aeac:	f105 0901 	add.w	r9, r5, #1
 800aeb0:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MALLOC(c->buf);
 800aeb2:	b980      	cbnz	r0, 800aed6 <lv_draw_mask_radius_init+0x13e>
 800aeb4:	e7fe      	b.n	800aeb4 <lv_draw_mask_radius_init+0x11c>
        entry->used_cnt++;
 800aeb6:	6963      	ldr	r3, [r4, #20]
        CIRCLE_CACHE_AGING(entry->life, radius);
 800aeb8:	f1b8 0f0f 	cmp.w	r8, #15
        entry->used_cnt++;
 800aebc:	f103 0301 	add.w	r3, r3, #1
 800aec0:	6163      	str	r3, [r4, #20]
        CIRCLE_CACHE_AGING(entry->life, radius);
 800aec2:	bfcc      	ite	gt
 800aec4:	f345 130f 	sbfxgt	r3, r5, #4, #16
 800aec8:	2301      	movle	r3, #1
 800aeca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aece:	bfa8      	it	ge
 800aed0:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800aed4:	e7de      	b.n	800ae94 <lv_draw_mask_radius_init+0xfc>
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 800aed6:	eb00 0345 	add.w	r3, r0, r5, lsl #1
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 800aeda:	2204      	movs	r2, #4
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 800aedc:	3302      	adds	r3, #2
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 800aede:	eb02 0785 	add.w	r7, r2, r5, lsl #2
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 800aee2:	60e3      	str	r3, [r4, #12]
    if(radius == 1) {
 800aee4:	f1b8 0f01 	cmp.w	r8, #1
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 800aee8:	eb00 0307 	add.w	r3, r0, r7
    c->cir_opa = c->buf;
 800aeec:	6060      	str	r0, [r4, #4]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 800aeee:	60a3      	str	r3, [r4, #8]
    if(radius == 1) {
 800aef0:	d109      	bne.n	800af06 <lv_draw_mask_radius_init+0x16e>
        c->cir_opa[0] = 180;
 800aef2:	23b4      	movs	r3, #180	; 0xb4
 800aef4:	7003      	strb	r3, [r0, #0]
        c->opa_start_on_y[0] = 0;
 800aef6:	68e2      	ldr	r2, [r4, #12]
 800aef8:	2300      	movs	r3, #0
 800aefa:	8013      	strh	r3, [r2, #0]
        c->opa_start_on_y[1] = 1;
 800aefc:	f8a2 8002 	strh.w	r8, [r2, #2]
        c->x_start_on_y[0] = 0;
 800af00:	68a2      	ldr	r2, [r4, #8]
 800af02:	8013      	strh	r3, [r2, #0]
        return;
 800af04:	e77c      	b.n	800ae00 <lv_draw_mask_radius_init+0x68>
    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 800af06:	ea4f 00c9 	mov.w	r0, r9, lsl #3
 800af0a:	f008 fa5d 	bl	80133c8 <lv_mem_buf_get>
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 800af0e:	00ab      	lsls	r3, r5, #2
 800af10:	b219      	sxth	r1, r3
 800af12:	9101      	str	r1, [sp, #4]
    *tmp = 1 - radius;
 800af14:	f1c3 0101 	rsb	r1, r3, #1
    x_int[0] = cp.x >> 2;
 800af18:	f343 038d 	sbfx	r3, r3, #2, #14
    *tmp = 1 - radius;
 800af1c:	b209      	sxth	r1, r1
    x_int[0] = cp.x >> 2;
 800af1e:	930c      	str	r3, [sp, #48]	; 0x30
    x_fract[0] = 0;
 800af20:	2300      	movs	r3, #0
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 800af22:	19c2      	adds	r2, r0, r7
    *tmp = 1 - radius;
 800af24:	9104      	str	r1, [sp, #16]
    x_fract[0] = 0;
 800af26:	9310      	str	r3, [sp, #64]	; 0x40
    uint32_t y_8th_cnt = 0;
 800af28:	9303      	str	r3, [sp, #12]
    c->y = 0;
 800af2a:	469a      	mov	sl, r3
    while(circ_cont(&cp)) {
 800af2c:	9901      	ldr	r1, [sp, #4]
 800af2e:	458a      	cmp	sl, r1
 800af30:	dc1a      	bgt.n	800af68 <lv_draw_mask_radius_init+0x1d0>
 800af32:	f10a 0104 	add.w	r1, sl, #4
 800af36:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800af3a:	af10      	add	r7, sp, #64	; 0x40
 800af3c:	b289      	uxth	r1, r1
    if(*tmp <= 0) {
 800af3e:	9e04      	ldr	r6, [sp, #16]
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 800af40:	f8bd e010 	ldrh.w	lr, [sp, #16]
    if(*tmp <= 0) {
 800af44:	2e00      	cmp	r6, #0
 800af46:	dc5f      	bgt.n	800b008 <lv_draw_mask_radius_init+0x270>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 800af48:	f10e 0e03 	add.w	lr, lr, #3
 800af4c:	eb0e 0e4a 	add.w	lr, lr, sl, lsl #1
 800af50:	fa0f f68e 	sxth.w	r6, lr
 800af54:	9604      	str	r6, [sp, #16]
    c->y++;
 800af56:	f10a 0801 	add.w	r8, sl, #1
            if(circ_cont(&cp) == false) break;
 800af5a:	9e01      	ldr	r6, [sp, #4]
 800af5c:	fa0f fa88 	sxth.w	sl, r8
 800af60:	45b2      	cmp	sl, r6
 800af62:	fa1f fe88 	uxth.w	lr, r8
 800af66:	dd65      	ble.n	800b034 <lv_draw_mask_radius_init+0x29c>
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800af68:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800af6c:	f10c 3cff 	add.w	ip, ip, #4294967295
    int32_t mid = radius * 723;
 800af70:	f240 21d3 	movw	r1, #723	; 0x2d3
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800af74:	f930 e01c 	ldrsh.w	lr, [r0, ip, lsl #1]
    int32_t mid = radius * 723;
 800af78:	fb15 f501 	smulbb	r5, r5, r1
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800af7c:	ebbe 2fa5 	cmp.w	lr, r5, asr #10
    int32_t mid_int = mid >> 10;
 800af80:	ea4f 21a5 	mov.w	r1, r5, asr #10
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800af84:	ea4f 074c 	mov.w	r7, ip, lsl #1
 800af88:	d103      	bne.n	800af92 <lv_draw_mask_radius_init+0x1fa>
 800af8a:	f932 c01c 	ldrsh.w	ip, [r2, ip, lsl #1]
 800af8e:	4561      	cmp	r1, ip
 800af90:	d01d      	beq.n	800afce <lv_draw_mask_radius_init+0x236>
        int32_t tmp_val = mid - (mid_int << 10);
 800af92:	f3c5 0509 	ubfx	r5, r5, #0, #10
        if(tmp_val <= 512) {
 800af96:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
            tmp_val = 1024 - tmp_val;
 800af9a:	bfc8      	it	gt
 800af9c:	f5c5 6580 	rsbgt	r5, r5, #1024	; 0x400
        cir_x[cir_size] = mid_int;
 800afa0:	f107 0702 	add.w	r7, r7, #2
            tmp_val = tmp_val * tmp_val * 2;
 800afa4:	bfc8      	it	gt
 800afa6:	436d      	mulgt	r5, r5
        cir_x[cir_size] = mid_int;
 800afa8:	b209      	sxth	r1, r1
 800afaa:	53c1      	strh	r1, [r0, r7]
            tmp_val = tmp_val * tmp_val * 2;
 800afac:	bfd8      	it	le
 800afae:	436d      	mulle	r5, r5
        cir_y[cir_size] = mid_int;
 800afb0:	53d1      	strh	r1, [r2, r7]
            tmp_val = tmp_val >> (10 + 6);
 800afb2:	bfc8      	it	gt
 800afb4:	13ed      	asrgt	r5, r5, #15
        c->cir_opa[cir_size] = tmp_val;
 800afb6:	6861      	ldr	r1, [r4, #4]
            tmp_val = tmp_val >> (10 + 6);
 800afb8:	bfd4      	ite	le
 800afba:	0bed      	lsrle	r5, r5, #15
            tmp_val = 15 - tmp_val;
 800afbc:	f1c5 050f 	rsbgt	r5, r5, #15
        c->cir_opa[cir_size] = tmp_val;
 800afc0:	54cd      	strb	r5, [r1, r3]
        c->cir_opa[cir_size] *= 16;
 800afc2:	6865      	ldr	r5, [r4, #4]
 800afc4:	5ce9      	ldrb	r1, [r5, r3]
 800afc6:	0109      	lsls	r1, r1, #4
 800afc8:	54e9      	strb	r1, [r5, r3]
        cir_size++;
 800afca:	3301      	adds	r3, #1
 800afcc:	b21b      	sxth	r3, r3
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 800afce:	1e9d      	subs	r5, r3, #2
 800afd0:	4619      	mov	r1, r3
 800afd2:	2d00      	cmp	r5, #0
 800afd4:	f280 80e5 	bge.w	800b1a2 <lv_draw_mask_radius_init+0x40a>
 800afd8:	b299      	uxth	r1, r3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f101 35ff 	add.w	r5, r1, #4294967295
 800afe0:	bfcc      	ite	gt
 800afe2:	462b      	movgt	r3, r5
 800afe4:	2300      	movle	r3, #0
    c->opa_start_on_y[0] = 0;
 800afe6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800afea:	4419      	add	r1, r3
 800afec:	2300      	movs	r3, #0
 800afee:	b209      	sxth	r1, r1
 800aff0:	f8ac 3000 	strh.w	r3, [ip]
    while(i < cir_size) {
 800aff4:	428b      	cmp	r3, r1
 800aff6:	f9bd 7000 	ldrsh.w	r7, [sp]
 800affa:	f2c0 80e3 	blt.w	800b1c4 <lv_draw_mask_radius_init+0x42c>
}
 800affe:	b015      	add	sp, #84	; 0x54
 800b000:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_mem_buf_release(cir_x);
 800b004:	f008 ba2c 	b.w	8013460 <lv_mem_buf_release>
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 800b008:	9e01      	ldr	r6, [sp, #4]
 800b00a:	f10e 0e05 	add.w	lr, lr, #5
 800b00e:	ebaa 0806 	sub.w	r8, sl, r6
 800b012:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800b016:	fa0f f68e 	sxth.w	r6, lr
 800b01a:	9604      	str	r6, [sp, #16]
        c->x--;
 800b01c:	9e01      	ldr	r6, [sp, #4]
 800b01e:	f106 3eff 	add.w	lr, r6, #4294967295
 800b022:	fa0f f68e 	sxth.w	r6, lr
 800b026:	9601      	str	r6, [sp, #4]
 800b028:	e795      	b.n	800af56 <lv_draw_mask_radius_init+0x1be>
 800b02a:	bf00      	nop
 800b02c:	0800a805 	.word	0x0800a805
 800b030:	20000cd8 	.word	0x20000cd8
            x_int[i] = cp.x >> 2;
 800b034:	9e01      	ldr	r6, [sp, #4]
 800b036:	ea4f 08a6 	mov.w	r8, r6, asr #2
 800b03a:	f84c 8b04 	str.w	r8, [ip], #4
        for(i = 0; i < 4; i++) {
 800b03e:	4571      	cmp	r1, lr
            x_fract[i] = cp.x & 0x3;
 800b040:	f006 0803 	and.w	r8, r6, #3
 800b044:	f847 8b04 	str.w	r8, [r7], #4
        for(i = 0; i < 4; i++) {
 800b048:	f47f af79 	bne.w	800af3e <lv_draw_mask_radius_init+0x1a6>
        if(x_int[0] == x_int[3]) {
 800b04c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b04e:	9102      	str	r1, [sp, #8]
        cir_x[cir_size] = mid_int;
 800b050:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800b054:	4619      	mov	r1, r3
            cir_x[cir_size] = x_int[0];
 800b056:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800b05a:	9305      	str	r3, [sp, #20]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 800b05c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800b060:	930a      	str	r3, [sp, #40]	; 0x28
 800b062:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800b066:	9306      	str	r3, [sp, #24]
        c->cir_opa[cir_size] = tmp_val;
 800b068:	6863      	ldr	r3, [r4, #4]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 800b06a:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
        if(x_int[0] == x_int[3]) {
 800b06e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 800b070:	9608      	str	r6, [sp, #32]
        c->cir_opa[cir_size] = tmp_val;
 800b072:	440b      	add	r3, r1
        if(x_int[0] == x_int[3]) {
 800b074:	9e02      	ldr	r6, [sp, #8]
        c->cir_opa[cir_size] = tmp_val;
 800b076:	9307      	str	r3, [sp, #28]
        cir_size++;
 800b078:	b28b      	uxth	r3, r1
 800b07a:	930b      	str	r3, [sp, #44]	; 0x2c
        if(x_int[0] == x_int[3]) {
 800b07c:	42be      	cmp	r6, r7
        cir_size++;
 800b07e:	f103 0301 	add.w	r3, r3, #1
            cir_y[cir_size] = y_8th_cnt;
 800b082:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 800b086:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
        cir_size++;
 800b08a:	b21b      	sxth	r3, r3
        if(x_int[0] == x_int[3]) {
 800b08c:	d11b      	bne.n	800b0c6 <lv_draw_mask_radius_init+0x32e>
            cir_x[cir_size] = x_int[0];
 800b08e:	9e05      	ldr	r6, [sp, #20]
 800b090:	f820 600c 	strh.w	r6, [r0, ip]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 800b094:	9e0a      	ldr	r6, [sp, #40]	; 0x28
            cir_y[cir_size] = y_8th_cnt;
 800b096:	f822 800c 	strh.w	r8, [r2, ip]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 800b09a:	445e      	add	r6, fp
 800b09c:	46b3      	mov	fp, r6
 800b09e:	9e06      	ldr	r6, [sp, #24]
 800b0a0:	445e      	add	r6, fp
 800b0a2:	46b3      	mov	fp, r6
 800b0a4:	9e08      	ldr	r6, [sp, #32]
 800b0a6:	445e      	add	r6, fp
 800b0a8:	46b3      	mov	fp, r6
 800b0aa:	9e07      	ldr	r6, [sp, #28]
 800b0ac:	f886 b000 	strb.w	fp, [r6]
            c->cir_opa[cir_size] *= 16;
 800b0b0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800b0b4:	f81c 7001 	ldrb.w	r7, [ip, r1]
 800b0b8:	013f      	lsls	r7, r7, #4
 800b0ba:	f80c 7001 	strb.w	r7, [ip, r1]
        y_8th_cnt++;
 800b0be:	9903      	ldr	r1, [sp, #12]
 800b0c0:	3101      	adds	r1, #1
 800b0c2:	9103      	str	r1, [sp, #12]
 800b0c4:	e732      	b.n	800af2c <lv_draw_mask_radius_init+0x194>
            cir_x[cir_size] = x_int[0] - 1;
 800b0c6:	4699      	mov	r9, r3
 800b0c8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800b0cc:	9b02      	ldr	r3, [sp, #8]
        else if(x_int[0] != x_int[1]) {
 800b0ce:	9e02      	ldr	r6, [sp, #8]
 800b0d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
            cir_x[cir_size] = x_int[0] - 1;
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	b21b      	sxth	r3, r3
 800b0d6:	9309      	str	r3, [sp, #36]	; 0x24
            cir_size++;
 800b0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        else if(x_int[0] != x_int[1]) {
 800b0da:	42be      	cmp	r6, r7
            cir_size++;
 800b0dc:	f103 0302 	add.w	r3, r3, #2
 800b0e0:	b21b      	sxth	r3, r3
        else if(x_int[0] != x_int[1]) {
 800b0e2:	d024      	beq.n	800b12e <lv_draw_mask_radius_init+0x396>
            cir_x[cir_size] = x_int[0];
 800b0e4:	9e05      	ldr	r6, [sp, #20]
            c->cir_opa[cir_size] = x_fract[0];
 800b0e6:	9f07      	ldr	r7, [sp, #28]
            cir_x[cir_size] = x_int[0];
 800b0e8:	f820 600c 	strh.w	r6, [r0, ip]
            c->cir_opa[cir_size] = x_fract[0];
 800b0ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
            cir_y[cir_size] = y_8th_cnt;
 800b0ee:	f822 800c 	strh.w	r8, [r2, ip]
            c->cir_opa[cir_size] = x_fract[0];
 800b0f2:	703e      	strb	r6, [r7, #0]
            c->cir_opa[cir_size] *= 16;
 800b0f4:	f8d4 c004 	ldr.w	ip, [r4, #4]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 800b0f8:	9e06      	ldr	r6, [sp, #24]
            c->cir_opa[cir_size] *= 16;
 800b0fa:	f81c 7001 	ldrb.w	r7, [ip, r1]
 800b0fe:	013f      	lsls	r7, r7, #4
 800b100:	f80c 7001 	strb.w	r7, [ip, r1]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 800b104:	44b3      	add	fp, r6
 800b106:	9e08      	ldr	r6, [sp, #32]
            cir_x[cir_size] = x_int[0] - 1;
 800b108:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b10a:	f820 100e 	strh.w	r1, [r0, lr]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 800b10e:	f10b 0b04 	add.w	fp, fp, #4
 800b112:	445e      	add	r6, fp
            cir_y[cir_size] = y_8th_cnt;
 800b114:	f822 800e 	strh.w	r8, [r2, lr]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 800b118:	6861      	ldr	r1, [r4, #4]
 800b11a:	46b3      	mov	fp, r6
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 800b11c:	f801 b009 	strb.w	fp, [r1, r9]
            c->cir_opa[cir_size] *= 16;
 800b120:	6867      	ldr	r7, [r4, #4]
 800b122:	f817 1009 	ldrb.w	r1, [r7, r9]
 800b126:	0109      	lsls	r1, r1, #4
 800b128:	f807 1009 	strb.w	r1, [r7, r9]
            cir_size++;
 800b12c:	e7c7      	b.n	800b0be <lv_draw_mask_radius_init+0x326>
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 800b12e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
        else if(x_int[0] != x_int[2]) {
 800b130:	9f0e      	ldr	r7, [sp, #56]	; 0x38
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 800b132:	445e      	add	r6, fp
 800b134:	fa5f fb86 	uxtb.w	fp, r6
        else if(x_int[0] != x_int[2]) {
 800b138:	9e02      	ldr	r6, [sp, #8]
 800b13a:	42be      	cmp	r6, r7
            cir_x[cir_size] = x_int[0];
 800b13c:	9e05      	ldr	r6, [sp, #20]
 800b13e:	f820 600c 	strh.w	r6, [r0, ip]
            cir_y[cir_size] = y_8th_cnt;
 800b142:	f822 800c 	strh.w	r8, [r2, ip]
        else if(x_int[0] != x_int[2]) {
 800b146:	d015      	beq.n	800b174 <lv_draw_mask_radius_init+0x3dc>
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 800b148:	9e07      	ldr	r6, [sp, #28]
 800b14a:	f886 b000 	strb.w	fp, [r6]
            c->cir_opa[cir_size] *= 16;
 800b14e:	f8d4 c004 	ldr.w	ip, [r4, #4]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 800b152:	9e06      	ldr	r6, [sp, #24]
            c->cir_opa[cir_size] *= 16;
 800b154:	f81c 7001 	ldrb.w	r7, [ip, r1]
 800b158:	013f      	lsls	r7, r7, #4
 800b15a:	f80c 7001 	strb.w	r7, [ip, r1]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 800b15e:	9f08      	ldr	r7, [sp, #32]
            cir_x[cir_size] = x_int[0] - 1;
 800b160:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b162:	f820 100e 	strh.w	r1, [r0, lr]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 800b166:	443e      	add	r6, r7
            cir_y[cir_size] = y_8th_cnt;
 800b168:	f822 800e 	strh.w	r8, [r2, lr]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 800b16c:	6861      	ldr	r1, [r4, #4]
 800b16e:	f106 0b08 	add.w	fp, r6, #8
 800b172:	e7d3      	b.n	800b11c <lv_draw_mask_radius_init+0x384>
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 800b174:	9e06      	ldr	r6, [sp, #24]
 800b176:	44b3      	add	fp, r6
 800b178:	9e07      	ldr	r6, [sp, #28]
 800b17a:	f886 b000 	strb.w	fp, [r6]
            c->cir_opa[cir_size] *= 16;
 800b17e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800b182:	f81c 7001 	ldrb.w	r7, [ip, r1]
 800b186:	013f      	lsls	r7, r7, #4
 800b188:	f80c 7001 	strb.w	r7, [ip, r1]
            cir_x[cir_size] = x_int[0] - 1;
 800b18c:	9909      	ldr	r1, [sp, #36]	; 0x24
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 800b18e:	9f08      	ldr	r7, [sp, #32]
            cir_x[cir_size] = x_int[0] - 1;
 800b190:	f820 100e 	strh.w	r1, [r0, lr]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 800b194:	6861      	ldr	r1, [r4, #4]
            cir_y[cir_size] = y_8th_cnt;
 800b196:	f822 800e 	strh.w	r8, [r2, lr]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 800b19a:	370c      	adds	r7, #12
 800b19c:	f801 7009 	strb.w	r7, [r1, r9]
 800b1a0:	e7be      	b.n	800b120 <lv_draw_mask_radius_init+0x388>
        cir_x[cir_size] = cir_y[i];
 800b1a2:	f932 7015 	ldrsh.w	r7, [r2, r5, lsl #1]
 800b1a6:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
        cir_y[cir_size] = cir_x[i];
 800b1aa:	f930 7015 	ldrsh.w	r7, [r0, r5, lsl #1]
 800b1ae:	f822 7011 	strh.w	r7, [r2, r1, lsl #1]
        c->cir_opa[cir_size] = c->cir_opa[i];
 800b1b2:	6867      	ldr	r7, [r4, #4]
 800b1b4:	f817 c005 	ldrb.w	ip, [r7, r5]
 800b1b8:	f807 c001 	strb.w	ip, [r7, r1]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 800b1bc:	3101      	adds	r1, #1
 800b1be:	3d01      	subs	r5, #1
 800b1c0:	b209      	sxth	r1, r1
 800b1c2:	e706      	b.n	800afd2 <lv_draw_mask_radius_init+0x23a>
        c->opa_start_on_y[y] = i;
 800b1c4:	f82c 3017 	strh.w	r3, [ip, r7, lsl #1]
        c->x_start_on_y[y] = cir_x[i];
 800b1c8:	68a5      	ldr	r5, [r4, #8]
 800b1ca:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 800b1ce:	f825 8017 	strh.w	r8, [r5, r7, lsl #1]
 800b1d2:	eb05 0e47 	add.w	lr, r5, r7, lsl #1
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 800b1d6:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 800b1da:	42bd      	cmp	r5, r7
 800b1dc:	d101      	bne.n	800b1e2 <lv_draw_mask_radius_init+0x44a>
 800b1de:	428b      	cmp	r3, r1
 800b1e0:	db03      	blt.n	800b1ea <lv_draw_mask_radius_init+0x452>
        y++;
 800b1e2:	9d00      	ldr	r5, [sp, #0]
 800b1e4:	3501      	adds	r5, #1
 800b1e6:	9500      	str	r5, [sp, #0]
 800b1e8:	e704      	b.n	800aff4 <lv_draw_mask_radius_init+0x25c>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 800b1ea:	f930 5013 	ldrsh.w	r5, [r0, r3, lsl #1]
 800b1ee:	f8be 8000 	ldrh.w	r8, [lr]
 800b1f2:	4545      	cmp	r5, r8
 800b1f4:	bfa8      	it	ge
 800b1f6:	4645      	movge	r5, r8
 800b1f8:	f8ae 5000 	strh.w	r5, [lr]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	e7ea      	b.n	800b1d6 <lv_draw_mask_radius_init+0x43e>

0800b200 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 800b200:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800b202:	2130      	movs	r1, #48	; 0x30
{
 800b204:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800b206:	f008 fa78 	bl	80136fa <lv_memset_00>
    dsc->bg_color = lv_color_white();
    dsc->bg_grad.stops[0].color = lv_color_white();
    dsc->bg_grad.stops[1].color = lv_color_black();
 800b20a:	2300      	movs	r3, #0
 800b20c:	71e3      	strb	r3, [r4, #7]
    dsc->bg_grad.stops[1].frac = 0xFF;
    dsc->bg_grad.stops_count = 2;
    dsc->border_color = lv_color_black();
 800b20e:	7623      	strb	r3, [r4, #24]
    dsc->shadow_color = lv_color_black();
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800b210:	4b0c      	ldr	r3, [pc, #48]	; (800b244 <lv_draw_rect_dsc_init+0x44>)
 800b212:	6123      	str	r3, [r4, #16]
    dsc->bg_opa = LV_OPA_COVER;
 800b214:	23ff      	movs	r3, #255	; 0xff
 800b216:	70e3      	strb	r3, [r4, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
 800b218:	7563      	strb	r3, [r4, #21]
    dsc->outline_opa = LV_OPA_COVER;
 800b21a:	84a3      	strh	r3, [r4, #36]	; 0x24
    dsc->border_opa = LV_OPA_COVER;
    dsc->shadow_opa = LV_OPA_COVER;
 800b21c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    dsc->border_opa = LV_OPA_COVER;
 800b220:	8ba3      	ldrh	r3, [r4, #28]
 800b222:	f423 537b 	bic.w	r3, r3, #16064	; 0x3ec0
 800b226:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    dsc->bg_grad.stops[1].frac = 0xFF;
 800b22a:	f240 22ff 	movw	r2, #767	; 0x2ff
    dsc->border_opa = LV_OPA_COVER;
 800b22e:	f443 53f7 	orr.w	r3, r3, #7904	; 0x1ee0
    dsc->bg_grad.stops[1].frac = 0xFF;
 800b232:	8122      	strh	r2, [r4, #8]
    dsc->border_opa = LV_OPA_COVER;
 800b234:	f043 031f 	orr.w	r3, r3, #31
    dsc->bg_color = lv_color_white();
 800b238:	f240 1201 	movw	r2, #257	; 0x101
 800b23c:	80a2      	strh	r2, [r4, #4]
    dsc->border_opa = LV_OPA_COVER;
 800b23e:	83a3      	strh	r3, [r4, #28]
    dsc->border_side = LV_BORDER_SIDE_FULL;
}
 800b240:	bd10      	pop	{r4, pc}
 800b242:	bf00      	nop
 800b244:	08020240 	.word	0x08020240

0800b248 <lv_draw_rect>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b248:	88d3      	ldrh	r3, [r2, #6]
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 800b24a:	b470      	push	{r4, r5, r6}
 800b24c:	8856      	ldrh	r6, [r2, #2]
 800b24e:	3301      	adds	r3, #1
 800b250:	1b9b      	subs	r3, r3, r6
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800b252:	b21b      	sxth	r3, r3
 800b254:	2b00      	cmp	r3, #0
 800b256:	dd09      	ble.n	800b26c <lv_draw_rect+0x24>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b258:	8893      	ldrh	r3, [r2, #4]
 800b25a:	8814      	ldrh	r4, [r2, #0]
 800b25c:	3301      	adds	r3, #1
 800b25e:	1b1b      	subs	r3, r3, r4
 800b260:	b21b      	sxth	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	dd02      	ble.n	800b26c <lv_draw_rect+0x24>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);

    LV_ASSERT_MEM_INTEGRITY();
}
 800b266:	bc70      	pop	{r4, r5, r6}
    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 800b268:	6903      	ldr	r3, [r0, #16]
 800b26a:	4718      	bx	r3
}
 800b26c:	bc70      	pop	{r4, r5, r6}
 800b26e:	4770      	bx	lr

0800b270 <lv_draw_transform>:
 *   GLOBAL FUNCTIONS
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 800b270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b274:	9f08      	ldr	r7, [sp, #32]
 800b276:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 800b27a:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 800b27e:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
 800b282:	e9dd e80a 	ldrd	lr, r8, [sp, #40]	; 0x28
    LV_ASSERT_NULL(draw_ctx);
 800b286:	b900      	cbnz	r0, 800b28a <lv_draw_transform+0x1a>
 800b288:	e7fe      	b.n	800b288 <lv_draw_transform+0x18>
    if(draw_ctx->draw_transform == NULL) {
 800b28a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800b28c:	b14c      	cbz	r4, 800b2a2 <lv_draw_transform+0x32>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 800b28e:	e9cd 7c08 	strd	r7, ip, [sp, #32]
 800b292:	e9cd e80a 	strd	lr, r8, [sp, #40]	; 0x28
 800b296:	e9cd 5606 	strd	r5, r6, [sp, #24]
 800b29a:	46a4      	mov	ip, r4

}
 800b29c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 800b2a0:	4760      	bx	ip
}
 800b2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2a6 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 800b2a6:	b570      	push	{r4, r5, r6, lr}
 800b2a8:	b086      	sub	sp, #24
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	460d      	mov	r5, r1
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b2b2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	b953      	cbnz	r3, 800b2d0 <_lv_img_buf_get_transformed_area+0x2a>
 800b2ba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800b2be:	d107      	bne.n	800b2d0 <_lv_img_buf_get_transformed_area+0x2a>
        res->x1 = 0;
        res->y1 = 0;
        res->x2 = w - 1;
 800b2c0:	3d01      	subs	r5, #1
        res->y2 = h - 1;
 800b2c2:	3801      	subs	r0, #1
        res->x1 = 0;
 800b2c4:	8023      	strh	r3, [r4, #0]
        res->y1 = 0;
 800b2c6:	8063      	strh	r3, [r4, #2]
        res->x2 = w - 1;
 800b2c8:	80a5      	strh	r5, [r4, #4]
        res->y2 = h - 1;
 800b2ca:	80e0      	strh	r0, [r4, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 800b2cc:	b006      	add	sp, #24
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
    lv_point_t p[4] = {
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f8ad 3008 	strh.w	r3, [sp, #8]
 800b2d6:	f8ad 300a 	strh.w	r3, [sp, #10]
 800b2da:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b2de:	f8ad 3010 	strh.w	r3, [sp, #16]
 800b2e2:	f8ad 0012 	strh.w	r0, [sp, #18]
 800b2e6:	f8ad 0016 	strh.w	r0, [sp, #22]
    lv_point_transform(&p[0], angle, zoom, pivot);
 800b2ea:	4633      	mov	r3, r6
 800b2ec:	a802      	add	r0, sp, #8
 800b2ee:	e9cd 1200 	strd	r1, r2, [sp]
    lv_point_t p[4] = {
 800b2f2:	f8ad 500c 	strh.w	r5, [sp, #12]
 800b2f6:	f8ad 5014 	strh.w	r5, [sp, #20]
    lv_point_transform(&p[0], angle, zoom, pivot);
 800b2fa:	f007 fc53 	bl	8012ba4 <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 800b2fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b302:	4633      	mov	r3, r6
 800b304:	a803      	add	r0, sp, #12
 800b306:	f007 fc4d 	bl	8012ba4 <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 800b30a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b30e:	4633      	mov	r3, r6
 800b310:	a804      	add	r0, sp, #16
 800b312:	f007 fc47 	bl	8012ba4 <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 800b316:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b31a:	4633      	mov	r3, r6
 800b31c:	a805      	add	r0, sp, #20
 800b31e:	f007 fc41 	bl	8012ba4 <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 800b322:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800b326:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 800b32a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 800b32e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800b332:	42ab      	cmp	r3, r5
 800b334:	461a      	mov	r2, r3
 800b336:	bfa8      	it	ge
 800b338:	462a      	movge	r2, r5
 800b33a:	4282      	cmp	r2, r0
 800b33c:	bfa8      	it	ge
 800b33e:	4602      	movge	r2, r0
 800b340:	428a      	cmp	r2, r1
 800b342:	bfa8      	it	ge
 800b344:	460a      	movge	r2, r1
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 800b346:	42ab      	cmp	r3, r5
 800b348:	bfb8      	it	lt
 800b34a:	462b      	movlt	r3, r5
 800b34c:	4283      	cmp	r3, r0
 800b34e:	bfb8      	it	lt
 800b350:	4603      	movlt	r3, r0
 800b352:	428b      	cmp	r3, r1
 800b354:	bfb8      	it	lt
 800b356:	460b      	movlt	r3, r1
 800b358:	3302      	adds	r3, #2
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 800b35a:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 800b35e:	80a3      	strh	r3, [r4, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 800b360:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800b364:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 800b368:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 800b36c:	42ab      	cmp	r3, r5
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 800b36e:	f1a2 0202 	sub.w	r2, r2, #2
 800b372:	8022      	strh	r2, [r4, #0]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 800b374:	461a      	mov	r2, r3
 800b376:	bfa8      	it	ge
 800b378:	462a      	movge	r2, r5
 800b37a:	4282      	cmp	r2, r0
 800b37c:	bfa8      	it	ge
 800b37e:	4602      	movge	r2, r0
 800b380:	428a      	cmp	r2, r1
 800b382:	bfa8      	it	ge
 800b384:	460a      	movge	r2, r1
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 800b386:	42ab      	cmp	r3, r5
 800b388:	bfb8      	it	lt
 800b38a:	462b      	movlt	r3, r5
 800b38c:	4283      	cmp	r3, r0
 800b38e:	bfb8      	it	lt
 800b390:	4603      	movlt	r3, r0
 800b392:	428b      	cmp	r3, r1
 800b394:	bfb8      	it	lt
 800b396:	460b      	movlt	r3, r1
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 800b398:	3a02      	subs	r2, #2
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 800b39a:	3302      	adds	r3, #2
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 800b39c:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 800b39e:	80e3      	strh	r3, [r4, #6]
 800b3a0:	e794      	b.n	800b2cc <_lv_img_buf_get_transformed_area+0x26>
	...

0800b3a4 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 800b3a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	460f      	mov	r7, r1
 800b3aa:	9201      	str	r2, [sp, #4]
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 800b3ac:	f007 f82c 	bl	8012408 <lv_tick_get>
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800b3b0:	4c11      	ldr	r4, [pc, #68]	; (800b3f8 <_lv_img_cache_open+0x54>)
 800b3b2:	9b01      	ldr	r3, [sp, #4]
 800b3b4:	4629      	mov	r1, r5
    uint32_t t_start  = lv_tick_get();
 800b3b6:	4606      	mov	r6, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800b3b8:	463a      	mov	r2, r7
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 fb04 	bl	800b9c8 <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	b948      	cbnz	r0, 800b3d8 <_lv_img_cache_open+0x34>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	212c      	movs	r1, #44	; 0x2c
 800b3c8:	f008 f997 	bl	80136fa <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800b3cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3d0:	62a3      	str	r3, [r4, #40]	; 0x28
        return NULL;
 800b3d2:	4628      	mov	r0, r5
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
 800b3d4:	b003      	add	sp, #12
 800b3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cached_src->life = 0;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	62a3      	str	r3, [r4, #40]	; 0x28
    if(cached_src->dec_dsc.time_to_open == 0) {
 800b3dc:	69e3      	ldr	r3, [r4, #28]
 800b3de:	b10b      	cbz	r3, 800b3e4 <_lv_img_cache_open+0x40>
    return cached_src;
 800b3e0:	4805      	ldr	r0, [pc, #20]	; (800b3f8 <_lv_img_cache_open+0x54>)
 800b3e2:	e7f7      	b.n	800b3d4 <_lv_img_cache_open+0x30>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	f007 f811 	bl	801240c <lv_tick_elaps>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800b3ea:	b108      	cbz	r0, 800b3f0 <_lv_img_cache_open+0x4c>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800b3ec:	61e0      	str	r0, [r4, #28]
 800b3ee:	e7f7      	b.n	800b3e0 <_lv_img_cache_open+0x3c>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	61e3      	str	r3, [r4, #28]
    return cached_src;
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	e7ed      	b.n	800b3d4 <_lv_img_cache_open+0x30>
 800b3f8:	20000df0 	.word	0x20000df0

0800b3fc <lv_img_cache_invalidate_src>:

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 800b3fc:	4770      	bx	lr
	...

0800b400 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 800b400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 800b402:	4608      	mov	r0, r1
{
 800b404:	460e      	mov	r6, r1
 800b406:	4615      	mov	r5, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800b408:	f7fe fa60 	bl	80098cc <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800b40c:	4604      	mov	r4, r0
 800b40e:	b9d8      	cbnz	r0, 800b448 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800b410:	7833      	ldrb	r3, [r6, #0]
 800b412:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800b416:	3b04      	subs	r3, #4
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	2b10      	cmp	r3, #16
 800b41c:	d811      	bhi.n	800b442 <lv_img_decoder_built_in_info+0x42>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800b41e:	8873      	ldrh	r3, [r6, #2]
 800b420:	886a      	ldrh	r2, [r5, #2]
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800b422:	6831      	ldr	r1, [r6, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800b424:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800b428:	f363 124f 	bfi	r2, r3, #5, #11
 800b42c:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800b42e:	682b      	ldr	r3, [r5, #0]
 800b430:	4a1c      	ldr	r2, [pc, #112]	; (800b4a4 <lv_img_decoder_built_in_info+0xa4>)
 800b432:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
 800b436:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800b43a:	400a      	ands	r2, r1
         *function*/
        header->w = 1;
        header->h = 1;
        /*Symbols always have transparent parts. Important because of cover check in the draw
         *function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800b43c:	4313      	orrs	r3, r2
 800b43e:	602b      	str	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
 800b440:	2401      	movs	r4, #1
}
 800b442:	4620      	mov	r0, r4
 800b444:	b004      	add	sp, #16
 800b446:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800b448:	2801      	cmp	r0, #1
 800b44a:	d123      	bne.n	800b494 <lv_img_decoder_built_in_info+0x94>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 800b44c:	4630      	mov	r0, r6
 800b44e:	f007 fdf3 	bl	8013038 <lv_fs_get_ext>
 800b452:	4915      	ldr	r1, [pc, #84]	; (800b4a8 <lv_img_decoder_built_in_info+0xa8>)
 800b454:	f7f4 febc 	bl	80001d0 <strcmp>
 800b458:	b9d0      	cbnz	r0, 800b490 <lv_img_decoder_built_in_info+0x90>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 800b45a:	2202      	movs	r2, #2
 800b45c:	4631      	mov	r1, r6
 800b45e:	a801      	add	r0, sp, #4
 800b460:	f007 fdac 	bl	8012fbc <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800b464:	b970      	cbnz	r0, 800b484 <lv_img_decoder_built_in_info+0x84>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 800b466:	2204      	movs	r2, #4
 800b468:	466b      	mov	r3, sp
 800b46a:	4629      	mov	r1, r5
 800b46c:	eb0d 0002 	add.w	r0, sp, r2
 800b470:	f007 fc8b 	bl	8012d8a <lv_fs_read>
 800b474:	4606      	mov	r6, r0
            lv_fs_close(&f);
 800b476:	a801      	add	r0, sp, #4
 800b478:	f007 fc68 	bl	8012d4c <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800b47c:	b946      	cbnz	r6, 800b490 <lv_img_decoder_built_in_info+0x90>
 800b47e:	9b00      	ldr	r3, [sp, #0]
 800b480:	2b04      	cmp	r3, #4
 800b482:	d105      	bne.n	800b490 <lv_img_decoder_built_in_info+0x90>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800b484:	782b      	ldrb	r3, [r5, #0]
 800b486:	331c      	adds	r3, #28
 800b488:	f003 031f 	and.w	r3, r3, #31
 800b48c:	2b10      	cmp	r3, #16
 800b48e:	d9d8      	bls.n	800b442 <lv_img_decoder_built_in_info+0x42>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800b490:	2400      	movs	r4, #0
 800b492:	e7d6      	b.n	800b442 <lv_img_decoder_built_in_info+0x42>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800b494:	2802      	cmp	r0, #2
 800b496:	d1fb      	bne.n	800b490 <lv_img_decoder_built_in_info+0x90>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 800b49e:	4b03      	ldr	r3, [pc, #12]	; (800b4ac <lv_img_decoder_built_in_info+0xac>)
 800b4a0:	e7cc      	b.n	800b43c <lv_img_decoder_built_in_info+0x3c>
 800b4a2:	bf00      	nop
 800b4a4:	001ffc1f 	.word	0x001ffc1f
 800b4a8:	0801e2e3 	.word	0x0801e2e3
 800b4ac:	0020040b 	.word	0x0020040b

0800b4b0 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800b4b0:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b4b2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
{
 800b4b4:	460c      	mov	r4, r1
    if(user_data) {
 800b4b6:	b195      	cbz	r5, 800b4de <lv_img_decoder_built_in_close+0x2e>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b4b8:	7c0b      	ldrb	r3, [r1, #16]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d102      	bne.n	800b4c4 <lv_img_decoder_built_in_close+0x14>
            lv_fs_close(&user_data->f);
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f007 fc44 	bl	8012d4c <lv_fs_close>
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 800b4c4:	68e8      	ldr	r0, [r5, #12]
 800b4c6:	b108      	cbz	r0, 800b4cc <lv_img_decoder_built_in_close+0x1c>
 800b4c8:	f007 ff4c 	bl	8013364 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 800b4cc:	6928      	ldr	r0, [r5, #16]
 800b4ce:	b108      	cbz	r0, 800b4d4 <lv_img_decoder_built_in_close+0x24>
 800b4d0:	f007 ff48 	bl	8013364 <lv_mem_free>

        lv_mem_free(user_data);
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	f007 ff45 	bl	8013364 <lv_mem_free>
        dsc->user_data = NULL;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	6263      	str	r3, [r4, #36]	; 0x24
    }
}
 800b4de:	bd38      	pop	{r3, r4, r5, pc}

0800b4e0 <lv_img_decoder_built_in_read_line>:
{
 800b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b4e4:	7d08      	ldrb	r0, [r1, #20]
{
 800b4e6:	b08b      	sub	sp, #44	; 0x2c
 800b4e8:	469b      	mov	fp, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b4ea:	f000 031e 	and.w	r3, r0, #30
 800b4ee:	2b04      	cmp	r3, #4
{
 800b4f0:	f9bd a050 	ldrsh.w	sl, [sp, #80]	; 0x50
 800b4f4:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 800b4f8:	460e      	mov	r6, r1
 800b4fa:	4614      	mov	r4, r2
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b4fc:	d003      	beq.n	800b506 <lv_img_decoder_built_in_read_line+0x26>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800b4fe:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b502:	2b06      	cmp	r3, #6
 800b504:	d12d      	bne.n	800b562 <lv_img_decoder_built_in_read_line+0x82>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b506:	7c37      	ldrb	r7, [r6, #16]
 800b508:	2f01      	cmp	r7, #1
 800b50a:	d001      	beq.n	800b510 <lv_img_decoder_built_in_read_line+0x30>
    uint32_t btr = len * (px_size >> 3);
    uint32_t br  = 0;
    res = lv_fs_read(&user_data->f, buf, btr, &br);
    if(res != LV_FS_RES_OK || btr != br) {
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 800b50c:	2700      	movs	r7, #0
 800b50e:	e024      	b.n	800b55a <lv_img_decoder_built_in_read_line+0x7a>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800b510:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b514:	f8d6 9024 	ldr.w	r9, [r6, #36]	; 0x24
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800b518:	f7fe f9b8 	bl	800988c <lv_img_cf_get_px_size>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800b51c:	6971      	ldr	r1, [r6, #20]
 800b51e:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800b522:	fb1b 4101 	smlabb	r1, fp, r1, r4
 800b526:	4341      	muls	r1, r0
 800b528:	10c9      	asrs	r1, r1, #3
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800b52a:	4605      	mov	r5, r0
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800b52c:	2200      	movs	r2, #0
 800b52e:	3104      	adds	r1, #4
 800b530:	4648      	mov	r0, r9
 800b532:	f007 fcec 	bl	8012f0e <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800b536:	2800      	cmp	r0, #0
 800b538:	d1e8      	bne.n	800b50c <lv_img_decoder_built_in_read_line+0x2c>
    uint32_t btr = len * (px_size >> 3);
 800b53a:	f3c5 05c7 	ubfx	r5, r5, #3, #8
 800b53e:	fb15 fa0a 	smulbb	sl, r5, sl
    uint32_t br  = 0;
 800b542:	9006      	str	r0, [sp, #24]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 800b544:	ab06      	add	r3, sp, #24
 800b546:	4652      	mov	r2, sl
 800b548:	4641      	mov	r1, r8
 800b54a:	4648      	mov	r0, r9
 800b54c:	f007 fc1d 	bl	8012d8a <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800b550:	2800      	cmp	r0, #0
 800b552:	d1db      	bne.n	800b50c <lv_img_decoder_built_in_read_line+0x2c>
 800b554:	9b06      	ldr	r3, [sp, #24]
 800b556:	459a      	cmp	sl, r3
 800b558:	d1d8      	bne.n	800b50c <lv_img_decoder_built_in_read_line+0x2c>
}
 800b55a:	4638      	mov	r0, r7
 800b55c:	b00b      	add	sp, #44	; 0x2c
 800b55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800b562:	f1a3 020b 	sub.w	r2, r3, #11
 800b566:	2a03      	cmp	r2, #3
 800b568:	f200 80b1 	bhi.w	800b6ce <lv_img_decoder_built_in_read_line+0x1ee>
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800b56c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800b570:	f8ad 3010 	strh.w	r3, [sp, #16]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800b574:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 800b578:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 800b57c:	9305      	str	r3, [sp, #20]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800b57e:	4b9f      	ldr	r3, [pc, #636]	; (800b7fc <lv_img_decoder_built_in_read_line+0x31c>)
 800b580:	aa06      	add	r2, sp, #24
 800b582:	f103 0710 	add.w	r7, r3, #16
 800b586:	4691      	mov	r9, r2
 800b588:	6818      	ldr	r0, [r3, #0]
 800b58a:	6859      	ldr	r1, [r3, #4]
 800b58c:	4615      	mov	r5, r2
 800b58e:	c503      	stmia	r5!, {r0, r1}
 800b590:	3308      	adds	r3, #8
 800b592:	42bb      	cmp	r3, r7
 800b594:	462a      	mov	r2, r5
 800b596:	d1f7      	bne.n	800b588 <lv_img_decoder_built_in_read_line+0xa8>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 800b598:	7a31      	ldrb	r1, [r6, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800b59a:	2300      	movs	r3, #0
 800b59c:	b21a      	sxth	r2, r3
 800b59e:	4592      	cmp	sl, r2
 800b5a0:	dc14      	bgt.n	800b5cc <lv_img_decoder_built_in_read_line+0xec>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800b5a2:	7d30      	ldrb	r0, [r6, #20]
 800b5a4:	f000 001f 	and.w	r0, r0, #31
 800b5a8:	f7fe f970 	bl	800988c <lv_img_cf_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	4083      	lsls	r3, r0
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	9302      	str	r3, [sp, #8]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800b5b6:	7d33      	ldrb	r3, [r6, #20]
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800b5b8:	9001      	str	r0, [sp, #4]
    switch(dsc->header.cf) {
 800b5ba:	f003 031f 	and.w	r3, r3, #31
 800b5be:	3b0b      	subs	r3, #11
 800b5c0:	2b03      	cmp	r3, #3
 800b5c2:	d85c      	bhi.n	800b67e <lv_img_decoder_built_in_read_line+0x19e>
 800b5c4:	e8df f003 	tbb	[pc, r3]
 800b5c8:	52433306 	.word	0x52433306
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
 800b5cc:	f808 1013 	strb.w	r1, [r8, r3, lsl #1]
    for(i = 0; i < len; i++) {
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	e7e3      	b.n	800b59c <lv_img_decoder_built_in_read_line+0xbc>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800b5d4:	6975      	ldr	r5, [r6, #20]
 800b5d6:	f3c5 258a 	ubfx	r5, r5, #10, #11
 800b5da:	3507      	adds	r5, #7
 800b5dc:	10eb      	asrs	r3, r5, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 800b5de:	10e1      	asrs	r1, r4, #3
            pos = 7 - (x & 0x7);
 800b5e0:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800b5e2:	461d      	mov	r5, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 800b5e4:	fb03 110b 	mla	r1, r3, fp, r1
            pos = 7 - (x & 0x7);
 800b5e8:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 800b5ec:	f10d 0910 	add.w	r9, sp, #16
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800b5f0:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b5f2:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 800b5f6:	9103      	str	r1, [sp, #12]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800b5f8:	f007 fee6 	bl	80133c8 <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 800b5fc:	4607      	mov	r7, r0
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d0ab      	beq.n	800b55a <lv_img_decoder_built_in_read_line+0x7a>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800b602:	7c33      	ldrb	r3, [r6, #16]
 800b604:	9903      	ldr	r1, [sp, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d13d      	bne.n	800b686 <lv_img_decoder_built_in_read_line+0x1a6>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800b60a:	6873      	ldr	r3, [r6, #4]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	4419      	add	r1, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800b610:	9a01      	ldr	r2, [sp, #4]
 800b612:	f1c2 0008 	rsb	r0, r2, #8
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800b616:	2300      	movs	r3, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800b618:	f108 0801 	add.w	r8, r8, #1
            pos = 8 - px_size;
 800b61c:	b240      	sxtb	r0, r0
    for(i = 0; i < len; i++) {
 800b61e:	b21a      	sxth	r2, r3
 800b620:	4592      	cmp	sl, r2
 800b622:	dc3d      	bgt.n	800b6a0 <lv_img_decoder_built_in_read_line+0x1c0>
        if(pos < 0) {
            pos = 8 - px_size;
            data_tmp++;
        }
    }
    lv_mem_buf_release(fs_buf);
 800b624:	4638      	mov	r0, r7
 800b626:	f007 ff1b 	bl	8013460 <lv_mem_buf_release>
    return LV_RES_OK;
 800b62a:	2701      	movs	r7, #1
 800b62c:	e795      	b.n	800b55a <lv_img_decoder_built_in_read_line+0x7a>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b62e:	6975      	ldr	r5, [r6, #20]
 800b630:	f3c5 258a 	ubfx	r5, r5, #10, #11
 800b634:	3503      	adds	r5, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 800b636:	10a1      	asrs	r1, r4, #2
            pos = 6 - (x & 0x3) * 2;
 800b638:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b63a:	10ab      	asrs	r3, r5, #2
            pos = 6 - (x & 0x3) * 2;
 800b63c:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b640:	461d      	mov	r5, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 800b642:	fb03 110b 	mla	r1, r3, fp, r1
            pos = 6 - (x & 0x3) * 2;
 800b646:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 800b648:	f10d 0914 	add.w	r9, sp, #20
            break;
 800b64c:	e7d0      	b.n	800b5f0 <lv_img_decoder_built_in_read_line+0x110>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b64e:	6975      	ldr	r5, [r6, #20]
 800b650:	f3c5 258a 	ubfx	r5, r5, #10, #11
 800b654:	3501      	adds	r5, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800b656:	1061      	asrs	r1, r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b658:	106b      	asrs	r3, r5, #1
            pos = 4 - (x & 0x1) * 4;
 800b65a:	f014 0f01 	tst.w	r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b65e:	461d      	mov	r5, r3
            ofs += w * y + (x >> 1); /*First pixel*/
 800b660:	fb03 110b 	mla	r1, r3, fp, r1
            pos = 4 - (x & 0x1) * 4;
 800b664:	bf0c      	ite	eq
 800b666:	2404      	moveq	r4, #4
 800b668:	2400      	movne	r4, #0
 800b66a:	e7c1      	b.n	800b5f0 <lv_img_decoder_built_in_read_line+0x110>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800b66c:	6975      	ldr	r5, [r6, #20]
 800b66e:	f3c5 218a 	ubfx	r1, r5, #10, #11
 800b672:	460d      	mov	r5, r1
            ofs += w * y + x;  /*First pixel*/
 800b674:	fb1b 4101 	smlabb	r1, fp, r1, r4
            pos = 0;
 800b678:	2400      	movs	r4, #0
    switch(dsc->header.cf) {
 800b67a:	46a1      	mov	r9, r4
 800b67c:	e7b8      	b.n	800b5f0 <lv_img_decoder_built_in_read_line+0x110>
 800b67e:	2400      	movs	r4, #0
 800b680:	4621      	mov	r1, r4
 800b682:	4625      	mov	r5, r4
 800b684:	e7f9      	b.n	800b67a <lv_img_decoder_built_in_read_line+0x19a>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800b686:	2200      	movs	r2, #0
 800b688:	3104      	adds	r1, #4
 800b68a:	4658      	mov	r0, fp
 800b68c:	f007 fc3f 	bl	8012f0e <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800b690:	4639      	mov	r1, r7
 800b692:	2300      	movs	r3, #0
 800b694:	462a      	mov	r2, r5
 800b696:	4658      	mov	r0, fp
 800b698:	f007 fb77 	bl	8012d8a <lv_fs_read>
 800b69c:	4639      	mov	r1, r7
 800b69e:	e7b7      	b.n	800b610 <lv_img_decoder_built_in_read_line+0x130>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800b6a0:	780a      	ldrb	r2, [r1, #0]
 800b6a2:	9d02      	ldr	r5, [sp, #8]
 800b6a4:	4122      	asrs	r2, r4
 800b6a6:	402a      	ands	r2, r5
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800b6a8:	7d35      	ldrb	r5, [r6, #20]
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800b6aa:	b2d2      	uxtb	r2, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800b6ac:	f005 051f 	and.w	r5, r5, #31
 800b6b0:	2d0e      	cmp	r5, #14
 800b6b2:	bf18      	it	ne
 800b6b4:	f819 2002 	ldrbne.w	r2, [r9, r2]
 800b6b8:	f808 2013 	strb.w	r2, [r8, r3, lsl #1]
        pos -= px_size;
 800b6bc:	9a01      	ldr	r2, [sp, #4]
 800b6be:	1aa4      	subs	r4, r4, r2
 800b6c0:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800b6c2:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800b6c4:	bfbc      	itt	lt
 800b6c6:	4604      	movlt	r4, r0
            data_tmp++;
 800b6c8:	3101      	addlt	r1, #1
    for(i = 0; i < len; i++) {
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	e7a7      	b.n	800b61e <lv_img_decoder_built_in_read_line+0x13e>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800b6ce:	3b07      	subs	r3, #7
 800b6d0:	2b03      	cmp	r3, #3
 800b6d2:	f63f af1b 	bhi.w	800b50c <lv_img_decoder_built_in_read_line+0x2c>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800b6d6:	f000 001f 	and.w	r0, r0, #31
 800b6da:	f7fe f8d7 	bl	800988c <lv_img_cf_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800b6de:	2301      	movs	r3, #1
 800b6e0:	4083      	lsls	r3, r0
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	9301      	str	r3, [sp, #4]
    switch(dsc->header.cf) {
 800b6e8:	7d33      	ldrb	r3, [r6, #20]
 800b6ea:	f003 031f 	and.w	r3, r3, #31
 800b6ee:	3b07      	subs	r3, #7
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800b6f0:	4681      	mov	r9, r0
    switch(dsc->header.cf) {
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d871      	bhi.n	800b7da <lv_img_decoder_built_in_read_line+0x2fa>
 800b6f6:	e8df f003 	tbb	[pc, r3]
 800b6fa:	4502      	.short	0x4502
 800b6fc:	6655      	.short	0x6655
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800b6fe:	6975      	ldr	r5, [r6, #20]
 800b700:	f3c5 258a 	ubfx	r5, r5, #10, #11
 800b704:	3507      	adds	r5, #7
            ofs += w * y + (x >> 3); /*First pixel*/
 800b706:	10e1      	asrs	r1, r4, #3
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800b708:	10eb      	asrs	r3, r5, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 800b70a:	fb03 1b0b 	mla	fp, r3, fp, r1
            pos = 7 - (x & 0x7);
 800b70e:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800b710:	461d      	mov	r5, r3
            ofs += 8;                /*Skip the palette*/
 800b712:	f10b 0108 	add.w	r1, fp, #8
            pos = 7 - (x & 0x7);
 800b716:	f004 0407 	and.w	r4, r4, #7
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800b71a:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b71c:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 800b720:	9102      	str	r1, [sp, #8]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800b722:	f007 fe51 	bl	80133c8 <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 800b726:	4607      	mov	r7, r0
 800b728:	2800      	cmp	r0, #0
 800b72a:	f43f aeef 	beq.w	800b50c <lv_img_decoder_built_in_read_line+0x2c>
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800b72e:	7c33      	ldrb	r3, [r6, #16]
 800b730:	9902      	ldr	r1, [sp, #8]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d155      	bne.n	800b7e2 <lv_img_decoder_built_in_read_line+0x302>
        data_tmp                     = img_dsc->data + ofs;
 800b736:	6873      	ldr	r3, [r6, #4]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	4419      	add	r1, r3
            pos = 8 - px_size;
 800b73c:	f1c9 0508 	rsb	r5, r9, #8
 800b740:	f108 0801 	add.w	r8, r8, #1
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800b744:	2000      	movs	r0, #0
            pos = 8 - px_size;
 800b746:	b26d      	sxtb	r5, r5
    for(i = 0; i < len; i++) {
 800b748:	b203      	sxth	r3, r0
 800b74a:	459a      	cmp	sl, r3
 800b74c:	f77f af6a 	ble.w	800b624 <lv_img_decoder_built_in_read_line+0x144>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800b750:	780b      	ldrb	r3, [r1, #0]
 800b752:	9a01      	ldr	r2, [sp, #4]
 800b754:	4123      	asrs	r3, r4
 800b756:	4013      	ands	r3, r2
        lv_color_t color = user_data->palette[val_act];
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	f8db 200c 	ldr.w	r2, [fp, #12]
 800b75e:	5cd2      	ldrb	r2, [r2, r3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
 800b760:	f808 2c01 	strb.w	r2, [r8, #-1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 800b764:	f8db 2010 	ldr.w	r2, [fp, #16]
        pos -= px_size;
 800b768:	eba4 0409 	sub.w	r4, r4, r9
 800b76c:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800b76e:	2c00      	cmp	r4, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 800b770:	5cd3      	ldrb	r3, [r2, r3]
 800b772:	f888 3000 	strb.w	r3, [r8]
            pos = 8 - px_size;
 800b776:	bfbc      	itt	lt
 800b778:	462c      	movlt	r4, r5
            data_tmp++;
 800b77a:	3101      	addlt	r1, #1
    for(i = 0; i < len; i++) {
 800b77c:	3001      	adds	r0, #1
 800b77e:	f108 0802 	add.w	r8, r8, #2
 800b782:	e7e1      	b.n	800b748 <lv_img_decoder_built_in_read_line+0x268>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b784:	6975      	ldr	r5, [r6, #20]
 800b786:	f3c5 258a 	ubfx	r5, r5, #10, #11
 800b78a:	3503      	adds	r5, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 800b78c:	10a1      	asrs	r1, r4, #2
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b78e:	10ab      	asrs	r3, r5, #2
            pos = 6 - (x & 0x3) * 2;
 800b790:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 800b792:	fb03 1b0b 	mla	fp, r3, fp, r1
            pos = 6 - (x & 0x3) * 2;
 800b796:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b79a:	461d      	mov	r5, r3
            ofs += 16;               /*Skip the palette*/
 800b79c:	f10b 0110 	add.w	r1, fp, #16
            pos = 6 - (x & 0x3) * 2;
 800b7a0:	0064      	lsls	r4, r4, #1
            break;
 800b7a2:	e7ba      	b.n	800b71a <lv_img_decoder_built_in_read_line+0x23a>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b7a4:	6975      	ldr	r5, [r6, #20]
 800b7a6:	f3c5 258a 	ubfx	r5, r5, #10, #11
 800b7aa:	3501      	adds	r5, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800b7ac:	1061      	asrs	r1, r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b7ae:	106b      	asrs	r3, r5, #1
            pos = 4 - (x & 0x1) * 4;
 800b7b0:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800b7b4:	fb03 1b0b 	mla	fp, r3, fp, r1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b7b8:	461d      	mov	r5, r3
            ofs += 64;               /*Skip the palette*/
 800b7ba:	f10b 0140 	add.w	r1, fp, #64	; 0x40
            pos = 4 - (x & 0x1) * 4;
 800b7be:	bf0c      	ite	eq
 800b7c0:	2404      	moveq	r4, #4
 800b7c2:	2400      	movne	r4, #0
 800b7c4:	e7a9      	b.n	800b71a <lv_img_decoder_built_in_read_line+0x23a>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800b7c6:	6975      	ldr	r5, [r6, #20]
 800b7c8:	f3c5 218a 	ubfx	r1, r5, #10, #11
            ofs += w * y + x;  /*First pixel*/
 800b7cc:	fb1b 4b01 	smlabb	fp, fp, r1, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800b7d0:	460d      	mov	r5, r1
            pos = 0;
 800b7d2:	2400      	movs	r4, #0
            ofs += 1024;       /*Skip the palette*/
 800b7d4:	f50b 6180 	add.w	r1, fp, #1024	; 0x400
            break;
 800b7d8:	e79f      	b.n	800b71a <lv_img_decoder_built_in_read_line+0x23a>
    switch(dsc->header.cf) {
 800b7da:	2100      	movs	r1, #0
 800b7dc:	460c      	mov	r4, r1
 800b7de:	460d      	mov	r5, r1
 800b7e0:	e79b      	b.n	800b71a <lv_img_decoder_built_in_read_line+0x23a>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	3104      	adds	r1, #4
 800b7e6:	4658      	mov	r0, fp
 800b7e8:	f007 fb91 	bl	8012f0e <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	462a      	mov	r2, r5
 800b7f2:	4658      	mov	r0, fp
 800b7f4:	f007 fac9 	bl	8012d8a <lv_fs_read>
 800b7f8:	4639      	mov	r1, r7
 800b7fa:	e79f      	b.n	800b73c <lv_img_decoder_built_in_read_line+0x25c>
 800b7fc:	0801e1d8 	.word	0x0801e1d8

0800b800 <lv_img_decoder_built_in_open>:
{
 800b800:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b804:	7c0d      	ldrb	r5, [r1, #16]
 800b806:	2d01      	cmp	r5, #1
{
 800b808:	4680      	mov	r8, r0
 800b80a:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b80c:	d130      	bne.n	800b870 <lv_img_decoder_built_in_open+0x70>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800b80e:	6848      	ldr	r0, [r1, #4]
 800b810:	f007 fc12 	bl	8013038 <lv_fs_get_ext>
 800b814:	4953      	ldr	r1, [pc, #332]	; (800b964 <lv_img_decoder_built_in_open+0x164>)
 800b816:	f7f4 fcdb 	bl	80001d0 <strcmp>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d15b      	bne.n	800b8d6 <lv_img_decoder_built_in_open+0xd6>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800b81e:	6861      	ldr	r1, [r4, #4]
 800b820:	2202      	movs	r2, #2
 800b822:	a801      	add	r0, sp, #4
 800b824:	f007 fbca 	bl	8012fbc <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800b828:	2800      	cmp	r0, #0
 800b82a:	d154      	bne.n	800b8d6 <lv_img_decoder_built_in_open+0xd6>
        if(dsc->user_data == NULL) {
 800b82c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b82e:	b943      	cbnz	r3, 800b842 <lv_img_decoder_built_in_open+0x42>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800b830:	2014      	movs	r0, #20
 800b832:	f007 fd79 	bl	8013328 <lv_mem_alloc>
 800b836:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800b838:	b900      	cbnz	r0, 800b83c <lv_img_decoder_built_in_open+0x3c>
 800b83a:	e7fe      	b.n	800b83a <lv_img_decoder_built_in_open+0x3a>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800b83c:	2114      	movs	r1, #20
 800b83e:	f007 ff5c 	bl	80136fa <lv_memset_00>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b842:	6a62      	ldr	r2, [r4, #36]	; 0x24
    while(len) {
 800b844:	ab01      	add	r3, sp, #4
 800b846:	f102 010c 	add.w	r1, r2, #12
        *d8 = *s8;
 800b84a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b84e:	f802 0b01 	strb.w	r0, [r2], #1
    while(len) {
 800b852:	428a      	cmp	r2, r1
 800b854:	d1f9      	bne.n	800b84a <lv_img_decoder_built_in_open+0x4a>
    lv_img_cf_t cf = dsc->header.cf;
 800b856:	7d23      	ldrb	r3, [r4, #20]
 800b858:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b85c:	2814      	cmp	r0, #20
 800b85e:	d815      	bhi.n	800b88c <lv_img_decoder_built_in_open+0x8c>
 800b860:	4a41      	ldr	r2, [pc, #260]	; (800b968 <lv_img_decoder_built_in_open+0x168>)
 800b862:	40c2      	lsrs	r2, r0
 800b864:	07d3      	lsls	r3, r2, #31
 800b866:	d511      	bpl.n	800b88c <lv_img_decoder_built_in_open+0x8c>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800b868:	7c23      	ldrb	r3, [r4, #16]
 800b86a:	b15b      	cbz	r3, 800b884 <lv_img_decoder_built_in_open+0x84>
            return LV_RES_OK;
 800b86c:	2501      	movs	r5, #1
 800b86e:	e005      	b.n	800b87c <lv_img_decoder_built_in_open+0x7c>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800b870:	2d00      	cmp	r5, #0
 800b872:	d1f0      	bne.n	800b856 <lv_img_decoder_built_in_open+0x56>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 800b874:	684b      	ldr	r3, [r1, #4]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1ec      	bne.n	800b856 <lv_img_decoder_built_in_open+0x56>
}
 800b87c:	4628      	mov	r0, r5
 800b87e:	b004      	add	sp, #16
 800b880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800b884:	6863      	ldr	r3, [r4, #4]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	61a3      	str	r3, [r4, #24]
 800b88a:	e7ef      	b.n	800b86c <lv_img_decoder_built_in_open+0x6c>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800b88c:	1fc2      	subs	r2, r0, #7
 800b88e:	2a03      	cmp	r2, #3
 800b890:	d862      	bhi.n	800b958 <lv_img_decoder_built_in_open+0x158>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800b892:	f7fd fffb 	bl	800988c <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
 800b896:	6a63      	ldr	r3, [r4, #36]	; 0x24
        uint32_t palette_size = 1 << px_size;
 800b898:	2701      	movs	r7, #1
 800b89a:	4087      	lsls	r7, r0
        if(dsc->user_data == NULL) {
 800b89c:	b943      	cbnz	r3, 800b8b0 <lv_img_decoder_built_in_open+0xb0>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800b89e:	2014      	movs	r0, #20
 800b8a0:	f007 fd42 	bl	8013328 <lv_mem_alloc>
 800b8a4:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800b8a6:	b900      	cbnz	r0, 800b8aa <lv_img_decoder_built_in_open+0xaa>
 800b8a8:	e7fe      	b.n	800b8a8 <lv_img_decoder_built_in_open+0xa8>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800b8aa:	2114      	movs	r1, #20
 800b8ac:	f007 ff25 	bl	80136fa <lv_memset_00>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800b8b0:	4638      	mov	r0, r7
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b8b2:	6a66      	ldr	r6, [r4, #36]	; 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800b8b4:	f007 fd38 	bl	8013328 <lv_mem_alloc>
 800b8b8:	60f0      	str	r0, [r6, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 800b8ba:	b900      	cbnz	r0, 800b8be <lv_img_decoder_built_in_open+0xbe>
 800b8bc:	e7fe      	b.n	800b8bc <lv_img_decoder_built_in_open+0xbc>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 800b8be:	4638      	mov	r0, r7
 800b8c0:	f007 fd32 	bl	8013328 <lv_mem_alloc>
 800b8c4:	6130      	str	r0, [r6, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 800b8c6:	b900      	cbnz	r0, 800b8ca <lv_img_decoder_built_in_open+0xca>
 800b8c8:	e7fe      	b.n	800b8c8 <lv_img_decoder_built_in_open+0xc8>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 800b8ca:	68f3      	ldr	r3, [r6, #12]
 800b8cc:	b92b      	cbnz	r3, 800b8da <lv_img_decoder_built_in_open+0xda>
            lv_img_decoder_built_in_close(decoder, dsc);
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4640      	mov	r0, r8
 800b8d2:	f7ff fded 	bl	800b4b0 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 800b8d6:	2500      	movs	r5, #0
 800b8d8:	e7d0      	b.n	800b87c <lv_img_decoder_built_in_open+0x7c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b8da:	7c25      	ldrb	r5, [r4, #16]
 800b8dc:	2d01      	cmp	r5, #1
 800b8de:	d121      	bne.n	800b924 <lv_img_decoder_built_in_open+0x124>
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	2104      	movs	r1, #4
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	f007 fb12 	bl	8012f0e <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 800b8ea:	2400      	movs	r4, #0
 800b8ec:	42bc      	cmp	r4, r7
 800b8ee:	d0c5      	beq.n	800b87c <lv_img_decoder_built_in_open+0x7c>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 800b8f0:	2204      	movs	r2, #4
 800b8f2:	eb0d 0102 	add.w	r1, sp, r2
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	f007 fa46 	bl	8012d8a <lv_fs_read>
 800b8fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b902:	f89d 1004 	ldrb.w	r1, [sp, #4]
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 800b906:	68f2      	ldr	r2, [r6, #12]
 800b908:	09db      	lsrs	r3, r3, #7
 800b90a:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 800b90e:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800b912:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 800b916:	5513      	strb	r3, [r2, r4]
                user_data->opa[i]     = cur_color.ch.alpha;
 800b918:	6933      	ldr	r3, [r6, #16]
 800b91a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b91e:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
 800b920:	3401      	adds	r4, #1
 800b922:	e7e3      	b.n	800b8ec <lv_img_decoder_built_in_open+0xec>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800b924:	6863      	ldr	r3, [r4, #4]
 800b926:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 800b928:	2000      	movs	r0, #0
 800b92a:	42b8      	cmp	r0, r7
 800b92c:	f102 0204 	add.w	r2, r2, #4
 800b930:	d09c      	beq.n	800b86c <lv_img_decoder_built_in_open+0x6c>
 800b932:	f812 3c03 	ldrb.w	r3, [r2, #-3]
 800b936:	f812 4c04 	ldrb.w	r4, [r2, #-4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800b93a:	68f1      	ldr	r1, [r6, #12]
 800b93c:	09db      	lsrs	r3, r3, #7
 800b93e:	ea43 13d4 	orr.w	r3, r3, r4, lsr #7
 800b942:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 800b946:	ea43 13d4 	orr.w	r3, r3, r4, lsr #7
 800b94a:	540b      	strb	r3, [r1, r0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800b94c:	6933      	ldr	r3, [r6, #16]
 800b94e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b952:	5419      	strb	r1, [r3, r0]
            for(i = 0; i < palette_size; i++) {
 800b954:	3001      	adds	r0, #1
 800b956:	e7e8      	b.n	800b92a <lv_img_decoder_built_in_open+0x12a>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT) {
 800b958:	f1a0 030b 	sub.w	r3, r0, #11
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d985      	bls.n	800b86c <lv_img_decoder_built_in_open+0x6c>
 800b960:	e7b5      	b.n	800b8ce <lv_img_decoder_built_in_open+0xce>
 800b962:	bf00      	nop
 800b964:	0801e2e3 	.word	0x0801e2e3
 800b968:	00104070 	.word	0x00104070

0800b96c <lv_img_decoder_get_info>:
{
 800b96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b970:	460f      	mov	r7, r1
 800b972:	4606      	mov	r6, r0
    lv_memset_00(header, sizeof(lv_img_header_t));
 800b974:	2104      	movs	r1, #4
 800b976:	4638      	mov	r0, r7
 800b978:	f007 febf 	bl	80136fa <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 800b97c:	b91e      	cbnz	r6, 800b986 <lv_img_decoder_get_info+0x1a>
 800b97e:	2500      	movs	r5, #0
}
 800b980:	4628      	mov	r0, r5
 800b982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800b986:	4630      	mov	r0, r6
 800b988:	f7fd ffa0 	bl	80098cc <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800b98c:	b910      	cbnz	r0, 800b994 <lv_img_decoder_get_info+0x28>
        if(img_dsc->data == NULL) return LV_RES_INV;
 800b98e:	68b3      	ldr	r3, [r6, #8]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d0f4      	beq.n	800b97e <lv_img_decoder_get_info+0x12>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800b994:	480b      	ldr	r0, [pc, #44]	; (800b9c4 <lv_img_decoder_get_info+0x58>)
 800b996:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800b9c4 <lv_img_decoder_get_info+0x58>
 800b99a:	f007 fbd4 	bl	8013146 <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 800b99e:	2500      	movs	r5, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	2c00      	cmp	r4, #0
 800b9a4:	d0ec      	beq.n	800b980 <lv_img_decoder_get_info+0x14>
        if(d->info_cb) {
 800b9a6:	6823      	ldr	r3, [r4, #0]
 800b9a8:	b133      	cbz	r3, 800b9b8 <lv_img_decoder_get_info+0x4c>
            res = d->info_cb(d, src, header);
 800b9aa:	463a      	mov	r2, r7
 800b9ac:	4631      	mov	r1, r6
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	4798      	blx	r3
            if(res == LV_RES_OK) break;
 800b9b2:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 800b9b4:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
 800b9b6:	d0e3      	beq.n	800b980 <lv_img_decoder_get_info+0x14>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	4640      	mov	r0, r8
 800b9bc:	f007 fbc9 	bl	8013152 <_lv_ll_get_next>
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	e7ee      	b.n	800b9a2 <lv_img_decoder_get_info+0x36>
 800b9c4:	20000e1c 	.word	0x20000e1c

0800b9c8 <lv_img_decoder_open>:
{
 800b9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9cc:	460f      	mov	r7, r1
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800b9ce:	2128      	movs	r1, #40	; 0x28
{
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	4616      	mov	r6, r2
 800b9d4:	461d      	mov	r5, r3
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800b9d6:	f007 fe90 	bl	80136fa <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 800b9da:	b91f      	cbnz	r7, 800b9e4 <lv_img_decoder_open+0x1c>
 800b9dc:	2600      	movs	r6, #0
}
 800b9de:	4630      	mov	r0, r6
 800b9e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	f7fd ff71 	bl	80098cc <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800b9ea:	b910      	cbnz	r0, 800b9f2 <lv_img_decoder_open+0x2a>
        if(img_dsc->data == NULL) return LV_RES_INV;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d0f4      	beq.n	800b9dc <lv_img_decoder_open+0x14>
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b9f2:	2801      	cmp	r0, #1
    dsc->color    = color;
 800b9f4:	7226      	strb	r6, [r4, #8]
    dsc->src_type = src_type;
 800b9f6:	7420      	strb	r0, [r4, #16]
    dsc->frame_id = frame_id;
 800b9f8:	60e5      	str	r5, [r4, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b9fa:	d11c      	bne.n	800ba36 <lv_img_decoder_open+0x6e>
        size_t fnlen = strlen(src);
 800b9fc:	4638      	mov	r0, r7
 800b9fe:	f7f4 fbf1 	bl	80001e4 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 800ba02:	3001      	adds	r0, #1
 800ba04:	f007 fc90 	bl	8013328 <lv_mem_alloc>
 800ba08:	6060      	str	r0, [r4, #4]
        LV_ASSERT_MALLOC(dsc->src);
 800ba0a:	b900      	cbnz	r0, 800ba0e <lv_img_decoder_open+0x46>
 800ba0c:	e7fe      	b.n	800ba0c <lv_img_decoder_open+0x44>
        strcpy((char *)dsc->src, src);
 800ba0e:	4639      	mov	r1, r7
 800ba10:	f012 fb76 	bl	801e100 <strcpy>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800ba14:	481a      	ldr	r0, [pc, #104]	; (800ba80 <lv_img_decoder_open+0xb8>)
 800ba16:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800ba80 <lv_img_decoder_open+0xb8>
 800ba1a:	f007 fb94 	bl	8013146 <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 800ba1e:	2600      	movs	r6, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800ba20:	4605      	mov	r5, r0
        res = decoder->info_cb(decoder, src, &dsc->header);
 800ba22:	f104 0814 	add.w	r8, r4, #20
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800ba26:	b945      	cbnz	r5, 800ba3a <lv_img_decoder_open+0x72>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 800ba28:	7c23      	ldrb	r3, [r4, #16]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d1d7      	bne.n	800b9de <lv_img_decoder_open+0x16>
        lv_mem_free((void *)dsc->src);
 800ba2e:	6860      	ldr	r0, [r4, #4]
 800ba30:	f007 fc98 	bl	8013364 <lv_mem_free>
 800ba34:	e7d3      	b.n	800b9de <lv_img_decoder_open+0x16>
        dsc->src = src;
 800ba36:	6067      	str	r7, [r4, #4]
 800ba38:	e7ec      	b.n	800ba14 <lv_img_decoder_open+0x4c>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 800ba3a:	682b      	ldr	r3, [r5, #0]
 800ba3c:	b1cb      	cbz	r3, 800ba72 <lv_img_decoder_open+0xaa>
 800ba3e:	686a      	ldr	r2, [r5, #4]
 800ba40:	b1ba      	cbz	r2, 800ba72 <lv_img_decoder_open+0xaa>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800ba42:	4642      	mov	r2, r8
 800ba44:	4639      	mov	r1, r7
 800ba46:	4628      	mov	r0, r5
 800ba48:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 800ba4a:	2801      	cmp	r0, #1
        res = decoder->info_cb(decoder, src, &dsc->header);
 800ba4c:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
 800ba4e:	d110      	bne.n	800ba72 <lv_img_decoder_open+0xaa>
        res = decoder->open_cb(decoder, dsc);
 800ba50:	686b      	ldr	r3, [r5, #4]
        dsc->decoder = decoder;
 800ba52:	6025      	str	r5, [r4, #0]
        res = decoder->open_cb(decoder, dsc);
 800ba54:	4621      	mov	r1, r4
 800ba56:	4628      	mov	r0, r5
 800ba58:	4798      	blx	r3
        if(res == LV_RES_OK) return res;
 800ba5a:	2801      	cmp	r0, #1
        res = decoder->open_cb(decoder, dsc);
 800ba5c:	4606      	mov	r6, r0
        if(res == LV_RES_OK) return res;
 800ba5e:	d0be      	beq.n	800b9de <lv_img_decoder_open+0x16>
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 800ba60:	2104      	movs	r1, #4
 800ba62:	4640      	mov	r0, r8
 800ba64:	f007 fe49 	bl	80136fa <lv_memset_00>
        dsc->error_msg = NULL;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	6223      	str	r3, [r4, #32]
        dsc->img_data  = NULL;
 800ba6c:	61a3      	str	r3, [r4, #24]
        dsc->user_data = NULL;
 800ba6e:	6263      	str	r3, [r4, #36]	; 0x24
        dsc->time_to_open = 0;
 800ba70:	61e3      	str	r3, [r4, #28]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800ba72:	4629      	mov	r1, r5
 800ba74:	4648      	mov	r0, r9
 800ba76:	f007 fb6c 	bl	8013152 <_lv_ll_get_next>
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	e7d3      	b.n	800ba26 <lv_img_decoder_open+0x5e>
 800ba7e:	bf00      	nop
 800ba80:	20000e1c 	.word	0x20000e1c

0800ba84 <lv_img_decoder_read_line>:
{
 800ba84:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800ba86:	6805      	ldr	r5, [r0, #0]
 800ba88:	68ac      	ldr	r4, [r5, #8]
 800ba8a:	b14c      	cbz	r4, 800baa0 <lv_img_decoder_read_line+0x1c>
 800ba8c:	9e06      	ldr	r6, [sp, #24]
 800ba8e:	e9cd 3600 	strd	r3, r6, [sp]
 800ba92:	4613      	mov	r3, r2
 800ba94:	460a      	mov	r2, r1
 800ba96:	4601      	mov	r1, r0
 800ba98:	4628      	mov	r0, r5
 800ba9a:	47a0      	blx	r4
}
 800ba9c:	b002      	add	sp, #8
 800ba9e:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 800baa0:	4620      	mov	r0, r4
 800baa2:	e7fb      	b.n	800ba9c <lv_img_decoder_read_line+0x18>

0800baa4 <lv_img_decoder_close>:
{
 800baa4:	b510      	push	{r4, lr}
 800baa6:	4604      	mov	r4, r0
    if(dsc->decoder) {
 800baa8:	6800      	ldr	r0, [r0, #0]
 800baaa:	b158      	cbz	r0, 800bac4 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800baac:	68c3      	ldr	r3, [r0, #12]
 800baae:	b10b      	cbz	r3, 800bab4 <lv_img_decoder_close+0x10>
 800bab0:	4621      	mov	r1, r4
 800bab2:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800bab4:	7c23      	ldrb	r3, [r4, #16]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d104      	bne.n	800bac4 <lv_img_decoder_close+0x20>
            lv_mem_free((void *)dsc->src);
 800baba:	6860      	ldr	r0, [r4, #4]
 800babc:	f007 fc52 	bl	8013364 <lv_mem_free>
            dsc->src = NULL;
 800bac0:	2300      	movs	r3, #0
 800bac2:	6063      	str	r3, [r4, #4]
}
 800bac4:	bd10      	pop	{r4, pc}
	...

0800bac8 <lv_img_decoder_create>:
{
 800bac8:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 800baca:	4805      	ldr	r0, [pc, #20]	; (800bae0 <lv_img_decoder_create+0x18>)
 800bacc:	f007 fadb 	bl	8013086 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(decoder);
 800bad0:	4604      	mov	r4, r0
 800bad2:	b900      	cbnz	r0, 800bad6 <lv_img_decoder_create+0xe>
 800bad4:	e7fe      	b.n	800bad4 <lv_img_decoder_create+0xc>
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 800bad6:	2114      	movs	r1, #20
 800bad8:	f007 fe0f 	bl	80136fa <lv_memset_00>
}
 800badc:	4620      	mov	r0, r4
 800bade:	bd10      	pop	{r4, pc}
 800bae0:	20000e1c 	.word	0x20000e1c

0800bae4 <_lv_img_decoder_init>:
{
 800bae4:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 800bae6:	4808      	ldr	r0, [pc, #32]	; (800bb08 <_lv_img_decoder_init+0x24>)
 800bae8:	2114      	movs	r1, #20
 800baea:	f007 fac4 	bl	8013076 <_lv_ll_init>
    decoder = lv_img_decoder_create();
 800baee:	f7ff ffeb 	bl	800bac8 <lv_img_decoder_create>
    LV_ASSERT_MALLOC(decoder);
 800baf2:	b900      	cbnz	r0, 800baf6 <_lv_img_decoder_init+0x12>
 800baf4:	e7fe      	b.n	800baf4 <_lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 800baf6:	4b05      	ldr	r3, [pc, #20]	; (800bb0c <_lv_img_decoder_init+0x28>)
 800baf8:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800bafa:	4b05      	ldr	r3, [pc, #20]	; (800bb10 <_lv_img_decoder_init+0x2c>)
 800bafc:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800bafe:	4b05      	ldr	r3, [pc, #20]	; (800bb14 <_lv_img_decoder_init+0x30>)
 800bb00:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800bb02:	4b05      	ldr	r3, [pc, #20]	; (800bb18 <_lv_img_decoder_init+0x34>)
 800bb04:	60c3      	str	r3, [r0, #12]
}
 800bb06:	bd08      	pop	{r3, pc}
 800bb08:	20000e1c 	.word	0x20000e1c
 800bb0c:	0800b401 	.word	0x0800b401
 800bb10:	0800b801 	.word	0x0800b801
 800bb14:	0800b4e1 	.word	0x0800b4e1
 800bb18:	0800b4b1 	.word	0x0800b4b1

0800bb1c <lv_draw_sw_wait_for_finish>:

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 800bb1c:	4770      	bx	lr

0800bb1e <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 800bb1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb22:	461e      	mov	r6, r3
 800bb24:	4690      	mov	r8, r2

    lv_color_t * dest_bufc =  dest_buf;
    lv_color_t * src_bufc =  src_buf;

    /*Got the first pixel of each buffer*/
    dest_bufc += dest_stride * dest_area->y1;
 800bb26:	f9b6 5002 	ldrsh.w	r5, [r6, #2]
    dest_bufc += dest_area->x1;
 800bb2a:	f9b6 2000 	ldrsh.w	r2, [r6]
{
 800bb2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb30:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24

    src_bufc += src_stride * src_area->y1;
    src_bufc += src_area->x1;
 800bb34:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bb38:	88b4      	ldrh	r4, [r6, #4]
    dest_bufc += dest_area->x1;
 800bb3a:	fb08 2005 	mla	r0, r8, r5, r2
 800bb3e:	180f      	adds	r7, r1, r0
    src_bufc += src_area->x1;
 800bb40:	f9b3 1000 	ldrsh.w	r1, [r3]
 800bb44:	3401      	adds	r4, #1
 800bb46:	fb19 1a0a 	smlabb	sl, r9, sl, r1
 800bb4a:	9908      	ldr	r1, [sp, #32]
 800bb4c:	1aa4      	subs	r4, r4, r2
 800bb4e:	448a      	add	sl, r1

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
 800bb50:	b224      	sxth	r4, r4
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800bb52:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800bb56:	42ab      	cmp	r3, r5
 800bb58:	da01      	bge.n	800bb5e <lv_draw_sw_buffer_copy+0x40>
        lv_memcpy(dest_bufc, src_bufc, line_length);
        dest_bufc += dest_stride;
        src_bufc += src_stride;
    }
}
 800bb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        lv_memcpy(dest_bufc, src_bufc, line_length);
 800bb5e:	4651      	mov	r1, sl
 800bb60:	4638      	mov	r0, r7
 800bb62:	4622      	mov	r2, r4
 800bb64:	3501      	adds	r5, #1
 800bb66:	f007 fca9 	bl	80134bc <lv_memcpy>
        dest_bufc += dest_stride;
 800bb6a:	4447      	add	r7, r8
        src_bufc += src_stride;
 800bb6c:	44ca      	add	sl, r9
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800bb6e:	b22d      	sxth	r5, r5
 800bb70:	e7ef      	b.n	800bb52 <lv_draw_sw_buffer_copy+0x34>
	...

0800bb74 <lv_draw_sw_init_ctx>:
{
 800bb74:	b510      	push	{r4, lr}
 800bb76:	460c      	mov	r4, r1
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 800bb78:	4620      	mov	r0, r4
 800bb7a:	2158      	movs	r1, #88	; 0x58
 800bb7c:	f007 fdbd 	bl	80136fa <lv_memset_00>
    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 800bb80:	4b10      	ldr	r3, [pc, #64]	; (800bbc4 <lv_draw_sw_init_ctx+0x50>)
 800bb82:	6163      	str	r3, [r4, #20]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 800bb84:	4b10      	ldr	r3, [pc, #64]	; (800bbc8 <lv_draw_sw_init_ctx+0x54>)
 800bb86:	6123      	str	r3, [r4, #16]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 800bb88:	4b10      	ldr	r3, [pc, #64]	; (800bbcc <lv_draw_sw_init_ctx+0x58>)
 800bb8a:	6323      	str	r3, [r4, #48]	; 0x30
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 800bb8c:	4b10      	ldr	r3, [pc, #64]	; (800bbd0 <lv_draw_sw_init_ctx+0x5c>)
 800bb8e:	6223      	str	r3, [r4, #32]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 800bb90:	4b10      	ldr	r3, [pc, #64]	; (800bbd4 <lv_draw_sw_init_ctx+0x60>)
 800bb92:	61a3      	str	r3, [r4, #24]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 800bb94:	4b10      	ldr	r3, [pc, #64]	; (800bbd8 <lv_draw_sw_init_ctx+0x64>)
 800bb96:	6263      	str	r3, [r4, #36]	; 0x24
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 800bb98:	4b10      	ldr	r3, [pc, #64]	; (800bbdc <lv_draw_sw_init_ctx+0x68>)
 800bb9a:	62a3      	str	r3, [r4, #40]	; 0x28
    draw_sw_ctx->base_draw.draw_transform = lv_draw_sw_transform;
 800bb9c:	4b10      	ldr	r3, [pc, #64]	; (800bbe0 <lv_draw_sw_init_ctx+0x6c>)
 800bb9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 800bba0:	4b10      	ldr	r3, [pc, #64]	; (800bbe4 <lv_draw_sw_init_ctx+0x70>)
 800bba2:	6363      	str	r3, [r4, #52]	; 0x34
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 800bba4:	4b10      	ldr	r3, [pc, #64]	; (800bbe8 <lv_draw_sw_init_ctx+0x74>)
 800bba6:	63a3      	str	r3, [r4, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 800bba8:	4b10      	ldr	r3, [pc, #64]	; (800bbec <lv_draw_sw_init_ctx+0x78>)
 800bbaa:	63e3      	str	r3, [r4, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 800bbac:	4b10      	ldr	r3, [pc, #64]	; (800bbf0 <lv_draw_sw_init_ctx+0x7c>)
 800bbae:	6423      	str	r3, [r4, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 800bbb0:	4b10      	ldr	r3, [pc, #64]	; (800bbf4 <lv_draw_sw_init_ctx+0x80>)
 800bbb2:	6463      	str	r3, [r4, #68]	; 0x44
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 800bbb4:	4b10      	ldr	r3, [pc, #64]	; (800bbf8 <lv_draw_sw_init_ctx+0x84>)
 800bbb6:	64a3      	str	r3, [r4, #72]	; 0x48
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 800bbb8:	4b10      	ldr	r3, [pc, #64]	; (800bbfc <lv_draw_sw_init_ctx+0x88>)
 800bbba:	6563      	str	r3, [r4, #84]	; 0x54
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 800bbbc:	232c      	movs	r3, #44	; 0x2c
 800bbbe:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800bbc0:	bd10      	pop	{r4, pc}
 800bbc2:	bf00      	nop
 800bbc4:	0800bc89 	.word	0x0800bc89
 800bbc8:	0800f3f9 	.word	0x0800f3f9
 800bbcc:	0800ee33 	.word	0x0800ee33
 800bbd0:	0800d8f1 	.word	0x0800d8f1
 800bbd4:	0800d2d3 	.word	0x0800d2d3
 800bbd8:	0800dd31 	.word	0x0800dd31
 800bbdc:	0800e481 	.word	0x0800e481
 800bbe0:	0801033f 	.word	0x0801033f
 800bbe4:	0800bb1d 	.word	0x0800bb1d
 800bbe8:	0800bb1f 	.word	0x0800bb1f
 800bbec:	0800d729 	.word	0x0800d729
 800bbf0:	0800d80d 	.word	0x0800d80d
 800bbf4:	0800d867 	.word	0x0800d867
 800bbf8:	0800d8eb 	.word	0x0800d8eb
 800bbfc:	0800c699 	.word	0x0800c699

0800bc00 <get_rounded_area>:

    q->draw_ctx->clip_area = clip_area_ori;
}

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 800bc00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc04:	4607      	mov	r7, r0
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 800bc06:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 800bc0a:	b200      	sxth	r0, r0
 800bc0c:	eba1 0952 	sub.w	r9, r1, r2, lsr #1
    int32_t thick_half = thickness / 2;
 800bc10:	0856      	lsrs	r6, r2, #1
{
 800bc12:	4690      	mov	r8, r2
 800bc14:	461d      	mov	r5, r3
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 800bc16:	f007 faaf 	bl	8013178 <lv_trigo_sin>
 800bc1a:	fb09 f000 	mul.w	r0, r9, r0
 800bc1e:	11c4      	asrs	r4, r0, #7
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 800bc20:	4638      	mov	r0, r7
 800bc22:	f007 faa9 	bl	8013178 <lv_trigo_sin>

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
        cir_x = (cir_x - pa) >> ps;
        res_area->x1 = cir_x - thick_half + thick_corr;
 800bc26:	ea6f 0208 	mvn.w	r2, r8
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 800bc2a:	fb09 f000 	mul.w	r0, r9, r0
    if(cir_x > 0) {
 800bc2e:	2c00      	cmp	r4, #0
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 800bc30:	ea4f 10e0 	mov.w	r0, r0, asr #7
        res_area->x1 = cir_x - thick_half + thick_corr;
 800bc34:	b2b6      	uxth	r6, r6
 800bc36:	f002 0301 	and.w	r3, r2, #1
    if(cir_x > 0) {
 800bc3a:	dd14      	ble.n	800bc66 <get_rounded_area+0x66>
        cir_x = (cir_x - pa) >> ps;
 800bc3c:	3c7f      	subs	r4, #127	; 0x7f
        res_area->x1 = cir_x - thick_half + thick_corr;
 800bc3e:	f3c4 240f 	ubfx	r4, r4, #8, #16
 800bc42:	1b9a      	subs	r2, r3, r6
 800bc44:	4422      	add	r2, r4
 800bc46:	802a      	strh	r2, [r5, #0]
        res_area->x2 = cir_x + thick_half;
 800bc48:	4434      	add	r4, r6
        cir_x = (cir_x + pa) >> ps;
        res_area->x1 = cir_x - thick_half;
        res_area->x2 = cir_x + thick_half - thick_corr;
    }

    if(cir_y > 0) {
 800bc4a:	2800      	cmp	r0, #0
        res_area->x2 = cir_x + thick_half - thick_corr;
 800bc4c:	80ac      	strh	r4, [r5, #4]
    if(cir_y > 0) {
 800bc4e:	dd12      	ble.n	800bc76 <get_rounded_area+0x76>
        cir_y = (cir_y - pa) >> ps;
 800bc50:	f1a0 017f 	sub.w	r1, r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half + thick_corr;
 800bc54:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800bc58:	1b9a      	subs	r2, r3, r6
 800bc5a:	440a      	add	r2, r1
        res_area->y2 = cir_y + thick_half;
 800bc5c:	4431      	add	r1, r6
        res_area->y1 = cir_y - thick_half + thick_corr;
 800bc5e:	806a      	strh	r2, [r5, #2]
        res_area->y2 = cir_y + thick_half;
 800bc60:	80e9      	strh	r1, [r5, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 800bc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        cir_x = (cir_x + pa) >> ps;
 800bc66:	347f      	adds	r4, #127	; 0x7f
        res_area->x1 = cir_x - thick_half;
 800bc68:	f3c4 240f 	ubfx	r4, r4, #8, #16
 800bc6c:	1ba2      	subs	r2, r4, r6
 800bc6e:	802a      	strh	r2, [r5, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 800bc70:	1af2      	subs	r2, r6, r3
 800bc72:	4414      	add	r4, r2
 800bc74:	e7e9      	b.n	800bc4a <get_rounded_area+0x4a>
        cir_y = (cir_y + pa) >> ps;
 800bc76:	307f      	adds	r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half;
 800bc78:	f3c0 200f 	ubfx	r0, r0, #8, #16
 800bc7c:	1b82      	subs	r2, r0, r6
 800bc7e:	806a      	strh	r2, [r5, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 800bc80:	1af2      	subs	r2, r6, r3
 800bc82:	4410      	add	r0, r2
 800bc84:	80e8      	strh	r0, [r5, #6]
}
 800bc86:	e7ec      	b.n	800bc62 <get_rounded_area+0x62>

0800bc88 <lv_draw_sw_arc>:
{
 800bc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8c:	ed2d 8b04 	vpush	{d8-d9}
 800bc90:	4699      	mov	r9, r3
    if(dsc->opa <= LV_OPA_MIN) return;
 800bc92:	7b0b      	ldrb	r3, [r1, #12]
{
 800bc94:	b0cd      	sub	sp, #308	; 0x134
    if(dsc->opa <= LV_OPA_MIN) return;
 800bc96:	2b02      	cmp	r3, #2
{
 800bc98:	f8bd 8168 	ldrh.w	r8, [sp, #360]	; 0x168
 800bc9c:	f8bd 516c 	ldrh.w	r5, [sp, #364]	; 0x16c
 800bca0:	9106      	str	r1, [sp, #24]
 800bca2:	4606      	mov	r6, r0
 800bca4:	4614      	mov	r4, r2
    if(dsc->opa <= LV_OPA_MIN) return;
 800bca6:	f240 8095 	bls.w	800bdd4 <lv_draw_sw_arc+0x14c>
    if(dsc->width == 0) return;
 800bcaa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800bcae:	9305      	str	r3, [sp, #20]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 808f 	beq.w	800bdd4 <lv_draw_sw_arc+0x14c>
    if(start_angle == end_angle) return;
 800bcb6:	45a8      	cmp	r8, r5
 800bcb8:	f000 808c 	beq.w	800bdd4 <lv_draw_sw_arc+0x14c>
    if(width > radius) width = radius;
 800bcbc:	454b      	cmp	r3, r9
 800bcbe:	bfc8      	it	gt
 800bcc0:	fa0f f389 	sxthgt.w	r3, r9
    lv_draw_rect_dsc_init(&cir_dsc);
 800bcc4:	a825      	add	r0, sp, #148	; 0x94
    if(width > radius) width = radius;
 800bcc6:	bfc8      	it	gt
 800bcc8:	9305      	strgt	r3, [sp, #20]
    lv_draw_rect_dsc_init(&cir_dsc);
 800bcca:	f7ff fa99 	bl	800b200 <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 800bcce:	9b06      	ldr	r3, [sp, #24]
 800bcd0:	7b5b      	ldrb	r3, [r3, #13]
 800bcd2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bcd6:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
    if(dsc->img_src) {
 800bcda:	9b06      	ldr	r3, [sp, #24]
 800bcdc:	689a      	ldr	r2, [r3, #8]
 800bcde:	7b1b      	ldrb	r3, [r3, #12]
 800bce0:	2a00      	cmp	r2, #0
 800bce2:	d07c      	beq.n	800bdde <lv_draw_sw_arc+0x156>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 800bce4:	2100      	movs	r1, #0
 800bce6:	f88d 1097 	strb.w	r1, [sp, #151]	; 0x97
        cir_dsc.bg_img_src = dsc->img_src;
 800bcea:	9228      	str	r2, [sp, #160]	; 0xa0
        cir_dsc.bg_img_opa = dsc->opa;
 800bcec:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
    area_out.y1 = center->y - radius;
 800bcf0:	8867      	ldrh	r7, [r4, #2]
    area_out.x1 = center->x - radius;
 800bcf2:	8822      	ldrh	r2, [r4, #0]
 800bcf4:	f109 33ff 	add.w	r3, r9, #4294967295
 800bcf8:	eba2 0009 	sub.w	r0, r2, r9
    area_out.y1 = center->y - radius;
 800bcfc:	eba7 0109 	sub.w	r1, r7, r9
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 800bd00:	fa12 f283 	uxtah	r2, r2, r3
    area_out.y2 = center->y + radius - 1;
 800bd04:	fa17 f383 	uxtah	r3, r7, r3
    area_in.x1 += dsc->width;
 800bd08:	9f06      	ldr	r7, [sp, #24]
 800bd0a:	887f      	ldrh	r7, [r7, #2]
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 800bd0c:	b292      	uxth	r2, r2
    area_out.x1 = center->x - radius;
 800bd0e:	b280      	uxth	r0, r0
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 800bd10:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    area_in.x2 -= dsc->width;
 800bd14:	1bd2      	subs	r2, r2, r7
 800bd16:	b292      	uxth	r2, r2
    area_out.x1 = center->x - radius;
 800bd18:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    area_in.x1 += dsc->width;
 800bd1c:	4438      	add	r0, r7
 800bd1e:	b280      	uxth	r0, r0
    area_in.x2 -= dsc->width;
 800bd20:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bd24:	3201      	adds	r2, #1
    area_out.y1 = center->y - radius;
 800bd26:	b289      	uxth	r1, r1
    area_out.y2 = center->y + radius - 1;
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	1a12      	subs	r2, r2, r0
    area_out.y1 = center->y - radius;
 800bd2c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    area_out.y2 = center->y + radius - 1;
 800bd30:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    area_in.y1 += dsc->width;
 800bd34:	4439      	add	r1, r7
    area_in.y2 -= dsc->width;
 800bd36:	1bdb      	subs	r3, r3, r7
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 800bd38:	b212      	sxth	r2, r2
    area_in.y1 += dsc->width;
 800bd3a:	b289      	uxth	r1, r1
    area_in.y2 -= dsc->width;
 800bd3c:	b29b      	uxth	r3, r3
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 800bd3e:	2a00      	cmp	r2, #0
    area_in.x1 += dsc->width;
 800bd40:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    area_in.y1 += dsc->width;
 800bd44:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
    area_in.y2 -= dsc->width;
 800bd48:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 800bd4c:	dd4e      	ble.n	800bdec <lv_draw_sw_arc+0x164>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bd4e:	3301      	adds	r3, #1
 800bd50:	1a5b      	subs	r3, r3, r1
 800bd52:	b21b      	sxth	r3, r3
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	dd49      	ble.n	800bdec <lv_draw_sw_arc+0x164>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 800bd58:	2301      	movs	r3, #1
 800bd5a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bd5e:	a90d      	add	r1, sp, #52	; 0x34
 800bd60:	a813      	add	r0, sp, #76	; 0x4c
 800bd62:	f7ff f819 	bl	800ad98 <lv_draw_mask_radius_init>
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 800bd66:	2100      	movs	r1, #0
 800bd68:	a813      	add	r0, sp, #76	; 0x4c
 800bd6a:	f7fe fe65 	bl	800aa38 <lv_draw_mask_add>
        mask_in_param_valid = true;
 800bd6e:	2301      	movs	r3, #1
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 800bd70:	9007      	str	r0, [sp, #28]
        mask_in_param_valid = true;
 800bd72:	9308      	str	r3, [sp, #32]
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 800bd74:	2300      	movs	r3, #0
 800bd76:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bd7a:	a90b      	add	r1, sp, #44	; 0x2c
 800bd7c:	a819      	add	r0, sp, #100	; 0x64
 800bd7e:	f7ff f80b 	bl	800ad98 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 800bd82:	2100      	movs	r1, #0
 800bd84:	a819      	add	r0, sp, #100	; 0x64
 800bd86:	f7fe fe57 	bl	800aa38 <lv_draw_mask_add>
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 800bd8a:	f508 73b4 	add.w	r3, r8, #360	; 0x168
 800bd8e:	42ab      	cmp	r3, r5
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 800bd90:	ee09 0a10 	vmov	s18, r0
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 800bd94:	d003      	beq.n	800bd9e <lv_draw_sw_arc+0x116>
 800bd96:	f505 73b4 	add.w	r3, r5, #360	; 0x168
 800bd9a:	4598      	cmp	r8, r3
 800bd9c:	d130      	bne.n	800be00 <lv_draw_sw_arc+0x178>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800bd9e:	f647 73ff 	movw	r3, #32767	; 0x7fff
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 800bda2:	a925      	add	r1, sp, #148	; 0x94
 800bda4:	aa0b      	add	r2, sp, #44	; 0x2c
 800bda6:	4630      	mov	r0, r6
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800bda8:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 800bdac:	f7ff fa4c 	bl	800b248 <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 800bdb0:	ee19 0a10 	vmov	r0, s18
 800bdb4:	f7fe fe78 	bl	800aaa8 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 800bdb8:	9b07      	ldr	r3, [sp, #28]
 800bdba:	1c59      	adds	r1, r3, #1
 800bdbc:	d002      	beq.n	800bdc4 <lv_draw_sw_arc+0x13c>
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fe fe72 	bl	800aaa8 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_out_param);
 800bdc4:	a819      	add	r0, sp, #100	; 0x64
 800bdc6:	f7fe fe99 	bl	800aafc <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 800bdca:	9b08      	ldr	r3, [sp, #32]
 800bdcc:	b113      	cbz	r3, 800bdd4 <lv_draw_sw_arc+0x14c>
            lv_draw_mask_free_param(&mask_in_param);
 800bdce:	a813      	add	r0, sp, #76	; 0x4c
 800bdd0:	f7fe fe94 	bl	800aafc <lv_draw_mask_free_param>
}
 800bdd4:	b04d      	add	sp, #308	; 0x134
 800bdd6:	ecbd 8b04 	vpop	{d8-d9}
 800bdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cir_dsc.bg_opa = dsc->opa;
 800bdde:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
        cir_dsc.bg_color = dsc->color;
 800bde2:	9b06      	ldr	r3, [sp, #24]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 800bdea:	e781      	b.n	800bcf0 <lv_draw_sw_arc+0x68>
    int16_t mask_in_id = LV_MASK_ID_INV;
 800bdec:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	e9cd 3007 	strd	r3, r0, [sp, #28]
 800bdf6:	e7bd      	b.n	800bd74 <lv_draw_sw_arc+0xec>
    while(start_angle >= 360) start_angle -= 360;
 800bdf8:	f5a8 73b4 	sub.w	r3, r8, #360	; 0x168
 800bdfc:	fa1f f883 	uxth.w	r8, r3
 800be00:	f5b8 7fb4 	cmp.w	r8, #360	; 0x168
 800be04:	d2f8      	bcs.n	800bdf8 <lv_draw_sw_arc+0x170>
    while(end_angle >= 360) end_angle -= 360;
 800be06:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 800be0a:	f080 8210 	bcs.w	800c22e <lv_draw_sw_arc+0x5a6>
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 800be0e:	fa0f f388 	sxth.w	r3, r8
 800be12:	ee08 3a10 	vmov	s16, r3
 800be16:	b22b      	sxth	r3, r5
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800be1e:	f9b4 1000 	ldrsh.w	r1, [r4]
 800be22:	a831      	add	r0, sp, #196	; 0xc4
 800be24:	ee08 3a90 	vmov	s17, r3
 800be28:	ee18 3a10 	vmov	r3, s16
 800be2c:	f7fe ff70 	bl	800ad10 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 800be30:	2100      	movs	r1, #0
 800be32:	a831      	add	r0, sp, #196	; 0xc4
 800be34:	f7fe fe00 	bl	800aa38 <lv_draw_mask_add>
    if(end_angle > start_angle) {
 800be38:	45a8      	cmp	r8, r5
        angle_gap = 360 - (end_angle - start_angle);
 800be3a:	bf3a      	itte	cc
 800be3c:	eba5 0308 	subcc.w	r3, r5, r8
 800be40:	f5c3 73b4 	rsbcc	r3, r3, #360	; 0x168
        angle_gap = start_angle - end_angle;
 800be44:	eba8 0305 	subcs.w	r3, r8, r5
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 800be48:	2b3c      	cmp	r3, #60	; 0x3c
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 800be4a:	ee09 0a90 	vmov	s19, r0
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800be4e:	68b7      	ldr	r7, [r6, #8]
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 800be50:	f340 83c1 	ble.w	800c5d6 <lv_draw_sw_arc+0x94e>
 800be54:	f1b9 0f0a 	cmp.w	r9, #10
 800be58:	f240 83bd 	bls.w	800c5d6 <lv_draw_sw_arc+0x94e>
        q_dsc.radius = radius;
 800be5c:	fa0f f389 	sxth.w	r3, r9
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 800be60:	f1b8 0f59 	cmp.w	r8, #89	; 0x59
        q_dsc.radius = radius;
 800be64:	9302      	str	r3, [sp, #8]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 800be66:	f04f 035a 	mov.w	r3, #90	; 0x5a
 800be6a:	fbb8 f2f3 	udiv	r2, r8, r3
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 800be6e:	fbb5 f3f3 	udiv	r3, r5, r3
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 800be72:	9204      	str	r2, [sp, #16]
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 800be74:	9303      	str	r3, [sp, #12]
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 800be76:	f200 81de 	bhi.w	800c236 <lv_draw_sw_arc+0x5ae>
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800be7a:	9b02      	ldr	r3, [sp, #8]
 800be7c:	9a05      	ldr	r2, [sp, #20]
 800be7e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800be82:	eba3 0a02 	sub.w	sl, r3, r2
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800be86:	f108 035a 	add.w	r3, r8, #90	; 0x5a
 800be8a:	b21b      	sxth	r3, r3
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 800be8c:	2d59      	cmp	r5, #89	; 0x59
 800be8e:	9309      	str	r3, [sp, #36]	; 0x24
 800be90:	f200 81f5 	bhi.w	800c27e <lv_draw_sw_arc+0x5f6>
 800be94:	45a8      	cmp	r8, r5
 800be96:	f080 81f2 	bcs.w	800c27e <lv_draw_sw_arc+0x5f6>
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800be9a:	ee18 0a10 	vmov	r0, s16
 800be9e:	f007 f96b 	bl	8013178 <lv_trigo_sin>
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bea4:	fb0a f000 	mul.w	r0, sl, r0
 800bea8:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800beac:	4618      	mov	r0, r3
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800beae:	f8ad b07e 	strh.w	fp, [sp, #126]	; 0x7e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800beb2:	f8b4 b000 	ldrh.w	fp, [r4]
 800beb6:	f007 f95f 	bl	8013178 <lv_trigo_sin>
 800beba:	9b02      	ldr	r3, [sp, #8]
 800bebc:	4358      	muls	r0, r3
 800bebe:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 800bec2:	ee18 0a90 	vmov	r0, s17
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bec6:	f8ad b080 	strh.w	fp, [sp, #128]	; 0x80
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 800beca:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800bece:	f007 f953 	bl	8013178 <lv_trigo_sin>
 800bed2:	9b02      	ldr	r3, [sp, #8]
 800bed4:	4358      	muls	r0, r3
 800bed6:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800beda:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 800bede:	b200      	sxth	r0, r0
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 800bee0:	f8ad b082 	strh.w	fp, [sp, #130]	; 0x82
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bee4:	f8b4 b000 	ldrh.w	fp, [r4]
 800bee8:	f007 f946 	bl	8013178 <lv_trigo_sin>
 800beec:	fb0a f000 	mul.w	r0, sl, r0
 800bef0:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
 800bef4:	f8ad b07c 	strh.w	fp, [sp, #124]	; 0x7c
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800bef8:	a91f      	add	r1, sp, #124	; 0x7c
 800befa:	463a      	mov	r2, r7
 800befc:	4608      	mov	r0, r1
 800befe:	f006 fcba 	bl	8012876 <_lv_area_intersect>
        if(ok) {
 800bf02:	b130      	cbz	r0, 800bf12 <lv_draw_sw_arc+0x28a>
            q->draw_ctx->clip_area = &quarter_area;
 800bf04:	ab1f      	add	r3, sp, #124	; 0x7c
 800bf06:	60b3      	str	r3, [r6, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800bf08:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf0a:	a925      	add	r1, sp, #148	; 0x94
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	f7ff f99b 	bl	800b248 <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 800bf12:	9b04      	ldr	r3, [sp, #16]
    q->draw_ctx->clip_area = clip_area_ori;
 800bf14:	60b7      	str	r7, [r6, #8]
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	f040 8206 	bne.w	800c328 <lv_draw_sw_arc+0x6a0>
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bf1c:	9b02      	ldr	r3, [sp, #8]
 800bf1e:	9a05      	ldr	r2, [sp, #20]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bf20:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800bf24:	f8b4 a002 	ldrh.w	sl, [r4, #2]
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bf28:	eba3 0b02 	sub.w	fp, r3, r2
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 800bf2c:	9a03      	ldr	r2, [sp, #12]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bf2e:	f108 035a 	add.w	r3, r8, #90	; 0x5a
 800bf32:	b21b      	sxth	r3, r3
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 800bf34:	2a01      	cmp	r2, #1
 800bf36:	9309      	str	r3, [sp, #36]	; 0x24
 800bf38:	f040 820c 	bne.w	800c354 <lv_draw_sw_arc+0x6cc>
 800bf3c:	45a8      	cmp	r8, r5
 800bf3e:	f080 8209 	bcs.w	800c354 <lv_draw_sw_arc+0x6cc>
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bf42:	ee18 0a10 	vmov	r0, s16
 800bf46:	f007 f917 	bl	8013178 <lv_trigo_sin>
 800bf4a:	9b02      	ldr	r3, [sp, #8]
 800bf4c:	4358      	muls	r0, r3
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bf4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bf50:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bf54:	4618      	mov	r0, r3
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bf56:	f8ad a082 	strh.w	sl, [sp, #130]	; 0x82
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bf5a:	f8b4 a000 	ldrh.w	sl, [r4]
 800bf5e:	f007 f90b 	bl	8013178 <lv_trigo_sin>
 800bf62:	fb0b f000 	mul.w	r0, fp, r0
 800bf66:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bf6a:	ee18 0a90 	vmov	r0, s17
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bf6e:	f8ad a080 	strh.w	sl, [sp, #128]	; 0x80
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bf72:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 800bf76:	f007 f8ff 	bl	8013178 <lv_trigo_sin>
 800bf7a:	fb0b f000 	mul.w	r0, fp, r0
 800bf7e:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bf82:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 800bf86:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bf88:	f8ad a07e 	strh.w	sl, [sp, #126]	; 0x7e
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bf8c:	f8b4 a000 	ldrh.w	sl, [r4]
 800bf90:	f007 f8f2 	bl	8013178 <lv_trigo_sin>
 800bf94:	9b02      	ldr	r3, [sp, #8]
 800bf96:	4358      	muls	r0, r3
 800bf98:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 800bf9c:	f8ad a07c 	strh.w	sl, [sp, #124]	; 0x7c
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800bfa0:	a91f      	add	r1, sp, #124	; 0x7c
 800bfa2:	463a      	mov	r2, r7
 800bfa4:	4608      	mov	r0, r1
 800bfa6:	f006 fc66 	bl	8012876 <_lv_area_intersect>
        if(ok) {
 800bfaa:	b130      	cbz	r0, 800bfba <lv_draw_sw_arc+0x332>
            q->draw_ctx->clip_area = &quarter_area;
 800bfac:	ab1f      	add	r3, sp, #124	; 0x7c
 800bfae:	60b3      	str	r3, [r6, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800bfb0:	aa0b      	add	r2, sp, #44	; 0x2c
 800bfb2:	a925      	add	r1, sp, #148	; 0x94
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	f7ff f947 	bl	800b248 <lv_draw_rect>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 800bfba:	9b04      	ldr	r3, [sp, #16]
    q->draw_ctx->clip_area = clip_area_ori;
 800bfbc:	60b7      	str	r7, [r6, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	f040 821f 	bne.w	800c402 <lv_draw_sw_arc+0x77a>
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bfc4:	9b02      	ldr	r3, [sp, #8]
 800bfc6:	9a05      	ldr	r2, [sp, #20]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bfc8:	f8b4 b000 	ldrh.w	fp, [r4]
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bfcc:	eba3 0a02 	sub.w	sl, r3, r2
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 800bfd0:	9b03      	ldr	r3, [sp, #12]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bfd2:	f108 005a 	add.w	r0, r8, #90	; 0x5a
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 800bfd6:	2b02      	cmp	r3, #2
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bfd8:	b200      	sxth	r0, r0
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 800bfda:	f040 8239 	bne.w	800c450 <lv_draw_sw_arc+0x7c8>
 800bfde:	45a8      	cmp	r8, r5
 800bfe0:	f080 8236 	bcs.w	800c450 <lv_draw_sw_arc+0x7c8>
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bfe4:	f007 f8c8 	bl	8013178 <lv_trigo_sin>
 800bfe8:	9b02      	ldr	r3, [sp, #8]
 800bfea:	4358      	muls	r0, r3
 800bfec:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bff0:	ee18 0a10 	vmov	r0, s16
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800bff4:	f8ad b07c 	strh.w	fp, [sp, #124]	; 0x7c
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800bff8:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800bffc:	f007 f8bc 	bl	8013178 <lv_trigo_sin>
 800c000:	fb0a f000 	mul.w	r0, sl, r0
 800c004:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 800c008:	ee18 0a90 	vmov	r0, s17
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c00c:	f8ad b082 	strh.w	fp, [sp, #130]	; 0x82
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 800c010:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800c014:	f007 f8b0 	bl	8013178 <lv_trigo_sin>
 800c018:	9b02      	ldr	r3, [sp, #8]
 800c01a:	4358      	muls	r0, r3
 800c01c:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c020:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 800c024:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 800c026:	f8ad b07e 	strh.w	fp, [sp, #126]	; 0x7e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c02a:	f8b4 b000 	ldrh.w	fp, [r4]
 800c02e:	f007 f8a3 	bl	8013178 <lv_trigo_sin>
 800c032:	fb0a f000 	mul.w	r0, sl, r0
 800c036:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
 800c03a:	f8ad b080 	strh.w	fp, [sp, #128]	; 0x80
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c03e:	a91f      	add	r1, sp, #124	; 0x7c
 800c040:	463a      	mov	r2, r7
 800c042:	4608      	mov	r0, r1
 800c044:	f006 fc17 	bl	8012876 <_lv_area_intersect>
        if(ok) {
 800c048:	b130      	cbz	r0, 800c058 <lv_draw_sw_arc+0x3d0>
            q->draw_ctx->clip_area = &quarter_area;
 800c04a:	ab1f      	add	r3, sp, #124	; 0x7c
 800c04c:	60b3      	str	r3, [r6, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800c04e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c050:	a925      	add	r1, sp, #148	; 0x94
 800c052:	4630      	mov	r0, r6
 800c054:	f7ff f8f8 	bl	800b248 <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 800c058:	9b04      	ldr	r3, [sp, #16]
    q->draw_ctx->clip_area = clip_area_ori;
 800c05a:	60b7      	str	r7, [r6, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	f040 824f 	bne.w	800c500 <lv_draw_sw_arc+0x878>
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c062:	9b02      	ldr	r3, [sp, #8]
 800c064:	9a05      	ldr	r2, [sp, #20]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c066:	f8b4 b000 	ldrh.w	fp, [r4]
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c06a:	eba3 0a02 	sub.w	sl, r3, r2
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 800c06e:	9b03      	ldr	r3, [sp, #12]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c070:	f108 005a 	add.w	r0, r8, #90	; 0x5a
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 800c074:	2b03      	cmp	r3, #3
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c076:	b200      	sxth	r0, r0
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 800c078:	f040 8263 	bne.w	800c542 <lv_draw_sw_arc+0x8ba>
 800c07c:	45a8      	cmp	r8, r5
 800c07e:	f080 8260 	bcs.w	800c542 <lv_draw_sw_arc+0x8ba>
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c082:	f007 f879 	bl	8013178 <lv_trigo_sin>
 800c086:	fb0a f000 	mul.w	r0, sl, r0
 800c08a:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c08e:	ee18 0a10 	vmov	r0, s16
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c092:	f8ad b07c 	strh.w	fp, [sp, #124]	; 0x7c
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c096:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800c09a:	f007 f86d 	bl	8013178 <lv_trigo_sin>
 800c09e:	9b02      	ldr	r3, [sp, #8]
 800c0a0:	4358      	muls	r0, r3
 800c0a2:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c0a6:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 800c0aa:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c0ac:	f8ad b07e 	strh.w	fp, [sp, #126]	; 0x7e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c0b0:	f8b4 b000 	ldrh.w	fp, [r4]
 800c0b4:	f007 f860 	bl	8013178 <lv_trigo_sin>
 800c0b8:	9b02      	ldr	r3, [sp, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c0ba:	8865      	ldrh	r5, [r4, #2]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c0bc:	4358      	muls	r0, r3
 800c0be:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c0c2:	ee18 0a90 	vmov	r0, s17
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c0c6:	f8ad b080 	strh.w	fp, [sp, #128]	; 0x80
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c0ca:	f007 f855 	bl	8013178 <lv_trigo_sin>
 800c0ce:	fb0a f000 	mul.w	r0, sl, r0
 800c0d2:	eb05 35e0 	add.w	r5, r5, r0, asr #15
 800c0d6:	f8ad 5082 	strh.w	r5, [sp, #130]	; 0x82
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c0da:	a91f      	add	r1, sp, #124	; 0x7c
 800c0dc:	463a      	mov	r2, r7
 800c0de:	4608      	mov	r0, r1
 800c0e0:	f006 fbc9 	bl	8012876 <_lv_area_intersect>
        if(ok) {
 800c0e4:	b130      	cbz	r0, 800c0f4 <lv_draw_sw_arc+0x46c>
            q->draw_ctx->clip_area = &quarter_area;
 800c0e6:	ab1f      	add	r3, sp, #124	; 0x7c
 800c0e8:	60b3      	str	r3, [r6, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800c0ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800c0ec:	a925      	add	r1, sp, #148	; 0x94
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	f7ff f8aa 	bl	800b248 <lv_draw_rect>
    q->draw_ctx->clip_area = clip_area_ori;
 800c0f4:	60b7      	str	r7, [r6, #8]
    lv_draw_mask_free_param(&mask_angle_param);
 800c0f6:	a831      	add	r0, sp, #196	; 0xc4
 800c0f8:	f7fe fd00 	bl	800aafc <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 800c0fc:	a819      	add	r0, sp, #100	; 0x64
 800c0fe:	f7fe fcfd 	bl	800aafc <lv_draw_mask_free_param>
    if(mask_in_param_valid) {
 800c102:	9b08      	ldr	r3, [sp, #32]
 800c104:	b113      	cbz	r3, 800c10c <lv_draw_sw_arc+0x484>
        lv_draw_mask_free_param(&mask_in_param);
 800c106:	a813      	add	r0, sp, #76	; 0x4c
 800c108:	f7fe fcf8 	bl	800aafc <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_angle_id);
 800c10c:	ee19 0a90 	vmov	r0, s19
 800c110:	f7fe fcca 	bl	800aaa8 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 800c114:	ee19 0a10 	vmov	r0, s18
 800c118:	f7fe fcc6 	bl	800aaa8 <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 800c11c:	9b07      	ldr	r3, [sp, #28]
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	d002      	beq.n	800c128 <lv_draw_sw_arc+0x4a0>
 800c122:	4618      	mov	r0, r3
 800c124:	f7fe fcc0 	bl	800aaa8 <lv_draw_mask_remove_id>
    if(dsc->rounded) {
 800c128:	9b06      	ldr	r3, [sp, #24]
 800c12a:	7b5b      	ldrb	r3, [r3, #13]
 800c12c:	075b      	lsls	r3, r3, #29
 800c12e:	f57f ae51 	bpl.w	800bdd4 <lv_draw_sw_arc+0x14c>
        get_rounded_area(start_angle, radius, width, &round_area);
 800c132:	f89d a014 	ldrb.w	sl, [sp, #20]
 800c136:	fa0f f989 	sxth.w	r9, r9
 800c13a:	ee18 0a10 	vmov	r0, s16
 800c13e:	ab0f      	add	r3, sp, #60	; 0x3c
 800c140:	4652      	mov	r2, sl
 800c142:	4649      	mov	r1, r9
 800c144:	f7ff fd5c 	bl	800bc00 <get_rounded_area>
        round_area.x1 += center->x;
 800c148:	8823      	ldrh	r3, [r4, #0]
 800c14a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800c14e:	441a      	add	r2, r3
 800c150:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        round_area.x2 += center->x;
 800c154:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800c158:	4413      	add	r3, r2
 800c15a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        round_area.y1 += center->y;
 800c15e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 800c162:	8863      	ldrh	r3, [r4, #2]
 800c164:	441a      	add	r2, r3
 800c166:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
        round_area.y2 += center->y;
 800c16a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 800c16e:	4639      	mov	r1, r7
        round_area.y2 += center->y;
 800c170:	4413      	add	r3, r2
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 800c172:	a811      	add	r0, sp, #68	; 0x44
 800c174:	aa0f      	add	r2, sp, #60	; 0x3c
        round_area.y2 += center->y;
 800c176:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 800c17a:	f006 fb7c 	bl	8012876 <_lv_area_intersect>
 800c17e:	b1c0      	cbz	r0, 800c1b2 <lv_draw_sw_arc+0x52a>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 800c180:	2300      	movs	r3, #0
 800c182:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c186:	a90f      	add	r1, sp, #60	; 0x3c
 800c188:	a81f      	add	r0, sp, #124	; 0x7c
 800c18a:	f7fe fe05 	bl	800ad98 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 800c18e:	2100      	movs	r1, #0
 800c190:	a81f      	add	r0, sp, #124	; 0x7c
 800c192:	f7fe fc51 	bl	800aa38 <lv_draw_mask_add>
            draw_ctx->clip_area = &clip_area2;
 800c196:	ab11      	add	r3, sp, #68	; 0x44
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 800c198:	4680      	mov	r8, r0
            draw_ctx->clip_area = &clip_area2;
 800c19a:	60b3      	str	r3, [r6, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 800c19c:	aa0b      	add	r2, sp, #44	; 0x2c
 800c19e:	a925      	add	r1, sp, #148	; 0x94
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f7ff f851 	bl	800b248 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 800c1a6:	4640      	mov	r0, r8
 800c1a8:	f7fe fc7e 	bl	800aaa8 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 800c1ac:	a81f      	add	r0, sp, #124	; 0x7c
 800c1ae:	f7fe fca5 	bl	800aafc <lv_draw_mask_free_param>
        get_rounded_area(end_angle, radius, width, &round_area);
 800c1b2:	ee18 0a90 	vmov	r0, s17
 800c1b6:	ab0f      	add	r3, sp, #60	; 0x3c
 800c1b8:	4652      	mov	r2, sl
 800c1ba:	4649      	mov	r1, r9
 800c1bc:	f7ff fd20 	bl	800bc00 <get_rounded_area>
        round_area.x1 += center->x;
 800c1c0:	8823      	ldrh	r3, [r4, #0]
 800c1c2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800c1c6:	441a      	add	r2, r3
 800c1c8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        round_area.x2 += center->x;
 800c1cc:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        round_area.y1 += center->y;
 800c1d6:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 800c1da:	8863      	ldrh	r3, [r4, #2]
 800c1dc:	441a      	add	r2, r3
 800c1de:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
        round_area.y2 += center->y;
 800c1e2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 800c1e6:	4639      	mov	r1, r7
        round_area.y2 += center->y;
 800c1e8:	4413      	add	r3, r2
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 800c1ea:	a811      	add	r0, sp, #68	; 0x44
 800c1ec:	aa0f      	add	r2, sp, #60	; 0x3c
        round_area.y2 += center->y;
 800c1ee:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 800c1f2:	f006 fb40 	bl	8012876 <_lv_area_intersect>
 800c1f6:	b1c0      	cbz	r0, 800c22a <lv_draw_sw_arc+0x5a2>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c1fe:	a90f      	add	r1, sp, #60	; 0x3c
 800c200:	a81f      	add	r0, sp, #124	; 0x7c
 800c202:	f7fe fdc9 	bl	800ad98 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 800c206:	2100      	movs	r1, #0
 800c208:	a81f      	add	r0, sp, #124	; 0x7c
 800c20a:	f7fe fc15 	bl	800aa38 <lv_draw_mask_add>
            draw_ctx->clip_area = &clip_area2;
 800c20e:	ab11      	add	r3, sp, #68	; 0x44
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 800c210:	4604      	mov	r4, r0
            draw_ctx->clip_area = &clip_area2;
 800c212:	60b3      	str	r3, [r6, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 800c214:	aa0b      	add	r2, sp, #44	; 0x2c
 800c216:	a925      	add	r1, sp, #148	; 0x94
 800c218:	4630      	mov	r0, r6
 800c21a:	f7ff f815 	bl	800b248 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 800c21e:	4620      	mov	r0, r4
 800c220:	f7fe fc42 	bl	800aaa8 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 800c224:	a81f      	add	r0, sp, #124	; 0x7c
 800c226:	f7fe fc69 	bl	800aafc <lv_draw_mask_free_param>
        draw_ctx->clip_area = clip_area_ori;
 800c22a:	60b7      	str	r7, [r6, #8]
 800c22c:	e5d2      	b.n	800bdd4 <lv_draw_sw_arc+0x14c>
    while(end_angle >= 360) end_angle -= 360;
 800c22e:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
 800c232:	b2ad      	uxth	r5, r5
 800c234:	e5e7      	b.n	800be06 <lv_draw_sw_arc+0x17e>
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 800c236:	2d59      	cmp	r5, #89	; 0x59
 800c238:	d84f      	bhi.n	800c2da <lv_draw_sw_arc+0x652>
            quarter_area.x2 = q->center->x + q->radius;
 800c23a:	8823      	ldrh	r3, [r4, #0]
            quarter_area.y1 = q->center->y;
 800c23c:	f9b4 a002 	ldrsh.w	sl, [r4, #2]
 800c240:	f8ad a07e 	strh.w	sl, [sp, #126]	; 0x7e
            quarter_area.x2 = q->center->x + q->radius;
 800c244:	444b      	add	r3, r9
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 800c246:	ee18 0a90 	vmov	r0, s17
            quarter_area.x2 = q->center->x + q->radius;
 800c24a:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 800c24e:	f006 ff93 	bl	8013178 <lv_trigo_sin>
 800c252:	9b02      	ldr	r3, [sp, #8]
 800c254:	4358      	muls	r0, r3
 800c256:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c25a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 800c25e:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 800c260:	f8ad a082 	strh.w	sl, [sp, #130]	; 0x82
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c264:	f8b4 a000 	ldrh.w	sl, [r4]
 800c268:	f006 ff86 	bl	8013178 <lv_trigo_sin>
 800c26c:	9b02      	ldr	r3, [sp, #8]
 800c26e:	9a05      	ldr	r2, [sp, #20]
 800c270:	1a9b      	subs	r3, r3, r2
 800c272:	4358      	muls	r0, r3
 800c274:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 800c278:	f8ad a07c 	strh.w	sl, [sp, #124]	; 0x7c
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c27c:	e63c      	b.n	800bef8 <lv_draw_sw_arc+0x270>
            quarter_area.x1 = q->center->x;
 800c27e:	8822      	ldrh	r2, [r4, #0]
 800c280:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c284:	ee18 0a10 	vmov	r0, s16
            quarter_area.y2 = q->center->y + q->radius;
 800c288:	eb09 020b 	add.w	r2, r9, fp
 800c28c:	f8ad 2082 	strh.w	r2, [sp, #130]	; 0x82
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c290:	f006 ff72 	bl	8013178 <lv_trigo_sin>
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c294:	9b09      	ldr	r3, [sp, #36]	; 0x24
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c296:	fb0a f000 	mul.w	r0, sl, r0
 800c29a:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f8b4 a000 	ldrh.w	sl, [r4]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c2a4:	f8ad b07e 	strh.w	fp, [sp, #126]	; 0x7e
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c2a8:	f006 ff66 	bl	8013178 <lv_trigo_sin>
 800c2ac:	9b02      	ldr	r3, [sp, #8]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c2ae:	a91f      	add	r1, sp, #124	; 0x7c
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c2b0:	4358      	muls	r0, r3
 800c2b2:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c2b6:	463a      	mov	r2, r7
 800c2b8:	4608      	mov	r0, r1
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c2ba:	f8ad a080 	strh.w	sl, [sp, #128]	; 0x80
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c2be:	f006 fada 	bl	8012876 <_lv_area_intersect>
            if(ok) {
 800c2c2:	a91f      	add	r1, sp, #124	; 0x7c
 800c2c4:	b128      	cbz	r0, 800c2d2 <lv_draw_sw_arc+0x64a>
                q->draw_ctx->clip_area = &quarter_area;
 800c2c6:	60b1      	str	r1, [r6, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800c2c8:	aa0b      	add	r2, sp, #44	; 0x2c
 800c2ca:	a925      	add	r1, sp, #148	; 0x94
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f7fe ffbb 	bl	800b248 <lv_draw_rect>
        if(q->end_quarter == 0) {
 800c2d2:	2d59      	cmp	r5, #89	; 0x59
 800c2d4:	f63f ae1d 	bhi.w	800bf12 <lv_draw_sw_arc+0x28a>
 800c2d8:	e7af      	b.n	800c23a <lv_draw_sw_arc+0x5b2>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 800c2da:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d101      	bne.n	800c2e6 <lv_draw_sw_arc+0x65e>
 800c2e2:	45a8      	cmp	r8, r5
 800c2e4:	d806      	bhi.n	800c2f4 <lv_draw_sw_arc+0x66c>
 800c2e6:	9b04      	ldr	r3, [sp, #16]
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d112      	bne.n	800c312 <lv_draw_sw_arc+0x68a>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 800c2ec:	9b03      	ldr	r3, [sp, #12]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	f47f ae0f 	bne.w	800bf12 <lv_draw_sw_arc+0x28a>
        quarter_area.x1 = q->center->x;
 800c2f4:	f9b4 2000 	ldrsh.w	r2, [r4]
        quarter_area.y1 = q->center->y;
 800c2f8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
        quarter_area.x1 = q->center->x;
 800c2fc:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
        quarter_area.y1 = q->center->y;
 800c300:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        quarter_area.x2 = q->center->x + q->radius;
 800c304:	444a      	add	r2, r9
        quarter_area.y2 = q->center->y + q->radius;
 800c306:	444b      	add	r3, r9
        quarter_area.x2 = q->center->x + q->radius;
 800c308:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
        quarter_area.y2 = q->center->y + q->radius;
 800c30c:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c310:	e5f2      	b.n	800bef8 <lv_draw_sw_arc+0x270>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 800c312:	9b04      	ldr	r3, [sp, #16]
 800c314:	2b03      	cmp	r3, #3
 800c316:	f47f adfc 	bne.w	800bf12 <lv_draw_sw_arc+0x28a>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 800c31a:	9b03      	ldr	r3, [sp, #12]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	b29b      	uxth	r3, r3
 800c320:	2b01      	cmp	r3, #1
 800c322:	f63f adf6 	bhi.w	800bf12 <lv_draw_sw_arc+0x28a>
 800c326:	e7e5      	b.n	800c2f4 <lv_draw_sw_arc+0x66c>
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 800c328:	9b03      	ldr	r3, [sp, #12]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d141      	bne.n	800c3b2 <lv_draw_sw_arc+0x72a>
            quarter_area.x2 = q->center->x - 1;
 800c32e:	8823      	ldrh	r3, [r4, #0]
            quarter_area.y2 = q->center->y + q->radius;
 800c330:	f8b4 a002 	ldrh.w	sl, [r4, #2]
            quarter_area.x2 = q->center->x - 1;
 800c334:	3b01      	subs	r3, #1
 800c336:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c33a:	ee18 0a90 	vmov	r0, s17
            quarter_area.y2 = q->center->y + q->radius;
 800c33e:	eb09 030a 	add.w	r3, r9, sl
 800c342:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c346:	f006 ff17 	bl	8013178 <lv_trigo_sin>
 800c34a:	9b02      	ldr	r3, [sp, #8]
 800c34c:	9a05      	ldr	r2, [sp, #20]
 800c34e:	1a9b      	subs	r3, r3, r2
 800c350:	4358      	muls	r0, r3
 800c352:	e614      	b.n	800bf7e <lv_draw_sw_arc+0x2f6>
            quarter_area.x1 = q->center->x - q->radius;
 800c354:	8822      	ldrh	r2, [r4, #0]
            quarter_area.y1 = q->center->y;
 800c356:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
            quarter_area.x1 = q->center->x - q->radius;
 800c35a:	eba2 0209 	sub.w	r2, r2, r9
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c35e:	ee18 0a10 	vmov	r0, s16
            quarter_area.x1 = q->center->x - q->radius;
 800c362:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c366:	f006 ff07 	bl	8013178 <lv_trigo_sin>
 800c36a:	9b02      	ldr	r3, [sp, #8]
 800c36c:	4358      	muls	r0, r3
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c370:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c374:	4618      	mov	r0, r3
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c376:	f8ad a082 	strh.w	sl, [sp, #130]	; 0x82
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c37a:	f8b4 a000 	ldrh.w	sl, [r4]
 800c37e:	f006 fefb 	bl	8013178 <lv_trigo_sin>
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c382:	a91f      	add	r1, sp, #124	; 0x7c
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c384:	fb0b f000 	mul.w	r0, fp, r0
 800c388:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c38c:	463a      	mov	r2, r7
 800c38e:	4608      	mov	r0, r1
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c390:	f8ad a080 	strh.w	sl, [sp, #128]	; 0x80
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c394:	f006 fa6f 	bl	8012876 <_lv_area_intersect>
            if(ok) {
 800c398:	a91f      	add	r1, sp, #124	; 0x7c
 800c39a:	b128      	cbz	r0, 800c3a8 <lv_draw_sw_arc+0x720>
                q->draw_ctx->clip_area = &quarter_area;
 800c39c:	60b1      	str	r1, [r6, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800c39e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c3a0:	a925      	add	r1, sp, #148	; 0x94
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	f7fe ff50 	bl	800b248 <lv_draw_rect>
        if(q->end_quarter == 1) {
 800c3a8:	9b03      	ldr	r3, [sp, #12]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	f47f ae05 	bne.w	800bfba <lv_draw_sw_arc+0x332>
 800c3b0:	e7bd      	b.n	800c32e <lv_draw_sw_arc+0x6a6>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 800c3b2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d101      	bne.n	800c3be <lv_draw_sw_arc+0x736>
 800c3ba:	45a8      	cmp	r8, r5
 800c3bc:	d808      	bhi.n	800c3d0 <lv_draw_sw_arc+0x748>
 800c3be:	f1b8 0f59 	cmp.w	r8, #89	; 0x59
 800c3c2:	d815      	bhi.n	800c3f0 <lv_draw_sw_arc+0x768>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 800c3c4:	9b03      	ldr	r3, [sp, #12]
 800c3c6:	3b02      	subs	r3, #2
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	f63f adf5 	bhi.w	800bfba <lv_draw_sw_arc+0x332>
        quarter_area.x1 = q->center->x - q->radius;
 800c3d0:	8822      	ldrh	r2, [r4, #0]
 800c3d2:	eba2 0309 	sub.w	r3, r2, r9
 800c3d6:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        quarter_area.y1 = q->center->y;
 800c3da:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800c3de:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        quarter_area.x2 = q->center->x - 1;
 800c3e2:	3a01      	subs	r2, #1
        quarter_area.y2 = q->center->y + q->radius;
 800c3e4:	444b      	add	r3, r9
        quarter_area.x2 = q->center->x - 1;
 800c3e6:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
        quarter_area.y2 = q->center->y + q->radius;
 800c3ea:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c3ee:	e5d7      	b.n	800bfa0 <lv_draw_sw_arc+0x318>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 800c3f0:	9b04      	ldr	r3, [sp, #16]
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	f47f ade1 	bne.w	800bfba <lv_draw_sw_arc+0x332>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 800c3f8:	9b03      	ldr	r3, [sp, #12]
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	f47f addd 	bne.w	800bfba <lv_draw_sw_arc+0x332>
 800c400:	e7e6      	b.n	800c3d0 <lv_draw_sw_arc+0x748>
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 800c402:	9b03      	ldr	r3, [sp, #12]
 800c404:	2b02      	cmp	r3, #2
 800c406:	d152      	bne.n	800c4ae <lv_draw_sw_arc+0x826>
            quarter_area.x1 = q->center->x - q->radius;
 800c408:	f8b4 a000 	ldrh.w	sl, [r4]
 800c40c:	ebaa 0309 	sub.w	r3, sl, r9
 800c410:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            quarter_area.y2 = q->center->y - 1;
 800c414:	8863      	ldrh	r3, [r4, #2]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c416:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            quarter_area.y2 = q->center->y - 1;
 800c41a:	3b01      	subs	r3, #1
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c41c:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center->y - 1;
 800c41e:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c422:	f006 fea9 	bl	8013178 <lv_trigo_sin>
 800c426:	9b02      	ldr	r3, [sp, #8]
 800c428:	9a05      	ldr	r2, [sp, #20]
 800c42a:	1a9b      	subs	r3, r3, r2
 800c42c:	4358      	muls	r0, r3
 800c42e:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c432:	ee18 0a90 	vmov	r0, s17
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c436:	f8ad a080 	strh.w	sl, [sp, #128]	; 0x80
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c43a:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 800c43e:	f006 fe9b 	bl	8013178 <lv_trigo_sin>
 800c442:	9b02      	ldr	r3, [sp, #8]
 800c444:	4358      	muls	r0, r3
 800c446:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 800c44a:	f8ad a07e 	strh.w	sl, [sp, #126]	; 0x7e
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c44e:	e5f6      	b.n	800c03e <lv_draw_sw_arc+0x3b6>
            quarter_area.x2 = q->center->x - 1;
 800c450:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c454:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
            quarter_area.y1 = q->center->y - q->radius;
 800c458:	8863      	ldrh	r3, [r4, #2]
 800c45a:	eba3 0309 	sub.w	r3, r3, r9
 800c45e:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c462:	f006 fe89 	bl	8013178 <lv_trigo_sin>
 800c466:	9b02      	ldr	r3, [sp, #8]
 800c468:	4358      	muls	r0, r3
 800c46a:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c46e:	ee18 0a10 	vmov	r0, s16
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c472:	f8ad b07c 	strh.w	fp, [sp, #124]	; 0x7c
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c476:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800c47a:	f006 fe7d 	bl	8013178 <lv_trigo_sin>
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c47e:	a91f      	add	r1, sp, #124	; 0x7c
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c480:	fb0a f000 	mul.w	r0, sl, r0
 800c484:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c488:	463a      	mov	r2, r7
 800c48a:	4608      	mov	r0, r1
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c48c:	f8ad b082 	strh.w	fp, [sp, #130]	; 0x82
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c490:	f006 f9f1 	bl	8012876 <_lv_area_intersect>
            if(ok) {
 800c494:	a91f      	add	r1, sp, #124	; 0x7c
 800c496:	b128      	cbz	r0, 800c4a4 <lv_draw_sw_arc+0x81c>
                q->draw_ctx->clip_area = &quarter_area;
 800c498:	60b1      	str	r1, [r6, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800c49a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c49c:	a925      	add	r1, sp, #148	; 0x94
 800c49e:	4630      	mov	r0, r6
 800c4a0:	f7fe fed2 	bl	800b248 <lv_draw_rect>
        if(q->end_quarter == 2) {
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	f47f add6 	bne.w	800c058 <lv_draw_sw_arc+0x3d0>
 800c4ac:	e7ac      	b.n	800c408 <lv_draw_sw_arc+0x780>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 800c4ae:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d101      	bne.n	800c4ba <lv_draw_sw_arc+0x832>
 800c4b6:	45a8      	cmp	r8, r5
 800c4b8:	d806      	bhi.n	800c4c8 <lv_draw_sw_arc+0x840>
 800c4ba:	f1b8 0f59 	cmp.w	r8, #89	; 0x59
 800c4be:	d814      	bhi.n	800c4ea <lv_draw_sw_arc+0x862>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 800c4c0:	9b03      	ldr	r3, [sp, #12]
 800c4c2:	2b03      	cmp	r3, #3
 800c4c4:	f47f adc8 	bne.w	800c058 <lv_draw_sw_arc+0x3d0>
        quarter_area.x1 = q->center->x - q->radius;
 800c4c8:	8822      	ldrh	r2, [r4, #0]
 800c4ca:	eba2 0309 	sub.w	r3, r2, r9
 800c4ce:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        quarter_area.y1 = q->center->y - q->radius;
 800c4d2:	8863      	ldrh	r3, [r4, #2]
        quarter_area.x2 = q->center->x - 1;
 800c4d4:	3a01      	subs	r2, #1
        quarter_area.y1 = q->center->y - q->radius;
 800c4d6:	eba3 0109 	sub.w	r1, r3, r9
        quarter_area.y2 = q->center->y - 1;
 800c4da:	3b01      	subs	r3, #1
        quarter_area.y1 = q->center->y - q->radius;
 800c4dc:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
        quarter_area.x2 = q->center->x - 1;
 800c4e0:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
        quarter_area.y2 = q->center->y - 1;
 800c4e4:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c4e8:	e5a9      	b.n	800c03e <lv_draw_sw_arc+0x3b6>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 800c4ea:	9b04      	ldr	r3, [sp, #16]
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	f47f adb3 	bne.w	800c058 <lv_draw_sw_arc+0x3d0>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 800c4f2:	9b03      	ldr	r3, [sp, #12]
 800c4f4:	2b03      	cmp	r3, #3
 800c4f6:	d0e7      	beq.n	800c4c8 <lv_draw_sw_arc+0x840>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 800c4f8:	2d59      	cmp	r5, #89	; 0x59
 800c4fa:	f63f adad 	bhi.w	800c058 <lv_draw_sw_arc+0x3d0>
 800c4fe:	e7e3      	b.n	800c4c8 <lv_draw_sw_arc+0x840>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 800c500:	9b03      	ldr	r3, [sp, #12]
 800c502:	2b03      	cmp	r3, #3
 800c504:	d14b      	bne.n	800c59e <lv_draw_sw_arc+0x916>
            quarter_area.y1 = q->center->y - q->radius;
 800c506:	8863      	ldrh	r3, [r4, #2]
            quarter_area.x1 = q->center->x;
 800c508:	f9b4 a000 	ldrsh.w	sl, [r4]
 800c50c:	f8ad a07c 	strh.w	sl, [sp, #124]	; 0x7c
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c510:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            quarter_area.y1 = q->center->y - q->radius;
 800c514:	eba3 0309 	sub.w	r3, r3, r9
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c518:	b200      	sxth	r0, r0
            quarter_area.y1 = q->center->y - q->radius;
 800c51a:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c51e:	f006 fe2b 	bl	8013178 <lv_trigo_sin>
 800c522:	9b02      	ldr	r3, [sp, #8]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c524:	8865      	ldrh	r5, [r4, #2]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c526:	4358      	muls	r0, r3
 800c528:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c52c:	ee18 0a90 	vmov	r0, s17
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c530:	f8ad a080 	strh.w	sl, [sp, #128]	; 0x80
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c534:	f006 fe20 	bl	8013178 <lv_trigo_sin>
 800c538:	9b02      	ldr	r3, [sp, #8]
 800c53a:	9a05      	ldr	r2, [sp, #20]
 800c53c:	1a9b      	subs	r3, r3, r2
 800c53e:	4358      	muls	r0, r3
 800c540:	e5c7      	b.n	800c0d2 <lv_draw_sw_arc+0x44a>
            quarter_area.x2 = q->center->x + q->radius;
 800c542:	eb09 030b 	add.w	r3, r9, fp
 800c546:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
            quarter_area.y2 = q->center->y - 1;
 800c54a:	8863      	ldrh	r3, [r4, #2]
 800c54c:	3b01      	subs	r3, #1
 800c54e:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c552:	f006 fe11 	bl	8013178 <lv_trigo_sin>
 800c556:	fb0a f000 	mul.w	r0, sl, r0
 800c55a:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c55e:	ee18 0a10 	vmov	r0, s16
 800c562:	f8b4 a002 	ldrh.w	sl, [r4, #2]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800c566:	f8ad b07c 	strh.w	fp, [sp, #124]	; 0x7c
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c56a:	f006 fe05 	bl	8013178 <lv_trigo_sin>
 800c56e:	9b02      	ldr	r3, [sp, #8]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c570:	a91f      	add	r1, sp, #124	; 0x7c
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c572:	4358      	muls	r0, r3
 800c574:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c578:	463a      	mov	r2, r7
 800c57a:	4608      	mov	r0, r1
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800c57c:	f8ad a07e 	strh.w	sl, [sp, #126]	; 0x7e
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c580:	f006 f979 	bl	8012876 <_lv_area_intersect>
            if(ok) {
 800c584:	a91f      	add	r1, sp, #124	; 0x7c
 800c586:	b128      	cbz	r0, 800c594 <lv_draw_sw_arc+0x90c>
                q->draw_ctx->clip_area = &quarter_area;
 800c588:	60b1      	str	r1, [r6, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800c58a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c58c:	a925      	add	r1, sp, #148	; 0x94
 800c58e:	4630      	mov	r0, r6
 800c590:	f7fe fe5a 	bl	800b248 <lv_draw_rect>
        if(q->end_quarter == 3) {
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	2b03      	cmp	r3, #3
 800c598:	f47f adac 	bne.w	800c0f4 <lv_draw_sw_arc+0x46c>
 800c59c:	e7b3      	b.n	800c506 <lv_draw_sw_arc+0x87e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 800c59e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d101      	bne.n	800c5aa <lv_draw_sw_arc+0x922>
 800c5a6:	45a8      	cmp	r8, r5
 800c5a8:	d805      	bhi.n	800c5b6 <lv_draw_sw_arc+0x92e>
 800c5aa:	9b04      	ldr	r3, [sp, #16]
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d118      	bne.n	800c5e2 <lv_draw_sw_arc+0x95a>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 800c5b0:	2db3      	cmp	r5, #179	; 0xb3
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 800c5b2:	f63f ad9f 	bhi.w	800c0f4 <lv_draw_sw_arc+0x46c>
        quarter_area.x1 = q->center->x;
 800c5b6:	f9b4 2000 	ldrsh.w	r2, [r4]
        quarter_area.y1 = q->center->y - q->radius;
 800c5ba:	8863      	ldrh	r3, [r4, #2]
        quarter_area.x1 = q->center->x;
 800c5bc:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
        quarter_area.y1 = q->center->y - q->radius;
 800c5c0:	eba3 0109 	sub.w	r1, r3, r9
        quarter_area.x2 = q->center->x + q->radius;
 800c5c4:	444a      	add	r2, r9
        quarter_area.y2 = q->center->y - 1;
 800c5c6:	3b01      	subs	r3, #1
        quarter_area.y1 = q->center->y - q->radius;
 800c5c8:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
        quarter_area.x2 = q->center->x + q->radius;
 800c5cc:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
        quarter_area.y2 = q->center->y - 1;
 800c5d0:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800c5d4:	e581      	b.n	800c0da <lv_draw_sw_arc+0x452>
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 800c5d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c5d8:	a925      	add	r1, sp, #148	; 0x94
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f7fe fe34 	bl	800b248 <lv_draw_rect>
 800c5e0:	e589      	b.n	800c0f6 <lv_draw_sw_arc+0x46e>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 800c5e2:	9b04      	ldr	r3, [sp, #16]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	f47f ad85 	bne.w	800c0f4 <lv_draw_sw_arc+0x46c>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 800c5ea:	2d59      	cmp	r5, #89	; 0x59
 800c5ec:	e7e1      	b.n	800c5b2 <lv_draw_sw_arc+0x92a>

0800c5ee <color_blend_true_color_additive>:
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
 800c5ee:	2a02      	cmp	r2, #2
 800c5f0:	d90c      	bls.n	800c60c <color_blend_true_color_additive+0x1e>

    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
 800c5f2:	b2c0      	uxtb	r0, r0
    if(opa <= LV_OPA_MIN) return bg;
 800c5f4:	b2cb      	uxtb	r3, r1
    tmp = bg.full + fg.full;
 800c5f6:	fa50 f181 	uxtab	r1, r0, r1
    fg.full = LV_MIN(tmp, 1);
 800c5fa:	3900      	subs	r1, #0
 800c5fc:	bf18      	it	ne
 800c5fe:	2101      	movne	r1, #1
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 800c600:	2aff      	cmp	r2, #255	; 0xff
 800c602:	d003      	beq.n	800c60c <color_blend_true_color_additive+0x1e>
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 800c604:	f012 0f80 	tst.w	r2, #128	; 0x80
#endif

    return ret;
 800c608:	bf08      	it	eq
 800c60a:	4619      	moveq	r1, r3

    return lv_color_mix(fg, bg, opa);
}
 800c60c:	4608      	mov	r0, r1
 800c60e:	4770      	bx	lr

0800c610 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    if(opa <= LV_OPA_MIN) return bg;
 800c610:	2a02      	cmp	r2, #2
{
 800c612:	b530      	push	{r4, r5, lr}
    if(opa <= LV_OPA_MIN) return bg;
 800c614:	d801      	bhi.n	800c61a <color_blend_true_color_subtractive+0xa>
 800c616:	4608      	mov	r0, r1
    fg.ch.blue = LV_MAX(tmp, 0);

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 800c618:	bd30      	pop	{r4, r5, pc}
    tmp = bg.ch.red - fg.ch.red;
 800c61a:	f001 0301 	and.w	r3, r1, #1
 800c61e:	f000 0401 	and.w	r4, r0, #1
 800c622:	1b1c      	subs	r4, r3, r4
    tmp = bg.ch.green - fg.ch.green;
 800c624:	2c00      	cmp	r4, #0
 800c626:	bfac      	ite	ge
 800c628:	1b1d      	subge	r5, r3, r4
 800c62a:	461d      	movlt	r5, r3
    tmp = bg.ch.blue - fg.ch.blue;
 800c62c:	2d00      	cmp	r5, #0
 800c62e:	bfa8      	it	ge
 800c630:	1b5b      	subge	r3, r3, r5
    fg.ch.blue = LV_MAX(tmp, 0);
 800c632:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c636:	f003 0301 	and.w	r3, r3, #1
    if(opa == LV_OPA_COVER) return fg;
 800c63a:	2aff      	cmp	r2, #255	; 0xff
 800c63c:	f363 0000 	bfi	r0, r3, #0, #1
 800c640:	d0ea      	beq.n	800c618 <color_blend_true_color_subtractive+0x8>
    return lv_color_mix(fg, bg, opa);
 800c642:	b2c3      	uxtb	r3, r0
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 800c644:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c648:	b2c8      	uxtb	r0, r1
    return ret;
 800c64a:	bf18      	it	ne
 800c64c:	4618      	movne	r0, r3
 800c64e:	e7e3      	b.n	800c618 <color_blend_true_color_subtractive+0x8>

0800c650 <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    if(opa <= LV_OPA_MIN) return bg;
 800c650:	2a02      	cmp	r2, #2
 800c652:	d801      	bhi.n	800c658 <color_blend_true_color_multiply+0x8>
 800c654:	4608      	mov	r0, r1
 800c656:	4770      	bx	lr
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 3;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 3;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 2;
#endif

    if(opa == LV_OPA_COVER) return fg;
 800c658:	2aff      	cmp	r2, #255	; 0xff
 800c65a:	d005      	beq.n	800c668 <color_blend_true_color_multiply+0x18>
 800c65c:	b2c9      	uxtb	r1, r1
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 800c65e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c662:	b2c0      	uxtb	r0, r0
    return ret;
 800c664:	bf08      	it	eq
 800c666:	4608      	moveq	r0, r1

    return lv_color_mix(fg, bg, opa);
}
 800c668:	4770      	bx	lr

0800c66a <lv_draw_sw_blend>:
{
 800c66a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if(dsc->opa <= LV_OPA_MIN) return;
 800c66c:	7e0b      	ldrb	r3, [r1, #24]
 800c66e:	2b02      	cmp	r3, #2
{
 800c670:	4604      	mov	r4, r0
 800c672:	460d      	mov	r5, r1
    if(dsc->opa <= LV_OPA_MIN) return;
 800c674:	d90d      	bls.n	800c692 <lv_draw_sw_blend+0x28>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 800c676:	6882      	ldr	r2, [r0, #8]
 800c678:	6809      	ldr	r1, [r1, #0]
 800c67a:	4668      	mov	r0, sp
 800c67c:	f006 f8fb 	bl	8012876 <_lv_area_intersect>
 800c680:	b138      	cbz	r0, 800c692 <lv_draw_sw_blend+0x28>
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800c682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c684:	b10b      	cbz	r3, 800c68a <lv_draw_sw_blend+0x20>
 800c686:	4620      	mov	r0, r4
 800c688:	4798      	blx	r3
    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 800c68a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c68c:	4629      	mov	r1, r5
 800c68e:	4620      	mov	r0, r4
 800c690:	4798      	blx	r3
}
 800c692:	b003      	add	sp, #12
 800c694:	bd30      	pop	{r4, r5, pc}
	...

0800c698 <lv_draw_sw_blend_basic>:
{
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dsc->mask_buf == NULL) mask = NULL;
 800c69c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c6a0:	7c0b      	ldrb	r3, [r1, #16]
{
 800c6a2:	b091      	sub	sp, #68	; 0x44
 800c6a4:	4681      	mov	r9, r0
 800c6a6:	4688      	mov	r8, r1
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c6a8:	f1ba 0f00 	cmp.w	sl, #0
 800c6ac:	d002      	beq.n	800c6b4 <lv_draw_sw_blend_basic+0x1c>
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 8095 	beq.w	800c7de <lv_draw_sw_blend_basic+0x146>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 800c6b4:	2b01      	cmp	r3, #1
    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 800c6b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 800c6ba:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800c6be:	f8d8 1000 	ldr.w	r1, [r8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c6c2:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 800c6c6:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6ca:	a80e      	add	r0, sp, #56	; 0x38
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 800c6cc:	bf08      	it	eq
 800c6ce:	f04f 0a00 	moveq.w	sl, #0
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 800c6d2:	f006 f8d0 	bl	8012876 <_lv_area_intersect>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	f000 8081 	beq.w	800c7de <lv_draw_sw_blend_basic+0x146>
 800c6dc:	3401      	adds	r4, #1
 800c6de:	1b64      	subs	r4, r4, r5
 800c6e0:	b223      	sxth	r3, r4
 800c6e2:	9305      	str	r3, [sp, #20]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c6e4:	f7fc fc22 	bl	8008f2c <_lv_refr_get_disp_refreshing>
    if(disp->driver->set_px_cb == NULL) {
 800c6e8:	6802      	ldr	r2, [r0, #0]
    lv_color_t * dest_buf = draw_ctx->buf;
 800c6ea:	f8d9 4000 	ldr.w	r4, [r9]
    if(disp->driver->set_px_cb == NULL) {
 800c6ee:	69d3      	ldr	r3, [r2, #28]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c6f0:	4605      	mov	r5, r0
    if(disp->driver->set_px_cb == NULL) {
 800c6f2:	b9b3      	cbnz	r3, 800c722 <lv_draw_sw_blend_basic+0x8a>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 800c6f4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800c6f8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800c6fc:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 800c700:	9905      	ldr	r1, [sp, #20]
 800c702:	1a1b      	subs	r3, r3, r0
 800c704:	fb01 f003 	mul.w	r0, r1, r3
 800c708:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 800c70c:	f9b6 3000 	ldrsh.w	r3, [r6]
 800c710:	1acb      	subs	r3, r1, r3
        if(disp->driver->screen_transp == 0) {
 800c712:	7c11      	ldrb	r1, [r2, #16]
 800c714:	064e      	lsls	r6, r1, #25
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800c716:	bf4a      	itet	mi
 800c718:	005b      	lslmi	r3, r3, #1
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 800c71a:	181b      	addpl	r3, r3, r0
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800c71c:	eb03 0340 	addmi.w	r3, r3, r0, lsl #1
 800c720:	441c      	add	r4, r3
    const lv_color_t * src_buf = dsc->src_buf;
 800c722:	f8d8 6004 	ldr.w	r6, [r8, #4]
    if(src_buf) {
 800c726:	2e00      	cmp	r6, #0
 800c728:	d05c      	beq.n	800c7e4 <lv_draw_sw_blend_basic+0x14c>
        src_stride = lv_area_get_width(dsc->blend_area);
 800c72a:	f8d8 3000 	ldr.w	r3, [r8]
 800c72e:	8899      	ldrh	r1, [r3, #4]
 800c730:	f9b3 0000 	ldrsh.w	r0, [r3]
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 800c734:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c738:	3101      	adds	r1, #1
 800c73a:	1a09      	subs	r1, r1, r0
 800c73c:	b209      	sxth	r1, r1
 800c73e:	9107      	str	r1, [sp, #28]
 800c740:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800c744:	1ac9      	subs	r1, r1, r3
 800c746:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 800c74a:	1a1b      	subs	r3, r3, r0
 800c74c:	9807      	ldr	r0, [sp, #28]
 800c74e:	fb00 3301 	mla	r3, r0, r1, r3
 800c752:	441e      	add	r6, r3
    if(mask) {
 800c754:	f1ba 0f00 	cmp.w	sl, #0
 800c758:	d05a      	beq.n	800c810 <lv_draw_sw_blend_basic+0x178>
        if(disp->driver->antialiasing == 0) {
 800c75a:	7c13      	ldrb	r3, [r2, #16]
 800c75c:	0719      	lsls	r1, r3, #28
 800c75e:	d543      	bpl.n	800c7e8 <lv_draw_sw_blend_basic+0x150>
        mask_stride = lv_area_get_width(dsc->mask_area);
 800c760:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800c764:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 800c768:	f9b0 2000 	ldrsh.w	r2, [r0]
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 800c76c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800c770:	f10e 0e01 	add.w	lr, lr, #1
 800c774:	ebae 0e02 	sub.w	lr, lr, r2
 800c778:	fa0f f38e 	sxth.w	r3, lr
 800c77c:	9308      	str	r3, [sp, #32]
 800c77e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800c782:	1a59      	subs	r1, r3, r1
 800c784:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 800c788:	1a9b      	subs	r3, r3, r2
 800c78a:	9a08      	ldr	r2, [sp, #32]
 800c78c:	fb02 3301 	mla	r3, r2, r1, r3
 800c790:	449a      	add	sl, r3
    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 800c792:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c796:	885a      	ldrh	r2, [r3, #2]
 800c798:	8819      	ldrh	r1, [r3, #0]
 800c79a:	4252      	negs	r2, r2
 800c79c:	4249      	negs	r1, r1
 800c79e:	b212      	sxth	r2, r2
 800c7a0:	b209      	sxth	r1, r1
 800c7a2:	a80e      	add	r0, sp, #56	; 0x38
 800c7a4:	f006 f856 	bl	8012854 <lv_area_move>
    if(disp->driver->set_px_cb) {
 800c7a8:	682b      	ldr	r3, [r5, #0]
 800c7aa:	f898 9018 	ldrb.w	r9, [r8, #24]
 800c7ae:	69db      	ldr	r3, [r3, #28]
 800c7b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 80e6 	beq.w	800c986 <lv_draw_sw_blend_basic+0x2ee>
        if(dsc->src_buf == NULL) {
 800c7ba:	2d00      	cmp	r5, #0
 800c7bc:	d17d      	bne.n	800c8ba <lv_draw_sw_blend_basic+0x222>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 800c7be:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c7c2:	f88d 3018 	strb.w	r3, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c7c6:	f7fc fbb1 	bl	8008f2c <_lv_refr_get_disp_refreshing>
 800c7ca:	4683      	mov	fp, r0
    if(mask == NULL) {
 800c7cc:	f1ba 0f00 	cmp.w	sl, #0
 800c7d0:	d13b      	bne.n	800c84a <lv_draw_sw_blend_basic+0x1b2>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 800c7d2:	f9bd 503a 	ldrsh.w	r5, [sp, #58]	; 0x3a
 800c7d6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800c7da:	429d      	cmp	r5, r3
 800c7dc:	dd1b      	ble.n	800c816 <lv_draw_sw_blend_basic+0x17e>
}
 800c7de:	b011      	add	sp, #68	; 0x44
 800c7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        src_stride = 0;
 800c7e4:	9607      	str	r6, [sp, #28]
 800c7e6:	e7b5      	b.n	800c754 <lv_draw_sw_blend_basic+0xbc>
            int32_t mask_size = lv_area_get_size(dsc->mask_area);
 800c7e8:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800c7ec:	f006 f815 	bl	801281a <lv_area_get_size>
            for(i = 0; i < mask_size; i++) {
 800c7f0:	f10a 32ff 	add.w	r2, sl, #4294967295
 800c7f4:	f1ca 0101 	rsb	r1, sl, #1
 800c7f8:	188b      	adds	r3, r1, r2
 800c7fa:	4298      	cmp	r0, r3
 800c7fc:	ddb0      	ble.n	800c760 <lv_draw_sw_blend_basic+0xc8>
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800c7fe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c802:	2b80      	cmp	r3, #128	; 0x80
 800c804:	f04f 33ff 	mov.w	r3, #4294967295
 800c808:	bf98      	it	ls
 800c80a:	2300      	movls	r3, #0
 800c80c:	7013      	strb	r3, [r2, #0]
            for(i = 0; i < mask_size; i++) {
 800c80e:	e7f3      	b.n	800c7f8 <lv_draw_sw_blend_basic+0x160>
        mask_stride = 0;
 800c810:	f8cd a020 	str.w	sl, [sp, #32]
 800c814:	e7bd      	b.n	800c792 <lv_draw_sw_blend_basic+0xfa>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 800c816:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 800c81a:	b22f      	sxth	r7, r5
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 800c81c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 800c820:	429e      	cmp	r6, r3
 800c822:	dd01      	ble.n	800c828 <lv_draw_sw_blend_basic+0x190>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 800c824:	3501      	adds	r5, #1
 800c826:	e7d6      	b.n	800c7d6 <lv_draw_sw_blend_basic+0x13e>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 800c828:	f8db 0000 	ldr.w	r0, [fp]
 800c82c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800c830:	f88d 3004 	strb.w	r3, [sp, #4]
 800c834:	f8cd 9008 	str.w	r9, [sp, #8]
 800c838:	9700      	str	r7, [sp, #0]
 800c83a:	b233      	sxth	r3, r6
 800c83c:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800c840:	9a05      	ldr	r2, [sp, #20]
 800c842:	4621      	mov	r1, r4
 800c844:	47c0      	blx	r8
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 800c846:	3601      	adds	r6, #1
 800c848:	e7e8      	b.n	800c81c <lv_draw_sw_blend_basic+0x184>
 800c84a:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
 800c84e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c852:	f8bd 603e 	ldrh.w	r6, [sp, #62]	; 0x3e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c856:	3701      	adds	r7, #1
 800c858:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c85a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800c85e:	3601      	adds	r6, #1
 800c860:	1af6      	subs	r6, r6, r3
        int32_t h = lv_area_get_height(blend_area);
 800c862:	b233      	sxth	r3, r6
        int32_t w = lv_area_get_width(blend_area);
 800c864:	b23f      	sxth	r7, r7
        int32_t h = lv_area_get_height(blend_area);
 800c866:	9307      	str	r3, [sp, #28]
        for(y = 0; y < h; y++) {
 800c868:	9b07      	ldr	r3, [sp, #28]
 800c86a:	42ab      	cmp	r3, r5
 800c86c:	ddb7      	ble.n	800c7de <lv_draw_sw_blend_basic+0x146>
            for(x = 0; x < w; x++) {
 800c86e:	f04f 0800 	mov.w	r8, #0
 800c872:	e01c      	b.n	800c8ae <lv_draw_sw_blend_basic+0x216>
                if(mask[x]) {
 800c874:	f81a 2008 	ldrb.w	r2, [sl, r8]
 800c878:	b1ba      	cbz	r2, 800c8aa <lv_draw_sw_blend_basic+0x212>
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 800c87a:	fb19 f202 	smulbb	r2, r9, r2
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 800c87e:	0a12      	lsrs	r2, r2, #8
 800c880:	f8db 0000 	ldr.w	r0, [fp]
 800c884:	9202      	str	r2, [sp, #8]
 800c886:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800c88a:	f88d 2004 	strb.w	r2, [sp, #4]
 800c88e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800c892:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c896:	442a      	add	r2, r5
 800c898:	b212      	sxth	r2, r2
 800c89a:	9200      	str	r2, [sp, #0]
 800c89c:	69c2      	ldr	r2, [r0, #28]
 800c89e:	4443      	add	r3, r8
 800c8a0:	4616      	mov	r6, r2
 800c8a2:	b21b      	sxth	r3, r3
 800c8a4:	9a05      	ldr	r2, [sp, #20]
 800c8a6:	4621      	mov	r1, r4
 800c8a8:	47b0      	blx	r6
            for(x = 0; x < w; x++) {
 800c8aa:	f108 0801 	add.w	r8, r8, #1
 800c8ae:	4547      	cmp	r7, r8
 800c8b0:	dce0      	bgt.n	800c874 <lv_draw_sw_blend_basic+0x1dc>
            mask += mask_stide;
 800c8b2:	9b08      	ldr	r3, [sp, #32]
        for(y = 0; y < h; y++) {
 800c8b4:	3501      	adds	r5, #1
            mask += mask_stide;
 800c8b6:	449a      	add	sl, r3
        for(y = 0; y < h; y++) {
 800c8b8:	e7d6      	b.n	800c868 <lv_draw_sw_blend_basic+0x1d0>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c8ba:	f7fc fb37 	bl	8008f2c <_lv_refr_get_disp_refreshing>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c8be:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800c8c2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c8c6:	f8bd b03e 	ldrh.w	fp, [sp, #62]	; 0x3e
 800c8ca:	9006      	str	r0, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c8cc:	3501      	adds	r5, #1
 800c8ce:	1aed      	subs	r5, r5, r3
    int32_t w = lv_area_get_width(dest_area);
 800c8d0:	b22b      	sxth	r3, r5
 800c8d2:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c8d4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800c8d8:	f10b 0b01 	add.w	fp, fp, #1
 800c8dc:	ebab 0b03 	sub.w	fp, fp, r3
    int32_t h = lv_area_get_height(dest_area);
 800c8e0:	fa0f fb8b 	sxth.w	fp, fp
    if(mask == NULL) {
 800c8e4:	f1ba 0f00 	cmp.w	sl, #0
 800c8e8:	d023      	beq.n	800c932 <lv_draw_sw_blend_basic+0x29a>
        for(y = 0; y < h; y++) {
 800c8ea:	f04f 0800 	mov.w	r8, #0
 800c8ee:	45c3      	cmp	fp, r8
 800c8f0:	f77f af75 	ble.w	800c7de <lv_draw_sw_blend_basic+0x146>
            for(x = 0; x < w; x++) {
 800c8f4:	2700      	movs	r7, #0
 800c8f6:	e03c      	b.n	800c972 <lv_draw_sw_blend_basic+0x2da>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800c8f8:	9b06      	ldr	r3, [sp, #24]
 800c8fa:	6818      	ldr	r0, [r3, #0]
 800c8fc:	f8cd 9008 	str.w	r9, [sp, #8]
 800c900:	5df2      	ldrb	r2, [r6, r7]
 800c902:	f88d 2004 	strb.w	r2, [sp, #4]
 800c906:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800c90a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c90e:	4452      	add	r2, sl
 800c910:	b212      	sxth	r2, r2
 800c912:	9200      	str	r2, [sp, #0]
 800c914:	443b      	add	r3, r7
 800c916:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800c91a:	9a05      	ldr	r2, [sp, #20]
 800c91c:	b21b      	sxth	r3, r3
 800c91e:	4621      	mov	r1, r4
 800c920:	47c0      	blx	r8
            for(x = 0; x < w; x++) {
 800c922:	3701      	adds	r7, #1
 800c924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c926:	42bb      	cmp	r3, r7
 800c928:	dce6      	bgt.n	800c8f8 <lv_draw_sw_blend_basic+0x260>
            src_buf += src_stride;
 800c92a:	9b07      	ldr	r3, [sp, #28]
        for(y = 0; y < h; y++) {
 800c92c:	f10a 0a01 	add.w	sl, sl, #1
            src_buf += src_stride;
 800c930:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
 800c932:	45d3      	cmp	fp, sl
 800c934:	f77f af53 	ble.w	800c7de <lv_draw_sw_blend_basic+0x146>
            for(x = 0; x < w; x++) {
 800c938:	2700      	movs	r7, #0
 800c93a:	e7f3      	b.n	800c924 <lv_draw_sw_blend_basic+0x28c>
                if(mask[x]) {
 800c93c:	f81a 2007 	ldrb.w	r2, [sl, r7]
 800c940:	b1b2      	cbz	r2, 800c970 <lv_draw_sw_blend_basic+0x2d8>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800c942:	9b06      	ldr	r3, [sp, #24]
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 800c944:	fb19 f202 	smulbb	r2, r9, r2
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800c948:	0a12      	lsrs	r2, r2, #8
 800c94a:	6818      	ldr	r0, [r3, #0]
 800c94c:	9202      	str	r2, [sp, #8]
 800c94e:	5df2      	ldrb	r2, [r6, r7]
 800c950:	f88d 2004 	strb.w	r2, [sp, #4]
 800c954:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800c958:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c95c:	4442      	add	r2, r8
 800c95e:	b212      	sxth	r2, r2
 800c960:	9200      	str	r2, [sp, #0]
 800c962:	69c2      	ldr	r2, [r0, #28]
 800c964:	443b      	add	r3, r7
 800c966:	4615      	mov	r5, r2
 800c968:	b21b      	sxth	r3, r3
 800c96a:	9a05      	ldr	r2, [sp, #20]
 800c96c:	4621      	mov	r1, r4
 800c96e:	47a8      	blx	r5
            for(x = 0; x < w; x++) {
 800c970:	3701      	adds	r7, #1
 800c972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c974:	42bb      	cmp	r3, r7
 800c976:	dce1      	bgt.n	800c93c <lv_draw_sw_blend_basic+0x2a4>
            mask += mask_stride;
 800c978:	9b08      	ldr	r3, [sp, #32]
 800c97a:	449a      	add	sl, r3
            src_buf += src_stride;
 800c97c:	9b07      	ldr	r3, [sp, #28]
        for(y = 0; y < h; y++) {
 800c97e:	f108 0801 	add.w	r8, r8, #1
            src_buf += src_stride;
 800c982:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
 800c984:	e7b3      	b.n	800c8ee <lv_draw_sw_blend_basic+0x256>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c986:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800c98a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c98e:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 800c992:	f898 2019 	ldrb.w	r2, [r8, #25]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c996:	3301      	adds	r3, #1
 800c998:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c99a:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800c99e:	3101      	adds	r1, #1
 800c9a0:	1a09      	subs	r1, r1, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c9a2:	fa0f fb83 	sxth.w	fp, r3
    int32_t h = lv_area_get_height(dest_area);
 800c9a6:	b20b      	sxth	r3, r1
 800c9a8:	9306      	str	r3, [sp, #24]
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 800c9aa:	2a00      	cmp	r2, #0
 800c9ac:	f040 81ea 	bne.w	800cd84 <lv_draw_sw_blend_basic+0x6ec>
        if(dsc->src_buf == NULL) {
 800c9b0:	2d00      	cmp	r5, #0
 800c9b2:	f040 810a 	bne.w	800cbca <lv_draw_sw_blend_basic+0x532>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 800c9b6:	f898 1008 	ldrb.w	r1, [r8, #8]
 800c9ba:	460e      	mov	r6, r1
    if(mask == NULL) {
 800c9bc:	f1ba 0f00 	cmp.w	sl, #0
 800c9c0:	d139      	bne.n	800ca36 <lv_draw_sw_blend_basic+0x39e>
        if(opa >= LV_OPA_MAX) {
 800c9c2:	f1b9 0ffc 	cmp.w	r9, #252	; 0xfc
 800c9c6:	d81c      	bhi.n	800ca02 <lv_draw_sw_blend_basic+0x36a>
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 800c9c8:	f019 0f80 	tst.w	r9, #128	; 0x80
            lv_opa_t opa_inv = 255 - opa;
 800c9cc:	ea6f 0509 	mvn.w	r5, r9
 800c9d0:	bf14      	ite	ne
 800c9d2:	468c      	movne	ip, r1
 800c9d4:	f04f 0c00 	moveq.w	ip, #0
            lv_color_premult(color, opa, color_premult);
 800c9d8:	f001 0101 	and.w	r1, r1, #1
            for(y = 0; y < h; y++) {
 800c9dc:	4696      	mov	lr, r2
    /*Restore color1*/
    lv_color_t c1;
    LV_COLOR_SET_R(c1, premult_c1[0]);
    LV_COLOR_SET_G(c1, premult_c1[1]);
    LV_COLOR_SET_B(c1, premult_c1[2]);
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 800c9de:	b26d      	sxtb	r5, r5
 800c9e0:	9b06      	ldr	r3, [sp, #24]
 800c9e2:	459e      	cmp	lr, r3
 800c9e4:	f6bf aefb 	bge.w	800c7de <lv_draw_sw_blend_basic+0x146>
 800c9e8:	1e60      	subs	r0, r4, #1
                for(x = 0; x < w; x++) {
 800c9ea:	f1c4 0801 	rsb	r8, r4, #1
 800c9ee:	e019      	b.n	800ca24 <lv_draw_sw_blend_basic+0x38c>
                lv_color_fill(dest_buf, color, w);
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	465a      	mov	r2, fp
 800c9f4:	4631      	mov	r1, r6
 800c9f6:	f006 f96d 	bl	8012cd4 <lv_color_fill>
                dest_buf += dest_stride;
 800c9fa:	9b05      	ldr	r3, [sp, #20]
            for(y = 0; y < h; y++) {
 800c9fc:	f10a 0a01 	add.w	sl, sl, #1
                dest_buf += dest_stride;
 800ca00:	441c      	add	r4, r3
            for(y = 0; y < h; y++) {
 800ca02:	9b06      	ldr	r3, [sp, #24]
 800ca04:	459a      	cmp	sl, r3
 800ca06:	dbf3      	blt.n	800c9f0 <lv_draw_sw_blend_basic+0x358>
 800ca08:	e6e9      	b.n	800c7de <lv_draw_sw_blend_basic+0x146>
                    if(last_dest_color.full != dest_buf[x].full) {
 800ca0a:	7846      	ldrb	r6, [r0, #1]
 800ca0c:	4296      	cmp	r6, r2
 800ca0e:	d007      	beq.n	800ca20 <lv_draw_sw_blend_basic+0x388>
 800ca10:	2d00      	cmp	r5, #0
    LV_COLOR_SET_B(c1, premult_c1[2]);
 800ca12:	f361 0700 	bfi	r7, r1, #0, #1
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 800ca16:	bfac      	ite	ge
 800ca18:	fa5f fc87 	uxtbge.w	ip, r7
 800ca1c:	46b4      	movlt	ip, r6
#endif

    return ret;
 800ca1e:	4632      	mov	r2, r6
                    dest_buf[x] = last_res_color;
 800ca20:	f800 cf01 	strb.w	ip, [r0, #1]!
                for(x = 0; x < w; x++) {
 800ca24:	eb08 0600 	add.w	r6, r8, r0
 800ca28:	45b3      	cmp	fp, r6
 800ca2a:	dcee      	bgt.n	800ca0a <lv_draw_sw_blend_basic+0x372>
                dest_buf += dest_stride;
 800ca2c:	9b05      	ldr	r3, [sp, #20]
            for(y = 0; y < h; y++) {
 800ca2e:	f10e 0e01 	add.w	lr, lr, #1
                dest_buf += dest_stride;
 800ca32:	441c      	add	r4, r3
            for(y = 0; y < h; y++) {
 800ca34:	e7d4      	b.n	800c9e0 <lv_draw_sw_blend_basic+0x348>
        if(opa >= LV_OPA_MAX) {
 800ca36:	f1b9 0ffc 	cmp.w	r9, #252	; 0xfc
 800ca3a:	f240 8093 	bls.w	800cb64 <lv_draw_sw_blend_basic+0x4cc>
                dest_buf += (dest_stride - w);
 800ca3e:	9b05      	ldr	r3, [sp, #20]
 800ca40:	eba3 0c0b 	sub.w	ip, r3, fp
                mask += (mask_stride - w);
 800ca44:	9b08      	ldr	r3, [sp, #32]
            int32_t x_end4 = w - 4;
 800ca46:	f1ab 0704 	sub.w	r7, fp, #4
                mask += (mask_stride - w);
 800ca4a:	eba3 0e0b 	sub.w	lr, r3, fp
            for(y = 0; y < h; y++) {
 800ca4e:	9b06      	ldr	r3, [sp, #24]
 800ca50:	429d      	cmp	r5, r3
 800ca52:	f6bf aec4 	bge.w	800c7de <lv_draw_sw_blend_basic+0x146>
 800ca56:	4651      	mov	r1, sl
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 800ca58:	2000      	movs	r0, #0
 800ca5a:	e007      	b.n	800ca6c <lv_draw_sw_blend_basic+0x3d4>
                    FILL_NORMAL_MASK_PX(color)
 800ca5c:	f811 8b01 	ldrb.w	r8, [r1], #1
 800ca60:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800ca64:	d114      	bne.n	800ca90 <lv_draw_sw_blend_basic+0x3f8>
 800ca66:	7026      	strb	r6, [r4, #0]
 800ca68:	3401      	adds	r4, #1
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 800ca6a:	3001      	adds	r0, #1
 800ca6c:	4558      	cmp	r0, fp
 800ca6e:	da01      	bge.n	800ca74 <lv_draw_sw_blend_basic+0x3dc>
 800ca70:	078a      	lsls	r2, r1, #30
 800ca72:	d1f3      	bne.n	800ca5c <lv_draw_sw_blend_basic+0x3c4>
 800ca74:	1d22      	adds	r2, r4, #4
                for(; x <= x_end4; x += 4) {
 800ca76:	4287      	cmp	r7, r0
 800ca78:	f1a2 0404 	sub.w	r4, r2, #4
 800ca7c:	da11      	bge.n	800caa2 <lv_draw_sw_blend_basic+0x40a>
 800ca7e:	1a40      	subs	r0, r0, r1
                for(; x < w ; x++) {
 800ca80:	1842      	adds	r2, r0, r1
 800ca82:	4593      	cmp	fp, r2
 800ca84:	dc5d      	bgt.n	800cb42 <lv_draw_sw_blend_basic+0x4aa>
                dest_buf += (dest_stride - w);
 800ca86:	4464      	add	r4, ip
                mask += (mask_stride - w);
 800ca88:	eb01 0a0e 	add.w	sl, r1, lr
            for(y = 0; y < h; y++) {
 800ca8c:	3501      	adds	r5, #1
 800ca8e:	e7de      	b.n	800ca4e <lv_draw_sw_blend_basic+0x3b6>
 800ca90:	f894 9000 	ldrb.w	r9, [r4]
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 800ca94:	f018 0f80 	tst.w	r8, #128	; 0x80
 800ca98:	b2f2      	uxtb	r2, r6
 800ca9a:	bf08      	it	eq
 800ca9c:	464a      	moveq	r2, r9
                    FILL_NORMAL_MASK_PX(color)
 800ca9e:	7022      	strb	r2, [r4, #0]
 800caa0:	e7e2      	b.n	800ca68 <lv_draw_sw_blend_basic+0x3d0>
                    uint32_t mask32 = *((uint32_t *)mask);
 800caa2:	f851 4b04 	ldr.w	r4, [r1], #4
                    if(mask32 == 0xFFFFFFFF) {
 800caa6:	1c63      	adds	r3, r4, #1
 800caa8:	d10a      	bne.n	800cac0 <lv_draw_sw_blend_basic+0x428>
                        dest_buf[0] = color;
 800caaa:	f802 6c04 	strb.w	r6, [r2, #-4]
                        dest_buf[1] = color;
 800caae:	f802 6c03 	strb.w	r6, [r2, #-3]
                        dest_buf[2] = color;
 800cab2:	f802 6c02 	strb.w	r6, [r2, #-2]
                        FILL_NORMAL_MASK_PX(color)
 800cab6:	f802 6c01 	strb.w	r6, [r2, #-1]
                for(; x <= x_end4; x += 4) {
 800caba:	3004      	adds	r0, #4
 800cabc:	3204      	adds	r2, #4
 800cabe:	e7da      	b.n	800ca76 <lv_draw_sw_blend_basic+0x3de>
                    else if(mask32) {
 800cac0:	2c00      	cmp	r4, #0
 800cac2:	d0fa      	beq.n	800caba <lv_draw_sw_blend_basic+0x422>
                        FILL_NORMAL_MASK_PX(color)
 800cac4:	f811 9c04 	ldrb.w	r9, [r1, #-4]
 800cac8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800cacc:	b2f4      	uxtb	r4, r6
 800cace:	d11d      	bne.n	800cb0c <lv_draw_sw_blend_basic+0x474>
 800cad0:	f802 6c04 	strb.w	r6, [r2, #-4]
                        FILL_NORMAL_MASK_PX(color)
 800cad4:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 800cad8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800cadc:	d11f      	bne.n	800cb1e <lv_draw_sw_blend_basic+0x486>
 800cade:	f802 6c03 	strb.w	r6, [r2, #-3]
                        FILL_NORMAL_MASK_PX(color)
 800cae2:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 800cae6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800caea:	d121      	bne.n	800cb30 <lv_draw_sw_blend_basic+0x498>
 800caec:	f802 6c02 	strb.w	r6, [r2, #-2]
                        FILL_NORMAL_MASK_PX(color)
 800caf0:	f811 8c01 	ldrb.w	r8, [r1, #-1]
 800caf4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800caf8:	d0dd      	beq.n	800cab6 <lv_draw_sw_blend_basic+0x41e>
 800cafa:	f812 9c01 	ldrb.w	r9, [r2, #-1]
 800cafe:	f018 0f80 	tst.w	r8, #128	; 0x80
 800cb02:	bf08      	it	eq
 800cb04:	464c      	moveq	r4, r9
 800cb06:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cb0a:	e7d6      	b.n	800caba <lv_draw_sw_blend_basic+0x422>
 800cb0c:	f019 0f80 	tst.w	r9, #128	; 0x80
 800cb10:	f812 8c04 	ldrb.w	r8, [r2, #-4]
 800cb14:	bf18      	it	ne
 800cb16:	46a0      	movne	r8, r4
                        FILL_NORMAL_MASK_PX(color)
 800cb18:	f802 8c04 	strb.w	r8, [r2, #-4]
 800cb1c:	e7da      	b.n	800cad4 <lv_draw_sw_blend_basic+0x43c>
 800cb1e:	f019 0f80 	tst.w	r9, #128	; 0x80
 800cb22:	f812 8c03 	ldrb.w	r8, [r2, #-3]
 800cb26:	bf18      	it	ne
 800cb28:	46a0      	movne	r8, r4
                        FILL_NORMAL_MASK_PX(color)
 800cb2a:	f802 8c03 	strb.w	r8, [r2, #-3]
 800cb2e:	e7d8      	b.n	800cae2 <lv_draw_sw_blend_basic+0x44a>
 800cb30:	f019 0f80 	tst.w	r9, #128	; 0x80
 800cb34:	f812 8c02 	ldrb.w	r8, [r2, #-2]
 800cb38:	bf18      	it	ne
 800cb3a:	46a0      	movne	r8, r4
                        FILL_NORMAL_MASK_PX(color)
 800cb3c:	f802 8c02 	strb.w	r8, [r2, #-2]
 800cb40:	e7d6      	b.n	800caf0 <lv_draw_sw_blend_basic+0x458>
                    FILL_NORMAL_MASK_PX(color)
 800cb42:	f811 8b01 	ldrb.w	r8, [r1], #1
 800cb46:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800cb4a:	d102      	bne.n	800cb52 <lv_draw_sw_blend_basic+0x4ba>
 800cb4c:	7026      	strb	r6, [r4, #0]
 800cb4e:	3401      	adds	r4, #1
                for(; x < w ; x++) {
 800cb50:	e796      	b.n	800ca80 <lv_draw_sw_blend_basic+0x3e8>
 800cb52:	f894 9000 	ldrb.w	r9, [r4]
 800cb56:	f018 0f80 	tst.w	r8, #128	; 0x80
 800cb5a:	b2f2      	uxtb	r2, r6
 800cb5c:	bf08      	it	eq
 800cb5e:	464a      	moveq	r2, r9
                    FILL_NORMAL_MASK_PX(color)
 800cb60:	7022      	strb	r2, [r4, #0]
 800cb62:	e7f4      	b.n	800cb4e <lv_draw_sw_blend_basic+0x4b6>
                mask += (mask_stride - w);
 800cb64:	9808      	ldr	r0, [sp, #32]
            last_dest_color.full = dest_buf[0].full;
 800cb66:	f894 8000 	ldrb.w	r8, [r4]
                mask += (mask_stride - w);
 800cb6a:	eba0 0e0b 	sub.w	lr, r0, fp
 800cb6e:	b2c9      	uxtb	r1, r1
            last_res_color.full = dest_buf[0].full;
 800cb70:	4643      	mov	r3, r8
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 800cb72:	4616      	mov	r6, r2
            for(y = 0; y < h; y++) {
 800cb74:	4694      	mov	ip, r2
                mask += (mask_stride - w);
 800cb76:	f1bb 0f00 	cmp.w	fp, #0
 800cb7a:	bfa8      	it	ge
 800cb7c:	44de      	addge	lr, fp
            for(y = 0; y < h; y++) {
 800cb7e:	9806      	ldr	r0, [sp, #24]
 800cb80:	4584      	cmp	ip, r0
 800cb82:	f6bf ae2c 	bge.w	800c7de <lv_draw_sw_blend_basic+0x146>
                for(x = 0; x < w; x++) {
 800cb86:	2000      	movs	r0, #0
 800cb88:	e017      	b.n	800cbba <lv_draw_sw_blend_basic+0x522>
                    if(*mask) {
 800cb8a:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800cb8e:	b19d      	cbz	r5, 800cbb8 <lv_draw_sw_blend_basic+0x520>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800cb90:	4295      	cmp	r5, r2
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 800cb92:	5c27      	ldrb	r7, [r4, r0]
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800cb94:	d00c      	beq.n	800cbb0 <lv_draw_sw_blend_basic+0x518>
 800cb96:	2dff      	cmp	r5, #255	; 0xff
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 800cb98:	bf1a      	itte	ne
 800cb9a:	fb15 f609 	smulbbne	r6, r5, r9
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800cb9e:	0a36      	lsrne	r6, r6, #8
 800cba0:	464e      	moveq	r6, r9
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 800cba2:	f016 0f80 	tst.w	r6, #128	; 0x80
 800cba6:	bf14      	ite	ne
 800cba8:	460b      	movne	r3, r1
 800cbaa:	463b      	moveq	r3, r7
 800cbac:	462a      	mov	r2, r5
 800cbae:	e001      	b.n	800cbb4 <lv_draw_sw_blend_basic+0x51c>
 800cbb0:	45b8      	cmp	r8, r7
 800cbb2:	d1f6      	bne.n	800cba2 <lv_draw_sw_blend_basic+0x50a>
                        dest_buf[x] = last_res_color;
 800cbb4:	5423      	strb	r3, [r4, r0]
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 800cbb6:	46b8      	mov	r8, r7
                for(x = 0; x < w; x++) {
 800cbb8:	3001      	adds	r0, #1
 800cbba:	4558      	cmp	r0, fp
 800cbbc:	dbe5      	blt.n	800cb8a <lv_draw_sw_blend_basic+0x4f2>
                dest_buf += dest_stride;
 800cbbe:	9805      	ldr	r0, [sp, #20]
                mask += (mask_stride - w);
 800cbc0:	44f2      	add	sl, lr
                dest_buf += dest_stride;
 800cbc2:	4404      	add	r4, r0
            for(y = 0; y < h; y++) {
 800cbc4:	f10c 0c01 	add.w	ip, ip, #1
 800cbc8:	e7d9      	b.n	800cb7e <lv_draw_sw_blend_basic+0x4e6>
    if(mask == NULL) {
 800cbca:	f1ba 0f00 	cmp.w	sl, #0
 800cbce:	d12d      	bne.n	800cc2c <lv_draw_sw_blend_basic+0x594>
        if(opa >= LV_OPA_MAX) {
 800cbd0:	f1b9 0ffc 	cmp.w	r9, #252	; 0xfc
 800cbd4:	d814      	bhi.n	800cc00 <lv_draw_sw_blend_basic+0x568>
            for(y = 0; y < h; y++) {
 800cbd6:	4650      	mov	r0, sl
 800cbd8:	fa4f f789 	sxtb.w	r7, r9
 800cbdc:	9b06      	ldr	r3, [sp, #24]
 800cbde:	4298      	cmp	r0, r3
 800cbe0:	f6bf adfd 	bge.w	800c7de <lv_draw_sw_blend_basic+0x146>
 800cbe4:	1e61      	subs	r1, r4, #1
                for(x = 0; x < w; x++) {
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	e018      	b.n	800cc1c <lv_draw_sw_blend_basic+0x584>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 800cbea:	4631      	mov	r1, r6
 800cbec:	4620      	mov	r0, r4
 800cbee:	465a      	mov	r2, fp
 800cbf0:	f006 fc64 	bl	80134bc <lv_memcpy>
                dest_buf += dest_stride;
 800cbf4:	9b05      	ldr	r3, [sp, #20]
 800cbf6:	441c      	add	r4, r3
                src_buf += src_stride;
 800cbf8:	9b07      	ldr	r3, [sp, #28]
            for(y = 0; y < h; y++) {
 800cbfa:	f10a 0a01 	add.w	sl, sl, #1
                src_buf += src_stride;
 800cbfe:	441e      	add	r6, r3
            for(y = 0; y < h; y++) {
 800cc00:	9b06      	ldr	r3, [sp, #24]
 800cc02:	459a      	cmp	sl, r3
 800cc04:	dbf1      	blt.n	800cbea <lv_draw_sw_blend_basic+0x552>
 800cc06:	e5ea      	b.n	800c7de <lv_draw_sw_blend_basic+0x146>
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 800cc08:	5cb5      	ldrb	r5, [r6, r2]
 800cc0a:	f891 c001 	ldrb.w	ip, [r1, #1]
 800cc0e:	ea15 0527 	ands.w	r5, r5, r7, asr #32
 800cc12:	bf38      	it	cc
 800cc14:	4665      	movcc	r5, ip
 800cc16:	f801 5f01 	strb.w	r5, [r1, #1]!
                for(x = 0; x < w; x++) {
 800cc1a:	3201      	adds	r2, #1
 800cc1c:	455a      	cmp	r2, fp
 800cc1e:	dbf3      	blt.n	800cc08 <lv_draw_sw_blend_basic+0x570>
                dest_buf += dest_stride;
 800cc20:	9b05      	ldr	r3, [sp, #20]
 800cc22:	441c      	add	r4, r3
                src_buf += src_stride;
 800cc24:	9b07      	ldr	r3, [sp, #28]
            for(y = 0; y < h; y++) {
 800cc26:	3001      	adds	r0, #1
                src_buf += src_stride;
 800cc28:	441e      	add	r6, r3
            for(y = 0; y < h; y++) {
 800cc2a:	e7d7      	b.n	800cbdc <lv_draw_sw_blend_basic+0x544>
        if(opa > LV_OPA_MAX) {
 800cc2c:	f1b9 0ffd 	cmp.w	r9, #253	; 0xfd
 800cc30:	f240 80a2 	bls.w	800cd78 <lv_draw_sw_blend_basic+0x6e0>
            int32_t x_end4 = w - 4;
 800cc34:	f1ab 0904 	sub.w	r9, fp, #4
            for(y = 0; y < h; y++) {
 800cc38:	4690      	mov	r8, r2
 800cc3a:	9b06      	ldr	r3, [sp, #24]
 800cc3c:	4598      	cmp	r8, r3
 800cc3e:	f6bf adce 	bge.w	800c7de <lv_draw_sw_blend_basic+0x146>
 800cc42:	4622      	mov	r2, r4
 800cc44:	4650      	mov	r0, sl
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800cc46:	2100      	movs	r1, #0
 800cc48:	e008      	b.n	800cc5c <lv_draw_sw_blend_basic+0x5c4>
                    MAP_NORMAL_MASK_PX(x)
 800cc4a:	f810 7b01 	ldrb.w	r7, [r0], #1
 800cc4e:	b11f      	cbz	r7, 800cc58 <lv_draw_sw_blend_basic+0x5c0>
 800cc50:	2fff      	cmp	r7, #255	; 0xff
 800cc52:	5c75      	ldrb	r5, [r6, r1]
 800cc54:	d118      	bne.n	800cc88 <lv_draw_sw_blend_basic+0x5f0>
 800cc56:	7015      	strb	r5, [r2, #0]
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800cc58:	3101      	adds	r1, #1
 800cc5a:	3201      	adds	r2, #1
 800cc5c:	4559      	cmp	r1, fp
 800cc5e:	4605      	mov	r5, r0
 800cc60:	da01      	bge.n	800cc66 <lv_draw_sw_blend_basic+0x5ce>
 800cc62:	0783      	lsls	r3, r0, #30
 800cc64:	d1f1      	bne.n	800cc4a <lv_draw_sw_blend_basic+0x5b2>
 800cc66:	1862      	adds	r2, r4, r1
 800cc68:	1870      	adds	r0, r6, r1
                for(; x < x_end4; x += 4) {
 800cc6a:	4589      	cmp	r9, r1
 800cc6c:	dc13      	bgt.n	800cc96 <lv_draw_sw_blend_basic+0x5fe>
 800cc6e:	1862      	adds	r2, r4, r1
 800cc70:	3d01      	subs	r5, #1
                for(; x < w ; x++) {
 800cc72:	4559      	cmp	r1, fp
 800cc74:	db54      	blt.n	800cd20 <lv_draw_sw_blend_basic+0x688>
                dest_buf += dest_stride;
 800cc76:	9b05      	ldr	r3, [sp, #20]
 800cc78:	441c      	add	r4, r3
                src_buf += src_stride;
 800cc7a:	9b07      	ldr	r3, [sp, #28]
 800cc7c:	441e      	add	r6, r3
                mask += mask_stride;
 800cc7e:	9b08      	ldr	r3, [sp, #32]
            for(y = 0; y < h; y++) {
 800cc80:	f108 0801 	add.w	r8, r8, #1
                mask += mask_stride;
 800cc84:	449a      	add	sl, r3
            for(y = 0; y < h; y++) {
 800cc86:	e7d8      	b.n	800cc3a <lv_draw_sw_blend_basic+0x5a2>
                    MAP_NORMAL_MASK_PX(x)
 800cc88:	f892 c000 	ldrb.w	ip, [r2]
 800cc8c:	f017 0f80 	tst.w	r7, #128	; 0x80
 800cc90:	bf08      	it	eq
 800cc92:	4665      	moveq	r5, ip
 800cc94:	e7df      	b.n	800cc56 <lv_draw_sw_blend_basic+0x5be>
                    if(*mask32) {
 800cc96:	682f      	ldr	r7, [r5, #0]
 800cc98:	b14f      	cbz	r7, 800ccae <lv_draw_sw_blend_basic+0x616>
                        if((*mask32) == 0xFFFFFFFF) {
 800cc9a:	3701      	adds	r7, #1
 800cc9c:	d10c      	bne.n	800ccb8 <lv_draw_sw_blend_basic+0x620>
                            dest_buf[x] = src_buf[x];
 800cc9e:	7807      	ldrb	r7, [r0, #0]
 800cca0:	7017      	strb	r7, [r2, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 800cca2:	7847      	ldrb	r7, [r0, #1]
 800cca4:	7057      	strb	r7, [r2, #1]
                            dest_buf[x + 2] = src_buf[x + 2];
 800cca6:	7887      	ldrb	r7, [r0, #2]
 800cca8:	7097      	strb	r7, [r2, #2]
                            dest_buf[x + 3] = src_buf[x + 3];
 800ccaa:	78c7      	ldrb	r7, [r0, #3]
                            MAP_NORMAL_MASK_PX(x + 3)
 800ccac:	70d7      	strb	r7, [r2, #3]
                    mask32++;
 800ccae:	3504      	adds	r5, #4
                for(; x < x_end4; x += 4) {
 800ccb0:	3104      	adds	r1, #4
 800ccb2:	3204      	adds	r2, #4
 800ccb4:	3004      	adds	r0, #4
 800ccb6:	e7d8      	b.n	800cc6a <lv_draw_sw_blend_basic+0x5d2>
                            MAP_NORMAL_MASK_PX(x)
 800ccb8:	782b      	ldrb	r3, [r5, #0]
 800ccba:	b11b      	cbz	r3, 800ccc4 <lv_draw_sw_blend_basic+0x62c>
 800ccbc:	2bff      	cmp	r3, #255	; 0xff
 800ccbe:	7807      	ldrb	r7, [r0, #0]
 800ccc0:	d119      	bne.n	800ccf6 <lv_draw_sw_blend_basic+0x65e>
 800ccc2:	7017      	strb	r7, [r2, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
 800ccc4:	786b      	ldrb	r3, [r5, #1]
 800ccc6:	b11b      	cbz	r3, 800ccd0 <lv_draw_sw_blend_basic+0x638>
 800ccc8:	2bff      	cmp	r3, #255	; 0xff
 800ccca:	7847      	ldrb	r7, [r0, #1]
 800cccc:	d11a      	bne.n	800cd04 <lv_draw_sw_blend_basic+0x66c>
 800ccce:	7057      	strb	r7, [r2, #1]
                            MAP_NORMAL_MASK_PX(x + 2)
 800ccd0:	78ab      	ldrb	r3, [r5, #2]
 800ccd2:	b11b      	cbz	r3, 800ccdc <lv_draw_sw_blend_basic+0x644>
 800ccd4:	2bff      	cmp	r3, #255	; 0xff
 800ccd6:	7887      	ldrb	r7, [r0, #2]
 800ccd8:	d11b      	bne.n	800cd12 <lv_draw_sw_blend_basic+0x67a>
 800ccda:	7097      	strb	r7, [r2, #2]
                            MAP_NORMAL_MASK_PX(x + 3)
 800ccdc:	78eb      	ldrb	r3, [r5, #3]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d0e5      	beq.n	800ccae <lv_draw_sw_blend_basic+0x616>
 800cce2:	2bff      	cmp	r3, #255	; 0xff
 800cce4:	78c7      	ldrb	r7, [r0, #3]
 800cce6:	d0e1      	beq.n	800ccac <lv_draw_sw_blend_basic+0x614>
 800cce8:	f892 e003 	ldrb.w	lr, [r2, #3]
 800ccec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ccf0:	bf08      	it	eq
 800ccf2:	4677      	moveq	r7, lr
 800ccf4:	e7da      	b.n	800ccac <lv_draw_sw_blend_basic+0x614>
                            MAP_NORMAL_MASK_PX(x)
 800ccf6:	f892 e000 	ldrb.w	lr, [r2]
 800ccfa:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ccfe:	bf08      	it	eq
 800cd00:	4677      	moveq	r7, lr
 800cd02:	e7de      	b.n	800ccc2 <lv_draw_sw_blend_basic+0x62a>
                            MAP_NORMAL_MASK_PX(x + 1)
 800cd04:	f892 e001 	ldrb.w	lr, [r2, #1]
 800cd08:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cd0c:	bf08      	it	eq
 800cd0e:	4677      	moveq	r7, lr
 800cd10:	e7dd      	b.n	800ccce <lv_draw_sw_blend_basic+0x636>
                            MAP_NORMAL_MASK_PX(x + 2)
 800cd12:	f892 e002 	ldrb.w	lr, [r2, #2]
 800cd16:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cd1a:	bf08      	it	eq
 800cd1c:	4677      	moveq	r7, lr
 800cd1e:	e7dc      	b.n	800ccda <lv_draw_sw_blend_basic+0x642>
                    MAP_NORMAL_MASK_PX(x)
 800cd20:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 800cd24:	b11f      	cbz	r7, 800cd2e <lv_draw_sw_blend_basic+0x696>
 800cd26:	2fff      	cmp	r7, #255	; 0xff
 800cd28:	5c70      	ldrb	r0, [r6, r1]
 800cd2a:	d103      	bne.n	800cd34 <lv_draw_sw_blend_basic+0x69c>
 800cd2c:	7010      	strb	r0, [r2, #0]
                for(; x < w ; x++) {
 800cd2e:	3101      	adds	r1, #1
 800cd30:	3201      	adds	r2, #1
 800cd32:	e79e      	b.n	800cc72 <lv_draw_sw_blend_basic+0x5da>
                    MAP_NORMAL_MASK_PX(x)
 800cd34:	f892 c000 	ldrb.w	ip, [r2]
 800cd38:	f017 0f80 	tst.w	r7, #128	; 0x80
 800cd3c:	bf08      	it	eq
 800cd3e:	4660      	moveq	r0, ip
 800cd40:	e7f4      	b.n	800cd2c <lv_draw_sw_blend_basic+0x694>
                    if(mask[x]) {
 800cd42:	f81a 1000 	ldrb.w	r1, [sl, r0]
 800cd46:	b169      	cbz	r1, 800cd64 <lv_draw_sw_blend_basic+0x6cc>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800cd48:	29fc      	cmp	r1, #252	; 0xfc
 800cd4a:	bf98      	it	ls
 800cd4c:	fb19 f101 	smulbbls	r1, r9, r1
 800cd50:	5c27      	ldrb	r7, [r4, r0]
 800cd52:	5c35      	ldrb	r5, [r6, r0]
 800cd54:	bf94      	ite	ls
 800cd56:	0a09      	lsrls	r1, r1, #8
 800cd58:	4649      	movhi	r1, r9
 800cd5a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800cd5e:	bf08      	it	eq
 800cd60:	463d      	moveq	r5, r7
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 800cd62:	5425      	strb	r5, [r4, r0]
                for(x = 0; x < w; x++) {
 800cd64:	3001      	adds	r0, #1
 800cd66:	4558      	cmp	r0, fp
 800cd68:	dbeb      	blt.n	800cd42 <lv_draw_sw_blend_basic+0x6aa>
                dest_buf += dest_stride;
 800cd6a:	9b05      	ldr	r3, [sp, #20]
 800cd6c:	441c      	add	r4, r3
                src_buf += src_stride;
 800cd6e:	9b07      	ldr	r3, [sp, #28]
 800cd70:	441e      	add	r6, r3
                mask += mask_stride;
 800cd72:	9b08      	ldr	r3, [sp, #32]
            for(y = 0; y < h; y++) {
 800cd74:	3201      	adds	r2, #1
                mask += mask_stride;
 800cd76:	449a      	add	sl, r3
            for(y = 0; y < h; y++) {
 800cd78:	9b06      	ldr	r3, [sp, #24]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	f6bf ad2f 	bge.w	800c7de <lv_draw_sw_blend_basic+0x146>
                for(x = 0; x < w; x++) {
 800cd80:	2000      	movs	r0, #0
 800cd82:	e7f0      	b.n	800cd66 <lv_draw_sw_blend_basic+0x6ce>
        if(dsc->src_buf == NULL) {
 800cd84:	3a01      	subs	r2, #1
 800cd86:	b2d2      	uxtb	r2, r2
 800cd88:	2d00      	cmp	r5, #0
 800cd8a:	d164      	bne.n	800ce56 <lv_draw_sw_blend_basic+0x7be>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 800cd8c:	f898 0008 	ldrb.w	r0, [r8, #8]
 800cd90:	f88d 001c 	strb.w	r0, [sp, #28]
    switch(blend_mode) {
 800cd94:	2a02      	cmp	r2, #2
 800cd96:	f63f ad22 	bhi.w	800c7de <lv_draw_sw_blend_basic+0x146>
 800cd9a:	4970      	ldr	r1, [pc, #448]	; (800cf5c <lv_draw_sw_blend_basic+0x8c4>)
            last_dest_color.full = dest_buf[0].full;
 800cd9c:	7826      	ldrb	r6, [r4, #0]
 800cd9e:	f851 7022 	ldr.w	r7, [r1, r2, lsl #2]
    if(mask == NULL) {
 800cda2:	f1ba 0f00 	cmp.w	sl, #0
 800cda6:	d11d      	bne.n	800cde4 <lv_draw_sw_blend_basic+0x74c>
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 800cda8:	464a      	mov	r2, r9
 800cdaa:	4631      	mov	r1, r6
 800cdac:	47b8      	blx	r7
        for(y = 0; y < h; y++) {
 800cdae:	46d0      	mov	r8, sl
 800cdb0:	9b06      	ldr	r3, [sp, #24]
 800cdb2:	4598      	cmp	r8, r3
 800cdb4:	f6bf ad13 	bge.w	800c7de <lv_draw_sw_blend_basic+0x146>
 800cdb8:	4625      	mov	r5, r4
 800cdba:	e00b      	b.n	800cdd4 <lv_draw_sw_blend_basic+0x73c>
                if(last_dest_color.full != dest_buf[x].full) {
 800cdbc:	f895 a000 	ldrb.w	sl, [r5]
 800cdc0:	45b2      	cmp	sl, r6
 800cdc2:	d004      	beq.n	800cdce <lv_draw_sw_blend_basic+0x736>
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 800cdc4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800cdc8:	464a      	mov	r2, r9
 800cdca:	4651      	mov	r1, sl
 800cdcc:	47b8      	blx	r7
                dest_buf[x] = last_res_color;
 800cdce:	f805 0b01 	strb.w	r0, [r5], #1
                if(last_dest_color.full != dest_buf[x].full) {
 800cdd2:	4656      	mov	r6, sl
            for(x = 0; x < w; x++) {
 800cdd4:	1b2a      	subs	r2, r5, r4
 800cdd6:	455a      	cmp	r2, fp
 800cdd8:	dbf0      	blt.n	800cdbc <lv_draw_sw_blend_basic+0x724>
            dest_buf += dest_stride;
 800cdda:	9b05      	ldr	r3, [sp, #20]
        for(y = 0; y < h; y++) {
 800cddc:	f108 0801 	add.w	r8, r8, #1
            dest_buf += dest_stride;
 800cde0:	441c      	add	r4, r3
        for(y = 0; y < h; y++) {
 800cde2:	e7e5      	b.n	800cdb0 <lv_draw_sw_blend_basic+0x718>
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 800cde4:	f89a 2000 	ldrb.w	r2, [sl]
 800cde8:	2afc      	cmp	r2, #252	; 0xfc
 800cdea:	bf98      	it	ls
 800cdec:	fb12 f209 	smulbbls	r2, r2, r9
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 800cdf0:	4631      	mov	r1, r6
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 800cdf2:	bf94      	ite	ls
 800cdf4:	0a12      	lsrls	r2, r2, #8
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 800cdf6:	464a      	movhi	r2, r9
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 800cdf8:	47b8      	blx	r7
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800cdfa:	2100      	movs	r1, #0
        for(y = 0; y < h; y++) {
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	9a06      	ldr	r2, [sp, #24]
 800ce00:	4293      	cmp	r3, r2
 800ce02:	f6bf acec 	bge.w	800c7de <lv_draw_sw_blend_basic+0x146>
 800ce06:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ce0a:	4625      	mov	r5, r4
 800ce0c:	e01a      	b.n	800ce44 <lv_draw_sw_blend_basic+0x7ac>
                if(mask[x] == 0) continue;
 800ce0e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800ce12:	b1b2      	cbz	r2, 800ce42 <lv_draw_sw_blend_basic+0x7aa>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 800ce14:	428a      	cmp	r2, r1
 800ce16:	d103      	bne.n	800ce20 <lv_draw_sw_blend_basic+0x788>
 800ce18:	f895 c000 	ldrb.w	ip, [r5]
 800ce1c:	45b4      	cmp	ip, r6
 800ce1e:	d00f      	beq.n	800ce40 <lv_draw_sw_blend_basic+0x7a8>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 800ce20:	2afc      	cmp	r2, #252	; 0xfc
 800ce22:	bf98      	it	ls
 800ce24:	fb12 f209 	smulbbls	r2, r2, r9
                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 800ce28:	7829      	ldrb	r1, [r5, #0]
 800ce2a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ce2e:	9309      	str	r3, [sp, #36]	; 0x24
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 800ce30:	bf94      	ite	ls
 800ce32:	0a12      	lsrls	r2, r2, #8
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 800ce34:	464a      	movhi	r2, r9
                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 800ce36:	47b8      	blx	r7
                    last_mask = mask[x];
 800ce38:	f898 1000 	ldrb.w	r1, [r8]
                    last_dest_color.full = dest_buf[x].full;
 800ce3c:	782e      	ldrb	r6, [r5, #0]
 800ce3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
                dest_buf[x] = last_res_color;
 800ce40:	7028      	strb	r0, [r5, #0]
            for(x = 0; x < w; x++) {
 800ce42:	3501      	adds	r5, #1
 800ce44:	1b2a      	subs	r2, r5, r4
 800ce46:	455a      	cmp	r2, fp
 800ce48:	dbe1      	blt.n	800ce0e <lv_draw_sw_blend_basic+0x776>
            dest_buf += dest_stride;
 800ce4a:	9a05      	ldr	r2, [sp, #20]
 800ce4c:	4414      	add	r4, r2
            mask += mask_stride;
 800ce4e:	9a08      	ldr	r2, [sp, #32]
        for(y = 0; y < h; y++) {
 800ce50:	3301      	adds	r3, #1
            mask += mask_stride;
 800ce52:	4492      	add	sl, r2
        for(y = 0; y < h; y++) {
 800ce54:	e7d3      	b.n	800cdfe <lv_draw_sw_blend_basic+0x766>
    switch(blend_mode) {
 800ce56:	2a02      	cmp	r2, #2
 800ce58:	f63f acc1 	bhi.w	800c7de <lv_draw_sw_blend_basic+0x146>
 800ce5c:	4940      	ldr	r1, [pc, #256]	; (800cf60 <lv_draw_sw_blend_basic+0x8c8>)
            last_dest_color.full = dest_buf[0].full;
 800ce5e:	7825      	ldrb	r5, [r4, #0]
 800ce60:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800ce64:	9309      	str	r3, [sp, #36]	; 0x24
        last_src_color = src_buf[0];
 800ce66:	7833      	ldrb	r3, [r6, #0]
    if(mask == NULL) {
 800ce68:	f1ba 0f00 	cmp.w	sl, #0
 800ce6c:	d12e      	bne.n	800cecc <lv_draw_sw_blend_basic+0x834>
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 800ce6e:	4618      	mov	r0, r3
 800ce70:	9308      	str	r3, [sp, #32]
 800ce72:	464a      	mov	r2, r9
 800ce74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce76:	4629      	mov	r1, r5
 800ce78:	4798      	blx	r3
        for(y = 0; y < h; y++) {
 800ce7a:	9b08      	ldr	r3, [sp, #32]
 800ce7c:	9a06      	ldr	r2, [sp, #24]
 800ce7e:	4592      	cmp	sl, r2
 800ce80:	f6bf acad 	bge.w	800c7de <lv_draw_sw_blend_basic+0x146>
 800ce84:	f104 38ff 	add.w	r8, r4, #4294967295
            for(x = 0; x < w; x++) {
 800ce88:	2700      	movs	r7, #0
 800ce8a:	e016      	b.n	800ceba <lv_draw_sw_blend_basic+0x822>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 800ce8c:	5df2      	ldrb	r2, [r6, r7]
 800ce8e:	9208      	str	r2, [sp, #32]
 800ce90:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ce94:	920a      	str	r2, [sp, #40]	; 0x28
 800ce96:	9a08      	ldr	r2, [sp, #32]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d102      	bne.n	800cea2 <lv_draw_sw_blend_basic+0x80a>
 800ce9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce9e:	4295      	cmp	r5, r2
 800cea0:	d007      	beq.n	800ceb2 <lv_draw_sw_blend_basic+0x81a>
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 800cea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cea4:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 800cea8:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800ceac:	464a      	mov	r2, r9
 800ceae:	4798      	blx	r3
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 800ceb0:	9b08      	ldr	r3, [sp, #32]
                dest_buf[x] = last_res_color;
 800ceb2:	f808 0f01 	strb.w	r0, [r8, #1]!
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 800ceb6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            for(x = 0; x < w; x++) {
 800ceb8:	3701      	adds	r7, #1
 800ceba:	455f      	cmp	r7, fp
 800cebc:	dbe6      	blt.n	800ce8c <lv_draw_sw_blend_basic+0x7f4>
            dest_buf += dest_stride;
 800cebe:	9a05      	ldr	r2, [sp, #20]
 800cec0:	4414      	add	r4, r2
            src_buf += src_stride;
 800cec2:	9a07      	ldr	r2, [sp, #28]
        for(y = 0; y < h; y++) {
 800cec4:	f10a 0a01 	add.w	sl, sl, #1
            src_buf += src_stride;
 800cec8:	4416      	add	r6, r2
        for(y = 0; y < h; y++) {
 800ceca:	e7d7      	b.n	800ce7c <lv_draw_sw_blend_basic+0x7e4>
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 800cecc:	f89a 2000 	ldrb.w	r2, [sl]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 800ced0:	930a      	str	r3, [sp, #40]	; 0x28
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 800ced2:	2afc      	cmp	r2, #252	; 0xfc
 800ced4:	bf9a      	itte	ls
 800ced6:	fb19 f202 	smulbbls	r2, r9, r2
 800ceda:	ea4f 2812 	movls.w	r8, r2, lsr #8
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 800cede:	46c8      	movhi	r8, r9
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 800cee0:	4618      	mov	r0, r3
 800cee2:	4642      	mov	r2, r8
 800cee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cee6:	4629      	mov	r1, r5
 800cee8:	4798      	blx	r3
        for(y = 0; y < h; y++) {
 800ceea:	2300      	movs	r3, #0
 800ceec:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cef2:	9906      	ldr	r1, [sp, #24]
 800cef4:	428a      	cmp	r2, r1
 800cef6:	f6bf ac72 	bge.w	800c7de <lv_draw_sw_blend_basic+0x146>
            for(x = 0; x < w; x++) {
 800cefa:	2700      	movs	r7, #0
 800cefc:	e021      	b.n	800cf42 <lv_draw_sw_blend_basic+0x8aa>
                if(mask[x] == 0) continue;
 800cefe:	f81a 2007 	ldrb.w	r2, [sl, r7]
 800cf02:	b1ea      	cbz	r2, 800cf40 <lv_draw_sw_blend_basic+0x8a8>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 800cf04:	5df1      	ldrb	r1, [r6, r7]
 800cf06:	910a      	str	r1, [sp, #40]	; 0x28
 800cf08:	5de1      	ldrb	r1, [r4, r7]
 800cf0a:	910c      	str	r1, [sp, #48]	; 0x30
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800cf0c:	2afc      	cmp	r2, #252	; 0xfc
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 800cf0e:	990a      	ldr	r1, [sp, #40]	; 0x28
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800cf10:	bf9a      	itte	ls
 800cf12:	fb19 f202 	smulbbls	r2, r9, r2
 800cf16:	0a12      	lsrls	r2, r2, #8
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 800cf18:	464a      	movhi	r2, r9
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 800cf1a:	4299      	cmp	r1, r3
 800cf1c:	d104      	bne.n	800cf28 <lv_draw_sw_blend_basic+0x890>
 800cf1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cf20:	428d      	cmp	r5, r1
 800cf22:	d101      	bne.n	800cf28 <lv_draw_sw_blend_basic+0x890>
 800cf24:	4590      	cmp	r8, r2
 800cf26:	d008      	beq.n	800cf3a <lv_draw_sw_blend_basic+0x8a2>
                    last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 800cf28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf2a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 800cf2e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 800cf32:	920d      	str	r2, [sp, #52]	; 0x34
 800cf34:	4798      	blx	r3
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 800cf36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                dest_buf[x] = last_res_color;
 800cf3a:	55e0      	strb	r0, [r4, r7]
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 800cf3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
                dest_buf[x] = last_res_color;
 800cf3e:	4690      	mov	r8, r2
            for(x = 0; x < w; x++) {
 800cf40:	3701      	adds	r7, #1
 800cf42:	455f      	cmp	r7, fp
 800cf44:	dbdb      	blt.n	800cefe <lv_draw_sw_blend_basic+0x866>
            dest_buf += dest_stride;
 800cf46:	9a05      	ldr	r2, [sp, #20]
 800cf48:	4414      	add	r4, r2
            src_buf += src_stride;
 800cf4a:	9a07      	ldr	r2, [sp, #28]
 800cf4c:	4416      	add	r6, r2
            mask += mask_stride;
 800cf4e:	9a08      	ldr	r2, [sp, #32]
 800cf50:	4492      	add	sl, r2
        for(y = 0; y < h; y++) {
 800cf52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cf54:	3201      	adds	r2, #1
 800cf56:	920b      	str	r2, [sp, #44]	; 0x2c
 800cf58:	e7ca      	b.n	800cef0 <lv_draw_sw_blend_basic+0x858>
 800cf5a:	bf00      	nop
 800cf5c:	0801e2e8 	.word	0x0801e2e8
 800cf60:	0801e2e8 	.word	0x0801e2e8

0800cf64 <find_oldest_item_life>:
}

static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx)
{
    uint32_t * min_life = (uint32_t *)ctx;
    if(c->life < *min_life) *min_life = c->life;
 800cf64:	6843      	ldr	r3, [r0, #4]
 800cf66:	680a      	ldr	r2, [r1, #0]
 800cf68:	f3c3 031d 	ubfx	r3, r3, #0, #30
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	bf38      	it	cc
 800cf70:	600b      	strcc	r3, [r1, #0]
    return LV_RES_INV;
}
 800cf72:	2000      	movs	r0, #0
 800cf74:	4770      	bx	lr

0800cf76 <find_item>:
}

static lv_res_t find_item(lv_grad_t * c, void * ctx)
{
    uint32_t * k = (uint32_t *)ctx;
    if(c->key == *k) return LV_RES_OK;
 800cf76:	6800      	ldr	r0, [r0, #0]
 800cf78:	680b      	ldr	r3, [r1, #0]
    return LV_RES_INV;
}
 800cf7a:	1ac3      	subs	r3, r0, r3
 800cf7c:	4258      	negs	r0, r3
 800cf7e:	4158      	adcs	r0, r3
 800cf80:	4770      	bx	lr
	...

0800cf84 <iterate_cache>:
{
 800cf84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(grad_cache_size == 0) return NULL;
 800cf88:	4f15      	ldr	r7, [pc, #84]	; (800cfe0 <iterate_cache+0x5c>)
 800cf8a:	683b      	ldr	r3, [r7, #0]
{
 800cf8c:	4606      	mov	r6, r0
 800cf8e:	4689      	mov	r9, r1
 800cf90:	4615      	mov	r5, r2
    if(grad_cache_size == 0) return NULL;
 800cf92:	b913      	cbnz	r3, 800cf9a <iterate_cache+0x16>
    return LV_RES_INV;
 800cf94:	2000      	movs	r0, #0
}
 800cf96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 800cf9a:	4b12      	ldr	r3, [pc, #72]	; (800cfe4 <iterate_cache+0x60>)
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 800cf9c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800cfe8 <iterate_cache+0x64>
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 800cfa0:	681c      	ldr	r4, [r3, #0]
    while(first != NULL && first->life) {
 800cfa2:	2c00      	cmp	r4, #0
 800cfa4:	d0f6      	beq.n	800cf94 <iterate_cache+0x10>
 800cfa6:	6863      	ldr	r3, [r4, #4]
 800cfa8:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 800cfac:	d0f2      	beq.n	800cf94 <iterate_cache+0x10>
        if((*func)(first, ctx) == LV_RES_OK) {
 800cfae:	4649      	mov	r1, r9
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	47b0      	blx	r6
 800cfb4:	2801      	cmp	r0, #1
 800cfb6:	d103      	bne.n	800cfc0 <iterate_cache+0x3c>
            if(out != NULL) *out = first;
 800cfb8:	2d00      	cmp	r5, #0
 800cfba:	d0ec      	beq.n	800cf96 <iterate_cache+0x12>
 800cfbc:	602c      	str	r4, [r5, #0]
 800cfbe:	e7ea      	b.n	800cf96 <iterate_cache+0x12>
    if(grad_cache_size == 0) return NULL;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d0e6      	beq.n	800cf94 <iterate_cache+0x10>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 800cfc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfca:	3303      	adds	r3, #3
 800cfcc:	f023 0303 	bic.w	r3, r3, #3
 800cfd0:	3310      	adds	r3, #16
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 800cfd2:	441c      	add	r4, r3
 800cfd4:	f8d8 3000 	ldr.w	r3, [r8]
 800cfd8:	429c      	cmp	r4, r3
 800cfda:	d3e2      	bcc.n	800cfa2 <iterate_cache+0x1e>
 800cfdc:	e7da      	b.n	800cf94 <iterate_cache+0x10>
 800cfde:	bf00      	nop
 800cfe0:	20000b68 	.word	0x20000b68
 800cfe4:	20000de0 	.word	0x20000de0
 800cfe8:	20000b64 	.word	0x20000b64

0800cfec <kill_oldest_item>:
    if(c->life == *min_life) {
 800cfec:	6843      	ldr	r3, [r0, #4]
 800cfee:	680a      	ldr	r2, [r1, #0]
 800cff0:	f3c3 031d 	ubfx	r3, r3, #0, #30
 800cff4:	4293      	cmp	r3, r2
{
 800cff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cffa:	4605      	mov	r5, r0
    if(c->life == *min_life) {
 800cffc:	d12f      	bne.n	800d05e <kill_oldest_item+0x72>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 800cffe:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 800d002:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800d064 <kill_oldest_item+0x78>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 800d006:	3403      	adds	r4, #3
 800d008:	f024 0403 	bic.w	r4, r4, #3
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 800d00c:	f8d8 3000 	ldr.w	r3, [r8]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 800d010:	f104 0610 	add.w	r6, r4, #16
    grad_cache_end -= size;
 800d014:	f1c4 24ff 	rsb	r4, r4, #4278255360	; 0xff00ff00
 800d018:	f504 047f 	add.w	r4, r4, #16711680	; 0xff0000
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 800d01c:	1a1f      	subs	r7, r3, r0
    grad_cache_end -= size;
 800d01e:	34f0      	adds	r4, #240	; 0xf0
 800d020:	4423      	add	r3, r4
    if(next_items_size) {
 800d022:	1bbf      	subs	r7, r7, r6
    grad_cache_end -= size;
 800d024:	f8c8 3000 	str.w	r3, [r8]
    if(next_items_size) {
 800d028:	d00c      	beq.n	800d044 <kill_oldest_item+0x58>
        lv_memcpy(c, ((uint8_t *)c) + size, next_items_size);
 800d02a:	463a      	mov	r2, r7
 800d02c:	1981      	adds	r1, r0, r6
 800d02e:	f006 fa45 	bl	80134bc <lv_memcpy>
        while((uint8_t *)c != grad_cache_end) {
 800d032:	f8d8 2000 	ldr.w	r2, [r8]
 800d036:	4629      	mov	r1, r5
 800d038:	4291      	cmp	r1, r2
 800d03a:	d105      	bne.n	800d048 <kill_oldest_item+0x5c>
        lv_memset_00(old + next_items_size, size);
 800d03c:	4631      	mov	r1, r6
 800d03e:	19e8      	adds	r0, r5, r7
 800d040:	f006 fb5b 	bl	80136fa <lv_memset_00>
        return LV_RES_OK;
 800d044:	2001      	movs	r0, #1
 800d046:	e00b      	b.n	800d060 <kill_oldest_item+0x74>
            c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 800d048:	688b      	ldr	r3, [r1, #8]
 800d04a:	4423      	add	r3, r4
 800d04c:	608b      	str	r3, [r1, #8]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 800d04e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800d052:	3303      	adds	r3, #3
 800d054:	f023 0303 	bic.w	r3, r3, #3
 800d058:	3310      	adds	r3, #16
            c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 800d05a:	4419      	add	r1, r3
 800d05c:	e7ec      	b.n	800d038 <kill_oldest_item+0x4c>
    return LV_RES_INV;
 800d05e:	2000      	movs	r0, #0
}
 800d060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d064:	20000b64 	.word	0x20000b64

0800d068 <lv_gradient_set_cache_size>:
    LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
    grad_cache_size = 0;
}

void lv_gradient_set_cache_size(size_t max_bytes)
{
 800d068:	b538      	push	{r3, r4, r5, lr}
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 800d06a:	4d09      	ldr	r5, [pc, #36]	; (800d090 <lv_gradient_set_cache_size+0x28>)
{
 800d06c:	4604      	mov	r4, r0
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 800d06e:	6828      	ldr	r0, [r5, #0]
 800d070:	f006 f978 	bl	8013364 <lv_mem_free>
    grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 800d074:	4620      	mov	r0, r4
 800d076:	f006 f957 	bl	8013328 <lv_mem_alloc>
 800d07a:	4a06      	ldr	r2, [pc, #24]	; (800d094 <lv_gradient_set_cache_size+0x2c>)
 800d07c:	6028      	str	r0, [r5, #0]
 800d07e:	6010      	str	r0, [r2, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 800d080:	b900      	cbnz	r0, 800d084 <lv_gradient_set_cache_size+0x1c>
 800d082:	e7fe      	b.n	800d082 <lv_gradient_set_cache_size+0x1a>
    lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 800d084:	4621      	mov	r1, r4
 800d086:	f006 fb38 	bl	80136fa <lv_memset_00>
    grad_cache_size = max_bytes;
 800d08a:	4b03      	ldr	r3, [pc, #12]	; (800d098 <lv_gradient_set_cache_size+0x30>)
 800d08c:	601c      	str	r4, [r3, #0]
}
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
 800d090:	20000de0 	.word	0x20000de0
 800d094:	20000b64 	.word	0x20000b64
 800d098:	20000b68 	.word	0x20000b68

0800d09c <lv_gradient_calculate>:
    return item;
}

LV_ATTRIBUTE_FAST_MEM lv_grad_color_t lv_gradient_calculate(const lv_grad_dsc_t * dsc, lv_coord_t range,
                                                            lv_coord_t frac)
{
 800d09c:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_grad_color_t tmp;
    lv_color32_t one, two;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 800d09e:	7844      	ldrb	r4, [r0, #1]
 800d0a0:	fb14 f401 	smulbb	r4, r4, r1
    if(frac <= min) {
 800d0a4:	ebb2 2f24 	cmp.w	r2, r4, asr #8
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 800d0a8:	ea4f 2524 	mov.w	r5, r4, asr #8
    if(frac <= min) {
 800d0ac:	dc01      	bgt.n	800d0b2 <lv_gradient_calculate+0x16>
        GRAD_CONV(tmp, dsc->stops[0].color);
        return tmp;
 800d0ae:	7800      	ldrb	r0, [r0, #0]

    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
                                LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
                                LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
    return r;
}
 800d0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 800d0b2:	7906      	ldrb	r6, [r0, #4]
 800d0b4:	1e74      	subs	r4, r6, #1
 800d0b6:	eb00 0344 	add.w	r3, r0, r4, lsl #1
 800d0ba:	785b      	ldrb	r3, [r3, #1]
 800d0bc:	fb13 f301 	smulbb	r3, r3, r1
    if(frac >= max) {
 800d0c0:	ebb2 2f23 	cmp.w	r2, r3, asr #8
 800d0c4:	da0a      	bge.n	800d0dc <lv_gradient_calculate+0x40>
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 800d0c6:	2e01      	cmp	r6, #1
 800d0c8:	d907      	bls.n	800d0da <lv_gradient_calculate+0x3e>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 800d0ca:	78c4      	ldrb	r4, [r0, #3]
 800d0cc:	fb14 f101 	smulbb	r1, r4, r1
        if(frac <= cur) {
 800d0d0:	ebb2 2f21 	cmp.w	r2, r1, asr #8
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 800d0d4:	ea4f 2321 	mov.w	r3, r1, asr #8
        if(frac <= cur) {
 800d0d8:	dd03      	ble.n	800d0e2 <lv_gradient_calculate+0x46>
    LV_ASSERT(d != 0);
 800d0da:	e7fe      	b.n	800d0da <lv_gradient_calculate+0x3e>
        return tmp;
 800d0dc:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800d0e0:	e7e6      	b.n	800d0b0 <lv_gradient_calculate+0x14>
    if(color.full == 0)
 800d0e2:	7801      	ldrb	r1, [r0, #0]
 800d0e4:	7880      	ldrb	r0, [r0, #2]
        return 0xFFFFFFFF;
 800d0e6:	2900      	cmp	r1, #0
 800d0e8:	bf0c      	ite	eq
 800d0ea:	f04f 417f 	moveq.w	r1, #4278190080	; 0xff000000
 800d0ee:	f04f 31ff 	movne.w	r1, #4294967295
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	bf0c      	ite	eq
 800d0f6:	f04f 447f 	moveq.w	r4, #4278190080	; 0xff000000
 800d0fa:	f04f 34ff 	movne.w	r4, #4294967295
    LV_ASSERT(d != 0);
 800d0fe:	1b58      	subs	r0, r3, r5
 800d100:	d0eb      	beq.n	800d0da <lv_gradient_calculate+0x3e>
    frac -= min;
 800d102:	1b52      	subs	r2, r2, r5
    lv_opa_t mix = (frac * 255) / d;
 800d104:	b213      	sxth	r3, r2
 800d106:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800d10a:	fb93 f3f0 	sdiv	r3, r3, r0
    lv_opa_t imix = 255 - mix;
 800d10e:	43de      	mvns	r6, r3
 800d110:	b2f6      	uxtb	r6, r6
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 800d112:	b2c8      	uxtb	r0, r1
 800d114:	b2db      	uxtb	r3, r3
 800d116:	b2e2      	uxtb	r2, r4
 800d118:	4370      	muls	r0, r6
 800d11a:	fb03 0002 	mla	r0, r3, r2, r0
 800d11e:	f248 0581 	movw	r5, #32897	; 0x8081
 800d122:	fb05 f200 	mul.w	r2, r5, r0
 800d126:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800d12a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 800d12e:	fb10 f006 	smulbb	r0, r0, r6
 800d132:	fb03 0007 	mla	r0, r3, r7, r0
 800d136:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800d13a:	4368      	muls	r0, r5
 800d13c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800d140:	fb11 f106 	smulbb	r1, r1, r6
 800d144:	0f80      	lsrs	r0, r0, #30
 800d146:	fb03 1304 	mla	r3, r3, r4, r1
 800d14a:	ea40 7092 	orr.w	r0, r0, r2, lsr #30
 800d14e:	436b      	muls	r3, r5
    return r;
 800d150:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 800d154:	e7ac      	b.n	800d0b0 <lv_gradient_calculate+0x14>
	...

0800d158 <lv_gradient_get>:
{
 800d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 800d15c:	7944      	ldrb	r4, [r0, #5]
 800d15e:	f014 0407 	ands.w	r4, r4, #7
{
 800d162:	b087      	sub	sp, #28
 800d164:	4606      	mov	r6, r0
 800d166:	460d      	mov	r5, r1
 800d168:	4617      	mov	r7, r2
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 800d16a:	d023      	beq.n	800d1b4 <lv_gradient_get+0x5c>
    if(!inited) {
 800d16c:	4c4e      	ldr	r4, [pc, #312]	; (800d2a8 <lv_gradient_get+0x150>)
 800d16e:	7820      	ldrb	r0, [r4, #0]
 800d170:	b918      	cbnz	r0, 800d17a <lv_gradient_get+0x22>
        lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 800d172:	f7ff ff79 	bl	800d068 <lv_gradient_set_cache_size>
        inited = true;
 800d176:	2301      	movs	r3, #1
 800d178:	7023      	strb	r3, [r4, #0]
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 800d17a:	7972      	ldrb	r2, [r6, #5]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 800d17c:	484b      	ldr	r0, [pc, #300]	; (800d2ac <lv_gradient_get+0x154>)
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 800d17e:	f002 0207 	and.w	r2, r2, #7
 800d182:	2a02      	cmp	r2, #2
 800d184:	bf0c      	ite	eq
 800d186:	462b      	moveq	r3, r5
 800d188:	463b      	movne	r3, r7
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 800d18a:	ea86 0965 	eor.w	r9, r6, r5, asr #1
 800d18e:	ea83 0309 	eor.w	r3, r3, r9
    uint32_t key = compute_key(g, size, w);
 800d192:	9303      	str	r3, [sp, #12]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 800d194:	aa04      	add	r2, sp, #16
    lv_grad_t * item = NULL;
 800d196:	2300      	movs	r3, #0
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 800d198:	a903      	add	r1, sp, #12
    lv_grad_t * item = NULL;
 800d19a:	9304      	str	r3, [sp, #16]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 800d19c:	f7ff fef2 	bl	800cf84 <iterate_cache>
 800d1a0:	2801      	cmp	r0, #1
 800d1a2:	f04f 0300 	mov.w	r3, #0
 800d1a6:	d109      	bne.n	800d1bc <lv_gradient_get+0x64>
        item->life++; /* Don't forget to bump the counter */
 800d1a8:	9c04      	ldr	r4, [sp, #16]
 800d1aa:	6863      	ldr	r3, [r4, #4]
 800d1ac:	1c5a      	adds	r2, r3, #1
 800d1ae:	f362 031d 	bfi	r3, r2, #0, #30
 800d1b2:	6063      	str	r3, [r4, #4]
}
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	b007      	add	sp, #28
 800d1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 800d1bc:	7972      	ldrb	r2, [r6, #5]
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 800d1be:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 800d2bc <lv_gradient_get+0x164>
    if(req_size + act_size < grad_cache_size) {
 800d1c2:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 800d2c0 <lv_gradient_get+0x168>
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 800d1c6:	f002 0207 	and.w	r2, r2, #7
 800d1ca:	2a02      	cmp	r2, #2
 800d1cc:	bf0c      	ite	eq
 800d1ce:	46a8      	moveq	r8, r5
 800d1d0:	46b8      	movne	r8, r7
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 800d1d2:	463a      	mov	r2, r7
 800d1d4:	42af      	cmp	r7, r5
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 800d1d6:	4f36      	ldr	r7, [pc, #216]	; (800d2b0 <lv_gradient_get+0x158>)
    if(req_size + act_size < grad_cache_size) {
 800d1d8:	f8da 1000 	ldr.w	r1, [sl]
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 800d1dc:	683c      	ldr	r4, [r7, #0]
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 800d1de:	bfb8      	it	lt
 800d1e0:	462a      	movlt	r2, r5
    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 800d1e2:	1cd5      	adds	r5, r2, #3
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 800d1e4:	9201      	str	r2, [sp, #4]
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 800d1e6:	f8db 2000 	ldr.w	r2, [fp]
    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 800d1ea:	f025 0503 	bic.w	r5, r5, #3
 800d1ee:	3510      	adds	r5, #16
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 800d1f0:	1aa2      	subs	r2, r4, r2
    if(req_size + act_size < grad_cache_size) {
 800d1f2:	18a8      	adds	r0, r5, r2
 800d1f4:	4288      	cmp	r0, r1
 800d1f6:	d22a      	bcs.n	800d24e <lv_gradient_get+0xf6>
        item->not_cached = 0;
 800d1f8:	79e2      	ldrb	r2, [r4, #7]
 800d1fa:	f363 12c7 	bfi	r2, r3, #7, #1
 800d1fe:	71e2      	strb	r2, [r4, #7]
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 800d200:	ea88 0309 	eor.w	r3, r8, r9
    item->key = compute_key(g, size, w);
 800d204:	6023      	str	r3, [r4, #0]
    item->life = 1;
 800d206:	6863      	ldr	r3, [r4, #4]
    item->size = size;
 800d208:	f8a4 800e 	strh.w	r8, [r4, #14]
    item->life = 1;
 800d20c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    if(item->not_cached) {
 800d210:	2b00      	cmp	r3, #0
    item->life = 1;
 800d212:	f043 0201 	orr.w	r2, r3, #1
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 800d216:	bfa8      	it	ge
 800d218:	683b      	ldrge	r3, [r7, #0]
    item->life = 1;
 800d21a:	6062      	str	r2, [r4, #4]
    item->alloc_size = map_size;
 800d21c:	9a01      	ldr	r2, [sp, #4]
 800d21e:	81a2      	strh	r2, [r4, #12]
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 800d220:	bfb3      	iteet	lt
 800d222:	f104 0310 	addlt.w	r3, r4, #16
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 800d226:	f103 0210 	addge.w	r2, r3, #16
        grad_cache_end += req_size;
 800d22a:	195b      	addge	r3, r3, r5
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 800d22c:	60a3      	strlt	r3, [r4, #8]
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 800d22e:	bfa4      	itt	ge
 800d230:	60a2      	strge	r2, [r4, #8]
        grad_cache_end += req_size;
 800d232:	603b      	strge	r3, [r7, #0]
    item = allocate_item(g, w, h);
 800d234:	9404      	str	r4, [sp, #16]
 800d236:	2500      	movs	r5, #0
 800d238:	b22a      	sxth	r2, r5
    for(lv_coord_t i = 0; i < item->size; i++) {
 800d23a:	4542      	cmp	r2, r8
 800d23c:	daba      	bge.n	800d1b4 <lv_gradient_get+0x5c>
        item->map[i] = lv_gradient_calculate(g, item->size, i);
 800d23e:	4641      	mov	r1, r8
 800d240:	4630      	mov	r0, r6
 800d242:	f7ff ff2b 	bl	800d09c <lv_gradient_calculate>
 800d246:	68a3      	ldr	r3, [r4, #8]
 800d248:	5558      	strb	r0, [r3, r5]
    for(lv_coord_t i = 0; i < item->size; i++) {
 800d24a:	3501      	adds	r5, #1
 800d24c:	e7f4      	b.n	800d238 <lv_gradient_get+0xe0>
        if(req_size <= grad_cache_size) {
 800d24e:	428d      	cmp	r5, r1
 800d250:	d81f      	bhi.n	800d292 <lv_gradient_get+0x13a>
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 800d252:	4b18      	ldr	r3, [pc, #96]	; (800d2b4 <lv_gradient_get+0x15c>)
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 800d254:	4c18      	ldr	r4, [pc, #96]	; (800d2b8 <lv_gradient_get+0x160>)
            while(act_size + req_size > grad_cache_size) {
 800d256:	f8da 1000 	ldr.w	r1, [sl]
 800d25a:	442a      	add	r2, r5
 800d25c:	428a      	cmp	r2, r1
 800d25e:	d805      	bhi.n	800d26c <lv_gradient_get+0x114>
            item = (lv_grad_t *)grad_cache_end;
 800d260:	683c      	ldr	r4, [r7, #0]
            item->not_cached = 0;
 800d262:	79e3      	ldrb	r3, [r4, #7]
 800d264:	f36f 13c7 	bfc	r3, #7, #1
            item->not_cached = 1;
 800d268:	71e3      	strb	r3, [r4, #7]
 800d26a:	e7c9      	b.n	800d200 <lv_gradient_get+0xa8>
                uint32_t oldest_life = UINT32_MAX;
 800d26c:	f04f 32ff 	mov.w	r2, #4294967295
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 800d270:	4618      	mov	r0, r3
                uint32_t oldest_life = UINT32_MAX;
 800d272:	9205      	str	r2, [sp, #20]
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 800d274:	a905      	add	r1, sp, #20
 800d276:	2200      	movs	r2, #0
 800d278:	f7ff fe84 	bl	800cf84 <iterate_cache>
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 800d27c:	2200      	movs	r2, #0
 800d27e:	a905      	add	r1, sp, #20
 800d280:	4620      	mov	r0, r4
 800d282:	f7ff fe7f 	bl	800cf84 <iterate_cache>
                act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 800d286:	683a      	ldr	r2, [r7, #0]
 800d288:	f8db 1000 	ldr.w	r1, [fp]
 800d28c:	4b09      	ldr	r3, [pc, #36]	; (800d2b4 <lv_gradient_get+0x15c>)
 800d28e:	1a52      	subs	r2, r2, r1
 800d290:	e7e1      	b.n	800d256 <lv_gradient_get+0xfe>
            item = lv_mem_alloc(req_size);
 800d292:	4628      	mov	r0, r5
 800d294:	f006 f848 	bl	8013328 <lv_mem_alloc>
            LV_ASSERT_MALLOC(item);
 800d298:	4604      	mov	r4, r0
 800d29a:	b900      	cbnz	r0, 800d29e <lv_gradient_get+0x146>
 800d29c:	e7fe      	b.n	800d29c <lv_gradient_get+0x144>
            item->not_cached = 1;
 800d29e:	79c3      	ldrb	r3, [r0, #7]
 800d2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2a4:	e7e0      	b.n	800d268 <lv_gradient_get+0x110>
 800d2a6:	bf00      	nop
 800d2a8:	20000b6c 	.word	0x20000b6c
 800d2ac:	0800cf77 	.word	0x0800cf77
 800d2b0:	20000b64 	.word	0x20000b64
 800d2b4:	0800cf65 	.word	0x0800cf65
 800d2b8:	0800cfed 	.word	0x0800cfed
 800d2bc:	20000de0 	.word	0x20000de0
 800d2c0:	20000b68 	.word	0x20000b68

0800d2c4 <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
    if(grad->not_cached) {
 800d2c4:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	da01      	bge.n	800d2d0 <lv_gradient_cleanup+0xc>
        lv_mem_free(grad);
 800d2cc:	f006 b84a 	b.w	8013364 <lv_mem_free>
    }
}
 800d2d0:	4770      	bx	lr

0800d2d2 <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 800d2d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d6:	ed2d 8b02 	vpush	{d8}
 800d2da:	b0a5      	sub	sp, #148	; 0x94
 800d2dc:	4614      	mov	r4, r2
 800d2de:	930a      	str	r3, [sp, #40]	; 0x28
 800d2e0:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 800d2e4:	9309      	str	r3, [sp, #36]	; 0x24
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 800d2e6:	6883      	ldr	r3, [r0, #8]
{
 800d2e8:	9108      	str	r1, [sp, #32]
    dest->x1 = src->x1;
 800d2ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d2ee:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    dest->y1 = src->y1;
 800d2f2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800d2f6:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
 800d2fa:	4607      	mov	r7, r0
    dest->x2 = src->x2;
 800d2fc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    dest->y2 = src->y2;
 800d300:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    dest->x2 = src->x2;
 800d304:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60

    bool mask_any = lv_draw_mask_is_any(&draw_area);
 800d308:	a817      	add	r0, sp, #92	; 0x5c
    dest->y2 = src->y2;
 800d30a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
 800d30e:	f7fd fc23 	bl	800ab58 <lv_draw_mask_is_any>
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800d312:	9b08      	ldr	r3, [sp, #32]
    bool mask_any = lv_draw_mask_is_any(&draw_area);
 800d314:	900c      	str	r0, [sp, #48]	; 0x30
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	930d      	str	r3, [sp, #52]	; 0x34

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800d31a:	211c      	movs	r1, #28
 800d31c:	a81d      	add	r0, sp, #116	; 0x74
 800d31e:	f006 f9ec 	bl	80136fa <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 800d322:	9b08      	ldr	r3, [sp, #32]
 800d324:	7a9b      	ldrb	r3, [r3, #10]
 800d326:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 800d32a:	9b08      	ldr	r3, [sp, #32]
 800d32c:	7adb      	ldrb	r3, [r3, #11]
 800d32e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d332:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
    blend_dsc.blend_area = &blend_area;
 800d336:	ab19      	add	r3, sp, #100	; 0x64
 800d338:	931d      	str	r3, [sp, #116]	; 0x74

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800d33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d12c      	bne.n	800d39a <lv_draw_sw_img_decoded+0xc8>
 800d340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d342:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d346:	d128      	bne.n	800d39a <lv_draw_sw_img_decoded+0xc8>
 800d348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d34a:	2b04      	cmp	r3, #4
 800d34c:	d10e      	bne.n	800d36c <lv_draw_sw_img_decoded+0x9a>
 800d34e:	9b08      	ldr	r3, [sp, #32]
 800d350:	7a5b      	ldrb	r3, [r3, #9]
 800d352:	bb13      	cbnz	r3, 800d39a <lv_draw_sw_img_decoded+0xc8>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 800d354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d356:	931e      	str	r3, [sp, #120]	; 0x78
        blend_dsc.src_buf = NULL;
        blend_dsc.color = draw_dsc->recolor;
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;

        blend_dsc.blend_area = coords;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d358:	a91d      	add	r1, sp, #116	; 0x74
 800d35a:	4638      	mov	r0, r7
        blend_dsc.blend_area = coords;
 800d35c:	941d      	str	r4, [sp, #116]	; 0x74
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d35e:	f7ff f984 	bl	800c66a <lv_draw_sw_blend>
        }

        lv_mem_buf_release(mask_buf);
        lv_mem_buf_release(rgb_buf);
    }
}
 800d362:	b025      	add	sp, #148	; 0x94
 800d364:	ecbd 8b02 	vpop	{d8}
 800d368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 800d36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d36e:	2b0e      	cmp	r3, #14
 800d370:	d113      	bne.n	800d39a <lv_draw_sw_img_decoded+0xc8>
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	4621      	mov	r1, r4
 800d376:	a81b      	add	r0, sp, #108	; 0x6c
 800d378:	f005 fa7d 	bl	8012876 <_lv_area_intersect>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d0f0      	beq.n	800d362 <lv_draw_sw_img_decoded+0x90>
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 800d380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d382:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.src_buf = NULL;
 800d384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d386:	931e      	str	r3, [sp, #120]	; 0x78
        blend_dsc.color = draw_dsc->recolor;
 800d388:	9b08      	ldr	r3, [sp, #32]
        blend_dsc.mask_area = coords;
 800d38a:	9422      	str	r4, [sp, #136]	; 0x88
        blend_dsc.color = draw_dsc->recolor;
 800d38c:	7a1b      	ldrb	r3, [r3, #8]
 800d38e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d392:	2302      	movs	r3, #2
 800d394:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800d398:	e7de      	b.n	800d358 <lv_draw_sw_img_decoded+0x86>
        blend_area.x1 = draw_ctx->clip_area->x1;
 800d39a:	68ba      	ldr	r2, [r7, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d39c:	8820      	ldrh	r0, [r4, #0]
 800d39e:	f9b2 1000 	ldrsh.w	r1, [r2]
        blend_area.y1 = draw_ctx->clip_area->y1;
 800d3a2:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
        blend_area.x2 = draw_ctx->clip_area->x2;
 800d3a6:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
        blend_area.y2 = draw_ctx->clip_area->y2;
 800d3aa:	f9b2 5006 	ldrsh.w	r5, [r2, #6]
 800d3ae:	88a2      	ldrh	r2, [r4, #4]
        blend_area.x2 = draw_ctx->clip_area->x2;
 800d3b0:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 800d3b4:	1a12      	subs	r2, r2, r0
 800d3b6:	b292      	uxth	r2, r2
 800d3b8:	9210      	str	r2, [sp, #64]	; 0x40
 800d3ba:	3201      	adds	r2, #1
 800d3bc:	b212      	sxth	r2, r2
 800d3be:	9207      	str	r2, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d3c0:	88e2      	ldrh	r2, [r4, #6]
 800d3c2:	8860      	ldrh	r0, [r4, #2]
        blend_area.x1 = draw_ctx->clip_area->x1;
 800d3c4:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
 800d3c8:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d3ce:	1a12      	subs	r2, r2, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d3d0:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d3d2:	b212      	sxth	r2, r2
 800d3d4:	920f      	str	r2, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d3d6:	930b      	str	r3, [sp, #44]	; 0x2c
        blend_area.y1 = draw_ctx->clip_area->y1;
 800d3d8:	f8ad 6066 	strh.w	r6, [sp, #102]	; 0x66
        blend_area.y2 = draw_ctx->clip_area->y2;
 800d3dc:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
        uint32_t max_buf_size = MAX_BUF_SIZE;
 800d3e0:	f7fb fda4 	bl	8008f2c <_lv_refr_get_disp_refreshing>
 800d3e4:	f004 ffc4 	bl	8012370 <lv_disp_get_hor_res>
 800d3e8:	4680      	mov	r8, r0
        uint32_t blend_size = lv_area_get_size(&blend_area);
 800d3ea:	a819      	add	r0, sp, #100	; 0x64
 800d3ec:	f005 fa15 	bl	801281a <lv_area_get_size>
        if(blend_size <= max_buf_size) {
 800d3f0:	4580      	cmp	r8, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d3f2:	bf27      	ittee	cs
 800d3f4:	f105 0801 	addcs.w	r8, r5, #1
 800d3f8:	eba8 0806 	subcs.w	r8, r8, r6
            buf_h = max_buf_size / blend_w;
 800d3fc:	9b0b      	ldrcc	r3, [sp, #44]	; 0x2c
 800d3fe:	fbb8 f8f3 	udivcc	r8, r8, r3
        uint32_t buf_size = buf_w * buf_h;
 800d402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            buf_h = blend_h;
 800d404:	bf28      	it	cs
 800d406:	fa0f f888 	sxthcs.w	r8, r8
        uint32_t buf_size = buf_w * buf_h;
 800d40a:	fb03 f308 	mul.w	r3, r3, r8
        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 800d40e:	4618      	mov	r0, r3
        uint32_t buf_size = buf_w * buf_h;
 800d410:	ee08 3a10 	vmov	s16, r3
        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 800d414:	f005 ffd8 	bl	80133c8 <lv_mem_buf_get>
 800d418:	4605      	mov	r5, r0
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 800d41a:	ee18 0a10 	vmov	r0, s16
 800d41e:	f005 ffd3 	bl	80133c8 <lv_mem_buf_get>
        blend_dsc.mask_area = &blend_area;
 800d422:	ab19      	add	r3, sp, #100	; 0x64
 800d424:	9322      	str	r3, [sp, #136]	; 0x88
        lv_coord_t y_last = blend_area.y2;
 800d426:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
        blend_dsc.mask_buf = mask_buf;
 800d42a:	9020      	str	r0, [sp, #128]	; 0x80
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 800d42c:	4606      	mov	r6, r0
        lv_coord_t y_last = blend_area.y2;
 800d42e:	930e      	str	r3, [sp, #56]	; 0x38
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 800d430:	f8bd 0066 	ldrh.w	r0, [sp, #102]	; 0x66
        blend_dsc.src_buf = rgb_buf;
 800d434:	951e      	str	r5, [sp, #120]	; 0x78
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 800d436:	fa1f f388 	uxth.w	r3, r8
 800d43a:	9313      	str	r3, [sp, #76]	; 0x4c
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800d43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 800d43e:	3801      	subs	r0, #1
 800d440:	fa10 f888 	uxtah	r8, r0, r8
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800d444:	2b04      	cmp	r3, #4
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 800d446:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800d44a:	d11c      	bne.n	800d486 <lv_draw_sw_img_decoded+0x1b4>
 800d44c:	9b08      	ldr	r3, [sp, #32]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d454:	bf14      	ite	ne
 800d456:	2302      	movne	r3, #2
 800d458:	2301      	moveq	r3, #1
            cbuf += dest_w;
            src_tmp8 += src_stride_byte;
        }

        src_tmp8 = (const uint8_t *)src_buf;
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 800d45a:	9a07      	ldr	r2, [sp, #28]
        blend_dsc.mask_res = mask_res_def;
 800d45c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 800d460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d462:	4353      	muls	r3, r2
 800d464:	9314      	str	r3, [sp, #80]	; 0x50
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800d466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d468:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800d46c:	9315      	str	r3, [sp, #84]	; 0x54
        while(blend_area.y1 <= y_last) {
 800d46e:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800d472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d474:	4293      	cmp	r3, r2
 800d476:	dd08      	ble.n	800d48a <lv_draw_sw_img_decoded+0x1b8>
        lv_mem_buf_release(mask_buf);
 800d478:	4630      	mov	r0, r6
 800d47a:	f005 fff1 	bl	8013460 <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 800d47e:	4628      	mov	r0, r5
 800d480:	f005 ffee 	bl	8013460 <lv_mem_buf_release>
 800d484:	e76d      	b.n	800d362 <lv_draw_sw_img_decoded+0x90>
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800d486:	2302      	movs	r3, #2
 800d488:	e7e7      	b.n	800d45a <lv_draw_sw_img_decoded+0x188>
    dest->x1 = src->x1;
 800d48a:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 800d48e:	8821      	ldrh	r1, [r4, #0]
 800d490:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
 800d494:	8862      	ldrh	r2, [r4, #2]
    dest->y1 = src->y1;
 800d496:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 800d49a:	4252      	negs	r2, r2
    dest->x2 = src->x2;
 800d49c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800d4a0:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 800d4a4:	4249      	negs	r1, r1
    dest->y2 = src->y2;
 800d4a6:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 800d4aa:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
 800d4ae:	b212      	sxth	r2, r2
 800d4b0:	b209      	sxth	r1, r1
 800d4b2:	a81b      	add	r0, sp, #108	; 0x6c
 800d4b4:	f005 f9ce 	bl	8012854 <lv_area_move>
            if(transform) {
 800d4b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d4be:	d039      	beq.n	800d534 <lv_draw_sw_img_decoded+0x262>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 800d4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4c2:	9303      	str	r3, [sp, #12]
 800d4c4:	9b08      	ldr	r3, [sp, #32]
 800d4c6:	9302      	str	r3, [sp, #8]
 800d4c8:	9b07      	ldr	r3, [sp, #28]
 800d4ca:	9301      	str	r3, [sp, #4]
 800d4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800d4d4:	9b07      	ldr	r3, [sp, #28]
 800d4d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4d8:	a91b      	add	r1, sp, #108	; 0x6c
 800d4da:	4638      	mov	r0, r7
 800d4dc:	f7fd fec8 	bl	800b270 <lv_draw_transform>
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 800d4e0:	9b08      	ldr	r3, [sp, #32]
 800d4e2:	7a5b      	ldrb	r3, [r3, #9]
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	d90e      	bls.n	800d506 <lv_draw_sw_img_decoded+0x234>
                lv_color_t recolor = draw_dsc->recolor;
 800d4e8:	9a08      	ldr	r2, [sp, #32]
 800d4ea:	ee18 0a10 	vmov	r0, s16
 800d4ee:	7a11      	ldrb	r1, [r2, #8]
                recolor_opa = 255 - recolor_opa;
 800d4f0:	43db      	mvns	r3, r3
                lv_color_t recolor = draw_dsc->recolor;
 800d4f2:	f001 0101 	and.w	r1, r1, #1
                for(i = 0; i < buf_size; i++) {
 800d4f6:	462a      	mov	r2, r5
 800d4f8:	eb00 0c05 	add.w	ip, r0, r5
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 800d4fc:	fa4f fe83 	sxtb.w	lr, r3
 800d500:	4594      	cmp	ip, r2
 800d502:	f040 80e0 	bne.w	800d6c6 <lv_draw_sw_img_decoded+0x3f4>
            if(mask_any) {
 800d506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f040 80e9 	bne.w	800d6e0 <lv_draw_sw_img_decoded+0x40e>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d50e:	a91d      	add	r1, sp, #116	; 0x74
 800d510:	4638      	mov	r0, r7
 800d512:	f7ff f8aa 	bl	800c66a <lv_draw_sw_blend>
            blend_area.y1 = blend_area.y2 + 1;
 800d516:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 800d51a:	1c5a      	adds	r2, r3, #1
 800d51c:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 800d520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d522:	4413      	add	r3, r2
 800d524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d526:	b21b      	sxth	r3, r3
 800d528:	4293      	cmp	r3, r2
 800d52a:	bfa8      	it	ge
 800d52c:	4613      	movge	r3, r2
 800d52e:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 800d532:	e79c      	b.n	800d46e <lv_draw_sw_img_decoded+0x19c>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800d534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d536:	2b04      	cmp	r3, #4
 800d538:	d136      	bne.n	800d5a8 <lv_draw_sw_img_decoded+0x2d6>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 800d53a:	a81b      	add	r0, sp, #108	; 0x6c
 800d53c:	f005 f96d 	bl	801281a <lv_area_get_size>
        lv_memset_ff(abuf, px_cnt);
 800d540:	4601      	mov	r1, r0
        uint32_t px_cnt = lv_area_get_size(dest_area);
 800d542:	4681      	mov	r9, r0
        lv_memset_ff(abuf, px_cnt);
 800d544:	4630      	mov	r0, r6
 800d546:	f006 f903 	bl	8013750 <lv_memset_ff>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 800d54a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d54e:	9a07      	ldr	r2, [sp, #28]
 800d550:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
 800d554:	fb02 3b08 	mla	fp, r2, r8, r3
 800d558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d55a:	4493      	add	fp, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d55c:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 800d560:	3201      	adds	r2, #1
 800d562:	1ad2      	subs	r2, r2, r3
        uint32_t dest_w = lv_area_get_width(dest_area);
 800d564:	b212      	sxth	r2, r2
        lv_color_t * cbuf_tmp = cbuf;
 800d566:	46aa      	mov	sl, r5
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800d568:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800d56c:	4543      	cmp	r3, r8
 800d56e:	da05      	bge.n	800d57c <lv_draw_sw_img_decoded+0x2aa>
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800d570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d572:	2b06      	cmp	r3, #6
 800d574:	d1b4      	bne.n	800d4e0 <lv_draw_sw_img_decoded+0x20e>
            for(i = 0; i < px_cnt; i++) {
 800d576:	2300      	movs	r3, #0
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 800d578:	461a      	mov	r2, r3
 800d57a:	e012      	b.n	800d5a2 <lv_draw_sw_img_decoded+0x2d0>
            lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 800d57c:	4659      	mov	r1, fp
 800d57e:	4650      	mov	r0, sl
 800d580:	9211      	str	r2, [sp, #68]	; 0x44
 800d582:	f005 ff9b 	bl	80134bc <lv_memcpy>
            src_tmp8 += src_stride_byte;
 800d586:	9b07      	ldr	r3, [sp, #28]
            cbuf_tmp += dest_w;
 800d588:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d58a:	f108 0801 	add.w	r8, r8, #1
            src_tmp8 += src_stride_byte;
 800d58e:	449b      	add	fp, r3
            cbuf_tmp += dest_w;
 800d590:	4492      	add	sl, r2
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800d592:	fa0f f888 	sxth.w	r8, r8
 800d596:	e7e7      	b.n	800d568 <lv_draw_sw_img_decoded+0x296>
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 800d598:	5ce9      	ldrb	r1, [r5, r3]
 800d59a:	2901      	cmp	r1, #1
 800d59c:	bf08      	it	eq
 800d59e:	54f2      	strbeq	r2, [r6, r3]
            for(i = 0; i < px_cnt; i++) {
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	4599      	cmp	r9, r3
 800d5a4:	d1f8      	bne.n	800d598 <lv_draw_sw_img_decoded+0x2c6>
 800d5a6:	e79b      	b.n	800d4e0 <lv_draw_sw_img_decoded+0x20e>
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800d5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5aa:	2b05      	cmp	r3, #5
 800d5ac:	d13d      	bne.n	800d62a <lv_draw_sw_img_decoded+0x358>
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800d5ae:	f9bd 006e 	ldrsh.w	r0, [sp, #110]	; 0x6e
 800d5b2:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d5b6:	9a07      	ldr	r2, [sp, #28]
 800d5b8:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 800d5bc:	fb02 3c00 	mla	ip, r2, r0, r3
 800d5c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800d5c8:	1c4a      	adds	r2, r1, #1
 800d5ca:	1ad2      	subs	r2, r2, r3
        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 800d5cc:	1a5b      	subs	r3, r3, r1
 800d5ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d5d0:	440b      	add	r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d5d2:	f8bd 1072 	ldrh.w	r1, [sp, #114]	; 0x72
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d5d6:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d5d8:	3101      	adds	r1, #1
 800d5da:	1a09      	subs	r1, r1, r0
 800d5dc:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800d5e0:	005b      	lsls	r3, r3, #1
 800d5e2:	0040      	lsls	r0, r0, #1
 800d5e4:	b209      	sxth	r1, r1
        for(y = 0; y < dest_h; y++) {
 800d5e6:	46b0      	mov	r8, r6
 800d5e8:	46a9      	mov	r9, r5
 800d5ea:	f04f 0e00 	mov.w	lr, #0
            src_tmp8 += src_new_line_step_byte;
 800d5ee:	fa00 f383 	sxtah	r3, r0, r3
        for(y = 0; y < dest_h; y++) {
 800d5f2:	fa0f f08e 	sxth.w	r0, lr
 800d5f6:	4281      	cmp	r1, r0
 800d5f8:	f77f af72 	ble.w	800d4e0 <lv_draw_sw_img_decoded+0x20e>
 800d5fc:	2000      	movs	r0, #0
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800d5fe:	f10c 0b01 	add.w	fp, ip, #1
 800d602:	e008      	b.n	800d616 <lv_draw_sw_img_decoded+0x344>
 800d604:	f81b a010 	ldrb.w	sl, [fp, r0, lsl #1]
 800d608:	f808 a000 	strb.w	sl, [r8, r0]
                cbuf[x].full = *src_tmp8;
 800d60c:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800d610:	f809 a000 	strb.w	sl, [r9, r0]
            for(x = 0; x < dest_w; x++) {
 800d614:	3001      	adds	r0, #1
 800d616:	fa0f fa80 	sxth.w	sl, r0
 800d61a:	4592      	cmp	sl, r2
 800d61c:	dbf2      	blt.n	800d604 <lv_draw_sw_img_decoded+0x332>
            cbuf += dest_w;
 800d61e:	4491      	add	r9, r2
            abuf += dest_w;
 800d620:	4490      	add	r8, r2
            src_tmp8 += src_new_line_step_byte;
 800d622:	449c      	add	ip, r3
        for(y = 0; y < dest_h; y++) {
 800d624:	f10e 0e01 	add.w	lr, lr, #1
 800d628:	e7e3      	b.n	800d5f2 <lv_draw_sw_img_decoded+0x320>
    else if(cf == LV_IMG_CF_RGB565A8) {
 800d62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d62c:	2b14      	cmp	r3, #20
 800d62e:	f47f af57 	bne.w	800d4e0 <lv_draw_sw_img_decoded+0x20e>
 800d632:	f8bd 8072 	ldrh.w	r8, [sp, #114]	; 0x72
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 800d636:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 800d63a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d63e:	9907      	ldr	r1, [sp, #28]
 800d640:	f108 0801 	add.w	r8, r8, #1
 800d644:	eba8 0802 	sub.w	r8, r8, r2
 800d648:	fb01 3b02 	mla	fp, r1, r2, r3
 800d64c:	fa0f f288 	sxth.w	r2, r8
 800d650:	9211      	str	r2, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d652:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 800d656:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d658:	3201      	adds	r2, #1
 800d65a:	1ad2      	subs	r2, r2, r3
 800d65c:	448b      	add	fp, r1
 800d65e:	fa0f f882 	sxth.w	r8, r2
        for(y = 0; y < dest_h; y++) {
 800d662:	46aa      	mov	sl, r5
 800d664:	f04f 0900 	mov.w	r9, #0
 800d668:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d66a:	fa0f f389 	sxth.w	r3, r9
 800d66e:	429a      	cmp	r2, r3
 800d670:	dc1e      	bgt.n	800d6b0 <lv_draw_sw_img_decoded+0x3de>
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 800d672:	9b07      	ldr	r3, [sp, #28]
 800d674:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 800d678:	f8bd b06e 	ldrh.w	fp, [sp, #110]	; 0x6e
 800d67c:	fb13 1b0b 	smlabb	fp, r3, fp, r1
 800d680:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d682:	449b      	add	fp, r3
 800d684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        for(y = 0; y < dest_h; y++) {
 800d686:	46b2      	mov	sl, r6
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 800d688:	449b      	add	fp, r3
        for(y = 0; y < dest_h; y++) {
 800d68a:	f04f 0900 	mov.w	r9, #0
 800d68e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d690:	fa0f f389 	sxth.w	r3, r9
 800d694:	429a      	cmp	r2, r3
 800d696:	f77f af23 	ble.w	800d4e0 <lv_draw_sw_img_decoded+0x20e>
            lv_memcpy(abuf, src_tmp8, dest_w);
 800d69a:	4659      	mov	r1, fp
 800d69c:	4650      	mov	r0, sl
 800d69e:	4642      	mov	r2, r8
 800d6a0:	f005 ff0c 	bl	80134bc <lv_memcpy>
            abuf += dest_w;
            src_tmp8 += src_stride;
 800d6a4:	9b07      	ldr	r3, [sp, #28]
            abuf += dest_w;
 800d6a6:	44c2      	add	sl, r8
            src_tmp8 += src_stride;
 800d6a8:	449b      	add	fp, r3
        for(y = 0; y < dest_h; y++) {
 800d6aa:	f109 0901 	add.w	r9, r9, #1
 800d6ae:	e7ee      	b.n	800d68e <lv_draw_sw_img_decoded+0x3bc>
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 800d6b0:	4659      	mov	r1, fp
 800d6b2:	4650      	mov	r0, sl
 800d6b4:	4642      	mov	r2, r8
 800d6b6:	f005 ff01 	bl	80134bc <lv_memcpy>
            src_tmp8 += src_stride_byte;
 800d6ba:	9b07      	ldr	r3, [sp, #28]
            cbuf += dest_w;
 800d6bc:	44c2      	add	sl, r8
            src_tmp8 += src_stride_byte;
 800d6be:	449b      	add	fp, r3
        for(y = 0; y < dest_h; y++) {
 800d6c0:	f109 0901 	add.w	r9, r9, #1
 800d6c4:	e7d0      	b.n	800d668 <lv_draw_sw_img_decoded+0x396>
    LV_COLOR_SET_B(c1, premult_c1[2]);
 800d6c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6c8:	7810      	ldrb	r0, [r2, #0]
 800d6ca:	f361 0300 	bfi	r3, r1, #0, #1
 800d6ce:	9312      	str	r3, [sp, #72]	; 0x48
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 800d6d0:	f1be 0f00 	cmp.w	lr, #0
 800d6d4:	bfa8      	it	ge
 800d6d6:	f89d 0048 	ldrbge.w	r0, [sp, #72]	; 0x48
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 800d6da:	f802 0b01 	strb.w	r0, [r2], #1
                for(i = 0; i < buf_size; i++) {
 800d6de:	e70f      	b.n	800d500 <lv_draw_sw_img_decoded+0x22e>
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 800d6e0:	f9bd a066 	ldrsh.w	sl, [sp, #102]	; 0x66
                lv_opa_t * mask_buf_tmp = mask_buf;
 800d6e4:	46b0      	mov	r8, r6
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d6e6:	f04f 0902 	mov.w	r9, #2
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 800d6ea:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800d6ee:	4553      	cmp	r3, sl
 800d6f0:	f6ff af0d 	blt.w	800d50e <lv_draw_sw_img_decoded+0x23c>
                    mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 800d6f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6f6:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 800d6fa:	4652      	mov	r2, sl
 800d6fc:	4640      	mov	r0, r8
 800d6fe:	f7fd f9b1 	bl	800aa64 <lv_draw_mask_apply>
                    if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 800d702:	b960      	cbnz	r0, 800d71e <lv_draw_sw_img_decoded+0x44c>
                        lv_memset_00(mask_buf_tmp, blend_w);
 800d704:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d706:	4640      	mov	r0, r8
 800d708:	f005 fff7 	bl	80136fa <lv_memset_00>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d70c:	f88d 9084 	strb.w	r9, [sp, #132]	; 0x84
                    mask_buf_tmp += blend_w;
 800d710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d712:	f10a 0a01 	add.w	sl, sl, #1
 800d716:	4498      	add	r8, r3
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 800d718:	fa0f fa8a 	sxth.w	sl, sl
 800d71c:	e7e5      	b.n	800d6ea <lv_draw_sw_img_decoded+0x418>
                    else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 800d71e:	2802      	cmp	r0, #2
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d720:	bf08      	it	eq
 800d722:	f88d 0084 	strbeq.w	r0, [sp, #132]	; 0x84
 800d726:	e7f3      	b.n	800d710 <lv_draw_sw_img_decoded+0x43e>

0800d728 <lv_draw_sw_layer_create>:
 **********************/


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
 800d728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 800d72a:	07d3      	lsls	r3, r2, #31
{
 800d72c:	4605      	mov	r5, r0
 800d72e:	460c      	mov	r4, r1
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 800d730:	d502      	bpl.n	800d738 <lv_draw_sw_layer_create+0x10>
        LV_LOG_WARN("Rendering this widget needs LV_COLOR_SCREEN_TRANSP 1");
        return NULL;
 800d732:	2400      	movs	r4, #0
        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
    }

    return layer_ctx;
}
 800d734:	4620      	mov	r0, r4
 800d736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800d738:	f012 0602 	ands.w	r6, r2, #2
 800d73c:	d03b      	beq.n	800d7b6 <lv_draw_sw_layer_create+0x8e>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 800d73e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800d740:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800d744:	f362 031e 	bfi	r3, r2, #0, #31
 800d748:	628b      	str	r3, [r1, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 800d74a:	4608      	mov	r0, r1
 800d74c:	f005 f865 	bl	801281a <lv_area_get_size>
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 800d750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d752:	f3c3 021e 	ubfx	r2, r3, #0, #31
 800d756:	4290      	cmp	r0, r2
 800d758:	bf3c      	itt	cc
 800d75a:	f360 031e 	bficc	r3, r0, #0, #31
 800d75e:	62a3      	strcc	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 800d760:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d762:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d766:	f005 fddf 	bl	8013328 <lv_mem_alloc>
 800d76a:	6160      	str	r0, [r4, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 800d76c:	b1b8      	cbz	r0, 800d79e <lv_draw_sw_layer_create+0x76>
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 800d76e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d772:	f104 0308 	add.w	r3, r4, #8
 800d776:	e883 0003 	stmia.w	r3, {r0, r1}
 800d77a:	89a2      	ldrh	r2, [r4, #12]
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 800d77c:	8863      	ldrh	r3, [r4, #2]
 800d77e:	8921      	ldrh	r1, [r4, #8]
 800d780:	81e3      	strh	r3, [r4, #14]
 800d782:	3201      	adds	r2, #1
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 800d784:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d786:	1a52      	subs	r2, r2, r1
 800d788:	b212      	sxth	r2, r2
 800d78a:	f3c3 031e 	ubfx	r3, r3, #0, #31
 800d78e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d792:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 800d796:	1052      	asrs	r2, r2, #1
 800d798:	8222      	strh	r2, [r4, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 800d79a:	8263      	strh	r3, [r4, #18]
 800d79c:	e7ca      	b.n	800d734 <lv_draw_sw_layer_create+0xc>
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 800d79e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d7a0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800d7a4:	f360 031e 	bfi	r3, r0, #0, #31
 800d7a8:	62a3      	str	r3, [r4, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 800d7aa:	f005 fdbd 	bl	8013328 <lv_mem_alloc>
 800d7ae:	6160      	str	r0, [r4, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d1dc      	bne.n	800d76e <lv_draw_sw_layer_create+0x46>
 800d7b4:	e7bd      	b.n	800d732 <lv_draw_sw_layer_create+0xa>
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 800d7b6:	f101 0708 	add.w	r7, r1, #8
 800d7ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7be:	e887 0003 	stmia.w	r7, {r0, r1}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f005 f829 	bl	801281a <lv_area_get_size>
 800d7c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d7ca:	f360 031e 	bfi	r3, r0, #0, #31
 800d7ce:	62a3      	str	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 800d7d0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d7d4:	f005 fda8 	bl	8013328 <lv_mem_alloc>
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 800d7d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 800d7da:	6160      	str	r0, [r4, #20]
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 800d7dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d7e0:	f005 ff8b 	bl	80136fa <lv_memset_00>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 800d7e4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800d7e8:	f366 13c7 	bfi	r3, r6, #7, #1
 800d7ec:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        if(layer_sw_ctx->base_draw.buf == NULL) {
 800d7f0:	6963      	ldr	r3, [r4, #20]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d09d      	beq.n	800d732 <lv_draw_sw_layer_create+0xa>
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 800d7f6:	e9c5 3700 	strd	r3, r7, [r5]
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 800d7fa:	60af      	str	r7, [r5, #8]
        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800d7fc:	f7fb fb96 	bl	8008f2c <_lv_refr_get_disp_refreshing>
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 800d800:	6803      	ldr	r3, [r0, #0]
 800d802:	7c1a      	ldrb	r2, [r3, #16]
 800d804:	f366 1286 	bfi	r2, r6, #6, #1
 800d808:	741a      	strb	r2, [r3, #16]
 800d80a:	e793      	b.n	800d734 <lv_draw_sw_layer_create+0xc>

0800d80c <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 800d80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d80e:	4615      	mov	r5, r2
 800d810:	4606      	mov	r6, r0
 800d812:	460c      	mov	r4, r1

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800d814:	f7fb fb8a 	bl	8008f2c <_lv_refr_get_disp_refreshing>
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800d818:	f015 0501 	ands.w	r5, r5, #1
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800d81c:	4607      	mov	r7, r0
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800d81e:	d016      	beq.n	800d84e <lv_draw_sw_layer_adjust+0x42>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 800d820:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d822:	6960      	ldr	r0, [r4, #20]
 800d824:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d828:	f005 ff67 	bl	80136fa <lv_memset_00>
        layer_sw_ctx->has_alpha = 1;
 800d82c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800d830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d834:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        disp_refr->driver->screen_transp = 1;
 800d838:	683a      	ldr	r2, [r7, #0]
 800d83a:	7c13      	ldrb	r3, [r2, #16]
 800d83c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d840:	7413      	strb	r3, [r2, #16]
    else {
        layer_sw_ctx->has_alpha = 0;
        disp_refr->driver->screen_transp = 0;
    }

    draw_ctx->buf = layer_ctx->buf;
 800d842:	6963      	ldr	r3, [r4, #20]
 800d844:	6033      	str	r3, [r6, #0]
    draw_ctx->buf_area = &layer_ctx->area_act;
 800d846:	3408      	adds	r4, #8
    draw_ctx->clip_area = &layer_ctx->area_act;
 800d848:	e9c6 4401 	strd	r4, r4, [r6, #4]
}
 800d84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        layer_sw_ctx->has_alpha = 0;
 800d84e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800d852:	f365 13c7 	bfi	r3, r5, #7, #1
 800d856:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        disp_refr->driver->screen_transp = 0;
 800d85a:	6803      	ldr	r3, [r0, #0]
 800d85c:	7c1a      	ldrb	r2, [r3, #16]
 800d85e:	f365 1286 	bfi	r2, r5, #6, #1
 800d862:	741a      	strb	r2, [r3, #16]
 800d864:	e7ed      	b.n	800d842 <lv_draw_sw_layer_adjust+0x36>

0800d866 <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 800d866:	b530      	push	{r4, r5, lr}
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 800d868:	6803      	ldr	r3, [r0, #0]
{
 800d86a:	b087      	sub	sp, #28
 800d86c:	4604      	mov	r4, r0
    img.header.always_zero = 0;
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 800d86e:	6840      	ldr	r0, [r0, #4]
    img.data = draw_ctx->buf;
 800d870:	9305      	str	r3, [sp, #20]
 800d872:	8883      	ldrh	r3, [r0, #4]
{
 800d874:	9201      	str	r2, [sp, #4]
 800d876:	8802      	ldrh	r2, [r0, #0]
 800d878:	3301      	adds	r3, #1
 800d87a:	1a9b      	subs	r3, r3, r2
    img.header.always_zero = 0;
 800d87c:	f3c3 020a 	ubfx	r2, r3, #0, #11
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d880:	88c3      	ldrh	r3, [r0, #6]
 800d882:	8840      	ldrh	r0, [r0, #2]
 800d884:	3301      	adds	r3, #1
 800d886:	1a1b      	subs	r3, r3, r0
 800d888:	055b      	lsls	r3, r3, #21
 800d88a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800d88e:	9a03      	ldr	r2, [sp, #12]
 800d890:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d894:	0592      	lsls	r2, r2, #22
 800d896:	0d92      	lsrs	r2, r2, #22
 800d898:	4313      	orrs	r3, r2
 800d89a:	9303      	str	r3, [sp, #12]
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 800d89c:	f991 302b 	ldrsb.w	r3, [r1, #43]	; 0x2b
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	bfb4      	ite	lt
 800d8a4:	2305      	movlt	r3, #5
 800d8a6:	2304      	movge	r3, #4
 800d8a8:	f88d 300c 	strb.w	r3, [sp, #12]

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 800d8ac:	6a0b      	ldr	r3, [r1, #32]
 800d8ae:	6023      	str	r3, [r4, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 800d8b0:	69cb      	ldr	r3, [r1, #28]
 800d8b2:	6063      	str	r3, [r4, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 800d8b4:	698b      	ldr	r3, [r1, #24]
 800d8b6:	60a3      	str	r3, [r4, #8]
{
 800d8b8:	460d      	mov	r5, r1
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800d8ba:	f7fb fb37 	bl	8008f2c <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 800d8be:	6803      	ldr	r3, [r0, #0]
 800d8c0:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 800d8c4:	7c1a      	ldrb	r2, [r3, #16]

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 800d8c6:	9901      	ldr	r1, [sp, #4]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 800d8c8:	f360 1286 	bfi	r2, r0, #6, #1
 800d8cc:	741a      	strb	r2, [r3, #16]
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	ab03      	add	r3, sp, #12
 800d8d2:	f105 0208 	add.w	r2, r5, #8
 800d8d6:	f7fc f815 	bl	8009904 <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f7fb fd5a 	bl	8009394 <lv_draw_wait_for_finish>
    lv_img_cache_invalidate_src(&img);
 800d8e0:	a803      	add	r0, sp, #12
 800d8e2:	f7fd fd8b 	bl	800b3fc <lv_img_cache_invalidate_src>
}
 800d8e6:	b007      	add	sp, #28
 800d8e8:	bd30      	pop	{r4, r5, pc}

0800d8ea <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 800d8ea:	6948      	ldr	r0, [r1, #20]
 800d8ec:	f005 bd3a 	b.w	8013364 <lv_mem_free>

0800d8f0 <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 800d8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f4:	ed2d 8b02 	vpush	{d8}
 800d8f8:	468a      	mov	sl, r1
 800d8fa:	b0a3      	sub	sp, #140	; 0x8c
 800d8fc:	461d      	mov	r5, r3
 800d8fe:	4680      	mov	r8, r0
 800d900:	4616      	mov	r6, r2
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 800d902:	f8da 0000 	ldr.w	r0, [sl]
 800d906:	2300      	movs	r3, #0
 800d908:	462a      	mov	r2, r5
 800d90a:	a912      	add	r1, sp, #72	; 0x48
 800d90c:	f004 fae4 	bl	8011ed8 <lv_font_get_glyph_dsc>
    if(g_ret == false) {
 800d910:	2800      	cmp	r0, #0
 800d912:	d13f      	bne.n	800d994 <lv_draw_sw_letter+0xa4>
        /*Add warning if the dsc is not found
         *but do not print warning for non printable ASCII chars (e.g. '\n')*/
        if(letter >= 0x20 &&
 800d914:	2d1f      	cmp	r5, #31
 800d916:	d938      	bls.n	800d98a <lv_draw_sw_letter+0x9a>
 800d918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d91c:	429d      	cmp	r5, r3
 800d91e:	d034      	beq.n	800d98a <lv_draw_sw_letter+0x9a>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
 800d920:	f242 030c 	movw	r3, #8204	; 0x200c
 800d924:	429d      	cmp	r5, r3
 800d926:	d030      	beq.n	800d98a <lv_draw_sw_letter+0x9a>

#if LV_USE_FONT_PLACEHOLDER
            /* draw placeholder */
            lv_area_t glyph_coords;
            lv_draw_rect_dsc_t glyph_dsc;
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 800d928:	8831      	ldrh	r1, [r6, #0]
 800d92a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 800d92e:	8872      	ldrh	r2, [r6, #2]
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 800d930:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 800d934:	4419      	add	r1, r3
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 800d936:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800d93a:	441a      	add	r2, r3
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 800d93c:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800d940:	fa10 f082 	uxtah	r0, r0, r2
 800d944:	fa13 f381 	uxtah	r3, r3, r1
 800d948:	b200      	sxth	r0, r0
 800d94a:	b21b      	sxth	r3, r3
 800d94c:	b212      	sxth	r2, r2
 800d94e:	b209      	sxth	r1, r1
 800d950:	9000      	str	r0, [sp, #0]
 800d952:	a810      	add	r0, sp, #64	; 0x40
 800d954:	f004 ff50 	bl	80127f8 <lv_area_set>
            lv_draw_rect_dsc_init(&glyph_dsc);
 800d958:	a816      	add	r0, sp, #88	; 0x58
 800d95a:	f7fd fc51 	bl	800b200 <lv_draw_rect_dsc_init>
            glyph_dsc.bg_opa = LV_OPA_MIN;
 800d95e:	2302      	movs	r3, #2
 800d960:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
            glyph_dsc.outline_opa = LV_OPA_MIN;
 800d964:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
            glyph_dsc.shadow_opa = LV_OPA_MIN;
 800d968:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
 800d96c:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
            glyph_dsc.border_color = dsc->color;
 800d970:	f89a 300c 	ldrb.w	r3, [sl, #12]
 800d974:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            glyph_dsc.border_width = 1;
 800d978:	2301      	movs	r3, #1
 800d97a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 800d97e:	aa10      	add	r2, sp, #64	; 0x40
 800d980:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d984:	a916      	add	r1, sp, #88	; 0x58
 800d986:	4640      	mov	r0, r8
 800d988:	4798      	blx	r3
#endif
    }
    else {
        draw_letter_normal(draw_ctx, dsc, &gpos, &g, map_p);
    }
}
 800d98a:	b023      	add	sp, #140	; 0x8c
 800d98c:	ecbd 8b02 	vpop	{d8}
 800d990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800d994:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800d998:	2a00      	cmp	r2, #0
 800d99a:	d0f6      	beq.n	800d98a <lv_draw_sw_letter+0x9a>
 800d99c:	f8bd 004e 	ldrh.w	r0, [sp, #78]	; 0x4e
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	d0f2      	beq.n	800d98a <lv_draw_sw_letter+0x9a>
    gpos.x = pos_p->x + g.ofs_x;
 800d9a4:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800d9a8:	8831      	ldrh	r1, [r6, #0]
 800d9aa:	4419      	add	r1, r3
 800d9ac:	b28b      	uxth	r3, r1
 800d9ae:	9308      	str	r3, [sp, #32]
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 800d9b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
    gpos.x = pos_p->x + g.ofs_x;
 800d9b4:	b20c      	sxth	r4, r1
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 800d9b6:	fa00 f181 	sxtah	r1, r0, r1
 800d9ba:	f9b3 0000 	ldrsh.w	r0, [r3]
 800d9be:	4281      	cmp	r1, r0
 800d9c0:	dbe3      	blt.n	800d98a <lv_draw_sw_letter+0x9a>
 800d9c2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800d9c6:	42a1      	cmp	r1, r4
 800d9c8:	dbdf      	blt.n	800d98a <lv_draw_sw_letter+0x9a>
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 800d9ca:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 800d9ce:	f8da 7000 	ldr.w	r7, [sl]
 800d9d2:	1811      	adds	r1, r2, r0
 800d9d4:	8870      	ldrh	r0, [r6, #2]
 800d9d6:	1a40      	subs	r0, r0, r1
 800d9d8:	8939      	ldrh	r1, [r7, #8]
 800d9da:	4408      	add	r0, r1
 800d9dc:	8979      	ldrh	r1, [r7, #10]
 800d9de:	1a40      	subs	r0, r0, r1
 800d9e0:	b281      	uxth	r1, r0
 800d9e2:	fa0f fb80 	sxth.w	fp, r0
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 800d9e6:	fa02 f080 	sxtah	r0, r2, r0
 800d9ea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 800d9ee:	910a      	str	r1, [sp, #40]	; 0x28
       gpos.x > draw_ctx->clip_area->x2 ||
 800d9f0:	4290      	cmp	r0, r2
 800d9f2:	dbca      	blt.n	800d98a <lv_draw_sw_letter+0x9a>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 800d9f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d9f8:	455b      	cmp	r3, fp
 800d9fa:	dbc6      	blt.n	800d98a <lv_draw_sw_letter+0x9a>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 800d9fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d9fe:	4629      	mov	r1, r5
 800da00:	f004 fa66 	bl	8011ed0 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 800da04:	2800      	cmp	r0, #0
 800da06:	d0c0      	beq.n	800d98a <lv_draw_sw_letter+0x9a>
    if(g.resolved_font->subpx) {
 800da08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da0a:	7b1b      	ldrb	r3, [r3, #12]
 800da0c:	079b      	lsls	r3, r3, #30
 800da0e:	d1bc      	bne.n	800d98a <lv_draw_sw_letter+0x9a>
{

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 800da10:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    lv_opa_t opa = dsc->opa;
 800da14:	f89a 1018 	ldrb.w	r1, [sl, #24]
    uint32_t bpp = g->bpp;
 800da18:	f003 030f 	and.w	r3, r3, #15
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 800da1c:	2b03      	cmp	r3, #3
 800da1e:	f000 80ed 	beq.w	800dbfc <lv_draw_sw_letter+0x30c>
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 800da22:	3b01      	subs	r3, #1
 800da24:	2b07      	cmp	r3, #7
 800da26:	d8b0      	bhi.n	800d98a <lv_draw_sw_letter+0x9a>
 800da28:	a201      	add	r2, pc, #4	; (adr r2, 800da30 <lv_draw_sw_letter+0x140>)
 800da2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2e:	bf00      	nop
 800da30:	0800da51 	.word	0x0800da51
 800da34:	0800dc09 	.word	0x0800dc09
 800da38:	0800d98b 	.word	0x0800d98b
 800da3c:	0800dbfd 	.word	0x0800dbfd
 800da40:	0800d98b 	.word	0x0800d98b
 800da44:	0800d98b 	.word	0x0800d98b
 800da48:	0800d98b 	.word	0x0800d98b
 800da4c:	0800dbef 	.word	0x0800dbef
 800da50:	2280      	movs	r2, #128	; 0x80
 800da52:	4eb0      	ldr	r6, [pc, #704]	; (800dd14 <lv_draw_sw_letter+0x424>)
 800da54:	9204      	str	r2, [sp, #16]
 800da56:	2501      	movs	r5, #1
 800da58:	2302      	movs	r3, #2
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 800da5a:	29fc      	cmp	r1, #252	; 0xfc
 800da5c:	d80d      	bhi.n	800da7a <lv_draw_sw_letter+0x18a>
        if(prev_opa != opa || prev_bpp != bpp) {
 800da5e:	4fae      	ldr	r7, [pc, #696]	; (800dd18 <lv_draw_sw_letter+0x428>)
 800da60:	783a      	ldrb	r2, [r7, #0]
 800da62:	428a      	cmp	r2, r1
 800da64:	f040 80d6 	bne.w	800dc14 <lv_draw_sw_letter+0x324>
 800da68:	4aac      	ldr	r2, [pc, #688]	; (800dd1c <lv_draw_sw_letter+0x42c>)
 800da6a:	6812      	ldr	r2, [r2, #0]
 800da6c:	42aa      	cmp	r2, r5
 800da6e:	f040 80d1 	bne.w	800dc14 <lv_draw_sw_letter+0x324>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
            }
        }
        bpp_opa_table_p = opa_table;
        prev_opa = opa;
        prev_bpp = bpp;
 800da72:	4baa      	ldr	r3, [pc, #680]	; (800dd1c <lv_draw_sw_letter+0x42c>)
        bpp_opa_table_p = opa_table;
 800da74:	4eaa      	ldr	r6, [pc, #680]	; (800dd20 <lv_draw_sw_letter+0x430>)
        prev_opa = opa;
 800da76:	7039      	strb	r1, [r7, #0]
        prev_bpp = bpp;
 800da78:	601d      	str	r5, [r3, #0]
    int32_t box_w = g->box_w;
    int32_t box_h = g->box_h;
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 800da7a:	f8d8 2008 	ldr.w	r2, [r8, #8]
    int32_t box_w = g->box_w;
 800da7e:	f8bd 904e 	ldrh.w	r9, [sp, #78]	; 0x4e
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 800da82:	f9b2 7000 	ldrsh.w	r7, [r2]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 800da86:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
    int32_t box_h = g->box_h;
 800da8a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800da8e:	9306      	str	r3, [sp, #24]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 800da90:	eb04 0e09 	add.w	lr, r4, r9
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 800da94:	42bc      	cmp	r4, r7
 800da96:	bfb4      	ite	lt
 800da98:	1b3f      	sublt	r7, r7, r4
 800da9a:	2700      	movge	r7, #0
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 800da9c:	458e      	cmp	lr, r1
 800da9e:	bfc2      	ittt	gt
 800daa0:	1b09      	subgt	r1, r1, r4
 800daa2:	3101      	addgt	r1, #1
 800daa4:	9103      	strgt	r1, [sp, #12]
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 800daa6:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 800daaa:	bfd8      	it	le
 800daac:	f8cd 900c 	strle.w	r9, [sp, #12]
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 800dab0:	458b      	cmp	fp, r1
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 800dab2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 800dab6:	bfb4      	ite	lt
 800dab8:	eba1 010b 	sublt.w	r1, r1, fp
 800dabc:	2100      	movge	r1, #0
 800dabe:	9102      	str	r1, [sp, #8]
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 800dac0:	eb0b 0103 	add.w	r1, fp, r3
 800dac4:	4291      	cmp	r1, r2
 800dac6:	bfd8      	it	le
 800dac8:	9307      	strle	r3, [sp, #28]

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800daca:	9b02      	ldr	r3, [sp, #8]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800dacc:	fb05 fc09 	mul.w	ip, r5, r9
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 800dad0:	bfc8      	it	gt
 800dad2:	eba2 0b0b 	subgt.w	fp, r2, fp
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800dad6:	fb07 f405 	mul.w	r4, r7, r5
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 800dada:	bfc8      	it	gt
 800dadc:	f10b 0201 	addgt.w	r2, fp, #1
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800dae0:	fb03 440c 	mla	r4, r3, ip, r4
    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800dae4:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
    map_p += bit_ofs >> 3;
 800dae8:	eb00 03d4 	add.w	r3, r0, r4, lsr #3
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800daec:	f04f 011c 	mov.w	r1, #28
 800daf0:	4658      	mov	r0, fp
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 800daf2:	bfc8      	it	gt
 800daf4:	9207      	strgt	r2, [sp, #28]
    map_p += bit_ofs >> 3;
 800daf6:	9305      	str	r3, [sp, #20]
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800daf8:	f005 fdff 	bl	80136fa <lv_memset_00>
    blend_dsc.color = dsc->color;
 800dafc:	f89a 200c 	ldrb.w	r2, [sl, #12]
 800db00:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
    blend_dsc.opa = dsc->opa;
 800db04:	f89a 2018 	ldrb.w	r2, [sl, #24]
 800db08:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
    blend_dsc.blend_mode = dsc->blend_mode;
 800db0c:	f89a 201c 	ldrb.w	r2, [sl, #28]
 800db10:	f3c2 02c2 	ubfx	r2, r2, #3, #3
 800db14:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800db18:	f7fb fa08 	bl	8008f2c <_lv_refr_get_disp_refreshing>
 800db1c:	f004 fc28 	bl	8012370 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800db20:	9b06      	ldr	r3, [sp, #24]
 800db22:	fb03 f209 	mul.w	r2, r3, r9
 800db26:	4282      	cmp	r2, r0
 800db28:	4613      	mov	r3, r2
 800db2a:	bfa8      	it	ge
 800db2c:	4603      	movge	r3, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800db2e:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800db30:	9309      	str	r3, [sp, #36]	; 0x24
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800db32:	f005 fc49 	bl	80133c8 <lv_mem_buf_get>
    blend_dsc.mask_buf = mask_buf;
    int32_t mask_p = 0;

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 800db36:	9b08      	ldr	r3, [sp, #32]
    fill_area.x2 = col_end  + pos->x - 1;
 800db38:	9903      	ldr	r1, [sp, #12]
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800db3a:	9006      	str	r0, [sp, #24]
    fill_area.x1 = col_start + pos->x;
 800db3c:	19da      	adds	r2, r3, r7
 800db3e:	fa1f fe82 	uxth.w	lr, r2
    fill_area.x2 = col_end  + pos->x - 1;
 800db42:	3b01      	subs	r3, #1
 800db44:	440b      	add	r3, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800db46:	f1ce 0e01 	rsb	lr, lr, #1
 800db4a:	fa0f fc83 	sxth.w	ip, r3
    fill_area.y1 = row_start + pos->y;
 800db4e:	990a      	ldr	r1, [sp, #40]	; 0x28
    blend_dsc.mask_buf = mask_buf;
 800db50:	9019      	str	r0, [sp, #100]	; 0x64
 800db52:	fa1e f383 	uxtah	r3, lr, r3
    fill_area.y1 = row_start + pos->y;
 800db56:	9802      	ldr	r0, [sp, #8]
    fill_area.x2 = col_end  + pos->x - 1;
 800db58:	f8ad c03c 	strh.w	ip, [sp, #60]	; 0x3c
 800db5c:	b21b      	sxth	r3, r3
    fill_area.y1 = row_start + pos->y;
 800db5e:	4401      	add	r1, r0
 800db60:	ee08 3a10 	vmov	s16, r3
    fill_area.y2 = fill_area.y1;
#if LV_DRAW_COMPLEX
    lv_coord_t fill_w = lv_area_get_width(&fill_area);
    lv_area_t mask_area;
    lv_area_copy(&mask_area, &fill_area);
    mask_area.y2 = mask_area.y1 + row_end;
 800db64:	9b07      	ldr	r3, [sp, #28]
    dest->x2 = src->x2;
 800db66:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
    fill_area.y1 = row_start + pos->y;
 800db6a:	b208      	sxth	r0, r1
    fill_area.x1 = col_start + pos->x;
 800db6c:	b212      	sxth	r2, r2
    mask_area.y2 = mask_area.y1 + row_end;
 800db6e:	fa13 f181 	uxtah	r1, r3, r1
    fill_area.y1 = row_start + pos->y;
 800db72:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
    fill_area.y2 = fill_area.y1;
 800db76:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
    dest->y1 = src->y1;
 800db7a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800db7e:	a810      	add	r0, sp, #64	; 0x40
    fill_area.x1 = col_start + pos->x;
 800db80:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    dest->x1 = src->x1;
 800db84:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    mask_area.y2 = mask_area.y1 + row_end;
 800db88:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800db8c:	f7fc ffe4 	bl	800ab58 <lv_draw_mask_is_any>
#endif
    blend_dsc.blend_area = &fill_area;
 800db90:	ab0e      	add	r3, sp, #56	; 0x38
 800db92:	9316      	str	r3, [sp, #88]	; 0x58
    blend_dsc.mask_area = &fill_area;
 800db94:	931b      	str	r3, [sp, #108]	; 0x6c

    uint32_t col_bit_max = 8 - bpp;
 800db96:	f1c5 0308 	rsb	r3, r5, #8
 800db9a:	9308      	str	r3, [sp, #32]
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800db9c:	9b03      	ldr	r3, [sp, #12]
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800db9e:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800dba0:	44b9      	add	r9, r7
 800dba2:	eba9 0903 	sub.w	r9, r9, r3
 800dba6:	fb05 f309 	mul.w	r3, r5, r9
 800dbaa:	930c      	str	r3, [sp, #48]	; 0x30
 800dbac:	9b03      	ldr	r3, [sp, #12]
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
            fill_area.y2 ++;
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800dbae:	ee08 ba90 	vmov	s17, fp
 800dbb2:	1bdb      	subs	r3, r3, r7
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 800dbb4:	f004 0407 	and.w	r4, r4, #7
    int32_t mask_p = 0;
 800dbb8:	f04f 0a00 	mov.w	sl, #0
 800dbbc:	930a      	str	r3, [sp, #40]	; 0x28
    for(row = row_start ; row < row_end; row++) {
 800dbbe:	9b07      	ldr	r3, [sp, #28]
 800dbc0:	9a02      	ldr	r2, [sp, #8]
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	dc36      	bgt.n	800dc34 <lv_draw_sw_letter+0x344>
        map_p += (col_bit >> 3);
        col_bit = col_bit & 0x7;
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800dbc6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800dbca:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d009      	beq.n	800dbe6 <lv_draw_sw_letter+0x2f6>
        fill_area.y2--;
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800dbd8:	a916      	add	r1, sp, #88	; 0x58
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dbda:	2302      	movs	r3, #2
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800dbdc:	4640      	mov	r0, r8
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dbde:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800dbe2:	f7fe fd42 	bl	800c66a <lv_draw_sw_blend>
        mask_p = 0;
    }

    lv_mem_buf_release(mask_buf);
 800dbe6:	9806      	ldr	r0, [sp, #24]
 800dbe8:	f005 fc3a 	bl	8013460 <lv_mem_buf_release>
 800dbec:	e6cd      	b.n	800d98a <lv_draw_sw_letter+0x9a>
            bitmask_init  = 0xFF;
 800dbee:	22ff      	movs	r2, #255	; 0xff
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800dbf0:	4e4c      	ldr	r6, [pc, #304]	; (800dd24 <lv_draw_sw_letter+0x434>)
            bitmask_init  = 0xFF;
 800dbf2:	9204      	str	r2, [sp, #16]
            break;       /*No opa table, pixel value will be used directly*/
 800dbf4:	2508      	movs	r5, #8
            shades = 256;
 800dbf6:	f44f 7380 	mov.w	r3, #256	; 0x100
            break;       /*No opa table, pixel value will be used directly*/
 800dbfa:	e72e      	b.n	800da5a <lv_draw_sw_letter+0x16a>
            bitmask_init  = 0xF0;
 800dbfc:	22f0      	movs	r2, #240	; 0xf0
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800dbfe:	4e4a      	ldr	r6, [pc, #296]	; (800dd28 <lv_draw_sw_letter+0x438>)
            bitmask_init  = 0xF0;
 800dc00:	9204      	str	r2, [sp, #16]
    if(bpp == 3) bpp = 4;
 800dc02:	2504      	movs	r5, #4
            shades = 16;
 800dc04:	2310      	movs	r3, #16
 800dc06:	e728      	b.n	800da5a <lv_draw_sw_letter+0x16a>
            bitmask_init  = 0xC0;
 800dc08:	22c0      	movs	r2, #192	; 0xc0
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800dc0a:	4e48      	ldr	r6, [pc, #288]	; (800dd2c <lv_draw_sw_letter+0x43c>)
            bitmask_init  = 0xC0;
 800dc0c:	9204      	str	r2, [sp, #16]
    switch(bpp) {
 800dc0e:	2502      	movs	r5, #2
            shades = 4;
 800dc10:	2304      	movs	r3, #4
 800dc12:	e722      	b.n	800da5a <lv_draw_sw_letter+0x16a>
 800dc14:	f8df c108 	ldr.w	ip, [pc, #264]	; 800dd20 <lv_draw_sw_letter+0x430>
 800dc18:	4433      	add	r3, r6
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800dc1a:	f816 2b01 	ldrb.w	r2, [r6], #1
 800dc1e:	2aff      	cmp	r2, #255	; 0xff
 800dc20:	bf1a      	itte	ne
 800dc22:	fb12 f201 	smulbbne	r2, r2, r1
 800dc26:	0a12      	lsrne	r2, r2, #8
 800dc28:	460a      	moveq	r2, r1
            for(i = 0; i < shades; i++) {
 800dc2a:	42b3      	cmp	r3, r6
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800dc2c:	f80c 2b01 	strb.w	r2, [ip], #1
            for(i = 0; i < shades; i++) {
 800dc30:	d1f3      	bne.n	800dc1a <lv_draw_sw_letter+0x32a>
 800dc32:	e71e      	b.n	800da72 <lv_draw_sw_letter+0x182>
        bitmask = bitmask_init >> col_bit;
 800dc34:	9b04      	ldr	r3, [sp, #16]
 800dc36:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800dc3a:	fa23 f104 	lsr.w	r1, r3, r4
        for(col = col_start; col < col_end; col++) {
 800dc3e:	9b06      	ldr	r3, [sp, #24]
 800dc40:	eb03 0b0a 	add.w	fp, r3, sl
 800dc44:	465a      	mov	r2, fp
 800dc46:	4638      	mov	r0, r7
 800dc48:	9b03      	ldr	r3, [sp, #12]
 800dc4a:	4283      	cmp	r3, r0
 800dc4c:	dc31      	bgt.n	800dcb2 <lv_draw_sw_letter+0x3c2>
 800dc4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc50:	9a03      	ldr	r2, [sp, #12]
 800dc52:	4297      	cmp	r7, r2
 800dc54:	bfc8      	it	gt
 800dc56:	2300      	movgt	r3, #0
 800dc58:	4699      	mov	r9, r3
 800dc5a:	449a      	add	sl, r3
        if(mask_any) {
 800dc5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc5e:	b183      	cbz	r3, 800dc82 <lv_draw_sw_letter+0x392>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 800dc60:	ee18 3a10 	vmov	r3, s16
 800dc64:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 800dc68:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 800dc6c:	4658      	mov	r0, fp
 800dc6e:	f7fc fef9 	bl	800aa64 <lv_draw_mask_apply>
 800dc72:	f88d 0068 	strb.w	r0, [sp, #104]	; 0x68
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800dc76:	b920      	cbnz	r0, 800dc82 <lv_draw_sw_letter+0x392>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
 800dc78:	ee18 1a10 	vmov	r1, s16
 800dc7c:	4658      	mov	r0, fp
 800dc7e:	f005 fd3c 	bl	80136fa <lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800dc82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc84:	4499      	add	r9, r3
 800dc86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc88:	4499      	add	r9, r3
 800dc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc8c:	454b      	cmp	r3, r9
 800dc8e:	d92d      	bls.n	800dcec <lv_draw_sw_letter+0x3fc>
            fill_area.y2 ++;
 800dc90:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800dc94:	3301      	adds	r3, #1
 800dc96:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        col_bit += col_bit_row_ofs;
 800dc9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc9c:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
 800dc9e:	9b05      	ldr	r3, [sp, #20]
 800dca0:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 800dca4:	9305      	str	r3, [sp, #20]
    for(row = row_start ; row < row_end; row++) {
 800dca6:	9b02      	ldr	r3, [sp, #8]
 800dca8:	3301      	adds	r3, #1
        col_bit = col_bit & 0x7;
 800dcaa:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
 800dcae:	9302      	str	r3, [sp, #8]
 800dcb0:	e785      	b.n	800dbbe <lv_draw_sw_letter+0x2ce>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800dcb2:	9b05      	ldr	r3, [sp, #20]
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	ea03 0e01 	and.w	lr, r3, r1
 800dcba:	9b08      	ldr	r3, [sp, #32]
 800dcbc:	eba3 0c04 	sub.w	ip, r3, r4
 800dcc0:	fa2e f30c 	lsr.w	r3, lr, ip
            if(letter_px) {
 800dcc4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        for(col = col_start; col < col_end; col++) {
 800dcc8:	f100 0001 	add.w	r0, r0, #1
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800dccc:	bf18      	it	ne
 800dcce:	5cf3      	ldrbne	r3, [r6, r3]
                mask_buf[mask_p] = 0;
 800dcd0:	7013      	strb	r3, [r2, #0]
            if(col_bit < col_bit_max) {
 800dcd2:	9b08      	ldr	r3, [sp, #32]
 800dcd4:	42a3      	cmp	r3, r4
                map_p++;
 800dcd6:	bf9d      	ittte	ls
 800dcd8:	9b05      	ldrls	r3, [sp, #20]
                bitmask = bitmask_init;
 800dcda:	9904      	ldrls	r1, [sp, #16]
                map_p++;
 800dcdc:	3301      	addls	r3, #1
                col_bit += bpp;
 800dcde:	1964      	addhi	r4, r4, r5
                bitmask = bitmask >> bpp;
 800dce0:	bf8e      	itee	hi
 800dce2:	40e9      	lsrhi	r1, r5
                map_p++;
 800dce4:	9305      	strls	r3, [sp, #20]
                col_bit = 0;
 800dce6:	2400      	movls	r4, #0
        for(col = col_start; col < col_end; col++) {
 800dce8:	3201      	adds	r2, #1
 800dcea:	e7ad      	b.n	800dc48 <lv_draw_sw_letter+0x358>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dcec:	f04f 0302 	mov.w	r3, #2
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800dcf0:	ee18 1a90 	vmov	r1, s17
 800dcf4:	4640      	mov	r0, r8
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dcf6:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800dcfa:	f7fe fcb6 	bl	800c66a <lv_draw_sw_blend>
            fill_area.y1 = fill_area.y2 + 1;
 800dcfe:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800dd02:	3301      	adds	r3, #1
 800dd04:	b21b      	sxth	r3, r3
 800dd06:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            fill_area.y2 = fill_area.y1;
 800dd0a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            mask_p = 0;
 800dd0e:	f04f 0a00 	mov.w	sl, #0
 800dd12:	e7c2      	b.n	800dc9a <lv_draw_sw_letter+0x3aa>
 800dd14:	0801e2f4 	.word	0x0801e2f4
 800dd18:	20000c74 	.word	0x20000c74
 800dd1c:	20000c70 	.word	0x20000c70
 800dd20:	20000b6d 	.word	0x20000b6d
 800dd24:	0801e30a 	.word	0x0801e30a
 800dd28:	0801e2fa 	.word	0x0801e2fa
 800dd2c:	0801e2f6 	.word	0x0801e2f6

0800dd30 <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 800dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd34:	ed2d 8b04 	vpush	{d8-d9}
 800dd38:	b0c1      	sub	sp, #260	; 0x104
 800dd3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if(dsc->width == 0) return;
 800dd3e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
{
 800dd42:	ee08 0a10 	vmov	s16, r0
 800dd46:	460c      	mov	r4, r1
    if(dsc->width == 0) return;
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 80ee 	beq.w	800df2a <lv_draw_sw_line+0x1fa>
    if(dsc->opa <= LV_OPA_MIN) return;
 800dd4e:	7a0a      	ldrb	r2, [r1, #8]
 800dd50:	2a02      	cmp	r2, #2
 800dd52:	f240 80ea 	bls.w	800df2a <lv_draw_sw_line+0x1fa>

    if(point1->x == point2->x && point1->y == point2->y) return;
 800dd56:	9a02      	ldr	r2, [sp, #8]
 800dd58:	f9b2 5000 	ldrsh.w	r5, [r2]
 800dd5c:	9a03      	ldr	r2, [sp, #12]
 800dd5e:	f9b2 0000 	ldrsh.w	r0, [r2]
 800dd62:	9a02      	ldr	r2, [sp, #8]
 800dd64:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800dd68:	9a03      	ldr	r2, [sp, #12]
 800dd6a:	4285      	cmp	r5, r0
 800dd6c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800dd70:	d102      	bne.n	800dd78 <lv_draw_sw_line+0x48>
 800dd72:	4291      	cmp	r1, r2
 800dd74:	f000 80d9 	beq.w	800df2a <lv_draw_sw_line+0x1fa>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800dd78:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800dd7c:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800dd80:	4285      	cmp	r5, r0
 800dd82:	bfd4      	ite	le
 800dd84:	ebc3 0605 	rsble	r6, r3, r5
 800dd88:	ebc3 0600 	rsbgt	r6, r3, r0
 800dd8c:	f8ad 6020 	strh.w	r6, [sp, #32]
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800dd90:	4285      	cmp	r5, r0
 800dd92:	bfac      	ite	ge
 800dd94:	195e      	addge	r6, r3, r5
 800dd96:	181e      	addlt	r6, r3, r0
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800dd98:	4291      	cmp	r1, r2
 800dd9a:	bfd4      	ite	le
 800dd9c:	ebc3 0001 	rsble	r0, r3, r1
 800dda0:	ebc3 0002 	rsbgt	r0, r3, r2
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800dda4:	4291      	cmp	r1, r2
 800dda6:	bfac      	ite	ge
 800dda8:	185b      	addge	r3, r3, r1
 800ddaa:	189b      	addlt	r3, r3, r2
 800ddac:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800ddb0:	ee18 3a10 	vmov	r3, s16
 800ddb4:	a908      	add	r1, sp, #32
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800ddb6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800ddba:	689a      	ldr	r2, [r3, #8]
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800ddbc:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800ddc0:	4608      	mov	r0, r1
 800ddc2:	f004 fd58 	bl	8012876 <_lv_area_intersect>
    if(!is_common) return;
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	f000 80af 	beq.w	800df2a <lv_draw_sw_line+0x1fa>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800ddcc:	ee18 3a10 	vmov	r3, s16
 800ddd0:	689b      	ldr	r3, [r3, #8]
 800ddd2:	9307      	str	r3, [sp, #28]
    draw_ctx->clip_area = &clip_line;
 800ddd4:	ee18 3a10 	vmov	r3, s16
 800ddd8:	a908      	add	r1, sp, #32
 800ddda:	6099      	str	r1, [r3, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 800dddc:	9b02      	ldr	r3, [sp, #8]


LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
    int32_t w = dsc->width - 1;
 800ddde:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 800dde2:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
 800dde6:	9b03      	ldr	r3, [sp, #12]
 800dde8:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 800ddec:	9b02      	ldr	r3, [sp, #8]
 800ddee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ddf2:	9b03      	ldr	r3, [sp, #12]
 800ddf4:	454f      	cmp	r7, r9
 800ddf6:	f9b3 8000 	ldrsh.w	r8, [r3]
 800ddfa:	f040 810a 	bne.w	800e012 <lv_draw_sw_line+0x2e2>
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800ddfe:	4546      	cmp	r6, r8
    int32_t w = dsc->width - 1;
 800de00:	f105 35ff 	add.w	r5, r5, #4294967295
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800de04:	4633      	mov	r3, r6
 800de06:	bfa8      	it	ge
 800de08:	4643      	movge	r3, r8
 800de0a:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800de0e:	45b0      	cmp	r8, r6
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800de10:	f005 0301 	and.w	r3, r5, #1
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800de14:	bfb8      	it	lt
 800de16:	46b0      	movlt	r8, r6
    blend_area.y1 = point1->y - w_half1;
 800de18:	b2bf      	uxth	r7, r7
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800de1a:	eb03 0365 	add.w	r3, r3, r5, asr #1
    blend_area.y2 = point1->y + w_half0;

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800de1e:	460a      	mov	r2, r1
 800de20:	a929      	add	r1, sp, #164	; 0xa4
    blend_area.y1 = point1->y - w_half1;
 800de22:	1afb      	subs	r3, r7, r3
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800de24:	f108 38ff 	add.w	r8, r8, #4294967295
    blend_area.y2 = point1->y + w_half0;
 800de28:	eb07 0765 	add.w	r7, r7, r5, asr #1
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800de2c:	4608      	mov	r0, r1
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800de2e:	f8ad 80a8 	strh.w	r8, [sp, #168]	; 0xa8
    blend_area.y1 = point1->y - w_half1;
 800de32:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    blend_area.y2 = point1->y + w_half0;
 800de36:	f8ad 70aa 	strh.w	r7, [sp, #170]	; 0xaa
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800de3a:	f004 fd1c 	bl	8012876 <_lv_area_intersect>
    if(!is_common) return;
 800de3e:	b308      	cbz	r0, 800de84 <lv_draw_sw_line+0x154>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800de40:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 800de44:	b125      	cbz	r5, 800de50 <lv_draw_sw_line+0x120>
 800de46:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 800de4a:	3d00      	subs	r5, #0
 800de4c:	bf18      	it	ne
 800de4e:	2501      	movne	r5, #1
    bool simple_mode = true;
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800de50:	a829      	add	r0, sp, #164	; 0xa4
 800de52:	f7fc fe81 	bl	800ab58 <lv_draw_mask_is_any>
 800de56:	2800      	cmp	r0, #0
 800de58:	d16c      	bne.n	800df34 <lv_draw_sw_line+0x204>
    else if(dashed) simple_mode = false;
 800de5a:	f085 0601 	eor.w	r6, r5, #1

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800de5e:	211c      	movs	r1, #28
 800de60:	a834      	add	r0, sp, #208	; 0xd0
 800de62:	f005 fc4a 	bl	80136fa <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 800de66:	ab29      	add	r3, sp, #164	; 0xa4
 800de68:	9334      	str	r3, [sp, #208]	; 0xd0
    blend_dsc.color = dsc->color;
 800de6a:	7823      	ldrb	r3, [r4, #0]
 800de6c:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    blend_dsc.opa = dsc->opa;
 800de70:	7a23      	ldrb	r3, [r4, #8]
 800de72:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 800de76:	2e00      	cmp	r6, #0
 800de78:	d05e      	beq.n	800df38 <lv_draw_sw_line+0x208>
    blend_dsc.color = dsc->color;
    blend_dsc.opa = dsc->opa;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800de7a:	ee18 0a10 	vmov	r0, s16
 800de7e:	a934      	add	r1, sp, #208	; 0xd0
 800de80:	f7fe fbf3 	bl	800c66a <lv_draw_sw_blend>
    if(dsc->round_end || dsc->round_start) {
 800de84:	7a63      	ldrb	r3, [r4, #9]
 800de86:	f013 0f0c 	tst.w	r3, #12
 800de8a:	d04a      	beq.n	800df22 <lv_draw_sw_line+0x1f2>
        lv_draw_rect_dsc_init(&cir_dsc);
 800de8c:	a834      	add	r0, sp, #208	; 0xd0
 800de8e:	f7fd f9b7 	bl	800b200 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 800de92:	7823      	ldrb	r3, [r4, #0]
 800de94:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800de98:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800de9c:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
        cir_dsc.bg_opa = dsc->opa;
 800dea0:	7a23      	ldrb	r3, [r4, #8]
 800dea2:	f88d 30d3 	strb.w	r3, [sp, #211]	; 0xd3
        int32_t r = (dsc->width >> 1);
 800dea6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800deaa:	105d      	asrs	r5, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 800deac:	43db      	mvns	r3, r3
 800deae:	f003 0601 	and.w	r6, r3, #1
        if(dsc->round_start) {
 800deb2:	7a63      	ldrb	r3, [r4, #9]
 800deb4:	075a      	lsls	r2, r3, #29
 800deb6:	d518      	bpl.n	800deea <lv_draw_sw_line+0x1ba>
            cir_area.x1 = point1->x - r;
 800deb8:	9b02      	ldr	r3, [sp, #8]
 800deba:	881a      	ldrh	r2, [r3, #0]
 800debc:	b2ab      	uxth	r3, r5
 800debe:	1ad1      	subs	r1, r2, r3
 800dec0:	f8ad 10a4 	strh.w	r1, [sp, #164]	; 0xa4
            cir_area.y1 = point1->y - r;
 800dec4:	9902      	ldr	r1, [sp, #8]
 800dec6:	8849      	ldrh	r1, [r1, #2]
            cir_area.x2 = point1->x + r - r_corr;
 800dec8:	441a      	add	r2, r3
            cir_area.y1 = point1->y - r;
 800deca:	1ac8      	subs	r0, r1, r3
            cir_area.x2 = point1->x + r - r_corr;
 800decc:	1b92      	subs	r2, r2, r6
            cir_area.y2 = point1->y + r - r_corr ;
 800dece:	440b      	add	r3, r1
            cir_area.y1 = point1->y - r;
 800ded0:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
            cir_area.x2 = point1->x + r - r_corr;
 800ded4:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
            cir_area.y2 = point1->y + r - r_corr ;
 800ded8:	1b9b      	subs	r3, r3, r6
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800deda:	ee18 0a10 	vmov	r0, s16
 800dede:	aa29      	add	r2, sp, #164	; 0xa4
 800dee0:	a934      	add	r1, sp, #208	; 0xd0
            cir_area.y2 = point1->y + r - r_corr ;
 800dee2:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800dee6:	f7fd f9af 	bl	800b248 <lv_draw_rect>
        if(dsc->round_end) {
 800deea:	7a63      	ldrb	r3, [r4, #9]
 800deec:	071b      	lsls	r3, r3, #28
 800deee:	d518      	bpl.n	800df22 <lv_draw_sw_line+0x1f2>
            cir_area.x1 = point2->x - r;
 800def0:	9b03      	ldr	r3, [sp, #12]
 800def2:	881a      	ldrh	r2, [r3, #0]
 800def4:	b2ab      	uxth	r3, r5
 800def6:	1ad1      	subs	r1, r2, r3
 800def8:	f8ad 10a4 	strh.w	r1, [sp, #164]	; 0xa4
            cir_area.y1 = point2->y - r;
 800defc:	9903      	ldr	r1, [sp, #12]
 800defe:	8849      	ldrh	r1, [r1, #2]
            cir_area.x2 = point2->x + r - r_corr;
 800df00:	441a      	add	r2, r3
            cir_area.y1 = point2->y - r;
 800df02:	1ac8      	subs	r0, r1, r3
            cir_area.x2 = point2->x + r - r_corr;
 800df04:	1b92      	subs	r2, r2, r6
            cir_area.y2 = point2->y + r - r_corr ;
 800df06:	440b      	add	r3, r1
            cir_area.y1 = point2->y - r;
 800df08:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
            cir_area.x2 = point2->x + r - r_corr;
 800df0c:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
            cir_area.y2 = point2->y + r - r_corr ;
 800df10:	1b9b      	subs	r3, r3, r6
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800df12:	ee18 0a10 	vmov	r0, s16
 800df16:	aa29      	add	r2, sp, #164	; 0xa4
 800df18:	a934      	add	r1, sp, #208	; 0xd0
            cir_area.y2 = point2->y + r - r_corr ;
 800df1a:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800df1e:	f7fd f993 	bl	800b248 <lv_draw_rect>
    draw_ctx->clip_area = clip_area_ori;
 800df22:	ee18 3a10 	vmov	r3, s16
 800df26:	9a07      	ldr	r2, [sp, #28]
 800df28:	609a      	str	r2, [r3, #8]
}
 800df2a:	b041      	add	sp, #260	; 0x104
 800df2c:	ecbd 8b04 	vpop	{d8-d9}
 800df30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800df34:	2600      	movs	r6, #0
 800df36:	e792      	b.n	800de5e <lv_draw_sw_line+0x12e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800df38:	f8bd b0a8 	ldrh.w	fp, [sp, #168]	; 0xa8
 800df3c:	f9bd 60a4 	ldrsh.w	r6, [sp, #164]	; 0xa4
        blend_area.y2 = blend_area.y1;
 800df40:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	; 0xa6
        lv_coord_t y2 = blend_area.y2;
 800df44:	f9bd 90aa 	ldrsh.w	r9, [sp, #170]	; 0xaa
        blend_area.y2 = blend_area.y1;
 800df48:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
 800df4c:	f10b 0b01 	add.w	fp, fp, #1
 800df50:	ebab 0b06 	sub.w	fp, fp, r6
 800df54:	fa0f fb8b 	sxth.w	fp, fp
        if(dashed) {
 800df58:	b1d5      	cbz	r5, 800df90 <lv_draw_sw_line+0x260>
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 800df5a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800df5e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800df62:	4413      	add	r3, r2
 800df64:	fb96 f2f3 	sdiv	r2, r6, r3
 800df68:	fb03 6612 	mls	r6, r3, r2, r6
 800df6c:	b236      	sxth	r6, r6
        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 800df6e:	4658      	mov	r0, fp
 800df70:	f005 fa2a 	bl	80133c8 <lv_mem_buf_get>
        blend_dsc.mask_area = &blend_area;
 800df74:	ab29      	add	r3, sp, #164	; 0xa4
        for(h = blend_area.y1; h <= y2; h++) {
 800df76:	f9bd 80a6 	ldrsh.w	r8, [sp, #166]	; 0xa6
        blend_dsc.mask_buf = mask_buf;
 800df7a:	9037      	str	r0, [sp, #220]	; 0xdc
        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 800df7c:	4607      	mov	r7, r0
        blend_dsc.mask_area = &blend_area;
 800df7e:	9339      	str	r3, [sp, #228]	; 0xe4
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800df80:	f04f 0a00 	mov.w	sl, #0
        for(h = blend_area.y1; h <= y2; h++) {
 800df84:	45c8      	cmp	r8, r9
 800df86:	dd05      	ble.n	800df94 <lv_draw_sw_line+0x264>
        lv_mem_buf_release(mask_buf);
 800df88:	4638      	mov	r0, r7
            lv_draw_sw_blend(draw_ctx, &blend_dsc);

            blend_area.y1++;
            blend_area.y2++;
        }
        lv_mem_buf_release(mask_buf);
 800df8a:	f005 fa69 	bl	8013460 <lv_mem_buf_release>
 800df8e:	e779      	b.n	800de84 <lv_draw_sw_line+0x154>
        lv_coord_t dash_start = 0;
 800df90:	462e      	mov	r6, r5
 800df92:	e7ec      	b.n	800df6e <lv_draw_sw_line+0x23e>
            lv_memset_ff(mask_buf, blend_area_w);
 800df94:	4659      	mov	r1, fp
 800df96:	4638      	mov	r0, r7
 800df98:	f005 fbda 	bl	8013750 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 800df9c:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
 800dfa0:	465b      	mov	r3, fp
 800dfa2:	fa0f f288 	sxth.w	r2, r8
 800dfa6:	4638      	mov	r0, r7
 800dfa8:	f7fc fd5c 	bl	800aa64 <lv_draw_mask_apply>
 800dfac:	f88d 00e0 	strb.w	r0, [sp, #224]	; 0xe0
            if(dashed) {
 800dfb0:	b19d      	cbz	r5, 800dfda <lv_draw_sw_line+0x2aa>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800dfb2:	b190      	cbz	r0, 800dfda <lv_draw_sw_line+0x2aa>
                    lv_coord_t dash_cnt = dash_start;
 800dfb4:	4631      	mov	r1, r6
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e00a      	b.n	800dfd0 <lv_draw_sw_line+0x2a0>
                        if(dash_cnt <= dsc->dash_width) {
 800dfba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800dfbe:	428a      	cmp	r2, r1
 800dfc0:	db1d      	blt.n	800dffe <lv_draw_sw_line+0x2ce>
                            i += diff;
 800dfc2:	4413      	add	r3, r2
 800dfc4:	1a5b      	subs	r3, r3, r1
 800dfc6:	b21b      	sxth	r3, r3
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800dfc8:	3301      	adds	r3, #1
 800dfca:	3201      	adds	r2, #1
 800dfcc:	b21b      	sxth	r3, r3
 800dfce:	b211      	sxth	r1, r2
 800dfd0:	459b      	cmp	fp, r3
 800dfd2:	dcf2      	bgt.n	800dfba <lv_draw_sw_line+0x28a>
                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dfd4:	2302      	movs	r3, #2
 800dfd6:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800dfda:	ee18 0a10 	vmov	r0, s16
 800dfde:	a934      	add	r1, sp, #208	; 0xd0
 800dfe0:	f7fe fb43 	bl	800c66a <lv_draw_sw_blend>
            blend_area.y1++;
 800dfe4:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	; 0xa6
 800dfe8:	3301      	adds	r3, #1
 800dfea:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            blend_area.y2++;
 800dfee:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
 800dff2:	3301      	adds	r3, #1
 800dff4:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
        for(h = blend_area.y1; h <= y2; h++) {
 800dff8:	f108 0801 	add.w	r8, r8, #1
 800dffc:	e7c2      	b.n	800df84 <lv_draw_sw_line+0x254>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800dffe:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800e002:	4402      	add	r2, r0
 800e004:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
 800e006:	bfba      	itte	lt
 800e008:	f807 a003 	strblt.w	sl, [r7, r3]
 800e00c:	460a      	movlt	r2, r1
                            dash_cnt = 0;
 800e00e:	2200      	movge	r2, #0
 800e010:	e7da      	b.n	800dfc8 <lv_draw_sw_line+0x298>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 800e012:	4546      	cmp	r6, r8
 800e014:	f040 809c 	bne.w	800e150 <lv_draw_sw_line+0x420>
    int32_t w = dsc->width - 1;
 800e018:	3d01      	subs	r5, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800e01a:	f005 0301 	and.w	r3, r5, #1
    blend_area.x1 = point1->x - w_half1;
 800e01e:	b2b6      	uxth	r6, r6
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800e020:	eb03 0365 	add.w	r3, r3, r5, asr #1
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 800e024:	454f      	cmp	r7, r9
    blend_area.x1 = point1->x - w_half1;
 800e026:	eba6 0303 	sub.w	r3, r6, r3
 800e02a:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 800e02e:	463b      	mov	r3, r7
 800e030:	bfa8      	it	ge
 800e032:	464b      	movge	r3, r9
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800e034:	45b9      	cmp	r9, r7
 800e036:	bfb8      	it	lt
 800e038:	46b9      	movlt	r9, r7
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800e03a:	460a      	mov	r2, r1
 800e03c:	a929      	add	r1, sp, #164	; 0xa4
    blend_area.x2 = point1->x + w_half0;
 800e03e:	eb06 0665 	add.w	r6, r6, r5, asr #1
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800e042:	f109 39ff 	add.w	r9, r9, #4294967295
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800e046:	4608      	mov	r0, r1
    blend_area.x2 = point1->x + w_half0;
 800e048:	f8ad 60a8 	strh.w	r6, [sp, #168]	; 0xa8
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 800e04c:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800e050:	f8ad 90aa 	strh.w	r9, [sp, #170]	; 0xaa
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800e054:	f004 fc0f 	bl	8012876 <_lv_area_intersect>
    if(!is_common) return;
 800e058:	2800      	cmp	r0, #0
 800e05a:	f43f af13 	beq.w	800de84 <lv_draw_sw_line+0x154>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800e05e:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 800e062:	b126      	cbz	r6, 800e06e <lv_draw_sw_line+0x33e>
 800e064:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 800e068:	3e00      	subs	r6, #0
 800e06a:	bf18      	it	ne
 800e06c:	2601      	movne	r6, #1
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800e06e:	a829      	add	r0, sp, #164	; 0xa4
 800e070:	f7fc fd72 	bl	800ab58 <lv_draw_mask_is_any>
 800e074:	2800      	cmp	r0, #0
 800e076:	d137      	bne.n	800e0e8 <lv_draw_sw_line+0x3b8>
    else if(dashed) simple_mode = false;
 800e078:	f086 0501 	eor.w	r5, r6, #1
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800e07c:	211c      	movs	r1, #28
 800e07e:	a834      	add	r0, sp, #208	; 0xd0
 800e080:	f005 fb3b 	bl	80136fa <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 800e084:	ab29      	add	r3, sp, #164	; 0xa4
 800e086:	9334      	str	r3, [sp, #208]	; 0xd0
    blend_dsc.color = dsc->color;
 800e088:	7823      	ldrb	r3, [r4, #0]
 800e08a:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    blend_dsc.opa = dsc->opa;
 800e08e:	7a23      	ldrb	r3, [r4, #8]
 800e090:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
    if(simple_mode) {
 800e094:	2d00      	cmp	r5, #0
 800e096:	f47f aef0 	bne.w	800de7a <lv_draw_sw_line+0x14a>
 800e09a:	f8bd 70a8 	ldrh.w	r7, [sp, #168]	; 0xa8
 800e09e:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
        lv_coord_t y2 = blend_area.y2;
 800e0a2:	f9bd a0aa 	ldrsh.w	sl, [sp, #170]	; 0xaa
 800e0a6:	3701      	adds	r7, #1
 800e0a8:	1aff      	subs	r7, r7, r3
 800e0aa:	b23f      	sxth	r7, r7
        blend_area.y2 = blend_area.y1;
 800e0ac:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	; 0xa6
 800e0b0:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800e0b4:	4638      	mov	r0, r7
 800e0b6:	f005 f987 	bl	80133c8 <lv_mem_buf_get>
        blend_dsc.mask_area = &blend_area;
 800e0ba:	ab29      	add	r3, sp, #164	; 0xa4
 800e0bc:	f9bd 80a6 	ldrsh.w	r8, [sp, #166]	; 0xa6
        blend_dsc.mask_buf = mask_buf;
 800e0c0:	9037      	str	r0, [sp, #220]	; 0xdc
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800e0c2:	4681      	mov	r9, r0
        blend_dsc.mask_area = &blend_area;
 800e0c4:	9339      	str	r3, [sp, #228]	; 0xe4
        if(dashed) {
 800e0c6:	b18e      	cbz	r6, 800e0ec <lv_draw_sw_line+0x3bc>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800e0c8:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 800e0cc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e0d0:	442b      	add	r3, r5
 800e0d2:	fb98 f5f3 	sdiv	r5, r8, r3
 800e0d6:	fb03 8515 	mls	r5, r3, r5, r8
 800e0da:	b22d      	sxth	r5, r5
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 800e0dc:	f04f 0b00 	mov.w	fp, #0
        for(h = blend_area.y1; h <= y2; h++) {
 800e0e0:	45d0      	cmp	r8, sl
 800e0e2:	dd05      	ble.n	800e0f0 <lv_draw_sw_line+0x3c0>
        lv_mem_buf_release(mask_buf);
 800e0e4:	4648      	mov	r0, r9
 800e0e6:	e750      	b.n	800df8a <lv_draw_sw_line+0x25a>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800e0e8:	2500      	movs	r5, #0
 800e0ea:	e7c7      	b.n	800e07c <lv_draw_sw_line+0x34c>
        lv_coord_t dash_start = 0;
 800e0ec:	4635      	mov	r5, r6
 800e0ee:	e7f5      	b.n	800e0dc <lv_draw_sw_line+0x3ac>
            lv_memset_ff(mask_buf, draw_area_w);
 800e0f0:	4639      	mov	r1, r7
 800e0f2:	4648      	mov	r0, r9
 800e0f4:	f005 fb2c 	bl	8013750 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 800e0f8:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
 800e0fc:	463b      	mov	r3, r7
 800e0fe:	fa0f f288 	sxth.w	r2, r8
 800e102:	4648      	mov	r0, r9
 800e104:	f7fc fcae 	bl	800aa64 <lv_draw_mask_apply>
 800e108:	f88d 00e0 	strb.w	r0, [sp, #224]	; 0xe0
            if(dashed) {
 800e10c:	b176      	cbz	r6, 800e12c <lv_draw_sw_line+0x3fc>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800e10e:	b158      	cbz	r0, 800e128 <lv_draw_sw_line+0x3f8>
                    if(dash_cnt > dsc->dash_width) {
 800e110:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800e114:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                    if(dash_cnt > dsc->dash_width) {
 800e118:	42aa      	cmp	r2, r5
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800e11a:	4413      	add	r3, r2
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 800e11c:	bfb8      	it	lt
 800e11e:	f88d b0e0 	strblt.w	fp, [sp, #224]	; 0xe0
                        dash_cnt = 0;
 800e122:	429d      	cmp	r5, r3
 800e124:	bfa8      	it	ge
 800e126:	2500      	movge	r5, #0
                dash_cnt ++;
 800e128:	3501      	adds	r5, #1
 800e12a:	b22d      	sxth	r5, r5
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e12c:	ee18 0a10 	vmov	r0, s16
 800e130:	a934      	add	r1, sp, #208	; 0xd0
 800e132:	f7fe fa9a 	bl	800c66a <lv_draw_sw_blend>
            blend_area.y1++;
 800e136:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	; 0xa6
 800e13a:	3301      	adds	r3, #1
 800e13c:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            blend_area.y2++;
 800e140:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
 800e144:	3301      	adds	r3, #1
 800e146:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
        for(h = blend_area.y1; h <= y2; h++) {
 800e14a:	f108 0801 	add.w	r8, r8, #1
 800e14e:	e7c7      	b.n	800e0e0 <lv_draw_sw_line+0x3b0>
{
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 800e150:	454f      	cmp	r7, r9
 800e152:	db05      	blt.n	800e160 <lv_draw_sw_line+0x430>
 800e154:	463b      	mov	r3, r7
 800e156:	464f      	mov	r7, r9
 800e158:	4699      	mov	r9, r3
 800e15a:	4633      	mov	r3, r6
 800e15c:	4646      	mov	r6, r8
 800e15e:	4698      	mov	r8, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 800e160:	eba8 0306 	sub.w	r3, r8, r6
 800e164:	9304      	str	r3, [sp, #16]
    int32_t ydiff = p2.y - p1.y;
 800e166:	eba9 0307 	sub.w	r3, r9, r7
 800e16a:	9305      	str	r3, [sp, #20]
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 800e16c:	9b04      	ldr	r3, [sp, #16]
    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800e16e:	4ac3      	ldr	r2, [pc, #780]	; (800e47c <lv_draw_sw_line+0x74c>)
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 800e170:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 800e174:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
 800e178:	9b05      	ldr	r3, [sp, #20]
 800e17a:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 800e17e:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800e182:	45d3      	cmp	fp, sl
 800e184:	bfcb      	itete	gt
 800e186:	ea4f 134a 	movgt.w	r3, sl, lsl #5
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800e18a:	ea4f 134b 	movle.w	r3, fp, lsl #5
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800e18e:	fbb3 f3fb 	udivgt	r3, r3, fp
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800e192:	fbb3 f3fa 	udivle	r3, r3, sl
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800e196:	5cd3      	ldrb	r3, [r2, r3]
 800e198:	213f      	movs	r1, #63	; 0x3f
 800e19a:	fb15 1503 	smlabb	r5, r5, r3, r1
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800e19e:	f3c5 12cf 	ubfx	r2, r5, #7, #16
 800e1a2:	45b0      	cmp	r8, r6
 800e1a4:	bfd4      	ite	le
 800e1a6:	ebc2 0108 	rsble	r1, r2, r8
 800e1aa:	ebc2 0106 	rsbgt	r1, r2, r6
 800e1ae:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 800e1b2:	45b0      	cmp	r8, r6
 800e1b4:	bfac      	ite	ge
 800e1b6:	eb02 0108 	addge.w	r1, r2, r8
 800e1ba:	1991      	addlt	r1, r2, r6
 800e1bc:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800e1c0:	45b9      	cmp	r9, r7
 800e1c2:	bfd4      	ite	le
 800e1c4:	ebc2 0109 	rsble	r1, r2, r9
 800e1c8:	ebc2 0107 	rsbgt	r1, r2, r7
 800e1cc:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800e1d0:	45b9      	cmp	r9, r7
 800e1d2:	bfac      	ite	ge
 800e1d4:	444a      	addge	r2, r9
 800e1d6:	19d2      	addlt	r2, r2, r7

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800e1d8:	a90a      	add	r1, sp, #40	; 0x28
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800e1da:	11eb      	asrs	r3, r5, #7
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800e1dc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800e1e0:	4608      	mov	r0, r1
 800e1e2:	aa08      	add	r2, sp, #32
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800e1e4:	9306      	str	r3, [sp, #24]
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800e1e6:	f004 fb46 	bl	8012876 <_lv_area_intersect>
    if(is_common == false) return;
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	f43f ae4a 	beq.w	800de84 <lv_draw_sw_line+0x154>
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800e1f0:	9b06      	ldr	r3, [sp, #24]
 800e1f2:	f003 0101 	and.w	r1, r3, #1
 800e1f6:	eb01 2125 	add.w	r1, r1, r5, asr #8
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 800e1fa:	45d3      	cmp	fp, sl
        if(xdiff > 0) {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800e1fc:	b289      	uxth	r1, r1
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800e1fe:	f3c5 250f 	ubfx	r5, r5, #8, #16
    if(flat) {
 800e202:	f340 80e2 	ble.w	800e3ca <lv_draw_sw_line+0x69a>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800e206:	fa11 fb87 	uxtah	fp, r1, r7
 800e20a:	fa11 f189 	uxtah	r1, r1, r9
 800e20e:	b20b      	sxth	r3, r1
 800e210:	9306      	str	r3, [sp, #24]
        if(xdiff > 0) {
 800e212:	9b04      	ldr	r3, [sp, #16]
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800e214:	eba7 0a05 	sub.w	sl, r7, r5
        if(xdiff > 0) {
 800e218:	2b00      	cmp	r3, #0
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800e21a:	eba9 0505 	sub.w	r5, r9, r5
 800e21e:	f04f 0300 	mov.w	r3, #0
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800e222:	fa0f fb8b 	sxth.w	fp, fp
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800e226:	fa0f fa8a 	sxth.w	sl, sl
 800e22a:	b22d      	sxth	r5, r5
 800e22c:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
 800e22e:	f340 80be 	ble.w	800e3ae <lv_draw_sw_line+0x67e>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800e232:	4643      	mov	r3, r8
 800e234:	4652      	mov	r2, sl
 800e236:	9500      	str	r5, [sp, #0]
 800e238:	4631      	mov	r1, r6
 800e23a:	a813      	add	r0, sp, #76	; 0x4c
 800e23c:	f7fc fcb6 	bl	800abac <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800e240:	2301      	movs	r3, #1
 800e242:	9301      	str	r3, [sp, #4]
 800e244:	9b06      	ldr	r3, [sp, #24]
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	465a      	mov	r2, fp
 800e24a:	4643      	mov	r3, r8
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800e24c:	4631      	mov	r1, r6
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800e24e:	a81e      	add	r0, sp, #120	; 0x78
 800e250:	f7fc fcac 	bl	800abac <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800e254:	2100      	movs	r1, #0
 800e256:	a813      	add	r0, sp, #76	; 0x4c
 800e258:	f7fc fbee 	bl	800aa38 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800e25c:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800e25e:	ee08 0a90 	vmov	s17, r0
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800e262:	a81e      	add	r0, sp, #120	; 0x78
 800e264:	f7fc fbe8 	bl	800aa38 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 800e268:	f894 a009 	ldrb.w	sl, [r4, #9]
 800e26c:	f01a 0a10 	ands.w	sl, sl, #16
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800e270:	ee09 0a10 	vmov	s18, r0
    if(!dsc->raw_end) {
 800e274:	f040 80c5 	bne.w	800e402 <lv_draw_sw_line+0x6d2>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800e278:	2203      	movs	r2, #3
 800e27a:	9201      	str	r2, [sp, #4]
 800e27c:	9a04      	ldr	r2, [sp, #16]
 800e27e:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 800e282:	f8bd b010 	ldrh.w	fp, [sp, #16]
 800e286:	fa17 f282 	uxtah	r2, r7, r2
 800e28a:	b212      	sxth	r2, r2
 800e28c:	1b73      	subs	r3, r6, r5
 800e28e:	9200      	str	r2, [sp, #0]
 800e290:	b21b      	sxth	r3, r3
 800e292:	463a      	mov	r2, r7
 800e294:	4631      	mov	r1, r6
 800e296:	a829      	add	r0, sp, #164	; 0xa4
 800e298:	f7fc fc88 	bl	800abac <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800e29c:	44cb      	add	fp, r9
 800e29e:	2202      	movs	r2, #2
 800e2a0:	9201      	str	r2, [sp, #4]
 800e2a2:	eba8 0305 	sub.w	r3, r8, r5
 800e2a6:	fa0f f28b 	sxth.w	r2, fp
 800e2aa:	b21b      	sxth	r3, r3
 800e2ac:	9200      	str	r2, [sp, #0]
 800e2ae:	4641      	mov	r1, r8
 800e2b0:	464a      	mov	r2, r9
 800e2b2:	a834      	add	r0, sp, #208	; 0xd0
 800e2b4:	f7fc fc7a 	bl	800abac <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800e2b8:	4651      	mov	r1, sl
 800e2ba:	a829      	add	r0, sp, #164	; 0xa4
 800e2bc:	f7fc fbbc 	bl	800aa38 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800e2c0:	4651      	mov	r1, sl
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800e2c2:	9004      	str	r0, [sp, #16]
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800e2c4:	a834      	add	r0, sp, #208	; 0xd0
 800e2c6:	f7fc fbb7 	bl	800aa38 <lv_draw_mask_add>
 800e2ca:	4683      	mov	fp, r0
 800e2cc:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 800e2d0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800e2d4:	3501      	adds	r5, #1
 800e2d6:	1aed      	subs	r5, r5, r3
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800e2d8:	f7fa fe28 	bl	8008f2c <_lv_refr_get_disp_refreshing>
 800e2dc:	f004 f848 	bl	8012370 <lv_disp_get_hor_res>
 800e2e0:	4606      	mov	r6, r0
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 800e2e2:	a80a      	add	r0, sp, #40	; 0x28
 800e2e4:	f004 fa99 	bl	801281a <lv_area_get_size>
 800e2e8:	4286      	cmp	r6, r0
 800e2ea:	b22d      	sxth	r5, r5
 800e2ec:	d903      	bls.n	800e2f6 <lv_draw_sw_line+0x5c6>
 800e2ee:	a80a      	add	r0, sp, #40	; 0x28
 800e2f0:	f004 fa93 	bl	801281a <lv_area_get_size>
 800e2f4:	4606      	mov	r6, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	f005 f866 	bl	80133c8 <lv_mem_buf_get>

    lv_coord_t y2 = blend_area.y2;
 800e2fc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800e300:	9305      	str	r3, [sp, #20]
    blend_area.y2 = blend_area.y1;

    uint32_t mask_p = 0;
    lv_memset_ff(mask_buf, mask_buf_size);
 800e302:	4631      	mov	r1, r6
    blend_area.y2 = blend_area.y1;
 800e304:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800e308:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800e30c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800e310:	4607      	mov	r7, r0
    lv_memset_ff(mask_buf, mask_buf_size);
 800e312:	f005 fa1d 	bl	8013750 <lv_memset_ff>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800e316:	211c      	movs	r1, #28
 800e318:	4650      	mov	r0, sl
 800e31a:	f005 f9ee 	bl	80136fa <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
    blend_dsc.color = dsc->color;
 800e31e:	7822      	ldrb	r2, [r4, #0]
 800e320:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    blend_dsc.blend_area = &blend_area;
 800e324:	ab0a      	add	r3, sp, #40	; 0x28
    blend_dsc.opa = dsc->opa;
 800e326:	7a22      	ldrb	r2, [r4, #8]
    blend_dsc.mask_buf = mask_buf;
    blend_dsc.mask_area = &blend_area;

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 800e328:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
    blend_dsc.blend_area = &blend_area;
 800e32c:	930c      	str	r3, [sp, #48]	; 0x30
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
            blend_area.y2 ++;
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e32e:	ee09 aa90 	vmov	s19, sl
    blend_dsc.opa = dsc->opa;
 800e332:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    blend_dsc.mask_buf = mask_buf;
 800e336:	970f      	str	r7, [sp, #60]	; 0x3c
    blend_dsc.mask_area = &blend_area;
 800e338:	9311      	str	r3, [sp, #68]	; 0x44
    uint32_t mask_p = 0;
 800e33a:	f04f 0800 	mov.w	r8, #0
    for(h = blend_area.y1; h <= y2; h++) {
 800e33e:	9b05      	ldr	r3, [sp, #20]
 800e340:	4599      	cmp	r9, r3
 800e342:	dd63      	ble.n	800e40c <lv_draw_sw_line+0x6dc>
            lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 800e344:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800e348:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d00a      	beq.n	800e366 <lv_draw_sw_line+0x636>
        blend_area.y2--;
 800e350:	3b01      	subs	r3, #1
 800e352:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e356:	ee18 0a10 	vmov	r0, s16
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e35a:	2302      	movs	r3, #2
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e35c:	a90c      	add	r1, sp, #48	; 0x30
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e35e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e362:	f7fe f982 	bl	800c66a <lv_draw_sw_blend>
    }

    lv_mem_buf_release(mask_buf);
 800e366:	4638      	mov	r0, r7
 800e368:	f005 f87a 	bl	8013460 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 800e36c:	a813      	add	r0, sp, #76	; 0x4c
 800e36e:	f7fc fbc5 	bl	800aafc <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 800e372:	a81e      	add	r0, sp, #120	; 0x78
 800e374:	f7fc fbc2 	bl	800aafc <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 800e378:	9b04      	ldr	r3, [sp, #16]
 800e37a:	3301      	adds	r3, #1
 800e37c:	d002      	beq.n	800e384 <lv_draw_sw_line+0x654>
 800e37e:	a829      	add	r0, sp, #164	; 0xa4
 800e380:	f7fc fbbc 	bl	800aafc <lv_draw_mask_free_param>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 800e384:	f1bb 3fff 	cmp.w	fp, #4294967295
 800e388:	d002      	beq.n	800e390 <lv_draw_sw_line+0x660>
 800e38a:	a834      	add	r0, sp, #208	; 0xd0
 800e38c:	f7fc fbb6 	bl	800aafc <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_left_id);
 800e390:	ee18 0a90 	vmov	r0, s17
 800e394:	f7fc fb88 	bl	800aaa8 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 800e398:	ee19 0a10 	vmov	r0, s18
 800e39c:	f7fc fb84 	bl	800aaa8 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 800e3a0:	9804      	ldr	r0, [sp, #16]
 800e3a2:	f7fc fb81 	bl	800aaa8 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 800e3a6:	4658      	mov	r0, fp
 800e3a8:	f7fc fb7e 	bl	800aaa8 <lv_draw_mask_remove_id>
 800e3ac:	e56a      	b.n	800de84 <lv_draw_sw_line+0x154>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800e3ae:	9b06      	ldr	r3, [sp, #24]
 800e3b0:	9300      	str	r3, [sp, #0]
 800e3b2:	465a      	mov	r2, fp
 800e3b4:	4643      	mov	r3, r8
 800e3b6:	4631      	mov	r1, r6
 800e3b8:	a813      	add	r0, sp, #76	; 0x4c
 800e3ba:	f7fc fbf7 	bl	800abac <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800e3be:	2301      	movs	r3, #1
 800e3c0:	e9cd 5300 	strd	r5, r3, [sp]
 800e3c4:	4652      	mov	r2, sl
 800e3c6:	4643      	mov	r3, r8
 800e3c8:	e740      	b.n	800e24c <lv_draw_sw_line+0x51c>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 800e3ca:	fa11 f388 	uxtah	r3, r1, r8
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	fa11 f186 	uxtah	r1, r1, r6
 800e3d4:	e9cd 9200 	strd	r9, r2, [sp]
 800e3d8:	b21b      	sxth	r3, r3
 800e3da:	463a      	mov	r2, r7
 800e3dc:	b209      	sxth	r1, r1
 800e3de:	fa1f fa86 	uxth.w	sl, r6
 800e3e2:	fa1f fb88 	uxth.w	fp, r8
 800e3e6:	a813      	add	r0, sp, #76	; 0x4c
 800e3e8:	f7fc fbe0 	bl	800abac <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	ebab 0305 	sub.w	r3, fp, r5
 800e3f2:	ebaa 0105 	sub.w	r1, sl, r5
 800e3f6:	e9cd 9200 	strd	r9, r2, [sp]
 800e3fa:	b21b      	sxth	r3, r3
 800e3fc:	463a      	mov	r2, r7
 800e3fe:	b209      	sxth	r1, r1
 800e400:	e725      	b.n	800e24e <lv_draw_sw_line+0x51e>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 800e402:	f04f 3bff 	mov.w	fp, #4294967295
    int16_t mask_top_id = LV_MASK_ID_INV;
 800e406:	f8cd b010 	str.w	fp, [sp, #16]
 800e40a:	e75f      	b.n	800e2cc <lv_draw_sw_line+0x59c>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 800e40c:	eb07 0a08 	add.w	sl, r7, r8
 800e410:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 800e414:	462b      	mov	r3, r5
 800e416:	fa0f f289 	sxth.w	r2, r9
 800e41a:	4650      	mov	r0, sl
 800e41c:	f7fc fb22 	bl	800aa64 <lv_draw_mask_apply>
 800e420:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800e424:	b918      	cbnz	r0, 800e42e <lv_draw_sw_line+0x6fe>
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 800e426:	4629      	mov	r1, r5
 800e428:	4650      	mov	r0, sl
 800e42a:	f005 f966 	bl	80136fa <lv_memset_00>
        mask_p += draw_area_w;
 800e42e:	44a8      	add	r8, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 800e430:	eb08 0305 	add.w	r3, r8, r5
 800e434:	429e      	cmp	r6, r3
 800e436:	d907      	bls.n	800e448 <lv_draw_sw_line+0x718>
            blend_area.y2 ++;
 800e438:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800e43c:	3301      	adds	r3, #1
 800e43e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    for(h = blend_area.y1; h <= y2; h++) {
 800e442:	f109 0901 	add.w	r9, r9, #1
 800e446:	e77a      	b.n	800e33e <lv_draw_sw_line+0x60e>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e448:	f04f 0302 	mov.w	r3, #2
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e44c:	ee19 1a90 	vmov	r1, s19
 800e450:	ee18 0a10 	vmov	r0, s16
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e454:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e458:	f7fe f907 	bl	800c66a <lv_draw_sw_blend>
            blend_area.y1 = blend_area.y2 + 1;
 800e45c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800e460:	3301      	adds	r3, #1
 800e462:	b21b      	sxth	r3, r3
            lv_memset_ff(mask_buf, mask_buf_size);
 800e464:	4631      	mov	r1, r6
 800e466:	4638      	mov	r0, r7
            blend_area.y1 = blend_area.y2 + 1;
 800e468:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            blend_area.y2 = blend_area.y1;
 800e46c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            mask_p = 0;
 800e470:	f04f 0800 	mov.w	r8, #0
            lv_memset_ff(mask_buf, mask_buf_size);
 800e474:	f005 f96c 	bl	8013750 <lv_memset_ff>
 800e478:	e7e3      	b.n	800e442 <lv_draw_sw_line+0x712>
 800e47a:	bf00      	nop
 800e47c:	0801e40a 	.word	0x0801e40a

0800e480 <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 800e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e484:	ed2d 8b02 	vpush	{d8}
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 800e488:	2b02      	cmp	r3, #2
{
 800e48a:	ee08 1a10 	vmov	s16, r1
 800e48e:	b08d      	sub	sp, #52	; 0x34
 800e490:	4683      	mov	fp, r0
 800e492:	4616      	mov	r6, r2
 800e494:	461f      	mov	r7, r3
    if(point_cnt < 3) return;
 800e496:	d97c      	bls.n	800e592 <lv_draw_sw_polygon+0x112>
    if(points == NULL) return;
 800e498:	2a00      	cmp	r2, #0
 800e49a:	d07a      	beq.n	800e592 <lv_draw_sw_polygon+0x112>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 800e49c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800e4a0:	4640      	mov	r0, r8
 800e4a2:	f004 ff91 	bl	80133c8 <lv_mem_buf_get>
    if(p == NULL) return;
 800e4a6:	4604      	mov	r4, r0
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	d072      	beq.n	800e592 <lv_draw_sw_polygon+0x112>
    uint16_t i;
    uint16_t pcnt = 0;
    p[0] = points[0];
 800e4ac:	6833      	ldr	r3, [r6, #0]
 800e4ae:	6003      	str	r3, [r0, #0]
    uint16_t pcnt = 0;
 800e4b0:	2500      	movs	r5, #0
    for(i = 0; i < point_cnt - 1; i++) {
 800e4b2:	462a      	mov	r2, r5
 800e4b4:	3f01      	subs	r7, #1
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 800e4b6:	0093      	lsls	r3, r2, #2
 800e4b8:	1d19      	adds	r1, r3, #4
 800e4ba:	f936 e022 	ldrsh.w	lr, [r6, r2, lsl #2]
 800e4be:	eb06 0c01 	add.w	ip, r6, r1
 800e4c2:	5e71      	ldrsh	r1, [r6, r1]
 800e4c4:	458e      	cmp	lr, r1
 800e4c6:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 800e4ca:	d105      	bne.n	800e4d8 <lv_draw_sw_polygon+0x58>
 800e4cc:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800e4d0:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 800e4d4:	4288      	cmp	r0, r1
 800e4d6:	d004      	beq.n	800e4e2 <lv_draw_sw_polygon+0x62>
            p[pcnt] = points[i];
 800e4d8:	58f3      	ldr	r3, [r6, r3]
 800e4da:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
            pcnt++;
 800e4de:	3501      	adds	r5, #1
 800e4e0:	b2ad      	uxth	r5, r5
    for(i = 0; i < point_cnt - 1; i++) {
 800e4e2:	3201      	adds	r2, #1
 800e4e4:	b292      	uxth	r2, r2
 800e4e6:	42ba      	cmp	r2, r7
 800e4e8:	dbe5      	blt.n	800e4b6 <lv_draw_sw_polygon+0x36>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 800e4ea:	f1a8 0004 	sub.w	r0, r8, #4
 800e4ee:	f9b6 1000 	ldrsh.w	r1, [r6]
 800e4f2:	5e32      	ldrsh	r2, [r6, r0]
 800e4f4:	4291      	cmp	r1, r2
 800e4f6:	eb06 0300 	add.w	r3, r6, r0
 800e4fa:	d105      	bne.n	800e508 <lv_draw_sw_polygon+0x88>
 800e4fc:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 800e500:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e504:	429a      	cmp	r2, r3
 800e506:	d004      	beq.n	800e512 <lv_draw_sw_polygon+0x92>
        p[pcnt] = points[point_cnt - 1];
 800e508:	5833      	ldr	r3, [r6, r0]
 800e50a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
        pcnt++;
 800e50e:	3501      	adds	r5, #1
 800e510:	b2ad      	uxth	r5, r5
    }

    point_cnt = pcnt;
    if(point_cnt < 3) {
 800e512:	2d02      	cmp	r5, #2
 800e514:	d807      	bhi.n	800e526 <lv_draw_sw_polygon+0xa6>
        lv_mem_buf_release(p);
 800e516:	4620      	mov	r0, r4
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 800e518:	b00d      	add	sp, #52	; 0x34
 800e51a:	ecbd 8b02 	vpop	{d8}
 800e51e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_mem_buf_release(p);
 800e522:	f004 bf9d 	b.w	8013460 <lv_mem_buf_release>
    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 800e526:	4a78      	ldr	r2, [pc, #480]	; (800e708 <lv_draw_sw_polygon+0x288>)
 800e528:	1e6f      	subs	r7, r5, #1
 800e52a:	6810      	ldr	r0, [r2, #0]
 800e52c:	6851      	ldr	r1, [r2, #4]
 800e52e:	b2ba      	uxth	r2, r7
 800e530:	1d27      	adds	r7, r4, #4
 800e532:	ab08      	add	r3, sp, #32
 800e534:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 800e538:	4a74      	ldr	r2, [pc, #464]	; (800e70c <lv_draw_sw_polygon+0x28c>)
 800e53a:	c303      	stmia	r3!, {r0, r1}
 800e53c:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800e540:	4623      	mov	r3, r4
 800e542:	4610      	mov	r0, r2
 800e544:	460e      	mov	r6, r1
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 800e546:	f9b3 e000 	ldrsh.w	lr, [r3]
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 800e54a:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 800e54e:	4576      	cmp	r6, lr
 800e550:	bfa8      	it	ge
 800e552:	4676      	movge	r6, lr
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 800e554:	4561      	cmp	r1, ip
 800e556:	bfa8      	it	ge
 800e558:	4661      	movge	r1, ip
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 800e55a:	4570      	cmp	r0, lr
 800e55c:	bfb8      	it	lt
 800e55e:	4670      	movlt	r0, lr
    for(i = 0; i < point_cnt; i++) {
 800e560:	3304      	adds	r3, #4
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 800e562:	4562      	cmp	r2, ip
 800e564:	bfb8      	it	lt
 800e566:	4662      	movlt	r2, ip
    for(i = 0; i < point_cnt; i++) {
 800e568:	429f      	cmp	r7, r3
 800e56a:	d1ec      	bne.n	800e546 <lv_draw_sw_polygon+0xc6>
 800e56c:	f8ad 6020 	strh.w	r6, [sp, #32]
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 800e570:	ae0a      	add	r6, sp, #40	; 0x28
 800e572:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800e576:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 800e57a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800e57e:	a908      	add	r1, sp, #32
 800e580:	f8db 2008 	ldr.w	r2, [fp, #8]
 800e584:	4630      	mov	r0, r6
 800e586:	f004 f976 	bl	8012876 <_lv_area_intersect>
    if(!is_common) {
 800e58a:	b938      	cbnz	r0, 800e59c <lv_draw_sw_polygon+0x11c>
        lv_mem_buf_release(p);
 800e58c:	4620      	mov	r0, r4
 800e58e:	f004 ff67 	bl	8013460 <lv_mem_buf_release>
}
 800e592:	b00d      	add	sp, #52	; 0x34
 800e594:	ecbd 8b02 	vpop	{d8}
 800e598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t y_min = p[0].y;
 800e59c:	4622      	mov	r2, r4
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800e59e:	f8db 3008 	ldr.w	r3, [fp, #8]
    lv_coord_t y_min = p[0].y;
 800e5a2:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800e5a6:	9307      	str	r3, [sp, #28]
    draw_ctx->clip_area = &clip_area;
 800e5a8:	f8cb 6008 	str.w	r6, [fp, #8]
    lv_coord_t y_min = p[0].y;
 800e5ac:	2301      	movs	r3, #1
    int16_t y_min_i = 0;
 800e5ae:	2600      	movs	r6, #0
        if(p[i].y < y_min) {
 800e5b0:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 800e5b4:	4288      	cmp	r0, r1
            y_min_i = i;
 800e5b6:	bfb8      	it	lt
 800e5b8:	b21e      	sxthlt	r6, r3
    for(i = 1; i < point_cnt; i++) {
 800e5ba:	f103 0301 	add.w	r3, r3, #1
            y_min_i = i;
 800e5be:	bfb8      	it	lt
 800e5c0:	4601      	movlt	r1, r0
    for(i = 1; i < point_cnt; i++) {
 800e5c2:	b298      	uxth	r0, r3
 800e5c4:	4285      	cmp	r5, r0
 800e5c6:	d8f3      	bhi.n	800e5b0 <lv_draw_sw_polygon+0x130>
    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 800e5c8:	202c      	movs	r0, #44	; 0x2c
 800e5ca:	4368      	muls	r0, r5
 800e5cc:	f004 fefc 	bl	80133c8 <lv_mem_buf_get>
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800e5d0:	1e72      	subs	r2, r6, #1
 800e5d2:	bf48      	it	mi
 800e5d4:	1952      	addmi	r2, r2, r5
    i_next_right = y_min_i + 1;
 800e5d6:	1c73      	adds	r3, r6, #1
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 800e5d8:	42ab      	cmp	r3, r5
 800e5da:	bfa8      	it	ge
 800e5dc:	2300      	movge	r3, #0
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800e5de:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800e5e2:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 800e5e6:	4681      	mov	r9, r0
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 800e5e8:	887f      	ldrh	r7, [r7, #2]
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800e5ea:	f834 0026 	ldrh.w	r0, [r4, r6, lsl #2]
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 800e5ee:	f8bc c002 	ldrh.w	ip, [ip, #2]
    int32_t i_prev_left = y_min_i;
 800e5f2:	9603      	str	r6, [sp, #12]
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 800e5f4:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800e5f8:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 800e5fc:	8849      	ldrh	r1, [r1, #2]
    if(dyl * dxr < dyr * dxl) inv = true;
 800e5fe:	9604      	str	r6, [sp, #16]
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 800e600:	ebac 0c07 	sub.w	ip, ip, r7
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 800e604:	1a1b      	subs	r3, r3, r0
    if(dyl * dxr < dyr * dxl) inv = true;
 800e606:	fb1c f303 	smulbb	r3, ip, r3
 800e60a:	9305      	str	r3, [sp, #20]
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800e60c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 800e610:	1bc9      	subs	r1, r1, r7
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800e612:	1a1b      	subs	r3, r3, r0
    if(dyl * dxr < dyr * dxl) inv = true;
 800e614:	fb11 f303 	smulbb	r3, r1, r3
 800e618:	9306      	str	r3, [sp, #24]
 800e61a:	46c8      	mov	r8, r9
 800e61c:	f04f 0a00 	mov.w	sl, #0
        if(!inv) {
 800e620:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800e624:	4293      	cmp	r3, r2
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800e626:	9b03      	ldr	r3, [sp, #12]
        if(!inv) {
 800e628:	db40      	blt.n	800e6ac <lv_draw_sw_polygon+0x22c>
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800e62a:	1e5f      	subs	r7, r3, #1
            i_next_right = i_prev_right + 1;
 800e62c:	9b04      	ldr	r3, [sp, #16]
 800e62e:	f103 0601 	add.w	r6, r3, #1
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800e632:	bf48      	it	mi
 800e634:	197f      	addmi	r7, r7, r5
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 800e636:	42ae      	cmp	r6, r5
 800e638:	bfa8      	it	ge
 800e63a:	2600      	movge	r6, #0
        if(p[i_next_left].y >= p[i_prev_left].y) {
 800e63c:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 800e640:	00bb      	lsls	r3, r7, #2
 800e642:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800e646:	9a03      	ldr	r2, [sp, #12]
 800e648:	0091      	lsls	r1, r2, #2
 800e64a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e64e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800e652:	4290      	cmp	r0, r2
 800e654:	db15      	blt.n	800e682 <lv_draw_sw_polygon+0x202>
            if(p[i_next_left].y != p[i_prev_left].y &&
 800e656:	d011      	beq.n	800e67c <lv_draw_sw_polygon+0x1fc>
               p[i_next_left].x != p[i_prev_left].x) {
 800e658:	f934 c003 	ldrsh.w	ip, [r4, r3]
 800e65c:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_left].y != p[i_prev_left].y &&
 800e65e:	458c      	cmp	ip, r1
 800e660:	d00c      	beq.n	800e67c <lv_draw_sw_polygon+0x1fc>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 800e662:	2301      	movs	r3, #1
 800e664:	e9cd 0300 	strd	r0, r3, [sp]
 800e668:	4640      	mov	r0, r8
 800e66a:	4663      	mov	r3, ip
 800e66c:	f7fc fa9e 	bl	800abac <lv_draw_mask_line_points_init>
                lv_draw_mask_add(mp_next, mp);
 800e670:	4640      	mov	r0, r8
 800e672:	4649      	mov	r1, r9
 800e674:	f7fc f9e0 	bl	800aa38 <lv_draw_mask_add>
                mp_next++;
 800e678:	f108 082c 	add.w	r8, r8, #44	; 0x2c
            mask_cnt++;
 800e67c:	f10a 0a01 	add.w	sl, sl, #1
            i_prev_left = i_next_left;
 800e680:	9703      	str	r7, [sp, #12]
        if(mask_cnt == point_cnt) break;
 800e682:	4555      	cmp	r5, sl
 800e684:	d11b      	bne.n	800e6be <lv_draw_sw_polygon+0x23e>
    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 800e686:	ee18 1a10 	vmov	r1, s16
 800e68a:	aa08      	add	r2, sp, #32
 800e68c:	4658      	mov	r0, fp
 800e68e:	f7fc fddb 	bl	800b248 <lv_draw_rect>
    lv_draw_mask_remove_custom(mp);
 800e692:	4648      	mov	r0, r9
 800e694:	f7fc fa1c 	bl	800aad0 <lv_draw_mask_remove_custom>
    lv_mem_buf_release(mp);
 800e698:	4648      	mov	r0, r9
 800e69a:	f004 fee1 	bl	8013460 <lv_mem_buf_release>
    lv_mem_buf_release(p);
 800e69e:	4620      	mov	r0, r4
 800e6a0:	f004 fede 	bl	8013460 <lv_mem_buf_release>
    draw_ctx->clip_area = clip_area_ori;
 800e6a4:	9b07      	ldr	r3, [sp, #28]
 800e6a6:	f8cb 3008 	str.w	r3, [fp, #8]
 800e6aa:	e772      	b.n	800e592 <lv_draw_sw_polygon+0x112>
            i_next_left = i_prev_left + 1;
 800e6ac:	1c5f      	adds	r7, r3, #1
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 800e6ae:	9b04      	ldr	r3, [sp, #16]
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 800e6b0:	42af      	cmp	r7, r5
 800e6b2:	bfa8      	it	ge
 800e6b4:	2700      	movge	r7, #0
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 800e6b6:	1e5e      	subs	r6, r3, #1
 800e6b8:	bf48      	it	mi
 800e6ba:	1976      	addmi	r6, r6, r5
 800e6bc:	e7be      	b.n	800e63c <lv_draw_sw_polygon+0x1bc>
        if(p[i_next_right].y >= p[i_prev_right].y) {
 800e6be:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 800e6c2:	00b3      	lsls	r3, r6, #2
 800e6c4:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800e6c8:	9a04      	ldr	r2, [sp, #16]
 800e6ca:	0091      	lsls	r1, r2, #2
 800e6cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e6d0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800e6d4:	4290      	cmp	r0, r2
 800e6d6:	db13      	blt.n	800e700 <lv_draw_sw_polygon+0x280>
            if(p[i_next_right].y != p[i_prev_right].y &&
 800e6d8:	d00f      	beq.n	800e6fa <lv_draw_sw_polygon+0x27a>
               p[i_next_right].x != p[i_prev_right].x) {
 800e6da:	5ee3      	ldrsh	r3, [r4, r3]
 800e6dc:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_right].y != p[i_prev_right].y &&
 800e6de:	428b      	cmp	r3, r1
 800e6e0:	d00b      	beq.n	800e6fa <lv_draw_sw_polygon+0x27a>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 800e6e2:	2700      	movs	r7, #0
 800e6e4:	e9cd 0700 	strd	r0, r7, [sp]
 800e6e8:	4640      	mov	r0, r8
 800e6ea:	f7fc fa5f 	bl	800abac <lv_draw_mask_line_points_init>
                lv_draw_mask_add(mp_next, mp);
 800e6ee:	4640      	mov	r0, r8
 800e6f0:	4649      	mov	r1, r9
 800e6f2:	f7fc f9a1 	bl	800aa38 <lv_draw_mask_add>
                mp_next++;
 800e6f6:	f108 082c 	add.w	r8, r8, #44	; 0x2c
            mask_cnt++;
 800e6fa:	f10a 0a01 	add.w	sl, sl, #1
            i_prev_right = i_next_right;
 800e6fe:	9604      	str	r6, [sp, #16]
    } while(mask_cnt < point_cnt);
 800e700:	4555      	cmp	r5, sl
 800e702:	d88d      	bhi.n	800e620 <lv_draw_sw_polygon+0x1a0>
 800e704:	e7bf      	b.n	800e686 <lv_draw_sw_polygon+0x206>
 800e706:	bf00      	nop
 800e708:	0801e1e8 	.word	0x0801e1e8
 800e70c:	ffffe001 	.word	0xffffe001

0800e710 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 800e710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int32_t s_left = sw >> 1;
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
 800e714:	07cb      	lsls	r3, r1, #31
    int32_t s_left = sw >> 1;
 800e716:	ea4f 0a61 	mov.w	sl, r1, asr #1

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800e71a:	ea4f 0540 	mov.w	r5, r0, lsl #1
{
 800e71e:	b087      	sub	sp, #28
 800e720:	bf58      	it	pl
 800e722:	f10a 37ff 	addpl.w	r7, sl, #4294967295
 800e726:	4604      	mov	r4, r0
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800e728:	4628      	mov	r0, r5
{
 800e72a:	460e      	mov	r6, r1
 800e72c:	4690      	mov	r8, r2
 800e72e:	bf54      	ite	pl
 800e730:	b23f      	sxthpl	r7, r7
 800e732:	4657      	movmi	r7, sl
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800e734:	f004 fe48 	bl	80133c8 <lv_mem_buf_get>
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800e738:	1eab      	subs	r3, r5, #2
 800e73a:	9301      	str	r3, [sp, #4]
 800e73c:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800e740:	9302      	str	r3, [sp, #8]
 800e742:	f06f 0301 	mvn.w	r3, #1
 800e746:	fb07 3303 	mla	r3, r7, r3, r3
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800e74a:	4601      	mov	r1, r0
    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 800e74c:	46c1      	mov	r9, r8
    for(y = 0; y < size; y++) {
 800e74e:	f04f 0b00 	mov.w	fp, #0
 800e752:	9303      	str	r3, [sp, #12]
 800e754:	455c      	cmp	r4, fp
 800e756:	dc24      	bgt.n	800e7a2 <shadow_blur_corner+0x92>

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
    uint32_t max_v_div = max_v / sw;
    for(i = 0; i < (uint32_t)size * size; i++) {
 800e758:	fb04 fc04 	mul.w	ip, r4, r4
 800e75c:	4642      	mov	r2, r8
 800e75e:	eb08 0c4c 	add.w	ip, r8, ip, lsl #1
 800e762:	4643      	mov	r3, r8
    uint32_t max_v_div = max_v / sw;
 800e764:	f44f 5e7f 	mov.w	lr, #16320	; 0x3fc0
 800e768:	fbbe fef6 	udiv	lr, lr, r6
    for(i = 0; i < (uint32_t)size * size; i++) {
 800e76c:	4563      	cmp	r3, ip
 800e76e:	d142      	bne.n	800e7f6 <shadow_blur_corner+0xe6>
 800e770:	fb04 f30a 	mul.w	r3, r4, sl
 800e774:	f06f 0001 	mvn.w	r0, #1
 800e778:	4343      	muls	r3, r0
 800e77a:	9305      	str	r3, [sp, #20]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800e77c:	1e63      	subs	r3, r4, #1
 800e77e:	fb05 8303 	mla	r3, r5, r3, r8
 800e782:	9303      	str	r3, [sp, #12]
 800e784:	1c7b      	adds	r3, r7, #1
 800e786:	9301      	str	r3, [sp, #4]
 800e788:	fb07 5305 	mla	r3, r7, r5, r5
 800e78c:	9304      	str	r3, [sp, #16]
    for(x = 0; x < size; x++) {
 800e78e:	f04f 0c00 	mov.w	ip, #0
 800e792:	4564      	cmp	r4, ip
 800e794:	dc3b      	bgt.n	800e80e <shadow_blur_corner+0xfe>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 800e796:	4608      	mov	r0, r1
}
 800e798:	b007      	add	sp, #28
 800e79a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_mem_buf_release(sh_ups_blur_buf);
 800e79e:	f004 be5f 	b.w	8013460 <lv_mem_buf_release>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800e7a2:	9b01      	ldr	r3, [sp, #4]
 800e7a4:	9802      	ldr	r0, [sp, #8]
 800e7a6:	f839 2003 	ldrh.w	r2, [r9, r3]
 800e7aa:	eb00 0c09 	add.w	ip, r0, r9
 800e7ae:	9803      	ldr	r0, [sp, #12]
 800e7b0:	4372      	muls	r2, r6
        for(x = size - 1; x >= 0; x--) {
 800e7b2:	1e63      	subs	r3, r4, #1
 800e7b4:	4448      	add	r0, r9
            sh_ups_blur_buf[x] = v;
 800e7b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800e7ba:	eb03 0e0a 	add.w	lr, r3, sl
 800e7be:	4574      	cmp	r4, lr
 800e7c0:	bfcc      	ite	gt
 800e7c2:	f83c e013 	ldrhgt.w	lr, [ip, r3, lsl #1]
            uint32_t right_val = 0;
 800e7c6:	f04f 0e00 	movle.w	lr, #0
            v -= right_val;
 800e7ca:	eba2 0e0e 	sub.w	lr, r2, lr
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800e7ce:	1bda      	subs	r2, r3, r7
 800e7d0:	2a00      	cmp	r2, #0
 800e7d2:	bfd4      	ite	le
 800e7d4:	f8b9 2000 	ldrhle.w	r2, [r9]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 800e7d8:	f830 2013 	ldrhgt.w	r2, [r0, r3, lsl #1]
        for(x = size - 1; x >= 0; x--) {
 800e7dc:	3b01      	subs	r3, #1
            v += left_val;
 800e7de:	4472      	add	r2, lr
        for(x = size - 1; x >= 0; x--) {
 800e7e0:	d2e9      	bcs.n	800e7b6 <shadow_blur_corner+0xa6>
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800e7e2:	4648      	mov	r0, r9
 800e7e4:	462a      	mov	r2, r5
 800e7e6:	9104      	str	r1, [sp, #16]
        sh_ups_tmp_buf += size;
 800e7e8:	44a9      	add	r9, r5
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800e7ea:	f004 fe67 	bl	80134bc <lv_memcpy>
    for(y = 0; y < size; y++) {
 800e7ee:	f10b 0b01 	add.w	fp, fp, #1
 800e7f2:	9904      	ldr	r1, [sp, #16]
 800e7f4:	e7ae      	b.n	800e754 <shadow_blur_corner+0x44>
        if(sh_ups_buf[i] == 0) continue;
 800e7f6:	8818      	ldrh	r0, [r3, #0]
 800e7f8:	b138      	cbz	r0, 800e80a <shadow_blur_corner+0xfa>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 800e7fa:	f5b0 5f7f 	cmp.w	r0, #16320	; 0x3fc0
 800e7fe:	bf0e      	itee	eq
 800e800:	f8a3 e000 	strheq.w	lr, [r3]
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 800e804:	fb90 f0f6 	sdivne	r0, r0, r6
 800e808:	8018      	strhne	r0, [r3, #0]
    for(i = 0; i < (uint32_t)size * size; i++) {
 800e80a:	3302      	adds	r3, #2
 800e80c:	e7ae      	b.n	800e76c <shadow_blur_corner+0x5c>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 800e80e:	9805      	ldr	r0, [sp, #20]
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800e810:	8813      	ldrh	r3, [r2, #0]
 800e812:	eb02 0900 	add.w	r9, r2, r0
 800e816:	9804      	ldr	r0, [sp, #16]
 800e818:	2700      	movs	r7, #0
 800e81a:	1810      	adds	r0, r2, r0
 800e81c:	9002      	str	r0, [sp, #8]
        sh_ups_tmp_buf = &sh_ups_buf[x];
 800e81e:	4696      	mov	lr, r2
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800e820:	4373      	muls	r3, r6
 800e822:	4690      	mov	r8, r2
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800e824:	4638      	mov	r0, r7
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800e826:	2b00      	cmp	r3, #0
 800e828:	bfac      	ite	ge
 800e82a:	f3c3 1b8f 	ubfxge	fp, r3, #6, #16
 800e82e:	f04f 0b00 	movlt.w	fp, #0
 800e832:	f821 b010 	strh.w	fp, [r1, r0, lsl #1]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800e836:	eba0 0b0a 	sub.w	fp, r0, sl
 800e83a:	f1bb 0f00 	cmp.w	fp, #0
 800e83e:	bfd4      	ite	le
 800e840:	f8b8 b000 	ldrhle.w	fp, [r8]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 800e844:	f839 b007 	ldrhgt.w	fp, [r9, r7]
            v -= top_val;
 800e848:	eba3 0b0b 	sub.w	fp, r3, fp
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800e84c:	9b01      	ldr	r3, [sp, #4]
 800e84e:	4403      	add	r3, r0
 800e850:	429c      	cmp	r4, r3
 800e852:	bfcb      	itete	gt
 800e854:	9b02      	ldrgt	r3, [sp, #8]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800e856:	9b03      	ldrle	r3, [sp, #12]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800e858:	5bdb      	ldrhgt	r3, [r3, r7]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800e85a:	f833 301c 	ldrhle.w	r3, [r3, ip, lsl #1]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800e85e:	3001      	adds	r0, #1
 800e860:	4284      	cmp	r4, r0
            v += bottom_val;
 800e862:	445b      	add	r3, fp
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800e864:	44a8      	add	r8, r5
 800e866:	442f      	add	r7, r5
 800e868:	dcdd      	bgt.n	800e826 <shadow_blur_corner+0x116>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800e86a:	2300      	movs	r3, #0
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800e86c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e870:	f8ae 0000 	strh.w	r0, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800e874:	3301      	adds	r3, #1
 800e876:	429c      	cmp	r4, r3
 800e878:	44ae      	add	lr, r5
 800e87a:	dcf7      	bgt.n	800e86c <shadow_blur_corner+0x15c>
    for(x = 0; x < size; x++) {
 800e87c:	f10c 0c01 	add.w	ip, ip, #1
 800e880:	3202      	adds	r2, #2
 800e882:	e786      	b.n	800e792 <shadow_blur_corner+0x82>

0800e884 <draw_bg_img>:
{
 800e884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(dsc->bg_img_src == NULL) return;
 800e888:	68cb      	ldr	r3, [r1, #12]
{
 800e88a:	b092      	sub	sp, #72	; 0x48
 800e88c:	4606      	mov	r6, r0
 800e88e:	460c      	mov	r4, r1
 800e890:	4615      	mov	r5, r2
    if(dsc->bg_img_src == NULL) return;
 800e892:	2b00      	cmp	r3, #0
 800e894:	d063      	beq.n	800e95e <draw_bg_img+0xda>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 800e896:	7d4b      	ldrb	r3, [r1, #21]
 800e898:	2b02      	cmp	r3, #2
 800e89a:	d960      	bls.n	800e95e <draw_bg_img+0xda>
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 800e89c:	f10d 0818 	add.w	r8, sp, #24
 800e8a0:	6882      	ldr	r2, [r0, #8]
 800e8a2:	4629      	mov	r1, r5
 800e8a4:	4640      	mov	r0, r8
 800e8a6:	f003 ffe6 	bl	8012876 <_lv_area_intersect>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d057      	beq.n	800e95e <draw_bg_img+0xda>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800e8ae:	68b7      	ldr	r7, [r6, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 800e8b0:	68e0      	ldr	r0, [r4, #12]
    draw_ctx->clip_area = &clip_area;
 800e8b2:	f8c6 8008 	str.w	r8, [r6, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 800e8b6:	f7fb f809 	bl	80098cc <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 800e8ba:	2802      	cmp	r0, #2
 800e8bc:	d152      	bne.n	800e964 <draw_bg_img+0xe0>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 800e8be:	f04f 0800 	mov.w	r8, #0
 800e8c2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800e8c6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800e8ca:	e9cd 3801 	strd	r3, r8, [sp, #4]
 800e8ce:	a805      	add	r0, sp, #20
 800e8d0:	4643      	mov	r3, r8
 800e8d2:	f8cd 8000 	str.w	r8, [sp]
 800e8d6:	f006 fcf1 	bl	80152bc <lv_txt_get_size>
 800e8da:	88a9      	ldrh	r1, [r5, #4]
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800e8dc:	882a      	ldrh	r2, [r5, #0]
 800e8de:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 800e8e2:	3101      	adds	r1, #1
 800e8e4:	1a89      	subs	r1, r1, r2
 800e8e6:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 800e8ea:	fa03 f181 	sxtah	r1, r3, r1
 800e8ee:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 800e8f2:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 800e8f6:	eb03 0361 	add.w	r3, r3, r1, asr #1
 800e8fa:	b29b      	uxth	r3, r3
        a.x2 = a.x1 + size.x - 1;
 800e8fc:	3801      	subs	r0, #1
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800e8fe:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.x2 = a.x1 + size.x - 1;
 800e902:	4403      	add	r3, r0
 800e904:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e908:	88eb      	ldrh	r3, [r5, #6]
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800e90a:	8869      	ldrh	r1, [r5, #2]
 800e90c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800e910:	3301      	adds	r3, #1
 800e912:	1a5b      	subs	r3, r3, r1
 800e914:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800e918:	fa02 f383 	sxtah	r3, r2, r3
 800e91c:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 800e920:	eba1 0262 	sub.w	r2, r1, r2, asr #1
 800e924:	eb02 0263 	add.w	r2, r2, r3, asr #1
 800e928:	b292      	uxth	r2, r2
        a.y2 = a.y1 + size.y - 1;
 800e92a:	3801      	subs	r0, #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800e92c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
        a.y2 = a.y1 + size.y - 1;
 800e930:	4402      	add	r2, r0
        lv_draw_label_dsc_init(&label_draw_dsc);
 800e932:	a80a      	add	r0, sp, #40	; 0x28
        a.y2 = a.y1 + size.y - 1;
 800e934:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
        lv_draw_label_dsc_init(&label_draw_dsc);
 800e938:	f7fb f92e 	bl	8009b98 <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800e93c:	6923      	ldr	r3, [r4, #16]
 800e93e:	930a      	str	r3, [sp, #40]	; 0x28
        label_draw_dsc.color = dsc->bg_img_recolor;
 800e940:	7d23      	ldrb	r3, [r4, #20]
 800e942:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        label_draw_dsc.opa = dsc->bg_img_opa;
 800e946:	7d63      	ldrb	r3, [r4, #21]
 800e948:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 800e94c:	f8cd 8000 	str.w	r8, [sp]
 800e950:	68e3      	ldr	r3, [r4, #12]
 800e952:	aa08      	add	r2, sp, #32
 800e954:	a90a      	add	r1, sp, #40	; 0x28
 800e956:	4630      	mov	r0, r6
 800e958:	f7fb f93c 	bl	8009bd4 <lv_draw_label>
    draw_ctx->clip_area = clip_area_ori;
 800e95c:	60b7      	str	r7, [r6, #8]
}
 800e95e:	b012      	add	sp, #72	; 0x48
 800e960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 800e964:	68e0      	ldr	r0, [r4, #12]
 800e966:	a905      	add	r1, sp, #20
 800e968:	f7fd f800 	bl	800b96c <lv_img_decoder_get_info>
        if(res == LV_RES_OK) {
 800e96c:	2801      	cmp	r0, #1
 800e96e:	d1f5      	bne.n	800e95c <draw_bg_img+0xd8>
            lv_draw_img_dsc_init(&img_dsc);
 800e970:	a80a      	add	r0, sp, #40	; 0x28
 800e972:	f7fa ff79 	bl	8009868 <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 800e976:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e97a:	78a2      	ldrb	r2, [r4, #2]
 800e97c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800e980:	f362 0303 	bfi	r3, r2, #0, #4
 800e984:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
            img_dsc.recolor = dsc->bg_img_recolor;
 800e988:	7d23      	ldrb	r3, [r4, #20]
 800e98a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 800e98e:	7da3      	ldrb	r3, [r4, #22]
 800e990:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
            img_dsc.opa = dsc->bg_img_opa;
 800e994:	7d63      	ldrb	r3, [r4, #21]
 800e996:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
            if(dsc->bg_img_tiled == false) {
 800e99a:	7de3      	ldrb	r3, [r4, #23]
 800e99c:	bbab      	cbnz	r3, 800ea0a <draw_bg_img+0x186>
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800e99e:	9905      	ldr	r1, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e9a0:	88ab      	ldrh	r3, [r5, #4]
 800e9a2:	882a      	ldrh	r2, [r5, #0]
 800e9a4:	f3c1 2e8a 	ubfx	lr, r1, #10, #11
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	f3c1 21c9 	ubfx	r1, r1, #11, #10
 800e9ae:	1a9b      	subs	r3, r3, r2
 800e9b0:	1a51      	subs	r1, r2, r1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800e9b2:	886a      	ldrh	r2, [r5, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e9b4:	88ed      	ldrh	r5, [r5, #6]
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800e9b6:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
 800e9ba:	fa0c f383 	sxtah	r3, ip, r3
 800e9be:	3501      	adds	r5, #1
 800e9c0:	1aad      	subs	r5, r5, r2
 800e9c2:	eb01 0363 	add.w	r3, r1, r3, asr #1
 800e9c6:	b299      	uxth	r1, r3
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800e9c8:	f3c5 33c0 	ubfx	r3, r5, #15, #1
 800e9cc:	fa03 f585 	sxtah	r5, r3, r5
 800e9d0:	f3c0 1389 	ubfx	r3, r0, #6, #10
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	f3c0 1c4a 	ubfx	ip, r0, #5, #11
 800e9da:	eb03 0365 	add.w	r3, r3, r5, asr #1
 800e9de:	b29b      	uxth	r3, r3
                area.x2 = area.x1 + header.w - 1;
 800e9e0:	f10e 3eff 	add.w	lr, lr, #4294967295
                area.y2 = area.y1 + header.h - 1;
 800e9e4:	f10c 3cff 	add.w	ip, ip, #4294967295
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800e9e8:	f8ad 1020 	strh.w	r1, [sp, #32]
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800e9ec:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
                area.x2 = area.x1 + header.w - 1;
 800e9f0:	4471      	add	r1, lr
                area.y2 = area.y1 + header.h - 1;
 800e9f2:	4463      	add	r3, ip
                area.x2 = area.x1 + header.w - 1;
 800e9f4:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
                area.y2 = area.y1 + header.h - 1;
 800e9f8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 800e9fc:	aa08      	add	r2, sp, #32
 800e9fe:	68e3      	ldr	r3, [r4, #12]
 800ea00:	a90a      	add	r1, sp, #40	; 0x28
 800ea02:	4630      	mov	r0, r6
 800ea04:	f7fa ff7e 	bl	8009904 <lv_draw_img>
 800ea08:	e7a8      	b.n	800e95c <draw_bg_img+0xd8>
                area.y1 = coords->y1;
 800ea0a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800ea0e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
                area.y2 = area.y1 + header.h - 1;
 800ea12:	f3c0 104a 	ubfx	r0, r0, #5, #11
 800ea16:	3801      	subs	r0, #1
 800ea18:	4418      	add	r0, r3
 800ea1a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800ea1e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 800ea22:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	dc98      	bgt.n	800e95c <draw_bg_img+0xd8>
                    area.x2 = area.x1 + header.w - 1;
 800ea2a:	9b05      	ldr	r3, [sp, #20]
                    area.x1 = coords->x1;
 800ea2c:	f9b5 2000 	ldrsh.w	r2, [r5]
 800ea30:	f8ad 2020 	strh.w	r2, [sp, #32]
                    area.x2 = area.x1 + header.w - 1;
 800ea34:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800ea38:	3b01      	subs	r3, #1
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800ea3a:	4413      	add	r3, r2
 800ea3c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800ea40:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800ea44:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	dd0e      	ble.n	800ea6a <draw_bg_img+0x1e6>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800ea4c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800ea50:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800ea54:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800ea58:	441a      	add	r2, r3
 800ea5a:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 800ea5e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800ea62:	4413      	add	r3, r2
 800ea64:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800ea68:	e7d9      	b.n	800ea1e <draw_bg_img+0x19a>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 800ea6a:	68e3      	ldr	r3, [r4, #12]
 800ea6c:	aa08      	add	r2, sp, #32
 800ea6e:	a90a      	add	r1, sp, #40	; 0x28
 800ea70:	4630      	mov	r0, r6
 800ea72:	f7fa ff47 	bl	8009904 <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800ea76:	9b05      	ldr	r3, [sp, #20]
 800ea78:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800ea7c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800ea80:	441a      	add	r2, r3
 800ea82:	f8ad 2020 	strh.w	r2, [sp, #32]
 800ea86:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ea8a:	e7d6      	b.n	800ea3a <draw_bg_img+0x1b6>

0800ea8c <draw_bg>:
{
 800ea8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800ea90:	78cb      	ldrb	r3, [r1, #3]
 800ea92:	2b02      	cmp	r3, #2
{
 800ea94:	b09b      	sub	sp, #108	; 0x6c
 800ea96:	4680      	mov	r8, r0
 800ea98:	460c      	mov	r4, r1
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800ea9a:	d961      	bls.n	800eb60 <draw_bg+0xd4>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 800ea9c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
    dest->x1 = src->x1;
 800eaa0:	f9b2 5000 	ldrsh.w	r5, [r2]
    dest->y1 = src->y1;
 800eaa4:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
    dest->x2 = src->x2;
 800eaa8:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
    dest->y2 = src->y2;
 800eaac:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    dest->x1 = src->x1;
 800eab0:	f8ad 5014 	strh.w	r5, [sp, #20]
 800eab4:	2b01      	cmp	r3, #1
    dest->y1 = src->y1;
 800eab6:	f8ad 0016 	strh.w	r0, [sp, #22]
    dest->x2 = src->x2;
 800eaba:	f8ad 1018 	strh.w	r1, [sp, #24]
    dest->y2 = src->y2;
 800eabe:	f8ad 201a 	strh.w	r2, [sp, #26]
 800eac2:	dd1a      	ble.n	800eafa <draw_bg+0x6e>
 800eac4:	7f23      	ldrb	r3, [r4, #28]
 800eac6:	2bfc      	cmp	r3, #252	; 0xfc
 800eac8:	d917      	bls.n	800eafa <draw_bg+0x6e>
 800eaca:	f9b4 3000 	ldrsh.w	r3, [r4]
 800eace:	b1a3      	cbz	r3, 800eafa <draw_bg+0x6e>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800ead0:	7f63      	ldrb	r3, [r4, #29]
 800ead2:	f3c3 06c0 	ubfx	r6, r3, #3, #1
 800ead6:	4435      	add	r5, r6
 800ead8:	f8ad 5014 	strh.w	r5, [sp, #20]
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800eadc:	f3c3 0580 	ubfx	r5, r3, #2, #1
 800eae0:	4428      	add	r0, r5
 800eae2:	f8ad 0016 	strh.w	r0, [sp, #22]
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800eae6:	f3c3 1000 	ubfx	r0, r3, #4, #1
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800eaea:	f3c3 0340 	ubfx	r3, r3, #1, #1
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800eaee:	1a09      	subs	r1, r1, r0
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800eaf0:	1ad3      	subs	r3, r2, r3
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800eaf2:	f8ad 1018 	strh.w	r1, [sp, #24]
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800eaf6:	f8ad 301a 	strh.w	r3, [sp, #26]
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 800eafa:	ad05      	add	r5, sp, #20
 800eafc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800eb00:	4629      	mov	r1, r5
 800eb02:	a807      	add	r0, sp, #28
 800eb04:	f003 feb7 	bl	8012876 <_lv_area_intersect>
 800eb08:	b350      	cbz	r0, 800eb60 <draw_bg+0xd4>
    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 800eb0a:	7aa3      	ldrb	r3, [r4, #10]
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 800eb0c:	f013 0307 	ands.w	r3, r3, #7
 800eb10:	9301      	str	r3, [sp, #4]
 800eb12:	bf0c      	ite	eq
 800eb14:	7926      	ldrbeq	r6, [r4, #4]
 800eb16:	7966      	ldrbne	r6, [r4, #5]
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 800eb18:	79e3      	ldrb	r3, [r4, #7]
 800eb1a:	9a01      	ldr	r2, [sp, #4]
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 800eb1c:	4628      	mov	r0, r5
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 800eb1e:	42b3      	cmp	r3, r6
 800eb20:	bf08      	it	eq
 800eb22:	2200      	moveq	r2, #0
 800eb24:	9201      	str	r2, [sp, #4]
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 800eb26:	f7fc f817 	bl	800ab58 <lv_draw_mask_is_any>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 800eb2a:	221c      	movs	r2, #28
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 800eb2c:	4683      	mov	fp, r0
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 800eb2e:	2100      	movs	r1, #0
 800eb30:	a813      	add	r0, sp, #76	; 0x4c
 800eb32:	f00f fa73 	bl	801e01c <memset>
    blend_dsc.blend_mode = dsc->blend_mode;
 800eb36:	78a3      	ldrb	r3, [r4, #2]
 800eb38:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
    blend_dsc.color = bg_color;
 800eb3c:	78e2      	ldrb	r2, [r4, #3]
 800eb3e:	f9b4 3000 	ldrsh.w	r3, [r4]
 800eb42:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800eb46:	f1bb 0f00 	cmp.w	fp, #0
 800eb4a:	d10c      	bne.n	800eb66 <draw_bg+0xda>
 800eb4c:	b95b      	cbnz	r3, 800eb66 <draw_bg+0xda>
 800eb4e:	9901      	ldr	r1, [sp, #4]
 800eb50:	b949      	cbnz	r1, 800eb66 <draw_bg+0xda>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800eb52:	a913      	add	r1, sp, #76	; 0x4c
 800eb54:	4640      	mov	r0, r8
        blend_dsc.blend_area = &bg_coords;
 800eb56:	9513      	str	r5, [sp, #76]	; 0x4c
        blend_dsc.opa = dsc->bg_opa;
 800eb58:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800eb5c:	f7fd fd85 	bl	800c66a <lv_draw_sw_blend>
}
 800eb60:	b01b      	add	sp, #108	; 0x6c
 800eb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 800eb66:	2afd      	cmp	r2, #253	; 0xfd
 800eb68:	bf28      	it	cs
 800eb6a:	22ff      	movcs	r2, #255	; 0xff
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eb6c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 800eb70:	9202      	str	r2, [sp, #8]
 800eb72:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eb76:	f8bd a01a 	ldrh.w	sl, [sp, #26]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eb7a:	f8bd 5020 	ldrh.w	r5, [sp, #32]
 800eb7e:	f109 0901 	add.w	r9, r9, #1
 800eb82:	eba9 0902 	sub.w	r9, r9, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eb86:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800eb8a:	f10a 0a01 	add.w	sl, sl, #1
 800eb8e:	ebaa 0a02 	sub.w	sl, sl, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eb92:	fa0f f989 	sxth.w	r9, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eb96:	fa0f fa8a 	sxth.w	sl, sl
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 800eb9a:	45ca      	cmp	sl, r9
 800eb9c:	4657      	mov	r7, sl
 800eb9e:	bfa8      	it	ge
 800eba0:	464f      	movge	r7, r9
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 800eba2:	107f      	asrs	r7, r7, #1
 800eba4:	429f      	cmp	r7, r3
 800eba6:	bfa8      	it	ge
 800eba8:	461f      	movge	r7, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ebaa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800ebae:	3501      	adds	r5, #1
 800ebb0:	1aed      	subs	r5, r5, r3
    if(rout > 0 || mask_any) {
 800ebb2:	2f00      	cmp	r7, #0
 800ebb4:	b22d      	sxth	r5, r5
 800ebb6:	dc02      	bgt.n	800ebbe <draw_bg+0x132>
 800ebb8:	f1bb 0f00 	cmp.w	fp, #0
 800ebbc:	d04f      	beq.n	800ec5e <draw_bg+0x1d2>
        mask_buf = lv_mem_buf_get(clipped_w);
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	f004 fc02 	bl	80133c8 <lv_mem_buf_get>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	463a      	mov	r2, r7
 800ebc8:	a905      	add	r1, sp, #20
        mask_buf = lv_mem_buf_get(clipped_w);
 800ebca:	4606      	mov	r6, r0
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 800ebcc:	a80d      	add	r0, sp, #52	; 0x34
 800ebce:	f7fc f8e3 	bl	800ad98 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	a80d      	add	r0, sp, #52	; 0x34
 800ebd6:	f7fb ff2f 	bl	800aa38 <lv_draw_mask_add>
 800ebda:	9003      	str	r0, [sp, #12]
    blend_area.x1 = clipped_coords.x1;
 800ebdc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800ebe0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    blend_area.x2 = clipped_coords.x2;
 800ebe4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ebe8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    blend_dsc.blend_area = &blend_area;
 800ebec:	ab09      	add	r3, sp, #36	; 0x24
 800ebee:	9313      	str	r3, [sp, #76]	; 0x4c
    blend_dsc.mask_area = &blend_area;
 800ebf0:	9318      	str	r3, [sp, #96]	; 0x60
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 800ebf2:	4649      	mov	r1, r9
    blend_dsc.opa = LV_OPA_COVER;
 800ebf4:	23ff      	movs	r3, #255	; 0xff
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 800ebf6:	4652      	mov	r2, sl
 800ebf8:	1d60      	adds	r0, r4, #5
    blend_dsc.mask_buf = mask_buf;
 800ebfa:	9616      	str	r6, [sp, #88]	; 0x58
    blend_dsc.opa = LV_OPA_COVER;
 800ebfc:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 800ec00:	f7fe faaa 	bl	800d158 <lv_gradient_get>
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 800ec04:	4681      	mov	r9, r0
 800ec06:	b150      	cbz	r0, 800ec1e <draw_bg+0x192>
 800ec08:	9b01      	ldr	r3, [sp, #4]
 800ec0a:	2b02      	cmp	r3, #2
 800ec0c:	d107      	bne.n	800ec1e <draw_bg+0x192>
        blend_dsc.src_buf = grad->map + clipped_coords.x1 - bg_coords.x1;
 800ec0e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800ec12:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800ec16:	1a9a      	subs	r2, r3, r2
 800ec18:	6883      	ldr	r3, [r0, #8]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	9314      	str	r3, [sp, #80]	; 0x50
    if(mask_any) {
 800ec1e:	f1bb 0f00 	cmp.w	fp, #0
 800ec22:	f000 809e 	beq.w	800ed62 <draw_bg+0x2d6>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 800ec26:	f9bd 401e 	ldrsh.w	r4, [sp, #30]
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ec2a:	f04f 0a02 	mov.w	sl, #2
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 800ec2e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800ec32:	42a3      	cmp	r3, r4
 800ec34:	da18      	bge.n	800ec68 <draw_bg+0x1dc>
    if(mask_buf) lv_mem_buf_release(mask_buf);
 800ec36:	b116      	cbz	r6, 800ec3e <draw_bg+0x1b2>
 800ec38:	4630      	mov	r0, r6
 800ec3a:	f004 fc11 	bl	8013460 <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 800ec3e:	9b03      	ldr	r3, [sp, #12]
 800ec40:	1c5a      	adds	r2, r3, #1
 800ec42:	d005      	beq.n	800ec50 <draw_bg+0x1c4>
        lv_draw_mask_remove_id(mask_rout_id);
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fb ff2f 	bl	800aaa8 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 800ec4a:	a80d      	add	r0, sp, #52	; 0x34
 800ec4c:	f7fb ff56 	bl	800aafc <lv_draw_mask_free_param>
    if(grad) {
 800ec50:	f1b9 0f00 	cmp.w	r9, #0
 800ec54:	d084      	beq.n	800eb60 <draw_bg+0xd4>
        lv_gradient_cleanup(grad);
 800ec56:	4648      	mov	r0, r9
 800ec58:	f7fe fb34 	bl	800d2c4 <lv_gradient_cleanup>
 800ec5c:	e780      	b.n	800eb60 <draw_bg+0xd4>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800ec5e:	f04f 33ff 	mov.w	r3, #4294967295
    lv_opa_t * mask_buf = NULL;
 800ec62:	465e      	mov	r6, fp
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800ec64:	9303      	str	r3, [sp, #12]
 800ec66:	e7b9      	b.n	800ebdc <draw_bg+0x150>
            blend_area.y1 = h;
 800ec68:	b227      	sxth	r7, r4
            lv_memset(mask_buf, opa, clipped_w);
 800ec6a:	9902      	ldr	r1, [sp, #8]
            blend_area.y1 = h;
 800ec6c:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
            lv_memset(mask_buf, opa, clipped_w);
 800ec70:	462a      	mov	r2, r5
 800ec72:	4630      	mov	r0, r6
            blend_area.y2 = h;
 800ec74:	f8ad 702a 	strh.w	r7, [sp, #42]	; 0x2a
            lv_memset(mask_buf, opa, clipped_w);
 800ec78:	f004 fd11 	bl	801369e <lv_memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 800ec7c:	462b      	mov	r3, r5
 800ec7e:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 800ec82:	463a      	mov	r2, r7
 800ec84:	4630      	mov	r0, r6
 800ec86:	f7fb feed 	bl	800aa64 <lv_draw_mask_apply>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 800ec8a:	9b01      	ldr	r3, [sp, #4]
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ec8c:	2801      	cmp	r0, #1
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 800ec8e:	bf14      	ite	ne
 800ec90:	f88d 005c 	strbne.w	r0, [sp, #92]	; 0x5c
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ec94:	f88d a05c 	strbeq.w	sl, [sp, #92]	; 0x5c
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d107      	bne.n	800ecac <draw_bg+0x220>
 800ec9c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800eca0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800eca4:	1ae3      	subs	r3, r4, r3
 800eca6:	5cd3      	ldrb	r3, [r2, r3]
 800eca8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ecac:	a913      	add	r1, sp, #76	; 0x4c
 800ecae:	4640      	mov	r0, r8
 800ecb0:	f7fd fcdb 	bl	800c66a <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 800ecb4:	3401      	adds	r4, #1
 800ecb6:	e7ba      	b.n	800ec2e <draw_bg+0x1a2>
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 800ecb8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
        lv_coord_t top_y = bg_coords.y1 + h;
 800ecbc:	fa14 f48b 	uxtah	r4, r4, fp
 800ecc0:	b224      	sxth	r4, r4
        lv_coord_t bottom_y = bg_coords.y2 - h;
 800ecc2:	ebaa 0a0b 	sub.w	sl, sl, fp
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 800ecc6:	42a3      	cmp	r3, r4
        lv_coord_t bottom_y = bg_coords.y2 - h;
 800ecc8:	fa0f fa8a 	sxth.w	sl, sl
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 800eccc:	dd03      	ble.n	800ecd6 <draw_bg+0x24a>
 800ecce:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800ecd2:	4553      	cmp	r3, sl
 800ecd4:	db43      	blt.n	800ed5e <draw_bg+0x2d2>
        lv_memset(mask_buf, opa, clipped_w);
 800ecd6:	9902      	ldr	r1, [sp, #8]
 800ecd8:	462a      	mov	r2, r5
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f004 fcdf 	bl	801369e <lv_memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 800ece0:	462b      	mov	r3, r5
 800ece2:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 800ece6:	4622      	mov	r2, r4
 800ece8:	4630      	mov	r0, r6
 800ecea:	f7fb febb 	bl	800aa64 <lv_draw_mask_apply>
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ecee:	2801      	cmp	r0, #1
 800ecf0:	bf04      	itt	eq
 800ecf2:	2302      	moveq	r3, #2
 800ecf4:	f88d 305c 	strbeq.w	r3, [sp, #92]	; 0x5c
        if(top_y >= clipped_coords.y1) {
 800ecf8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 800ecfc:	bf18      	it	ne
 800ecfe:	f88d 005c 	strbne.w	r0, [sp, #92]	; 0x5c
        if(top_y >= clipped_coords.y1) {
 800ed02:	42a3      	cmp	r3, r4
 800ed04:	dc12      	bgt.n	800ed2c <draw_bg+0x2a0>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 800ed06:	9b01      	ldr	r3, [sp, #4]
            blend_area.y1 = top_y;
 800ed08:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 800ed0c:	2b01      	cmp	r3, #1
            blend_area.y2 = top_y;
 800ed0e:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 800ed12:	d107      	bne.n	800ed24 <draw_bg+0x298>
 800ed14:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800ed18:	1ae4      	subs	r4, r4, r3
 800ed1a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ed1e:	5d1b      	ldrb	r3, [r3, r4]
 800ed20:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ed24:	a913      	add	r1, sp, #76	; 0x4c
 800ed26:	4640      	mov	r0, r8
 800ed28:	f7fd fc9f 	bl	800c66a <lv_draw_sw_blend>
        if(bottom_y <= clipped_coords.y2) {
 800ed2c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800ed30:	4553      	cmp	r3, sl
 800ed32:	db14      	blt.n	800ed5e <draw_bg+0x2d2>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 800ed34:	9b01      	ldr	r3, [sp, #4]
            blend_area.y1 = bottom_y;
 800ed36:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 800ed3a:	2b01      	cmp	r3, #1
            blend_area.y2 = bottom_y;
 800ed3c:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 800ed40:	d109      	bne.n	800ed56 <draw_bg+0x2ca>
 800ed42:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800ed46:	ebaa 0a03 	sub.w	sl, sl, r3
 800ed4a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ed4e:	f813 300a 	ldrb.w	r3, [r3, sl]
 800ed52:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ed56:	a913      	add	r1, sp, #76	; 0x4c
 800ed58:	4640      	mov	r0, r8
 800ed5a:	f7fd fc86 	bl	800c66a <lv_draw_sw_blend>
    for(h = 0; h < rout; h++) {
 800ed5e:	f10b 0b01 	add.w	fp, fp, #1
 800ed62:	45bb      	cmp	fp, r7
        lv_coord_t top_y = bg_coords.y1 + h;
 800ed64:	f8bd 4016 	ldrh.w	r4, [sp, #22]
        lv_coord_t bottom_y = bg_coords.y2 - h;
 800ed68:	f8bd a01a 	ldrh.w	sl, [sp, #26]
    for(h = 0; h < rout; h++) {
 800ed6c:	dba4      	blt.n	800ecb8 <draw_bg+0x22c>
    center_coords.x1 = bg_coords.x1;
 800ed6e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ed72:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    center_coords.y1 = bg_coords.y1 + rout;
 800ed76:	fa1f fb87 	uxth.w	fp, r7
    center_coords.x2 = bg_coords.x2;
 800ed7a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800ed7e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    center_coords.y1 = bg_coords.y1 + rout;
 800ed82:	fa14 f487 	uxtah	r4, r4, r7
    center_coords.y2 = bg_coords.y2 - rout;
 800ed86:	ebaa 0a0b 	sub.w	sl, sl, fp
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 800ed8a:	a80b      	add	r0, sp, #44	; 0x2c
    center_coords.y1 = bg_coords.y1 + rout;
 800ed8c:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    center_coords.y2 = bg_coords.y2 - rout;
 800ed90:	f8ad a032 	strh.w	sl, [sp, #50]	; 0x32
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 800ed94:	f7fb fee0 	bl	800ab58 <lv_draw_mask_is_any>
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 800ed98:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800ed9c:	4604      	mov	r4, r0
 800ed9e:	b9a0      	cbnz	r0, 800edca <draw_bg+0x33e>
 800eda0:	9a01      	ldr	r2, [sp, #4]
 800eda2:	b992      	cbnz	r2, 800edca <draw_bg+0x33e>
        blend_area.y1 = bg_coords.y1 + rout;
 800eda4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800eda8:	445a      	add	r2, fp
        blend_area.y2 = bg_coords.y2 - rout;
 800edaa:	eba3 0b0b 	sub.w	fp, r3, fp
        blend_dsc.opa = opa;
 800edae:	9b02      	ldr	r3, [sp, #8]
 800edb0:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800edb4:	a913      	add	r1, sp, #76	; 0x4c
        blend_dsc.mask_buf = NULL;
 800edb6:	9b01      	ldr	r3, [sp, #4]
        blend_area.y1 = bg_coords.y1 + rout;
 800edb8:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800edbc:	4640      	mov	r0, r8
        blend_area.y2 = bg_coords.y2 - rout;
 800edbe:	f8ad b02a 	strh.w	fp, [sp, #42]	; 0x2a
        blend_dsc.mask_buf = NULL;
 800edc2:	9316      	str	r3, [sp, #88]	; 0x58
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800edc4:	f7fd fc51 	bl	800c66a <lv_draw_sw_blend>
 800edc8:	e735      	b.n	800ec36 <draw_bg+0x1aa>
        blend_dsc.opa = opa;
 800edca:	9a02      	ldr	r2, [sp, #8]
 800edcc:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
        int32_t h_end = bg_coords.y2 - rout;
 800edd0:	eba3 0b07 	sub.w	fp, r3, r7
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 800edd4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800edd8:	2201      	movs	r2, #1
 800edda:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 800edde:	441f      	add	r7, r3
 800ede0:	455f      	cmp	r7, fp
 800ede2:	f73f af28 	bgt.w	800ec36 <draw_bg+0x1aa>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 800ede6:	fa0f fa87 	sxth.w	sl, r7
            if(mask_any_center) {
 800edea:	b16c      	cbz	r4, 800ee08 <draw_bg+0x37c>
                lv_memset(mask_buf, opa, clipped_w);
 800edec:	9902      	ldr	r1, [sp, #8]
 800edee:	462a      	mov	r2, r5
 800edf0:	4630      	mov	r0, r6
 800edf2:	f004 fc54 	bl	801369e <lv_memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 800edf6:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 800edfa:	462b      	mov	r3, r5
 800edfc:	4652      	mov	r2, sl
 800edfe:	4630      	mov	r0, r6
 800ee00:	f7fb fe30 	bl	800aa64 <lv_draw_mask_apply>
 800ee04:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 800ee08:	9b01      	ldr	r3, [sp, #4]
            blend_area.y1 = h;
 800ee0a:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 800ee0e:	2b01      	cmp	r3, #1
            blend_area.y2 = h;
 800ee10:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 800ee14:	d107      	bne.n	800ee26 <draw_bg+0x39a>
 800ee16:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800ee1a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800ee1e:	1afb      	subs	r3, r7, r3
 800ee20:	5cd3      	ldrb	r3, [r2, r3]
 800ee22:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ee26:	a913      	add	r1, sp, #76	; 0x4c
 800ee28:	4640      	mov	r0, r8
 800ee2a:	f7fd fc1e 	bl	800c66a <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 800ee2e:	3701      	adds	r7, #1
 800ee30:	e7d6      	b.n	800ede0 <draw_bg+0x354>

0800ee32 <lv_draw_sw_bg>:
{
 800ee32:	b570      	push	{r4, r5, r6, lr}
 800ee34:	4604      	mov	r4, r0
 800ee36:	460d      	mov	r5, r1
 800ee38:	4616      	mov	r6, r2
    draw_bg(draw_ctx, dsc, coords);
 800ee3a:	f7ff fe27 	bl	800ea8c <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 800ee3e:	4632      	mov	r2, r6
 800ee40:	4629      	mov	r1, r5
 800ee42:	4620      	mov	r0, r4
}
 800ee44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    draw_bg_img(draw_ctx, dsc, coords);
 800ee48:	f7ff bd1c 	b.w	800e884 <draw_bg_img>

0800ee4c <draw_border_generic>:
                        dsc->blend_mode);
}

void draw_border_generic(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800ee4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee50:	ed2d 8b02 	vpush	{d8}
 800ee54:	b0a5      	sub	sp, #148	; 0x94
 800ee56:	4605      	mov	r5, r0
 800ee58:	f89d 90c4 	ldrb.w	r9, [sp, #196]	; 0xc4
 800ee5c:	f9bd 80c0 	ldrsh.w	r8, [sp, #192]	; 0xc0
 800ee60:	f89d 70c8 	ldrb.w	r7, [sp, #200]	; 0xc8
 800ee64:	f88d 90c4 	strb.w	r9, [sp, #196]	; 0xc4
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    bool mask_any = lv_draw_mask_is_any(outer_area);
 800ee68:	4608      	mov	r0, r1
{
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	4692      	mov	sl, r2
 800ee6e:	469b      	mov	fp, r3
    bool mask_any = lv_draw_mask_is_any(outer_area);
 800ee70:	f7fb fe72 	bl	800ab58 <lv_draw_mask_is_any>

#if LV_DRAW_COMPLEX

    if(!mask_any && rout == 0 && rin == 0) {
 800ee74:	4606      	mov	r6, r0
 800ee76:	2800      	cmp	r0, #0
 800ee78:	d172      	bne.n	800ef60 <draw_border_generic+0x114>
 800ee7a:	ea5b 0308 	orrs.w	r3, fp, r8
 800ee7e:	d16f      	bne.n	800ef60 <draw_border_generic+0x114>
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800ee80:	211c      	movs	r1, #28
 800ee82:	a81d      	add	r0, sp, #116	; 0x74
 800ee84:	f004 fc39 	bl	80136fa <lv_memset_00>
    blend_dsc.blend_area = &a;
 800ee88:	ab17      	add	r3, sp, #92	; 0x5c
 800ee8a:	931d      	str	r3, [sp, #116]	; 0x74
    blend_dsc.color = color;
    blend_dsc.opa = opa;

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 800ee8c:	f9ba 3000 	ldrsh.w	r3, [sl]
    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 800ee90:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800ee94:	f9ba b002 	ldrsh.w	fp, [sl, #2]
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 800ee98:	9301      	str	r3, [sp, #4]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 800ee9a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
    blend_dsc.opa = opa;
 800eea4:	f88d 708c 	strb.w	r7, [sp, #140]	; 0x8c
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 800eea8:	9302      	str	r3, [sp, #8]
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 800eeaa:	f9b4 7000 	ldrsh.w	r7, [r4]


    /*Top*/
    a.x1 = outer_area->x1;
    a.x2 = outer_area->x2;
 800eeae:	9b00      	ldr	r3, [sp, #0]
    blend_dsc.color = color;
 800eeb0:	f88d 907c 	strb.w	r9, [sp, #124]	; 0x7c
    a.y1 = outer_area->y1;
    a.y2 = inner_area->y1 - 1;
 800eeb4:	f10b 31ff 	add.w	r1, fp, #4294967295
    if(top_side) {
 800eeb8:	455e      	cmp	r6, fp
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 800eeba:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
 800eebe:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
    a.x1 = outer_area->x1;
 800eec2:	f8ad 705c 	strh.w	r7, [sp, #92]	; 0x5c
    a.x2 = outer_area->x2;
 800eec6:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    a.y1 = outer_area->y1;
 800eeca:	f8ad 605e 	strh.w	r6, [sp, #94]	; 0x5e
    a.y2 = inner_area->y1 - 1;
 800eece:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
    if(top_side) {
 800eed2:	dc03      	bgt.n	800eedc <draw_border_generic+0x90>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800eed4:	a91d      	add	r1, sp, #116	; 0x74
 800eed6:	4628      	mov	r0, r5
 800eed8:	f7fd fbc7 	bl	800c66a <lv_draw_sw_blend>
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 800eedc:	f8ba 1006 	ldrh.w	r1, [sl, #6]
 800eee0:	3101      	adds	r1, #1
 800eee2:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
    a.y2 = outer_area->y2;
    if(bottom_side) {
 800eee6:	45c1      	cmp	r9, r8
    a.y2 = outer_area->y2;
 800eee8:	88e1      	ldrh	r1, [r4, #6]
 800eeea:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
    if(bottom_side) {
 800eeee:	db03      	blt.n	800eef8 <draw_border_generic+0xac>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800eef0:	a91d      	add	r1, sp, #116	; 0x74
 800eef2:	4628      	mov	r0, r5
 800eef4:	f7fd fbb9 	bl	800c66a <lv_draw_sw_blend>
    }

    /*Left*/
    a.x1 = outer_area->x1;
    a.x2 = inner_area->x1 - 1;
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 800eef8:	455e      	cmp	r6, fp
 800eefa:	bfd4      	ite	le
 800eefc:	f9ba 3002 	ldrshle.w	r3, [sl, #2]
 800ef00:	f9b4 3002 	ldrshgt.w	r3, [r4, #2]
 800ef04:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 800ef08:	45c1      	cmp	r9, r8
 800ef0a:	bfac      	ite	ge
 800ef0c:	f9ba 3006 	ldrshge.w	r3, [sl, #6]
 800ef10:	f9b4 3006 	ldrshlt.w	r3, [r4, #6]
    a.x1 = outer_area->x1;
 800ef14:	8821      	ldrh	r1, [r4, #0]
 800ef16:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 800ef1a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    a.x2 = inner_area->x1 - 1;
 800ef1e:	f8ba 1000 	ldrh.w	r1, [sl]
    if(left_side) {
 800ef22:	9b01      	ldr	r3, [sp, #4]
    a.x2 = inner_area->x1 - 1;
 800ef24:	3901      	subs	r1, #1
    if(left_side) {
 800ef26:	429f      	cmp	r7, r3
    a.x2 = inner_area->x1 - 1;
 800ef28:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
    if(left_side) {
 800ef2c:	dc03      	bgt.n	800ef36 <draw_border_generic+0xea>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ef2e:	a91d      	add	r1, sp, #116	; 0x74
 800ef30:	4628      	mov	r0, r5
 800ef32:	f7fd fb9a 	bl	800c66a <lv_draw_sw_blend>
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 800ef36:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    a.x2 = outer_area->x2;
    if(right_side) {
 800ef3a:	9a02      	ldr	r2, [sp, #8]
    a.x1 = inner_area->x2 + 1;
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    a.x2 = outer_area->x2;
 800ef42:	88a3      	ldrh	r3, [r4, #4]
 800ef44:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    if(right_side) {
 800ef48:	9b00      	ldr	r3, [sp, #0]
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	db03      	blt.n	800ef56 <draw_border_generic+0x10a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ef4e:	a91d      	add	r1, sp, #116	; 0x74
 800ef50:	4628      	mov	r0, r5
 800ef52:	f7fd fb8a 	bl	800c66a <lv_draw_sw_blend>
}
 800ef56:	b025      	add	sp, #148	; 0x94
 800ef58:	ecbd 8b02 	vpop	{d8}
 800ef5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 800ef60:	68aa      	ldr	r2, [r5, #8]
 800ef62:	4621      	mov	r1, r4
 800ef64:	a80d      	add	r0, sp, #52	; 0x34
 800ef66:	f003 fc86 	bl	8012876 <_lv_area_intersect>
 800ef6a:	9002      	str	r0, [sp, #8]
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	d0f2      	beq.n	800ef56 <draw_border_generic+0x10a>
 800ef70:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
 800ef74:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800ef78:	f109 0901 	add.w	r9, r9, #1
 800ef7c:	eba9 0903 	sub.w	r9, r9, r3
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800ef80:	211c      	movs	r1, #28
 800ef82:	a81d      	add	r0, sp, #116	; 0x74
 800ef84:	fa0f f989 	sxth.w	r9, r9
 800ef88:	f004 fbb7 	bl	80136fa <lv_memset_00>
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 800ef8c:	4648      	mov	r0, r9
 800ef8e:	f004 fa1b 	bl	80133c8 <lv_mem_buf_get>
    if(rout > 0) {
 800ef92:	f1bb 0f00 	cmp.w	fp, #0
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 800ef96:	9020      	str	r0, [sp, #128]	; 0x80
    if(rout > 0) {
 800ef98:	dd60      	ble.n	800f05c <draw_border_generic+0x210>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	465a      	mov	r2, fp
 800ef9e:	4621      	mov	r1, r4
 800efa0:	a811      	add	r0, sp, #68	; 0x44
 800efa2:	f7fb fef9 	bl	800ad98 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800efa6:	2100      	movs	r1, #0
 800efa8:	a811      	add	r0, sp, #68	; 0x44
 800efaa:	f7fb fd45 	bl	800aa38 <lv_draw_mask_add>
 800efae:	9009      	str	r0, [sp, #36]	; 0x24
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 800efb0:	2301      	movs	r3, #1
 800efb2:	4642      	mov	r2, r8
 800efb4:	4651      	mov	r1, sl
 800efb6:	a817      	add	r0, sp, #92	; 0x5c
 800efb8:	f7fb feee 	bl	800ad98 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800efbc:	2100      	movs	r1, #0
 800efbe:	a817      	add	r0, sp, #92	; 0x5c
 800efc0:	f7fb fd3a 	bl	800aa38 <lv_draw_mask_add>
    blend_dsc.blend_area = &blend_area;
 800efc4:	ab0f      	add	r3, sp, #60	; 0x3c
 800efc6:	931d      	str	r3, [sp, #116]	; 0x74
    blend_dsc.mask_area = &blend_area;
 800efc8:	9322      	str	r3, [sp, #136]	; 0x88
    blend_dsc.color = color;
 800efca:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 800efce:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    blend_dsc.blend_mode = blend_mode;
 800efd2:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800efd6:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 800efda:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    blend_dsc.opa = opa;
 800efde:	f88d 708c 	strb.w	r7, [sp, #140]	; 0x8c
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 800efe2:	f9ba 7002 	ldrsh.w	r7, [sl, #2]
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	445b      	add	r3, fp
 800efea:	42bb      	cmp	r3, r7
 800efec:	bfb8      	it	lt
 800efee:	463b      	movlt	r3, r7
 800eff0:	b21b      	sxth	r3, r3
 800eff2:	9307      	str	r3, [sp, #28]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 800eff4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800eff8:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
 800effc:	9301      	str	r3, [sp, #4]
 800effe:	eba3 030b 	sub.w	r3, r3, fp
 800f002:	4543      	cmp	r3, r8
 800f004:	bfa8      	it	ge
 800f006:	4643      	movge	r3, r8
 800f008:	930b      	str	r3, [sp, #44]	; 0x2c
 800f00a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800f00e:	9308      	str	r3, [sp, #32]
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800f010:	ee08 0a10 	vmov	s16, r0
    if(mask_any) {
 800f014:	2e00      	cmp	r6, #0
 800f016:	d049      	beq.n	800f0ac <draw_border_generic+0x260>
        blend_area.x1 = draw_area.x1;
 800f018:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800f01c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f020:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
        blend_area.x2 = draw_area.x2;
 800f024:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800f028:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f02c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800f030:	42a3      	cmp	r3, r4
 800f032:	da17      	bge.n	800f064 <draw_border_generic+0x218>
        lv_draw_mask_free_param(&mask_rin_param);
 800f034:	a817      	add	r0, sp, #92	; 0x5c
 800f036:	f7fb fd61 	bl	800aafc <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 800f03a:	ee18 0a10 	vmov	r0, s16
 800f03e:	f7fb fd33 	bl	800aaa8 <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 800f042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f044:	3301      	adds	r3, #1
 800f046:	d005      	beq.n	800f054 <draw_border_generic+0x208>
            lv_draw_mask_free_param(&mask_rout_param);
 800f048:	a811      	add	r0, sp, #68	; 0x44
 800f04a:	f7fb fd57 	bl	800aafc <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 800f04e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f050:	f7fb fd2a 	bl	800aaa8 <lv_draw_mask_remove_id>
        lv_mem_buf_release(blend_dsc.mask_buf);
 800f054:	9820      	ldr	r0, [sp, #128]	; 0x80
 800f056:	f004 fa03 	bl	8013460 <lv_mem_buf_release>
        return;
 800f05a:	e77c      	b.n	800ef56 <draw_border_generic+0x10a>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800f05c:	f04f 33ff 	mov.w	r3, #4294967295
 800f060:	9309      	str	r3, [sp, #36]	; 0x24
 800f062:	e7a5      	b.n	800efb0 <draw_border_generic+0x164>
            if(!top_side && h < core_area.y1) continue;
 800f064:	9b00      	ldr	r3, [sp, #0]
 800f066:	429f      	cmp	r7, r3
 800f068:	da02      	bge.n	800f070 <draw_border_generic+0x224>
 800f06a:	9b07      	ldr	r3, [sp, #28]
 800f06c:	42a3      	cmp	r3, r4
 800f06e:	dc1b      	bgt.n	800f0a8 <draw_border_generic+0x25c>
            if(!bottom_side && h > core_area.y2) break;
 800f070:	9b01      	ldr	r3, [sp, #4]
 800f072:	4598      	cmp	r8, r3
 800f074:	dd02      	ble.n	800f07c <draw_border_generic+0x230>
 800f076:	9b08      	ldr	r3, [sp, #32]
 800f078:	42a3      	cmp	r3, r4
 800f07a:	dbdb      	blt.n	800f034 <draw_border_generic+0x1e8>
            blend_area.y1 = h;
 800f07c:	b226      	sxth	r6, r4
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 800f07e:	9820      	ldr	r0, [sp, #128]	; 0x80
            blend_area.y1 = h;
 800f080:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 800f084:	4649      	mov	r1, r9
            blend_area.y2 = h;
 800f086:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 800f08a:	f004 fb61 	bl	8013750 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 800f08e:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 800f092:	9820      	ldr	r0, [sp, #128]	; 0x80
 800f094:	464b      	mov	r3, r9
 800f096:	4632      	mov	r2, r6
 800f098:	f7fb fce4 	bl	800aa64 <lv_draw_mask_apply>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f09c:	a91d      	add	r1, sp, #116	; 0x74
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 800f09e:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	f7fd fae1 	bl	800c66a <lv_draw_sw_blend>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800f0a8:	3401      	adds	r4, #1
 800f0aa:	e7bf      	b.n	800f02c <draw_border_generic+0x1e0>
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 800f0ac:	f9ba 3000 	ldrsh.w	r3, [sl]
 800f0b0:	9303      	str	r3, [sp, #12]
 800f0b2:	f9b4 3000 	ldrsh.w	r3, [r4]
 800f0b6:	9304      	str	r3, [sp, #16]
 800f0b8:	eb03 060b 	add.w	r6, r3, fp
 800f0bc:	9b03      	ldr	r3, [sp, #12]
 800f0be:	429e      	cmp	r6, r3
 800f0c0:	bfb8      	it	lt
 800f0c2:	461e      	movlt	r6, r3
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 800f0c4:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 800f0c8:	9305      	str	r3, [sp, #20]
 800f0ca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f0ce:	9a05      	ldr	r2, [sp, #20]
 800f0d0:	9306      	str	r3, [sp, #24]
 800f0d2:	eba3 030b 	sub.w	r3, r3, fp
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	bfa8      	it	ge
 800f0da:	4613      	movge	r3, r2
    if(left_side && right_side && top_side && bottom_side &&
 800f0dc:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800f0e0:	428a      	cmp	r2, r1
 800f0e2:	db11      	blt.n	800f108 <draw_border_generic+0x2bc>
 800f0e4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 800f0e8:	428a      	cmp	r2, r1
 800f0ea:	dc0d      	bgt.n	800f108 <draw_border_generic+0x2bc>
 800f0ec:	9a00      	ldr	r2, [sp, #0]
 800f0ee:	4297      	cmp	r7, r2
 800f0f0:	db0a      	blt.n	800f108 <draw_border_generic+0x2bc>
 800f0f2:	9a01      	ldr	r2, [sp, #4]
 800f0f4:	4590      	cmp	r8, r2
 800f0f6:	dc07      	bgt.n	800f108 <draw_border_generic+0x2bc>
 800f0f8:	1c58      	adds	r0, r3, #1
 800f0fa:	1b80      	subs	r0, r0, r6
 800f0fc:	b200      	sxth	r0, r0
 800f0fe:	2831      	cmp	r0, #49	; 0x31
 800f100:	bfd4      	ite	le
 800f102:	2200      	movle	r2, #0
 800f104:	2201      	movgt	r2, #1
 800f106:	9202      	str	r2, [sp, #8]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 800f108:	b21b      	sxth	r3, r3
 800f10a:	930a      	str	r3, [sp, #40]	; 0x28
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800f10c:	2301      	movs	r3, #1
 800f10e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
    if(top_side && split_hor) {
 800f112:	9b00      	ldr	r3, [sp, #0]
 800f114:	429f      	cmp	r7, r3
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 800f116:	b236      	sxth	r6, r6
    if(top_side && split_hor) {
 800f118:	db70      	blt.n	800f1fc <draw_border_generic+0x3b0>
 800f11a:	9b02      	ldr	r3, [sp, #8]
 800f11c:	b313      	cbz	r3, 800f164 <draw_border_generic+0x318>
        blend_area.x2 = core_area.x2;
 800f11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f120:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        blend_area.y1 = outer_area->y1;
 800f124:	9b00      	ldr	r3, [sp, #0]
 800f126:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f12a:	a91d      	add	r1, sp, #116	; 0x74
        blend_area.y2 = inner_area->y1 - 1;
 800f12c:	1e7b      	subs	r3, r7, #1
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f12e:	4628      	mov	r0, r5
        blend_area.y2 = inner_area->y1 - 1;
 800f130:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        blend_area.x1 = core_area.x1;
 800f134:	f8ad 603c 	strh.w	r6, [sp, #60]	; 0x3c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f138:	f7fd fa97 	bl	800c66a <lv_draw_sw_blend>
    if(bottom_side && split_hor) {
 800f13c:	9b01      	ldr	r3, [sp, #4]
 800f13e:	4598      	cmp	r8, r3
 800f140:	dc10      	bgt.n	800f164 <draw_border_generic+0x318>
        blend_area.x2 = core_area.x2;
 800f142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f144:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        blend_area.y1 = inner_area->y2 + 1;
 800f148:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        blend_area.x1 = core_area.x1;
 800f14c:	f8ad 603c 	strh.w	r6, [sp, #60]	; 0x3c
        blend_area.y1 = inner_area->y2 + 1;
 800f150:	3301      	adds	r3, #1
 800f152:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f156:	a91d      	add	r1, sp, #116	; 0x74
        blend_area.y2 = outer_area->y2;
 800f158:	88e3      	ldrh	r3, [r4, #6]
 800f15a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f15e:	4628      	mov	r0, r5
 800f160:	f7fd fa83 	bl	800c66a <lv_draw_sw_blend>
    if(left_side) {
 800f164:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f168:	4293      	cmp	r3, r2
 800f16a:	db11      	blt.n	800f190 <draw_border_generic+0x344>
        blend_area.x1 = outer_area->x1;
 800f16c:	8823      	ldrh	r3, [r4, #0]
 800f16e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        blend_area.x2 = inner_area->x1 - 1;
 800f172:	f8ba 3000 	ldrh.w	r3, [sl]
 800f176:	3b01      	subs	r3, #1
 800f178:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        blend_area.y1 = core_area.y1;
 800f17c:	9b07      	ldr	r3, [sp, #28]
 800f17e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f182:	a91d      	add	r1, sp, #116	; 0x74
        blend_area.y2 = core_area.y2;
 800f184:	9b08      	ldr	r3, [sp, #32]
 800f186:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f18a:	4628      	mov	r0, r5
 800f18c:	f7fd fa6d 	bl	800c66a <lv_draw_sw_blend>
    if(right_side) {
 800f190:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800f194:	4293      	cmp	r3, r2
 800f196:	dc11      	bgt.n	800f1bc <draw_border_generic+0x370>
        blend_area.x1 = inner_area->x2 + 1;
 800f198:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800f19c:	3301      	adds	r3, #1
 800f19e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        blend_area.x2 = outer_area->x2;
 800f1a2:	88a3      	ldrh	r3, [r4, #4]
 800f1a4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        blend_area.y1 = core_area.y1;
 800f1a8:	9b07      	ldr	r3, [sp, #28]
 800f1aa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f1ae:	a91d      	add	r1, sp, #116	; 0x74
        blend_area.y2 = core_area.y2;
 800f1b0:	9b08      	ldr	r3, [sp, #32]
 800f1b2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	f7fd fa57 	bl	800c66a <lv_draw_sw_blend>
    if(!split_hor) {
 800f1bc:	9902      	ldr	r1, [sp, #8]
        blend_area.x1 = draw_area.x1;
 800f1be:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
        blend_area.x2 = draw_area.x2;
 800f1c2:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
        blend_area.x1 = draw_area.x1;
 800f1c6:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    if(!split_hor) {
 800f1ca:	2900      	cmp	r1, #0
 800f1cc:	d155      	bne.n	800f27a <draw_border_generic+0x42e>
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 800f1ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
        blend_area.x2 = draw_area.x2;
 800f1d2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 800f1d6:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800f1da:	1a9b      	subs	r3, r3, r2
 800f1dc:	459b      	cmp	fp, r3
 800f1de:	bfb8      	it	lt
 800f1e0:	469b      	movlt	fp, r3
 800f1e2:	fa0f fb8b 	sxth.w	fp, fp
        for(h = 0; h < max_h; h++) {
 800f1e6:	460f      	mov	r7, r1
 800f1e8:	45bb      	cmp	fp, r7
 800f1ea:	dc0e      	bgt.n	800f20a <draw_border_generic+0x3be>
    lv_draw_mask_free_param(&mask_rin_param);
 800f1ec:	a817      	add	r0, sp, #92	; 0x5c
 800f1ee:	f7fb fc85 	bl	800aafc <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 800f1f2:	ee18 0a10 	vmov	r0, s16
 800f1f6:	f7fb fc57 	bl	800aaa8 <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 800f1fa:	e725      	b.n	800f048 <draw_border_generic+0x1fc>
    if(bottom_side && split_hor) {
 800f1fc:	9b01      	ldr	r3, [sp, #4]
 800f1fe:	4598      	cmp	r8, r3
 800f200:	dcb0      	bgt.n	800f164 <draw_border_generic+0x318>
 800f202:	9b02      	ldr	r3, [sp, #8]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d0ad      	beq.n	800f164 <draw_border_generic+0x318>
 800f208:	e79b      	b.n	800f142 <draw_border_generic+0x2f6>
            lv_coord_t top_y = outer_area->y1 + h;
 800f20a:	f8b4 a002 	ldrh.w	sl, [r4, #2]
            lv_coord_t bottom_y = outer_area->y2 - h;
 800f20e:	88e6      	ldrh	r6, [r4, #6]
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 800f210:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
            lv_coord_t top_y = outer_area->y1 + h;
 800f214:	fa1a fa87 	uxtah	sl, sl, r7
 800f218:	fa0f fa8a 	sxth.w	sl, sl
            lv_coord_t bottom_y = outer_area->y2 - h;
 800f21c:	1bf6      	subs	r6, r6, r7
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 800f21e:	4553      	cmp	r3, sl
            lv_coord_t bottom_y = outer_area->y2 - h;
 800f220:	b236      	sxth	r6, r6
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 800f222:	dd03      	ble.n	800f22c <draw_border_generic+0x3e0>
 800f224:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800f228:	42b3      	cmp	r3, r6
 800f22a:	db24      	blt.n	800f276 <draw_border_generic+0x42a>
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 800f22c:	9820      	ldr	r0, [sp, #128]	; 0x80
 800f22e:	4649      	mov	r1, r9
 800f230:	f004 fa8e 	bl	8013750 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 800f234:	464b      	mov	r3, r9
 800f236:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800f23a:	9820      	ldr	r0, [sp, #128]	; 0x80
 800f23c:	4652      	mov	r2, sl
 800f23e:	f7fb fc11 	bl	800aa64 <lv_draw_mask_apply>
            if(top_y >= draw_area.y1) {
 800f242:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 800f246:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
            if(top_y >= draw_area.y1) {
 800f24a:	4553      	cmp	r3, sl
 800f24c:	dc07      	bgt.n	800f25e <draw_border_generic+0x412>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f24e:	a91d      	add	r1, sp, #116	; 0x74
 800f250:	4628      	mov	r0, r5
                blend_area.y1 = top_y;
 800f252:	f8ad a03e 	strh.w	sl, [sp, #62]	; 0x3e
                blend_area.y2 = top_y;
 800f256:	f8ad a042 	strh.w	sl, [sp, #66]	; 0x42
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f25a:	f7fd fa06 	bl	800c66a <lv_draw_sw_blend>
            if(bottom_y <= draw_area.y2) {
 800f25e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800f262:	42b3      	cmp	r3, r6
 800f264:	db07      	blt.n	800f276 <draw_border_generic+0x42a>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f266:	a91d      	add	r1, sp, #116	; 0x74
 800f268:	4628      	mov	r0, r5
                blend_area.y1 = bottom_y;
 800f26a:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
                blend_area.y2 = bottom_y;
 800f26e:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f272:	f7fd f9fa 	bl	800c66a <lv_draw_sw_blend>
        for(h = 0; h < max_h; h++) {
 800f276:	3701      	adds	r7, #1
 800f278:	e7b6      	b.n	800f1e8 <draw_border_generic+0x39c>
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 800f27a:	3e01      	subs	r6, #1
 800f27c:	429e      	cmp	r6, r3
 800f27e:	bfa8      	it	ge
 800f280:	461e      	movge	r6, r3
 800f282:	f1c2 0201 	rsb	r2, r2, #1
 800f286:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 800f28a:	4416      	add	r6, r2
 800f28c:	b236      	sxth	r6, r6
        if(blend_w > 0) {
 800f28e:	2e00      	cmp	r6, #0
 800f290:	dc40      	bgt.n	800f314 <draw_border_generic+0x4c8>
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 800f292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f294:	f103 0901 	add.w	r9, r3, #1
 800f298:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800f29c:	4599      	cmp	r9, r3
 800f29e:	bfb8      	it	lt
 800f2a0:	4699      	movlt	r9, r3
        blend_area.x2 = draw_area.x2;
 800f2a2:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 800f2a6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800f2aa:	3301      	adds	r3, #1
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 800f2ac:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 800f2b0:	eba3 0909 	sub.w	r9, r3, r9
 800f2b4:	fa0f f989 	sxth.w	r9, r9
        if(blend_w > 0) {
 800f2b8:	f1b9 0f00 	cmp.w	r9, #0
 800f2bc:	dd96      	ble.n	800f1ec <draw_border_generic+0x3a0>
            if(right_side || top_side) {
 800f2be:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	dd76      	ble.n	800f3b4 <draw_border_generic+0x568>
 800f2c6:	9b00      	ldr	r3, [sp, #0]
 800f2c8:	429f      	cmp	r7, r3
 800f2ca:	da73      	bge.n	800f3b4 <draw_border_generic+0x568>
            if(right_side || bottom_side) {
 800f2cc:	9b01      	ldr	r3, [sp, #4]
 800f2ce:	4598      	cmp	r8, r3
 800f2d0:	dc8c      	bgt.n	800f1ec <draw_border_generic+0x3a0>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800f2d2:	2600      	movs	r6, #0
 800f2d4:	9b08      	ldr	r3, [sp, #32]
 800f2d6:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 800f2da:	3601      	adds	r6, #1
 800f2dc:	4433      	add	r3, r6
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	db84      	blt.n	800f1ec <draw_border_generic+0x3a0>
                    blend_area.y1 = h;
 800f2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f2e4:	9820      	ldr	r0, [sp, #128]	; 0x80
 800f2e6:	18f4      	adds	r4, r6, r3
 800f2e8:	b224      	sxth	r4, r4
 800f2ea:	4649      	mov	r1, r9
                    blend_area.y1 = h;
 800f2ec:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
                    blend_area.y2 = h;
 800f2f0:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f2f4:	f004 fa2c 	bl	8013750 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 800f2f8:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800f2fc:	9820      	ldr	r0, [sp, #128]	; 0x80
 800f2fe:	464b      	mov	r3, r9
 800f300:	4622      	mov	r2, r4
 800f302:	f7fb fbaf 	bl	800aa64 <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f306:	a91d      	add	r1, sp, #116	; 0x74
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 800f308:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f30c:	4628      	mov	r0, r5
 800f30e:	f7fd f9ac 	bl	800c66a <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800f312:	e7df      	b.n	800f2d4 <draw_border_generic+0x488>
            if(left_side || top_side) {
 800f314:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f318:	4293      	cmp	r3, r2
 800f31a:	da28      	bge.n	800f36e <draw_border_generic+0x522>
 800f31c:	9b00      	ldr	r3, [sp, #0]
 800f31e:	429f      	cmp	r7, r3
 800f320:	da25      	bge.n	800f36e <draw_border_generic+0x522>
            if(left_side || bottom_side) {
 800f322:	9b01      	ldr	r3, [sp, #4]
 800f324:	4598      	cmp	r8, r3
 800f326:	dcb4      	bgt.n	800f292 <draw_border_generic+0x446>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800f328:	2400      	movs	r4, #0
 800f32a:	9b08      	ldr	r3, [sp, #32]
 800f32c:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 800f330:	3401      	adds	r4, #1
 800f332:	4423      	add	r3, r4
 800f334:	429a      	cmp	r2, r3
 800f336:	dbac      	blt.n	800f292 <draw_border_generic+0x446>
                    blend_area.y1 = h;
 800f338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f33a:	9820      	ldr	r0, [sp, #128]	; 0x80
 800f33c:	eb04 0903 	add.w	r9, r4, r3
 800f340:	fa0f f989 	sxth.w	r9, r9
 800f344:	4631      	mov	r1, r6
                    blend_area.y1 = h;
 800f346:	f8ad 903e 	strh.w	r9, [sp, #62]	; 0x3e
                    blend_area.y2 = h;
 800f34a:	f8ad 9042 	strh.w	r9, [sp, #66]	; 0x42
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f34e:	f004 f9ff 	bl	8013750 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 800f352:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800f356:	9820      	ldr	r0, [sp, #128]	; 0x80
 800f358:	4633      	mov	r3, r6
 800f35a:	464a      	mov	r2, r9
 800f35c:	f7fb fb82 	bl	800aa64 <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f360:	a91d      	add	r1, sp, #116	; 0x74
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 800f362:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f366:	4628      	mov	r0, r5
 800f368:	f7fd f97f 	bl	800c66a <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800f36c:	e7dd      	b.n	800f32a <draw_border_generic+0x4de>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800f36e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 800f372:	9b07      	ldr	r3, [sp, #28]
 800f374:	42a3      	cmp	r3, r4
 800f376:	dc04      	bgt.n	800f382 <draw_border_generic+0x536>
            if(left_side || bottom_side) {
 800f378:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f37c:	4293      	cmp	r3, r2
 800f37e:	dad3      	bge.n	800f328 <draw_border_generic+0x4dc>
 800f380:	e7cf      	b.n	800f322 <draw_border_generic+0x4d6>
                    blend_area.y1 = h;
 800f382:	fa0f f984 	sxth.w	r9, r4
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f386:	9820      	ldr	r0, [sp, #128]	; 0x80
                    blend_area.y1 = h;
 800f388:	f8ad 903e 	strh.w	r9, [sp, #62]	; 0x3e
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f38c:	4631      	mov	r1, r6
                    blend_area.y2 = h;
 800f38e:	f8ad 9042 	strh.w	r9, [sp, #66]	; 0x42
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f392:	f004 f9dd 	bl	8013750 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 800f396:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800f39a:	9820      	ldr	r0, [sp, #128]	; 0x80
 800f39c:	4633      	mov	r3, r6
 800f39e:	464a      	mov	r2, r9
 800f3a0:	f7fb fb60 	bl	800aa64 <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f3a4:	a91d      	add	r1, sp, #116	; 0x74
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 800f3a6:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	f7fd f95d 	bl	800c66a <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800f3b0:	3401      	adds	r4, #1
 800f3b2:	e7de      	b.n	800f372 <draw_border_generic+0x526>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800f3b4:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 800f3b8:	9b07      	ldr	r3, [sp, #28]
 800f3ba:	42a3      	cmp	r3, r4
 800f3bc:	dc04      	bgt.n	800f3c8 <draw_border_generic+0x57c>
            if(right_side || bottom_side) {
 800f3be:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	dd85      	ble.n	800f2d2 <draw_border_generic+0x486>
 800f3c6:	e781      	b.n	800f2cc <draw_border_generic+0x480>
                    blend_area.y1 = h;
 800f3c8:	b226      	sxth	r6, r4
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f3ca:	9820      	ldr	r0, [sp, #128]	; 0x80
                    blend_area.y1 = h;
 800f3cc:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f3d0:	4649      	mov	r1, r9
                    blend_area.y2 = h;
 800f3d2:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f3d6:	f004 f9bb 	bl	8013750 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 800f3da:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800f3de:	9820      	ldr	r0, [sp, #128]	; 0x80
 800f3e0:	464b      	mov	r3, r9
 800f3e2:	4632      	mov	r2, r6
 800f3e4:	f7fb fb3e 	bl	800aa64 <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f3e8:	a91d      	add	r1, sp, #116	; 0x74
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 800f3ea:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	f7fd f93b 	bl	800c66a <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800f3f4:	3401      	adds	r4, #1
 800f3f6:	e7df      	b.n	800f3b8 <draw_border_generic+0x56c>

0800f3f8 <lv_draw_sw_rect>:
{
 800f3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3fc:	ed2d 8b02 	vpush	{d8}
 800f400:	b0a9      	sub	sp, #164	; 0xa4
 800f402:	4604      	mov	r4, r0
 800f404:	9207      	str	r2, [sp, #28]
    if(dsc->shadow_width == 0) return;
 800f406:	f9b1 2026 	ldrsh.w	r2, [r1, #38]	; 0x26
{
 800f40a:	468a      	mov	sl, r1
    if(dsc->shadow_width == 0) return;
 800f40c:	2a00      	cmp	r2, #0
 800f40e:	f000 840e 	beq.w	800fc2e <lv_draw_sw_rect+0x836>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 800f412:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 800f416:	930a      	str	r3, [sp, #40]	; 0x28
 800f418:	2b02      	cmp	r3, #2
 800f41a:	f240 8408 	bls.w	800fc2e <lv_draw_sw_rect+0x836>
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 800f41e:	2a01      	cmp	r2, #1
 800f420:	f9b1 302c 	ldrsh.w	r3, [r1, #44]	; 0x2c
 800f424:	d105      	bne.n	800f432 <lv_draw_sw_rect+0x3a>
 800f426:	2b00      	cmp	r3, #0
 800f428:	dc03      	bgt.n	800f432 <lv_draw_sw_rect+0x3a>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 800f42a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800f42c:	2900      	cmp	r1, #0
 800f42e:	f000 83fe 	beq.w	800fc2e <lv_draw_sw_rect+0x836>
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f432:	9807      	ldr	r0, [sp, #28]
 800f434:	f8ba 1028 	ldrh.w	r1, [sl, #40]	; 0x28
 800f438:	8807      	ldrh	r7, [r0, #0]
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f43a:	9e07      	ldr	r6, [sp, #28]
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800f43c:	8880      	ldrh	r0, [r0, #4]
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f43e:	8876      	ldrh	r6, [r6, #2]
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f440:	440f      	add	r7, r1
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800f442:	fa11 f183 	uxtah	r1, r1, r3
 800f446:	4401      	add	r1, r0
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f448:	f8ba 002a 	ldrh.w	r0, [sl, #42]	; 0x2a
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f44c:	fa1f f983 	uxth.w	r9, r3
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f450:	4406      	add	r6, r0
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800f452:	fa10 f383 	uxtah	r3, r0, r3
 800f456:	9807      	ldr	r0, [sp, #28]
 800f458:	88c0      	ldrh	r0, [r0, #6]
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f45a:	b2bf      	uxth	r7, r7
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800f45c:	4403      	add	r3, r0
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 800f45e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800f462:	eba7 0009 	sub.w	r0, r7, r9
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 800f466:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800f46a:	3801      	subs	r0, #1
 800f46c:	1a80      	subs	r0, r0, r2
 800f46e:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 800f472:	1c50      	adds	r0, r2, #1
 800f474:	b280      	uxth	r0, r0
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800f476:	b28d      	uxth	r5, r1
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f478:	b2b6      	uxth	r6, r6
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 800f47a:	fa10 f181 	uxtah	r1, r0, r1
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800f47e:	fa1f f883 	uxth.w	r8, r3
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 800f482:	fa10 f383 	uxtah	r3, r0, r3
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 800f486:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 800f48a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800f48e:	eba6 0109 	sub.w	r1, r6, r9
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 800f494:	3901      	subs	r1, #1
 800f496:	1a8a      	subs	r2, r1, r2
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f498:	2bfe      	cmp	r3, #254	; 0xfe
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 800f49a:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f49e:	bf28      	it	cs
 800f4a0:	23ff      	movcs	r3, #255	; 0xff
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 800f4a2:	68a2      	ldr	r2, [r4, #8]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800f4a4:	930a      	str	r3, [sp, #40]	; 0x28
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 800f4a6:	a911      	add	r1, sp, #68	; 0x44
 800f4a8:	a813      	add	r0, sp, #76	; 0x4c
 800f4aa:	f003 f9e4 	bl	8012876 <_lv_area_intersect>
 800f4ae:	9005      	str	r0, [sp, #20]
 800f4b0:	2800      	cmp	r0, #0
 800f4b2:	f000 83bc 	beq.w	800fc2e <lv_draw_sw_rect+0x836>
    dest->x1 = src->x1;
 800f4b6:	9b07      	ldr	r3, [sp, #28]
 800f4b8:	881b      	ldrh	r3, [r3, #0]
 800f4ba:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    dest->y1 = src->y1;
 800f4be:	9b07      	ldr	r3, [sp, #28]
 800f4c0:	885b      	ldrh	r3, [r3, #2]
 800f4c2:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    dest->x2 = src->x2;
 800f4c6:	9b07      	ldr	r3, [sp, #28]
 800f4c8:	889b      	ldrh	r3, [r3, #4]
 800f4ca:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    dest->y2 = src->y2;
 800f4ce:	9b07      	ldr	r3, [sp, #28]
    lv_area_increase(&bg_area, -1, -1);
 800f4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4d4:	88db      	ldrh	r3, [r3, #6]
 800f4d6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 800f4da:	4611      	mov	r1, r2
 800f4dc:	a815      	add	r0, sp, #84	; 0x54
 800f4de:	f003 f9aa 	bl	8012836 <lv_area_increase>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f4e2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800f4e6:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f4ea:	f8bd 0056 	ldrh.w	r0, [sp, #86]	; 0x56
    int32_t r_bg = dsc->radius;
 800f4ee:	f9ba 2000 	ldrsh.w	r2, [sl]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f4f6:	f8bd 105a 	ldrh.w	r1, [sp, #90]	; 0x5a
 800f4fa:	3101      	adds	r1, #1
 800f4fc:	1a09      	subs	r1, r1, r0
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800f4fe:	b21b      	sxth	r3, r3
 800f500:	b209      	sxth	r1, r1
 800f502:	f109 0901 	add.w	r9, r9, #1
 800f506:	428b      	cmp	r3, r1
 800f508:	fa15 f589 	uxtah	r5, r5, r9
 800f50c:	bfa8      	it	ge
 800f50e:	460b      	movge	r3, r1
 800f510:	fa18 f989 	uxtah	r9, r8, r9
 800f514:	b2a9      	uxth	r1, r5
 800f516:	105b      	asrs	r3, r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f518:	eba1 0807 	sub.w	r8, r1, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f51c:	eba9 0606 	sub.w	r6, r9, r6
 800f520:	4293      	cmp	r3, r2
 800f522:	fa1f f986 	uxth.w	r9, r6
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 800f526:	fa0f f888 	sxth.w	r8, r8
 800f52a:	b236      	sxth	r6, r6
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800f52c:	bfa8      	it	ge
 800f52e:	4613      	movge	r3, r2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 800f530:	4546      	cmp	r6, r8
 800f532:	bfa8      	it	ge
 800f534:	4646      	movge	r6, r8
 800f536:	ea4f 0866 	mov.w	r8, r6, asr #1
 800f53a:	4590      	cmp	r8, r2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800f53c:	9308      	str	r3, [sp, #32]
    int32_t corner_size = dsc->shadow_width  + r_sh;
 800f53e:	f9ba 3026 	ldrsh.w	r3, [sl, #38]	; 0x26
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f542:	9104      	str	r1, [sp, #16]
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 800f544:	bfa8      	it	ge
 800f546:	4690      	movge	r8, r2
    int32_t corner_size = dsc->shadow_width  + r_sh;
 800f548:	eb03 0b08 	add.w	fp, r3, r8
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800f54c:	fb0b f00b 	mul.w	r0, fp, fp
 800f550:	0040      	lsls	r0, r0, #1
 800f552:	f003 ff39 	bl	80133c8 <lv_mem_buf_get>
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 800f556:	f9ba 5026 	ldrsh.w	r5, [sl, #38]	; 0x26
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800f55a:	9904      	ldr	r1, [sp, #16]
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800f55c:	9006      	str	r0, [sp, #24]
    int32_t size = sw_ori  + r;
 800f55e:	f005 0201 	and.w	r2, r5, #1
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800f562:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 800f566:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800f56a:	920b      	str	r2, [sp, #44]	; 0x2c
 800f56c:	f065 0201 	orn	r2, r5, #1
 800f570:	441a      	add	r2, r3
    sh_area.y1 = sw / 2 + 1;
 800f572:	3301      	adds	r3, #1
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800f574:	4442      	add	r2, r8
    sh_area.y1 = sw / 2 + 1;
 800f576:	b29b      	uxth	r3, r3
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800f578:	b292      	uxth	r2, r2
    sh_area.y1 = sw / 2 + 1;
 800f57a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800f57e:	1a7f      	subs	r7, r7, r1
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800f580:	444b      	add	r3, r9
    int32_t size = sw_ori  + r;
 800f582:	eb08 0605 	add.w	r6, r8, r5
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800f586:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800f58a:	4417      	add	r7, r2
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800f58c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800f590:	4642      	mov	r2, r8
 800f592:	2300      	movs	r3, #0
 800f594:	a91b      	add	r1, sp, #108	; 0x6c
 800f596:	a821      	add	r0, sp, #132	; 0x84
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800f598:	f8ad 706c 	strh.w	r7, [sp, #108]	; 0x6c
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800f59c:	f7fb fbfc 	bl	800ad98 <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
 800f5a0:	2d01      	cmp	r5, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800f5a2:	4630      	mov	r0, r6
    else sw = sw_ori >> 1;
 800f5a4:	bf18      	it	ne
 800f5a6:	106d      	asrne	r5, r5, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800f5a8:	f003 ff0e 	bl	80133c8 <lv_mem_buf_get>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800f5ac:	0073      	lsls	r3, r6, #1
 800f5ae:	9309      	str	r3, [sp, #36]	; 0x24
    for(y = 0; y < size; y++) {
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	9304      	str	r3, [sp, #16]
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800f5b4:	b233      	sxth	r3, r6
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800f5b6:	f8dd 9018 	ldr.w	r9, [sp, #24]
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800f5ba:	ee08 3a10 	vmov	s16, r3
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800f5be:	4680      	mov	r8, r0
    for(y = 0; y < size; y++) {
 800f5c0:	9b04      	ldr	r3, [sp, #16]
 800f5c2:	429e      	cmp	r6, r3
 800f5c4:	dc0c      	bgt.n	800f5e0 <lv_draw_sw_rect+0x1e8>
    lv_mem_buf_release(mask_line);
 800f5c6:	4640      	mov	r0, r8
 800f5c8:	f003 ff4a 	bl	8013460 <lv_mem_buf_release>
    lv_draw_mask_free_param(&mask_param);
 800f5cc:	a821      	add	r0, sp, #132	; 0x84
 800f5ce:	f7fb fa95 	bl	800aafc <lv_draw_mask_free_param>
    if(sw == 1) {
 800f5d2:	2d01      	cmp	r5, #1
    for(x = 0; x < size * size; x++) {
 800f5d4:	fb06 f706 	mul.w	r7, r6, r6
    if(sw == 1) {
 800f5d8:	f040 83fe 	bne.w	800fdd8 <lv_draw_sw_rect+0x9e0>
        for(i = 0; i < size * size; i++) {
 800f5dc:	2300      	movs	r3, #0
 800f5de:	e03f      	b.n	800f660 <lv_draw_sw_rect+0x268>
        lv_memset_ff(mask_line, size);
 800f5e0:	4631      	mov	r1, r6
 800f5e2:	4640      	mov	r0, r8
 800f5e4:	f004 f8b4 	bl	8013750 <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800f5e8:	ab21      	add	r3, sp, #132	; 0x84
 800f5ea:	9300      	str	r3, [sp, #0]
 800f5ec:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800f5f0:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800f5f2:	ee18 3a10 	vmov	r3, s16
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	4640      	mov	r0, r8
 800f5fa:	47b8      	blx	r7
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800f5fc:	b948      	cbnz	r0, 800f612 <lv_draw_sw_rect+0x21a>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800f5fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f600:	4648      	mov	r0, r9
 800f602:	f004 f87a 	bl	80136fa <lv_memset_00>
        sh_ups_tmp_buf += size;
 800f606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f608:	4499      	add	r9, r3
    for(y = 0; y < size; y++) {
 800f60a:	9b04      	ldr	r3, [sp, #16]
 800f60c:	3301      	adds	r3, #1
 800f60e:	9304      	str	r3, [sp, #16]
 800f610:	e7d6      	b.n	800f5c0 <lv_draw_sw_rect+0x1c8>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800f612:	f898 3000 	ldrb.w	r3, [r8]
 800f616:	464a      	mov	r2, r9
 800f618:	019b      	lsls	r3, r3, #6
 800f61a:	fb93 f3f5 	sdiv	r3, r3, r5
 800f61e:	f822 3b02 	strh.w	r3, [r2], #2
            for(i = 1; i < size; i++) {
 800f622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f624:	4641      	mov	r1, r8
 800f626:	eb03 0009 	add.w	r0, r3, r9
 800f62a:	4290      	cmp	r0, r2
 800f62c:	d0eb      	beq.n	800f606 <lv_draw_sw_rect+0x20e>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800f62e:	468c      	mov	ip, r1
 800f630:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f634:	f89c c000 	ldrb.w	ip, [ip]
 800f638:	459c      	cmp	ip, r3
 800f63a:	bf0c      	ite	eq
 800f63c:	f832 3c02 	ldrheq.w	r3, [r2, #-2]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800f640:	019b      	lslne	r3, r3, #6
 800f642:	f102 0202 	add.w	r2, r2, #2
 800f646:	bf18      	it	ne
 800f648:	fb93 f3f5 	sdivne	r3, r3, r5
 800f64c:	f822 3c02 	strh.w	r3, [r2, #-2]
            for(i = 1; i < size; i++) {
 800f650:	e7eb      	b.n	800f62a <lv_draw_sw_rect+0x232>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 800f652:	9a06      	ldr	r2, [sp, #24]
 800f654:	9906      	ldr	r1, [sp, #24]
 800f656:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f65a:	0992      	lsrs	r2, r2, #6
 800f65c:	54ca      	strb	r2, [r1, r3]
        for(i = 0; i < size * size; i++) {
 800f65e:	3301      	adds	r3, #1
 800f660:	42bb      	cmp	r3, r7
 800f662:	d1f6      	bne.n	800f652 <lv_draw_sw_rect+0x25a>
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 800f664:	a811      	add	r0, sp, #68	; 0x44
 800f666:	f7fb fa77 	bl	800ab58 <lv_draw_mask_is_any>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 800f66a:	2800      	cmp	r0, #0
 800f66c:	f000 83e1 	beq.w	800fe32 <lv_draw_sw_rect+0xa3a>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 800f670:	2301      	movs	r3, #1
 800f672:	9a08      	ldr	r2, [sp, #32]
 800f674:	a915      	add	r1, sp, #84	; 0x54
 800f676:	a81b      	add	r0, sp, #108	; 0x6c
 800f678:	f7fb fb8e 	bl	800ad98 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800f67c:	2100      	movs	r1, #0
 800f67e:	a81b      	add	r0, sp, #108	; 0x6c
 800f680:	f7fb f9da 	bl	800aa38 <lv_draw_mask_add>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 800f684:	2300      	movs	r3, #0
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800f686:	900e      	str	r0, [sp, #56]	; 0x38
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 800f688:	9305      	str	r3, [sp, #20]
 800f68a:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 800f68e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800f692:	3001      	adds	r0, #1
 800f694:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 800f696:	b200      	sxth	r0, r0
 800f698:	f003 fe96 	bl	80133c8 <lv_mem_buf_get>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800f69c:	211c      	movs	r1, #28
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 800f69e:	4605      	mov	r5, r0
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800f6a0:	a821      	add	r0, sp, #132	; 0x84
 800f6a2:	f004 f82a 	bl	80136fa <lv_memset_00>
 800f6a6:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
    blend_dsc.color = dsc->shadow_color;
 800f6aa:	f89a 3025 	ldrb.w	r3, [sl, #37]	; 0x25
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 800f6ae:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
    blend_dsc.color = dsc->shadow_color;
 800f6b2:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 800f6b6:	1c70      	adds	r0, r6, #1
    blend_dsc.opa = dsc->shadow_opa;
 800f6b8:	f89a 302e 	ldrb.w	r3, [sl, #46]	; 0x2e
 800f6bc:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
 800f6c0:	b280      	uxth	r0, r0
    blend_dsc.blend_mode = dsc->blend_mode;
 800f6c2:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800f6c6:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
 800f6ca:	1bc3      	subs	r3, r0, r7
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 800f6cc:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800f6d0:	fa02 f383 	sxtah	r3, r2, r3
 800f6d4:	eb07 0363 	add.w	r3, r7, r3, asr #1
 800f6d8:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f6da:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800f6de:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 800f6e0:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800f6e4:	f9bd e046 	ldrsh.w	lr, [sp, #70]	; 0x46
    blend_dsc.mask_buf = mask_buf;
 800f6e8:	9524      	str	r5, [sp, #144]	; 0x90
 800f6ea:	3201      	adds	r2, #1
 800f6ec:	1ad2      	subs	r2, r2, r3
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 800f6ee:	f3c2 3cc0 	ubfx	ip, r2, #15, #1
 800f6f2:	fa0c f282 	sxtah	r2, ip, r2
 800f6f6:	eb03 0262 	add.w	r2, r3, r2, asr #1
 800f6fa:	b297      	uxth	r7, r2
 800f6fc:	b212      	sxth	r2, r2
 800f6fe:	9209      	str	r2, [sp, #36]	; 0x24
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800f700:	fa1f f28b 	uxth.w	r2, fp
 800f704:	9204      	str	r2, [sp, #16]
 800f706:	1a80      	subs	r0, r0, r2
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800f708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 800f70a:	970d      	str	r7, [sp, #52]	; 0x34
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800f70c:	b200      	sxth	r0, r0
 800f70e:	4290      	cmp	r0, r2
 800f710:	bfb8      	it	lt
 800f712:	4610      	movlt	r0, r2
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800f714:	9a04      	ldr	r2, [sp, #16]
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800f716:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800f71a:	3b01      	subs	r3, #1
 800f71c:	4413      	add	r3, r2
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800f71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    blend_area.x2 = shadow_area.x2;
 800f720:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800f724:	b21b      	sxth	r3, r3
 800f726:	4293      	cmp	r3, r2
 800f728:	bfa8      	it	ge
 800f72a:	4613      	movge	r3, r2
    blend_dsc.blend_area = &blend_area;
 800f72c:	a917      	add	r1, sp, #92	; 0x5c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f72e:	68a2      	ldr	r2, [r4, #8]
    blend_dsc.blend_area = &blend_area;
 800f730:	9121      	str	r1, [sp, #132]	; 0x84
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f732:	a819      	add	r0, sp, #100	; 0x64
    blend_dsc.mask_area = &blend_area;
 800f734:	9126      	str	r1, [sp, #152]	; 0x98
    blend_area.y1 = shadow_area.y1;
 800f736:	f8ad e05e 	strh.w	lr, [sp, #94]	; 0x5e
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800f73a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f73e:	f003 f89a 	bl	8012876 <_lv_area_intersect>
 800f742:	2800      	cmp	r0, #0
 800f744:	f040 837f 	bne.w	800fe46 <lv_draw_sw_rect+0xa4e>
    blend_area.x2 = shadow_area.x2;
 800f748:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800f74c:	9904      	ldr	r1, [sp, #16]
    blend_area.x2 = shadow_area.x2;
 800f74e:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800f752:	3201      	adds	r2, #1
 800f754:	1a52      	subs	r2, r2, r1
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800f756:	990b      	ldr	r1, [sp, #44]	; 0x2c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800f758:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
    blend_area.y2 = shadow_area.y2;
 800f75c:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800f760:	b212      	sxth	r2, r2
 800f762:	428a      	cmp	r2, r1
 800f764:	bfb8      	it	lt
 800f766:	460a      	movlt	r2, r1
 800f768:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800f76c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f76e:	3201      	adds	r2, #1
 800f770:	920c      	str	r2, [sp, #48]	; 0x30
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800f772:	9a04      	ldr	r2, [sp, #16]
 800f774:	3301      	adds	r3, #1
 800f776:	1a9b      	subs	r3, r3, r2
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800f778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f77a:	b21b      	sxth	r3, r3
 800f77c:	4293      	cmp	r3, r2
 800f77e:	bfb8      	it	lt
 800f780:	4613      	movlt	r3, r2
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f782:	a917      	add	r1, sp, #92	; 0x5c
 800f784:	68a2      	ldr	r2, [r4, #8]
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800f786:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f78a:	a819      	add	r0, sp, #100	; 0x64
 800f78c:	f003 f873 	bl	8012876 <_lv_area_intersect>
 800f790:	2800      	cmp	r0, #0
 800f792:	d042      	beq.n	800f81a <lv_draw_sw_rect+0x422>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800f794:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800f798:	920f      	str	r2, [sp, #60]	; 0x3c
 800f79a:	a915      	add	r1, sp, #84	; 0x54
 800f79c:	a819      	add	r0, sp, #100	; 0x64
 800f79e:	f003 f96b 	bl	8012a78 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f7a2:	2800      	cmp	r0, #0
 800f7a4:	d139      	bne.n	800f81a <lv_draw_sw_rect+0x422>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f7a6:	f8bd 8068 	ldrh.w	r8, [sp, #104]	; 0x68
 800f7aa:	f9bd 7064 	ldrsh.w	r7, [sp, #100]	; 0x64
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800f7ae:	9905      	ldr	r1, [sp, #20]
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800f7b0:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 800f7b4:	f9bd 906a 	ldrsh.w	r9, [sp, #106]	; 0x6a
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800f7b8:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800f7bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7be:	f108 0801 	add.w	r8, r8, #1
 800f7c2:	eba8 0807 	sub.w	r8, r8, r7
 800f7c6:	fa0f f888 	sxth.w	r8, r8
 800f7ca:	b129      	cbz	r1, 800f7d8 <lv_draw_sw_rect+0x3e0>
 800f7cc:	a915      	add	r1, sp, #84	; 0x54
 800f7ce:	a819      	add	r0, sp, #100	; 0x64
 800f7d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7d2:	f003 f99a 	bl	8012b0a <_lv_area_is_out>
 800f7d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        if(w > 0) {
 800f7d8:	f1b8 0f00 	cmp.w	r8, #0
 800f7dc:	dd1d      	ble.n	800f81a <lv_draw_sw_rect+0x422>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800f7de:	eba6 060b 	sub.w	r6, r6, fp
 800f7e2:	3601      	adds	r6, #1
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800f7e4:	eba3 0309 	sub.w	r3, r3, r9
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800f7e8:	1bbe      	subs	r6, r7, r6
 800f7ea:	fb0b 6603 	mla	r6, fp, r3, r6
 800f7ee:	9b06      	ldr	r3, [sp, #24]
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800f7f0:	f9bd 706a 	ldrsh.w	r7, [sp, #106]	; 0x6a
            blend_dsc.mask_buf = mask_buf;
 800f7f4:	9524      	str	r5, [sp, #144]	; 0x90
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800f7f6:	441e      	add	r6, r3
            blend_area.x1 = clip_area_sub.x1;
 800f7f8:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800f7fc:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800f800:	f04f 0902 	mov.w	r9, #2
            blend_area.x2 = clip_area_sub.x2;
 800f804:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800f808:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800f80c:	f88d 9094 	strb.w	r9, [sp, #148]	; 0x94
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800f810:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800f814:	42bb      	cmp	r3, r7
 800f816:	f340 837d 	ble.w	800ff14 <lv_draw_sw_rect+0xb1c>
    blend_area.x1 = shadow_area.x1 + corner_size;
 800f81a:	9a04      	ldr	r2, [sp, #16]
 800f81c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800f820:	4413      	add	r3, r2
 800f822:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    blend_area.x2 = shadow_area.x2 - corner_size;
 800f826:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f82a:	1a9b      	subs	r3, r3, r2
 800f82c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    blend_area.y1 = shadow_area.y1;
 800f830:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 800f834:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800f838:	3b01      	subs	r3, #1
 800f83a:	4413      	add	r3, r2
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800f83c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f83e:	b21b      	sxth	r3, r3
 800f840:	4293      	cmp	r3, r2
 800f842:	bfa8      	it	ge
 800f844:	4613      	movge	r3, r2
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f846:	a917      	add	r1, sp, #92	; 0x5c
 800f848:	68a2      	ldr	r2, [r4, #8]
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800f84a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f84e:	a819      	add	r0, sp, #100	; 0x64
 800f850:	f003 f811 	bl	8012876 <_lv_area_intersect>
 800f854:	b1f8      	cbz	r0, 800f896 <lv_draw_sw_rect+0x49e>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800f856:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800f85a:	920f      	str	r2, [sp, #60]	; 0x3c
 800f85c:	a915      	add	r1, sp, #84	; 0x54
 800f85e:	a819      	add	r0, sp, #100	; 0x64
 800f860:	f003 f90a 	bl	8012a78 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f864:	4607      	mov	r7, r0
 800f866:	b9b0      	cbnz	r0, 800f896 <lv_draw_sw_rect+0x49e>
 800f868:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 800f86c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800f870:	f9bd 8066 	ldrsh.w	r8, [sp, #102]	; 0x66
 800f874:	f9bd 905e 	ldrsh.w	r9, [sp, #94]	; 0x5e
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800f878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f87a:	3601      	adds	r6, #1
 800f87c:	1af6      	subs	r6, r6, r3
 800f87e:	9b05      	ldr	r3, [sp, #20]
 800f880:	b236      	sxth	r6, r6
 800f882:	2b00      	cmp	r3, #0
 800f884:	f000 84dd 	beq.w	8010242 <lv_draw_sw_rect+0xe4a>
 800f888:	a915      	add	r1, sp, #84	; 0x54
 800f88a:	a819      	add	r0, sp, #100	; 0x64
 800f88c:	f003 f93d 	bl	8012b0a <_lv_area_is_out>
        if(w > 0) {
 800f890:	2e00      	cmp	r6, #0
 800f892:	f300 8361 	bgt.w	800ff58 <lv_draw_sw_rect+0xb60>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 800f896:	f89a 302e 	ldrb.w	r3, [sl, #46]	; 0x2e
    blend_area.x1 = shadow_area.x1 + corner_size;
 800f89a:	9a04      	ldr	r2, [sp, #16]
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 800f89c:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
    blend_area.x1 = shadow_area.x1 + corner_size;
 800f8a0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800f8a4:	4413      	add	r3, r2
 800f8a6:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    blend_area.x2 = shadow_area.x2 - corner_size;
 800f8aa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f8ae:	1a9b      	subs	r3, r3, r2
 800f8b0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800f8b4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
    blend_area.y2 = shadow_area.y2;
 800f8b8:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800f8bc:	3301      	adds	r3, #1
 800f8be:	1a9b      	subs	r3, r3, r2
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800f8c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8c2:	b21b      	sxth	r3, r3
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	bfb8      	it	lt
 800f8c8:	4613      	movlt	r3, r2
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f8ca:	a917      	add	r1, sp, #92	; 0x5c
 800f8cc:	68a2      	ldr	r2, [r4, #8]
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800f8ce:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f8d2:	a819      	add	r0, sp, #100	; 0x64
 800f8d4:	f002 ffcf 	bl	8012876 <_lv_area_intersect>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d035      	beq.n	800f948 <lv_draw_sw_rect+0x550>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800f8dc:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 800f8e0:	a915      	add	r1, sp, #84	; 0x54
 800f8e2:	464a      	mov	r2, r9
 800f8e4:	a819      	add	r0, sp, #100	; 0x64
 800f8e6:	f003 f8c7 	bl	8012a78 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f8ea:	4607      	mov	r7, r0
 800f8ec:	bb60      	cbnz	r0, 800f948 <lv_draw_sw_rect+0x550>
 800f8ee:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 800f8f2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800f8f6:	3601      	adds	r6, #1
 800f8f8:	1af6      	subs	r6, r6, r3
 800f8fa:	b236      	sxth	r6, r6
        if(w > 0) {
 800f8fc:	2e00      	cmp	r6, #0
 800f8fe:	dd23      	ble.n	800f948 <lv_draw_sw_rect+0x550>
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800f900:	9a05      	ldr	r2, [sp, #20]
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800f902:	f9bd 8062 	ldrsh.w	r8, [sp, #98]	; 0x62
 800f906:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800f90a:	2a00      	cmp	r2, #0
 800f90c:	f000 8496 	beq.w	801023c <lv_draw_sw_rect+0xe44>
 800f910:	464a      	mov	r2, r9
 800f912:	a915      	add	r1, sp, #84	; 0x54
 800f914:	a819      	add	r0, sp, #100	; 0x64
 800f916:	930f      	str	r3, [sp, #60]	; 0x3c
 800f918:	f003 f8f7 	bl	8012b0a <_lv_area_is_out>
                blend_dsc.mask_buf = NULL;
 800f91c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f91e:	9724      	str	r7, [sp, #144]	; 0x90
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800f920:	eba8 0803 	sub.w	r8, r8, r3
 800f924:	9b06      	ldr	r3, [sp, #24]
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800f926:	f9bd 706a 	ldrsh.w	r7, [sp, #106]	; 0x6a
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800f92a:	fb0b 3808 	mla	r8, fp, r8, r3
            blend_area.x1 = clip_area_sub.x1;
 800f92e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800f932:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            blend_area.x2 = clip_area_sub.x2;
 800f936:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800f93a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800f93e:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800f942:	42bb      	cmp	r3, r7
 800f944:	f340 8315 	ble.w	800ff72 <lv_draw_sw_rect+0xb7a>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 800f948:	f89a 302e 	ldrb.w	r3, [sl, #46]	; 0x2e
 800f94c:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800f950:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 800f954:	9904      	ldr	r1, [sp, #16]
    blend_area.x2 = shadow_area.x2;
 800f956:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800f95a:	1c5a      	adds	r2, r3, #1
    blend_area.y1 = shadow_area.y1 + corner_size;
 800f95c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    blend_area.y2 = shadow_area.y2 - corner_size;
 800f960:	9804      	ldr	r0, [sp, #16]
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800f962:	1a52      	subs	r2, r2, r1
    blend_area.y1 = shadow_area.y1 + corner_size;
 800f964:	440b      	add	r3, r1
    blend_area.y2 = shadow_area.y2 - corner_size;
 800f966:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 800f96a:	1a09      	subs	r1, r1, r0
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800f96c:	9809      	ldr	r0, [sp, #36]	; 0x24
    blend_area.y1 = shadow_area.y1 + corner_size;
 800f96e:	b21b      	sxth	r3, r3
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800f970:	4298      	cmp	r0, r3
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800f972:	b212      	sxth	r2, r2
    blend_area.y2 = shadow_area.y2 - corner_size;
 800f974:	b209      	sxth	r1, r1
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800f976:	da02      	bge.n	800f97e <lv_draw_sw_rect+0x586>
 800f978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f97a:	3301      	adds	r3, #1
 800f97c:	b21b      	sxth	r3, r3
 800f97e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800f982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f984:	428b      	cmp	r3, r1
 800f986:	bfb8      	it	lt
 800f988:	460b      	movlt	r3, r1
 800f98a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800f98e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f990:	429a      	cmp	r2, r3
 800f992:	bfb8      	it	lt
 800f994:	461a      	movlt	r2, r3
 800f996:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800f99a:	a917      	add	r1, sp, #92	; 0x5c
 800f99c:	68a2      	ldr	r2, [r4, #8]
 800f99e:	a819      	add	r0, sp, #100	; 0x64
 800f9a0:	f002 ff69 	bl	8012876 <_lv_area_intersect>
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	f040 830b 	bne.w	800ffc0 <lv_draw_sw_rect+0xbc8>
 800f9aa:	9b06      	ldr	r3, [sp, #24]
        for(x = 0; x < corner_size / 2; x++) {
 800f9ac:	eb0b 70db 	add.w	r0, fp, fp, lsr #31
 800f9b0:	1040      	asrs	r0, r0, #1
 800f9b2:	3b01      	subs	r3, #1
 800f9b4:	2100      	movs	r1, #0
    for(y = 0; y < corner_size; y++) {
 800f9b6:	b20a      	sxth	r2, r1
 800f9b8:	4593      	cmp	fp, r2
 800f9ba:	f300 8361 	bgt.w	8010080 <lv_draw_sw_rect+0xc88>
    blend_area.x1 = shadow_area.x1;
 800f9be:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800f9c2:	9b04      	ldr	r3, [sp, #16]
    blend_area.x1 = shadow_area.x1;
 800f9c4:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800f9c8:	3a01      	subs	r2, #1
    blend_area.y1 = shadow_area.y1 + corner_size;
 800f9ca:	9904      	ldr	r1, [sp, #16]
    blend_area.y2 = shadow_area.y2 - corner_size;
 800f9cc:	9804      	ldr	r0, [sp, #16]
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800f9ce:	441a      	add	r2, r3
    blend_area.y1 = shadow_area.y1 + corner_size;
 800f9d0:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800f9d4:	440b      	add	r3, r1
    blend_area.y2 = shadow_area.y2 - corner_size;
 800f9d6:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 800f9da:	1a09      	subs	r1, r1, r0
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800f9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    blend_area.y1 = shadow_area.y1 + corner_size;
 800f9de:	b21b      	sxth	r3, r3
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800f9e0:	4298      	cmp	r0, r3
 800f9e2:	bfbe      	ittt	lt
 800f9e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f9e6:	3301      	addlt	r3, #1
 800f9e8:	b21b      	sxthlt	r3, r3
 800f9ea:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800f9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    blend_area.y2 = shadow_area.y2 - corner_size;
 800f9f0:	b209      	sxth	r1, r1
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800f9f2:	428b      	cmp	r3, r1
 800f9f4:	bfb8      	it	lt
 800f9f6:	460b      	movlt	r3, r1
 800f9f8:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800f9fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800f9fe:	b212      	sxth	r2, r2
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800fa00:	3b01      	subs	r3, #1
 800fa02:	429a      	cmp	r2, r3
 800fa04:	bfa8      	it	ge
 800fa06:	461a      	movge	r2, r3
 800fa08:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800fa0c:	a917      	add	r1, sp, #92	; 0x5c
 800fa0e:	68a2      	ldr	r2, [r4, #8]
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800fa10:	930a      	str	r3, [sp, #40]	; 0x28
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800fa12:	a819      	add	r0, sp, #100	; 0x64
 800fa14:	f002 ff2f 	bl	8012876 <_lv_area_intersect>
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	f040 8343 	bne.w	80100a4 <lv_draw_sw_rect+0xcac>
    blend_area.x1 = shadow_area.x1;
 800fa1e:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800fa22:	9904      	ldr	r1, [sp, #16]
    blend_area.x1 = shadow_area.x1;
 800fa24:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800fa28:	3a01      	subs	r2, #1
 800fa2a:	440a      	add	r2, r1
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800fa2c:	990a      	ldr	r1, [sp, #40]	; 0x28
    blend_area.y1 = shadow_area.y1;
 800fa2e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 800fa32:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800fa36:	b212      	sxth	r2, r2
 800fa38:	428a      	cmp	r2, r1
 800fa3a:	bfa8      	it	ge
 800fa3c:	460a      	movge	r2, r1
 800fa3e:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800fa42:	1e5a      	subs	r2, r3, #1
 800fa44:	9b04      	ldr	r3, [sp, #16]
 800fa46:	441a      	add	r2, r3
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800fa48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa4a:	b212      	sxth	r2, r2
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	bfa8      	it	ge
 800fa50:	461a      	movge	r2, r3
 800fa52:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800fa56:	a917      	add	r1, sp, #92	; 0x5c
 800fa58:	68a2      	ldr	r2, [r4, #8]
 800fa5a:	a819      	add	r0, sp, #100	; 0x64
 800fa5c:	f002 ff0b 	bl	8012876 <_lv_area_intersect>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	d03e      	beq.n	800fae2 <lv_draw_sw_rect+0x6ea>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800fa64:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800fa68:	9209      	str	r2, [sp, #36]	; 0x24
 800fa6a:	a915      	add	r1, sp, #84	; 0x54
 800fa6c:	a819      	add	r0, sp, #100	; 0x64
 800fa6e:	f003 f803 	bl	8012a78 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800fa72:	bbb0      	cbnz	r0, 800fae2 <lv_draw_sw_rect+0x6ea>
 800fa74:	f8bd 8068 	ldrh.w	r8, [sp, #104]	; 0x68
 800fa78:	f9bd 7064 	ldrsh.w	r7, [sp, #100]	; 0x64
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800fa7c:	9905      	ldr	r1, [sp, #20]
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800fa7e:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
 800fa82:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800fa86:	f9bd 905c 	ldrsh.w	r9, [sp, #92]	; 0x5c
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800fa8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa8c:	f108 0801 	add.w	r8, r8, #1
 800fa90:	eba8 0807 	sub.w	r8, r8, r7
 800fa94:	fa0f f888 	sxth.w	r8, r8
 800fa98:	b129      	cbz	r1, 800faa6 <lv_draw_sw_rect+0x6ae>
 800fa9a:	a915      	add	r1, sp, #84	; 0x54
 800fa9c:	a819      	add	r0, sp, #100	; 0x64
 800fa9e:	9309      	str	r3, [sp, #36]	; 0x24
 800faa0:	f003 f833 	bl	8012b0a <_lv_area_is_out>
 800faa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        blend_dsc.mask_buf = mask_buf;
 800faa6:	9524      	str	r5, [sp, #144]	; 0x90
        if(w > 0) {
 800faa8:	f1b8 0f00 	cmp.w	r8, #0
 800faac:	dd19      	ble.n	800fae2 <lv_draw_sw_rect+0x6ea>
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800faae:	eba7 0709 	sub.w	r7, r7, r9
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800fab2:	1af6      	subs	r6, r6, r3
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800fab4:	9b06      	ldr	r3, [sp, #24]
 800fab6:	fb0b 7606 	mla	r6, fp, r6, r7
 800faba:	441e      	add	r6, r3
            blend_area.x1 = clip_area_sub.x1;
 800fabc:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800fac0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800fac4:	f04f 0902 	mov.w	r9, #2
            blend_area.x2 = clip_area_sub.x2;
 800fac8:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800facc:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
            blend_area.x2 = clip_area_sub.x2;
 800fad0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800fad4:	f88d 9094 	strb.w	r9, [sp, #148]	; 0x94
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800fad8:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800fadc:	42bb      	cmp	r3, r7
 800fade:	f280 833e 	bge.w	801015e <lv_draw_sw_rect+0xd66>
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800fae2:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
 800fae6:	9904      	ldr	r1, [sp, #16]
    blend_area.y2 = shadow_area.y2;
 800fae8:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800faec:	3201      	adds	r2, #1
 800faee:	1a52      	subs	r2, r2, r1
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800faf0:	990c      	ldr	r1, [sp, #48]	; 0x30
    blend_area.x1 = shadow_area.x1 ;
 800faf2:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 800faf6:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800fafa:	b212      	sxth	r2, r2
 800fafc:	428a      	cmp	r2, r1
 800fafe:	bfb8      	it	lt
 800fb00:	460a      	movlt	r2, r1
 800fb02:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800fb06:	9a04      	ldr	r2, [sp, #16]
 800fb08:	3b01      	subs	r3, #1
 800fb0a:	4413      	add	r3, r2
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800fb0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb0e:	b21b      	sxth	r3, r3
 800fb10:	4293      	cmp	r3, r2
 800fb12:	bfa8      	it	ge
 800fb14:	4613      	movge	r3, r2
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800fb16:	a917      	add	r1, sp, #92	; 0x5c
 800fb18:	68a2      	ldr	r2, [r4, #8]
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800fb1a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800fb1e:	a819      	add	r0, sp, #100	; 0x64
 800fb20:	f002 fea9 	bl	8012876 <_lv_area_intersect>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	d03e      	beq.n	800fba6 <lv_draw_sw_rect+0x7ae>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800fb28:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800fb2c:	9209      	str	r2, [sp, #36]	; 0x24
 800fb2e:	a915      	add	r1, sp, #84	; 0x54
 800fb30:	a819      	add	r0, sp, #100	; 0x64
 800fb32:	f002 ffa1 	bl	8012a78 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800fb36:	bbb0      	cbnz	r0, 800fba6 <lv_draw_sw_rect+0x7ae>
 800fb38:	f8bd 8068 	ldrh.w	r8, [sp, #104]	; 0x68
 800fb3c:	f9bd 7064 	ldrsh.w	r7, [sp, #100]	; 0x64
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800fb40:	9905      	ldr	r1, [sp, #20]
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800fb42:	f9bd 6062 	ldrsh.w	r6, [sp, #98]	; 0x62
 800fb46:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800fb4a:	f9bd 905c 	ldrsh.w	r9, [sp, #92]	; 0x5c
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800fb4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb50:	f108 0801 	add.w	r8, r8, #1
 800fb54:	eba8 0807 	sub.w	r8, r8, r7
 800fb58:	fa0f f888 	sxth.w	r8, r8
 800fb5c:	b129      	cbz	r1, 800fb6a <lv_draw_sw_rect+0x772>
 800fb5e:	a915      	add	r1, sp, #84	; 0x54
 800fb60:	a819      	add	r0, sp, #100	; 0x64
 800fb62:	9309      	str	r3, [sp, #36]	; 0x24
 800fb64:	f002 ffd1 	bl	8012b0a <_lv_area_is_out>
 800fb68:	9b09      	ldr	r3, [sp, #36]	; 0x24
        blend_dsc.mask_buf = mask_buf;
 800fb6a:	9524      	str	r5, [sp, #144]	; 0x90
        if(w > 0) {
 800fb6c:	f1b8 0f00 	cmp.w	r8, #0
 800fb70:	dd19      	ble.n	800fba6 <lv_draw_sw_rect+0x7ae>
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800fb72:	eba7 0709 	sub.w	r7, r7, r9
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800fb76:	1af6      	subs	r6, r6, r3
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800fb78:	9b06      	ldr	r3, [sp, #24]
 800fb7a:	fb0b 7606 	mla	r6, fp, r6, r7
 800fb7e:	441e      	add	r6, r3
            blend_area.x1 = clip_area_sub.x1;
 800fb80:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800fb84:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800fb88:	f04f 0902 	mov.w	r9, #2
            blend_area.x2 = clip_area_sub.x2;
 800fb8c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800fb90:	f9bd 706a 	ldrsh.w	r7, [sp, #106]	; 0x6a
            blend_area.x2 = clip_area_sub.x2;
 800fb94:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800fb98:	f88d 9094 	strb.w	r9, [sp, #148]	; 0x94
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800fb9c:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800fba0:	42bb      	cmp	r3, r7
 800fba2:	f340 82fe 	ble.w	80101a2 <lv_draw_sw_rect+0xdaa>
    blend_area.x1 = shadow_area.x1 + corner_size ;
 800fba6:	9a04      	ldr	r2, [sp, #16]
 800fba8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    blend_dsc.mask_buf = mask_buf;
 800fbac:	9524      	str	r5, [sp, #144]	; 0x90
    blend_area.x1 = shadow_area.x1 + corner_size ;
 800fbae:	4413      	add	r3, r2
 800fbb0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    blend_area.x2 = shadow_area.x2 - corner_size;
 800fbb4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800fbb8:	1a9b      	subs	r3, r3, r2
 800fbba:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    blend_area.y1 = shadow_area.y1 + corner_size;
 800fbbe:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800fbc2:	4413      	add	r3, r2
 800fbc4:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    blend_area.y2 = shadow_area.y2 - corner_size;
 800fbc8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800fbcc:	a917      	add	r1, sp, #92	; 0x5c
    blend_area.y2 = shadow_area.y2 - corner_size;
 800fbce:	1a9b      	subs	r3, r3, r2
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800fbd0:	a819      	add	r0, sp, #100	; 0x64
 800fbd2:	68a2      	ldr	r2, [r4, #8]
    blend_area.y2 = shadow_area.y2 - corner_size;
 800fbd4:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800fbd8:	f002 fe4d 	bl	8012876 <_lv_area_intersect>
 800fbdc:	b1c8      	cbz	r0, 800fc12 <lv_draw_sw_rect+0x81a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800fbde:	9a08      	ldr	r2, [sp, #32]
 800fbe0:	a915      	add	r1, sp, #84	; 0x54
 800fbe2:	a819      	add	r0, sp, #100	; 0x64
 800fbe4:	f002 ff48 	bl	8012a78 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800fbe8:	b998      	cbnz	r0, 800fc12 <lv_draw_sw_rect+0x81a>
 800fbea:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 800fbee:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 800fbf2:	1c53      	adds	r3, r2, #1
 800fbf4:	1a5b      	subs	r3, r3, r1
 800fbf6:	b21f      	sxth	r7, r3
        if(w > 0) {
 800fbf8:	2f00      	cmp	r7, #0
 800fbfa:	dd0a      	ble.n	800fc12 <lv_draw_sw_rect+0x81a>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800fbfc:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
            blend_area.x1 = clip_area_sub.x1;
 800fc00:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
            blend_area.x2 = clip_area_sub.x2;
 800fc04:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800fc08:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800fc0c:	42b3      	cmp	r3, r6
 800fc0e:	f280 82ea 	bge.w	80101e6 <lv_draw_sw_rect+0xdee>
    if(!simple) {
 800fc12:	9b05      	ldr	r3, [sp, #20]
 800fc14:	b92b      	cbnz	r3, 800fc22 <lv_draw_sw_rect+0x82a>
        lv_draw_mask_free_param(&mask_rout_param);
 800fc16:	a81b      	add	r0, sp, #108	; 0x6c
 800fc18:	f7fa ff70 	bl	800aafc <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 800fc1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fc1e:	f7fa ff43 	bl	800aaa8 <lv_draw_mask_remove_id>
    lv_mem_buf_release(sh_buf);
 800fc22:	9806      	ldr	r0, [sp, #24]
 800fc24:	f003 fc1c 	bl	8013460 <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 800fc28:	4628      	mov	r0, r5
 800fc2a:	f003 fc19 	bl	8013460 <lv_mem_buf_release>
    draw_bg(draw_ctx, dsc, coords);
 800fc2e:	9a07      	ldr	r2, [sp, #28]
 800fc30:	4651      	mov	r1, sl
 800fc32:	4620      	mov	r0, r4
 800fc34:	f7fe ff2a 	bl	800ea8c <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 800fc38:	9a07      	ldr	r2, [sp, #28]
 800fc3a:	4651      	mov	r1, sl
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	f7fe fe21 	bl	800e884 <draw_bg_img>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 800fc42:	f89a 501c 	ldrb.w	r5, [sl, #28]
 800fc46:	2d02      	cmp	r5, #2
 800fc48:	d965      	bls.n	800fd16 <lv_draw_sw_rect+0x91e>
    if(dsc->border_width == 0) return;
 800fc4a:	f9ba 201a 	ldrsh.w	r2, [sl, #26]
 800fc4e:	2a00      	cmp	r2, #0
 800fc50:	d061      	beq.n	800fd16 <lv_draw_sw_rect+0x91e>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 800fc52:	f89a 001d 	ldrb.w	r0, [sl, #29]
 800fc56:	f010 0f3e 	tst.w	r0, #62	; 0x3e
 800fc5a:	d05c      	beq.n	800fd16 <lv_draw_sw_rect+0x91e>
    if(dsc->border_post) return;
 800fc5c:	07c6      	lsls	r6, r0, #31
 800fc5e:	d45a      	bmi.n	800fd16 <lv_draw_sw_rect+0x91e>
 800fc60:	9b07      	ldr	r3, [sp, #28]
    int32_t rout = dsc->radius;
 800fc62:	f9ba 1000 	ldrsh.w	r1, [sl]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fc66:	88de      	ldrh	r6, [r3, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fc68:	f8b3 e004 	ldrh.w	lr, [r3, #4]
 800fc6c:	f8b3 8000 	ldrh.w	r8, [r3]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fc70:	885f      	ldrh	r7, [r3, #2]
 800fc72:	f106 0c01 	add.w	ip, r6, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fc76:	f10e 0301 	add.w	r3, lr, #1
 800fc7a:	eba3 0308 	sub.w	r3, r3, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fc7e:	ebac 0c07 	sub.w	ip, ip, r7
    int32_t coords_w = lv_area_get_width(coords);
 800fc82:	b21b      	sxth	r3, r3
    int32_t coords_h = lv_area_get_height(coords);
 800fc84:	fa0f fc8c 	sxth.w	ip, ip
    int32_t short_side = LV_MIN(coords_w, coords_h);
 800fc88:	4563      	cmp	r3, ip
 800fc8a:	bfa8      	it	ge
 800fc8c:	4663      	movge	r3, ip
    if(rout > short_side >> 1) rout = short_side >> 1;
 800fc8e:	105b      	asrs	r3, r3, #1
 800fc90:	428b      	cmp	r3, r1
 800fc92:	bfa8      	it	ge
 800fc94:	460b      	movge	r3, r1
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800fc96:	f3c0 0c44 	ubfx	ip, r0, #1, #5
 800fc9a:	b292      	uxth	r2, r2
 800fc9c:	b299      	uxth	r1, r3
 800fc9e:	0700      	lsls	r0, r0, #28
 800fca0:	bf5b      	ittet	pl
 800fca2:	1850      	addpl	r0, r2, r1
 800fca4:	4240      	negpl	r0, r0
 800fca6:	4610      	movmi	r0, r2
 800fca8:	b280      	uxthpl	r0, r0
 800fcaa:	4440      	add	r0, r8
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800fcac:	f01c 0f08 	tst.w	ip, #8
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800fcb0:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800fcb4:	bf05      	ittet	eq
 800fcb6:	1850      	addeq	r0, r2, r1
 800fcb8:	4240      	negeq	r0, r0
 800fcba:	4610      	movne	r0, r2
 800fcbc:	b280      	uxtheq	r0, r0
 800fcbe:	ebae 0000 	sub.w	r0, lr, r0
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800fcc2:	f01c 0f02 	tst.w	ip, #2
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800fcc6:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800fcca:	bf05      	ittet	eq
 800fccc:	1850      	addeq	r0, r2, r1
 800fcce:	4240      	negeq	r0, r0
 800fcd0:	4610      	movne	r0, r2
 800fcd2:	b280      	uxtheq	r0, r0
 800fcd4:	4438      	add	r0, r7
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800fcd6:	f01c 0f01 	tst.w	ip, #1
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800fcda:	f8ad 0086 	strh.w	r0, [sp, #134]	; 0x86
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800fcde:	bf06      	itte	eq
 800fce0:	1850      	addeq	r0, r2, r1
 800fce2:	4240      	negeq	r0, r0
 800fce4:	4610      	movne	r0, r2
    lv_coord_t rin = rout - dsc->border_width;
 800fce6:	eba1 0202 	sub.w	r2, r1, r2
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 800fcea:	f89a 1002 	ldrb.w	r1, [sl, #2]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800fcee:	bf08      	it	eq
 800fcf0:	b280      	uxtheq	r0, r0
    lv_coord_t rin = rout - dsc->border_width;
 800fcf2:	b212      	sxth	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800fcf4:	1a30      	subs	r0, r6, r0
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 800fcf6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800fcfa:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800fcfe:	f89a 1018 	ldrb.w	r1, [sl, #24]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800fd02:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 800fd06:	f88d 1004 	strb.w	r1, [sp, #4]
 800fd0a:	9200      	str	r2, [sp, #0]
 800fd0c:	9907      	ldr	r1, [sp, #28]
 800fd0e:	aa21      	add	r2, sp, #132	; 0x84
 800fd10:	4620      	mov	r0, r4
 800fd12:	f7ff f89b 	bl	800ee4c <draw_border_generic>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 800fd16:	f89a 5024 	ldrb.w	r5, [sl, #36]	; 0x24
 800fd1a:	2d02      	cmp	r5, #2
 800fd1c:	d957      	bls.n	800fdce <lv_draw_sw_rect+0x9d6>
    if(dsc->outline_width == 0) return;
 800fd1e:	f9ba 3020 	ldrsh.w	r3, [sl, #32]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d053      	beq.n	800fdce <lv_draw_sw_rect+0x9d6>
    dest->y2 = src->y2;
 800fd26:	9907      	ldr	r1, [sp, #28]
    area_inner.x1 -= pad;
 800fd28:	9e07      	ldr	r6, [sp, #28]
 800fd2a:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
    lv_coord_t pad = dsc->outline_pad - 1;
 800fd2e:	f8ba 1022 	ldrh.w	r1, [sl, #34]	; 0x22
    dest->x2 = src->x2;
 800fd32:	9a07      	ldr	r2, [sp, #28]
    area_inner.x1 -= pad;
 800fd34:	8837      	ldrh	r7, [r6, #0]
    area_inner.y1 -= pad;
 800fd36:	f8b6 c002 	ldrh.w	ip, [r6, #2]
 800fd3a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
    lv_coord_t pad = dsc->outline_pad - 1;
 800fd3e:	3901      	subs	r1, #1
 800fd40:	b289      	uxth	r1, r1
    area_inner.x1 -= pad;
 800fd42:	eba7 0e01 	sub.w	lr, r7, r1
    area_outer.x1 -= dsc->outline_width;
 800fd46:	b29b      	uxth	r3, r3
    area_inner.y1 -= pad;
 800fd48:	ebac 0601 	sub.w	r6, ip, r1
    area_inner.x1 -= pad;
 800fd4c:	fa1f fe8e 	uxth.w	lr, lr
    area_inner.x2 += pad;
 800fd50:	440a      	add	r2, r1
    area_inner.y2 += pad;
 800fd52:	4408      	add	r0, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fd54:	f1c7 0701 	rsb	r7, r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fd58:	f1cc 0c01 	rsb	ip, ip, #1
 800fd5c:	b280      	uxth	r0, r0
    area_inner.x2 += pad;
 800fd5e:	b292      	uxth	r2, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fd60:	440f      	add	r7, r1
    area_inner.x1 -= pad;
 800fd62:	f8ad e06c 	strh.w	lr, [sp, #108]	; 0x6c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fd66:	4461      	add	r1, ip
    area_outer.x1 -= dsc->outline_width;
 800fd68:	ebae 0e03 	sub.w	lr, lr, r3
    area_inner.y1 -= pad;
 800fd6c:	b2b6      	uxth	r6, r6
 800fd6e:	4401      	add	r1, r0
    area_inner.x2 += pad;
 800fd70:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    area_outer.x1 -= dsc->outline_width;
 800fd74:	f8ad e084 	strh.w	lr, [sp, #132]	; 0x84
    area_outer.x2 += dsc->outline_width;
 800fd78:	eb02 0e03 	add.w	lr, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fd7c:	443a      	add	r2, r7
    int32_t inner_w = lv_area_get_width(&area_inner);
 800fd7e:	b212      	sxth	r2, r2
    int32_t inner_h = lv_area_get_height(&area_inner);
 800fd80:	b209      	sxth	r1, r1
    area_inner.y1 -= pad;
 800fd82:	f8ad 606e 	strh.w	r6, [sp, #110]	; 0x6e
    area_outer.y1 -= dsc->outline_width;
 800fd86:	1af6      	subs	r6, r6, r3
    int32_t short_side = LV_MIN(inner_w, inner_h);
 800fd88:	428a      	cmp	r2, r1
    area_outer.y1 -= dsc->outline_width;
 800fd8a:	f8ad 6086 	strh.w	r6, [sp, #134]	; 0x86
    area_outer.y2 += dsc->outline_width;
 800fd8e:	eb00 0603 	add.w	r6, r0, r3
    int32_t short_side = LV_MIN(inner_w, inner_h);
 800fd92:	bfa8      	it	ge
 800fd94:	460a      	movge	r2, r1
    area_outer.y2 += dsc->outline_width;
 800fd96:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
    int32_t rin = dsc->radius;
 800fd9a:	f9ba 6000 	ldrsh.w	r6, [sl]
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 800fd9e:	f89a 1002 	ldrb.w	r1, [sl, #2]
    area_inner.y2 += pad;
 800fda2:	f8ad 0072 	strh.w	r0, [sp, #114]	; 0x72
    if(rin > short_side >> 1) rin = short_side >> 1;
 800fda6:	1052      	asrs	r2, r2, #1
 800fda8:	42b2      	cmp	r2, r6
 800fdaa:	bfa8      	it	ge
 800fdac:	4632      	movge	r2, r6
    lv_coord_t rout = rin + dsc->outline_width;
 800fdae:	4413      	add	r3, r2
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 800fdb0:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800fdb4:	f89a 101e 	ldrb.w	r1, [sl, #30]
 800fdb8:	f88d 1004 	strb.w	r1, [sp, #4]
 800fdbc:	9200      	str	r2, [sp, #0]
 800fdbe:	b21b      	sxth	r3, r3
 800fdc0:	aa1b      	add	r2, sp, #108	; 0x6c
 800fdc2:	a921      	add	r1, sp, #132	; 0x84
 800fdc4:	4620      	mov	r0, r4
    area_outer.x2 += dsc->outline_width;
 800fdc6:	f8ad e088 	strh.w	lr, [sp, #136]	; 0x88
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 800fdca:	f7ff f83f 	bl	800ee4c <draw_border_generic>
}
 800fdce:	b029      	add	sp, #164	; 0xa4
 800fdd0:	ecbd 8b02 	vpop	{d8}
 800fdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    shadow_blur_corner(size, sw, sh_buf);
 800fdd8:	b230      	sxth	r0, r6
 800fdda:	4629      	mov	r1, r5
 800fddc:	9a06      	ldr	r2, [sp, #24]
 800fdde:	9004      	str	r0, [sp, #16]
 800fde0:	f7fe fc96 	bl	800e710 <shadow_blur_corner>
    sw += sw_ori & 1;
 800fde4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fde6:	4429      	add	r1, r5
    if(sw > 1) {
 800fde8:	2901      	cmp	r1, #1
 800fdea:	dd0c      	ble.n	800fe06 <lv_draw_sw_rect+0xa0e>
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 800fdec:	9a06      	ldr	r2, [sp, #24]
        for(i = 0; i < (uint32_t)size * size; i++) {
 800fdee:	9804      	ldr	r0, [sp, #16]
 800fdf0:	eb02 0647 	add.w	r6, r2, r7, lsl #1
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 800fdf4:	f44f 557f 	mov.w	r5, #16320	; 0x3fc0
 800fdf8:	fbb5 f5f1 	udiv	r5, r5, r1
        for(i = 0; i < (uint32_t)size * size; i++) {
 800fdfc:	4296      	cmp	r6, r2
 800fdfe:	d10d      	bne.n	800fe1c <lv_draw_sw_rect+0xa24>
        shadow_blur_corner(size, sw, sh_buf);
 800fe00:	9a06      	ldr	r2, [sp, #24]
 800fe02:	f7fe fc85 	bl	800e710 <shadow_blur_corner>
        for(i = 0; i < size * size; i++) {
 800fe06:	2300      	movs	r3, #0
    for(x = 0; x < size * size; x++) {
 800fe08:	42bb      	cmp	r3, r7
 800fe0a:	f43f ac2b 	beq.w	800f664 <lv_draw_sw_rect+0x26c>
        res_buf[x] = sh_buf[x];
 800fe0e:	9a06      	ldr	r2, [sp, #24]
 800fe10:	9906      	ldr	r1, [sp, #24]
 800fe12:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800fe16:	54ca      	strb	r2, [r1, r3]
    for(x = 0; x < size * size; x++) {
 800fe18:	3301      	adds	r3, #1
 800fe1a:	e7f5      	b.n	800fe08 <lv_draw_sw_rect+0xa10>
            if(sh_buf[i] == 0) continue;
 800fe1c:	8813      	ldrh	r3, [r2, #0]
 800fe1e:	b133      	cbz	r3, 800fe2e <lv_draw_sw_rect+0xa36>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 800fe20:	2bff      	cmp	r3, #255	; 0xff
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800fe22:	bf17      	itett	ne
 800fe24:	019b      	lslne	r3, r3, #6
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 800fe26:	8015      	strheq	r5, [r2, #0]
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800fe28:	fbb3 f3f1 	udivne	r3, r3, r1
 800fe2c:	8013      	strhne	r3, [r2, #0]
        for(i = 0; i < (uint32_t)size * size; i++) {
 800fe2e:	3202      	adds	r2, #2
 800fe30:	e7e4      	b.n	800fdfc <lv_draw_sw_rect+0xa04>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 800fe32:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800fe36:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800fe3a:	f47f ac19 	bne.w	800f670 <lv_draw_sw_rect+0x278>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800fe3e:	f04f 33ff 	mov.w	r3, #4294967295
 800fe42:	930e      	str	r3, [sp, #56]	; 0x38
 800fe44:	e421      	b.n	800f68a <lv_draw_sw_rect+0x292>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800fe46:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800fe4a:	920c      	str	r2, [sp, #48]	; 0x30
 800fe4c:	a915      	add	r1, sp, #84	; 0x54
 800fe4e:	a819      	add	r0, sp, #100	; 0x64
 800fe50:	f002 fe12 	bl	8012a78 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800fe54:	2800      	cmp	r0, #0
 800fe56:	f47f ac77 	bne.w	800f748 <lv_draw_sw_rect+0x350>
 800fe5a:	f8bd 8068 	ldrh.w	r8, [sp, #104]	; 0x68
 800fe5e:	f9bd 7064 	ldrsh.w	r7, [sp, #100]	; 0x64
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800fe62:	9905      	ldr	r1, [sp, #20]
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 800fe64:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800fe68:	f9bd 9046 	ldrsh.w	r9, [sp, #70]	; 0x46
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800fe6c:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800fe70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe72:	f108 0801 	add.w	r8, r8, #1
 800fe76:	eba8 0807 	sub.w	r8, r8, r7
 800fe7a:	fa0f f888 	sxth.w	r8, r8
 800fe7e:	b129      	cbz	r1, 800fe8c <lv_draw_sw_rect+0xa94>
 800fe80:	a915      	add	r1, sp, #84	; 0x54
 800fe82:	a819      	add	r0, sp, #100	; 0x64
 800fe84:	930c      	str	r3, [sp, #48]	; 0x30
 800fe86:	f002 fe40 	bl	8012b0a <_lv_area_is_out>
 800fe8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if(w > 0) {
 800fe8c:	f1b8 0f00 	cmp.w	r8, #0
 800fe90:	f77f ac5a 	ble.w	800f748 <lv_draw_sw_rect+0x350>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800fe94:	eba6 060b 	sub.w	r6, r6, fp
 800fe98:	3601      	adds	r6, #1
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 800fe9a:	eba3 0309 	sub.w	r3, r3, r9
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800fe9e:	1bbe      	subs	r6, r7, r6
 800fea0:	fb0b 6603 	mla	r6, fp, r3, r6
 800fea4:	9b06      	ldr	r3, [sp, #24]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800fea6:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
            blend_dsc.mask_buf = mask_buf;
 800feaa:	9524      	str	r5, [sp, #144]	; 0x90
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800feac:	441e      	add	r6, r3
            blend_area.x1 = clip_area_sub.x1;
 800feae:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800feb2:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800feb6:	f04f 0902 	mov.w	r9, #2
            blend_area.x2 = clip_area_sub.x2;
 800feba:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800febe:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800fec2:	f88d 9094 	strb.w	r9, [sp, #148]	; 0x94
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800fec6:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800feca:	42bb      	cmp	r3, r7
 800fecc:	f6ff ac3c 	blt.w	800f748 <lv_draw_sw_rect+0x350>
                if(!simple_sub) {
 800fed0:	9b05      	ldr	r3, [sp, #20]
                blend_area.y1 = y;
 800fed2:	f8ad 705e 	strh.w	r7, [sp, #94]	; 0x5e
                blend_area.y2 = y;
 800fed6:	f8ad 7062 	strh.w	r7, [sp, #98]	; 0x62
                if(!simple_sub) {
 800feda:	b9cb      	cbnz	r3, 800ff10 <lv_draw_sw_rect+0xb18>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800fedc:	465a      	mov	r2, fp
 800fede:	4631      	mov	r1, r6
 800fee0:	4628      	mov	r0, r5
 800fee2:	f003 faeb 	bl	80134bc <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800fee6:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 800feea:	4643      	mov	r3, r8
 800feec:	463a      	mov	r2, r7
 800feee:	4628      	mov	r0, r5
 800fef0:	f7fa fdb8 	bl	800aa64 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800fef4:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800fef6:	bf14      	ite	ne
 800fef8:	f88d 0094 	strbne.w	r0, [sp, #148]	; 0x94
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800fefc:	f88d 9094 	strbeq.w	r9, [sp, #148]	; 0x94
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ff00:	a921      	add	r1, sp, #132	; 0x84
 800ff02:	4620      	mov	r0, r4
 800ff04:	3701      	adds	r7, #1
 800ff06:	f7fc fbb0 	bl	800c66a <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800ff0a:	445e      	add	r6, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800ff0c:	b23f      	sxth	r7, r7
 800ff0e:	e7da      	b.n	800fec6 <lv_draw_sw_rect+0xace>
                    blend_dsc.mask_buf = sh_buf_tmp;
 800ff10:	9624      	str	r6, [sp, #144]	; 0x90
 800ff12:	e7f5      	b.n	800ff00 <lv_draw_sw_rect+0xb08>
                if(!simple_sub) {
 800ff14:	9b05      	ldr	r3, [sp, #20]
                blend_area.y1 = y;
 800ff16:	f8ad 705e 	strh.w	r7, [sp, #94]	; 0x5e
                blend_area.y2 = y;
 800ff1a:	f8ad 7062 	strh.w	r7, [sp, #98]	; 0x62
                if(!simple_sub) {
 800ff1e:	b9cb      	cbnz	r3, 800ff54 <lv_draw_sw_rect+0xb5c>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800ff20:	465a      	mov	r2, fp
 800ff22:	4631      	mov	r1, r6
 800ff24:	4628      	mov	r0, r5
 800ff26:	f003 fac9 	bl	80134bc <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800ff2a:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 800ff2e:	4643      	mov	r3, r8
 800ff30:	463a      	mov	r2, r7
 800ff32:	4628      	mov	r0, r5
 800ff34:	f7fa fd96 	bl	800aa64 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ff38:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800ff3a:	bf14      	ite	ne
 800ff3c:	f88d 0094 	strbne.w	r0, [sp, #148]	; 0x94
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ff40:	f88d 9094 	strbeq.w	r9, [sp, #148]	; 0x94
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ff44:	a921      	add	r1, sp, #132	; 0x84
 800ff46:	4620      	mov	r0, r4
 800ff48:	3f01      	subs	r7, #1
 800ff4a:	f7fc fb8e 	bl	800c66a <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800ff4e:	445e      	add	r6, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800ff50:	b23f      	sxth	r7, r7
 800ff52:	e45d      	b.n	800f810 <lv_draw_sw_rect+0x418>
                    blend_dsc.mask_buf = sh_buf_tmp;
 800ff54:	9624      	str	r6, [sp, #144]	; 0x90
 800ff56:	e7f5      	b.n	800ff44 <lv_draw_sw_rect+0xb4c>
                blend_dsc.mask_buf = NULL;
 800ff58:	9724      	str	r7, [sp, #144]	; 0x90
 800ff5a:	e176      	b.n	801024a <lv_draw_sw_rect+0xe52>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 800ff5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff5e:	2bff      	cmp	r3, #255	; 0xff
 800ff60:	bf1e      	ittt	ne
 800ff62:	f89a 302e 	ldrbne.w	r3, [sl, #46]	; 0x2e
 800ff66:	fb13 f101 	smulbbne	r1, r3, r1
 800ff6a:	0a09      	lsrne	r1, r1, #8
 800ff6c:	f88d 109c 	strb.w	r1, [sp, #156]	; 0x9c
 800ff70:	e19c      	b.n	80102ac <lv_draw_sw_rect+0xeb4>
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800ff72:	9b05      	ldr	r3, [sp, #20]
                blend_area.y1 = y;
 800ff74:	f8ad 705e 	strh.w	r7, [sp, #94]	; 0x5e
                blend_area.y2 = y;
 800ff78:	f8ad 7062 	strh.w	r7, [sp, #98]	; 0x62
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f000 814a 	beq.w	8010216 <lv_draw_sw_rect+0xe1e>
 800ff82:	464a      	mov	r2, r9
 800ff84:	a915      	add	r1, sp, #84	; 0x54
 800ff86:	a819      	add	r0, sp, #100	; 0x64
 800ff88:	f002 fdbf 	bl	8012b0a <_lv_area_is_out>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 800ff8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff8e:	2bff      	cmp	r3, #255	; 0xff
 800ff90:	f898 3000 	ldrb.w	r3, [r8]
 800ff94:	d10e      	bne.n	800ffb4 <lv_draw_sw_rect+0xbbc>
 800ff96:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
 800ff9a:	e003      	b.n	800ffa4 <lv_draw_sw_rect+0xbac>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ff9c:	f04f 0302 	mov.w	r3, #2
 800ffa0:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ffa4:	a921      	add	r1, sp, #132	; 0x84
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	3f01      	subs	r7, #1
 800ffaa:	f7fc fb5e 	bl	800c66a <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800ffae:	44d8      	add	r8, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800ffb0:	b23f      	sxth	r7, r7
 800ffb2:	e4c4      	b.n	800f93e <lv_draw_sw_rect+0x546>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 800ffb4:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
 800ffb8:	fb13 f302 	smulbb	r3, r3, r2
 800ffbc:	0a1b      	lsrs	r3, r3, #8
 800ffbe:	e7ea      	b.n	800ff96 <lv_draw_sw_rect+0xb9e>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800ffc0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800ffc4:	920a      	str	r2, [sp, #40]	; 0x28
 800ffc6:	a915      	add	r1, sp, #84	; 0x54
 800ffc8:	a819      	add	r0, sp, #100	; 0x64
 800ffca:	f002 fd55 	bl	8012a78 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	f47f aceb 	bne.w	800f9aa <lv_draw_sw_rect+0x5b2>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800ffd4:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 800ffd8:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 800ffdc:	f9bd 7064 	ldrsh.w	r7, [sp, #100]	; 0x64
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800ffe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800ffe2:	eba3 030b 	sub.w	r3, r3, fp
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	3601      	adds	r6, #1
 800ffea:	1bf6      	subs	r6, r6, r7
 800ffec:	1aff      	subs	r7, r7, r3
        sh_buf_tmp += (corner_size - 1) * corner_size;
 800ffee:	f10b 33ff 	add.w	r3, fp, #4294967295
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800fff2:	fb0b 7703 	mla	r7, fp, r3, r7
 800fff6:	9b06      	ldr	r3, [sp, #24]
 800fff8:	441f      	add	r7, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800fffa:	9b05      	ldr	r3, [sp, #20]
 800fffc:	b236      	sxth	r6, r6
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d03c      	beq.n	801007c <lv_draw_sw_rect+0xc84>
 8010002:	a915      	add	r1, sp, #84	; 0x54
 8010004:	a819      	add	r0, sp, #100	; 0x64
 8010006:	f002 fd80 	bl	8012b0a <_lv_area_is_out>
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801000a:	463b      	mov	r3, r7
        if(w > 0) {
 801000c:	2e00      	cmp	r6, #0
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801000e:	9324      	str	r3, [sp, #144]	; 0x90
        if(w > 0) {
 8010010:	f77f accb 	ble.w	800f9aa <lv_draw_sw_rect+0x5b2>
            blend_area.x1 = clip_area_sub.x1;
 8010014:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8010018:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801001c:	f04f 0902 	mov.w	r9, #2
            blend_area.x2 = clip_area_sub.x2;
 8010020:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8010024:	f9bd 8066 	ldrsh.w	r8, [sp, #102]	; 0x66
            blend_area.x2 = clip_area_sub.x2;
 8010028:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801002c:	f88d 9094 	strb.w	r9, [sp, #148]	; 0x94
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8010030:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 8010034:	4543      	cmp	r3, r8
 8010036:	f6ff acb8 	blt.w	800f9aa <lv_draw_sw_rect+0x5b2>
                if(!simple_sub) {
 801003a:	9b05      	ldr	r3, [sp, #20]
                blend_area.y1 = y;
 801003c:	f8ad 805e 	strh.w	r8, [sp, #94]	; 0x5e
                blend_area.y2 = y;
 8010040:	f8ad 8062 	strh.w	r8, [sp, #98]	; 0x62
                if(!simple_sub) {
 8010044:	b98b      	cbnz	r3, 801006a <lv_draw_sw_rect+0xc72>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010046:	4632      	mov	r2, r6
 8010048:	4639      	mov	r1, r7
 801004a:	4628      	mov	r0, r5
 801004c:	f003 fa36 	bl	80134bc <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8010050:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8010054:	4633      	mov	r3, r6
 8010056:	4642      	mov	r2, r8
 8010058:	4628      	mov	r0, r5
 801005a:	f7fa fd03 	bl	800aa64 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801005e:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8010060:	bf14      	ite	ne
 8010062:	f88d 0094 	strbne.w	r0, [sp, #148]	; 0x94
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010066:	f88d 9094 	strbeq.w	r9, [sp, #148]	; 0x94
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801006a:	a921      	add	r1, sp, #132	; 0x84
 801006c:	4620      	mov	r0, r4
 801006e:	f108 0801 	add.w	r8, r8, #1
 8010072:	f7fc fafa 	bl	800c66a <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8010076:	fa0f f888 	sxth.w	r8, r8
 801007a:	e7d9      	b.n	8010030 <lv_draw_sw_rect+0xc38>
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801007c:	462b      	mov	r3, r5
 801007e:	e7c5      	b.n	801000c <lv_draw_sw_rect+0xc14>
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 8010080:	eb0b 0603 	add.w	r6, fp, r3
 8010084:	4632      	mov	r2, r6
        for(x = 0; x < corner_size / 2; x++) {
 8010086:	1ab7      	subs	r7, r6, r2
 8010088:	42b8      	cmp	r0, r7
 801008a:	dc02      	bgt.n	8010092 <lv_draw_sw_rect+0xc9a>
    for(y = 0; y < corner_size; y++) {
 801008c:	3101      	adds	r1, #1
        for(x = 0; x < corner_size / 2; x++) {
 801008e:	4633      	mov	r3, r6
 8010090:	e491      	b.n	800f9b6 <lv_draw_sw_rect+0x5be>
            lv_opa_t tmp = *start;
 8010092:	f813 7f01 	ldrb.w	r7, [r3, #1]!
            *start = *end;
 8010096:	f892 c000 	ldrb.w	ip, [r2]
 801009a:	f883 c000 	strb.w	ip, [r3]
            *end = tmp;
 801009e:	f802 7901 	strb.w	r7, [r2], #-1
        for(x = 0; x < corner_size / 2; x++) {
 80100a2:	e7f0      	b.n	8010086 <lv_draw_sw_rect+0xc8e>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80100a4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80100a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80100aa:	a915      	add	r1, sp, #84	; 0x54
 80100ac:	a819      	add	r0, sp, #100	; 0x64
 80100ae:	f002 fce3 	bl	8012a78 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80100b2:	2800      	cmp	r0, #0
 80100b4:	f47f acb3 	bne.w	800fa1e <lv_draw_sw_rect+0x626>
 80100b8:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 80100bc:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 80100c0:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80100c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80100c6:	3601      	adds	r6, #1
 80100c8:	1af6      	subs	r6, r6, r3
        sh_buf_tmp += (corner_size - 1) * corner_size;
 80100ca:	f10b 37ff 	add.w	r7, fp, #4294967295
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 80100ce:	1a5b      	subs	r3, r3, r1
 80100d0:	fb0b 3707 	mla	r7, fp, r7, r3
 80100d4:	9b06      	ldr	r3, [sp, #24]
 80100d6:	441f      	add	r7, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80100d8:	9b05      	ldr	r3, [sp, #20]
 80100da:	b236      	sxth	r6, r6
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d03c      	beq.n	801015a <lv_draw_sw_rect+0xd62>
 80100e0:	a915      	add	r1, sp, #84	; 0x54
 80100e2:	a819      	add	r0, sp, #100	; 0x64
 80100e4:	f002 fd11 	bl	8012b0a <_lv_area_is_out>
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 80100e8:	463b      	mov	r3, r7
        if(w > 0) {
 80100ea:	2e00      	cmp	r6, #0
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 80100ec:	9324      	str	r3, [sp, #144]	; 0x90
        if(w > 0) {
 80100ee:	f77f ac96 	ble.w	800fa1e <lv_draw_sw_rect+0x626>
            blend_area.x1 = clip_area_sub.x1;
 80100f2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80100f6:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 80100fa:	f04f 0902 	mov.w	r9, #2
            blend_area.x2 = clip_area_sub.x2;
 80100fe:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8010102:	f9bd 8066 	ldrsh.w	r8, [sp, #102]	; 0x66
            blend_area.x2 = clip_area_sub.x2;
 8010106:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801010a:	f88d 9094 	strb.w	r9, [sp, #148]	; 0x94
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801010e:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 8010112:	4543      	cmp	r3, r8
 8010114:	f6ff ac83 	blt.w	800fa1e <lv_draw_sw_rect+0x626>
                if(!simple_sub) {
 8010118:	9b05      	ldr	r3, [sp, #20]
                blend_area.y1 = y;
 801011a:	f8ad 805e 	strh.w	r8, [sp, #94]	; 0x5e
                blend_area.y2 = y;
 801011e:	f8ad 8062 	strh.w	r8, [sp, #98]	; 0x62
                if(!simple_sub) {
 8010122:	b98b      	cbnz	r3, 8010148 <lv_draw_sw_rect+0xd50>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 8010124:	4632      	mov	r2, r6
 8010126:	4639      	mov	r1, r7
 8010128:	4628      	mov	r0, r5
 801012a:	f003 f9c7 	bl	80134bc <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801012e:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8010132:	4633      	mov	r3, r6
 8010134:	4642      	mov	r2, r8
 8010136:	4628      	mov	r0, r5
 8010138:	f7fa fc94 	bl	800aa64 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801013c:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801013e:	bf14      	ite	ne
 8010140:	f88d 0094 	strbne.w	r0, [sp, #148]	; 0x94
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010144:	f88d 9094 	strbeq.w	r9, [sp, #148]	; 0x94
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8010148:	a921      	add	r1, sp, #132	; 0x84
 801014a:	4620      	mov	r0, r4
 801014c:	f108 0801 	add.w	r8, r8, #1
 8010150:	f7fc fa8b 	bl	800c66a <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8010154:	fa0f f888 	sxth.w	r8, r8
 8010158:	e7d9      	b.n	801010e <lv_draw_sw_rect+0xd16>
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801015a:	462b      	mov	r3, r5
 801015c:	e7c5      	b.n	80100ea <lv_draw_sw_rect+0xcf2>
                if(!simple_sub) {
 801015e:	9b05      	ldr	r3, [sp, #20]
                blend_area.y1 = y;
 8010160:	f8ad 705e 	strh.w	r7, [sp, #94]	; 0x5e
                blend_area.y2 = y;
 8010164:	f8ad 7062 	strh.w	r7, [sp, #98]	; 0x62
                if(!simple_sub) {
 8010168:	b9cb      	cbnz	r3, 801019e <lv_draw_sw_rect+0xda6>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801016a:	465a      	mov	r2, fp
 801016c:	4631      	mov	r1, r6
 801016e:	4628      	mov	r0, r5
 8010170:	f003 f9a4 	bl	80134bc <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8010174:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8010178:	4643      	mov	r3, r8
 801017a:	463a      	mov	r2, r7
 801017c:	4628      	mov	r0, r5
 801017e:	f7fa fc71 	bl	800aa64 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010182:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8010184:	bf14      	ite	ne
 8010186:	f88d 0094 	strbne.w	r0, [sp, #148]	; 0x94
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801018a:	f88d 9094 	strbeq.w	r9, [sp, #148]	; 0x94
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801018e:	a921      	add	r1, sp, #132	; 0x84
 8010190:	4620      	mov	r0, r4
 8010192:	3701      	adds	r7, #1
 8010194:	f7fc fa69 	bl	800c66a <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 8010198:	445e      	add	r6, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801019a:	b23f      	sxth	r7, r7
 801019c:	e49c      	b.n	800fad8 <lv_draw_sw_rect+0x6e0>
                    blend_dsc.mask_buf = sh_buf_tmp;
 801019e:	9624      	str	r6, [sp, #144]	; 0x90
 80101a0:	e7f5      	b.n	801018e <lv_draw_sw_rect+0xd96>
                if(!simple_sub) {
 80101a2:	9b05      	ldr	r3, [sp, #20]
                blend_area.y1 = y;
 80101a4:	f8ad 705e 	strh.w	r7, [sp, #94]	; 0x5e
                blend_area.y2 = y;
 80101a8:	f8ad 7062 	strh.w	r7, [sp, #98]	; 0x62
                if(!simple_sub) {
 80101ac:	b9cb      	cbnz	r3, 80101e2 <lv_draw_sw_rect+0xdea>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 80101ae:	465a      	mov	r2, fp
 80101b0:	4631      	mov	r1, r6
 80101b2:	4628      	mov	r0, r5
 80101b4:	f003 f982 	bl	80134bc <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80101b8:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 80101bc:	4643      	mov	r3, r8
 80101be:	463a      	mov	r2, r7
 80101c0:	4628      	mov	r0, r5
 80101c2:	f7fa fc4f 	bl	800aa64 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80101c6:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80101c8:	bf14      	ite	ne
 80101ca:	f88d 0094 	strbne.w	r0, [sp, #148]	; 0x94
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80101ce:	f88d 9094 	strbeq.w	r9, [sp, #148]	; 0x94
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80101d2:	a921      	add	r1, sp, #132	; 0x84
 80101d4:	4620      	mov	r0, r4
 80101d6:	3f01      	subs	r7, #1
 80101d8:	f7fc fa47 	bl	800c66a <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 80101dc:	445e      	add	r6, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 80101de:	b23f      	sxth	r7, r7
 80101e0:	e4dc      	b.n	800fb9c <lv_draw_sw_rect+0x7a4>
                    blend_dsc.mask_buf = sh_buf_tmp;
 80101e2:	9624      	str	r6, [sp, #144]	; 0x90
 80101e4:	e7f5      	b.n	80101d2 <lv_draw_sw_rect+0xdda>
                lv_memset_ff(mask_buf, w);
 80101e6:	4639      	mov	r1, r7
 80101e8:	4628      	mov	r0, r5
                blend_area.y1 = y;
 80101ea:	f8ad 605e 	strh.w	r6, [sp, #94]	; 0x5e
                blend_area.y2 = y;
 80101ee:	f8ad 6062 	strh.w	r6, [sp, #98]	; 0x62
                lv_memset_ff(mask_buf, w);
 80101f2:	f003 faad 	bl	8013750 <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80101f6:	4632      	mov	r2, r6
 80101f8:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 80101fc:	463b      	mov	r3, r7
 80101fe:	4628      	mov	r0, r5
 8010200:	f7fa fc30 	bl	800aa64 <lv_draw_mask_apply>
 8010204:	3601      	adds	r6, #1
 8010206:	f88d 0094 	strb.w	r0, [sp, #148]	; 0x94
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801020a:	a921      	add	r1, sp, #132	; 0x84
 801020c:	4620      	mov	r0, r4
 801020e:	f7fc fa2c 	bl	800c66a <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8010212:	b236      	sxth	r6, r6
 8010214:	e4f8      	b.n	800fc08 <lv_draw_sw_rect+0x810>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 8010216:	f898 1000 	ldrb.w	r1, [r8]
 801021a:	4632      	mov	r2, r6
 801021c:	4628      	mov	r0, r5
 801021e:	f003 fa3e 	bl	801369e <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8010222:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8010226:	4633      	mov	r3, r6
 8010228:	463a      	mov	r2, r7
 801022a:	4628      	mov	r0, r5
 801022c:	f7fa fc1a 	bl	800aa64 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010230:	2801      	cmp	r0, #1
 8010232:	f43f aeb3 	beq.w	800ff9c <lv_draw_sw_rect+0xba4>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8010236:	f88d 0094 	strb.w	r0, [sp, #148]	; 0x94
 801023a:	e6b3      	b.n	800ffa4 <lv_draw_sw_rect+0xbac>
                blend_dsc.mask_buf = mask_buf;
 801023c:	9524      	str	r5, [sp, #144]	; 0x90
 801023e:	f7ff bb6f 	b.w	800f920 <lv_draw_sw_rect+0x528>
        if(w > 0) {
 8010242:	2e00      	cmp	r6, #0
 8010244:	f77f ab27 	ble.w	800f896 <lv_draw_sw_rect+0x49e>
                blend_dsc.mask_buf = mask_buf;
 8010248:	9524      	str	r5, [sp, #144]	; 0x90
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801024a:	9b06      	ldr	r3, [sp, #24]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801024c:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8010250:	eba8 0809 	sub.w	r8, r8, r9
 8010254:	fb0b 3808 	mla	r8, fp, r8, r3
            blend_area.x1 = clip_area_sub.x1;
 8010258:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801025c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            blend_area.x2 = clip_area_sub.x2;
 8010260:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8010264:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010268:	f04f 0902 	mov.w	r9, #2
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801026c:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 8010270:	42bb      	cmp	r3, r7
 8010272:	f6ff ab10 	blt.w	800f896 <lv_draw_sw_rect+0x49e>
                if(!simple_sub) {
 8010276:	9b05      	ldr	r3, [sp, #20]
                blend_area.y1 = y;
 8010278:	f8ad 705e 	strh.w	r7, [sp, #94]	; 0x5e
                blend_area.y2 = y;
 801027c:	f8ad 7062 	strh.w	r7, [sp, #98]	; 0x62
                if(!simple_sub) {
 8010280:	f898 1000 	ldrb.w	r1, [r8]
 8010284:	2b00      	cmp	r3, #0
 8010286:	f47f ae69 	bne.w	800ff5c <lv_draw_sw_rect+0xb64>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801028a:	4632      	mov	r2, r6
 801028c:	4628      	mov	r0, r5
 801028e:	f003 fa06 	bl	801369e <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8010292:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8010296:	4633      	mov	r3, r6
 8010298:	463a      	mov	r2, r7
 801029a:	4628      	mov	r0, r5
 801029c:	f7fa fbe2 	bl	800aa64 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80102a0:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80102a2:	bf14      	ite	ne
 80102a4:	f88d 0094 	strbne.w	r0, [sp, #148]	; 0x94
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80102a8:	f88d 9094 	strbeq.w	r9, [sp, #148]	; 0x94
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80102ac:	a921      	add	r1, sp, #132	; 0x84
 80102ae:	4620      	mov	r0, r4
 80102b0:	3701      	adds	r7, #1
 80102b2:	f7fc f9da 	bl	800c66a <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 80102b6:	44d8      	add	r8, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80102b8:	b23f      	sxth	r7, r7
 80102ba:	e7d7      	b.n	801026c <lv_draw_sw_rect+0xe74>

080102bc <transform_point_upscaled>:
    }
}

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 80102bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 80102be:	e9d0 7506 	ldrd	r7, r5, [r0, #24]
{
 80102c2:	9e05      	ldr	r6, [sp, #20]
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 80102c4:	b93d      	cbnz	r5, 80102d6 <transform_point_upscaled+0x1a>
 80102c6:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80102ca:	d104      	bne.n	80102d6 <transform_point_upscaled+0x1a>
        *xout = xin * 256;
 80102cc:	0209      	lsls	r1, r1, #8
 80102ce:	6019      	str	r1, [r3, #0]
        *yout = yin * 256;
 80102d0:	0212      	lsls	r2, r2, #8
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 80102d2:	6032      	str	r2, [r6, #0]
    }
}
 80102d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    xin -= t->pivot.x;
 80102d6:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	; 0x28
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 80102da:	f8d0 c020 	ldr.w	ip, [r0, #32]
    xin -= t->pivot.x;
 80102de:	1b09      	subs	r1, r1, r4
    yin -= t->pivot.y;
 80102e0:	f9b0 402a 	ldrsh.w	r4, [r0, #42]	; 0x2a
 80102e4:	1b12      	subs	r2, r2, r4
    if(t->angle == 0) {
 80102e6:	b93d      	cbnz	r5, 80102f8 <transform_point_upscaled+0x3c>
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 80102e8:	fb07 c401 	mla	r4, r7, r1, ip
 80102ec:	601c      	str	r4, [r3, #0]
        *yout = ((int32_t)(yin * t->zoom)) + (t->pivot_y_256);
 80102ee:	6981      	ldr	r1, [r0, #24]
 80102f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80102f2:	fb01 3202 	mla	r2, r1, r2, r3
 80102f6:	e7ec      	b.n	80102d2 <transform_point_upscaled+0x16>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 80102f8:	6945      	ldr	r5, [r0, #20]
 80102fa:	6904      	ldr	r4, [r0, #16]
 80102fc:	434d      	muls	r5, r1
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 80102fe:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 8010302:	fb04 5512 	mls	r5, r4, r2, r5
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 8010306:	d10b      	bne.n	8010320 <transform_point_upscaled+0x64>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 8010308:	eb0c 04a5 	add.w	r4, ip, r5, asr #2
 801030c:	601c      	str	r4, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 801030e:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 8010312:	435a      	muls	r2, r3
 8010314:	fb04 2201 	mla	r2, r4, r1, r2
 8010318:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801031a:	eb01 02a2 	add.w	r2, r1, r2, asr #2
 801031e:	e7d8      	b.n	80102d2 <transform_point_upscaled+0x16>
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
 8010320:	437d      	muls	r5, r7
 8010322:	eb0c 24a5 	add.w	r4, ip, r5, asr #10
 8010326:	601c      	str	r4, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 8010328:	e9d0 3404 	ldrd	r3, r4, [r0, #16]
 801032c:	4362      	muls	r2, r4
 801032e:	fb03 2201 	mla	r2, r3, r1, r2
 8010332:	6983      	ldr	r3, [r0, #24]
 8010334:	435a      	muls	r2, r3
 8010336:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010338:	eb03 22a2 	add.w	r2, r3, r2, asr #10
 801033c:	e7c9      	b.n	80102d2 <transform_point_upscaled+0x16>

0801033e <lv_draw_sw_transform>:
{
 801033e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010342:	b0a7      	sub	sp, #156	; 0x9c
 8010344:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010348:	9309      	str	r3, [sp, #36]	; 0x24
 801034a:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 801034e:	930a      	str	r3, [sp, #40]	; 0x28
 8010350:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8010354:	930d      	str	r3, [sp, #52]	; 0x34
    tr_dsc.angle = -draw_dsc->angle;
 8010356:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 8010358:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    tr_dsc.angle = -draw_dsc->angle;
 801035a:	f9b3 3000 	ldrsh.w	r3, [r3]
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 801035e:	8851      	ldrh	r1, [r2, #2]
{
 8010360:	f89d 90cc 	ldrb.w	r9, [sp, #204]	; 0xcc
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 8010364:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010368:	fbb2 f2f1 	udiv	r2, r2, r1
 801036c:	9221      	str	r2, [sp, #132]	; 0x84
    tr_dsc.pivot = draw_dsc->pivot;
 801036e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    tr_dsc.angle = -draw_dsc->angle;
 8010370:	425d      	negs	r5, r3
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 8010372:	f06f 0609 	mvn.w	r6, #9
    tr_dsc.pivot = draw_dsc->pivot;
 8010376:	6852      	ldr	r2, [r2, #4]
    tr_dsc.angle = -draw_dsc->angle;
 8010378:	9522      	str	r5, [sp, #136]	; 0x88
    int32_t angle_low = tr_dsc.angle / 10;
 801037a:	270a      	movs	r7, #10
 801037c:	fb95 f5f7 	sdiv	r5, r5, r7
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 8010380:	436e      	muls	r6, r5
    int32_t s1 = lv_trigo_sin(angle_low);
 8010382:	b228      	sxth	r0, r5
 8010384:	1af6      	subs	r6, r6, r3
    tr_dsc.pivot = draw_dsc->pivot;
 8010386:	9225      	str	r2, [sp, #148]	; 0x94
    int32_t s1 = lv_trigo_sin(angle_low);
 8010388:	f002 fef6 	bl	8013178 <lv_trigo_sin>
    int32_t angle_high = angle_low + 1;
 801038c:	1c6c      	adds	r4, r5, #1
    int32_t s1 = lv_trigo_sin(angle_low);
 801038e:	4682      	mov	sl, r0
    int32_t s2 = lv_trigo_sin(angle_high);
 8010390:	b220      	sxth	r0, r4
 8010392:	f002 fef1 	bl	8013178 <lv_trigo_sin>
 8010396:	4604      	mov	r4, r0
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 8010398:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801039c:	b200      	sxth	r0, r0
 801039e:	f002 feeb 	bl	8013178 <lv_trigo_sin>
 80103a2:	4680      	mov	r8, r0
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 80103a4:	f105 005b 	add.w	r0, r5, #91	; 0x5b
 80103a8:	b200      	sxth	r0, r0
 80103aa:	f002 fee5 	bl	8013178 <lv_trigo_sin>
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80103ae:	4374      	muls	r4, r6
 80103b0:	1bbb      	subs	r3, r7, r6
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80103b2:	4370      	muls	r0, r6
 80103b4:	fb03 0808 	mla	r8, r3, r8, r0
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80103b8:	fb03 440a 	mla	r4, r3, sl, r4
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 80103bc:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80103c0:	9a02      	ldr	r2, [sp, #8]
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80103c2:	fb94 f4f7 	sdiv	r4, r4, r7
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 80103c6:	021b      	lsls	r3, r3, #8
 80103c8:	9323      	str	r3, [sp, #140]	; 0x8c
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 80103ca:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80103ce:	8812      	ldrh	r2, [r2, #0]
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80103d0:	fb98 f7f7 	sdiv	r7, r8, r7
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 80103d4:	021b      	lsls	r3, r3, #8
 80103d6:	9324      	str	r3, [sp, #144]	; 0x90
 80103d8:	9b02      	ldr	r3, [sp, #8]
 80103da:	889b      	ldrh	r3, [r3, #4]
 80103dc:	3301      	adds	r3, #1
 80103de:	1a9b      	subs	r3, r3, r2
 80103e0:	fa0f f883 	sxth.w	r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80103e4:	9b02      	ldr	r3, [sp, #8]
 80103e6:	9a02      	ldr	r2, [sp, #8]
 80103e8:	88db      	ldrh	r3, [r3, #6]
 80103ea:	8852      	ldrh	r2, [r2, #2]
 80103ec:	3301      	adds	r3, #1
 80103ee:	1a9b      	subs	r3, r3, r2
 80103f0:	b21b      	sxth	r3, r3
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 80103f2:	1164      	asrs	r4, r4, #5
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 80103f4:	117f      	asrs	r7, r7, #5
 80103f6:	9313      	str	r3, [sp, #76]	; 0x4c
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 80103f8:	941f      	str	r4, [sp, #124]	; 0x7c
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 80103fa:	9720      	str	r7, [sp, #128]	; 0x80
    for(y = 0; y < dest_h; y++) {
 80103fc:	2300      	movs	r3, #0
 80103fe:	9306      	str	r3, [sp, #24]
 8010400:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8010404:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010406:	429a      	cmp	r2, r3
 8010408:	dc02      	bgt.n	8010410 <lv_draw_sw_transform+0xd2>
}
 801040a:	b027      	add	sp, #156	; 0x9c
 801040c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 8010410:	9b02      	ldr	r3, [sp, #8]
 8010412:	9906      	ldr	r1, [sp, #24]
 8010414:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010418:	ab18      	add	r3, sp, #96	; 0x60
 801041a:	440a      	add	r2, r1
 801041c:	9902      	ldr	r1, [sp, #8]
 801041e:	9300      	str	r3, [sp, #0]
 8010420:	f9b1 1000 	ldrsh.w	r1, [r1]
 8010424:	ab17      	add	r3, sp, #92	; 0x5c
 8010426:	a81b      	add	r0, sp, #108	; 0x6c
 8010428:	f7ff ff48 	bl	80102bc <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 801042c:	9b02      	ldr	r3, [sp, #8]
 801042e:	9906      	ldr	r1, [sp, #24]
 8010430:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010434:	ab1a      	add	r3, sp, #104	; 0x68
 8010436:	440a      	add	r2, r1
 8010438:	9902      	ldr	r1, [sp, #8]
 801043a:	9300      	str	r3, [sp, #0]
 801043c:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8010440:	ab19      	add	r3, sp, #100	; 0x64
 8010442:	f7ff ff3b 	bl	80102bc <transform_point_upscaled>
        if(dest_w > 1) {
 8010446:	f1b8 0f01 	cmp.w	r8, #1
        int32_t xs_diff = xs2_ups - xs1_ups;
 801044a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801044c:	9917      	ldr	r1, [sp, #92]	; 0x5c
        int32_t ys_diff = ys2_ups - ys1_ups;
 801044e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010450:	9a18      	ldr	r2, [sp, #96]	; 0x60
        if(dest_w > 1) {
 8010452:	dd4e      	ble.n	80104f2 <lv_draw_sw_transform+0x1b4>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 8010454:	f108 30ff 	add.w	r0, r8, #4294967295
        int32_t xs_diff = xs2_ups - xs1_ups;
 8010458:	1a64      	subs	r4, r4, r1
        int32_t ys_diff = ys2_ups - ys1_ups;
 801045a:	1a9b      	subs	r3, r3, r2
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 801045c:	b200      	sxth	r0, r0
 801045e:	0224      	lsls	r4, r4, #8
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 8010460:	021b      	lsls	r3, r3, #8
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 8010462:	fb94 f4f0 	sdiv	r4, r4, r0
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 8010466:	fb93 f3f0 	sdiv	r3, r3, r0
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 801046a:	940b      	str	r4, [sp, #44]	; 0x2c
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 801046c:	9305      	str	r3, [sp, #20]
        int32_t xs_ups = xs1_ups + 0x80;
 801046e:	f101 0380 	add.w	r3, r1, #128	; 0x80
 8010472:	930e      	str	r3, [sp, #56]	; 0x38
        int32_t ys_ups = ys1_ups + 0x80;
 8010474:	f102 0380 	add.w	r3, r2, #128	; 0x80
 8010478:	930f      	str	r3, [sp, #60]	; 0x3c
        if(draw_dsc->antialias == 0) {
 801047a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801047c:	7c1b      	ldrb	r3, [r3, #16]
 801047e:	f013 0501 	ands.w	r5, r3, #1
 8010482:	d179      	bne.n	8010578 <lv_draw_sw_transform+0x23a>
            switch(cf) {
 8010484:	f1b9 0f05 	cmp.w	r9, #5
 8010488:	d037      	beq.n	80104fa <lv_draw_sw_transform+0x1bc>
 801048a:	f009 03fd 	and.w	r3, r9, #253	; 0xfd
 801048e:	2b04      	cmp	r3, #4
 8010490:	d13a      	bne.n	8010508 <lv_draw_sw_transform+0x1ca>
    lv_disp_t * d = _lv_refr_get_disp_refreshing();
 8010492:	f7f8 fd4b 	bl	8008f2c <_lv_refr_get_disp_refreshing>
    lv_color_t ck = d->driver->color_chroma_key;
 8010496:	6803      	ldr	r3, [r0, #0]
    lv_memset_ff(abuf, x_end);
 8010498:	9835      	ldr	r0, [sp, #212]	; 0xd4
    lv_color_t ck = d->driver->color_chroma_key;
 801049a:	f893 a038 	ldrb.w	sl, [r3, #56]	; 0x38
    lv_memset_ff(abuf, x_end);
 801049e:	4641      	mov	r1, r8
 80104a0:	f003 f956 	bl	8013750 <lv_memset_ff>
            abuf[x] = 0x00;
 80104a4:	462e      	mov	r6, r5
    for(x = 0; x < x_end; x++) {
 80104a6:	462b      	mov	r3, r5
 80104a8:	462a      	mov	r2, r5
 80104aa:	b211      	sxth	r1, r2
 80104ac:	4588      	cmp	r8, r1
 80104ae:	dd2b      	ble.n	8010508 <lv_draw_sw_transform+0x1ca>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 80104b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80104b2:	eb01 2023 	add.w	r0, r1, r3, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 80104b6:	1200      	asrs	r0, r0, #8
 80104b8:	d40a      	bmi.n	80104d0 <lv_draw_sw_transform+0x192>
 80104ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104bc:	4288      	cmp	r0, r1
 80104be:	da07      	bge.n	80104d0 <lv_draw_sw_transform+0x192>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 80104c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80104c2:	eb01 2125 	add.w	r1, r1, r5, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 80104c6:	1209      	asrs	r1, r1, #8
 80104c8:	d402      	bmi.n	80104d0 <lv_draw_sw_transform+0x192>
 80104ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80104cc:	42b9      	cmp	r1, r7
 80104ce:	db4b      	blt.n	8010568 <lv_draw_sw_transform+0x22a>
            abuf[x] = 0x00;
 80104d0:	9935      	ldr	r1, [sp, #212]	; 0xd4
 80104d2:	548e      	strb	r6, [r1, r2]
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 80104d4:	f1b9 0f06 	cmp.w	r9, #6
 80104d8:	d105      	bne.n	80104e6 <lv_draw_sw_transform+0x1a8>
 80104da:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80104dc:	5c89      	ldrb	r1, [r1, r2]
 80104de:	4551      	cmp	r1, sl
            abuf[x] = 0x00;
 80104e0:	bf04      	itt	eq
 80104e2:	9935      	ldreq	r1, [sp, #212]	; 0xd4
 80104e4:	548e      	strbeq	r6, [r1, r2]
    for(x = 0; x < x_end; x++) {
 80104e6:	9905      	ldr	r1, [sp, #20]
 80104e8:	440d      	add	r5, r1
 80104ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104ec:	3201      	adds	r2, #1
 80104ee:	440b      	add	r3, r1
 80104f0:	e7db      	b.n	80104aa <lv_draw_sw_transform+0x16c>
        int32_t ys_step_256 = 0;
 80104f2:	2300      	movs	r3, #0
 80104f4:	9305      	str	r3, [sp, #20]
        int32_t xs_step_256 = 0;
 80104f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80104f8:	e7b9      	b.n	801046e <lv_draw_sw_transform+0x130>
            switch(cf) {
 80104fa:	462b      	mov	r3, r5
 80104fc:	4628      	mov	r0, r5
 80104fe:	4629      	mov	r1, r5
            abuf[x] = 0;
 8010500:	462c      	mov	r4, r5
    for(x = 0; x < x_end; x++) {
 8010502:	b20a      	sxth	r2, r1
 8010504:	4590      	cmp	r8, r2
 8010506:	dc08      	bgt.n	801051a <lv_draw_sw_transform+0x1dc>
        cbuf += dest_w;
 8010508:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801050a:	4443      	add	r3, r8
 801050c:	9334      	str	r3, [sp, #208]	; 0xd0
        abuf += dest_w;
 801050e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8010510:	4443      	add	r3, r8
 8010512:	9335      	str	r3, [sp, #212]	; 0xd4
    for(y = 0; y < dest_h; y++) {
 8010514:	9b06      	ldr	r3, [sp, #24]
 8010516:	3301      	adds	r3, #1
 8010518:	e771      	b.n	80103fe <lv_draw_sw_transform+0xc0>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801051a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801051c:	eb02 2223 	add.w	r2, r2, r3, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8010520:	1215      	asrs	r5, r2, #8
 8010522:	d40a      	bmi.n	801053a <lv_draw_sw_transform+0x1fc>
 8010524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010526:	4295      	cmp	r5, r2
 8010528:	da07      	bge.n	801053a <lv_draw_sw_transform+0x1fc>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801052a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801052c:	eb02 2220 	add.w	r2, r2, r0, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8010530:	1212      	asrs	r2, r2, #8
 8010532:	d402      	bmi.n	801053a <lv_draw_sw_transform+0x1fc>
 8010534:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010536:	42b2      	cmp	r2, r6
 8010538:	db07      	blt.n	801054a <lv_draw_sw_transform+0x20c>
            abuf[x] = 0;
 801053a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801053c:	5454      	strb	r4, [r2, r1]
    for(x = 0; x < x_end; x++) {
 801053e:	9a05      	ldr	r2, [sp, #20]
 8010540:	4410      	add	r0, r2
 8010542:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010544:	3101      	adds	r1, #1
 8010546:	4413      	add	r3, r2
 8010548:	e7db      	b.n	8010502 <lv_draw_sw_transform+0x1c4>
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801054a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801054c:	fb02 5206 	mla	r2, r2, r6, r5
            cbuf[x].full = src_tmp[0];
 8010550:	9e03      	ldr	r6, [sp, #12]
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8010552:	9d03      	ldr	r5, [sp, #12]
 8010554:	eb05 0542 	add.w	r5, r5, r2, lsl #1
            cbuf[x].full = src_tmp[0];
 8010558:	f816 2012 	ldrb.w	r2, [r6, r2, lsl #1]
 801055c:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 801055e:	5472      	strb	r2, [r6, r1]
            abuf[x] = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8010560:	786a      	ldrb	r2, [r5, #1]
 8010562:	9d35      	ldr	r5, [sp, #212]	; 0xd4
 8010564:	546a      	strb	r2, [r5, r1]
 8010566:	e7ea      	b.n	801053e <lv_draw_sw_transform+0x200>
            cbuf[x].full = src_tmp[0];
 8010568:	9f03      	ldr	r7, [sp, #12]
 801056a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801056c:	fb01 7104 	mla	r1, r1, r4, r7
 8010570:	5c09      	ldrb	r1, [r1, r0]
 8010572:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8010574:	5481      	strb	r1, [r0, r2]
 8010576:	e7ad      	b.n	80104d4 <lv_draw_sw_transform+0x196>
    switch(cf) {
 8010578:	f1b9 0f05 	cmp.w	r9, #5
 801057c:	d03a      	beq.n	80105f4 <lv_draw_sw_transform+0x2b6>
 801057e:	f1b9 0f06 	cmp.w	r9, #6
 8010582:	d009      	beq.n	8010598 <lv_draw_sw_transform+0x25a>
 8010584:	f1b9 0f04 	cmp.w	r9, #4
 8010588:	d1be      	bne.n	8010508 <lv_draw_sw_transform+0x1ca>
 801058a:	f04f 0c00 	mov.w	ip, #0
 801058e:	2301      	movs	r3, #1
 8010590:	9304      	str	r3, [sp, #16]
 8010592:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8010596:	e007      	b.n	80105a8 <lv_draw_sw_transform+0x26a>
                lv_disp_t * d = _lv_refr_get_disp_refreshing();
 8010598:	f7f8 fcc8 	bl	8008f2c <_lv_refr_get_disp_refreshing>
                ck = d->driver->color_chroma_key;
 801059c:	6803      	ldr	r3, [r0, #0]
 801059e:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
                px_size = sizeof(lv_color_t);
 80105a2:	2301      	movs	r3, #1
 80105a4:	9304      	str	r3, [sp, #16]
            has_alpha = true;
 80105a6:	9310      	str	r3, [sp, #64]	; 0x40
    for(x = 0; x < x_end; x++) {
 80105a8:	e9dd 3634 	ldrd	r3, r6, [sp, #208]	; 0xd0
 80105ac:	9308      	str	r3, [sp, #32]
 80105ae:	2300      	movs	r3, #0
 80105b0:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 80105b4:	9307      	str	r3, [sp, #28]
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 80105b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105b8:	3b01      	subs	r3, #1
 80105ba:	9314      	str	r3, [sp, #80]	; 0x50
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 80105bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105be:	3b01      	subs	r3, #1
 80105c0:	9315      	str	r3, [sp, #84]	; 0x54
    for(x = 0; x < x_end; x++) {
 80105c2:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 80105c6:	4598      	cmp	r8, r3
 80105c8:	dd9e      	ble.n	8010508 <lv_draw_sw_transform+0x1ca>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 80105ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105cc:	9a07      	ldr	r2, [sp, #28]
 80105ce:	eb03 2422 	add.w	r4, r3, r2, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 80105d2:	1225      	asrs	r5, r4, #8
 80105d4:	d40b      	bmi.n	80105ee <lv_draw_sw_transform+0x2b0>
 80105d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105d8:	429d      	cmp	r5, r3
 80105da:	da08      	bge.n	80105ee <lv_draw_sw_transform+0x2b0>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 80105dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80105de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80105e0:	eb03 2022 	add.w	r0, r3, r2, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 80105e4:	1201      	asrs	r1, r0, #8
 80105e6:	d402      	bmi.n	80105ee <lv_draw_sw_transform+0x2b0>
 80105e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105ea:	4299      	cmp	r1, r3
 80105ec:	db08      	blt.n	8010600 <lv_draw_sw_transform+0x2c2>
                abuf[x] = 0x00;
 80105ee:	f04f 0300 	mov.w	r3, #0
 80105f2:	e0da      	b.n	80107aa <lv_draw_sw_transform+0x46c>
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 80105f4:	2302      	movs	r3, #2
 80105f6:	9304      	str	r3, [sp, #16]
    lv_color_t ck = {0};
 80105f8:	f04f 0c00 	mov.w	ip, #0
            has_alpha = true;
 80105fc:	2301      	movs	r3, #1
 80105fe:	e7d2      	b.n	80105a6 <lv_draw_sw_transform+0x268>
        int32_t xs_fract = xs_ups & 0xFF;
 8010600:	b2e2      	uxtb	r2, r4
        if(xs_fract < 0x80) {
 8010602:	0624      	lsls	r4, r4, #24
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8010604:	9c0d      	ldr	r4, [sp, #52]	; 0x34
            xs_fract = (0x7F - xs_fract) * 2;
 8010606:	bf55      	itete	pl
 8010608:	f1c2 027f 	rsbpl	r2, r2, #127	; 0x7f
            xs_fract = (xs_fract - 0x80) * 2;
 801060c:	3a80      	submi	r2, #128	; 0x80
            xs_fract = (0x7F - xs_fract) * 2;
 801060e:	0052      	lslpl	r2, r2, #1
            xs_fract = (xs_fract - 0x80) * 2;
 8010610:	0052      	lslmi	r2, r2, #1
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8010612:	fb04 5e01 	mla	lr, r4, r1, r5
 8010616:	9c04      	ldr	r4, [sp, #16]
            xs_fract = (0x7F - xs_fract) * 2;
 8010618:	bf58      	it	pl
 801061a:	920c      	strpl	r2, [sp, #48]	; 0x30
        int32_t ys_fract = ys_ups & 0xFF;
 801061c:	b2c3      	uxtb	r3, r0
            x_next = -1;
 801061e:	bf52      	itee	pl
 8010620:	f04f 37ff 	movpl.w	r7, #4294967295
            x_next = 1;
 8010624:	2701      	movmi	r7, #1
            xs_fract = (xs_fract - 0x80) * 2;
 8010626:	920c      	strmi	r2, [sp, #48]	; 0x30
        if(ys_fract < 0x80) {
 8010628:	0600      	lsls	r0, r0, #24
            ys_fract = (0x7F - ys_fract) * 2;
 801062a:	bf54      	ite	pl
 801062c:	f1c3 037f 	rsbpl	r3, r3, #127	; 0x7f
            ys_fract = (ys_fract - 0x80) * 2;
 8010630:	3b80      	submi	r3, #128	; 0x80
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8010632:	fb04 fe0e 	mul.w	lr, r4, lr
        if(xs_int + x_next >= 0 &&
 8010636:	eb05 0a07 	add.w	sl, r5, r7
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 801063a:	9c03      	ldr	r4, [sp, #12]
            ys_fract = (0x7F - ys_fract) * 2;
 801063c:	bf59      	ittee	pl
 801063e:	005b      	lslpl	r3, r3, #1
            y_next = -1;
 8010640:	f04f 30ff 	movpl.w	r0, #4294967295
            ys_fract = (ys_fract - 0x80) * 2;
 8010644:	005b      	lslmi	r3, r3, #1
            y_next = 1;
 8010646:	2001      	movmi	r0, #1
        if(xs_int + x_next >= 0 &&
 8010648:	f1ba 3fff 	cmp.w	sl, #4294967295
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 801064c:	4474      	add	r4, lr
        if(xs_int + x_next >= 0 &&
 801064e:	d073      	beq.n	8010738 <lv_draw_sw_transform+0x3fa>
 8010650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010652:	4552      	cmp	r2, sl
 8010654:	dd70      	ble.n	8010738 <lv_draw_sw_transform+0x3fa>
           ys_int + y_next >= 0 &&
 8010656:	eb01 0b00 	add.w	fp, r1, r0
           xs_int + x_next <= src_w - 1 &&
 801065a:	f1bb 3fff 	cmp.w	fp, #4294967295
 801065e:	d06b      	beq.n	8010738 <lv_draw_sw_transform+0x3fa>
           ys_int + y_next >= 0 &&
 8010660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010662:	455a      	cmp	r2, fp
 8010664:	dd68      	ble.n	8010738 <lv_draw_sw_transform+0x3fa>
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 8010666:	9a04      	ldr	r2, [sp, #16]
 8010668:	4357      	muls	r7, r2
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 801066a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801066c:	4350      	muls	r0, r2
 801066e:	9a04      	ldr	r2, [sp, #16]
 8010670:	4350      	muls	r0, r2
            if(has_alpha) {
 8010672:	9a10      	ldr	r2, [sp, #64]	; 0x40
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 8010674:	19e5      	adds	r5, r4, r7
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 8010676:	1821      	adds	r1, r4, r0
            if(has_alpha) {
 8010678:	2a00      	cmp	r2, #0
 801067a:	d04d      	beq.n	8010718 <lv_draw_sw_transform+0x3da>
                if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801067c:	f1b9 0f05 	cmp.w	r9, #5
 8010680:	d12e      	bne.n	80106e0 <lv_draw_sw_transform+0x3a2>
                    a_base = px_base[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8010682:	f894 a001 	ldrb.w	sl, [r4, #1]
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8010686:	7849      	ldrb	r1, [r1, #1]
                    a_hor = px_hor[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8010688:	786d      	ldrb	r5, [r5, #1]
                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 801068a:	458a      	cmp	sl, r1
 801068c:	d13c      	bne.n	8010708 <lv_draw_sw_transform+0x3ca>
                if(a_hor != a_base) a_hor = ((a_hor * xs_fract) + (a_base * (0x100 - xs_fract))) >> 8;
 801068e:	45aa      	cmp	sl, r5
 8010690:	d007      	beq.n	80106a2 <lv_draw_sw_transform+0x364>
 8010692:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010694:	f5c2 7b80 	rsb	fp, r2, #256	; 0x100
 8010698:	4355      	muls	r5, r2
 801069a:	fb0a 550b 	mla	r5, sl, fp, r5
 801069e:	f3c5 2507 	ubfx	r5, r5, #8, #8
                abuf[x] = (a_ver + a_hor) >> 1;
 80106a2:	4429      	add	r1, r5
 80106a4:	1049      	asrs	r1, r1, #1
 80106a6:	7031      	strb	r1, [r6, #0]
                if(abuf[x] == 0x00) continue;
 80106a8:	b151      	cbz	r1, 80106c0 <lv_draw_sw_transform+0x382>
                c_base.full = px_base[0];
 80106aa:	9a03      	ldr	r2, [sp, #12]
                c_hor.full = px_hor[0];
 80106ac:	5de5      	ldrb	r5, [r4, r7]
                c_base.full = px_base[0];
 80106ae:	f812 100e 	ldrb.w	r1, [r2, lr]
                c_ver.full = px_ver[0];
 80106b2:	5c22      	ldrb	r2, [r4, r0]
            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 80106b4:	4291      	cmp	r1, r2
 80106b6:	d138      	bne.n	801072a <lv_draw_sw_transform+0x3ec>
 80106b8:	42a9      	cmp	r1, r5
 80106ba:	d136      	bne.n	801072a <lv_draw_sw_transform+0x3ec>
                cbuf[x] = c_base;
 80106bc:	9b08      	ldr	r3, [sp, #32]
 80106be:	7019      	strb	r1, [r3, #0]
    for(x = 0; x < x_end; x++) {
 80106c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80106c2:	9a05      	ldr	r2, [sp, #20]
 80106c4:	3301      	adds	r3, #1
 80106c6:	9311      	str	r3, [sp, #68]	; 0x44
 80106c8:	9b08      	ldr	r3, [sp, #32]
 80106ca:	3301      	adds	r3, #1
 80106cc:	9308      	str	r3, [sp, #32]
 80106ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80106d0:	4413      	add	r3, r2
 80106d2:	9312      	str	r3, [sp, #72]	; 0x48
 80106d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80106d6:	9b07      	ldr	r3, [sp, #28]
 80106d8:	4413      	add	r3, r2
 80106da:	3601      	adds	r6, #1
 80106dc:	9307      	str	r3, [sp, #28]
 80106de:	e770      	b.n	80105c2 <lv_draw_sw_transform+0x284>
                else if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80106e0:	f1b9 0f06 	cmp.w	r9, #6
 80106e4:	d10d      	bne.n	8010702 <lv_draw_sw_transform+0x3c4>
                    if(((lv_color_t *)px_base)->full == ck.full ||
 80106e6:	9a03      	ldr	r2, [sp, #12]
 80106e8:	f812 200e 	ldrb.w	r2, [r2, lr]
 80106ec:	4562      	cmp	r2, ip
 80106ee:	f43f af7e 	beq.w	80105ee <lv_draw_sw_transform+0x2b0>
 80106f2:	5c22      	ldrb	r2, [r4, r0]
 80106f4:	4562      	cmp	r2, ip
 80106f6:	f43f af7a 	beq.w	80105ee <lv_draw_sw_transform+0x2b0>
                       ((lv_color_t *)px_ver)->full == ck.full ||
 80106fa:	5de2      	ldrb	r2, [r4, r7]
 80106fc:	4562      	cmp	r2, ip
 80106fe:	f43f af76 	beq.w	80105ee <lv_draw_sw_transform+0x2b0>
 8010702:	21ff      	movs	r1, #255	; 0xff
 8010704:	460d      	mov	r5, r1
 8010706:	e7cc      	b.n	80106a2 <lv_draw_sw_transform+0x364>
                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 8010708:	f5c3 7b80 	rsb	fp, r3, #256	; 0x100
 801070c:	4359      	muls	r1, r3
 801070e:	fb0a 110b 	mla	r1, sl, fp, r1
 8010712:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010716:	e7ba      	b.n	801068e <lv_draw_sw_transform+0x350>
                c_base = *((const lv_color_t *) px_base);
 8010718:	9a03      	ldr	r2, [sp, #12]
                c_hor = *((const lv_color_t *) px_hor);
 801071a:	5de5      	ldrb	r5, [r4, r7]
                c_base = *((const lv_color_t *) px_base);
 801071c:	f812 100e 	ldrb.w	r1, [r2, lr]
                c_ver = *((const lv_color_t *) px_ver);
 8010720:	5c22      	ldrb	r2, [r4, r0]
                abuf[x] = 0xff;
 8010722:	f04f 30ff 	mov.w	r0, #4294967295
 8010726:	7030      	strb	r0, [r6, #0]
 8010728:	e7c4      	b.n	80106b4 <lv_draw_sw_transform+0x376>
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 801072a:	f013 0f80 	tst.w	r3, #128	; 0x80
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 801072e:	9b08      	ldr	r3, [sp, #32]
 8010730:	bf08      	it	eq
 8010732:	460a      	moveq	r2, r1
 8010734:	701a      	strb	r2, [r3, #0]
 8010736:	e7c3      	b.n	80106c0 <lv_draw_sw_transform+0x382>
            cbuf[x].full = src_tmp[0];
 8010738:	9a03      	ldr	r2, [sp, #12]
 801073a:	f812 e00e 	ldrb.w	lr, [r2, lr]
 801073e:	9a08      	ldr	r2, [sp, #32]
            switch(cf) {
 8010740:	f1b9 0f05 	cmp.w	r9, #5
            cbuf[x].full = src_tmp[0];
 8010744:	f882 e000 	strb.w	lr, [r2]
            switch(cf) {
 8010748:	d015      	beq.n	8010776 <lv_draw_sw_transform+0x438>
 801074a:	f1b9 0f06 	cmp.w	r9, #6
 801074e:	d015      	beq.n	801077c <lv_draw_sw_transform+0x43e>
 8010750:	f04f 0eff 	mov.w	lr, #255	; 0xff
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 8010754:	b915      	cbnz	r5, 801075c <lv_draw_sw_transform+0x41e>
 8010756:	f1ba 3fff 	cmp.w	sl, #4294967295
 801075a:	d004      	beq.n	8010766 <lv_draw_sw_transform+0x428>
 801075c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801075e:	4295      	cmp	r5, r2
 8010760:	d114      	bne.n	801078c <lv_draw_sw_transform+0x44e>
 8010762:	2f01      	cmp	r7, #1
 8010764:	d112      	bne.n	801078c <lv_draw_sw_transform+0x44e>
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 8010766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010768:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 801076c:	fb0e f202 	mul.w	r2, lr, r2
 8010770:	1212      	asrs	r2, r2, #8
 8010772:	7032      	strb	r2, [r6, #0]
 8010774:	e7a4      	b.n	80106c0 <lv_draw_sw_transform+0x382>
                    a = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8010776:	f894 e001 	ldrb.w	lr, [r4, #1]
                    break;
 801077a:	e7eb      	b.n	8010754 <lv_draw_sw_transform+0x416>
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 801077c:	ebbc 0e0e 	subs.w	lr, ip, lr
 8010780:	bf18      	it	ne
 8010782:	f04f 3eff 	movne.w	lr, #4294967295
 8010786:	fa5f fe8e 	uxtb.w	lr, lr
 801078a:	e7e3      	b.n	8010754 <lv_draw_sw_transform+0x416>
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 801078c:	b909      	cbnz	r1, 8010792 <lv_draw_sw_transform+0x454>
 801078e:	1c42      	adds	r2, r0, #1
 8010790:	d006      	beq.n	80107a0 <lv_draw_sw_transform+0x462>
 8010792:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010794:	4291      	cmp	r1, r2
 8010796:	f47f af2a 	bne.w	80105ee <lv_draw_sw_transform+0x2b0>
 801079a:	2801      	cmp	r0, #1
 801079c:	f47f af27 	bne.w	80105ee <lv_draw_sw_transform+0x2b0>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 80107a0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80107a4:	fb0e f303 	mul.w	r3, lr, r3
 80107a8:	121b      	asrs	r3, r3, #8
                abuf[x] = 0x00;
 80107aa:	7033      	strb	r3, [r6, #0]
 80107ac:	e788      	b.n	80106c0 <lv_draw_sw_transform+0x382>

080107ae <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80107ae:	8883      	ldrh	r3, [r0, #4]
 80107b0:	8800      	ldrh	r0, [r0, #0]
 80107b2:	3301      	adds	r3, #1
 80107b4:	1a18      	subs	r0, r3, r0
}
 80107b6:	b200      	sxth	r0, r0
 80107b8:	4770      	bx	lr

080107ba <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80107ba:	88c3      	ldrh	r3, [r0, #6]
 80107bc:	8840      	ldrh	r0, [r0, #2]
 80107be:	3301      	adds	r3, #1
 80107c0:	1a18      	subs	r0, r3, r0
}
 80107c2:	b200      	sxth	r0, r0
 80107c4:	4770      	bx	lr

080107c6 <place_content>:
/**
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt,
                          lv_coord_t * start_pos, lv_coord_t * gap)
{
 80107c6:	b570      	push	{r4, r5, r6, lr}
    if(item_cnt <= 1) {
 80107c8:	2b01      	cmp	r3, #1
{
 80107ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    if(item_cnt <= 1) {
 80107ce:	dc02      	bgt.n	80107d6 <place_content+0x10>
        switch(place) {
 80107d0:	1ec6      	subs	r6, r0, #3
 80107d2:	2e02      	cmp	r6, #2
 80107d4:	d907      	bls.n	80107e6 <place_content+0x20>
            default:
                break;
        }
    }

    switch(place) {
 80107d6:	3801      	subs	r0, #1
 80107d8:	2804      	cmp	r0, #4
 80107da:	d835      	bhi.n	8010848 <place_content+0x82>
 80107dc:	e8df f000 	tbb	[pc, r0]
 80107e0:	1b2a030d 	.word	0x1b2a030d
 80107e4:	13          	.byte	0x13
 80107e5:	00          	.byte	0x00
        case LV_FLEX_ALIGN_CENTER:
            *gap = 0;
 80107e6:	2300      	movs	r3, #0
 80107e8:	802b      	strh	r3, [r5, #0]
            *start_pos += (max_size - content_size) / 2;
 80107ea:	8823      	ldrh	r3, [r4, #0]
 80107ec:	1a89      	subs	r1, r1, r2
 80107ee:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80107f2:	eb03 0161 	add.w	r1, r3, r1, asr #1
            break;
        case LV_FLEX_ALIGN_END:
            *gap = 0;
            *start_pos += max_size - content_size;
 80107f6:	8021      	strh	r1, [r4, #0]
            *start_pos += *gap;
            break;
        default:
            *gap = 0;
    }
}
 80107f8:	bd70      	pop	{r4, r5, r6, pc}
            *gap = 0;
 80107fa:	2300      	movs	r3, #0
 80107fc:	802b      	strh	r3, [r5, #0]
            *start_pos += max_size - content_size;
 80107fe:	1a89      	subs	r1, r1, r2
 8010800:	8822      	ldrh	r2, [r4, #0]
 8010802:	4411      	add	r1, r2
 8010804:	e7f7      	b.n	80107f6 <place_content+0x30>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
 8010806:	1a89      	subs	r1, r1, r2
 8010808:	3b01      	subs	r3, #1
 801080a:	b209      	sxth	r1, r1
 801080c:	b21b      	sxth	r3, r3
 801080e:	fb91 f1f3 	sdiv	r1, r1, r3
 8010812:	8029      	strh	r1, [r5, #0]
            break;
 8010814:	e7f0      	b.n	80107f8 <place_content+0x32>
            *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
 8010816:	1a89      	subs	r1, r1, r2
 8010818:	b209      	sxth	r1, r1
 801081a:	fb91 f3f3 	sdiv	r3, r1, r3
 801081e:	8829      	ldrh	r1, [r5, #0]
 8010820:	440b      	add	r3, r1
 8010822:	b21b      	sxth	r3, r3
 8010824:	802b      	strh	r3, [r5, #0]
            *start_pos += *gap / 2;
 8010826:	8822      	ldrh	r2, [r4, #0]
 8010828:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801082c:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8010830:	8023      	strh	r3, [r4, #0]
            break;
 8010832:	e7e1      	b.n	80107f8 <place_content+0x32>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
 8010834:	1a89      	subs	r1, r1, r2
 8010836:	3301      	adds	r3, #1
 8010838:	b21b      	sxth	r3, r3
 801083a:	b209      	sxth	r1, r1
 801083c:	fb91 f1f3 	sdiv	r1, r1, r3
 8010840:	8029      	strh	r1, [r5, #0]
            *start_pos += *gap;
 8010842:	8823      	ldrh	r3, [r4, #0]
 8010844:	4419      	add	r1, r3
 8010846:	e7d6      	b.n	80107f6 <place_content+0x30>
            *gap = 0;
 8010848:	2300      	movs	r3, #0
 801084a:	802b      	strh	r3, [r5, #0]
}
 801084c:	e7d4      	b.n	80107f8 <place_content+0x32>

0801084e <get_next_item>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
        (*item_id)--;
 801084e:	6813      	ldr	r3, [r2, #0]
    if(rev) {
 8010850:	b151      	cbz	r1, 8010868 <get_next_item+0x1a>
        (*item_id)--;
 8010852:	3b01      	subs	r3, #1
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 8010854:	2b00      	cmp	r3, #0
        (*item_id)--;
 8010856:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 8010858:	da01      	bge.n	801085e <get_next_item+0x10>
        else return NULL;
 801085a:	2000      	movs	r0, #0
 801085c:	4770      	bx	lr
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 801085e:	6882      	ldr	r2, [r0, #8]
 8010860:	6812      	ldr	r2, [r2, #0]
    }
    else {
        (*item_id)++;
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 8010862:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        else return NULL;
    }
}
 8010866:	4770      	bx	lr
 8010868:	6881      	ldr	r1, [r0, #8]
        (*item_id)++;
 801086a:	3301      	adds	r3, #1
 801086c:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 801086e:	684a      	ldr	r2, [r1, #4]
 8010870:	4293      	cmp	r3, r2
 8010872:	daf2      	bge.n	801085a <get_next_item+0xc>
 8010874:	680a      	ldr	r2, [r1, #0]
 8010876:	e7f4      	b.n	8010862 <get_next_item+0x14>

08010878 <find_track_end>:
{
 8010878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801087c:	b087      	sub	sp, #28
 801087e:	460d      	mov	r5, r1
 8010880:	4617      	mov	r7, r2
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8010882:	2100      	movs	r1, #0
 8010884:	2201      	movs	r2, #1
 8010886:	9302      	str	r3, [sp, #8]
 8010888:	4606      	mov	r6, r0
 801088a:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 801088e:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8010892:	f7f6 fdfb 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8010896:	2204      	movs	r2, #4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8010898:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801089a:	2100      	movs	r1, #0
 801089c:	4630      	mov	r0, r6
 801089e:	f7f6 fdf5 	bl	800748c <lv_obj_get_style_prop>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 80108a2:	78ea      	ldrb	r2, [r5, #3]
 80108a4:	0793      	lsls	r3, r2, #30
 80108a6:	d50b      	bpl.n	80108c0 <find_track_end+0x48>
 80108a8:	f012 0f01 	tst.w	r2, #1
 80108ac:	f242 72d1 	movw	r2, #10193	; 0x27d1
 80108b0:	d00e      	beq.n	80108d0 <find_track_end+0x58>
 80108b2:	b224      	sxth	r4, r4
 80108b4:	4294      	cmp	r4, r2
 80108b6:	d106      	bne.n	80108c6 <find_track_end+0x4e>
        f->wrap = false;
 80108b8:	78ea      	ldrb	r2, [r5, #3]
 80108ba:	f36f 0241 	bfc	r2, #1, #1
 80108be:	70ea      	strb	r2, [r5, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 80108c0:	78ea      	ldrb	r2, [r5, #3]
 80108c2:	07d1      	lsls	r1, r2, #31
 80108c4:	d507      	bpl.n	80108d6 <find_track_end+0x5e>
 80108c6:	4b7c      	ldr	r3, [pc, #496]	; (8010ab8 <find_track_end+0x240>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 80108c8:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8010abc <find_track_end+0x244>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 80108cc:	9301      	str	r3, [sp, #4]
 80108ce:	e006      	b.n	80108de <find_track_end+0x66>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 80108d0:	b200      	sxth	r0, r0
 80108d2:	4290      	cmp	r0, r2
 80108d4:	d0f0      	beq.n	80108b8 <find_track_end+0x40>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 80108d6:	4b79      	ldr	r3, [pc, #484]	; (8010abc <find_track_end+0x244>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 80108d8:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8010ab8 <find_track_end+0x240>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 80108dc:	9301      	str	r3, [sp, #4]
    t->grow_item_cnt = 0;
 80108de:	2200      	movs	r2, #0
    t->grow_dsc = NULL;
 80108e0:	e9c9 2202 	strd	r2, r2, [r9, #8]
    t->grow_item_cnt = 0;
 80108e4:	f8c9 2010 	str.w	r2, [r9, #16]
    t->track_cross_size = 0;
 80108e8:	f8c9 2000 	str.w	r2, [r9]
    t->track_fix_main_size = 0;
 80108ec:	f8a9 2004 	strh.w	r2, [r9, #4]
    int32_t item_id = item_start_id;
 80108f0:	9705      	str	r7, [sp, #20]
    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 80108f2:	4639      	mov	r1, r7
        item = lv_obj_get_child(cont, item_id);
 80108f4:	4630      	mov	r0, r6
 80108f6:	f7f7 fbbc 	bl	8008072 <lv_obj_get_child>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 80108fa:	9a05      	ldr	r2, [sp, #20]
        item = lv_obj_get_child(cont, item_id);
 80108fc:	4604      	mov	r4, r0
    while(item) {
 80108fe:	b398      	cbz	r0, 8010968 <find_track_end+0xf0>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 8010900:	42ba      	cmp	r2, r7
 8010902:	d12a      	bne.n	801095a <find_track_end+0xe2>
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 8010904:	496e      	ldr	r1, [pc, #440]	; (8010ac0 <find_track_end+0x248>)
 8010906:	4620      	mov	r0, r4
 8010908:	f7f3 fb96 	bl	8004038 <lv_obj_has_flag_any>
 801090c:	4601      	mov	r1, r0
 801090e:	2800      	cmp	r0, #0
 8010910:	f040 80af 	bne.w	8010a72 <find_track_end+0x1fa>
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 8010914:	4b6b      	ldr	r3, [pc, #428]	; (8010ac4 <find_track_end+0x24c>)
 8010916:	4620      	mov	r0, r4
 8010918:	881a      	ldrh	r2, [r3, #0]
 801091a:	f7f6 fdb7 	bl	800748c <lv_obj_get_style_prop>
 801091e:	9003      	str	r0, [sp, #12]
            if(grow_value) {
 8010920:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8010924:	2a00      	cmp	r2, #0
 8010926:	f000 80b2 	beq.w	8010a8e <find_track_end+0x216>
                t->track_fix_main_size += item_gap;
 801092a:	f8b9 2004 	ldrh.w	r2, [r9, #4]
                t->grow_item_cnt++;
 801092e:	f8d9 0010 	ldr.w	r0, [r9, #16]
                t->track_fix_main_size += item_gap;
 8010932:	445a      	add	r2, fp
 8010934:	f8a9 2004 	strh.w	r2, [r9, #4]
                if(t->grow_dsc_calc) {
 8010938:	f899 2014 	ldrb.w	r2, [r9, #20]
                t->grow_item_cnt++;
 801093c:	3001      	adds	r0, #1
                if(t->grow_dsc_calc) {
 801093e:	07d2      	lsls	r2, r2, #31
                t->grow_item_cnt++;
 8010940:	f8c9 0010 	str.w	r0, [r9, #16]
                if(t->grow_dsc_calc) {
 8010944:	f140 8085 	bpl.w	8010a52 <find_track_end+0x1da>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
 8010948:	2214      	movs	r2, #20
 801094a:	4350      	muls	r0, r2
 801094c:	f002 fd3c 	bl	80133c8 <lv_mem_buf_get>
                    LV_ASSERT_MALLOC(new_dsc);
 8010950:	2214      	movs	r2, #20
 8010952:	4680      	mov	r8, r0
 8010954:	2800      	cmp	r0, #0
 8010956:	d138      	bne.n	80109ca <find_track_end+0x152>
 8010958:	e7fe      	b.n	8010958 <find_track_end+0xe0>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 801095a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 801095e:	4620      	mov	r0, r4
 8010960:	f7f3 fb63 	bl	800402a <lv_obj_has_flag>
 8010964:	2800      	cmp	r0, #0
 8010966:	d0cd      	beq.n	8010904 <find_track_end+0x8c>
    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 8010968:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801096c:	2a00      	cmp	r2, #0
 801096e:	bfc4      	itt	gt
 8010970:	eba2 020b 	subgt.w	r2, r2, fp
 8010974:	f8a9 2004 	strhgt.w	r2, [r9, #4]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 8010978:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801097c:	b912      	cbnz	r2, 8010984 <find_track_end+0x10c>
 801097e:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 8010982:	9302      	str	r3, [sp, #8]
 8010984:	9b02      	ldr	r3, [sp, #8]
 8010986:	f8a9 3002 	strh.w	r3, [r9, #2]
    if(item && item_id == item_start_id) {
 801098a:	b1d4      	cbz	r4, 80109c2 <find_track_end+0x14a>
 801098c:	9a05      	ldr	r2, [sp, #20]
 801098e:	4297      	cmp	r7, r2
 8010990:	d117      	bne.n	80109c2 <find_track_end+0x14a>
        item = cont->spec_attr->children[item_id];
 8010992:	68b2      	ldr	r2, [r6, #8]
        get_next_item(cont, f->rev, &item_id);
 8010994:	78e9      	ldrb	r1, [r5, #3]
        item = cont->spec_attr->children[item_id];
 8010996:	6812      	ldr	r2, [r2, #0]
 8010998:	f852 4027 	ldr.w	r4, [r2, r7, lsl #2]
        get_next_item(cont, f->rev, &item_id);
 801099c:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80109a0:	aa05      	add	r2, sp, #20
 80109a2:	4630      	mov	r0, r6
 80109a4:	f7ff ff53 	bl	801084e <get_next_item>
        if(item) {
 80109a8:	b15c      	cbz	r4, 80109c2 <find_track_end+0x14a>
            t->track_cross_size = get_cross_size(item);
 80109aa:	4620      	mov	r0, r4
 80109ac:	47d0      	blx	sl
            t->track_main_size = get_main_size(item);
 80109ae:	9b01      	ldr	r3, [sp, #4]
            t->track_cross_size = get_cross_size(item);
 80109b0:	f8a9 0000 	strh.w	r0, [r9]
            t->track_main_size = get_main_size(item);
 80109b4:	4620      	mov	r0, r4
 80109b6:	4798      	blx	r3
            t->item_cnt = 1;
 80109b8:	2201      	movs	r2, #1
            t->track_main_size = get_main_size(item);
 80109ba:	f8a9 0002 	strh.w	r0, [r9, #2]
            t->item_cnt = 1;
 80109be:	f8c9 2008 	str.w	r2, [r9, #8]
}
 80109c2:	9805      	ldr	r0, [sp, #20]
 80109c4:	b007      	add	sp, #28
 80109c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if(t->grow_dsc) {
 80109ca:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80109ce:	b149      	cbz	r1, 80109e4 <find_track_end+0x16c>
                        lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
 80109d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80109d4:	435a      	muls	r2, r3
 80109d6:	3a14      	subs	r2, #20
 80109d8:	f002 fd70 	bl	80134bc <lv_memcpy>
                        lv_mem_buf_release(t->grow_dsc);
 80109dc:	f8d9 000c 	ldr.w	r0, [r9, #12]
 80109e0:	f002 fd3e 	bl	8013460 <lv_mem_buf_release>
                    new_dsc[t->grow_item_cnt - 1].item = item;
 80109e4:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80109e8:	2114      	movs	r1, #20
 80109ea:	fb01 8202 	mla	r2, r1, r2, r8
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 80109ee:	78e9      	ldrb	r1, [r5, #3]
                    new_dsc[t->grow_item_cnt - 1].item = item;
 80109f0:	f842 4c14 	str.w	r4, [r2, #-20]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 80109f4:	f011 0101 	ands.w	r1, r1, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 80109f8:	bf1a      	itte	ne
 80109fa:	2202      	movne	r2, #2
 80109fc:	2100      	movne	r1, #0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 80109fe:	2205      	moveq	r2, #5
 8010a00:	4620      	mov	r0, r4
 8010a02:	f7f6 fd43 	bl	800748c <lv_obj_get_style_prop>
 8010a06:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010a0a:	2114      	movs	r1, #20
 8010a0c:	fb01 8202 	mla	r2, r1, r2, r8
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 8010a10:	78e9      	ldrb	r1, [r5, #3]
    return (lv_coord_t)v.num;
 8010a12:	b200      	sxth	r0, r0
 8010a14:	f011 0101 	ands.w	r1, r1, #1
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 8010a18:	f822 0c10 	strh.w	r0, [r2, #-16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8010a1c:	bf1a      	itte	ne
 8010a1e:	2100      	movne	r1, #0
 8010a20:	2203      	movne	r2, #3
}

static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8010a22:	2206      	moveq	r2, #6
 8010a24:	4620      	mov	r0, r4
 8010a26:	f7f6 fd31 	bl	800748c <lv_obj_get_style_prop>
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 8010a2a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010a2e:	2114      	movs	r1, #20
 8010a30:	fb01 8202 	mla	r2, r1, r2, r8
    return (lv_coord_t)v.num;
 8010a34:	b200      	sxth	r0, r0
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 8010a36:	f812 1c04 	ldrb.w	r1, [r2, #-4]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 8010a3a:	f822 0c0e 	strh.w	r0, [r2, #-14]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 8010a3e:	f36f 0100 	bfc	r1, #0, #1
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 8010a42:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8010a46:	f842 0c08 	str.w	r0, [r2, #-8]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 8010a4a:	f802 1c04 	strb.w	r1, [r2, #-4]
                    t->grow_dsc = new_dsc;
 8010a4e:	f8c9 800c 	str.w	r8, [r9, #12]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 8010a52:	4620      	mov	r0, r4
 8010a54:	47d0      	blx	sl
 8010a56:	f9b9 2000 	ldrsh.w	r2, [r9]
 8010a5a:	4290      	cmp	r0, r2
 8010a5c:	dd02      	ble.n	8010a64 <find_track_end+0x1ec>
 8010a5e:	4620      	mov	r0, r4
 8010a60:	47d0      	blx	sl
 8010a62:	4602      	mov	r2, r0
 8010a64:	f8a9 2000 	strh.w	r2, [r9]
            t->item_cnt++;
 8010a68:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8010a6c:	3201      	adds	r2, #1
 8010a6e:	f8c9 2008 	str.w	r2, [r9, #8]
        item_id += f->rev ? -1 : +1;
 8010a72:	78ea      	ldrb	r2, [r5, #3]
 8010a74:	f012 0f04 	tst.w	r2, #4
 8010a78:	9a05      	ldr	r2, [sp, #20]
 8010a7a:	bf14      	ite	ne
 8010a7c:	f04f 31ff 	movne.w	r1, #4294967295
 8010a80:	2101      	moveq	r1, #1
 8010a82:	4411      	add	r1, r2
        if(item_id < 0) break;
 8010a84:	2900      	cmp	r1, #0
        item_id += f->rev ? -1 : +1;
 8010a86:	9105      	str	r1, [sp, #20]
        if(item_id < 0) break;
 8010a88:	f6bf af34 	bge.w	80108f4 <find_track_end+0x7c>
 8010a8c:	e76c      	b.n	8010968 <find_track_end+0xf0>
                lv_coord_t item_size = get_main_size(item);
 8010a8e:	9b01      	ldr	r3, [sp, #4]
 8010a90:	4620      	mov	r0, r4
 8010a92:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 8010a94:	78ea      	ldrb	r2, [r5, #3]
 8010a96:	0793      	lsls	r3, r2, #30
 8010a98:	d506      	bpl.n	8010aa8 <find_track_end+0x230>
 8010a9a:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8010a9e:	9b02      	ldr	r3, [sp, #8]
 8010aa0:	4402      	add	r2, r0
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	f73f af60 	bgt.w	8010968 <find_track_end+0xf0>
                t->track_fix_main_size += item_size + item_gap;
 8010aa8:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8010aac:	445a      	add	r2, fp
 8010aae:	4410      	add	r0, r2
 8010ab0:	f8a9 0004 	strh.w	r0, [r9, #4]
 8010ab4:	e7cd      	b.n	8010a52 <find_track_end+0x1da>
 8010ab6:	bf00      	nop
 8010ab8:	08004f3d 	.word	0x08004f3d
 8010abc:	08004f49 	.word	0x08004f49
 8010ac0:	00060001 	.word	0x00060001
 8010ac4:	20000c7c 	.word	0x20000c7c

08010ac8 <flex_update>:
{
 8010ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010acc:	ed2d 8b02 	vpush	{d8}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 8010ad0:	4b9d      	ldr	r3, [pc, #628]	; (8010d48 <flex_update+0x280>)
 8010ad2:	b09f      	sub	sp, #124	; 0x7c
 8010ad4:	881a      	ldrh	r2, [r3, #0]
 8010ad6:	2100      	movs	r1, #0
 8010ad8:	4604      	mov	r4, r0
 8010ada:	f7f6 fcd7 	bl	800748c <lv_obj_get_style_prop>
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 8010ade:	43c3      	mvns	r3, r0
 8010ae0:	f3c0 0280 	ubfx	r2, r0, #2, #1
 8010ae4:	f003 0301 	and.w	r3, r3, #1
 8010ae8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8010aec:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8010af0:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8010af4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8010af8:	f022 0207 	bic.w	r2, r2, #7
 8010afc:	f003 0307 	and.w	r3, r3, #7
 8010b00:	4313      	orrs	r3, r2
 8010b02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 8010b06:	4b91      	ldr	r3, [pc, #580]	; (8010d4c <flex_update+0x284>)
 8010b08:	2100      	movs	r1, #0
 8010b0a:	881a      	ldrh	r2, [r3, #0]
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f7f6 fcbd 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 8010b12:	4b8f      	ldr	r3, [pc, #572]	; (8010d50 <flex_update+0x288>)
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 8010b14:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
 8010b18:	881a      	ldrh	r2, [r3, #0]
 8010b1a:	2100      	movs	r1, #0
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f7f6 fcb5 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 8010b22:	4b8c      	ldr	r3, [pc, #560]	; (8010d54 <flex_update+0x28c>)
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 8010b24:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
 8010b28:	881a      	ldrh	r2, [r3, #0]
 8010b2a:	2100      	movs	r1, #0
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	f7f6 fcad 	bl	800748c <lv_obj_get_style_prop>
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8010b32:	2216      	movs	r2, #22
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 8010b34:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
 8010b38:	2100      	movs	r1, #0
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	f7f6 fca6 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 8010b40:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
 8010b44:	f011 0101 	ands.w	r1, r1, #1
    return (lv_base_dir_t)v.num;
 8010b48:	b2c3      	uxtb	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8010b4a:	bf0e      	itee	eq
 8010b4c:	2215      	moveq	r2, #21
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8010b4e:	2214      	movne	r2, #20
 8010b50:	2100      	movne	r1, #0
 8010b52:	4620      	mov	r0, r4
    return (lv_base_dir_t)v.num;
 8010b54:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8010b56:	f7f6 fc99 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t item_gap = f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 8010b5a:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
 8010b5e:	f011 0101 	ands.w	r1, r1, #1
    return (lv_coord_t)v.num;
 8010b62:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8010b64:	bf1a      	itte	ne
 8010b66:	2215      	movne	r2, #21
 8010b68:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8010b6a:	2214      	moveq	r2, #20
 8010b6c:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8010b6e:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8010b70:	f7f6 fc8c 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8010b74:	b203      	sxth	r3, r0
 8010b76:	9303      	str	r3, [sp, #12]
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 8010b78:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8010b7c:	07dd      	lsls	r5, r3, #31
 8010b7e:	4620      	mov	r0, r4
 8010b80:	d556      	bpl.n	8010c30 <flex_update+0x168>
 8010b82:	f7f4 f9e7 	bl	8004f54 <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8010b86:	2232      	movs	r2, #50	; 0x32
 8010b88:	2100      	movs	r1, #0
 8010b8a:	ee08 0a10 	vmov	s16, r0
 8010b8e:	4620      	mov	r0, r4
 8010b90:	f7f6 fc7c 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8010b94:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8010b96:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8010b98:	2100      	movs	r1, #0
 8010b9a:	4620      	mov	r0, r4
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 8010b9c:	8ae6      	ldrh	r6, [r4, #22]
 8010b9e:	f7f6 fc75 	bl	800748c <lv_obj_get_style_prop>
                                                                  LV_PART_MAIN) + border_width - lv_obj_get_scroll_y(cont);
 8010ba2:	fa10 f085 	uxtah	r0, r0, r5
 8010ba6:	4406      	add	r6, r0
 8010ba8:	4620      	mov	r0, r4
 8010baa:	f7f5 fb38 	bl	800621e <lv_obj_get_scroll_y>
 8010bae:	b2b6      	uxth	r6, r6
 8010bb0:	1a30      	subs	r0, r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8010bb2:	2212      	movs	r2, #18
 8010bb4:	2100      	movs	r1, #0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 8010bb6:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
 8010bba:	4620      	mov	r0, r4
                                                                  LV_PART_MAIN) + border_width - lv_obj_get_scroll_y(cont);
 8010bbc:	b2af      	uxth	r7, r5
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 8010bbe:	8aa5      	ldrh	r5, [r4, #20]
 8010bc0:	f7f6 fc64 	bl	800748c <lv_obj_get_style_prop>
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
 8010bc4:	4438      	add	r0, r7
 8010bc6:	4405      	add	r5, r0
 8010bc8:	4620      	mov	r0, r4
 8010bca:	f7f5 fb22 	bl	8006212 <lv_obj_get_scroll_x>
 8010bce:	b2ad      	uxth	r5, r5
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 8010bd0:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    lv_flex_align_t track_cross_place = f.track_place;
 8010bd4:	f89d 6052 	ldrb.w	r6, [sp, #82]	; 0x52
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
 8010bd8:	1a28      	subs	r0, r5, r0
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 8010bda:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8010bde:	2201      	movs	r2, #1
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 8010be0:	07d8      	lsls	r0, r3, #31
 8010be2:	f04f 0100 	mov.w	r1, #0
 8010be6:	4620      	mov	r0, r4
 8010be8:	bf54      	ite	pl
 8010bea:	f10d 0a48 	addpl.w	sl, sp, #72	; 0x48
 8010bee:	f10d 0a46 	addmi.w	sl, sp, #70	; 0x46
 8010bf2:	f7f6 fc4b 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8010bf6:	2204      	movs	r2, #4
    return (lv_coord_t)v.num;
 8010bf8:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8010bfa:	2100      	movs	r1, #0
 8010bfc:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8010bfe:	930a      	str	r3, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8010c00:	f7f6 fc44 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8010c04:	b203      	sxth	r3, r0
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 8010c06:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
 8010c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8010c0c:	f010 0f01 	tst.w	r0, #1
 8010c10:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8010c14:	d00f      	beq.n	8010c36 <flex_update+0x16e>
 8010c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d103      	bne.n	8010c24 <flex_update+0x15c>
 8010c1c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8010c20:	0799      	lsls	r1, r3, #30
 8010c22:	d543      	bpl.n	8010cac <flex_update+0x1e4>
    lv_coord_t gap = 0;
 8010c24:	2300      	movs	r3, #0
 8010c26:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 8010c2a:	b9a6      	cbnz	r6, 8010c56 <flex_update+0x18e>
    lv_coord_t total_track_cross_size = 0;
 8010c2c:	4635      	mov	r5, r6
 8010c2e:	e040      	b.n	8010cb2 <flex_update+0x1ea>
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 8010c30:	f7f4 f9a6 	bl	8004f80 <lv_obj_get_content_height>
 8010c34:	e7a7      	b.n	8010b86 <flex_update+0xbe>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 8010c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d104      	bne.n	8010c46 <flex_update+0x17e>
 8010c3c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8010c40:	075a      	lsls	r2, r3, #29
 8010c42:	f140 82b3 	bpl.w	80111ac <flex_update+0x6e4>
    if(rtl && !f.row) {
 8010c46:	9b04      	ldr	r3, [sp, #16]
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	d1eb      	bne.n	8010c24 <flex_update+0x15c>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 8010c4c:	bb66      	cbnz	r6, 8010ca8 <flex_update+0x1e0>
    lv_coord_t gap = 0;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 8010c54:	2601      	movs	r6, #1
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 8010c56:	68a3      	ldr	r3, [r4, #8]
 8010c58:	685a      	ldr	r2, [r3, #4]
 8010c5a:	f010 0004 	ands.w	r0, r0, #4
 8010c5e:	f04f 0700 	mov.w	r7, #0
 8010c62:	bf14      	ite	ne
 8010c64:	f102 32ff 	addne.w	r2, r2, #4294967295
 8010c68:	4602      	moveq	r2, r0
 8010c6a:	463d      	mov	r5, r7
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8010c6c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8010c70:	68a3      	ldr	r3, [r4, #8]
 8010c72:	685b      	ldr	r3, [r3, #4]
 8010c74:	4293      	cmp	r3, r2
 8010c76:	dd01      	ble.n	8010c7c <flex_update+0x1b4>
 8010c78:	2a00      	cmp	r2, #0
 8010c7a:	da48      	bge.n	8010d0e <flex_update+0x246>
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 8010c7c:	b117      	cbz	r7, 8010c84 <flex_update+0x1bc>
 8010c7e:	9b05      	ldr	r3, [sp, #20]
 8010c80:	1aed      	subs	r5, r5, r3
 8010c82:	b22d      	sxth	r5, r5
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 8010c84:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8010c88:	07db      	lsls	r3, r3, #31
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	d558      	bpl.n	8010d40 <flex_update+0x278>
 8010c8e:	f7f4 f977 	bl	8004f80 <lv_obj_get_content_height>
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 8010c92:	f10d 034a 	add.w	r3, sp, #74	; 0x4a
 8010c96:	e9cd a300 	strd	sl, r3, [sp]
 8010c9a:	4601      	mov	r1, r0
 8010c9c:	b23b      	sxth	r3, r7
 8010c9e:	462a      	mov	r2, r5
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	f7ff fd90 	bl	80107c6 <place_content>
 8010ca6:	e004      	b.n	8010cb2 <flex_update+0x1ea>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 8010ca8:	2e01      	cmp	r6, #1
 8010caa:	d1bb      	bne.n	8010c24 <flex_update+0x15c>
    lv_coord_t gap = 0;
 8010cac:	2500      	movs	r5, #0
 8010cae:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 8010cb2:	68a2      	ldr	r2, [r4, #8]
 8010cb4:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8010cb8:	6852      	ldr	r2, [r2, #4]
 8010cba:	f013 0604 	ands.w	r6, r3, #4
 8010cbe:	bf18      	it	ne
 8010cc0:	f102 36ff 	addne.w	r6, r2, #4294967295
    if(rtl && !f.row) {
 8010cc4:	9a04      	ldr	r2, [sp, #16]
 8010cc6:	2a01      	cmp	r2, #1
 8010cc8:	d106      	bne.n	8010cd8 <flex_update+0x210>
 8010cca:	07df      	lsls	r7, r3, #31
 8010ccc:	d404      	bmi.n	8010cd8 <flex_update+0x210>
        *cross_pos += total_track_cross_size;
 8010cce:	f8ba 3000 	ldrh.w	r3, [sl]
 8010cd2:	441d      	add	r5, r3
 8010cd4:	f8aa 5000 	strh.w	r5, [sl]
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8010cd8:	68a3      	ldr	r3, [r4, #8]
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	42b3      	cmp	r3, r6
 8010cde:	dd01      	ble.n	8010ce4 <flex_update+0x21c>
 8010ce0:	2e00      	cmp	r6, #0
 8010ce2:	da39      	bge.n	8010d58 <flex_update+0x290>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 8010ce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ce6:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8010cea:	429a      	cmp	r2, r3
 8010cec:	d002      	beq.n	8010cf4 <flex_update+0x22c>
 8010cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d102      	bne.n	8010cfa <flex_update+0x232>
        lv_obj_refr_size(cont);
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f7f4 fd7b 	bl	80057f0 <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	212b      	movs	r1, #43	; 0x2b
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f7f2 fa84 	bl	800320c <lv_event_send>
}
 8010d04:	b01f      	add	sp, #124	; 0x7c
 8010d06:	ecbd 8b02 	vpop	{d8}
 8010d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            t.grow_dsc_calc = 0;
 8010d0e:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8010d12:	f8cd 8004 	str.w	r8, [sp, #4]
            t.grow_dsc_calc = 0;
 8010d16:	f36f 0300 	bfc	r3, #0, #1
 8010d1a:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8010d1e:	9b03      	ldr	r3, [sp, #12]
 8010d20:	9300      	str	r3, [sp, #0]
 8010d22:	a914      	add	r1, sp, #80	; 0x50
 8010d24:	ee18 3a10 	vmov	r3, s16
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f7ff fda5 	bl	8010878 <find_track_end>
            total_track_cross_size += t.track_cross_size + track_gap;
 8010d2e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8010d32:	9905      	ldr	r1, [sp, #20]
 8010d34:	440b      	add	r3, r1
 8010d36:	441d      	add	r5, r3
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8010d38:	4602      	mov	r2, r0
            total_track_cross_size += t.track_cross_size + track_gap;
 8010d3a:	b22d      	sxth	r5, r5
            track_cnt++;
 8010d3c:	3701      	adds	r7, #1
            track_first_item = next_track_first_item;
 8010d3e:	e797      	b.n	8010c70 <flex_update+0x1a8>
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 8010d40:	f7f4 f908 	bl	8004f54 <lv_obj_get_content_width>
 8010d44:	e7a5      	b.n	8010c92 <flex_update+0x1ca>
 8010d46:	bf00      	nop
 8010d48:	20000c7a 	.word	0x20000c7a
 8010d4c:	20000c7e 	.word	0x20000c7e
 8010d50:	20000c78 	.word	0x20000c78
 8010d54:	20000c80 	.word	0x20000c80
        t.grow_dsc_calc = 1;
 8010d58:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8010d5c:	f043 0301 	orr.w	r3, r3, #1
 8010d60:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8010d64:	ab18      	add	r3, sp, #96	; 0x60
 8010d66:	9301      	str	r3, [sp, #4]
 8010d68:	9b03      	ldr	r3, [sp, #12]
 8010d6a:	9300      	str	r3, [sp, #0]
 8010d6c:	4632      	mov	r2, r6
 8010d6e:	ee18 3a10 	vmov	r3, s16
 8010d72:	a914      	add	r1, sp, #80	; 0x50
 8010d74:	4620      	mov	r0, r4
 8010d76:	f7ff fd7f 	bl	8010878 <find_track_end>
        if(rtl && !f.row) {
 8010d7a:	9b04      	ldr	r3, [sp, #16]
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8010d7c:	9008      	str	r0, [sp, #32]
        if(rtl && !f.row) {
 8010d7e:	2b01      	cmp	r3, #1
 8010d80:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8010d84:	d108      	bne.n	8010d98 <flex_update+0x2d0>
 8010d86:	07dd      	lsls	r5, r3, #31
            *cross_pos -= t.track_cross_size;
 8010d88:	bf5f      	itttt	pl
 8010d8a:	f8ba 2000 	ldrhpl.w	r2, [sl]
 8010d8e:	f8bd 1060 	ldrhpl.w	r1, [sp, #96]	; 0x60
 8010d92:	1a52      	subpl	r2, r2, r1
 8010d94:	f8aa 2000 	strhpl.w	r2, [sl]
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 8010d98:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8010d9c:	920c      	str	r2, [sp, #48]	; 0x30
 8010d9e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8010da2:	920d      	str	r2, [sp, #52]	; 0x34
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 8010da4:	f003 0301 	and.w	r3, r3, #1
 8010da8:	4a67      	ldr	r2, [pc, #412]	; (8010f48 <flex_update+0x480>)
 8010daa:	9615      	str	r6, [sp, #84]	; 0x54
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	4b67      	ldr	r3, [pc, #412]	; (8010f4c <flex_update+0x484>)
 8010db0:	bf18      	it	ne
 8010db2:	4613      	movne	r3, r2
 8010db4:	930f      	str	r3, [sp, #60]	; 0x3c
 8010db6:	4a66      	ldr	r2, [pc, #408]	; (8010f50 <flex_update+0x488>)
 8010db8:	4b66      	ldr	r3, [pc, #408]	; (8010f54 <flex_update+0x48c>)
 8010dba:	bf1a      	itte	ne
 8010dbc:	4619      	movne	r1, r3
 8010dbe:	4613      	movne	r3, r2
 8010dc0:	4611      	moveq	r1, r2
 8010dc2:	930b      	str	r3, [sp, #44]	; 0x2c
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 8010dc4:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8010dc8:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 8010dcc:	9107      	str	r1, [sp, #28]
 8010dce:	e9dd 8b1b 	ldrd	r8, fp, [sp, #108]	; 0x6c
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 8010dd2:	1a9b      	subs	r3, r3, r2
 8010dd4:	b21b      	sxth	r3, r3
 8010dd6:	f04f 0e14 	mov.w	lr, #20
 8010dda:	930e      	str	r3, [sp, #56]	; 0x38
 8010ddc:	fb0e 8e0b 	mla	lr, lr, fp, r8
 8010de0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
        for(i = 0; i < t->grow_item_cnt; i++) {
 8010de2:	4642      	mov	r2, r8
        lv_coord_t grow_value_sum = 0;
 8010de4:	2100      	movs	r1, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 8010de6:	4596      	cmp	lr, r2
 8010de8:	d152      	bne.n	8010e90 <flex_update+0x3c8>
        grow_reiterate = false;
 8010dea:	2500      	movs	r5, #0
 8010dec:	4642      	mov	r2, r8
        for(i = 0; i < t->grow_item_cnt; i++) {
 8010dee:	46a9      	mov	r9, r5
 8010df0:	45cb      	cmp	fp, r9
 8010df2:	d159      	bne.n	8010ea8 <flex_update+0x3e0>
    while(grow_reiterate) {
 8010df4:	2d00      	cmp	r5, #0
 8010df6:	d1f3      	bne.n	8010de0 <flex_update+0x318>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8010df8:	2216      	movs	r2, #22
 8010dfa:	4629      	mov	r1, r5
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f7f6 fb45 	bl	800748c <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8010e02:	b2c3      	uxtb	r3, r0
 8010e04:	9306      	str	r3, [sp, #24]
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 8010e06:	f10d 034e 	add.w	r3, sp, #78	; 0x4e
 8010e0a:	9301      	str	r3, [sp, #4]
 8010e0c:	ab13      	add	r3, sp, #76	; 0x4c
 8010e0e:	9300      	str	r3, [sp, #0]
 8010e10:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 8010e14:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 8010e18:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    lv_coord_t main_pos = 0;
 8010e1c:	f8ad 504c 	strh.w	r5, [sp, #76]	; 0x4c
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 8010e20:	ee18 1a10 	vmov	r1, s16
    lv_coord_t place_gap = 0;
 8010e24:	f8ad 504e 	strh.w	r5, [sp, #78]	; 0x4e
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 8010e28:	f7ff fccd 	bl	80107c6 <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 8010e2c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8010e30:	07db      	lsls	r3, r3, #31
 8010e32:	d50a      	bpl.n	8010e4a <flex_update+0x382>
 8010e34:	9b06      	ldr	r3, [sp, #24]
 8010e36:	2b01      	cmp	r3, #1
 8010e38:	d107      	bne.n	8010e4a <flex_update+0x382>
 8010e3a:	4620      	mov	r0, r4
 8010e3c:	f7f4 f88a 	bl	8004f54 <lv_obj_get_content_width>
 8010e40:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010e44:	4418      	add	r0, r3
 8010e46:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 8010e4a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f7f7 f910 	bl	8008072 <lv_obj_get_child>
        item = get_next_item(cont, f->rev, &item_first_id);
 8010e52:	4605      	mov	r5, r0
    while(item && item_first_id != item_last_id) {
 8010e54:	b118      	cbz	r0, 8010e5e <flex_update+0x396>
 8010e56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e58:	9a08      	ldr	r2, [sp, #32]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d153      	bne.n	8010f06 <flex_update+0x43e>
        lv_mem_buf_release(t.grow_dsc);
 8010e5e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010e60:	f002 fafe 	bl	8013460 <lv_mem_buf_release>
        if(rtl && !f.row) {
 8010e64:	9a04      	ldr	r2, [sp, #16]
            total_track_cross_size += t.track_cross_size + track_gap;
 8010e66:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        if(rtl && !f.row) {
 8010e6a:	2a01      	cmp	r2, #1
 8010e6c:	f040 8194 	bne.w	8011198 <flex_update+0x6d0>
 8010e70:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
            *cross_pos -= gap + track_gap;
 8010e74:	f9ba 2000 	ldrsh.w	r2, [sl]
 8010e78:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
        if(rtl && !f.row) {
 8010e7c:	07c0      	lsls	r0, r0, #31
 8010e7e:	f100 818b 	bmi.w	8011198 <flex_update+0x6d0>
            *cross_pos -= gap + track_gap;
 8010e82:	440b      	add	r3, r1
 8010e84:	1ad3      	subs	r3, r2, r3
            *cross_pos += t.track_cross_size + gap + track_gap;
 8010e86:	b21b      	sxth	r3, r3
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8010e88:	9e08      	ldr	r6, [sp, #32]
 8010e8a:	f8aa 3000 	strh.w	r3, [sl]
 8010e8e:	e723      	b.n	8010cd8 <flex_update+0x210>
            if(t->grow_dsc[i].clamped == 0) {
 8010e90:	7c13      	ldrb	r3, [r2, #16]
 8010e92:	07d8      	lsls	r0, r3, #31
                grow_value_sum += t->grow_dsc[i].grow_value;
 8010e94:	bf55      	itete	pl
 8010e96:	68d3      	ldrpl	r3, [r2, #12]
                grow_max_size -= t->grow_dsc[i].final_size;
 8010e98:	8913      	ldrhmi	r3, [r2, #8]
                grow_value_sum += t->grow_dsc[i].grow_value;
 8010e9a:	18c9      	addpl	r1, r1, r3
                grow_max_size -= t->grow_dsc[i].final_size;
 8010e9c:	1af6      	submi	r6, r6, r3
                grow_value_sum += t->grow_dsc[i].grow_value;
 8010e9e:	bf54      	ite	pl
 8010ea0:	b209      	sxthpl	r1, r1
                grow_max_size -= t->grow_dsc[i].final_size;
 8010ea2:	b236      	sxthmi	r6, r6
        for(i = 0; i < t->grow_item_cnt; i++) {
 8010ea4:	3214      	adds	r2, #20
 8010ea6:	e79e      	b.n	8010de6 <flex_update+0x31e>
            if(t->grow_dsc[i].clamped == 0) {
 8010ea8:	f892 c010 	ldrb.w	ip, [r2, #16]
 8010eac:	f01c 0f01 	tst.w	ip, #1
 8010eb0:	d125      	bne.n	8010efe <flex_update+0x436>
                LV_ASSERT(grow_value_sum != 0);
 8010eb2:	b901      	cbnz	r1, 8010eb6 <flex_update+0x3ee>
 8010eb4:	e7fe      	b.n	8010eb4 <flex_update+0x3ec>
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 8010eb6:	8997      	ldrh	r7, [r2, #12]
                grow_unit = grow_max_size / grow_value_sum;
 8010eb8:	fb96 f0f1 	sdiv	r0, r6, r1
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 8010ebc:	fb10 f007 	smulbb	r0, r0, r7
 8010ec0:	b203      	sxth	r3, r0
 8010ec2:	9306      	str	r3, [sp, #24]
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 8010ec4:	9806      	ldr	r0, [sp, #24]
 8010ec6:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8010eca:	4283      	cmp	r3, r0
 8010ecc:	bfa8      	it	ge
 8010ece:	4603      	movge	r3, r0
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8010ed6:	4298      	cmp	r0, r3
 8010ed8:	bfb8      	it	lt
 8010eda:	4618      	movlt	r0, r3
 8010edc:	4603      	mov	r3, r0
                if(size_clamp != size) {
 8010ede:	9806      	ldr	r0, [sp, #24]
                t->grow_dsc[i].final_size = size_clamp;
 8010ee0:	8113      	strh	r3, [r2, #8]
                if(size_clamp != size) {
 8010ee2:	4298      	cmp	r0, r3
                    t->grow_dsc[i].clamped = 1;
 8010ee4:	bf18      	it	ne
 8010ee6:	f04c 0c01 	orrne.w	ip, ip, #1
                grow_value_sum -= t->grow_dsc[i].grow_value;
 8010eea:	eba1 0107 	sub.w	r1, r1, r7
                grow_max_size  -= t->grow_dsc[i].final_size;
 8010eee:	eba6 0303 	sub.w	r3, r6, r3
                    t->grow_dsc[i].clamped = 1;
 8010ef2:	bf1c      	itt	ne
 8010ef4:	f882 c010 	strbne.w	ip, [r2, #16]
                    grow_reiterate = true;
 8010ef8:	2501      	movne	r5, #1
                grow_value_sum -= t->grow_dsc[i].grow_value;
 8010efa:	b209      	sxth	r1, r1
                grow_max_size  -= t->grow_dsc[i].final_size;
 8010efc:	b21e      	sxth	r6, r3
        for(i = 0; i < t->grow_item_cnt; i++) {
 8010efe:	f109 0901 	add.w	r9, r9, #1
 8010f02:	3214      	adds	r2, #20
 8010f04:	e774      	b.n	8010df0 <flex_update+0x328>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 8010f06:	4914      	ldr	r1, [pc, #80]	; (8010f58 <flex_update+0x490>)
 8010f08:	4628      	mov	r0, r5
 8010f0a:	f7f3 f895 	bl	8004038 <lv_obj_has_flag_any>
 8010f0e:	4606      	mov	r6, r0
 8010f10:	b140      	cbz	r0, 8010f24 <flex_update+0x45c>
        item = get_next_item(cont, f->rev, &item_first_id);
 8010f12:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
 8010f16:	aa15      	add	r2, sp, #84	; 0x54
 8010f18:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	f7ff fc96 	bl	801084e <get_next_item>
 8010f22:	e796      	b.n	8010e52 <flex_update+0x38a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 8010f24:	4b0d      	ldr	r3, [pc, #52]	; (8010f5c <flex_update+0x494>)
 8010f26:	4601      	mov	r1, r0
 8010f28:	881a      	ldrh	r2, [r3, #0]
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	f7f6 faae 	bl	800748c <lv_obj_get_style_prop>
    return (uint8_t)v.num;
 8010f30:	b2c0      	uxtb	r0, r0
        if(grow_size) {
 8010f32:	2800      	cmp	r0, #0
 8010f34:	f000 8111 	beq.w	801115a <flex_update+0x692>
 8010f38:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
            for(i = 0; i < t->grow_item_cnt; i++) {
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	4290      	cmp	r0, r2
 8010f40:	d10e      	bne.n	8010f60 <flex_update+0x498>
            lv_coord_t s = 0;
 8010f42:	2600      	movs	r6, #0
 8010f44:	e014      	b.n	8010f70 <flex_update+0x4a8>
 8010f46:	bf00      	nop
 8010f48:	08012807 	.word	0x08012807
 8010f4c:	08012811 	.word	0x08012811
 8010f50:	080107bb 	.word	0x080107bb
 8010f54:	080107af 	.word	0x080107af
 8010f58:	00060001 	.word	0x00060001
 8010f5c:	20000c7c 	.word	0x20000c7c
                if(t->grow_dsc[i].item == item) {
 8010f60:	4619      	mov	r1, r3
 8010f62:	f853 6b14 	ldr.w	r6, [r3], #20
 8010f66:	42b5      	cmp	r5, r6
 8010f68:	f040 80f5 	bne.w	8011156 <flex_update+0x68e>
                    s = t->grow_dsc[i].final_size;
 8010f6c:	f9b1 6008 	ldrsh.w	r6, [r1, #8]
            if(f->row) {
 8010f70:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8010f74:	f013 0f01 	tst.w	r3, #1
 8010f78:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
                item->h_layout = 0;
 8010f7c:	f023 0306 	bic.w	r3, r3, #6
 8010f80:	bf14      	ite	ne
 8010f82:	f043 0304 	orrne.w	r3, r3, #4
                item->h_layout = 1;
 8010f86:	f043 0302 	orreq.w	r3, r3, #2
            if(s != area_get_main_size(&item->coords)) {
 8010f8a:	f105 0714 	add.w	r7, r5, #20
                item->h_layout = 1;
 8010f8e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            if(s != area_get_main_size(&item->coords)) {
 8010f92:	4638      	mov	r0, r7
 8010f94:	9b07      	ldr	r3, [sp, #28]
 8010f96:	4798      	blx	r3
 8010f98:	42b0      	cmp	r0, r6
 8010f9a:	d021      	beq.n	8010fe0 <flex_update+0x518>
                lv_obj_invalidate(item);
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f7f4 f9e3 	bl	8005368 <lv_obj_invalidate>
    dest->x1 = src->x1;
 8010fa2:	8aab      	ldrh	r3, [r5, #20]
 8010fa4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    dest->y1 = src->y1;
 8010fa8:	8aeb      	ldrh	r3, [r5, #22]
 8010faa:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    dest->x2 = src->x2;
 8010fae:	8b2b      	ldrh	r3, [r5, #24]
 8010fb0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    dest->y2 = src->y2;
 8010fb4:	8b6b      	ldrh	r3, [r5, #26]
 8010fb6:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                area_set_main_size(&item->coords, s);
 8010fba:	4631      	mov	r1, r6
 8010fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fbe:	4638      	mov	r0, r7
 8010fc0:	4798      	blx	r3
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 8010fc2:	aa16      	add	r2, sp, #88	; 0x58
 8010fc4:	2129      	movs	r1, #41	; 0x29
 8010fc6:	4628      	mov	r0, r5
 8010fc8:	f7f2 f920 	bl	800320c <lv_event_send>
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 8010fcc:	4628      	mov	r0, r5
 8010fce:	f7f7 f84d 	bl	800806c <lv_obj_get_parent>
 8010fd2:	462a      	mov	r2, r5
 8010fd4:	2122      	movs	r1, #34	; 0x22
 8010fd6:	f7f2 f919 	bl	800320c <lv_event_send>
                lv_obj_invalidate(item);
 8010fda:	4628      	mov	r0, r5
 8010fdc:	f7f4 f9c4 	bl	8005368 <lv_obj_invalidate>
        switch(f->cross_place) {
 8010fe0:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 8010fe4:	2b01      	cmp	r3, #1
 8010fe6:	f000 80bf 	beq.w	8011168 <flex_update+0x6a0>
 8010fea:	2b02      	cmp	r3, #2
 8010fec:	f040 80c5 	bne.w	801117a <flex_update+0x6b2>
                cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 8010ff0:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 8010ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ff6:	3001      	adds	r0, #1
 8010ff8:	f020 0701 	bic.w	r7, r0, #1
 8010ffc:	f105 0014 	add.w	r0, r5, #20
 8011000:	4798      	blx	r3
 8011002:	1a38      	subs	r0, r7, r0
 8011004:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8011008:	f340 064f 	sbfx	r6, r0, #1, #16
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 801100c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8011010:	07df      	lsls	r7, r3, #31
 8011012:	d50b      	bpl.n	801102c <flex_update+0x564>
 8011014:	9b06      	ldr	r3, [sp, #24]
 8011016:	2b01      	cmp	r3, #1
 8011018:	d108      	bne.n	801102c <flex_update+0x564>
 801101a:	9b07      	ldr	r3, [sp, #28]
 801101c:	f105 0014 	add.w	r0, r5, #20
 8011020:	4798      	blx	r3
 8011022:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011026:	1a18      	subs	r0, r3, r0
 8011028:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 801102c:	226a      	movs	r2, #106	; 0x6a
 801102e:	2100      	movs	r1, #0
 8011030:	4628      	mov	r0, r5
 8011032:	f7f6 fa2b 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8011036:	226b      	movs	r2, #107	; 0x6b
 8011038:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 801103a:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 801103c:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8011040:	4628      	mov	r0, r5
 8011042:	f7f6 fa23 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8011046:	900e      	str	r0, [sp, #56]	; 0x38
 8011048:	fa0f fb80 	sxth.w	fp, r0
        lv_coord_t w = lv_obj_get_width(item);
 801104c:	4628      	mov	r0, r5
 801104e:	f7f3 ff75 	bl	8004f3c <lv_obj_get_width>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8011052:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
        lv_coord_t w = lv_obj_get_width(item);
 8011056:	4607      	mov	r7, r0
        lv_coord_t h = lv_obj_get_height(item);
 8011058:	4628      	mov	r0, r5
 801105a:	f7f3 ff75 	bl	8004f48 <lv_obj_get_height>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 801105e:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 8011062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011064:	d111      	bne.n	801108a <flex_update+0x5c2>
 8011066:	f429 43c0 	bic.w	r3, r9, #24576	; 0x6000
 801106a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801106e:	dc0c      	bgt.n	801108a <flex_update+0x5c2>
 8011070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011074:	4699      	mov	r9, r3
 8011076:	bfc8      	it	gt
 8011078:	f5c3 797a 	rsbgt	r9, r3, #1000	; 0x3e8
 801107c:	fb09 f907 	mul.w	r9, r9, r7
 8011080:	2764      	movs	r7, #100	; 0x64
 8011082:	fb99 f9f7 	sdiv	r9, r9, r7
 8011086:	fa0f f989 	sxth.w	r9, r9
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 801108a:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
 801108e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011092:	d111      	bne.n	80110b8 <flex_update+0x5f0>
 8011094:	f42b 43c0 	bic.w	r3, fp, #24576	; 0x6000
 8011098:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801109c:	dc0c      	bgt.n	80110b8 <flex_update+0x5f0>
 801109e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80110a2:	469b      	mov	fp, r3
 80110a4:	bfc8      	it	gt
 80110a6:	f5c3 7b7a 	rsbgt	fp, r3, #1000	; 0x3e8
 80110aa:	fb0b fb00 	mul.w	fp, fp, r0
 80110ae:	2064      	movs	r0, #100	; 0x64
 80110b0:	fb9b fbf0 	sdiv	fp, fp, r0
 80110b4:	fa0f fb8b 	sxth.w	fp, fp
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 80110b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110ba:	8aa9      	ldrh	r1, [r5, #20]
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 80110bc:	8aea      	ldrh	r2, [r5, #22]
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 80110be:	1a59      	subs	r1, r3, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 80110c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110c2:	1a9a      	subs	r2, r3, r2
        diff_x += f->row ? main_pos : cross_pos;
 80110c4:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 80110c8:	f013 0301 	ands.w	r3, r3, #1
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 80110cc:	4489      	add	r9, r1
        diff_x += f->row ? main_pos : cross_pos;
 80110ce:	bf18      	it	ne
 80110d0:	f8bd 104c 	ldrhne.w	r1, [sp, #76]	; 0x4c
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 80110d4:	fa1f f989 	uxth.w	r9, r9
        diff_x += f->row ? main_pos : cross_pos;
 80110d8:	bf08      	it	eq
 80110da:	b2b1      	uxtheq	r1, r6
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 80110dc:	4493      	add	fp, r2
        diff_x += f->row ? main_pos : cross_pos;
 80110de:	4489      	add	r9, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 80110e0:	fa1f fb8b 	uxth.w	fp, fp
        diff_x += f->row ? main_pos : cross_pos;
 80110e4:	fa1f f989 	uxth.w	r9, r9
        diff_y += f->row ? cross_pos : main_pos;
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d048      	beq.n	801117e <flex_update+0x6b6>
 80110ec:	b2b6      	uxth	r6, r6
 80110ee:	445e      	add	r6, fp
 80110f0:	b2b6      	uxth	r6, r6
        if(diff_x || diff_y) {
 80110f2:	ea59 0306 	orrs.w	r3, r9, r6
 80110f6:	d018      	beq.n	801112a <flex_update+0x662>
            lv_obj_invalidate(item);
 80110f8:	4628      	mov	r0, r5
 80110fa:	f7f4 f935 	bl	8005368 <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 80110fe:	8aab      	ldrh	r3, [r5, #20]
 8011100:	444b      	add	r3, r9
 8011102:	82ab      	strh	r3, [r5, #20]
            item->coords.x2 += diff_x;
 8011104:	8b2b      	ldrh	r3, [r5, #24]
 8011106:	444b      	add	r3, r9
 8011108:	832b      	strh	r3, [r5, #24]
            item->coords.y1 += diff_y;
 801110a:	8aeb      	ldrh	r3, [r5, #22]
 801110c:	4433      	add	r3, r6
 801110e:	82eb      	strh	r3, [r5, #22]
            item->coords.y2 += diff_y;
 8011110:	8b6b      	ldrh	r3, [r5, #26]
 8011112:	4433      	add	r3, r6
 8011114:	836b      	strh	r3, [r5, #26]
            lv_obj_invalidate(item);
 8011116:	4628      	mov	r0, r5
 8011118:	f7f4 f926 	bl	8005368 <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, false);
 801111c:	2300      	movs	r3, #0
 801111e:	b232      	sxth	r2, r6
 8011120:	fa0f f189 	sxth.w	r1, r9
 8011124:	4628      	mov	r0, r5
 8011126:	f7f3 ffad 	bl	8005084 <lv_obj_move_children_by>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 801112a:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 801112e:	07de      	lsls	r6, r3, #31
 8011130:	d502      	bpl.n	8011138 <flex_update+0x670>
 8011132:	9b06      	ldr	r3, [sp, #24]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d025      	beq.n	8011184 <flex_update+0x6bc>
 8011138:	9b07      	ldr	r3, [sp, #28]
 801113a:	f105 0014 	add.w	r0, r5, #20
 801113e:	4798      	blx	r3
 8011140:	9b03      	ldr	r3, [sp, #12]
 8011142:	4418      	add	r0, r3
 8011144:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8011148:	4418      	add	r0, r3
 801114a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801114e:	4418      	add	r0, r3
 8011150:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 8011154:	e6dd      	b.n	8010f12 <flex_update+0x44a>
            for(i = 0; i < t->grow_item_cnt; i++) {
 8011156:	3001      	adds	r0, #1
 8011158:	e6f1      	b.n	8010f3e <flex_update+0x476>
            item->h_layout = 0;
 801115a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801115e:	f023 0306 	bic.w	r3, r3, #6
 8011162:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 8011166:	e73b      	b.n	8010fe0 <flex_update+0x518>
                cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 8011168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801116a:	f8bd 7060 	ldrh.w	r7, [sp, #96]	; 0x60
 801116e:	f105 0014 	add.w	r0, r5, #20
 8011172:	4798      	blx	r3
 8011174:	1a38      	subs	r0, r7, r0
 8011176:	b206      	sxth	r6, r0
                break;
 8011178:	e748      	b.n	801100c <flex_update+0x544>
        switch(f->cross_place) {
 801117a:	2600      	movs	r6, #0
 801117c:	e746      	b.n	801100c <flex_update+0x544>
        diff_y += f->row ? cross_pos : main_pos;
 801117e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8011182:	e7b4      	b.n	80110ee <flex_update+0x626>
        else main_pos -= item_gap + place_gap;
 8011184:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011188:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801118c:	1a9b      	subs	r3, r3, r2
 801118e:	9a03      	ldr	r2, [sp, #12]
 8011190:	1a9b      	subs	r3, r3, r2
 8011192:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8011196:	e6bc      	b.n	8010f12 <flex_update+0x44a>
            *cross_pos += t.track_cross_size + gap + track_gap;
 8011198:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 801119c:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 80111a0:	440a      	add	r2, r1
 80111a2:	4413      	add	r3, r2
 80111a4:	f8ba 2000 	ldrh.w	r2, [sl]
 80111a8:	4413      	add	r3, r2
 80111aa:	e66c      	b.n	8010e86 <flex_update+0x3be>
    if(rtl && !f.row) {
 80111ac:	9b04      	ldr	r3, [sp, #16]
 80111ae:	2b01      	cmp	r3, #1
 80111b0:	f43f ad4d 	beq.w	8010c4e <flex_update+0x186>
 80111b4:	e57a      	b.n	8010cac <flex_update+0x1e4>
 80111b6:	bf00      	nop

080111b8 <lv_flex_init>:
{
 80111b8:	b508      	push	{r3, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
 80111ba:	2100      	movs	r1, #0
 80111bc:	480c      	ldr	r0, [pc, #48]	; (80111f0 <lv_flex_init+0x38>)
 80111be:	f7f3 fe5d 	bl	8004e7c <lv_layout_register>
 80111c2:	4b0c      	ldr	r3, [pc, #48]	; (80111f4 <lv_flex_init+0x3c>)
 80111c4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop(LV_STYLE_PROP_FLAG_NONE);
 80111c6:	2000      	movs	r0, #0
 80111c8:	f002 fed8 	bl	8013f7c <lv_style_register_prop>
 80111cc:	4b0a      	ldr	r3, [pc, #40]	; (80111f8 <lv_flex_init+0x40>)
 80111ce:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 80111d0:	2004      	movs	r0, #4
 80111d2:	f002 fed3 	bl	8013f7c <lv_style_register_prop>
 80111d6:	4b09      	ldr	r3, [pc, #36]	; (80111fc <lv_flex_init+0x44>)
 80111d8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 80111da:	2004      	movs	r0, #4
 80111dc:	f002 fece 	bl	8013f7c <lv_style_register_prop>
 80111e0:	4b07      	ldr	r3, [pc, #28]	; (8011200 <lv_flex_init+0x48>)
 80111e2:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 80111e4:	2004      	movs	r0, #4
 80111e6:	f002 fec9 	bl	8013f7c <lv_style_register_prop>
 80111ea:	4b06      	ldr	r3, [pc, #24]	; (8011204 <lv_flex_init+0x4c>)
 80111ec:	8018      	strh	r0, [r3, #0]
}
 80111ee:	bd08      	pop	{r3, pc}
 80111f0:	08010ac9 	.word	0x08010ac9
 80111f4:	20000c76 	.word	0x20000c76
 80111f8:	20000c7a 	.word	0x20000c7a
 80111fc:	20000c7e 	.word	0x20000c7e
 8011200:	20000c78 	.word	0x20000c78
 8011204:	20000c80 	.word	0x20000c80

08011208 <lv_extra_init>:
 **********************/

void lv_extra_init(void)
{
#if LV_USE_FLEX
    lv_flex_init();
 8011208:	f7ff bfd6 	b.w	80111b8 <lv_flex_init>

0801120c <theme_apply>:
    return (lv_theme_t *)&theme;
}


static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
{
 801120c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LV_UNUSED(th);

    if(lv_obj_get_parent(obj) == NULL) {
 801120e:	4608      	mov	r0, r1
{
 8011210:	460c      	mov	r4, r1
    if(lv_obj_get_parent(obj) == NULL) {
 8011212:	f7f6 ff2b 	bl	800806c <lv_obj_get_parent>
 8011216:	4602      	mov	r2, r0
 8011218:	b970      	cbnz	r0, 8011238 <theme_apply+0x2c>
        lv_obj_add_style(obj, &styles->scr, 0);
 801121a:	4db5      	ldr	r5, [pc, #724]	; (80114f0 <theme_apply+0x2e4>)
 801121c:	6829      	ldr	r1, [r5, #0]
            lv_obj_add_style(obj, &styles->no_radius, 0);
            lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
            return;
        }
#endif
        lv_obj_add_style(obj, &styles->card, 0);
 801121e:	4620      	mov	r0, r4
 8011220:	f7f6 faae 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8011224:	6829      	ldr	r1, [r5, #0]
 8011226:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801122a:	3110      	adds	r1, #16
    }
#endif

#if LV_USE_LED
    else if(lv_obj_check_type(obj, &lv_led_class)) {
        lv_obj_add_style(obj, &styles->card, 0);
 801122c:	4620      	mov	r0, r4
    }
#endif
}
 801122e:	b003      	add	sp, #12
 8011230:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_add_style(obj, &styles->card, 0);
 8011234:	f7f6 baa4 	b.w	8007780 <lv_obj_add_style>
    if(lv_obj_check_type(obj, &lv_obj_class)) {
 8011238:	49ae      	ldr	r1, [pc, #696]	; (80114f4 <theme_apply+0x2e8>)
 801123a:	4620      	mov	r0, r4
 801123c:	f7f3 f8f4 	bl	8004428 <lv_obj_check_type>
 8011240:	4607      	mov	r7, r0
 8011242:	b120      	cbz	r0, 801124e <theme_apply+0x42>
        lv_obj_add_style(obj, &styles->card, 0);
 8011244:	4daa      	ldr	r5, [pc, #680]	; (80114f0 <theme_apply+0x2e4>)
 8011246:	6829      	ldr	r1, [r5, #0]
 8011248:	2200      	movs	r2, #0
 801124a:	3108      	adds	r1, #8
 801124c:	e7e7      	b.n	801121e <theme_apply+0x12>
    else if(lv_obj_check_type(obj, &lv_btn_class)) {
 801124e:	49aa      	ldr	r1, [pc, #680]	; (80114f8 <theme_apply+0x2ec>)
 8011250:	4620      	mov	r0, r4
 8011252:	f7f3 f8e9 	bl	8004428 <lv_obj_check_type>
 8011256:	4606      	mov	r6, r0
 8011258:	b1d8      	cbz	r0, 8011292 <theme_apply+0x86>
        lv_obj_add_style(obj, &styles->card, 0);
 801125a:	4da5      	ldr	r5, [pc, #660]	; (80114f0 <theme_apply+0x2e4>)
 801125c:	6829      	ldr	r1, [r5, #0]
 801125e:	463a      	mov	r2, r7
 8011260:	3108      	adds	r1, #8
 8011262:	4620      	mov	r0, r4
 8011264:	f7f6 fa8c 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pr, LV_STATE_PRESSED);
 8011268:	6829      	ldr	r1, [r5, #0]
 801126a:	2220      	movs	r2, #32
 801126c:	4411      	add	r1, r2
 801126e:	4620      	mov	r0, r4
 8011270:	f7f6 fa86 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->inv, LV_STATE_CHECKED);
 8011274:	6829      	ldr	r1, [r5, #0]
 8011276:	2201      	movs	r2, #1
 8011278:	3128      	adds	r1, #40	; 0x28
 801127a:	4620      	mov	r0, r4
 801127c:	f7f6 fa80 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 8011280:	6829      	ldr	r1, [r5, #0]
 8011282:	2280      	movs	r2, #128	; 0x80
 8011284:	3130      	adds	r1, #48	; 0x30
        lv_obj_add_style(obj, &styles->inv, LV_PART_CURSOR);
 8011286:	4620      	mov	r0, r4
 8011288:	f7f6 fa7a 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->focus, LV_STATE_FOCUS_KEY);
 801128c:	6829      	ldr	r1, [r5, #0]
 801128e:	2204      	movs	r2, #4
 8011290:	e1ab      	b.n	80115ea <theme_apply+0x3de>
    else if(lv_obj_check_type(obj, &lv_btnmatrix_class)) {
 8011292:	499a      	ldr	r1, [pc, #616]	; (80114fc <theme_apply+0x2f0>)
 8011294:	4620      	mov	r0, r4
 8011296:	f7f3 f8c7 	bl	8004428 <lv_obj_check_type>
 801129a:	b378      	cbz	r0, 80112fc <theme_apply+0xf0>
        lv_obj_add_style(obj, &styles->card, 0);
 801129c:	4d94      	ldr	r5, [pc, #592]	; (80114f0 <theme_apply+0x2e4>)
 801129e:	6829      	ldr	r1, [r5, #0]
 80112a0:	4632      	mov	r2, r6
 80112a2:	3108      	adds	r1, #8
 80112a4:	4620      	mov	r0, r4
 80112a6:	f7f6 fa6b 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->focus, LV_STATE_FOCUS_KEY);
 80112aa:	6829      	ldr	r1, [r5, #0]
 80112ac:	2204      	movs	r2, #4
 80112ae:	3138      	adds	r1, #56	; 0x38
 80112b0:	4620      	mov	r0, r4
 80112b2:	f7f6 fa65 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->card, LV_PART_ITEMS);
 80112b6:	6829      	ldr	r1, [r5, #0]
 80112b8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80112bc:	3108      	adds	r1, #8
 80112be:	4620      	mov	r0, r4
 80112c0:	f7f6 fa5e 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pr, LV_PART_ITEMS | LV_STATE_PRESSED);
 80112c4:	6829      	ldr	r1, [r5, #0]
 80112c6:	4a8e      	ldr	r2, [pc, #568]	; (8011500 <theme_apply+0x2f4>)
 80112c8:	3120      	adds	r1, #32
 80112ca:	4620      	mov	r0, r4
 80112cc:	f7f6 fa58 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->inv, LV_PART_ITEMS | LV_STATE_CHECKED);
 80112d0:	6829      	ldr	r1, [r5, #0]
 80112d2:	4a8c      	ldr	r2, [pc, #560]	; (8011504 <theme_apply+0x2f8>)
 80112d4:	3128      	adds	r1, #40	; 0x28
 80112d6:	4620      	mov	r0, r4
 80112d8:	f7f6 fa52 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 80112dc:	6829      	ldr	r1, [r5, #0]
 80112de:	4a8a      	ldr	r2, [pc, #552]	; (8011508 <theme_apply+0x2fc>)
 80112e0:	3130      	adds	r1, #48	; 0x30
 80112e2:	4620      	mov	r0, r4
 80112e4:	f7f6 fa4c 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->underline, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 80112e8:	6829      	ldr	r1, [r5, #0]
 80112ea:	4a88      	ldr	r2, [pc, #544]	; (801150c <theme_apply+0x300>)
 80112ec:	3178      	adds	r1, #120	; 0x78
 80112ee:	4620      	mov	r0, r4
 80112f0:	f7f6 fa46 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->large_border, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 80112f4:	6829      	ldr	r1, [r5, #0]
 80112f6:	4a85      	ldr	r2, [pc, #532]	; (801150c <theme_apply+0x300>)
        lv_obj_add_style(obj, &styles->large_border, LV_STATE_EDITED);
 80112f8:	3168      	adds	r1, #104	; 0x68
 80112fa:	e797      	b.n	801122c <theme_apply+0x20>
 80112fc:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_bar_class)) {
 80112fe:	4984      	ldr	r1, [pc, #528]	; (8011510 <theme_apply+0x304>)
 8011300:	4620      	mov	r0, r4
 8011302:	f7f3 f891 	bl	8004428 <lv_obj_check_type>
 8011306:	4606      	mov	r6, r0
 8011308:	b1b8      	cbz	r0, 801133a <theme_apply+0x12e>
        lv_obj_add_style(obj, &styles->card, 0);
 801130a:	4d79      	ldr	r5, [pc, #484]	; (80114f0 <theme_apply+0x2e4>)
 801130c:	9a01      	ldr	r2, [sp, #4]
 801130e:	6829      	ldr	r1, [r5, #0]
 8011310:	4620      	mov	r0, r4
 8011312:	3108      	adds	r1, #8
 8011314:	f7f6 fa34 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8011318:	6829      	ldr	r1, [r5, #0]
 801131a:	9a01      	ldr	r2, [sp, #4]
 801131c:	3150      	adds	r1, #80	; 0x50
 801131e:	4620      	mov	r0, r4
 8011320:	f7f6 fa2e 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->inv, LV_PART_INDICATOR);
 8011324:	6829      	ldr	r1, [r5, #0]
 8011326:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801132a:	3128      	adds	r1, #40	; 0x28
 801132c:	4620      	mov	r0, r4
 801132e:	f7f6 fa27 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->focus, LV_STATE_FOCUS_KEY);
 8011332:	6829      	ldr	r1, [r5, #0]
 8011334:	2204      	movs	r2, #4
 8011336:	3138      	adds	r1, #56	; 0x38
 8011338:	e778      	b.n	801122c <theme_apply+0x20>
    else if(lv_obj_check_type(obj, &lv_slider_class)) {
 801133a:	4976      	ldr	r1, [pc, #472]	; (8011514 <theme_apply+0x308>)
 801133c:	4620      	mov	r0, r4
 801133e:	f7f3 f873 	bl	8004428 <lv_obj_check_type>
 8011342:	b1f8      	cbz	r0, 8011384 <theme_apply+0x178>
        lv_obj_add_style(obj, &styles->card, 0);
 8011344:	4d6a      	ldr	r5, [pc, #424]	; (80114f0 <theme_apply+0x2e4>)
 8011346:	6829      	ldr	r1, [r5, #0]
 8011348:	4632      	mov	r2, r6
 801134a:	3108      	adds	r1, #8
 801134c:	4620      	mov	r0, r4
 801134e:	f7f6 fa17 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8011352:	6829      	ldr	r1, [r5, #0]
 8011354:	4632      	mov	r2, r6
 8011356:	3150      	adds	r1, #80	; 0x50
 8011358:	4620      	mov	r0, r4
 801135a:	f7f6 fa11 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->inv, LV_PART_INDICATOR);
 801135e:	6829      	ldr	r1, [r5, #0]
 8011360:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011364:	3128      	adds	r1, #40	; 0x28
        lv_obj_add_style(obj, &styles->pad_zero, LV_PART_INDICATOR);
 8011366:	4620      	mov	r0, r4
 8011368:	f7f6 fa0a 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->card, LV_PART_KNOB);
 801136c:	6829      	ldr	r1, [r5, #0]
 801136e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8011372:	3108      	adds	r1, #8
 8011374:	4620      	mov	r0, r4
 8011376:	f7f6 fa03 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->radius_circle, LV_PART_KNOB);
 801137a:	6829      	ldr	r1, [r5, #0]
 801137c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8011380:	3160      	adds	r1, #96	; 0x60
 8011382:	e780      	b.n	8011286 <theme_apply+0x7a>
    else if(lv_obj_check_type(obj, &lv_table_class)) {
 8011384:	4964      	ldr	r1, [pc, #400]	; (8011518 <theme_apply+0x30c>)
 8011386:	4620      	mov	r0, r4
 8011388:	f7f3 f84e 	bl	8004428 <lv_obj_check_type>
 801138c:	4607      	mov	r7, r0
 801138e:	b358      	cbz	r0, 80113e8 <theme_apply+0x1dc>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8011390:	4d57      	ldr	r5, [pc, #348]	; (80114f0 <theme_apply+0x2e4>)
 8011392:	6829      	ldr	r1, [r5, #0]
 8011394:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011398:	3110      	adds	r1, #16
 801139a:	4620      	mov	r0, r4
 801139c:	f7f6 f9f0 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->card, LV_PART_ITEMS);
 80113a0:	6829      	ldr	r1, [r5, #0]
 80113a2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80113a6:	3108      	adds	r1, #8
 80113a8:	4620      	mov	r0, r4
 80113aa:	f7f6 f9e9 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->no_radius, LV_PART_ITEMS);
 80113ae:	6829      	ldr	r1, [r5, #0]
 80113b0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80113b4:	3158      	adds	r1, #88	; 0x58
 80113b6:	4620      	mov	r0, r4
 80113b8:	f7f6 f9e2 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pr, LV_PART_ITEMS | LV_STATE_PRESSED);
 80113bc:	6829      	ldr	r1, [r5, #0]
 80113be:	4a50      	ldr	r2, [pc, #320]	; (8011500 <theme_apply+0x2f4>)
 80113c0:	3120      	adds	r1, #32
 80113c2:	4620      	mov	r0, r4
 80113c4:	f7f6 f9dc 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->focus, LV_STATE_FOCUS_KEY);
 80113c8:	6829      	ldr	r1, [r5, #0]
 80113ca:	2204      	movs	r2, #4
 80113cc:	3138      	adds	r1, #56	; 0x38
 80113ce:	4620      	mov	r0, r4
 80113d0:	f7f6 f9d6 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->inv, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 80113d4:	6829      	ldr	r1, [r5, #0]
 80113d6:	4a4d      	ldr	r2, [pc, #308]	; (801150c <theme_apply+0x300>)
 80113d8:	3128      	adds	r1, #40	; 0x28
        lv_obj_add_style(obj, &styles->focus, LV_STATE_FOCUS_KEY);
 80113da:	4620      	mov	r0, r4
 80113dc:	f7f6 f9d0 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->edit, LV_STATE_EDITED);
 80113e0:	6829      	ldr	r1, [r5, #0]
 80113e2:	2208      	movs	r2, #8
 80113e4:	3140      	adds	r1, #64	; 0x40
 80113e6:	e721      	b.n	801122c <theme_apply+0x20>
    else if(lv_obj_check_type(obj, &lv_checkbox_class)) {
 80113e8:	494c      	ldr	r1, [pc, #304]	; (801151c <theme_apply+0x310>)
 80113ea:	4620      	mov	r0, r4
 80113ec:	f7f3 f81c 	bl	8004428 <lv_obj_check_type>
 80113f0:	4606      	mov	r6, r0
 80113f2:	b1e8      	cbz	r0, 8011430 <theme_apply+0x224>
        lv_obj_add_style(obj, &styles->pad_gap, LV_PART_MAIN);
 80113f4:	4d3e      	ldr	r5, [pc, #248]	; (80114f0 <theme_apply+0x2e4>)
 80113f6:	6829      	ldr	r1, [r5, #0]
 80113f8:	463a      	mov	r2, r7
 80113fa:	3148      	adds	r1, #72	; 0x48
 80113fc:	4620      	mov	r0, r4
 80113fe:	f7f6 f9bf 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->card, LV_PART_INDICATOR);
 8011402:	6829      	ldr	r1, [r5, #0]
 8011404:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011408:	3108      	adds	r1, #8
 801140a:	4620      	mov	r0, r4
 801140c:	f7f6 f9b8 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 8011410:	6829      	ldr	r1, [r5, #0]
 8011412:	4a43      	ldr	r2, [pc, #268]	; (8011520 <theme_apply+0x314>)
 8011414:	3130      	adds	r1, #48	; 0x30
 8011416:	4620      	mov	r0, r4
 8011418:	f7f6 f9b2 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->inv, LV_PART_INDICATOR | LV_STATE_CHECKED);
 801141c:	6829      	ldr	r1, [r5, #0]
 801141e:	4a41      	ldr	r2, [pc, #260]	; (8011524 <theme_apply+0x318>)
 8011420:	3128      	adds	r1, #40	; 0x28
 8011422:	4620      	mov	r0, r4
 8011424:	f7f6 f9ac 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pr, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8011428:	6829      	ldr	r1, [r5, #0]
 801142a:	4a3f      	ldr	r2, [pc, #252]	; (8011528 <theme_apply+0x31c>)
        lv_obj_add_style(obj, &styles->pr, LV_PART_SELECTED | LV_STATE_PRESSED);
 801142c:	3120      	adds	r1, #32
 801142e:	e72a      	b.n	8011286 <theme_apply+0x7a>
    else if(lv_obj_check_type(obj, &lv_switch_class)) {
 8011430:	493e      	ldr	r1, [pc, #248]	; (801152c <theme_apply+0x320>)
 8011432:	4620      	mov	r0, r4
 8011434:	f7f2 fff8 	bl	8004428 <lv_obj_check_type>
 8011438:	b398      	cbz	r0, 80114a2 <theme_apply+0x296>
        lv_obj_add_style(obj, &styles->card, 0);
 801143a:	4d2d      	ldr	r5, [pc, #180]	; (80114f0 <theme_apply+0x2e4>)
 801143c:	6829      	ldr	r1, [r5, #0]
 801143e:	4632      	mov	r2, r6
 8011440:	3108      	adds	r1, #8
 8011442:	4620      	mov	r0, r4
 8011444:	f7f6 f99c 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->radius_circle, 0);
 8011448:	6829      	ldr	r1, [r5, #0]
 801144a:	4632      	mov	r2, r6
 801144c:	3160      	adds	r1, #96	; 0x60
 801144e:	4620      	mov	r0, r4
 8011450:	f7f6 f996 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8011454:	6829      	ldr	r1, [r5, #0]
 8011456:	4632      	mov	r2, r6
 8011458:	3150      	adds	r1, #80	; 0x50
 801145a:	4620      	mov	r0, r4
 801145c:	f7f6 f990 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->inv, LV_PART_INDICATOR);
 8011460:	6829      	ldr	r1, [r5, #0]
 8011462:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011466:	3128      	adds	r1, #40	; 0x28
 8011468:	4620      	mov	r0, r4
 801146a:	f7f6 f989 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->radius_circle, LV_PART_INDICATOR);
 801146e:	6829      	ldr	r1, [r5, #0]
 8011470:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011474:	3160      	adds	r1, #96	; 0x60
 8011476:	4620      	mov	r0, r4
 8011478:	f7f6 f982 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->card, LV_PART_KNOB);
 801147c:	6829      	ldr	r1, [r5, #0]
 801147e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8011482:	3108      	adds	r1, #8
 8011484:	4620      	mov	r0, r4
 8011486:	f7f6 f97b 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->radius_circle, LV_PART_KNOB);
 801148a:	6829      	ldr	r1, [r5, #0]
 801148c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8011490:	3160      	adds	r1, #96	; 0x60
 8011492:	4620      	mov	r0, r4
 8011494:	f7f6 f974 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, LV_PART_KNOB);
 8011498:	6829      	ldr	r1, [r5, #0]
 801149a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801149e:	3150      	adds	r1, #80	; 0x50
 80114a0:	e6f1      	b.n	8011286 <theme_apply+0x7a>
    else if(lv_obj_check_type(obj, &lv_roller_class)) {
 80114a2:	4923      	ldr	r1, [pc, #140]	; (8011530 <theme_apply+0x324>)
 80114a4:	4620      	mov	r0, r4
 80114a6:	f7f2 ffbf 	bl	8004428 <lv_obj_check_type>
 80114aa:	b188      	cbz	r0, 80114d0 <theme_apply+0x2c4>
        lv_obj_add_style(obj, &styles->card, 0);
 80114ac:	4d10      	ldr	r5, [pc, #64]	; (80114f0 <theme_apply+0x2e4>)
 80114ae:	6829      	ldr	r1, [r5, #0]
 80114b0:	2200      	movs	r2, #0
 80114b2:	3108      	adds	r1, #8
 80114b4:	4620      	mov	r0, r4
 80114b6:	f7f6 f963 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->large_line_space, 0);
 80114ba:	6829      	ldr	r1, [r5, #0]
 80114bc:	2200      	movs	r2, #0
 80114be:	3170      	adds	r1, #112	; 0x70
 80114c0:	4620      	mov	r0, r4
 80114c2:	f7f6 f95d 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->inv, LV_PART_SELECTED);
 80114c6:	6829      	ldr	r1, [r5, #0]
 80114c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
        lv_obj_add_style(obj, &styles->inv, LV_PART_CURSOR);
 80114cc:	3128      	adds	r1, #40	; 0x28
 80114ce:	e6da      	b.n	8011286 <theme_apply+0x7a>
    else if(lv_obj_check_type(obj, &lv_dropdown_class)) {
 80114d0:	4918      	ldr	r1, [pc, #96]	; (8011534 <theme_apply+0x328>)
 80114d2:	4620      	mov	r0, r4
 80114d4:	f7f2 ffa8 	bl	8004428 <lv_obj_check_type>
 80114d8:	b370      	cbz	r0, 8011538 <theme_apply+0x32c>
        lv_obj_add_style(obj, &styles->card, 0);
 80114da:	4d05      	ldr	r5, [pc, #20]	; (80114f0 <theme_apply+0x2e4>)
 80114dc:	6829      	ldr	r1, [r5, #0]
 80114de:	2200      	movs	r2, #0
 80114e0:	3108      	adds	r1, #8
 80114e2:	4620      	mov	r0, r4
 80114e4:	f7f6 f94c 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pr, LV_STATE_PRESSED);
 80114e8:	6829      	ldr	r1, [r5, #0]
 80114ea:	2220      	movs	r2, #32
 80114ec:	4411      	add	r1, r2
 80114ee:	e6ca      	b.n	8011286 <theme_apply+0x7a>
 80114f0:	20000c84 	.word	0x20000c84
 80114f4:	0801e2b4 	.word	0x0801e2b4
 80114f8:	08020454 	.word	0x08020454
 80114fc:	0802048c 	.word	0x0802048c
 8011500:	00050020 	.word	0x00050020
 8011504:	00050001 	.word	0x00050001
 8011508:	00050080 	.word	0x00050080
 801150c:	00050004 	.word	0x00050004
 8011510:	08020438 	.word	0x08020438
 8011514:	080205b4 	.word	0x080205b4
 8011518:	080205ec 	.word	0x080205ec
 801151c:	080204b4 	.word	0x080204b4
 8011520:	00020080 	.word	0x00020080
 8011524:	00020001 	.word	0x00020001
 8011528:	00020020 	.word	0x00020020
 801152c:	080205d0 	.word	0x080205d0
 8011530:	0802057c 	.word	0x0802057c
 8011534:	080204f0 	.word	0x080204f0
 8011538:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_dropdownlist_class)) {
 801153a:	4954      	ldr	r1, [pc, #336]	; (801168c <theme_apply+0x480>)
 801153c:	4620      	mov	r0, r4
 801153e:	f7f2 ff73 	bl	8004428 <lv_obj_check_type>
 8011542:	4607      	mov	r7, r0
 8011544:	b1e0      	cbz	r0, 8011580 <theme_apply+0x374>
        lv_obj_add_style(obj, &styles->card, 0);
 8011546:	4d52      	ldr	r5, [pc, #328]	; (8011690 <theme_apply+0x484>)
 8011548:	9a01      	ldr	r2, [sp, #4]
 801154a:	6829      	ldr	r1, [r5, #0]
 801154c:	4620      	mov	r0, r4
 801154e:	3108      	adds	r1, #8
 8011550:	f7f6 f916 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->large_line_space, 0);
 8011554:	6829      	ldr	r1, [r5, #0]
 8011556:	9a01      	ldr	r2, [sp, #4]
 8011558:	3170      	adds	r1, #112	; 0x70
 801155a:	4620      	mov	r0, r4
 801155c:	f7f6 f910 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8011560:	6829      	ldr	r1, [r5, #0]
 8011562:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011566:	3110      	adds	r1, #16
 8011568:	4620      	mov	r0, r4
 801156a:	f7f6 f909 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->inv, LV_PART_SELECTED | LV_STATE_CHECKED);
 801156e:	6829      	ldr	r1, [r5, #0]
 8011570:	4a48      	ldr	r2, [pc, #288]	; (8011694 <theme_apply+0x488>)
 8011572:	3128      	adds	r1, #40	; 0x28
 8011574:	4620      	mov	r0, r4
 8011576:	f7f6 f903 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pr, LV_PART_SELECTED | LV_STATE_PRESSED);
 801157a:	6829      	ldr	r1, [r5, #0]
 801157c:	4a46      	ldr	r2, [pc, #280]	; (8011698 <theme_apply+0x48c>)
 801157e:	e755      	b.n	801142c <theme_apply+0x220>
    else if(lv_obj_check_type(obj, &lv_arc_class)) {
 8011580:	4946      	ldr	r1, [pc, #280]	; (801169c <theme_apply+0x490>)
 8011582:	4620      	mov	r0, r4
 8011584:	f7f2 ff50 	bl	8004428 <lv_obj_check_type>
 8011588:	4606      	mov	r6, r0
 801158a:	b190      	cbz	r0, 80115b2 <theme_apply+0x3a6>
        lv_obj_add_style(obj, &styles->card, 0);
 801158c:	4d40      	ldr	r5, [pc, #256]	; (8011690 <theme_apply+0x484>)
 801158e:	6829      	ldr	r1, [r5, #0]
 8011590:	463a      	mov	r2, r7
 8011592:	3108      	adds	r1, #8
 8011594:	4620      	mov	r0, r4
 8011596:	f7f6 f8f3 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->inv, LV_PART_INDICATOR);
 801159a:	6829      	ldr	r1, [r5, #0]
 801159c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80115a0:	3128      	adds	r1, #40	; 0x28
 80115a2:	4620      	mov	r0, r4
 80115a4:	f7f6 f8ec 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, LV_PART_INDICATOR);
 80115a8:	6829      	ldr	r1, [r5, #0]
 80115aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80115ae:	3150      	adds	r1, #80	; 0x50
 80115b0:	e6d9      	b.n	8011366 <theme_apply+0x15a>
    else if(lv_obj_check_type(obj, &lv_textarea_class)) {
 80115b2:	493b      	ldr	r1, [pc, #236]	; (80116a0 <theme_apply+0x494>)
 80115b4:	4620      	mov	r0, r4
 80115b6:	f7f2 ff37 	bl	8004428 <lv_obj_check_type>
 80115ba:	4605      	mov	r5, r0
 80115bc:	b1b8      	cbz	r0, 80115ee <theme_apply+0x3e2>
        lv_obj_add_style(obj, &styles->card, 0);
 80115be:	4d34      	ldr	r5, [pc, #208]	; (8011690 <theme_apply+0x484>)
 80115c0:	6829      	ldr	r1, [r5, #0]
 80115c2:	4632      	mov	r2, r6
 80115c4:	3108      	adds	r1, #8
 80115c6:	4620      	mov	r0, r4
 80115c8:	f7f6 f8da 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80115cc:	6829      	ldr	r1, [r5, #0]
 80115ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80115d2:	3110      	adds	r1, #16
 80115d4:	4620      	mov	r0, r4
 80115d6:	f7f6 f8d3 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_cursor, LV_PART_CURSOR | LV_STATE_FOCUSED);
 80115da:	6829      	ldr	r1, [r5, #0]
 80115dc:	4a31      	ldr	r2, [pc, #196]	; (80116a4 <theme_apply+0x498>)
 80115de:	3180      	adds	r1, #128	; 0x80
 80115e0:	4620      	mov	r0, r4
 80115e2:	f7f6 f8cd 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->focus, LV_STATE_FOCUSED);
 80115e6:	6829      	ldr	r1, [r5, #0]
 80115e8:	2202      	movs	r2, #2
        lv_obj_add_style(obj, &styles->focus, LV_STATE_FOCUS_KEY);
 80115ea:	3138      	adds	r1, #56	; 0x38
 80115ec:	e6f5      	b.n	80113da <theme_apply+0x1ce>
    else if(lv_obj_check_type(obj, &lv_list_class)) {
 80115ee:	492e      	ldr	r1, [pc, #184]	; (80116a8 <theme_apply+0x49c>)
 80115f0:	4620      	mov	r0, r4
 80115f2:	f7f2 ff19 	bl	8004428 <lv_obj_check_type>
 80115f6:	b140      	cbz	r0, 801160a <theme_apply+0x3fe>
        lv_obj_add_style(obj, &styles->card, 0);
 80115f8:	4e25      	ldr	r6, [pc, #148]	; (8011690 <theme_apply+0x484>)
 80115fa:	6831      	ldr	r1, [r6, #0]
 80115fc:	462a      	mov	r2, r5
 80115fe:	3108      	adds	r1, #8
 8011600:	4620      	mov	r0, r4
 8011602:	f7f6 f8bd 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8011606:	6831      	ldr	r1, [r6, #0]
 8011608:	e60d      	b.n	8011226 <theme_apply+0x1a>
    else if(lv_obj_check_type(obj, &lv_list_text_class)) {
 801160a:	4928      	ldr	r1, [pc, #160]	; (80116ac <theme_apply+0x4a0>)
 801160c:	4620      	mov	r0, r4
 801160e:	f7f2 ff0b 	bl	8004428 <lv_obj_check_type>
 8011612:	4607      	mov	r7, r0
 8011614:	2800      	cmp	r0, #0
 8011616:	d136      	bne.n	8011686 <theme_apply+0x47a>
    else if(lv_obj_check_type(obj, &lv_list_btn_class)) {
 8011618:	4925      	ldr	r1, [pc, #148]	; (80116b0 <theme_apply+0x4a4>)
 801161a:	4620      	mov	r0, r4
 801161c:	f7f2 ff04 	bl	8004428 <lv_obj_check_type>
 8011620:	4606      	mov	r6, r0
 8011622:	b1a8      	cbz	r0, 8011650 <theme_apply+0x444>
        lv_obj_add_style(obj, &styles->card, 0);
 8011624:	4d1a      	ldr	r5, [pc, #104]	; (8011690 <theme_apply+0x484>)
 8011626:	6829      	ldr	r1, [r5, #0]
 8011628:	463a      	mov	r2, r7
 801162a:	3108      	adds	r1, #8
 801162c:	4620      	mov	r0, r4
 801162e:	f7f6 f8a7 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pr, LV_STATE_PRESSED);
 8011632:	6829      	ldr	r1, [r5, #0]
 8011634:	2220      	movs	r2, #32
 8011636:	4411      	add	r1, r2
 8011638:	4620      	mov	r0, r4
 801163a:	f7f6 f8a1 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->focus, LV_STATE_FOCUS_KEY);
 801163e:	6829      	ldr	r1, [r5, #0]
 8011640:	2204      	movs	r2, #4
 8011642:	3138      	adds	r1, #56	; 0x38
 8011644:	4620      	mov	r0, r4
 8011646:	f7f6 f89b 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->large_border, LV_STATE_EDITED);
 801164a:	6829      	ldr	r1, [r5, #0]
 801164c:	2208      	movs	r2, #8
 801164e:	e653      	b.n	80112f8 <theme_apply+0xec>
    else if(lv_obj_check_type(obj, &lv_spinbox_class)) {
 8011650:	4918      	ldr	r1, [pc, #96]	; (80116b4 <theme_apply+0x4a8>)
 8011652:	4620      	mov	r0, r4
 8011654:	f7f2 fee8 	bl	8004428 <lv_obj_check_type>
 8011658:	4605      	mov	r5, r0
 801165a:	b150      	cbz	r0, 8011672 <theme_apply+0x466>
        lv_obj_add_style(obj, &styles->card, 0);
 801165c:	4d0c      	ldr	r5, [pc, #48]	; (8011690 <theme_apply+0x484>)
 801165e:	6829      	ldr	r1, [r5, #0]
 8011660:	4632      	mov	r2, r6
 8011662:	3108      	adds	r1, #8
 8011664:	4620      	mov	r0, r4
 8011666:	f7f6 f88b 	bl	8007780 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->inv, LV_PART_CURSOR);
 801166a:	6829      	ldr	r1, [r5, #0]
 801166c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8011670:	e72c      	b.n	80114cc <theme_apply+0x2c0>
    else if(lv_obj_check_type(obj, &lv_led_class)) {
 8011672:	4911      	ldr	r1, [pc, #68]	; (80116b8 <theme_apply+0x4ac>)
 8011674:	4620      	mov	r0, r4
 8011676:	f7f2 fed7 	bl	8004428 <lv_obj_check_type>
 801167a:	b120      	cbz	r0, 8011686 <theme_apply+0x47a>
        lv_obj_add_style(obj, &styles->card, 0);
 801167c:	4b04      	ldr	r3, [pc, #16]	; (8011690 <theme_apply+0x484>)
 801167e:	6819      	ldr	r1, [r3, #0]
 8011680:	462a      	mov	r2, r5
 8011682:	3108      	adds	r1, #8
 8011684:	e5d2      	b.n	801122c <theme_apply+0x20>
}
 8011686:	b003      	add	sp, #12
 8011688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801168a:	bf00      	nop
 801168c:	0802050c 	.word	0x0802050c
 8011690:	20000c84 	.word	0x20000c84
 8011694:	00040001 	.word	0x00040001
 8011698:	00040020 	.word	0x00040020
 801169c:	0802041c 	.word	0x0802041c
 80116a0:	08020610 	.word	0x08020610
 80116a4:	00070002 	.word	0x00070002
 80116a8:	0801e464 	.word	0x0801e464
 80116ac:	0801e480 	.word	0x0801e480
 80116b0:	0801e448 	.word	0x0801e448
 80116b4:	0801e4a0 	.word	0x0801e4a0
 80116b8:	0801e42c 	.word	0x0801e42c

080116bc <lv_style_set_pad_all>:
    lv_style_set_width(style, value);
    lv_style_set_height(style, value);
}

static inline void lv_style_set_pad_all(lv_style_t * style, lv_coord_t value)
{
 80116bc:	b538      	push	{r3, r4, r5, lr}
 80116be:	4604      	mov	r4, r0
 80116c0:	460d      	mov	r5, r1
    lv_style_set_pad_left(style, value);
 80116c2:	f002 fea5 	bl	8014410 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 80116c6:	4629      	mov	r1, r5
 80116c8:	4620      	mov	r0, r4
 80116ca:	f002 fea5 	bl	8014418 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 80116ce:	4629      	mov	r1, r5
 80116d0:	4620      	mov	r0, r4
 80116d2:	f002 fe95 	bl	8014400 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 80116d6:	4629      	mov	r1, r5
 80116d8:	4620      	mov	r0, r4
}
 80116da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_style_set_pad_bottom(style, value);
 80116de:	f002 be93 	b.w	8014408 <lv_style_set_pad_bottom>
	...

080116e4 <style_init_reset>:
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) {
 80116e4:	4b03      	ldr	r3, [pc, #12]	; (80116f4 <style_init_reset+0x10>)
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	b10b      	cbz	r3, 80116ee <style_init_reset+0xa>
        lv_style_reset(style);
 80116ea:	f002 bc33 	b.w	8013f54 <lv_style_reset>
    }
    else {
        lv_style_init(style);
 80116ee:	f002 bc2e 	b.w	8013f4e <lv_style_init>
 80116f2:	bf00      	nop
 80116f4:	20000c82 	.word	0x20000c82

080116f8 <lv_theme_mono_init>:
{
 80116f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    if(!inited) {
 80116fc:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 80119e0 <lv_theme_mono_init+0x2e8>
 8011700:	4cb2      	ldr	r4, [pc, #712]	; (80119cc <lv_theme_mono_init+0x2d4>)
 8011702:	f899 3000 	ldrb.w	r3, [r9]
{
 8011706:	4680      	mov	r8, r0
 8011708:	460d      	mov	r5, r1
 801170a:	4692      	mov	sl, r2
    if(!inited) {
 801170c:	b92b      	cbnz	r3, 801171a <lv_theme_mono_init+0x22>
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 801170e:	2088      	movs	r0, #136	; 0x88
 8011710:	f001 fe0a 	bl	8013328 <lv_mem_alloc>
 8011714:	4bae      	ldr	r3, [pc, #696]	; (80119d0 <lv_theme_mono_init+0x2d8>)
        styles = (my_theme_styles_t *)LV_GC_ROOT(_lv_theme_default_styles);
 8011716:	6020      	str	r0, [r4, #0]
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 8011718:	6018      	str	r0, [r3, #0]
    theme.disp = disp;
 801171a:	4fae      	ldr	r7, [pc, #696]	; (80119d4 <lv_theme_mono_init+0x2dc>)
    theme.font_small = LV_FONT_DEFAULT;
 801171c:	4bae      	ldr	r3, [pc, #696]	; (80119d8 <lv_theme_mono_init+0x2e0>)
    style_init_reset(&styles->scrollbar);
 801171e:	6820      	ldr	r0, [r4, #0]
    theme.font_large = LV_FONT_DEFAULT;
 8011720:	61fb      	str	r3, [r7, #28]
    theme.font_normal = LV_FONT_DEFAULT;
 8011722:	e9c7 3305 	strd	r3, r3, [r7, #20]
    style_init_reset(&styles->scrollbar);
 8011726:	3010      	adds	r0, #16
    theme.apply_cb = theme_apply;
 8011728:	4bac      	ldr	r3, [pc, #688]	; (80119dc <lv_theme_mono_init+0x2e4>)
 801172a:	603b      	str	r3, [r7, #0]
    theme.disp = disp;
 801172c:	f8c7 800c 	str.w	r8, [r7, #12]
    style_init_reset(&styles->scrollbar);
 8011730:	f7ff ffd8 	bl	80116e4 <style_init_reset>
    lv_style_set_bg_opa(&styles->scrollbar, LV_OPA_COVER);
 8011734:	6820      	ldr	r0, [r4, #0]
 8011736:	21ff      	movs	r1, #255	; 0xff
 8011738:	3010      	adds	r0, #16
 801173a:	f002 fe87 	bl	801444c <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scrollbar, COLOR_FG);
 801173e:	6820      	ldr	r0, [r4, #0]
 8011740:	4629      	mov	r1, r5
 8011742:	3010      	adds	r0, #16
 8011744:	f002 fe74 	bl	8014430 <lv_style_set_bg_color>
    lv_style_set_width(&styles->scrollbar,  PAD_DEF);
 8011748:	6820      	ldr	r0, [r4, #0]
 801174a:	2104      	movs	r1, #4
 801174c:	3010      	adds	r0, #16
 801174e:	f002 fe53 	bl	80143f8 <lv_style_set_width>
    style_init_reset(&styles->scr);
 8011752:	6820      	ldr	r0, [r4, #0]
 8011754:	f085 0601 	eor.w	r6, r5, #1
 8011758:	f7ff ffc4 	bl	80116e4 <style_init_reset>
    lv_style_set_bg_opa(&styles->scr, LV_OPA_COVER);
 801175c:	6820      	ldr	r0, [r4, #0]
 801175e:	21ff      	movs	r1, #255	; 0xff
 8011760:	f002 fe74 	bl	801444c <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, COLOR_BG);
 8011764:	6820      	ldr	r0, [r4, #0]
 8011766:	4631      	mov	r1, r6
 8011768:	f002 fe62 	bl	8014430 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, COLOR_FG);
 801176c:	6820      	ldr	r0, [r4, #0]
 801176e:	4629      	mov	r1, r5
 8011770:	f002 fec0 	bl	80144f4 <lv_style_set_text_color>
    lv_style_set_pad_row(&styles->scr, PAD_DEF);
 8011774:	6820      	ldr	r0, [r4, #0]
 8011776:	2104      	movs	r1, #4
 8011778:	f002 fe52 	bl	8014420 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->scr, PAD_DEF);
 801177c:	6820      	ldr	r0, [r4, #0]
 801177e:	2104      	movs	r1, #4
 8011780:	f002 fe52 	bl	8014428 <lv_style_set_pad_column>
    lv_style_set_text_font(&styles->scr, font);
 8011784:	4651      	mov	r1, sl
 8011786:	6820      	ldr	r0, [r4, #0]
 8011788:	f002 fec2 	bl	8014510 <lv_style_set_text_font>
    style_init_reset(&styles->card);
 801178c:	6820      	ldr	r0, [r4, #0]
 801178e:	3008      	adds	r0, #8
 8011790:	f7ff ffa8 	bl	80116e4 <style_init_reset>
    lv_style_set_bg_opa(&styles->card, LV_OPA_COVER);
 8011794:	6820      	ldr	r0, [r4, #0]
 8011796:	21ff      	movs	r1, #255	; 0xff
 8011798:	3008      	adds	r0, #8
 801179a:	f002 fe57 	bl	801444c <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->card, COLOR_BG);
 801179e:	6820      	ldr	r0, [r4, #0]
 80117a0:	4631      	mov	r1, r6
 80117a2:	3008      	adds	r0, #8
 80117a4:	f002 fe44 	bl	8014430 <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->card, COLOR_FG);
 80117a8:	6820      	ldr	r0, [r4, #0]
 80117aa:	4629      	mov	r1, r5
 80117ac:	3008      	adds	r0, #8
 80117ae:	f002 fe51 	bl	8014454 <lv_style_set_border_color>
    lv_style_set_radius(&styles->card, 2);
 80117b2:	6820      	ldr	r0, [r4, #0]
 80117b4:	2102      	movs	r1, #2
 80117b6:	3008      	adds	r0, #8
 80117b8:	f002 feb6 	bl	8014528 <lv_style_set_radius>
    lv_style_set_border_width(&styles->card, BORDER_W_NORMAL);
 80117bc:	6820      	ldr	r0, [r4, #0]
 80117be:	2101      	movs	r1, #1
 80117c0:	3008      	adds	r0, #8
 80117c2:	f002 fe55 	bl	8014470 <lv_style_set_border_width>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 80117c6:	6820      	ldr	r0, [r4, #0]
 80117c8:	2104      	movs	r1, #4
 80117ca:	3008      	adds	r0, #8
 80117cc:	f7ff ff76 	bl	80116bc <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->card, PAD_DEF);
 80117d0:	6820      	ldr	r0, [r4, #0]
    lv_style_set_pad_bottom(style, value);
}

static inline void lv_style_set_pad_gap(lv_style_t * style, lv_coord_t value)
{
    lv_style_set_pad_row(style, value);
 80117d2:	2104      	movs	r1, #4
 80117d4:	3008      	adds	r0, #8
 80117d6:	9001      	str	r0, [sp, #4]
 80117d8:	f002 fe22 	bl	8014420 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 80117dc:	9801      	ldr	r0, [sp, #4]
 80117de:	2104      	movs	r1, #4
 80117e0:	f002 fe22 	bl	8014428 <lv_style_set_pad_column>
    lv_style_set_text_color(&styles->card, COLOR_FG);
 80117e4:	6820      	ldr	r0, [r4, #0]
 80117e6:	4629      	mov	r1, r5
 80117e8:	3008      	adds	r0, #8
 80117ea:	f002 fe83 	bl	80144f4 <lv_style_set_text_color>
    lv_style_set_line_width(&styles->card, 2);
 80117ee:	6820      	ldr	r0, [r4, #0]
 80117f0:	2102      	movs	r1, #2
 80117f2:	3008      	adds	r0, #8
 80117f4:	f002 fe5a 	bl	80144ac <lv_style_set_line_width>
    lv_style_set_line_color(&styles->card, COLOR_FG);
 80117f8:	6820      	ldr	r0, [r4, #0]
 80117fa:	4629      	mov	r1, r5
 80117fc:	3008      	adds	r0, #8
 80117fe:	f002 fe59 	bl	80144b4 <lv_style_set_line_color>
    lv_style_set_arc_width(&styles->card, 2);
 8011802:	6820      	ldr	r0, [r4, #0]
 8011804:	2102      	movs	r1, #2
 8011806:	3008      	adds	r0, #8
 8011808:	f002 fe62 	bl	80144d0 <lv_style_set_arc_width>
    lv_style_set_arc_color(&styles->card, COLOR_FG);
 801180c:	6820      	ldr	r0, [r4, #0]
 801180e:	4629      	mov	r1, r5
 8011810:	3008      	adds	r0, #8
 8011812:	f002 fe61 	bl	80144d8 <lv_style_set_arc_color>
    lv_style_set_outline_color(&styles->card, COLOR_FG);
 8011816:	6820      	ldr	r0, [r4, #0]
 8011818:	4629      	mov	r1, r5
 801181a:	3008      	adds	r0, #8
 801181c:	f002 fe34 	bl	8014488 <lv_style_set_outline_color>
    lv_style_set_anim_time(&styles->card, 300);
 8011820:	6820      	ldr	r0, [r4, #0]
 8011822:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8011826:	3008      	adds	r0, #8
 8011828:	f002 fe82 	bl	8014530 <lv_style_set_anim_time>
    style_init_reset(&styles->pr);
 801182c:	6820      	ldr	r0, [r4, #0]
 801182e:	3020      	adds	r0, #32
 8011830:	f7ff ff58 	bl	80116e4 <style_init_reset>
    lv_style_set_border_width(&styles->pr, BORDER_W_PR);
 8011834:	6820      	ldr	r0, [r4, #0]
 8011836:	2103      	movs	r1, #3
 8011838:	3020      	adds	r0, #32
 801183a:	f002 fe19 	bl	8014470 <lv_style_set_border_width>
    style_init_reset(&styles->inv);
 801183e:	6820      	ldr	r0, [r4, #0]
 8011840:	3028      	adds	r0, #40	; 0x28
 8011842:	f7ff ff4f 	bl	80116e4 <style_init_reset>
    lv_style_set_bg_opa(&styles->inv, LV_OPA_COVER);
 8011846:	6820      	ldr	r0, [r4, #0]
 8011848:	21ff      	movs	r1, #255	; 0xff
 801184a:	3028      	adds	r0, #40	; 0x28
 801184c:	f002 fdfe 	bl	801444c <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->inv, COLOR_FG);
 8011850:	6820      	ldr	r0, [r4, #0]
 8011852:	4629      	mov	r1, r5
 8011854:	3028      	adds	r0, #40	; 0x28
 8011856:	f002 fdeb 	bl	8014430 <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->inv, COLOR_BG);
 801185a:	6820      	ldr	r0, [r4, #0]
 801185c:	4631      	mov	r1, r6
 801185e:	3028      	adds	r0, #40	; 0x28
 8011860:	f002 fdf8 	bl	8014454 <lv_style_set_border_color>
    lv_style_set_line_color(&styles->inv, COLOR_BG);
 8011864:	6820      	ldr	r0, [r4, #0]
 8011866:	4631      	mov	r1, r6
 8011868:	3028      	adds	r0, #40	; 0x28
 801186a:	f002 fe23 	bl	80144b4 <lv_style_set_line_color>
    lv_style_set_arc_color(&styles->inv, COLOR_BG);
 801186e:	6820      	ldr	r0, [r4, #0]
 8011870:	4631      	mov	r1, r6
 8011872:	3028      	adds	r0, #40	; 0x28
 8011874:	f002 fe30 	bl	80144d8 <lv_style_set_arc_color>
    lv_style_set_text_color(&styles->inv, COLOR_BG);
 8011878:	6820      	ldr	r0, [r4, #0]
 801187a:	4631      	mov	r1, r6
 801187c:	3028      	adds	r0, #40	; 0x28
 801187e:	f002 fe39 	bl	80144f4 <lv_style_set_text_color>
    lv_style_set_outline_color(&styles->inv, COLOR_BG);
 8011882:	6820      	ldr	r0, [r4, #0]
 8011884:	4631      	mov	r1, r6
 8011886:	3028      	adds	r0, #40	; 0x28
 8011888:	f002 fdfe 	bl	8014488 <lv_style_set_outline_color>
    style_init_reset(&styles->disabled);
 801188c:	6820      	ldr	r0, [r4, #0]
 801188e:	3030      	adds	r0, #48	; 0x30
 8011890:	f7ff ff28 	bl	80116e4 <style_init_reset>
    lv_style_set_border_width(&styles->disabled, BORDER_W_DIS);
 8011894:	6820      	ldr	r0, [r4, #0]
 8011896:	2100      	movs	r1, #0
 8011898:	3030      	adds	r0, #48	; 0x30
 801189a:	f002 fde9 	bl	8014470 <lv_style_set_border_width>
    style_init_reset(&styles->focus);
 801189e:	6820      	ldr	r0, [r4, #0]
 80118a0:	3038      	adds	r0, #56	; 0x38
 80118a2:	f7ff ff1f 	bl	80116e4 <style_init_reset>
    lv_style_set_outline_width(&styles->focus, 1);
 80118a6:	6820      	ldr	r0, [r4, #0]
 80118a8:	2101      	movs	r1, #1
 80118aa:	3038      	adds	r0, #56	; 0x38
 80118ac:	f002 fde8 	bl	8014480 <lv_style_set_outline_width>
    lv_style_set_outline_pad(&styles->focus, BORDER_W_FOCUS);
 80118b0:	6820      	ldr	r0, [r4, #0]
 80118b2:	2101      	movs	r1, #1
 80118b4:	3038      	adds	r0, #56	; 0x38
 80118b6:	f002 fdf5 	bl	80144a4 <lv_style_set_outline_pad>
    style_init_reset(&styles->edit);
 80118ba:	6820      	ldr	r0, [r4, #0]
 80118bc:	3040      	adds	r0, #64	; 0x40
 80118be:	f7ff ff11 	bl	80116e4 <style_init_reset>
    lv_style_set_outline_width(&styles->edit, BORDER_W_EDIT);
 80118c2:	6820      	ldr	r0, [r4, #0]
 80118c4:	2102      	movs	r1, #2
 80118c6:	3040      	adds	r0, #64	; 0x40
 80118c8:	f002 fdda 	bl	8014480 <lv_style_set_outline_width>
    style_init_reset(&styles->large_border);
 80118cc:	6820      	ldr	r0, [r4, #0]
 80118ce:	3068      	adds	r0, #104	; 0x68
 80118d0:	f7ff ff08 	bl	80116e4 <style_init_reset>
    lv_style_set_border_width(&styles->large_border, BORDER_W_EDIT);
 80118d4:	6820      	ldr	r0, [r4, #0]
 80118d6:	2102      	movs	r1, #2
 80118d8:	3068      	adds	r0, #104	; 0x68
 80118da:	f002 fdc9 	bl	8014470 <lv_style_set_border_width>
    style_init_reset(&styles->pad_gap);
 80118de:	6820      	ldr	r0, [r4, #0]
 80118e0:	3048      	adds	r0, #72	; 0x48
 80118e2:	f7ff feff 	bl	80116e4 <style_init_reset>
    lv_style_set_pad_gap(&styles->pad_gap, PAD_DEF);
 80118e6:	6820      	ldr	r0, [r4, #0]
    lv_style_set_pad_row(style, value);
 80118e8:	2104      	movs	r1, #4
 80118ea:	3048      	adds	r0, #72	; 0x48
 80118ec:	9001      	str	r0, [sp, #4]
 80118ee:	f002 fd97 	bl	8014420 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 80118f2:	2104      	movs	r1, #4
 80118f4:	9801      	ldr	r0, [sp, #4]
 80118f6:	f002 fd97 	bl	8014428 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_zero);
 80118fa:	6820      	ldr	r0, [r4, #0]
 80118fc:	3050      	adds	r0, #80	; 0x50
 80118fe:	f7ff fef1 	bl	80116e4 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_zero, 0);
 8011902:	6820      	ldr	r0, [r4, #0]
 8011904:	2100      	movs	r1, #0
 8011906:	3050      	adds	r0, #80	; 0x50
 8011908:	f7ff fed8 	bl	80116bc <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->pad_zero, 0);
 801190c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_pad_row(style, value);
 801190e:	2100      	movs	r1, #0
 8011910:	3050      	adds	r0, #80	; 0x50
 8011912:	9001      	str	r0, [sp, #4]
 8011914:	f002 fd84 	bl	8014420 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8011918:	2100      	movs	r1, #0
 801191a:	9801      	ldr	r0, [sp, #4]
 801191c:	f002 fd84 	bl	8014428 <lv_style_set_pad_column>
    style_init_reset(&styles->no_radius);
 8011920:	6820      	ldr	r0, [r4, #0]
 8011922:	3058      	adds	r0, #88	; 0x58
 8011924:	f7ff fede 	bl	80116e4 <style_init_reset>
    lv_style_set_radius(&styles->no_radius, 0);
 8011928:	6820      	ldr	r0, [r4, #0]
 801192a:	2100      	movs	r1, #0
 801192c:	3058      	adds	r0, #88	; 0x58
 801192e:	f002 fdfb 	bl	8014528 <lv_style_set_radius>
    style_init_reset(&styles->radius_circle);
 8011932:	6820      	ldr	r0, [r4, #0]
 8011934:	3060      	adds	r0, #96	; 0x60
 8011936:	f7ff fed5 	bl	80116e4 <style_init_reset>
    lv_style_set_radius(&styles->radius_circle, LV_RADIUS_CIRCLE);
 801193a:	6820      	ldr	r0, [r4, #0]
 801193c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011940:	3060      	adds	r0, #96	; 0x60
 8011942:	f002 fdf1 	bl	8014528 <lv_style_set_radius>
    style_init_reset(&styles->large_line_space);
 8011946:	6820      	ldr	r0, [r4, #0]
 8011948:	3070      	adds	r0, #112	; 0x70
 801194a:	f7ff fecb 	bl	80116e4 <style_init_reset>
    lv_style_set_text_line_space(&styles->large_line_space, 6);
 801194e:	6820      	ldr	r0, [r4, #0]
 8011950:	2106      	movs	r1, #6
 8011952:	3070      	adds	r0, #112	; 0x70
 8011954:	f002 fde0 	bl	8014518 <lv_style_set_text_line_space>
    style_init_reset(&styles->underline);
 8011958:	6820      	ldr	r0, [r4, #0]
 801195a:	3078      	adds	r0, #120	; 0x78
 801195c:	f7ff fec2 	bl	80116e4 <style_init_reset>
    lv_style_set_text_decor(&styles->underline, LV_TEXT_DECOR_UNDERLINE);
 8011960:	6820      	ldr	r0, [r4, #0]
 8011962:	2101      	movs	r1, #1
 8011964:	3078      	adds	r0, #120	; 0x78
 8011966:	f002 fddb 	bl	8014520 <lv_style_set_text_decor>
    style_init_reset(&styles->ta_cursor);
 801196a:	6820      	ldr	r0, [r4, #0]
 801196c:	3080      	adds	r0, #128	; 0x80
 801196e:	f7ff feb9 	bl	80116e4 <style_init_reset>
    lv_style_set_border_side(&styles->ta_cursor, LV_BORDER_SIDE_LEFT);
 8011972:	6820      	ldr	r0, [r4, #0]
 8011974:	2104      	movs	r1, #4
 8011976:	3080      	adds	r0, #128	; 0x80
 8011978:	f002 fd7e 	bl	8014478 <lv_style_set_border_side>
    lv_style_set_border_color(&styles->ta_cursor, COLOR_FG);
 801197c:	6820      	ldr	r0, [r4, #0]
 801197e:	4629      	mov	r1, r5
 8011980:	3080      	adds	r0, #128	; 0x80
 8011982:	f002 fd67 	bl	8014454 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->ta_cursor, 2);
 8011986:	6820      	ldr	r0, [r4, #0]
 8011988:	2102      	movs	r1, #2
 801198a:	3080      	adds	r0, #128	; 0x80
 801198c:	f002 fd70 	bl	8014470 <lv_style_set_border_width>
    lv_style_set_bg_opa(&styles->ta_cursor, LV_OPA_TRANSP);
 8011990:	6820      	ldr	r0, [r4, #0]
 8011992:	2100      	movs	r1, #0
 8011994:	3080      	adds	r0, #128	; 0x80
 8011996:	f002 fd59 	bl	801444c <lv_style_set_bg_opa>
    lv_style_set_anim_time(&styles->ta_cursor, 500);
 801199a:	6820      	ldr	r0, [r4, #0]
 801199c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80119a0:	3080      	adds	r0, #128	; 0x80
 80119a2:	f002 fdc5 	bl	8014530 <lv_style_set_anim_time>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 80119a6:	f1b8 0f00 	cmp.w	r8, #0
 80119aa:	d109      	bne.n	80119c0 <lv_theme_mono_init+0x2c8>
 80119ac:	2000      	movs	r0, #0
 80119ae:	f7f5 ff6b 	bl	8007888 <lv_obj_report_style_change>
}
 80119b2:	4808      	ldr	r0, [pc, #32]	; (80119d4 <lv_theme_mono_init+0x2dc>)
    inited = true;
 80119b4:	2301      	movs	r3, #1
 80119b6:	f889 3000 	strb.w	r3, [r9]
}
 80119ba:	b002      	add	sp, #8
 80119bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 80119c0:	4640      	mov	r0, r8
 80119c2:	f7f1 fb3c 	bl	800303e <lv_disp_get_theme>
 80119c6:	4287      	cmp	r7, r0
 80119c8:	d1f3      	bne.n	80119b2 <lv_theme_mono_init+0x2ba>
 80119ca:	e7ef      	b.n	80119ac <lv_theme_mono_init+0x2b4>
 80119cc:	20000c84 	.word	0x20000c84
 80119d0:	20000e48 	.word	0x20000e48
 80119d4:	20000c88 	.word	0x20000c88
 80119d8:	08020240 	.word	0x08020240
 80119dc:	0801120d 	.word	0x0801120d
 80119e0:	20000c82 	.word	0x20000c82

080119e4 <lv_color_brightness>:
}

static inline uint32_t lv_color_to32(lv_color_t color)
{
#if LV_COLOR_DEPTH == 1
    if(color.full == 0)
 80119e4:	b2c0      	uxtb	r0, r0
        return 0xFF000000;
    else
        return 0xFFFFFFFF;
 80119e6:	2800      	cmp	r0, #0
 80119e8:	bf0c      	ite	eq
 80119ea:	f04f 437f 	moveq.w	r3, #4278190080	; 0xff000000
 80119ee:	f04f 33ff 	movne.w	r3, #4294967295
 */
static inline uint8_t lv_color_brightness(lv_color_t color)
{
    lv_color32_t c32;
    c32.full        = lv_color_to32(color);
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 80119f2:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80119f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80119fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80119fe:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8011a02:	fa50 f083 	uxtab	r0, r0, r3
    return (uint8_t)(bright >> 3);
}
 8011a06:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8011a0a:	4770      	bx	lr

08011a0c <lv_led_event>:
    led->color = lv_theme_get_color_primary(obj);
    led->bright = LV_LED_BRIGHT_MAX;
}

static void lv_led_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8011a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /* Call the ancestor's event handler */
    lv_event_code_t code = lv_event_get_code(e);
 8011a10:	4608      	mov	r0, r1
{
 8011a12:	b09e      	sub	sp, #120	; 0x78
 8011a14:	460e      	mov	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
 8011a16:	f7f1 fc1d 	bl	8003254 <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_MAIN_END) {
 8011a1a:	f1a0 0315 	sub.w	r3, r0, #21
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	2b01      	cmp	r3, #1
    lv_event_code_t code = lv_event_get_code(e);
 8011a22:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_MAIN_END) {
 8011a24:	f200 8099 	bhi.w	8011b5a <lv_led_event+0x14e>
        res = lv_obj_event_base(MY_CLASS, e);
        if(res != LV_RES_OK) return;
    }

    lv_obj_t * obj = lv_event_get_target(e);
 8011a28:	4630      	mov	r0, r6
 8011a2a:	f7f1 fc0f 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 8011a2e:	2c15      	cmp	r4, #21
    lv_obj_t * obj = lv_event_get_target(e);
 8011a30:	4605      	mov	r5, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8011a32:	f040 8099 	bne.w	8011b68 <lv_led_event+0x15c>
        /*Make darker colors in a temporary style according to the brightness*/
        lv_led_t * led = (lv_led_t *)obj;

        lv_draw_rect_dsc_t rect_dsc;
        lv_draw_rect_dsc_init(&rect_dsc);
 8011a36:	4668      	mov	r0, sp
 8011a38:	f7f9 fbe2 	bl	800b200 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &rect_dsc);
 8011a3c:	466a      	mov	r2, sp
 8011a3e:	2100      	movs	r1, #0
 8011a40:	4628      	mov	r0, r5
 8011a42:	f7f2 fdf4 	bl	800462e <lv_obj_init_draw_rect_dsc>

        /*Use the original colors brightness to modify color->led*/
        rect_dsc.bg_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.bg_color));
 8011a46:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8011a4a:	f7ff ffcb 	bl	80119e4 <lv_color_brightness>
 8011a4e:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 8011a52:	f010 0f80 	tst.w	r0, #128	; 0x80
        rect_dsc.bg_grad.stops[0].color = lv_color_mix(led->color, lv_color_black(),
 8011a56:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8011a5a:	bf14      	ite	ne
 8011a5c:	46a2      	movne	sl, r4
 8011a5e:	f04f 0a00 	moveq.w	sl, #0
 8011a62:	f7ff ffbf 	bl	80119e4 <lv_color_brightness>
 8011a66:	f010 0f80 	tst.w	r0, #128	; 0x80
                                                       lv_color_brightness(rect_dsc.bg_grad.stops[0].color));
        rect_dsc.bg_grad.stops[1].color = lv_color_mix(led->color, lv_color_black(),
 8011a6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011a6e:	bf14      	ite	ne
 8011a70:	46a1      	movne	r9, r4
 8011a72:	f04f 0900 	moveq.w	r9, #0
 8011a76:	f7ff ffb5 	bl	80119e4 <lv_color_brightness>
 8011a7a:	f010 0f80 	tst.w	r0, #128	; 0x80
                                                       lv_color_brightness(rect_dsc.bg_grad.stops[1].color));
        rect_dsc.shadow_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.shadow_color));
 8011a7e:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 8011a82:	bf14      	ite	ne
 8011a84:	46a0      	movne	r8, r4
 8011a86:	f04f 0800 	moveq.w	r8, #0
 8011a8a:	f7ff ffab 	bl	80119e4 <lv_color_brightness>
 8011a8e:	f010 0f80 	tst.w	r0, #128	; 0x80
        rect_dsc.border_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.border_color));
 8011a92:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011a96:	bf14      	ite	ne
 8011a98:	4621      	movne	r1, r4
 8011a9a:	2100      	moveq	r1, #0
 8011a9c:	f7ff ffa2 	bl	80119e4 <lv_color_brightness>
 8011aa0:	f010 0f80 	tst.w	r0, #128	; 0x80
        rect_dsc.outline_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.outline_color));
 8011aa4:	f89d 001e 	ldrb.w	r0, [sp, #30]
 8011aa8:	bf14      	ite	ne
 8011aaa:	4627      	movne	r7, r4
 8011aac:	2700      	moveq	r7, #0
 8011aae:	f7ff ff99 	bl	80119e4 <lv_color_brightness>
 8011ab2:	f995 2025 	ldrsb.w	r2, [r5, #37]	; 0x25

        /*Mix. the color with black proportionally with brightness*/
        rect_dsc.bg_color = lv_color_mix(rect_dsc.bg_color, lv_color_black(), led->bright);
 8011ab6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8011aba:	f010 0f80 	tst.w	r0, #128	; 0x80
 8011abe:	bf08      	it	eq
 8011ac0:	2400      	moveq	r4, #0
 8011ac2:	2a00      	cmp	r2, #0
 8011ac4:	bfa8      	it	ge
 8011ac6:	2100      	movge	r1, #0
        rect_dsc.shadow_color = lv_color_mix(rect_dsc.shadow_color, lv_color_black(), led->bright);
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);

        /*Set the current shadow width according to brightness proportionally between LV_LED_BRIGHT_OFF
         * and LV_LED_BRIGHT_ON*/
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8011ac8:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
        rect_dsc.shadow_color = lv_color_mix(rect_dsc.shadow_color, lv_color_black(), led->bright);
 8011acc:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8011ad0:	f1a3 0150 	sub.w	r1, r3, #80	; 0x50
                                (LV_LED_BRIGHT_MAX - LV_LED_BRIGHT_MIN);
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
 8011ad4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8011ad8:	bfa1      	itttt	ge
 8011ada:	2400      	movge	r4, #0
 8011adc:	f04f 0a00 	movge.w	sl, #0
 8011ae0:	f04f 0900 	movge.w	r9, #0
 8011ae4:	f04f 0800 	movge.w	r8, #0
 8011ae8:	bfa8      	it	ge
 8011aea:	2700      	movge	r7, #0
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8011aec:	434a      	muls	r2, r1
 8011aee:	20af      	movs	r0, #175	; 0xaf
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
 8011af0:	434b      	muls	r3, r1
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8011af2:	fb92 f2f0 	sdiv	r2, r2, r0
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
 8011af6:	fb93 f3f0 	sdiv	r3, r3, r0
                                 (LV_LED_BRIGHT_MAX - LV_LED_BRIGHT_MIN);

        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8011afa:	4630      	mov	r0, r6
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8011afc:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
 8011b00:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 8011b04:	f88d 401e 	strb.w	r4, [sp, #30]
        rect_dsc.bg_color = lv_color_mix(rect_dsc.bg_color, lv_color_black(), led->bright);
 8011b08:	f88d a004 	strb.w	sl, [sp, #4]
        rect_dsc.bg_grad.stops[0].color   = lv_color_mix(rect_dsc.bg_grad.stops[0].color, lv_color_black(), led->bright);
 8011b0c:	f88d 9005 	strb.w	r9, [sp, #5]
        rect_dsc.bg_grad.stops[1].color   = lv_color_mix(rect_dsc.bg_grad.stops[1].color, lv_color_black(), led->bright);
 8011b10:	f88d 8007 	strb.w	r8, [sp, #7]
        rect_dsc.border_color = lv_color_mix(rect_dsc.border_color, lv_color_black(), led->bright);
 8011b14:	f88d 7018 	strb.w	r7, [sp, #24]
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8011b18:	f7f1 fbeb 	bl	80032f2 <lv_event_get_draw_ctx>
 8011b1c:	4604      	mov	r4, r0

        lv_obj_draw_part_dsc_t  part_draw_dsc;
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8011b1e:	4601      	mov	r1, r0
 8011b20:	a80c      	add	r0, sp, #48	; 0x30
 8011b22:	f7f3 f81d 	bl	8004b60 <lv_obj_draw_dsc_init>
        part_draw_dsc.draw_area = &obj->coords;
        part_draw_dsc.class_p = MY_CLASS;
 8011b26:	4b12      	ldr	r3, [pc, #72]	; (8011b70 <lv_led_event+0x164>)
 8011b28:	930d      	str	r3, [sp, #52]	; 0x34
        part_draw_dsc.draw_area = &obj->coords;
 8011b2a:	f105 0614 	add.w	r6, r5, #20
        part_draw_dsc.type = LV_LED_DRAW_PART_RECTANGLE;
 8011b2e:	2300      	movs	r3, #0
        part_draw_dsc.rect_dsc = &rect_dsc;
        part_draw_dsc.part = LV_PART_MAIN;

        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8011b30:	aa0c      	add	r2, sp, #48	; 0x30
 8011b32:	211a      	movs	r1, #26
 8011b34:	4628      	mov	r0, r5
        part_draw_dsc.type = LV_LED_DRAW_PART_RECTANGLE;
 8011b36:	930e      	str	r3, [sp, #56]	; 0x38
        part_draw_dsc.part = LV_PART_MAIN;
 8011b38:	9319      	str	r3, [sp, #100]	; 0x64
        part_draw_dsc.draw_area = &obj->coords;
 8011b3a:	960f      	str	r6, [sp, #60]	; 0x3c
        part_draw_dsc.rect_dsc = &rect_dsc;
 8011b3c:	f8cd d040 	str.w	sp, [sp, #64]	; 0x40
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8011b40:	f7f1 fb64 	bl	800320c <lv_event_send>
        lv_draw_rect(draw_ctx, &rect_dsc, &obj->coords);
 8011b44:	4632      	mov	r2, r6
 8011b46:	4669      	mov	r1, sp
 8011b48:	4620      	mov	r0, r4
 8011b4a:	f7f9 fb7d 	bl	800b248 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8011b4e:	aa0c      	add	r2, sp, #48	; 0x30
 8011b50:	211b      	movs	r1, #27
 8011b52:	4628      	mov	r0, r5
 8011b54:	f7f1 fb5a 	bl	800320c <lv_event_send>
 8011b58:	e006      	b.n	8011b68 <lv_led_event+0x15c>
        res = lv_obj_event_base(MY_CLASS, e);
 8011b5a:	4805      	ldr	r0, [pc, #20]	; (8011b70 <lv_led_event+0x164>)
 8011b5c:	4631      	mov	r1, r6
 8011b5e:	f7f1 fa8d 	bl	800307c <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8011b62:	2801      	cmp	r0, #1
 8011b64:	f43f af60 	beq.w	8011a28 <lv_led_event+0x1c>
    }
}
 8011b68:	b01e      	add	sp, #120	; 0x78
 8011b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b6e:	bf00      	nop
 8011b70:	0801e42c 	.word	0x0801e42c

08011b74 <lv_led_constructor>:
{
 8011b74:	b510      	push	{r4, lr}
    led->color = lv_theme_get_color_primary(obj);
 8011b76:	4608      	mov	r0, r1
{
 8011b78:	460c      	mov	r4, r1
    led->color = lv_theme_get_color_primary(obj);
 8011b7a:	f7f7 fbff 	bl	800937c <lv_theme_get_color_primary>
    led->bright = LV_LED_BRIGHT_MAX;
 8011b7e:	23ff      	movs	r3, #255	; 0xff
    led->color = lv_theme_get_color_primary(obj);
 8011b80:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    led->bright = LV_LED_BRIGHT_MAX;
 8011b84:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 8011b88:	bd10      	pop	{r4, pc}
	...

08011b8c <lv_spinbox_updatevalue>:
        }
    }
}

static void lv_spinbox_updatevalue(lv_obj_t * obj)
{
 8011b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b90:	4604      	mov	r4, r0
 8011b92:	b08b      	sub	sp, #44	; 0x2c
    lv_spinbox_t * spinbox = (lv_spinbox_t *)obj;

    char buf[LV_SPINBOX_MAX_DIGIT_COUNT + 8];
    lv_memset_00(buf, sizeof(buf));
 8011b94:	2112      	movs	r1, #18
 8011b96:	a805      	add	r0, sp, #20
 8011b98:	f001 fdaf 	bl	80136fa <lv_memset_00>
    char * buf_p = buf;
    uint8_t cur_shift_left = 0;

    if(spinbox->range_min < 0) {  // hide sign if there are only positive values
 8011b9c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ba2:	da4f      	bge.n	8011c44 <lv_spinbox_updatevalue+0xb8>
        /*Add the sign*/
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	bfac      	ite	ge
 8011ba8:	222b      	movge	r2, #43	; 0x2b
 8011baa:	222d      	movlt	r2, #45	; 0x2d
 8011bac:	f88d 2014 	strb.w	r2, [sp, #20]
    uint8_t cur_shift_left = 0;
 8011bb0:	2500      	movs	r5, #0
        buf_p++;
 8011bb2:	f10d 0615 	add.w	r6, sp, #21
    }

    int32_t i;
    char digits[LV_SPINBOX_MAX_DIGIT_COUNT + 4];
    /*Convert the numbers to string (the sign is already handled so always covert positive number)*/
    lv_snprintf(digits, sizeof(digits), "%" LV_PRId32, LV_ABS(spinbox->value));
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	af01      	add	r7, sp, #4
 8011bba:	4a2e      	ldr	r2, [pc, #184]	; (8011c74 <lv_spinbox_updatevalue+0xe8>)
 8011bbc:	bfb8      	it	lt
 8011bbe:	425b      	neglt	r3, r3
 8011bc0:	210e      	movs	r1, #14
 8011bc2:	4638      	mov	r0, r7
 8011bc4:	f002 f9ac 	bl	8013f20 <lv_snprintf>

    /*Add leading zeros*/
    int lz_cnt = spinbox->digit_count - (int)strlen(digits);
 8011bc8:	4638      	mov	r0, r7
 8011bca:	f7ee fb0b 	bl	80001e4 <strlen>
 8011bce:	f894 8074 	ldrb.w	r8, [r4, #116]	; 0x74
 8011bd2:	f008 080f 	and.w	r8, r8, #15
 8011bd6:	eba8 0200 	sub.w	r2, r8, r0
    if(lz_cnt > 0) {
 8011bda:	2a00      	cmp	r2, #0
 8011bdc:	dd0a      	ble.n	8011bf4 <lv_spinbox_updatevalue+0x68>
 8011bde:	3001      	adds	r0, #1
 8011be0:	183b      	adds	r3, r7, r0
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
            digits[i + lz_cnt] = digits[i];
 8011be2:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8011be6:	5499      	strb	r1, [r3, r2]
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 8011be8:	42bb      	cmp	r3, r7
 8011bea:	d1fa      	bne.n	8011be2 <lv_spinbox_updatevalue+0x56>
        }
        for(i = 0; i < lz_cnt; i++) {
            digits[i] = '0';
 8011bec:	2130      	movs	r1, #48	; 0x30
 8011bee:	4638      	mov	r0, r7
 8011bf0:	f00c fa14 	bl	801e01c <memset>
        }
    }

    int32_t intDigits;
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 8011bf4:	f894 9074 	ldrb.w	r9, [r4, #116]	; 0x74
 8011bf8:	f019 00f0 	ands.w	r0, r9, #240	; 0xf0
 8011bfc:	bf14      	ite	ne
 8011bfe:	ea4f 1919 	movne.w	r9, r9, lsr #4
 8011c02:	46c1      	moveq	r9, r8

    /*Add the decimal part*/
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 8011c04:	4639      	mov	r1, r7
 8011c06:	2300      	movs	r3, #0
 8011c08:	454b      	cmp	r3, r9
 8011c0a:	d002      	beq.n	8011c12 <lv_spinbox_updatevalue+0x86>
 8011c0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c10:	b9da      	cbnz	r2, 8011c4a <lv_spinbox_updatevalue+0xbe>
        (*buf_p) = digits[i];
        buf_p++;
    }

    if(spinbox->dec_point_pos != 0) {
 8011c12:	b9f0      	cbnz	r0, 8011c52 <lv_spinbox_updatevalue+0xc6>
            buf_p++;
        }
    }

    /*Refresh the text*/
    lv_textarea_set_text(obj, (char *)buf);
 8011c14:	a905      	add	r1, sp, #20
 8011c16:	4620      	mov	r0, r4
 8011c18:	f00a f986 	bl	801bf28 <lv_textarea_set_text>

    /*Set the cursor position*/
    int32_t step    = spinbox->step;
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 8011c1c:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    int32_t step    = spinbox->step;
 8011c20:	6f23      	ldr	r3, [r4, #112]	; 0x70
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 8011c22:	f001 010f 	and.w	r1, r1, #15
    while(step >= 10) {
        step /= 10;
 8011c26:	220a      	movs	r2, #10
    while(step >= 10) {
 8011c28:	2b09      	cmp	r3, #9
 8011c2a:	dc1e      	bgt.n	8011c6a <lv_spinbox_updatevalue+0xde>
        cur_pos--;
    }

    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 8011c2c:	4549      	cmp	r1, r9
 8011c2e:	bfc4      	itt	gt
 8011c30:	3101      	addgt	r1, #1
 8011c32:	b2c9      	uxtbgt	r1, r1

    cur_pos -= cur_shift_left;
 8011c34:	1b49      	subs	r1, r1, r5

    lv_textarea_set_cursor_pos(obj, cur_pos);
 8011c36:	b2c9      	uxtb	r1, r1
 8011c38:	4620      	mov	r0, r4
 8011c3a:	f009 fe79 	bl	801b930 <lv_textarea_set_cursor_pos>
}
 8011c3e:	b00b      	add	sp, #44	; 0x2c
 8011c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        cur_shift_left++;
 8011c44:	2501      	movs	r5, #1
    char * buf_p = buf;
 8011c46:	ae05      	add	r6, sp, #20
 8011c48:	e7b5      	b.n	8011bb6 <lv_spinbox_updatevalue+0x2a>
        (*buf_p) = digits[i];
 8011c4a:	f806 2b01 	strb.w	r2, [r6], #1
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 8011c4e:	3301      	adds	r3, #1
 8011c50:	e7da      	b.n	8011c08 <lv_spinbox_updatevalue+0x7c>
        (*buf_p) = '.';
 8011c52:	222e      	movs	r2, #46	; 0x2e
 8011c54:	f806 2b01 	strb.w	r2, [r6], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8011c58:	4598      	cmp	r8, r3
 8011c5a:	dddb      	ble.n	8011c14 <lv_spinbox_updatevalue+0x88>
 8011c5c:	5cfa      	ldrb	r2, [r7, r3]
 8011c5e:	2a00      	cmp	r2, #0
 8011c60:	d0d8      	beq.n	8011c14 <lv_spinbox_updatevalue+0x88>
            (*buf_p) = digits[i];
 8011c62:	f806 2b01 	strb.w	r2, [r6], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8011c66:	3301      	adds	r3, #1
 8011c68:	e7f6      	b.n	8011c58 <lv_spinbox_updatevalue+0xcc>
        cur_pos--;
 8011c6a:	3901      	subs	r1, #1
 8011c6c:	b2c9      	uxtb	r1, r1
        step /= 10;
 8011c6e:	fb93 f3f2 	sdiv	r3, r3, r2
        cur_pos--;
 8011c72:	e7d9      	b.n	8011c28 <lv_spinbox_updatevalue+0x9c>
 8011c74:	0801e49c 	.word	0x0801e49c

08011c78 <lv_spinbox_constructor>:
    spinbox->range_max          = 99999;
 8011c78:	4b10      	ldr	r3, [pc, #64]	; (8011cbc <lv_spinbox_constructor+0x44>)
 8011c7a:	2200      	movs	r2, #0
{
 8011c7c:	b510      	push	{r4, lr}
    spinbox->range_max          = 99999;
 8011c7e:	e9c1 2319 	strd	r2, r3, [r1, #100]	; 0x64
{
 8011c82:	460c      	mov	r4, r1
    spinbox->step               = 1;
 8011c84:	4b0e      	ldr	r3, [pc, #56]	; (8011cc0 <lv_spinbox_constructor+0x48>)
 8011c86:	2101      	movs	r1, #1
 8011c88:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
    spinbox->digit_count        = 5;
 8011c8c:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
 8011c90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011c94:	f023 0307 	bic.w	r3, r3, #7
 8011c98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011c9c:	f043 0305 	orr.w	r3, r3, #5
 8011ca0:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
    lv_textarea_set_one_line(obj, true);
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	f009 ff06 	bl	801bab6 <lv_textarea_set_one_line>
    lv_textarea_set_cursor_click_pos(obj, true);
 8011caa:	4620      	mov	r0, r4
 8011cac:	2101      	movs	r1, #1
 8011cae:	f009 fefb 	bl	801baa8 <lv_textarea_set_cursor_click_pos>
    lv_spinbox_updatevalue(obj);
 8011cb2:	4620      	mov	r0, r4
}
 8011cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_spinbox_updatevalue(obj);
 8011cb8:	f7ff bf68 	b.w	8011b8c <lv_spinbox_updatevalue>
 8011cbc:	0001869f 	.word	0x0001869f
 8011cc0:	fffe7961 	.word	0xfffe7961

08011cc4 <lv_spinbox_step_next>:
    int32_t new_step = spinbox->step / 10;
 8011cc4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    if((new_step) > 0)
 8011cc6:	2b09      	cmp	r3, #9
        spinbox->step = 1;
 8011cc8:	bfd2      	itee	le
 8011cca:	2301      	movle	r3, #1
    int32_t new_step = spinbox->step / 10;
 8011ccc:	220a      	movgt	r2, #10
 8011cce:	fb93 f3f2 	sdivgt	r3, r3, r2
 8011cd2:	6703      	str	r3, [r0, #112]	; 0x70
    lv_spinbox_updatevalue(obj);
 8011cd4:	f7ff bf5a 	b.w	8011b8c <lv_spinbox_updatevalue>

08011cd8 <lv_spinbox_step_prev>:
    int32_t new_step = spinbox->step * 10;
 8011cd8:	6f02      	ldr	r2, [r0, #112]	; 0x70
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8011cda:	6e81      	ldr	r1, [r0, #104]	; 0x68
    int32_t new_step = spinbox->step * 10;
 8011cdc:	230a      	movs	r3, #10
 8011cde:	435a      	muls	r2, r3
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8011ce0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	bfb8      	it	lt
 8011ce6:	425b      	neglt	r3, r3
 8011ce8:	428b      	cmp	r3, r1
 8011cea:	bfb8      	it	lt
 8011cec:	460b      	movlt	r3, r1
    if(new_step <= step_limit) spinbox->step = new_step;
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	bfa8      	it	ge
 8011cf2:	6702      	strge	r2, [r0, #112]	; 0x70
    lv_spinbox_updatevalue(obj);
 8011cf4:	f7ff bf4a 	b.w	8011b8c <lv_spinbox_updatevalue>

08011cf8 <lv_spinbox_increment>:
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 8011cf8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8011cfa:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8011cfc:	6e82      	ldr	r2, [r0, #104]	; 0x68
{
 8011cfe:	b410      	push	{r4}
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 8011d00:	185c      	adds	r4, r3, r1
 8011d02:	4294      	cmp	r4, r2
 8011d04:	dc0c      	bgt.n	8011d20 <lv_spinbox_increment+0x28>
        if((spinbox->value + spinbox->step) > 0 && spinbox->value < 0) spinbox->value = -spinbox->value;
 8011d06:	2c00      	cmp	r4, #0
 8011d08:	dd03      	ble.n	8011d12 <lv_spinbox_increment+0x1a>
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	bfbc      	itt	lt
 8011d0e:	425b      	neglt	r3, r3
 8011d10:	6643      	strlt	r3, [r0, #100]	; 0x64
        spinbox->value += spinbox->step;
 8011d12:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8011d14:	440b      	add	r3, r1
            spinbox->value = spinbox->range_min;
 8011d16:	6643      	str	r3, [r0, #100]	; 0x64
}
 8011d18:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_spinbox_updatevalue(obj);
 8011d1c:	f7ff bf36 	b.w	8011b8c <lv_spinbox_updatevalue>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_max))
 8011d20:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
 8011d24:	07c9      	lsls	r1, r1, #31
 8011d26:	d503      	bpl.n	8011d30 <lv_spinbox_increment+0x38>
 8011d28:	4293      	cmp	r3, r2
 8011d2a:	d101      	bne.n	8011d30 <lv_spinbox_increment+0x38>
            spinbox->value = spinbox->range_min;
 8011d2c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8011d2e:	e7f2      	b.n	8011d16 <lv_spinbox_increment+0x1e>
            spinbox->value = spinbox->range_max;
 8011d30:	6642      	str	r2, [r0, #100]	; 0x64
 8011d32:	e7f1      	b.n	8011d18 <lv_spinbox_increment+0x20>

08011d34 <lv_spinbox_decrement>:
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8011d34:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8011d36:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8011d38:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8011d3a:	b410      	push	{r4}
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8011d3c:	1a5c      	subs	r4, r3, r1
 8011d3e:	4294      	cmp	r4, r2
 8011d40:	db0c      	blt.n	8011d5c <lv_spinbox_decrement+0x28>
        if((spinbox->value - spinbox->step) < 0 && spinbox->value > 0) spinbox->value = -spinbox->value;
 8011d42:	2c00      	cmp	r4, #0
 8011d44:	da03      	bge.n	8011d4e <lv_spinbox_decrement+0x1a>
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	bfc4      	itt	gt
 8011d4a:	425b      	neggt	r3, r3
 8011d4c:	6643      	strgt	r3, [r0, #100]	; 0x64
        spinbox->value -= spinbox->step;
 8011d4e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8011d50:	1a5b      	subs	r3, r3, r1
            spinbox->value = spinbox->range_max;
 8011d52:	6643      	str	r3, [r0, #100]	; 0x64
}
 8011d54:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_spinbox_updatevalue(obj);
 8011d58:	f7ff bf18 	b.w	8011b8c <lv_spinbox_updatevalue>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_min))
 8011d5c:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
 8011d60:	07c9      	lsls	r1, r1, #31
 8011d62:	d503      	bpl.n	8011d6c <lv_spinbox_decrement+0x38>
 8011d64:	4293      	cmp	r3, r2
 8011d66:	d101      	bne.n	8011d6c <lv_spinbox_decrement+0x38>
            spinbox->value = spinbox->range_max;
 8011d68:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8011d6a:	e7f2      	b.n	8011d52 <lv_spinbox_decrement+0x1e>
            spinbox->value = spinbox->range_min;
 8011d6c:	6642      	str	r2, [r0, #100]	; 0x64
 8011d6e:	e7f1      	b.n	8011d54 <lv_spinbox_decrement+0x20>

08011d70 <lv_spinbox_event>:
{
 8011d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8011d72:	4856      	ldr	r0, [pc, #344]	; (8011ecc <lv_spinbox_event+0x15c>)
{
 8011d74:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8011d76:	f7f1 f981 	bl	800307c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8011d7a:	2801      	cmp	r0, #1
    res = lv_obj_event_base(MY_CLASS, e);
 8011d7c:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return;
 8011d7e:	d16a      	bne.n	8011e56 <lv_spinbox_event+0xe6>
    lv_event_code_t code = lv_event_get_code(e);
 8011d80:	4628      	mov	r0, r5
 8011d82:	f7f1 fa67 	bl	8003254 <lv_event_get_code>
 8011d86:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8011d88:	4628      	mov	r0, r5
 8011d8a:	f7f1 fa5f 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_RELEASED) {
 8011d8e:	2e08      	cmp	r6, #8
    lv_obj_t * obj = lv_event_get_target(e);
 8011d90:	4604      	mov	r4, r0
    if(code == LV_EVENT_RELEASED) {
 8011d92:	d175      	bne.n	8011e80 <lv_spinbox_event+0x110>
        lv_indev_t * indev = lv_indev_get_act();
 8011d94:	f7f1 fc4e 	bl	8003634 <lv_indev_get_act>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8011d98:	f7f1 fc52 	bl	8003640 <lv_indev_get_type>
 8011d9c:	2804      	cmp	r0, #4
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 8011d9e:	4620      	mov	r0, r4
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8011da0:	d130      	bne.n	8011e04 <lv_spinbox_event+0x94>
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 8011da2:	f7f2 f951 	bl	8004048 <lv_obj_get_group>
 8011da6:	f7f1 fc40 	bl	800362a <lv_group_get_editing>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	d053      	beq.n	8011e56 <lv_spinbox_event+0xe6>
                if(spinbox->digit_count > 1) {
 8011dae:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 8011db2:	f002 020f 	and.w	r2, r2, #15
 8011db6:	2a01      	cmp	r2, #1
 8011db8:	d94d      	bls.n	8011e56 <lv_spinbox_event+0xe6>
                    if(spinbox->digit_step_dir == LV_DIR_RIGHT) {
 8011dba:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
                        if(spinbox->step > 1) {
 8011dbe:	6f25      	ldr	r5, [r4, #112]	; 0x70
                    if(spinbox->digit_step_dir == LV_DIR_RIGHT) {
 8011dc0:	f003 0306 	and.w	r3, r3, #6
 8011dc4:	2b04      	cmp	r3, #4
 8011dc6:	d111      	bne.n	8011dec <lv_spinbox_event+0x7c>
                        if(spinbox->step > 1) {
 8011dc8:	2d01      	cmp	r5, #1
 8011dca:	dd04      	ble.n	8011dd6 <lv_spinbox_event+0x66>
                            lv_spinbox_step_next(obj);
 8011dcc:	4620      	mov	r0, r4
}
 8011dce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                            lv_spinbox_step_next(obj);
 8011dd2:	f7ff bf77 	b.w	8011cc4 <lv_spinbox_step_next>
                            spinbox->step = lv_pow(10, spinbox->digit_count - 2);
 8011dd6:	3a02      	subs	r2, #2
 8011dd8:	200a      	movs	r0, #10
 8011dda:	2100      	movs	r1, #0
 8011ddc:	f001 fa64 	bl	80132a8 <lv_pow>
 8011de0:	6720      	str	r0, [r4, #112]	; 0x70
                            lv_spinbox_step_prev(obj);
 8011de2:	4620      	mov	r0, r4
}
 8011de4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                lv_spinbox_step_prev(obj);
 8011de8:	f7ff bf76 	b.w	8011cd8 <lv_spinbox_step_prev>
                        if(spinbox->step < lv_pow(10, spinbox->digit_count - 1)) {
 8011dec:	3a01      	subs	r2, #1
 8011dee:	200a      	movs	r0, #10
 8011df0:	2100      	movs	r1, #0
 8011df2:	f001 fa59 	bl	80132a8 <lv_pow>
 8011df6:	17eb      	asrs	r3, r5, #31
 8011df8:	4285      	cmp	r5, r0
 8011dfa:	418b      	sbcs	r3, r1
 8011dfc:	dbf1      	blt.n	8011de2 <lv_spinbox_event+0x72>
                            spinbox->step = 10;
 8011dfe:	230a      	movs	r3, #10
 8011e00:	6723      	str	r3, [r4, #112]	; 0x70
 8011e02:	e7e3      	b.n	8011dcc <lv_spinbox_event+0x5c>
            const char * txt = lv_textarea_get_text(obj);
 8011e04:	f009 fe8b 	bl	801bb1e <lv_textarea_get_text>
            if(txt[spinbox->ta.cursor.pos] == '.') {
 8011e08:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8011e0a:	5d43      	ldrb	r3, [r0, r5]
 8011e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8011e0e:	d123      	bne.n	8011e58 <lv_spinbox_event+0xe8>
                lv_textarea_cursor_left(obj);
 8011e10:	4620      	mov	r0, r4
 8011e12:	f00a f8f3 	bl	801bffc <lv_textarea_cursor_left>
            size_t len = spinbox->digit_count - 1;
 8011e16:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
            uint16_t cp = spinbox->ta.cursor.pos;
 8011e1a:	6c60      	ldr	r0, [r4, #68]	; 0x44
            size_t len = spinbox->digit_count - 1;
 8011e1c:	f001 030f 	and.w	r3, r1, #15
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 8011e20:	ebb0 1f11 	cmp.w	r0, r1, lsr #4
            size_t len = spinbox->digit_count - 1;
 8011e24:	f103 33ff 	add.w	r3, r3, #4294967295
            uint16_t cp = spinbox->ta.cursor.pos;
 8011e28:	b282      	uxth	r2, r0
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 8011e2a:	d905      	bls.n	8011e38 <lv_spinbox_event+0xc8>
 8011e2c:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8011e30:	bf1c      	itt	ne
 8011e32:	f102 32ff 	addne.w	r2, r2, #4294967295
 8011e36:	b292      	uxthne	r2, r2
            uint32_t pos = len - cp;
 8011e38:	1a9b      	subs	r3, r3, r2
            if(spinbox->range_min < 0) pos++;
 8011e3a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8011e3c:	2a00      	cmp	r2, #0
            spinbox->step = 1;
 8011e3e:	f04f 0201 	mov.w	r2, #1
 8011e42:	6722      	str	r2, [r4, #112]	; 0x70
            if(spinbox->range_min < 0) pos++;
 8011e44:	bfb8      	it	lt
 8011e46:	3301      	addlt	r3, #1
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8011e48:	2200      	movs	r2, #0
 8011e4a:	200a      	movs	r0, #10
 8011e4c:	b291      	uxth	r1, r2
 8011e4e:	428b      	cmp	r3, r1
 8011e50:	f102 0201 	add.w	r2, r2, #1
 8011e54:	d810      	bhi.n	8011e78 <lv_spinbox_event+0x108>
}
 8011e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            size_t txt_len = strlen(txt);
 8011e58:	f7ee f9c4 	bl	80001e4 <strlen>
            else if(spinbox->ta.cursor.pos == (uint32_t)txt_len) {
 8011e5c:	42a8      	cmp	r0, r5
 8011e5e:	d104      	bne.n	8011e6a <lv_spinbox_event+0xfa>
                lv_textarea_set_cursor_pos(obj, txt_len - 1);
 8011e60:	1e41      	subs	r1, r0, #1
                lv_textarea_set_cursor_pos(obj, 1);
 8011e62:	4620      	mov	r0, r4
 8011e64:	f009 fd64 	bl	801b930 <lv_textarea_set_cursor_pos>
 8011e68:	e7d5      	b.n	8011e16 <lv_spinbox_event+0xa6>
            else if(spinbox->ta.cursor.pos == 0 && spinbox->range_min < 0) {
 8011e6a:	2d00      	cmp	r5, #0
 8011e6c:	d1d3      	bne.n	8011e16 <lv_spinbox_event+0xa6>
 8011e6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	dad0      	bge.n	8011e16 <lv_spinbox_event+0xa6>
                lv_textarea_set_cursor_pos(obj, 1);
 8011e74:	4639      	mov	r1, r7
 8011e76:	e7f4      	b.n	8011e62 <lv_spinbox_event+0xf2>
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8011e78:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8011e7a:	4341      	muls	r1, r0
 8011e7c:	6721      	str	r1, [r4, #112]	; 0x70
 8011e7e:	e7e5      	b.n	8011e4c <lv_spinbox_event+0xdc>
    else if(code == LV_EVENT_KEY) {
 8011e80:	2e0d      	cmp	r6, #13
 8011e82:	d1e8      	bne.n	8011e56 <lv_spinbox_event+0xe6>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8011e84:	f7f1 fbd6 	bl	8003634 <lv_indev_get_act>
 8011e88:	f7f1 fbda 	bl	8003640 <lv_indev_get_type>
 8011e8c:	4606      	mov	r6, r0
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 8011e8e:	4628      	mov	r0, r5
 8011e90:	f7f1 f9e4 	bl	800325c <lv_event_get_param>
 8011e94:	6803      	ldr	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 8011e96:	2b13      	cmp	r3, #19
 8011e98:	d106      	bne.n	8011ea8 <lv_spinbox_event+0x138>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8011e9a:	2e04      	cmp	r6, #4
                lv_spinbox_increment(obj);
 8011e9c:	4620      	mov	r0, r4
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8011e9e:	d196      	bne.n	8011dce <lv_spinbox_event+0x5e>
}
 8011ea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_spinbox_increment(obj);
 8011ea4:	f7ff bf28 	b.w	8011cf8 <lv_spinbox_increment>
        else if(c == LV_KEY_LEFT) {
 8011ea8:	2b14      	cmp	r3, #20
 8011eaa:	d106      	bne.n	8011eba <lv_spinbox_event+0x14a>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8011eac:	2e04      	cmp	r6, #4
                lv_spinbox_decrement(obj);
 8011eae:	4620      	mov	r0, r4
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8011eb0:	d198      	bne.n	8011de4 <lv_spinbox_event+0x74>
}
 8011eb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_spinbox_decrement(obj);
 8011eb6:	f7ff bf3d 	b.w	8011d34 <lv_spinbox_decrement>
        else if(c == LV_KEY_UP) {
 8011eba:	2b11      	cmp	r3, #17
 8011ebc:	d101      	bne.n	8011ec2 <lv_spinbox_event+0x152>
            lv_spinbox_increment(obj);
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	e7ee      	b.n	8011ea0 <lv_spinbox_event+0x130>
        else if(c == LV_KEY_DOWN) {
 8011ec2:	2b12      	cmp	r3, #18
 8011ec4:	d1c7      	bne.n	8011e56 <lv_spinbox_event+0xe6>
            lv_spinbox_decrement(obj);
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	e7f3      	b.n	8011eb2 <lv_spinbox_event+0x142>
 8011eca:	bf00      	nop
 8011ecc:	0801e4a0 	.word	0x0801e4a0

08011ed0 <lv_font_get_glyph_bitmap>:
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    LV_ASSERT_NULL(font_p);
 8011ed0:	b900      	cbnz	r0, 8011ed4 <lv_font_get_glyph_bitmap+0x4>
 8011ed2:	e7fe      	b.n	8011ed2 <lv_font_get_glyph_bitmap+0x2>
    return font_p->get_glyph_bitmap(font_p, letter);
 8011ed4:	6843      	ldr	r3, [r0, #4]
 8011ed6:	4718      	bx	r3

08011ed8 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 8011ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011edc:	460c      	mov	r4, r1
 8011ede:	4616      	mov	r6, r2

    LV_ASSERT_NULL(font_p);
 8011ee0:	4681      	mov	r9, r0
 8011ee2:	b900      	cbnz	r0, 8011ee6 <lv_font_get_glyph_dsc+0xe>
 8011ee4:	e7fe      	b.n	8011ee4 <lv_font_get_glyph_dsc+0xc>
    LV_ASSERT_NULL(dsc_out);
 8011ee6:	b901      	cbnz	r1, 8011eea <lv_font_get_glyph_dsc+0x12>
 8011ee8:	e7fe      	b.n	8011ee8 <lv_font_get_glyph_dsc+0x10>
    const lv_font_t * placeholder_font = NULL;
#endif

    const lv_font_t * f = font_p;

    dsc_out->resolved_font = NULL;
 8011eea:	2500      	movs	r5, #0
 8011eec:	600d      	str	r5, [r1, #0]
 8011eee:	4680      	mov	r8, r0

    while(f) {
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 8011ef0:	f8d8 7000 	ldr.w	r7, [r8]
 8011ef4:	9301      	str	r3, [sp, #4]
 8011ef6:	4632      	mov	r2, r6
 8011ef8:	4621      	mov	r1, r4
 8011efa:	4640      	mov	r0, r8
 8011efc:	47b8      	blx	r7
        if(found) {
 8011efe:	9b01      	ldr	r3, [sp, #4]
 8011f00:	b150      	cbz	r0, 8011f18 <lv_font_get_glyph_dsc+0x40>
            if(!dsc_out->is_placeholder) {
 8011f02:	7ba2      	ldrb	r2, [r4, #14]
 8011f04:	06d2      	lsls	r2, r2, #27
 8011f06:	d404      	bmi.n	8011f12 <lv_font_get_glyph_dsc+0x3a>
                dsc_out->resolved_font = f;
 8011f08:	f8c4 8000 	str.w	r8, [r4]
    dsc_out->ofs_y = 0;
    dsc_out->bpp   = 1;
    dsc_out->is_placeholder = true;

    return false;
}
 8011f0c:	b003      	add	sp, #12
 8011f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            else if(placeholder_font == NULL) {
 8011f12:	2d00      	cmp	r5, #0
 8011f14:	bf08      	it	eq
 8011f16:	4645      	moveq	r5, r8
        f = f->fallback;
 8011f18:	f8d8 8014 	ldr.w	r8, [r8, #20]
    while(f) {
 8011f1c:	f1b8 0f00 	cmp.w	r8, #0
 8011f20:	d1e6      	bne.n	8011ef0 <lv_font_get_glyph_dsc+0x18>
    if(placeholder_font != NULL) {
 8011f22:	b13d      	cbz	r5, 8011f34 <lv_font_get_glyph_dsc+0x5c>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter, letter_next);
 8011f24:	682f      	ldr	r7, [r5, #0]
 8011f26:	4632      	mov	r2, r6
 8011f28:	4621      	mov	r1, r4
 8011f2a:	4628      	mov	r0, r5
 8011f2c:	47b8      	blx	r7
        dsc_out->resolved_font = placeholder_font;
 8011f2e:	6025      	str	r5, [r4, #0]
        return true;
 8011f30:	2001      	movs	r0, #1
 8011f32:	e7eb      	b.n	8011f0c <lv_font_get_glyph_dsc+0x34>
    if(letter < 0x20 ||
 8011f34:	2e1f      	cmp	r6, #31
        dsc_out->box_w = font_p->line_height / 2;
 8011f36:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
    if(letter < 0x20 ||
 8011f3a:	d907      	bls.n	8011f4c <lv_font_get_glyph_dsc+0x74>
 8011f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011f40:	429e      	cmp	r6, r3
 8011f42:	d003      	beq.n	8011f4c <lv_font_get_glyph_dsc+0x74>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 8011f44:	f242 030c 	movw	r3, #8204	; 0x200c
 8011f48:	429e      	cmp	r6, r3
 8011f4a:	d10d      	bne.n	8011f68 <lv_font_get_glyph_dsc+0x90>
        dsc_out->adv_w = 0;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	6063      	str	r3, [r4, #4]
    dsc_out->bpp   = 1;
 8011f50:	7ba3      	ldrb	r3, [r4, #14]
    dsc_out->box_h = font_p->line_height;
 8011f52:	8122      	strh	r2, [r4, #8]
    dsc_out->bpp   = 1;
 8011f54:	f023 031f 	bic.w	r3, r3, #31
    dsc_out->resolved_font = NULL;
 8011f58:	2000      	movs	r0, #0
    dsc_out->bpp   = 1;
 8011f5a:	f043 0311 	orr.w	r3, r3, #17
    dsc_out->resolved_font = NULL;
 8011f5e:	6020      	str	r0, [r4, #0]
    dsc_out->ofs_x = 0;
 8011f60:	8160      	strh	r0, [r4, #10]
    dsc_out->ofs_y = 0;
 8011f62:	81a0      	strh	r0, [r4, #12]
    dsc_out->bpp   = 1;
 8011f64:	73a3      	strb	r3, [r4, #14]
    return false;
 8011f66:	e7d1      	b.n	8011f0c <lv_font_get_glyph_dsc+0x34>
        dsc_out->box_w = font_p->line_height / 2;
 8011f68:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
 8011f6c:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8011f70:	80e3      	strh	r3, [r4, #6]
        dsc_out->adv_w = dsc_out->box_w + 2;
 8011f72:	3302      	adds	r3, #2
 8011f74:	80a3      	strh	r3, [r4, #4]
 8011f76:	e7eb      	b.n	8011f50 <lv_font_get_glyph_dsc+0x78>

08011f78 <lv_font_get_glyph_width>:
 * @param letter a UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 8011f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f7a:	4613      	mov	r3, r2
    LV_ASSERT_NULL(font);
 8011f7c:	b900      	cbnz	r0, 8011f80 <lv_font_get_glyph_width+0x8>
 8011f7e:	e7fe      	b.n	8011f7e <lv_font_get_glyph_width+0x6>
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 8011f80:	460a      	mov	r2, r1
 8011f82:	4669      	mov	r1, sp
 8011f84:	f7ff ffa8 	bl	8011ed8 <lv_font_get_glyph_dsc>
    return g.adv_w;
}
 8011f88:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8011f8c:	b005      	add	sp, #20
 8011f8e:	f85d fb04 	ldr.w	pc, [sp], #4

08011f92 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8011f92:	7803      	ldrb	r3, [r0, #0]
 8011f94:	780a      	ldrb	r2, [r1, #0]
 8011f96:	4293      	cmp	r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 8011f98:	bf09      	itett	eq
 8011f9a:	784b      	ldrbeq	r3, [r1, #1]
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8011f9c:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 8011f9e:	7840      	ldrbeq	r0, [r0, #1]
 8011fa0:	1ac0      	subeq	r0, r0, r3

}
 8011fa2:	4770      	bx	lr

08011fa4 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8011fa4:	8803      	ldrh	r3, [r0, #0]
 8011fa6:	880a      	ldrh	r2, [r1, #0]
 8011fa8:	4293      	cmp	r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 8011faa:	bf09      	itett	eq
 8011fac:	884b      	ldrheq	r3, [r1, #2]
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8011fae:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 8011fb0:	8840      	ldrheq	r0, [r0, #2]
 8011fb2:	1ac0      	subeq	r0, r0, r3
}
 8011fb4:	4770      	bx	lr

08011fb6 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 8011fb6:	8800      	ldrh	r0, [r0, #0]
 8011fb8:	880b      	ldrh	r3, [r1, #0]
}
 8011fba:	1ac0      	subs	r0, r0, r3
 8011fbc:	4770      	bx	lr
	...

08011fc0 <get_glyph_dsc_id>:
{
 8011fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(letter == '\0') return 0;
 8011fc2:	460c      	mov	r4, r1
{
 8011fc4:	b085      	sub	sp, #20
    if(letter == '\0') return 0;
 8011fc6:	2900      	cmp	r1, #0
 8011fc8:	d062      	beq.n	8012090 <get_glyph_dsc_id+0xd0>
 8011fca:	6905      	ldr	r5, [r0, #16]
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8011fcc:	6968      	ldr	r0, [r5, #20]
 8011fce:	b970      	cbnz	r0, 8011fee <get_glyph_dsc_id+0x2e>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8011fd0:	8a6f      	ldrh	r7, [r5, #18]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8011fd8:	f04f 0c14 	mov.w	ip, #20
 8011fdc:	b293      	uxth	r3, r2
 8011fde:	429f      	cmp	r7, r3
 8011fe0:	d80b      	bhi.n	8011ffa <get_glyph_dsc_id+0x3a>
    if(fdsc->cache) {
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	b138      	cbz	r0, 8011ff6 <get_glyph_dsc_id+0x36>
        fdsc->cache->last_glyph_id = 0;
 8011fe6:	e9c0 4300 	strd	r4, r3, [r0]
    return 0;
 8011fea:	4618      	mov	r0, r3
 8011fec:	e003      	b.n	8011ff6 <get_glyph_dsc_id+0x36>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8011fee:	6803      	ldr	r3, [r0, #0]
 8011ff0:	4299      	cmp	r1, r3
 8011ff2:	d1ed      	bne.n	8011fd0 <get_glyph_dsc_id+0x10>
 8011ff4:	6840      	ldr	r0, [r0, #4]
}
 8011ff6:	b005      	add	sp, #20
 8011ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8011ffa:	68ab      	ldr	r3, [r5, #8]
 8011ffc:	fb0c f602 	mul.w	r6, ip, r2
 8012000:	1999      	adds	r1, r3, r6
 8012002:	599b      	ldr	r3, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8012004:	f8b1 e004 	ldrh.w	lr, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8012008:	1ae3      	subs	r3, r4, r3
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801200a:	4573      	cmp	r3, lr
 801200c:	f102 0201 	add.w	r2, r2, #1
 8012010:	d8e4      	bhi.n	8011fdc <get_glyph_dsc_id+0x1c>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8012012:	7c8a      	ldrb	r2, [r1, #18]
 8012014:	2a02      	cmp	r2, #2
 8012016:	d102      	bne.n	801201e <get_glyph_dsc_id+0x5e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8012018:	88c8      	ldrh	r0, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 801201a:	4418      	add	r0, r3
 801201c:	e019      	b.n	8012052 <get_glyph_dsc_id+0x92>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 801201e:	b91a      	cbnz	r2, 8012028 <get_glyph_dsc_id+0x68>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8012020:	68ca      	ldr	r2, [r1, #12]
 8012022:	5cd0      	ldrb	r0, [r2, r3]
 8012024:	88cb      	ldrh	r3, [r1, #6]
 8012026:	e7f8      	b.n	801201a <get_glyph_dsc_id+0x5a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 8012028:	2a03      	cmp	r2, #3
 801202a:	d118      	bne.n	801205e <get_glyph_dsc_id+0x9e>
            uint16_t key = rcp;
 801202c:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8012030:	4b18      	ldr	r3, [pc, #96]	; (8012094 <get_glyph_dsc_id+0xd4>)
 8012032:	8a0a      	ldrh	r2, [r1, #16]
 8012034:	9300      	str	r3, [sp, #0]
 8012036:	6889      	ldr	r1, [r1, #8]
 8012038:	2302      	movs	r3, #2
 801203a:	f10d 000e 	add.w	r0, sp, #14
 801203e:	f003 f99a 	bl	8015376 <_lv_utils_bsearch>
            if(p) {
 8012042:	b130      	cbz	r0, 8012052 <get_glyph_dsc_id+0x92>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8012044:	68ab      	ldr	r3, [r5, #8]
 8012046:	441e      	add	r6, r3
 8012048:	68b3      	ldr	r3, [r6, #8]
 801204a:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801204c:	88f3      	ldrh	r3, [r6, #6]
 801204e:	eb03 0060 	add.w	r0, r3, r0, asr #1
        if(fdsc->cache) {
 8012052:	696b      	ldr	r3, [r5, #20]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d0ce      	beq.n	8011ff6 <get_glyph_dsc_id+0x36>
            fdsc->cache->last_glyph_id = glyph_id;
 8012058:	e9c3 4000 	strd	r4, r0, [r3]
 801205c:	e7cb      	b.n	8011ff6 <get_glyph_dsc_id+0x36>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 801205e:	2a01      	cmp	r2, #1
 8012060:	d114      	bne.n	801208c <get_glyph_dsc_id+0xcc>
            uint16_t key = rcp;
 8012062:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8012066:	4b0b      	ldr	r3, [pc, #44]	; (8012094 <get_glyph_dsc_id+0xd4>)
 8012068:	8a0a      	ldrh	r2, [r1, #16]
 801206a:	9300      	str	r3, [sp, #0]
 801206c:	6889      	ldr	r1, [r1, #8]
 801206e:	2302      	movs	r3, #2
 8012070:	f10d 000e 	add.w	r0, sp, #14
 8012074:	f003 f97f 	bl	8015376 <_lv_utils_bsearch>
            if(p) {
 8012078:	2800      	cmp	r0, #0
 801207a:	d0ea      	beq.n	8012052 <get_glyph_dsc_id+0x92>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801207c:	68ab      	ldr	r3, [r5, #8]
 801207e:	441e      	add	r6, r3
 8012080:	68b3      	ldr	r3, [r6, #8]
 8012082:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8012084:	68f3      	ldr	r3, [r6, #12]
 8012086:	5a18      	ldrh	r0, [r3, r0]
 8012088:	88f3      	ldrh	r3, [r6, #6]
 801208a:	e7c6      	b.n	801201a <get_glyph_dsc_id+0x5a>
        uint32_t glyph_id = 0;
 801208c:	2000      	movs	r0, #0
 801208e:	e7e0      	b.n	8012052 <get_glyph_dsc_id+0x92>
    if(letter == '\0') return 0;
 8012090:	4608      	mov	r0, r1
 8012092:	e7b0      	b.n	8011ff6 <get_glyph_dsc_id+0x36>
 8012094:	08011fb7 	.word	0x08011fb7

08012098 <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
 8012098:	2909      	cmp	r1, #9
{
 801209a:	b510      	push	{r4, lr}
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801209c:	bf08      	it	eq
 801209e:	2120      	moveq	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 80120a0:	6904      	ldr	r4, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 80120a2:	f7ff ff8d 	bl	8011fc0 <get_glyph_dsc_id>
    if(!gid) return NULL;
 80120a6:	b160      	cbz	r0, 80120c2 <lv_font_get_bitmap_fmt_txt+0x2a>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 80120a8:	7ce3      	ldrb	r3, [r4, #19]
 80120aa:	f013 0fc0 	tst.w	r3, #192	; 0xc0
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 80120ae:	bf01      	itttt	eq
 80120b0:	6863      	ldreq	r3, [r4, #4]
 80120b2:	f853 3030 	ldreq.w	r3, [r3, r0, lsl #3]
 80120b6:	6820      	ldreq	r0, [r4, #0]
 80120b8:	f3c3 0313 	ubfxeq	r3, r3, #0, #20
 80120bc:	bf0c      	ite	eq
 80120be:	18c0      	addeq	r0, r0, r3
    if(!gid) return NULL;
 80120c0:	2000      	movne	r0, #0
}
 80120c2:	bd10      	pop	{r4, pc}

080120c4 <lv_font_get_glyph_dsc_fmt_txt>:
{
 80120c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(unicode_letter == '\t') {
 80120c8:	2a09      	cmp	r2, #9
{
 80120ca:	b085      	sub	sp, #20
 80120cc:	460c      	mov	r4, r1
 80120ce:	4611      	mov	r1, r2
        unicode_letter = ' ';
 80120d0:	bf08      	it	eq
 80120d2:	2120      	moveq	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 80120d4:	6907      	ldr	r7, [r0, #16]
{
 80120d6:	4680      	mov	r8, r0
 80120d8:	4699      	mov	r9, r3
        is_tab = true;
 80120da:	bf0c      	ite	eq
 80120dc:	2601      	moveq	r6, #1
    bool is_tab = false;
 80120de:	2600      	movne	r6, #0
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 80120e0:	f7ff ff6e 	bl	8011fc0 <get_glyph_dsc_id>
    if(!gid) return false;
 80120e4:	4605      	mov	r5, r0
 80120e6:	2800      	cmp	r0, #0
 80120e8:	f000 8089 	beq.w	80121fe <lv_font_get_glyph_dsc_fmt_txt+0x13a>
    if(fdsc->kern_dsc) {
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	bb5b      	cbnz	r3, 8012148 <lv_font_get_glyph_dsc_fmt_txt+0x84>
    int8_t kvalue = 0;
 80120f0:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 80120f2:	6878      	ldr	r0, [r7, #4]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80120f4:	8a3a      	ldrh	r2, [r7, #16]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 80120f6:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80120fa:	4353      	muls	r3, r2
    uint32_t adv_w = gdsc->adv_w;
 80120fc:	886a      	ldrh	r2, [r5, #2]
 80120fe:	f3c2 110b 	ubfx	r1, r2, #4, #12
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8012102:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 8012104:	460a      	mov	r2, r1
    if(is_tab) adv_w *= 2;
 8012106:	b10e      	cbz	r6, 801210c <lv_font_get_glyph_dsc_fmt_txt+0x48>
 8012108:	b20a      	sxth	r2, r1
 801210a:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 801210c:	3308      	adds	r3, #8
 801210e:	4413      	add	r3, r2
 8012110:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 8012112:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_h = gdsc->box_h;
 8012114:	796b      	ldrb	r3, [r5, #5]
 8012116:	8123      	strh	r3, [r4, #8]
    dsc_out->box_w = gdsc->box_w;
 8012118:	792a      	ldrb	r2, [r5, #4]
 801211a:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 801211c:	f995 3006 	ldrsb.w	r3, [r5, #6]
 8012120:	8163      	strh	r3, [r4, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 8012122:	f995 3007 	ldrsb.w	r3, [r5, #7]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 8012126:	7cf9      	ldrb	r1, [r7, #19]
    dsc_out->ofs_y = gdsc->ofs_y;
 8012128:	81a3      	strh	r3, [r4, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 801212a:	7ba3      	ldrb	r3, [r4, #14]
 801212c:	f3c1 0143 	ubfx	r1, r1, #1, #4
 8012130:	f023 031f 	bic.w	r3, r3, #31
 8012134:	430b      	orrs	r3, r1
 8012136:	73a3      	strb	r3, [r4, #14]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8012138:	2e00      	cmp	r6, #0
 801213a:	d062      	beq.n	8012202 <lv_font_get_glyph_dsc_fmt_txt+0x13e>
 801213c:	0052      	lsls	r2, r2, #1
 801213e:	80e2      	strh	r2, [r4, #6]
}
 8012140:	4630      	mov	r0, r6
 8012142:	b005      	add	sp, #20
 8012144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 8012148:	4649      	mov	r1, r9
 801214a:	4640      	mov	r0, r8
 801214c:	f7ff ff38 	bl	8011fc0 <get_glyph_dsc_id>
        if(gid_next) {
 8012150:	2800      	cmp	r0, #0
 8012152:	d0cd      	beq.n	80120f0 <lv_font_get_glyph_dsc_fmt_txt+0x2c>
            kvalue = get_kern_value(font, gid, gid_next);
 8012154:	f8d8 3010 	ldr.w	r3, [r8, #16]
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 8012158:	f8d3 800c 	ldr.w	r8, [r3, #12]
    if(fdsc->kern_classes == 0) {
 801215c:	7cdb      	ldrb	r3, [r3, #19]
 801215e:	069b      	lsls	r3, r3, #26
 8012160:	d438      	bmi.n	80121d4 <lv_font_get_glyph_dsc_fmt_txt+0x110>
        if(kdsc->glyph_ids_size == 0) {
 8012162:	f898 300b 	ldrb.w	r3, [r8, #11]
 8012166:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 801216a:	d11a      	bne.n	80121a2 <lv_font_get_glyph_dsc_fmt_txt+0xde>
            const uint16_t * g_ids = kdsc->glyph_ids;
 801216c:	f8d8 9000 	ldr.w	r9, [r8]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8012170:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8012174:	4b24      	ldr	r3, [pc, #144]	; (8012208 <lv_font_get_glyph_dsc_fmt_txt+0x144>)
 8012176:	9300      	str	r3, [sp, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8012178:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 801217c:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8012180:	2302      	movs	r3, #2
 8012182:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8012186:	4649      	mov	r1, r9
 8012188:	a803      	add	r0, sp, #12
 801218a:	f003 f8f4 	bl	8015376 <_lv_utils_bsearch>
            if(kid_p) {
 801218e:	4603      	mov	r3, r0
 8012190:	2800      	cmp	r0, #0
 8012192:	d0ae      	beq.n	80120f2 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
                lv_uintptr_t ofs = kid_p - g_ids;
 8012194:	eba0 0309 	sub.w	r3, r0, r9
 8012198:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
 801219a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801219e:	56d3      	ldrsb	r3, [r2, r3]
 80121a0:	e7a7      	b.n	80120f2 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        else if(kdsc->glyph_ids_size == 1) {
 80121a2:	2b40      	cmp	r3, #64	; 0x40
 80121a4:	d1a4      	bne.n	80120f0 <lv_font_get_glyph_dsc_fmt_txt+0x2c>
            const uint32_t * g_ids = kdsc->glyph_ids;
 80121a6:	f8d8 9000 	ldr.w	r9, [r8]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 80121aa:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80121ae:	4b17      	ldr	r3, [pc, #92]	; (801220c <lv_font_get_glyph_dsc_fmt_txt+0x148>)
 80121b0:	9300      	str	r3, [sp, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 80121b2:	eb05 4000 	add.w	r0, r5, r0, lsl #16
 80121b6:	9003      	str	r0, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 80121b8:	2304      	movs	r3, #4
 80121ba:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80121be:	4649      	mov	r1, r9
 80121c0:	a803      	add	r0, sp, #12
 80121c2:	f003 f8d8 	bl	8015376 <_lv_utils_bsearch>
            if(kid_p) {
 80121c6:	4603      	mov	r3, r0
 80121c8:	2800      	cmp	r0, #0
 80121ca:	d092      	beq.n	80120f2 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
                lv_uintptr_t ofs = kid_p - g_ids;
 80121cc:	eba0 0309 	sub.w	r3, r0, r9
 80121d0:	109b      	asrs	r3, r3, #2
 80121d2:	e7e2      	b.n	801219a <lv_font_get_glyph_dsc_fmt_txt+0xd6>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 80121d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80121d8:	5d5a      	ldrb	r2, [r3, r5]
        if(left_class > 0 && right_class > 0) {
 80121da:	2a00      	cmp	r2, #0
 80121dc:	d088      	beq.n	80120f0 <lv_font_get_glyph_dsc_fmt_txt+0x2c>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 80121de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80121e2:	5c19      	ldrb	r1, [r3, r0]
        if(left_class > 0 && right_class > 0) {
 80121e4:	2900      	cmp	r1, #0
 80121e6:	d083      	beq.n	80120f0 <lv_font_get_glyph_dsc_fmt_txt+0x2c>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 80121e8:	f8d8 3000 	ldr.w	r3, [r8]
 80121ec:	f898 000d 	ldrb.w	r0, [r8, #13]
 80121f0:	3a01      	subs	r2, #1
 80121f2:	440b      	add	r3, r1
 80121f4:	fb00 3302 	mla	r3, r0, r2, r3
 80121f8:	f913 3c01 	ldrsb.w	r3, [r3, #-1]
 80121fc:	e779      	b.n	80120f2 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
    if(!gid) return false;
 80121fe:	4606      	mov	r6, r0
 8012200:	e79e      	b.n	8012140 <lv_font_get_glyph_dsc_fmt_txt+0x7c>
    return true;
 8012202:	2601      	movs	r6, #1
 8012204:	e79c      	b.n	8012140 <lv_font_get_glyph_dsc_fmt_txt+0x7c>
 8012206:	bf00      	nop
 8012208:	08011f93 	.word	0x08011f93
 801220c:	08011fa5 	.word	0x08011fa5

08012210 <_lv_font_clean_up_fmt_txt>:
}
 8012210:	4770      	bx	lr
	...

08012214 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 8012214:	b510      	push	{r4, lr}
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 8012216:	2150      	movs	r1, #80	; 0x50
{
 8012218:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 801221a:	f001 fa6e 	bl	80136fa <lv_memset_00>

    driver->hor_res          = 320;
    driver->ver_res          = 240;
    driver->physical_hor_res = -1;
 801221e:	4a0c      	ldr	r2, [pc, #48]	; (8012250 <lv_disp_drv_init+0x3c>)
 8012220:	f04f 33ff 	mov.w	r3, #4294967295
 8012224:	e9c4 2300 	strd	r2, r3, [r4]
    driver->physical_ver_res = -1;
    driver->offset_x         = 0;
 8012228:	2300      	movs	r3, #0
 801222a:	60a3      	str	r3, [r4, #8]
    driver->offset_y         = 0;
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 801222c:	6923      	ldr	r3, [r4, #16]
 801222e:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8012232:	f423 73e4 	bic.w	r3, r3, #456	; 0x1c8
 8012236:	f443 5368 	orr.w	r3, r3, #14848	; 0x3a00
 801223a:	6123      	str	r3, [r4, #16]
    driver->screen_transp    = 0;
    driver->dpi              = LV_DPI_DEF;
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 801223c:	2301      	movs	r3, #1
 801223e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 8012242:	4b04      	ldr	r3, [pc, #16]	; (8012254 <lv_disp_drv_init+0x40>)
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 8012244:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 8012248:	2358      	movs	r3, #88	; 0x58
 801224a:	64a3      	str	r3, [r4, #72]	; 0x48
#endif

}
 801224c:	bd10      	pop	{r4, pc}
 801224e:	bf00      	nop
 8012250:	00f00140 	.word	0x00f00140
 8012254:	0800bb75 	.word	0x0800bb75

08012258 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8012258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801225a:	4604      	mov	r4, r0
 801225c:	460d      	mov	r5, r1
 801225e:	4617      	mov	r7, r2
 8012260:	461e      	mov	r6, r3
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 8012262:	211c      	movs	r1, #28
 8012264:	f001 fa49 	bl	80136fa <lv_memset_00>

    draw_buf->buf1    = buf1;
    draw_buf->buf2    = buf2;
 8012268:	e9c4 5700 	strd	r5, r7, [r4]
    draw_buf->buf_act = draw_buf->buf1;
    draw_buf->size    = size_in_px_cnt;
 801226c:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
 8012270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012274 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8012274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012276:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8012278:	4836      	ldr	r0, [pc, #216]	; (8012354 <lv_disp_drv_register+0xe0>)
 801227a:	f000 ff04 	bl	8013086 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(disp);
 801227e:	4604      	mov	r4, r0
 8012280:	b900      	cbnz	r0, 8012284 <lv_disp_drv_register+0x10>
 8012282:	e7fe      	b.n	8012282 <lv_disp_drv_register+0xe>
    if(!disp) {
        return NULL;
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 8012284:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8012286:	b953      	cbnz	r3, 801229e <lv_disp_drv_register+0x2a>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 8012288:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801228a:	f001 f84d 	bl	8013328 <lv_mem_alloc>
        LV_ASSERT_MALLOC(draw_ctx);
 801228e:	4606      	mov	r6, r0
 8012290:	b900      	cbnz	r0, 8012294 <lv_disp_drv_register+0x20>
 8012292:	e7fe      	b.n	8012292 <lv_disp_drv_register+0x1e>
        if(draw_ctx == NULL) return NULL;
        driver->draw_ctx_init(driver, draw_ctx);
 8012294:	4601      	mov	r1, r0
 8012296:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8012298:	4628      	mov	r0, r5
 801229a:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 801229c:	63ee      	str	r6, [r5, #60]	; 0x3c
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 801229e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80122a2:	4620      	mov	r0, r4
 80122a4:	f001 fa29 	bl	80136fa <lv_memset_00>

    disp->driver = driver;

    disp->inv_en_cnt = 1;

    lv_disp_t * disp_def_tmp = disp_def;
 80122a8:	4e2b      	ldr	r6, [pc, #172]	; (8012358 <lv_disp_drv_register+0xe4>)
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 80122aa:	482c      	ldr	r0, [pc, #176]	; (801235c <lv_disp_drv_register+0xe8>)
    disp->driver = driver;
 80122ac:	6025      	str	r5, [r4, #0]
    disp->inv_en_cnt = 1;
 80122ae:	2301      	movs	r3, #1
 80122b0:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 80122b4:	4622      	mov	r2, r4
 80122b6:	211e      	movs	r1, #30
    lv_disp_t * disp_def_tmp = disp_def;
 80122b8:	6837      	ldr	r7, [r6, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 80122ba:	6034      	str	r4, [r6, #0]
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 80122bc:	f002 f94a 	bl	8014554 <lv_timer_create>
 80122c0:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 80122c2:	b900      	cbnz	r0, 80122c6 <lv_disp_drv_register+0x52>
 80122c4:	e7fe      	b.n	80122c4 <lv_disp_drv_register+0x50>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 80122c6:	7c2b      	ldrb	r3, [r5, #16]
 80122c8:	079a      	lsls	r2, r3, #30
 80122ca:	d50a      	bpl.n	80122e2 <lv_disp_drv_register+0x6e>
 80122cc:	68e9      	ldr	r1, [r5, #12]
 80122ce:	882a      	ldrh	r2, [r5, #0]
 80122d0:	8868      	ldrh	r0, [r5, #2]
 80122d2:	68c9      	ldr	r1, [r1, #12]
 80122d4:	fb12 f200 	smulbb	r2, r2, r0
 80122d8:	4291      	cmp	r1, r2
        driver->full_refresh = 0;
 80122da:	bf3c      	itt	cc
 80122dc:	f36f 0341 	bfccc	r3, #1, #1
 80122e0:	742b      	strbcc	r3, [r5, #16]
        LV_LOG_WARN("full_refresh requires at least screen sized draw buffer(s)");
    }

    disp->bg_color = lv_color_white();
 80122e2:	2301      	movs	r3, #1
 80122e4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 80122e8:	23ff      	movs	r3, #255	; 0xff
 80122ea:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 80122ee:	2000      	movs	r0, #0
 80122f0:	f7f1 fe0c 	bl	8003f0c <lv_obj_create>
 80122f4:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 80122f6:	2000      	movs	r0, #0
 80122f8:	f7f1 fe08 	bl	8003f0c <lv_obj_create>
 80122fc:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 80122fe:	2000      	movs	r0, #0
 8012300:	f7f1 fe04 	bl	8003f0c <lv_obj_create>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8012304:	4a16      	ldr	r2, [pc, #88]	; (8012360 <lv_disp_drv_register+0xec>)
 8012306:	6220      	str	r0, [r4, #32]
 8012308:	2100      	movs	r1, #0
 801230a:	69e0      	ldr	r0, [r4, #28]
 801230c:	f7f5 fb66 	bl	80079dc <lv_obj_remove_style>
 8012310:	4a13      	ldr	r2, [pc, #76]	; (8012360 <lv_disp_drv_register+0xec>)
 8012312:	6a20      	ldr	r0, [r4, #32]
 8012314:	2100      	movs	r1, #0
 8012316:	f7f5 fb61 	bl	80079dc <lv_obj_remove_style>
    lv_obj_remove_style_all(disp->top_layer);
    lv_obj_remove_style_all(disp->sys_layer);
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 801231a:	69e0      	ldr	r0, [r4, #28]
 801231c:	2102      	movs	r1, #2
 801231e:	f7f1 fe36 	bl	8003f8e <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 8012322:	6a20      	ldr	r0, [r4, #32]
 8012324:	2102      	movs	r1, #2
 8012326:	f7f1 fe32 	bl	8003f8e <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 801232a:	69e0      	ldr	r0, [r4, #28]
 801232c:	2100      	movs	r1, #0
 801232e:	f7f3 ff40 	bl	80061b2 <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 8012332:	2100      	movs	r1, #0
 8012334:	6a20      	ldr	r0, [r4, #32]
 8012336:	f7f3 ff3c 	bl	80061b2 <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 801233a:	6920      	ldr	r0, [r4, #16]
 801233c:	f7f3 f814 	bl	8005368 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 8012340:	6860      	ldr	r0, [r4, #4]
    disp_def = disp_def_tmp; /*Revert the default display*/
 8012342:	2f00      	cmp	r7, #0
 8012344:	bf14      	ite	ne
 8012346:	463b      	movne	r3, r7
 8012348:	4623      	moveq	r3, r4
 801234a:	6033      	str	r3, [r6, #0]
    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 801234c:	f002 fa0e 	bl	801476c <lv_timer_ready>

    return disp;
}
 8012350:	4620      	mov	r0, r4
 8012352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012354:	20000d48 	.word	0x20000d48
 8012358:	20000cb4 	.word	0x20000cb4
 801235c:	08008f39 	.word	0x08008f39
 8012360:	000fffff 	.word	0x000fffff

08012364 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 8012364:	4b01      	ldr	r3, [pc, #4]	; (801236c <lv_disp_get_default+0x8>)
 8012366:	6818      	ldr	r0, [r3, #0]
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop
 801236c:	20000cb4 	.word	0x20000cb4

08012370 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8012370:	b910      	cbnz	r0, 8012378 <lv_disp_get_hor_res+0x8>
    return disp_def;
 8012372:	4b06      	ldr	r3, [pc, #24]	; (801238c <lv_disp_get_hor_res+0x1c>)
 8012374:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 8012376:	b140      	cbz	r0, 801238a <lv_disp_get_hor_res+0x1a>
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 8012378:	6803      	ldr	r3, [r0, #0]
 801237a:	7c1a      	ldrb	r2, [r3, #16]
 801237c:	06d2      	lsls	r2, r2, #27
 801237e:	d502      	bpl.n	8012386 <lv_disp_get_hor_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 8012380:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8012384:	4770      	bx	lr
            default:
                return disp->driver->hor_res;
 8012386:	f9b3 0000 	ldrsh.w	r0, [r3]
        }
    }
}
 801238a:	4770      	bx	lr
 801238c:	20000cb4 	.word	0x20000cb4

08012390 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8012390:	b910      	cbnz	r0, 8012398 <lv_disp_get_ver_res+0x8>
    return disp_def;
 8012392:	4b06      	ldr	r3, [pc, #24]	; (80123ac <lv_disp_get_ver_res+0x1c>)
 8012394:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 8012396:	b140      	cbz	r0, 80123aa <lv_disp_get_ver_res+0x1a>
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 8012398:	6803      	ldr	r3, [r0, #0]
 801239a:	7c1a      	ldrb	r2, [r3, #16]
 801239c:	06d2      	lsls	r2, r2, #27
 801239e:	d502      	bpl.n	80123a6 <lv_disp_get_ver_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 80123a0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80123a4:	4770      	bx	lr
            default:
                return disp->driver->ver_res;
 80123a6:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
        }
    }
}
 80123aa:	4770      	bx	lr
 80123ac:	20000cb4 	.word	0x20000cb4

080123b0 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80123b0:	b910      	cbnz	r0, 80123b8 <lv_disp_get_dpi+0x8>
    return disp_def;
 80123b2:	4b05      	ldr	r3, [pc, #20]	; (80123c8 <lv_disp_get_dpi+0x18>)
 80123b4:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 80123b6:	b120      	cbz	r0, 80123c2 <lv_disp_get_dpi+0x12>
    return disp->driver->dpi;
 80123b8:	6803      	ldr	r3, [r0, #0]
 80123ba:	6918      	ldr	r0, [r3, #16]
 80123bc:	f3c0 10c9 	ubfx	r0, r0, #7, #10
 80123c0:	4770      	bx	lr
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 80123c2:	2074      	movs	r0, #116	; 0x74
}
 80123c4:	4770      	bx	lr
 80123c6:	bf00      	nop
 80123c8:	20000cb4 	.word	0x20000cb4

080123cc <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->draw_buf->flushing = 0;
 80123cc:	68c3      	ldr	r3, [r0, #12]
 80123ce:	2200      	movs	r2, #0
 80123d0:	611a      	str	r2, [r3, #16]
    disp_drv->draw_buf->flushing_last = 0;
 80123d2:	615a      	str	r2, [r3, #20]
}
 80123d4:	4770      	bx	lr
	...

080123d8 <lv_disp_get_next>:
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    if(disp == NULL)
 80123d8:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 80123da:	4803      	ldr	r0, [pc, #12]	; (80123e8 <lv_disp_get_next+0x10>)
    if(disp == NULL)
 80123dc:	b909      	cbnz	r1, 80123e2 <lv_disp_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 80123de:	f000 beb2 	b.w	8013146 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 80123e2:	f000 beb6 	b.w	8013152 <_lv_ll_get_next>
 80123e6:	bf00      	nop
 80123e8:	20000d48 	.word	0x20000d48

080123ec <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 80123ec:	6803      	ldr	r3, [r0, #0]
}
 80123ee:	68d8      	ldr	r0, [r3, #12]
 80123f0:	4770      	bx	lr
	...

080123f4 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 80123f4:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 80123f6:	4803      	ldr	r0, [pc, #12]	; (8012404 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 80123f8:	b909      	cbnz	r1, 80123fe <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 80123fa:	f000 bea4 	b.w	8013146 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 80123fe:	f000 bea8 	b.w	8013152 <_lv_ll_get_next>
 8012402:	bf00      	nop
 8012404:	20000e28 	.word	0x20000e28

08012408 <lv_tick_get>:
        result        = sys_time;
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
 8012408:	f7ee bd6e 	b.w	8000ee8 <HAL_GetTick>

0801240c <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 801240c:	b510      	push	{r4, lr}
 801240e:	4604      	mov	r4, r0
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
 8012410:	f7ee fd6a 	bl	8000ee8 <HAL_GetTick>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8012414:	1b00      	subs	r0, r0, r4
 8012416:	bd10      	pop	{r4, pc}

08012418 <lv_anim_path_linear>:
{
    anim_timer(NULL);
}

int32_t lv_anim_path_linear(const lv_anim_t * a)
{
 8012418:	b513      	push	{r0, r1, r4, lr}
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 801241a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801241e:	9300      	str	r3, [sp, #0]
{
 8012420:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8012422:	2300      	movs	r3, #0
 8012424:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8012426:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012428:	4619      	mov	r1, r3
 801242a:	f000 ff55 	bl	80132d8 <lv_map>

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 801242e:	6a22      	ldr	r2, [r4, #32]
 8012430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012432:	1a9b      	subs	r3, r3, r2
 8012434:	4358      	muls	r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start_value;

    return new_value;
}
 8012436:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 801243a:	b002      	add	sp, #8
 801243c:	bd10      	pop	{r4, pc}
	...

08012440 <anim_mark_list_change>:
        }
    }
}

static void anim_mark_list_change(void)
{
 8012440:	b508      	push	{r3, lr}
    anim_list_changed = true;
 8012442:	4b09      	ldr	r3, [pc, #36]	; (8012468 <anim_mark_list_change+0x28>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8012444:	4809      	ldr	r0, [pc, #36]	; (801246c <anim_mark_list_change+0x2c>)
    anim_list_changed = true;
 8012446:	2201      	movs	r2, #1
 8012448:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801244a:	f000 fe7c 	bl	8013146 <_lv_ll_get_head>
 801244e:	4b08      	ldr	r3, [pc, #32]	; (8012470 <anim_mark_list_change+0x30>)
 8012450:	b920      	cbnz	r0, 801245c <anim_mark_list_change+0x1c>
        lv_timer_pause(_lv_anim_tmr);
 8012452:	6818      	ldr	r0, [r3, #0]
    else
        lv_timer_resume(_lv_anim_tmr);
}
 8012454:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_pause(_lv_anim_tmr);
 8012458:	f002 b97e 	b.w	8014758 <lv_timer_pause>
        lv_timer_resume(_lv_anim_tmr);
 801245c:	6818      	ldr	r0, [r3, #0]
}
 801245e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_resume(_lv_anim_tmr);
 8012462:	f002 b97e 	b.w	8014762 <lv_timer_resume>
 8012466:	bf00      	nop
 8012468:	20000cbc 	.word	0x20000cbc
 801246c:	20000ccc 	.word	0x20000ccc
 8012470:	20000cb8 	.word	0x20000cb8

08012474 <anim_timer>:
{
 8012474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8012478:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80125e0 <anim_timer+0x16c>
    anim_run_round = anim_run_round ? false : true;
 801247c:	4e56      	ldr	r6, [pc, #344]	; (80125d8 <anim_timer+0x164>)
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 801247e:	f8d8 0000 	ldr.w	r0, [r8]
        anim_list_changed = false;
 8012482:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80125e4 <anim_timer+0x170>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012486:	4f55      	ldr	r7, [pc, #340]	; (80125dc <anim_timer+0x168>)
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8012488:	f7ff ffc0 	bl	801240c <lv_tick_elaps>
    anim_run_round = anim_run_round ? false : true;
 801248c:	7833      	ldrb	r3, [r6, #0]
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 801248e:	4605      	mov	r5, r0
    anim_run_round = anim_run_round ? false : true;
 8012490:	f083 0301 	eor.w	r3, r3, #1
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012494:	4851      	ldr	r0, [pc, #324]	; (80125dc <anim_timer+0x168>)
    anim_run_round = anim_run_round ? false : true;
 8012496:	7033      	strb	r3, [r6, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012498:	f000 fe55 	bl	8013146 <_lv_ll_get_head>
 801249c:	4604      	mov	r4, r0
    while(a != NULL) {
 801249e:	b92c      	cbnz	r4, 80124ac <anim_timer+0x38>
    last_timer_run = lv_tick_get();
 80124a0:	f7ff ffb2 	bl	8012408 <lv_tick_get>
 80124a4:	f8c8 0000 	str.w	r0, [r8]
}
 80124a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        anim_list_changed = false;
 80124ac:	2300      	movs	r3, #0
 80124ae:	f889 3000 	strb.w	r3, [r9]
        if(a->run_round != anim_run_round) {
 80124b2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80124b6:	7832      	ldrb	r2, [r6, #0]
 80124b8:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80124bc:	4291      	cmp	r1, r2
 80124be:	f000 8086 	beq.w	80125ce <anim_timer+0x15a>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 80124c2:	f362 0382 	bfi	r3, r2, #2, #1
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 80124c6:	0719      	lsls	r1, r3, #28
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 80124c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 80124cc:	b2da      	uxtb	r2, r3
 80124ce:	d41a      	bmi.n	8012506 <anim_timer+0x92>
            int32_t new_act_time = a->act_time + elaps;
 80124d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	dc17      	bgt.n	8012506 <anim_timer+0x92>
 80124d6:	42eb      	cmn	r3, r5
 80124d8:	d415      	bmi.n	8012506 <anim_timer+0x92>
                if(a->early_apply == 0 && a->get_value_cb) {
 80124da:	07d3      	lsls	r3, r2, #31
 80124dc:	d409      	bmi.n	80124f2 <anim_timer+0x7e>
 80124de:	6963      	ldr	r3, [r4, #20]
 80124e0:	b13b      	cbz	r3, 80124f2 <anim_timer+0x7e>
                    int32_t v_ofs = a->get_value_cb(a);
 80124e2:	4620      	mov	r0, r4
 80124e4:	4798      	blx	r3
                    a->start_value += v_ofs;
 80124e6:	6a23      	ldr	r3, [r4, #32]
 80124e8:	4403      	add	r3, r0
 80124ea:	6223      	str	r3, [r4, #32]
                    a->end_value += v_ofs;
 80124ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80124ee:	4418      	add	r0, r3
 80124f0:	62a0      	str	r0, [r4, #40]	; 0x28
                if(a->start_cb) a->start_cb(a);
 80124f2:	68a3      	ldr	r3, [r4, #8]
 80124f4:	b10b      	cbz	r3, 80124fa <anim_timer+0x86>
 80124f6:	4620      	mov	r0, r4
 80124f8:	4798      	blx	r3
                a->start_cb_called = 1;
 80124fa:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80124fe:	f043 0308 	orr.w	r3, r3, #8
 8012502:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            a->act_time += elaps;
 8012506:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012508:	442b      	add	r3, r5
            if(a->act_time >= 0) {
 801250a:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 801250c:	6323      	str	r3, [r4, #48]	; 0x30
            if(a->act_time >= 0) {
 801250e:	db2f      	blt.n	8012570 <anim_timer+0xfc>
                if(a->act_time > a->time) a->act_time = a->time;
 8012510:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012512:	4293      	cmp	r3, r2
 8012514:	bfc8      	it	gt
 8012516:	6322      	strgt	r2, [r4, #48]	; 0x30
                new_value = a->path_cb(a);
 8012518:	69e3      	ldr	r3, [r4, #28]
 801251a:	4620      	mov	r0, r4
 801251c:	4798      	blx	r3
                if(new_value != a->current_value) {
 801251e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012520:	4283      	cmp	r3, r0
                new_value = a->path_cb(a);
 8012522:	4601      	mov	r1, r0
                if(new_value != a->current_value) {
 8012524:	d004      	beq.n	8012530 <anim_timer+0xbc>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8012526:	6863      	ldr	r3, [r4, #4]
                    a->current_value = new_value;
 8012528:	6260      	str	r0, [r4, #36]	; 0x24
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 801252a:	b10b      	cbz	r3, 8012530 <anim_timer+0xbc>
 801252c:	6820      	ldr	r0, [r4, #0]
 801252e:	4798      	blx	r3
                if(a->act_time >= a->time) {
 8012530:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	; 0x2c
 8012534:	4283      	cmp	r3, r0
 8012536:	db1b      	blt.n	8012570 <anim_timer+0xfc>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8012538:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801253c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801253e:	f013 0302 	ands.w	r3, r3, #2
 8012542:	d124      	bne.n	801258e <anim_timer+0x11a>
 8012544:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8012548:	b9d2      	cbnz	r2, 8012580 <anim_timer+0x10c>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 801254a:	2900      	cmp	r1, #0
 801254c:	d13c      	bne.n	80125c8 <anim_timer+0x154>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801254e:	4621      	mov	r1, r4
 8012550:	4638      	mov	r0, r7
 8012552:	f000 fdcf 	bl	80130f4 <_lv_ll_remove>
        anim_mark_list_change();
 8012556:	f7ff ff73 	bl	8012440 <anim_mark_list_change>
        if(a->ready_cb != NULL) a->ready_cb(a);
 801255a:	68e3      	ldr	r3, [r4, #12]
 801255c:	b10b      	cbz	r3, 8012562 <anim_timer+0xee>
 801255e:	4620      	mov	r0, r4
 8012560:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 8012562:	6923      	ldr	r3, [r4, #16]
 8012564:	b10b      	cbz	r3, 801256a <anim_timer+0xf6>
 8012566:	4620      	mov	r0, r4
 8012568:	4798      	blx	r3
        lv_mem_free(a);
 801256a:	4620      	mov	r0, r4
 801256c:	f000 fefa 	bl	8013364 <lv_mem_free>
        if(anim_list_changed)
 8012570:	f899 3000 	ldrb.w	r3, [r9]
 8012574:	b35b      	cbz	r3, 80125ce <anim_timer+0x15a>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012576:	4638      	mov	r0, r7
 8012578:	f000 fde5 	bl	8013146 <_lv_ll_get_head>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801257c:	4604      	mov	r4, r0
 801257e:	e78e      	b.n	801249e <anim_timer+0x2a>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8012580:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8012584:	4562      	cmp	r2, ip
 8012586:	d006      	beq.n	8012596 <anim_timer+0x122>
        a->repeat_cnt--;
 8012588:	3a01      	subs	r2, #1
 801258a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 801258e:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8012592:	2a00      	cmp	r2, #0
 8012594:	d0d9      	beq.n	801254a <anim_timer+0xd6>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8012596:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012598:	4252      	negs	r2, r2
 801259a:	6322      	str	r2, [r4, #48]	; 0x30
        if(a->playback_time != 0) {
 801259c:	2900      	cmp	r1, #0
 801259e:	d0e7      	beq.n	8012570 <anim_timer+0xfc>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 80125a0:	b913      	cbnz	r3, 80125a8 <anim_timer+0x134>
 80125a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80125a4:	4252      	negs	r2, r2
 80125a6:	6322      	str	r2, [r4, #48]	; 0x30
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 80125a8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
            a->playback_time = tmp;
 80125ac:	63a0      	str	r0, [r4, #56]	; 0x38
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 80125ae:	fab3 f383 	clz	r3, r3
 80125b2:	095b      	lsrs	r3, r3, #5
 80125b4:	f363 0241 	bfi	r2, r3, #1, #1
 80125b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
            int32_t tmp    = a->start_value;
 80125bc:	6a22      	ldr	r2, [r4, #32]
            a->start_value = a->end_value;
 80125be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80125c0:	6223      	str	r3, [r4, #32]
            a->time = a->playback_time;
 80125c2:	e9c4 210a 	strd	r2, r1, [r4, #40]	; 0x28
            a->playback_time = tmp;
 80125c6:	e7d3      	b.n	8012570 <anim_timer+0xfc>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d0e4      	beq.n	8012596 <anim_timer+0x122>
 80125cc:	e7bf      	b.n	801254e <anim_timer+0xda>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80125ce:	4621      	mov	r1, r4
 80125d0:	4638      	mov	r0, r7
 80125d2:	f000 fdbe 	bl	8013152 <_lv_ll_get_next>
 80125d6:	e7d1      	b.n	801257c <anim_timer+0x108>
 80125d8:	20000cbd 	.word	0x20000cbd
 80125dc:	20000ccc 	.word	0x20000ccc
 80125e0:	20000cc0 	.word	0x20000cc0
 80125e4:	20000cbc 	.word	0x20000cbc

080125e8 <_lv_anim_core_init>:
{
 80125e8:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 80125ea:	4808      	ldr	r0, [pc, #32]	; (801260c <_lv_anim_core_init+0x24>)
 80125ec:	2144      	movs	r1, #68	; 0x44
 80125ee:	f000 fd42 	bl	8013076 <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 80125f2:	2200      	movs	r2, #0
 80125f4:	211e      	movs	r1, #30
 80125f6:	4806      	ldr	r0, [pc, #24]	; (8012610 <_lv_anim_core_init+0x28>)
 80125f8:	f001 ffac 	bl	8014554 <lv_timer_create>
 80125fc:	4b05      	ldr	r3, [pc, #20]	; (8012614 <_lv_anim_core_init+0x2c>)
 80125fe:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 8012600:	f7ff ff1e 	bl	8012440 <anim_mark_list_change>
    anim_list_changed = false;
 8012604:	4b04      	ldr	r3, [pc, #16]	; (8012618 <_lv_anim_core_init+0x30>)
 8012606:	2200      	movs	r2, #0
 8012608:	701a      	strb	r2, [r3, #0]
}
 801260a:	bd08      	pop	{r3, pc}
 801260c:	20000ccc 	.word	0x20000ccc
 8012610:	08012475 	.word	0x08012475
 8012614:	20000cb8 	.word	0x20000cb8
 8012618:	20000cbc 	.word	0x20000cbc

0801261c <lv_anim_init>:
{
 801261c:	b510      	push	{r4, lr}
    lv_memset_00(a, sizeof(lv_anim_t));
 801261e:	2144      	movs	r1, #68	; 0x44
{
 8012620:	4604      	mov	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
 8012622:	f001 f86a 	bl	80136fa <lv_memset_00>
    a->time = 500;
 8012626:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801262a:	62e3      	str	r3, [r4, #44]	; 0x2c
    a->start_value = 0;
 801262c:	2300      	movs	r3, #0
 801262e:	6223      	str	r3, [r4, #32]
    a->end_value = 100;
 8012630:	2364      	movs	r3, #100	; 0x64
 8012632:	62a3      	str	r3, [r4, #40]	; 0x28
    a->repeat_cnt = 1;
 8012634:	2301      	movs	r3, #1
 8012636:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    a->path_cb = lv_anim_path_linear;
 801263a:	4b04      	ldr	r3, [pc, #16]	; (801264c <lv_anim_init+0x30>)
 801263c:	61e3      	str	r3, [r4, #28]
    a->early_apply = 1;
 801263e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8012642:	f043 0301 	orr.w	r3, r3, #1
 8012646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 801264a:	bd10      	pop	{r4, pc}
 801264c:	08012419 	.word	0x08012419

08012650 <lv_anim_del>:
{
 8012650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012654:	4605      	mov	r5, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012656:	4815      	ldr	r0, [pc, #84]	; (80126ac <lv_anim_del+0x5c>)
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012658:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80126ac <lv_anim_del+0x5c>
{
 801265c:	460e      	mov	r6, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801265e:	f000 fd72 	bl	8013146 <_lv_ll_get_head>
    bool del = false;
 8012662:	f04f 0800 	mov.w	r8, #0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8012666:	4604      	mov	r4, r0
    while(a != NULL) {
 8012668:	b914      	cbnz	r4, 8012670 <lv_anim_del+0x20>
}
 801266a:	4640      	mov	r0, r8
 801266c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8012670:	4621      	mov	r1, r4
 8012672:	4648      	mov	r0, r9
 8012674:	f000 fd6d 	bl	8013152 <_lv_ll_get_next>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8012678:	6823      	ldr	r3, [r4, #0]
 801267a:	42ab      	cmp	r3, r5
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801267c:	4607      	mov	r7, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 801267e:	d000      	beq.n	8012682 <lv_anim_del+0x32>
 8012680:	b995      	cbnz	r5, 80126a8 <lv_anim_del+0x58>
 8012682:	6863      	ldr	r3, [r4, #4]
 8012684:	42b3      	cmp	r3, r6
 8012686:	d000      	beq.n	801268a <lv_anim_del+0x3a>
 8012688:	b976      	cbnz	r6, 80126a8 <lv_anim_del+0x58>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801268a:	4621      	mov	r1, r4
 801268c:	4648      	mov	r0, r9
 801268e:	f000 fd31 	bl	80130f4 <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 8012692:	6923      	ldr	r3, [r4, #16]
 8012694:	b10b      	cbz	r3, 801269a <lv_anim_del+0x4a>
 8012696:	4620      	mov	r0, r4
 8012698:	4798      	blx	r3
            lv_mem_free(a);
 801269a:	4620      	mov	r0, r4
 801269c:	f000 fe62 	bl	8013364 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 80126a0:	f7ff fece 	bl	8012440 <anim_mark_list_change>
            del = true;
 80126a4:	f04f 0801 	mov.w	r8, #1
 80126a8:	463c      	mov	r4, r7
 80126aa:	e7dd      	b.n	8012668 <lv_anim_del+0x18>
 80126ac:	20000ccc 	.word	0x20000ccc

080126b0 <lv_anim_start>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 80126b0:	6841      	ldr	r1, [r0, #4]
{
 80126b2:	b538      	push	{r3, r4, r5, lr}
 80126b4:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 80126b6:	b111      	cbz	r1, 80126be <lv_anim_start+0xe>
 80126b8:	6800      	ldr	r0, [r0, #0]
 80126ba:	f7ff ffc9 	bl	8012650 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 80126be:	481a      	ldr	r0, [pc, #104]	; (8012728 <lv_anim_start+0x78>)
 80126c0:	f000 fd4e 	bl	8013160 <_lv_ll_is_empty>
 80126c4:	b118      	cbz	r0, 80126ce <lv_anim_start+0x1e>
        last_timer_run = lv_tick_get();
 80126c6:	f7ff fe9f 	bl	8012408 <lv_tick_get>
 80126ca:	4b18      	ldr	r3, [pc, #96]	; (801272c <lv_anim_start+0x7c>)
 80126cc:	6018      	str	r0, [r3, #0]
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 80126ce:	4816      	ldr	r0, [pc, #88]	; (8012728 <lv_anim_start+0x78>)
 80126d0:	f000 fcd9 	bl	8013086 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_anim);
 80126d4:	4604      	mov	r4, r0
 80126d6:	b900      	cbnz	r0, 80126da <lv_anim_start+0x2a>
 80126d8:	e7fe      	b.n	80126d8 <lv_anim_start+0x28>
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 80126da:	2244      	movs	r2, #68	; 0x44
 80126dc:	4629      	mov	r1, r5
 80126de:	f000 feed 	bl	80134bc <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 80126e2:	682b      	ldr	r3, [r5, #0]
    new_anim->run_round = anim_run_round;
 80126e4:	4a12      	ldr	r2, [pc, #72]	; (8012730 <lv_anim_start+0x80>)
    if(a->var == a) new_anim->var = new_anim;
 80126e6:	42ab      	cmp	r3, r5
    new_anim->run_round = anim_run_round;
 80126e8:	7812      	ldrb	r2, [r2, #0]
 80126ea:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    if(a->var == a) new_anim->var = new_anim;
 80126ee:	bf08      	it	eq
 80126f0:	6024      	streq	r4, [r4, #0]
    new_anim->run_round = anim_run_round;
 80126f2:	f362 0382 	bfi	r3, r2, #2, #1
 80126f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    if(new_anim->early_apply) {
 80126fa:	07db      	lsls	r3, r3, #31
 80126fc:	d50f      	bpl.n	801271e <lv_anim_start+0x6e>
        if(new_anim->get_value_cb) {
 80126fe:	6963      	ldr	r3, [r4, #20]
 8012700:	b13b      	cbz	r3, 8012712 <lv_anim_start+0x62>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 8012702:	4620      	mov	r0, r4
 8012704:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 8012706:	6a23      	ldr	r3, [r4, #32]
 8012708:	4403      	add	r3, r0
 801270a:	6223      	str	r3, [r4, #32]
            new_anim->end_value += v_ofs;
 801270c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801270e:	4418      	add	r0, r3
 8012710:	62a0      	str	r0, [r4, #40]	; 0x28
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 8012712:	6863      	ldr	r3, [r4, #4]
 8012714:	b11b      	cbz	r3, 801271e <lv_anim_start+0x6e>
 8012716:	6820      	ldr	r0, [r4, #0]
 8012718:	b108      	cbz	r0, 801271e <lv_anim_start+0x6e>
 801271a:	6a21      	ldr	r1, [r4, #32]
 801271c:	4798      	blx	r3
    anim_mark_list_change();
 801271e:	f7ff fe8f 	bl	8012440 <anim_mark_list_change>
}
 8012722:	4620      	mov	r0, r4
 8012724:	bd38      	pop	{r3, r4, r5, pc}
 8012726:	bf00      	nop
 8012728:	20000ccc 	.word	0x20000ccc
 801272c:	20000cc0 	.word	0x20000cc0
 8012730:	20000cbd 	.word	0x20000cbd

08012734 <lv_anim_get>:
{
 8012734:	b570      	push	{r4, r5, r6, lr}
 8012736:	4605      	mov	r5, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8012738:	4809      	ldr	r0, [pc, #36]	; (8012760 <lv_anim_get+0x2c>)
 801273a:	4e09      	ldr	r6, [pc, #36]	; (8012760 <lv_anim_get+0x2c>)
{
 801273c:	460c      	mov	r4, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 801273e:	f000 fd02 	bl	8013146 <_lv_ll_get_head>
 8012742:	b900      	cbnz	r0, 8012746 <lv_anim_get+0x12>
}
 8012744:	bd70      	pop	{r4, r5, r6, pc}
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8012746:	6803      	ldr	r3, [r0, #0]
 8012748:	42ab      	cmp	r3, r5
 801274a:	d104      	bne.n	8012756 <lv_anim_get+0x22>
 801274c:	6843      	ldr	r3, [r0, #4]
 801274e:	42a3      	cmp	r3, r4
 8012750:	d0f8      	beq.n	8012744 <lv_anim_get+0x10>
 8012752:	2c00      	cmp	r4, #0
 8012754:	d0f6      	beq.n	8012744 <lv_anim_get+0x10>
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8012756:	4601      	mov	r1, r0
 8012758:	4630      	mov	r0, r6
 801275a:	f000 fcfa 	bl	8013152 <_lv_ll_get_next>
 801275e:	e7f0      	b.n	8012742 <lv_anim_get+0xe>
 8012760:	20000ccc 	.word	0x20000ccc

08012764 <lv_anim_speed_to_time>:
    uint32_t d    = LV_ABS(start - end);
 8012764:	1a8a      	subs	r2, r1, r2
 8012766:	2a00      	cmp	r2, #0
 8012768:	bfb8      	it	lt
 801276a:	4252      	neglt	r2, r2
    uint32_t time = (d * 1000) / speed;
 801276c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012770:	434a      	muls	r2, r1
    if(time == 0) {
 8012772:	4282      	cmp	r2, r0
    uint32_t time = (d * 1000) / speed;
 8012774:	fbb2 f3f0 	udiv	r3, r2, r0
        time++;
 8012778:	bf38      	it	cc
 801277a:	3301      	addcc	r3, #1
}
 801277c:	4618      	mov	r0, r3
 801277e:	4770      	bx	lr

08012780 <lv_anim_path_ease_out>:
{
 8012780:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 8012782:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8012786:	9500      	str	r5, [sp, #0]
 8012788:	2300      	movs	r3, #0
{
 801278a:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 801278c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801278e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012790:	4619      	mov	r1, r3
 8012792:	f000 fda1 	bl	80132d8 <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 8012796:	9500      	str	r5, [sp, #0]
 8012798:	f240 33b6 	movw	r3, #950	; 0x3b6
 801279c:	f44f 7261 	mov.w	r2, #900	; 0x384
 80127a0:	2100      	movs	r1, #0
 80127a2:	f000 fd15 	bl	80131d0 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 80127a6:	6a22      	ldr	r2, [r4, #32]
 80127a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80127aa:	1a9b      	subs	r3, r3, r2
 80127ac:	4358      	muls	r0, r3
}
 80127ae:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 80127b2:	b003      	add	sp, #12
 80127b4:	bd30      	pop	{r4, r5, pc}

080127b6 <lv_anim_path_step>:
    if(a->act_time >= a->time)
 80127b6:	e9d0 320b 	ldrd	r3, r2, [r0, #44]	; 0x2c
 80127ba:	429a      	cmp	r2, r3
        return a->end_value;
 80127bc:	bfac      	ite	ge
 80127be:	6a80      	ldrge	r0, [r0, #40]	; 0x28
        return a->start_value;
 80127c0:	6a00      	ldrlt	r0, [r0, #32]
}
 80127c2:	4770      	bx	lr

080127c4 <lv_point_within_circle.isra.0>:

/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
 80127c4:	b530      	push	{r4, r5, lr}
{
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80127c6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80127ca:	f9b0 5000 	ldrsh.w	r5, [r0]
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
    lv_coord_t py = p->y - cy;
 80127ce:	8840      	ldrh	r0, [r0, #2]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80127d0:	1b5b      	subs	r3, r3, r5
 80127d2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    lv_coord_t py = p->y - cy;
 80127d6:	1a12      	subs	r2, r2, r0
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80127d8:	105c      	asrs	r4, r3, #1
    lv_coord_t px = p->x - cx;
 80127da:	1b49      	subs	r1, r1, r5
    lv_coord_t cx = area->x1 + r;
 80127dc:	f3c3 034f 	ubfx	r3, r3, #1, #16
    lv_coord_t px = p->x - cx;
 80127e0:	1ac9      	subs	r1, r1, r3
    lv_coord_t py = p->y - cy;
 80127e2:	1ad3      	subs	r3, r2, r3

    uint32_t r_sqrd = r * r;
    uint32_t dist = (px * px) + (py * py);
 80127e4:	fb13 f303 	smulbb	r3, r3, r3
    uint32_t r_sqrd = r * r;
 80127e8:	4364      	muls	r4, r4
    uint32_t dist = (px * px) + (py * py);
 80127ea:	fb11 3101 	smlabb	r1, r1, r1, r3

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
 80127ee:	428c      	cmp	r4, r1
 80127f0:	bf34      	ite	cc
 80127f2:	2000      	movcc	r0, #0
 80127f4:	2001      	movcs	r0, #1
 80127f6:	bd30      	pop	{r4, r5, pc}

080127f8 <lv_area_set>:
    area_p->x2 = x2;
 80127f8:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 80127fa:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 80127fe:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 8012800:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 8012802:	80c3      	strh	r3, [r0, #6]
}
 8012804:	4770      	bx	lr

08012806 <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 8012806:	8803      	ldrh	r3, [r0, #0]
 8012808:	3901      	subs	r1, #1
 801280a:	4419      	add	r1, r3
 801280c:	8081      	strh	r1, [r0, #4]
}
 801280e:	4770      	bx	lr

08012810 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 8012810:	8843      	ldrh	r3, [r0, #2]
 8012812:	3901      	subs	r1, #1
 8012814:	4419      	add	r1, r3
 8012816:	80c1      	strh	r1, [r0, #6]
}
 8012818:	4770      	bx	lr

0801281a <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 801281a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801281e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012822:	1ad2      	subs	r2, r2, r3
 8012824:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012828:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801282c:	1a18      	subs	r0, r3, r0
 801282e:	3001      	adds	r0, #1
}
 8012830:	fb02 0000 	mla	r0, r2, r0, r0
 8012834:	4770      	bx	lr

08012836 <lv_area_increase>:
    area->x1 -= w_extra;
 8012836:	8803      	ldrh	r3, [r0, #0]
 8012838:	b289      	uxth	r1, r1
 801283a:	1a5b      	subs	r3, r3, r1
 801283c:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 801283e:	8883      	ldrh	r3, [r0, #4]
 8012840:	4419      	add	r1, r3
    area->y1 -= h_extra;
 8012842:	8843      	ldrh	r3, [r0, #2]
    area->x2 += w_extra;
 8012844:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 8012846:	b292      	uxth	r2, r2
 8012848:	1a9b      	subs	r3, r3, r2
 801284a:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 801284c:	88c3      	ldrh	r3, [r0, #6]
 801284e:	441a      	add	r2, r3
 8012850:	80c2      	strh	r2, [r0, #6]
}
 8012852:	4770      	bx	lr

08012854 <lv_area_move>:
    area->x1 += x_ofs;
 8012854:	8803      	ldrh	r3, [r0, #0]
 8012856:	fa13 f381 	uxtah	r3, r3, r1
 801285a:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 801285c:	8883      	ldrh	r3, [r0, #4]
 801285e:	fa13 f181 	uxtah	r1, r3, r1
    area->y1 += y_ofs;
 8012862:	8843      	ldrh	r3, [r0, #2]
    area->x2 += x_ofs;
 8012864:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 8012866:	fa13 f382 	uxtah	r3, r3, r2
 801286a:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 801286c:	88c3      	ldrh	r3, [r0, #6]
 801286e:	fa13 f282 	uxtah	r2, r3, r2
 8012872:	80c2      	strh	r2, [r0, #6]
}
 8012874:	4770      	bx	lr

08012876 <_lv_area_intersect>:
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8012876:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 801287a:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 801287c:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8012880:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8012884:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8012888:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 801288c:	429d      	cmp	r5, r3
 801288e:	bfb8      	it	lt
 8012890:	461d      	movlt	r5, r3
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8012892:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8012896:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8012898:	42a3      	cmp	r3, r4
 801289a:	bfb8      	it	lt
 801289c:	4623      	movlt	r3, r4
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 801289e:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 80128a2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 80128a6:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80128a8:	42b4      	cmp	r4, r6
 80128aa:	bfa8      	it	ge
 80128ac:	4634      	movge	r4, r6
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 80128ae:	428a      	cmp	r2, r1
 80128b0:	bfa8      	it	ge
 80128b2:	460a      	movge	r2, r1
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 80128b4:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80128b6:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 80128b8:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 80128ba:	dc04      	bgt.n	80128c6 <_lv_area_intersect+0x50>
 80128bc:	4293      	cmp	r3, r2
 80128be:	bfcc      	ite	gt
 80128c0:	2000      	movgt	r0, #0
 80128c2:	2001      	movle	r0, #1
}
 80128c4:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 80128c6:	2000      	movs	r0, #0
 80128c8:	e7fc      	b.n	80128c4 <_lv_area_intersect+0x4e>

080128ca <_lv_area_join>:
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 80128ca:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 80128ce:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 80128d0:	f9b1 4000 	ldrsh.w	r4, [r1]
 80128d4:	42a3      	cmp	r3, r4
 80128d6:	bfa8      	it	ge
 80128d8:	4623      	movge	r3, r4
 80128da:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 80128dc:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80128e0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80128e4:	42a3      	cmp	r3, r4
 80128e6:	bfa8      	it	ge
 80128e8:	4623      	movge	r3, r4
 80128ea:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 80128ec:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80128f0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80128f4:	42a3      	cmp	r3, r4
 80128f6:	bfb8      	it	lt
 80128f8:	4623      	movlt	r3, r4
 80128fa:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 80128fc:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8012900:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8012904:	4293      	cmp	r3, r2
 8012906:	bfb8      	it	lt
 8012908:	4613      	movlt	r3, r2
 801290a:	80c3      	strh	r3, [r0, #6]
}
 801290c:	bd10      	pop	{r4, pc}

0801290e <_lv_area_is_point_on>:
{
 801290e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8012912:	f9b1 9000 	ldrsh.w	r9, [r1]
 8012916:	f9b0 4000 	ldrsh.w	r4, [r0]
 801291a:	45a1      	cmp	r9, r4
{
 801291c:	b087      	sub	sp, #28
 801291e:	4688      	mov	r8, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8012920:	f2c0 808b 	blt.w	8012a3a <_lv_area_is_point_on+0x12c>
 8012924:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012928:	9300      	str	r3, [sp, #0]
 801292a:	4599      	cmp	r9, r3
 801292c:	f300 8085 	bgt.w	8012a3a <_lv_area_is_point_on+0x12c>
 8012930:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
 8012934:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8012938:	45da      	cmp	sl, fp
 801293a:	db7e      	blt.n	8012a3a <_lv_area_is_point_on+0x12c>
 801293c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012940:	459a      	cmp	sl, r3
 8012942:	dc7a      	bgt.n	8012a3a <_lv_area_is_point_on+0x12c>
    if(radius <= 0) {
 8012944:	2a00      	cmp	r2, #0
 8012946:	dc03      	bgt.n	8012950 <_lv_area_is_point_on+0x42>
        return true;
 8012948:	2001      	movs	r0, #1
}
 801294a:	b007      	add	sp, #28
 801294c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012950:	f8bd 0000 	ldrh.w	r0, [sp]
 8012954:	9002      	str	r0, [sp, #8]
 8012956:	b2a6      	uxth	r6, r4
 8012958:	3001      	adds	r0, #1
 801295a:	1b80      	subs	r0, r0, r6
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801295c:	b29f      	uxth	r7, r3
 801295e:	fa1f fc8b 	uxth.w	ip, fp
    corner_area.x1 = a_p->x1;
 8012962:	f8ad 4010 	strh.w	r4, [sp, #16]
 8012966:	1c7d      	adds	r5, r7, #1
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 8012968:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 801296c:	fa04 f080 	sxtah	r0, r4, r0
 8012970:	eba5 040c 	sub.w	r4, r5, ip
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 8012974:	f3c4 35c0 	ubfx	r5, r4, #15, #1
 8012978:	fa05 f584 	sxtah	r5, r5, r4
    lv_coord_t max_radius = LV_MIN(w, h);
 801297c:	106d      	asrs	r5, r5, #1
 801297e:	1044      	asrs	r4, r0, #1
    corner_area.x2 = a_p->x1 + radius;
 8012980:	42ac      	cmp	r4, r5
 8012982:	bfa8      	it	ge
 8012984:	462c      	movge	r4, r5
 8012986:	42a2      	cmp	r2, r4
 8012988:	bfa8      	it	ge
 801298a:	4622      	movge	r2, r4
 801298c:	fa16 f682 	uxtah	r6, r6, r2
 8012990:	b295      	uxth	r5, r2
    corner_area.y2 = a_p->y1 + radius;
 8012992:	fa1c f282 	uxtah	r2, ip, r2
 8012996:	9303      	str	r3, [sp, #12]
 8012998:	b214      	sxth	r4, r2
 801299a:	b293      	uxth	r3, r2
    corner_area.x2 = a_p->x1 + radius;
 801299c:	b2b6      	uxth	r6, r6
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801299e:	2200      	movs	r2, #0
 80129a0:	a804      	add	r0, sp, #16
    corner_area.y2 = a_p->y1 + radius;
 80129a2:	9301      	str	r3, [sp, #4]
    corner_area.x2 = a_p->x1 + radius;
 80129a4:	f8ad 6014 	strh.w	r6, [sp, #20]
    corner_area.y1 = a_p->y1;
 80129a8:	f8ad b012 	strh.w	fp, [sp, #18]
    corner_area.y2 = a_p->y1 + radius;
 80129ac:	f8ad 4016 	strh.w	r4, [sp, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80129b0:	f7ff ffad 	bl	801290e <_lv_area_is_point_on>
 80129b4:	9b03      	ldr	r3, [sp, #12]
 80129b6:	4602      	mov	r2, r0
 80129b8:	b138      	cbz	r0, 80129ca <_lv_area_is_point_on+0xbc>
        corner_area.x2 += radius;
 80129ba:	442e      	add	r6, r5
 80129bc:	f8ad 6014 	strh.w	r6, [sp, #20]
        corner_area.y2 += radius;
 80129c0:	9b01      	ldr	r3, [sp, #4]
 80129c2:	441d      	add	r5, r3
 80129c4:	f8ad 5016 	strh.w	r5, [sp, #22]
 80129c8:	e011      	b.n	80129ee <_lv_area_is_point_on+0xe0>
    corner_area.y1 = a_p->y2 - radius;
 80129ca:	1b7f      	subs	r7, r7, r5
 80129cc:	b2bf      	uxth	r7, r7
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80129ce:	4641      	mov	r1, r8
 80129d0:	a804      	add	r0, sp, #16
    corner_area.y1 = a_p->y2 - radius;
 80129d2:	f8ad 7012 	strh.w	r7, [sp, #18]
    corner_area.y2 = a_p->y2;
 80129d6:	f8ad 3016 	strh.w	r3, [sp, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80129da:	f7ff ff98 	bl	801290e <_lv_area_is_point_on>
 80129de:	4602      	mov	r2, r0
 80129e0:	b158      	cbz	r0, 80129fa <_lv_area_is_point_on+0xec>
        corner_area.x2 += radius;
 80129e2:	442e      	add	r6, r5
 80129e4:	f8ad 6014 	strh.w	r6, [sp, #20]
        corner_area.y1 -= radius;
 80129e8:	1b7d      	subs	r5, r7, r5
 80129ea:	f8ad 5012 	strh.w	r5, [sp, #18]
        return lv_point_within_circle(&corner_area, p_p);
 80129ee:	4652      	mov	r2, sl
 80129f0:	4649      	mov	r1, r9
 80129f2:	a804      	add	r0, sp, #16
 80129f4:	f7ff fee6 	bl	80127c4 <lv_point_within_circle.isra.0>
 80129f8:	e7a7      	b.n	801294a <_lv_area_is_point_on+0x3c>
    corner_area.x1 = a_p->x2 - radius;
 80129fa:	9b02      	ldr	r3, [sp, #8]
 80129fc:	1b5e      	subs	r6, r3, r5
 80129fe:	b2b6      	uxth	r6, r6
    corner_area.x2 = a_p->x2;
 8012a00:	9b00      	ldr	r3, [sp, #0]
    corner_area.x1 = a_p->x2 - radius;
 8012a02:	f8ad 6010 	strh.w	r6, [sp, #16]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8012a06:	4641      	mov	r1, r8
 8012a08:	a804      	add	r0, sp, #16
    corner_area.x2 = a_p->x2;
 8012a0a:	f8ad 3014 	strh.w	r3, [sp, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8012a0e:	f7ff ff7e 	bl	801290e <_lv_area_is_point_on>
 8012a12:	4602      	mov	r2, r0
 8012a14:	b118      	cbz	r0, 8012a1e <_lv_area_is_point_on+0x110>
        corner_area.x1 -= radius;
 8012a16:	1b76      	subs	r6, r6, r5
 8012a18:	f8ad 6010 	strh.w	r6, [sp, #16]
 8012a1c:	e7e4      	b.n	80129e8 <_lv_area_is_point_on+0xda>
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8012a1e:	4641      	mov	r1, r8
 8012a20:	a804      	add	r0, sp, #16
    corner_area.y1 = a_p->y1;
 8012a22:	f8ad b012 	strh.w	fp, [sp, #18]
    corner_area.y2 = a_p->y1 + radius;
 8012a26:	f8ad 4016 	strh.w	r4, [sp, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8012a2a:	f7ff ff70 	bl	801290e <_lv_area_is_point_on>
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	d08a      	beq.n	8012948 <_lv_area_is_point_on+0x3a>
        corner_area.x1 -= radius;
 8012a32:	1b76      	subs	r6, r6, r5
 8012a34:	f8ad 6010 	strh.w	r6, [sp, #16]
 8012a38:	e7c2      	b.n	80129c0 <_lv_area_is_point_on+0xb2>
        return false;
 8012a3a:	2000      	movs	r0, #0
 8012a3c:	e785      	b.n	801294a <_lv_area_is_point_on+0x3c>

08012a3e <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8012a3e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012a42:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012a46:	429a      	cmp	r2, r3
 8012a48:	dc14      	bgt.n	8012a74 <_lv_area_is_on+0x36>
 8012a4a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012a4e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012a52:	429a      	cmp	r2, r3
 8012a54:	db0e      	blt.n	8012a74 <_lv_area_is_on+0x36>
 8012a56:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012a5a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	dc08      	bgt.n	8012a74 <_lv_area_is_on+0x36>
 8012a62:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012a66:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012a6a:	4298      	cmp	r0, r3
 8012a6c:	bfb4      	ite	lt
 8012a6e:	2000      	movlt	r0, #0
 8012a70:	2001      	movge	r0, #1
 8012a72:	4770      	bx	lr
        return false;
 8012a74:	2000      	movs	r0, #0
}
 8012a76:	4770      	bx	lr

08012a78 <_lv_area_is_in>:
{
 8012a78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8012a7c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012a80:	f9b0 7000 	ldrsh.w	r7, [r0]
 8012a84:	42bb      	cmp	r3, r7
{
 8012a86:	460c      	mov	r4, r1
 8012a88:	4615      	mov	r5, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8012a8a:	dd03      	ble.n	8012a94 <_lv_area_is_in+0x1c>
    if(!is_in) return false;
 8012a8c:	2000      	movs	r0, #0
}
 8012a8e:	b002      	add	sp, #8
 8012a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8012a94:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012a98:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8012a9c:	4299      	cmp	r1, r3
 8012a9e:	dcf5      	bgt.n	8012a8c <_lv_area_is_in+0x14>
 8012aa0:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8012aa4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012aa8:	42b1      	cmp	r1, r6
 8012aaa:	dbef      	blt.n	8012a8c <_lv_area_is_in+0x14>
       ain_p->y2 <= aholder_p->y2) {
 8012aac:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8012ab0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8012ab4:	4541      	cmp	r1, r8
 8012ab6:	dbe9      	blt.n	8012a8c <_lv_area_is_in+0x14>
    if(radius == 0) return true;
 8012ab8:	b32a      	cbz	r2, 8012b06 <_lv_area_is_in+0x8e>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8012aba:	a901      	add	r1, sp, #4
 8012abc:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 8012abe:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
 8012ac2:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8012ac6:	f7ff ff22 	bl	801290e <_lv_area_is_point_on>
 8012aca:	2800      	cmp	r0, #0
 8012acc:	d0de      	beq.n	8012a8c <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8012ace:	462a      	mov	r2, r5
 8012ad0:	a901      	add	r1, sp, #4
 8012ad2:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 8012ad4:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8012ad8:	f7ff ff19 	bl	801290e <_lv_area_is_point_on>
 8012adc:	2800      	cmp	r0, #0
 8012ade:	d0d5      	beq.n	8012a8c <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8012ae0:	462a      	mov	r2, r5
 8012ae2:	a901      	add	r1, sp, #4
 8012ae4:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 8012ae6:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y2;
 8012aea:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8012aee:	f7ff ff0e 	bl	801290e <_lv_area_is_point_on>
 8012af2:	2800      	cmp	r0, #0
 8012af4:	d0ca      	beq.n	8012a8c <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8012af6:	462a      	mov	r2, r5
 8012af8:	a901      	add	r1, sp, #4
 8012afa:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 8012afc:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8012b00:	f7ff ff05 	bl	801290e <_lv_area_is_point_on>
 8012b04:	e7c3      	b.n	8012a8e <_lv_area_is_in+0x16>
    if(radius == 0) return true;
 8012b06:	2001      	movs	r0, #1
 8012b08:	e7c1      	b.n	8012a8e <_lv_area_is_in+0x16>

08012b0a <_lv_area_is_out>:
{
 8012b0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8012b0e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012b12:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8012b16:	42b3      	cmp	r3, r6
{
 8012b18:	460c      	mov	r4, r1
 8012b1a:	4615      	mov	r5, r2
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8012b1c:	dc3f      	bgt.n	8012b9e <_lv_area_is_out+0x94>
 8012b1e:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8012b22:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012b26:	4543      	cmp	r3, r8
 8012b28:	dc39      	bgt.n	8012b9e <_lv_area_is_out+0x94>
 8012b2a:	f9b0 7000 	ldrsh.w	r7, [r0]
 8012b2e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012b32:	42bb      	cmp	r3, r7
 8012b34:	db33      	blt.n	8012b9e <_lv_area_is_out+0x94>
       aout_p->y1 > aholder_p->y2) {
 8012b36:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8012b3a:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8012b3e:	4299      	cmp	r1, r3
 8012b40:	db2d      	blt.n	8012b9e <_lv_area_is_out+0x94>
    if(radius == 0) return false;
 8012b42:	b91a      	cbnz	r2, 8012b4c <_lv_area_is_out+0x42>
 8012b44:	2000      	movs	r0, #0
}
 8012b46:	b002      	add	sp, #8
 8012b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8012b4c:	a901      	add	r1, sp, #4
 8012b4e:	4620      	mov	r0, r4
    p.x = aout_p->x1;
 8012b50:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = aout_p->y1;
 8012b54:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8012b58:	f7ff fed9 	bl	801290e <_lv_area_is_point_on>
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	d1f1      	bne.n	8012b44 <_lv_area_is_out+0x3a>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8012b60:	462a      	mov	r2, r5
 8012b62:	a901      	add	r1, sp, #4
 8012b64:	4620      	mov	r0, r4
    p.x = aout_p->x2;
 8012b66:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8012b6a:	f7ff fed0 	bl	801290e <_lv_area_is_point_on>
 8012b6e:	2800      	cmp	r0, #0
 8012b70:	d1e8      	bne.n	8012b44 <_lv_area_is_out+0x3a>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8012b72:	462a      	mov	r2, r5
 8012b74:	a901      	add	r1, sp, #4
 8012b76:	4620      	mov	r0, r4
    p.x = aout_p->x1;
 8012b78:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = aout_p->y2;
 8012b7c:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8012b80:	f7ff fec5 	bl	801290e <_lv_area_is_point_on>
 8012b84:	2800      	cmp	r0, #0
 8012b86:	d1dd      	bne.n	8012b44 <_lv_area_is_out+0x3a>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8012b88:	462a      	mov	r2, r5
 8012b8a:	a901      	add	r1, sp, #4
 8012b8c:	4620      	mov	r0, r4
    p.x = aout_p->x2;
 8012b8e:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8012b92:	f7ff febc 	bl	801290e <_lv_area_is_point_on>
 8012b96:	f080 0001 	eor.w	r0, r0, #1
 8012b9a:	b2c0      	uxtb	r0, r0
 8012b9c:	e7d3      	b.n	8012b46 <_lv_area_is_out+0x3c>
        return true;
 8012b9e:	2001      	movs	r0, #1
 8012ba0:	e7d1      	b.n	8012b46 <_lv_area_is_out+0x3c>
	...

08012ba4 <lv_point_transform>:
{
 8012ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ba8:	4604      	mov	r4, r0
 8012baa:	4617      	mov	r7, r2
 8012bac:	4698      	mov	r8, r3
    if(angle == 0 && zoom == 256) {
 8012bae:	460d      	mov	r5, r1
 8012bb0:	b911      	cbnz	r1, 8012bb8 <lv_point_transform+0x14>
 8012bb2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8012bb6:	d018      	beq.n	8012bea <lv_point_transform+0x46>
    p->x -= pivot->x;
 8012bb8:	f8b8 2000 	ldrh.w	r2, [r8]
 8012bbc:	8823      	ldrh	r3, [r4, #0]
    p->y -= pivot->y;
 8012bbe:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    p->x -= pivot->x;
 8012bc2:	1a9b      	subs	r3, r3, r2
    p->y -= pivot->y;
 8012bc4:	8862      	ldrh	r2, [r4, #2]
 8012bc6:	1a52      	subs	r2, r2, r1
    p->x -= pivot->x;
 8012bc8:	b21b      	sxth	r3, r3
    p->y -= pivot->y;
 8012bca:	b212      	sxth	r2, r2
    p->x -= pivot->x;
 8012bcc:	8023      	strh	r3, [r4, #0]
    p->y -= pivot->y;
 8012bce:	8062      	strh	r2, [r4, #2]
    if(angle == 0) {
 8012bd0:	b975      	cbnz	r5, 8012bf0 <lv_point_transform+0x4c>
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 8012bd2:	f8b8 1000 	ldrh.w	r1, [r8]
 8012bd6:	437b      	muls	r3, r7
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 8012bd8:	437a      	muls	r2, r7
 8012bda:	f8b8 7002 	ldrh.w	r7, [r8, #2]
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 8012bde:	eb01 2323 	add.w	r3, r1, r3, asr #8
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 8012be2:	eb07 2222 	add.w	r2, r7, r2, asr #8
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 8012be6:	8023      	strh	r3, [r4, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 8012be8:	8062      	strh	r2, [r4, #2]
}
 8012bea:	b003      	add	sp, #12
 8012bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(angle_prev != angle) {
 8012bf0:	4935      	ldr	r1, [pc, #212]	; (8012cc8 <lv_point_transform+0x124>)
 8012bf2:	4a36      	ldr	r2, [pc, #216]	; (8012ccc <lv_point_transform+0x128>)
 8012bf4:	680b      	ldr	r3, [r1, #0]
 8012bf6:	42ab      	cmp	r3, r5
 8012bf8:	d03b      	beq.n	8012c72 <lv_point_transform+0xce>
        if(angle_limited > 3600) angle_limited -= 3600;
 8012bfa:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
 8012bfe:	dd5c      	ble.n	8012cba <lv_point_transform+0x116>
 8012c00:	f5a5 6961 	sub.w	r9, r5, #3600	; 0xe10
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 8012c04:	f06f 0309 	mvn.w	r3, #9
        int32_t angle_low = angle_limited / 10;
 8012c08:	f04f 0b0a 	mov.w	fp, #10
 8012c0c:	fb99 fafb 	sdiv	sl, r9, fp
        int32_t s1 = lv_trigo_sin(angle_low);
 8012c10:	fa0f f08a 	sxth.w	r0, sl
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 8012c14:	fb03 990a 	mla	r9, r3, sl, r9
        int32_t s1 = lv_trigo_sin(angle_low);
 8012c18:	f000 faae 	bl	8013178 <lv_trigo_sin>
        int32_t angle_high = angle_low + 1;
 8012c1c:	f10a 0601 	add.w	r6, sl, #1
        int32_t s1 = lv_trigo_sin(angle_low);
 8012c20:	9001      	str	r0, [sp, #4]
        int32_t s2 = lv_trigo_sin(angle_high);
 8012c22:	b230      	sxth	r0, r6
 8012c24:	f000 faa8 	bl	8013178 <lv_trigo_sin>
 8012c28:	4606      	mov	r6, r0
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 8012c2a:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 8012c2e:	b200      	sxth	r0, r0
 8012c30:	f000 faa2 	bl	8013178 <lv_trigo_sin>
 8012c34:	9000      	str	r0, [sp, #0]
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 8012c36:	f10a 005b 	add.w	r0, sl, #91	; 0x5b
 8012c3a:	b200      	sxth	r0, r0
 8012c3c:	f000 fa9c 	bl	8013178 <lv_trigo_sin>
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8012c40:	9b01      	ldr	r3, [sp, #4]
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8012c42:	4a22      	ldr	r2, [pc, #136]	; (8012ccc <lv_point_transform+0x128>)
        angle_prev = angle;
 8012c44:	4920      	ldr	r1, [pc, #128]	; (8012cc8 <lv_point_transform+0x124>)
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8012c46:	ebab 0c09 	sub.w	ip, fp, r9
 8012c4a:	fb09 f606 	mul.w	r6, r9, r6
 8012c4e:	fb0c 6303 	mla	r3, ip, r3, r6
 8012c52:	fb93 f3fb 	sdiv	r3, r3, fp
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8012c56:	115b      	asrs	r3, r3, #5
 8012c58:	6013      	str	r3, [r2, #0]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8012c5a:	9b00      	ldr	r3, [sp, #0]
        angle_prev = angle;
 8012c5c:	600d      	str	r5, [r1, #0]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8012c5e:	fb09 f000 	mul.w	r0, r9, r0
 8012c62:	fb0c 0003 	mla	r0, ip, r3, r0
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8012c66:	4b1a      	ldr	r3, [pc, #104]	; (8012cd0 <lv_point_transform+0x12c>)
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8012c68:	fb90 fbfb 	sdiv	fp, r0, fp
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8012c6c:	ea4f 106b 	mov.w	r0, fp, asr #5
 8012c70:	6018      	str	r0, [r3, #0]
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8012c72:	4917      	ldr	r1, [pc, #92]	; (8012cd0 <lv_point_transform+0x12c>)
    int32_t x = p->x;
 8012c74:	f9b4 5000 	ldrsh.w	r5, [r4]
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8012c78:	680e      	ldr	r6, [r1, #0]
    int32_t y = p->y;
 8012c7a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8012c7e:	6812      	ldr	r2, [r2, #0]
 8012c80:	fb06 f105 	mul.w	r1, r6, r5
 8012c84:	fb02 1013 	mls	r0, r2, r3, r1
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8012c88:	4373      	muls	r3, r6
    if(zoom == 256) {
 8012c8a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8012c8e:	f8b8 1000 	ldrh.w	r1, [r8]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8012c92:	fb02 3205 	mla	r2, r2, r5, r3
 8012c96:	f8b8 3002 	ldrh.w	r3, [r8, #2]
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 8012c9a:	bf19      	ittee	ne
 8012c9c:	4378      	mulne	r0, r7
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 8012c9e:	4357      	mulne	r7, r2
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8012ca0:	eb01 21a0 	addeq.w	r1, r1, r0, asr #10
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8012ca4:	eb03 27a2 	addeq.w	r7, r3, r2, asr #10
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 8012ca8:	bf1b      	ittet	ne
 8012caa:	eb01 41a0 	addne.w	r1, r1, r0, asr #18
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 8012cae:	eb03 47a7 	addne.w	r7, r3, r7, asr #18
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8012cb2:	8021      	strheq	r1, [r4, #0]
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 8012cb4:	8021      	strhne	r1, [r4, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 8012cb6:	8067      	strh	r7, [r4, #2]
 8012cb8:	e797      	b.n	8012bea <lv_point_transform+0x46>
        if(angle_limited < 0) angle_limited += 3600;
 8012cba:	2d00      	cmp	r5, #0
 8012cbc:	bfb4      	ite	lt
 8012cbe:	f505 6961 	addlt.w	r9, r5, #3600	; 0xe10
 8012cc2:	46a9      	movge	r9, r5
 8012cc4:	e79e      	b.n	8012c04 <lv_point_transform+0x60>
 8012cc6:	bf00      	nop
 8012cc8:	20000010 	.word	0x20000010
 8012ccc:	20000cc8 	.word	0x20000cc8
 8012cd0:	20000cc4 	.word	0x20000cc4

08012cd4 <lv_color_fill>:
        *buf = color;
        buf++;
        px_num--;
    }
#else
    while(px_num > 16) {
 8012cd4:	2a10      	cmp	r2, #16
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	f100 0010 	add.w	r0, r0, #16
 8012cdc:	d803      	bhi.n	8012ce6 <lv_color_fill+0x12>
 8012cde:	441a      	add	r2, r3
        *buf = color;
        buf++;

        px_num -= 16;
    }
    while(px_num) {
 8012ce0:	4293      	cmp	r3, r2
 8012ce2:	d122      	bne.n	8012d2a <lv_color_fill+0x56>
        *buf = color;
        buf++;
        px_num--;
    }
#endif
}
 8012ce4:	4770      	bx	lr
        *buf = color;
 8012ce6:	f800 1c10 	strb.w	r1, [r0, #-16]
        *buf = color;
 8012cea:	f800 1c0f 	strb.w	r1, [r0, #-15]
        *buf = color;
 8012cee:	f800 1c0e 	strb.w	r1, [r0, #-14]
        *buf = color;
 8012cf2:	f800 1c0d 	strb.w	r1, [r0, #-13]
        *buf = color;
 8012cf6:	f800 1c0c 	strb.w	r1, [r0, #-12]
        *buf = color;
 8012cfa:	f800 1c0b 	strb.w	r1, [r0, #-11]
        *buf = color;
 8012cfe:	f800 1c0a 	strb.w	r1, [r0, #-10]
        *buf = color;
 8012d02:	f800 1c09 	strb.w	r1, [r0, #-9]
        *buf = color;
 8012d06:	f800 1c08 	strb.w	r1, [r0, #-8]
        *buf = color;
 8012d0a:	f800 1c07 	strb.w	r1, [r0, #-7]
        *buf = color;
 8012d0e:	f800 1c06 	strb.w	r1, [r0, #-6]
        *buf = color;
 8012d12:	f800 1c05 	strb.w	r1, [r0, #-5]
        *buf = color;
 8012d16:	f800 1c04 	strb.w	r1, [r0, #-4]
        *buf = color;
 8012d1a:	f800 1c03 	strb.w	r1, [r0, #-3]
        *buf = color;
 8012d1e:	f800 1c02 	strb.w	r1, [r0, #-2]
        *buf = color;
 8012d22:	f800 1c01 	strb.w	r1, [r0, #-1]
        px_num -= 16;
 8012d26:	3a10      	subs	r2, #16
 8012d28:	e7d4      	b.n	8012cd4 <lv_color_fill>
        *buf = color;
 8012d2a:	f803 1b01 	strb.w	r1, [r3], #1
        px_num--;
 8012d2e:	e7d7      	b.n	8012ce0 <lv_color_fill+0xc>

08012d30 <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 8012d30:	2812      	cmp	r0, #18
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
 8012d32:	bf96      	itet	ls
 8012d34:	4b01      	ldrls	r3, [pc, #4]	; (8012d3c <lv_palette_main+0xc>)
 8012d36:	2000      	movhi	r0, #0
 8012d38:	5c18      	ldrbls	r0, [r3, r0]

}
 8012d3a:	4770      	bx	lr
 8012d3c:	080202d8 	.word	0x080202d8

08012d40 <_lv_fs_init>:
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 8012d40:	4801      	ldr	r0, [pc, #4]	; (8012d48 <_lv_fs_init+0x8>)
 8012d42:	2104      	movs	r1, #4
 8012d44:	f000 b997 	b.w	8013076 <_lv_ll_init>
 8012d48:	20000dd4 	.word	0x20000dd4

08012d4c <lv_fs_close>:

    return LV_FS_RES_OK;
}

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 8012d4c:	b538      	push	{r3, r4, r5, lr}
 8012d4e:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 8012d50:	6840      	ldr	r0, [r0, #4]
 8012d52:	b1b0      	cbz	r0, 8012d82 <lv_fs_close+0x36>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->close_cb == NULL) {
 8012d54:	68c3      	ldr	r3, [r0, #12]
 8012d56:	b1b3      	cbz	r3, 8012d86 <lv_fs_close+0x3a>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8012d58:	6821      	ldr	r1, [r4, #0]
 8012d5a:	4798      	blx	r3

    if(file_p->drv->cache_size && file_p->cache) {
 8012d5c:	6863      	ldr	r3, [r4, #4]
 8012d5e:	885b      	ldrh	r3, [r3, #2]
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8012d60:	4605      	mov	r5, r0
    if(file_p->drv->cache_size && file_p->cache) {
 8012d62:	b143      	cbz	r3, 8012d76 <lv_fs_close+0x2a>
 8012d64:	68a3      	ldr	r3, [r4, #8]
 8012d66:	b133      	cbz	r3, 8012d76 <lv_fs_close+0x2a>
        if(file_p->cache->buffer) {
 8012d68:	68d8      	ldr	r0, [r3, #12]
 8012d6a:	b108      	cbz	r0, 8012d70 <lv_fs_close+0x24>
            lv_mem_free(file_p->cache->buffer);
 8012d6c:	f000 fafa 	bl	8013364 <lv_mem_free>
        }

        lv_mem_free(file_p->cache);
 8012d70:	68a0      	ldr	r0, [r4, #8]
 8012d72:	f000 faf7 	bl	8013364 <lv_mem_free>
    }

    file_p->file_d = NULL;
 8012d76:	2300      	movs	r3, #0
    file_p->drv    = NULL;
 8012d78:	e9c4 3300 	strd	r3, r3, [r4]
    file_p->cache  = NULL;
 8012d7c:	60a3      	str	r3, [r4, #8]

    return res;
}
 8012d7e:	4628      	mov	r0, r5
 8012d80:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 8012d82:	250b      	movs	r5, #11
 8012d84:	e7fb      	b.n	8012d7e <lv_fs_close+0x32>
        return LV_FS_RES_NOT_IMP;
 8012d86:	2509      	movs	r5, #9
 8012d88:	e7f9      	b.n	8012d7e <lv_fs_close+0x32>

08012d8a <lv_fs_read>:

    return res;
}

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 8012d8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d8e:	4604      	mov	r4, r0
 8012d90:	b087      	sub	sp, #28
 8012d92:	460f      	mov	r7, r1
 8012d94:	4615      	mov	r5, r2
    if(br != NULL) *br = 0;
 8012d96:	4699      	mov	r9, r3
 8012d98:	b113      	cbz	r3, 8012da0 <lv_fs_read+0x16>
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	f8c9 3000 	str.w	r3, [r9]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8012da0:	6860      	ldr	r0, [r4, #4]
 8012da2:	2800      	cmp	r0, #0
 8012da4:	f000 80ad 	beq.w	8012f02 <lv_fs_read+0x178>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8012da8:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8012dac:	f1ba 0f00 	cmp.w	sl, #0
 8012db0:	f000 80aa 	beq.w	8012f08 <lv_fs_read+0x17e>

    uint32_t br_tmp = 0;
    lv_fs_res_t res;

    if(file_p->drv->cache_size) {
 8012db4:	8843      	ldrh	r3, [r0, #2]
    uint32_t br_tmp = 0;
 8012db6:	f04f 0b00 	mov.w	fp, #0
 8012dba:	f8cd b010 	str.w	fp, [sp, #16]
    if(file_p->drv->cache_size) {
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	f000 8097 	beq.w	8012ef2 <lv_fs_read+0x168>
    uint32_t file_position = file_p->cache->file_position;
 8012dc4:	68a2      	ldr	r2, [r4, #8]
 8012dc6:	6896      	ldr	r6, [r2, #8]
    uint32_t start = file_p->cache->start;
 8012dc8:	6811      	ldr	r1, [r2, #0]
    char * buffer = file_p->cache->buffer;
 8012dca:	f8d2 800c 	ldr.w	r8, [r2, #12]
    if(start <= file_position && file_position < end) {
 8012dce:	428e      	cmp	r6, r1
 8012dd0:	d35a      	bcc.n	8012e88 <lv_fs_read+0xfe>
    uint32_t end = file_p->cache->end;
 8012dd2:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if(start <= file_position && file_position < end) {
 8012dd6:	4566      	cmp	r6, ip
 8012dd8:	d256      	bcs.n	8012e88 <lv_fs_read+0xfe>
        uint16_t buffer_offset = file_position - start;
 8012dda:	1a71      	subs	r1, r6, r1
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 8012ddc:	b289      	uxth	r1, r1
 8012dde:	ebac 0606 	sub.w	r6, ip, r6
 8012de2:	1a5a      	subs	r2, r3, r1
 8012de4:	4296      	cmp	r6, r2
 8012de6:	bf28      	it	cs
 8012de8:	4616      	movcs	r6, r2
        if(btr <= buffer_remaining_length) {
 8012dea:	42b5      	cmp	r5, r6
            lv_memcpy(buf, buffer + buffer_offset, btr);
 8012dec:	4441      	add	r1, r8
        if(btr <= buffer_remaining_length) {
 8012dee:	d80c      	bhi.n	8012e0a <lv_fs_read+0x80>
            lv_memcpy(buf, buffer + buffer_offset, btr);
 8012df0:	462a      	mov	r2, r5
 8012df2:	4638      	mov	r0, r7
 8012df4:	f000 fb62 	bl	80134bc <lv_memcpy>
            *br = btr;
 8012df8:	9504      	str	r5, [sp, #16]
        file_p->cache->file_position += *br;
 8012dfa:	68a2      	ldr	r2, [r4, #8]
 8012dfc:	9904      	ldr	r1, [sp, #16]
 8012dfe:	6893      	ldr	r3, [r2, #8]
 8012e00:	440b      	add	r3, r1
 8012e02:	6093      	str	r3, [r2, #8]
 8012e04:	f04f 0b00 	mov.w	fp, #0
 8012e08:	e01f      	b.n	8012e4a <lv_fs_read+0xc0>
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 8012e0a:	4632      	mov	r2, r6
 8012e0c:	4638      	mov	r0, r7
 8012e0e:	9302      	str	r3, [sp, #8]
 8012e10:	f000 fb54 	bl	80134bc <lv_memcpy>
            if(btr > buffer_size) {
 8012e14:	9b02      	ldr	r3, [sp, #8]
 8012e16:	6860      	ldr	r0, [r4, #4]
            uint32_t bytes_read_to_buffer = 0;
 8012e18:	f8cd b014 	str.w	fp, [sp, #20]
            if(btr > buffer_size) {
 8012e1c:	aa05      	add	r2, sp, #20
 8012e1e:	429d      	cmp	r5, r3
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 8012e20:	eba5 0a06 	sub.w	sl, r5, r6
 8012e24:	4437      	add	r7, r6
 8012e26:	9200      	str	r2, [sp, #0]
            if(btr > buffer_size) {
 8012e28:	d919      	bls.n	8012e5e <lv_fs_read+0xd4>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 8012e2a:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8012e2e:	6821      	ldr	r1, [r4, #0]
 8012e30:	4653      	mov	r3, sl
 8012e32:	463a      	mov	r2, r7
 8012e34:	47c0      	blx	r8
 8012e36:	4683      	mov	fp, r0
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 8012e38:	9b05      	ldr	r3, [sp, #20]
 8012e3a:	441e      	add	r6, r3
 8012e3c:	42ae      	cmp	r6, r5
 8012e3e:	bf94      	ite	ls
 8012e40:	9604      	strls	r6, [sp, #16]
 8012e42:	9504      	strhi	r5, [sp, #16]
    if(res == LV_FS_RES_OK) {
 8012e44:	f1bb 0f00 	cmp.w	fp, #0
 8012e48:	d0d7      	beq.n	8012dfa <lv_fs_read+0x70>
    }
    else {
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
    }

    if(br != NULL) *br = br_tmp;
 8012e4a:	f1b9 0f00 	cmp.w	r9, #0
 8012e4e:	d002      	beq.n	8012e56 <lv_fs_read+0xcc>
 8012e50:	9b04      	ldr	r3, [sp, #16]
 8012e52:	f8c9 3000 	str.w	r3, [r9]

    return res;
}
 8012e56:	4658      	mov	r0, fp
 8012e58:	b007      	add	sp, #28
 8012e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8012e5e:	6821      	ldr	r1, [r4, #0]
 8012e60:	f8d0 b010 	ldr.w	fp, [r0, #16]
 8012e64:	4642      	mov	r2, r8
 8012e66:	47d8      	blx	fp
                file_p->cache->start = file_p->cache->end;
 8012e68:	68a1      	ldr	r1, [r4, #8]
 8012e6a:	684b      	ldr	r3, [r1, #4]
 8012e6c:	600b      	str	r3, [r1, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8012e6e:	9a05      	ldr	r2, [sp, #20]
                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8012e70:	4552      	cmp	r2, sl
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8012e72:	4413      	add	r3, r2
                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8012e74:	bf28      	it	cs
 8012e76:	4652      	movcs	r2, sl
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8012e78:	4683      	mov	fp, r0
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8012e7a:	604b      	str	r3, [r1, #4]
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 8012e7c:	b292      	uxth	r2, r2
 8012e7e:	4641      	mov	r1, r8
 8012e80:	4638      	mov	r0, r7
 8012e82:	f000 fb1b 	bl	80134bc <lv_memcpy>
 8012e86:	e7d7      	b.n	8012e38 <lv_fs_read+0xae>
        if(btr > buffer_size) {
 8012e88:	429d      	cmp	r5, r3
 8012e8a:	d907      	bls.n	8012e9c <lv_fs_read+0x112>
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 8012e8c:	ab04      	add	r3, sp, #16
 8012e8e:	9300      	str	r3, [sp, #0]
 8012e90:	6821      	ldr	r1, [r4, #0]
 8012e92:	462b      	mov	r3, r5
 8012e94:	463a      	mov	r2, r7
 8012e96:	47d0      	blx	sl
 8012e98:	4683      	mov	fp, r0
 8012e9a:	e7d3      	b.n	8012e44 <lv_fs_read+0xba>
            if(buffer == NULL) {
 8012e9c:	f1b8 0f00 	cmp.w	r8, #0
 8012ea0:	d10e      	bne.n	8012ec0 <lv_fs_read+0x136>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	9203      	str	r2, [sp, #12]
 8012ea6:	9302      	str	r3, [sp, #8]
 8012ea8:	f000 fa3e 	bl	8013328 <lv_mem_alloc>
 8012eac:	9a03      	ldr	r2, [sp, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 8012eae:	9b02      	ldr	r3, [sp, #8]
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 8012eb0:	60d0      	str	r0, [r2, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 8012eb2:	68a2      	ldr	r2, [r4, #8]
 8012eb4:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8012eb8:	f1b8 0f00 	cmp.w	r8, #0
 8012ebc:	d100      	bne.n	8012ec0 <lv_fs_read+0x136>
 8012ebe:	e7fe      	b.n	8012ebe <lv_fs_read+0x134>
            uint32_t bytes_read_to_buffer = 0;
 8012ec0:	2200      	movs	r2, #0
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8012ec2:	6860      	ldr	r0, [r4, #4]
            uint32_t bytes_read_to_buffer = 0;
 8012ec4:	9205      	str	r2, [sp, #20]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8012ec6:	aa05      	add	r2, sp, #20
 8012ec8:	9200      	str	r2, [sp, #0]
 8012eca:	6821      	ldr	r1, [r4, #0]
 8012ecc:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8012ed0:	4642      	mov	r2, r8
 8012ed2:	47d0      	blx	sl
            file_p->cache->start = file_position;
 8012ed4:	68a3      	ldr	r3, [r4, #8]
 8012ed6:	601e      	str	r6, [r3, #0]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8012ed8:	9a05      	ldr	r2, [sp, #20]
 8012eda:	4416      	add	r6, r2
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8012edc:	42aa      	cmp	r2, r5
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8012ede:	4683      	mov	fp, r0
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8012ee0:	bf28      	it	cs
 8012ee2:	462a      	movcs	r2, r5
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8012ee4:	605e      	str	r6, [r3, #4]
            lv_memcpy(buf, buffer, *br);
 8012ee6:	4641      	mov	r1, r8
 8012ee8:	4638      	mov	r0, r7
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8012eea:	9204      	str	r2, [sp, #16]
            lv_memcpy(buf, buffer, *br);
 8012eec:	f000 fae6 	bl	80134bc <lv_memcpy>
 8012ef0:	e7a8      	b.n	8012e44 <lv_fs_read+0xba>
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8012ef2:	ab04      	add	r3, sp, #16
 8012ef4:	9300      	str	r3, [sp, #0]
 8012ef6:	6821      	ldr	r1, [r4, #0]
 8012ef8:	462b      	mov	r3, r5
 8012efa:	463a      	mov	r2, r7
 8012efc:	47d0      	blx	sl
 8012efe:	4683      	mov	fp, r0
 8012f00:	e7a3      	b.n	8012e4a <lv_fs_read+0xc0>
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8012f02:	f04f 0b0b 	mov.w	fp, #11
 8012f06:	e7a6      	b.n	8012e56 <lv_fs_read+0xcc>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8012f08:	f04f 0b09 	mov.w	fp, #9
 8012f0c:	e7a3      	b.n	8012e56 <lv_fs_read+0xcc>

08012f0e <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 8012f0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f10:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 8012f12:	6840      	ldr	r0, [r0, #4]
{
 8012f14:	4613      	mov	r3, r2
    if(file_p->drv == NULL) {
 8012f16:	2800      	cmp	r0, #0
 8012f18:	d036      	beq.n	8012f88 <lv_fs_seek+0x7a>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->seek_cb == NULL) {
 8012f1a:	6985      	ldr	r5, [r0, #24]
 8012f1c:	2d00      	cmp	r5, #0
 8012f1e:	d035      	beq.n	8012f8c <lv_fs_seek+0x7e>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = LV_FS_RES_OK;
    if(file_p->drv->cache_size) {
 8012f20:	8842      	ldrh	r2, [r0, #2]
 8012f22:	b17a      	cbz	r2, 8012f44 <lv_fs_seek+0x36>
        switch(whence) {
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d00f      	beq.n	8012f48 <lv_fs_seek+0x3a>
 8012f28:	2b02      	cmp	r3, #2
 8012f2a:	d01e      	beq.n	8012f6a <lv_fs_seek+0x5c>
 8012f2c:	b93b      	cbnz	r3, 8012f3e <lv_fs_seek+0x30>
            case LV_FS_SEEK_SET: {
                    file_p->cache->file_position = pos;
 8012f2e:	68a3      	ldr	r3, [r4, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8012f30:	681a      	ldr	r2, [r3, #0]
                    file_p->cache->file_position = pos;
 8012f32:	6099      	str	r1, [r3, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8012f34:	428a      	cmp	r2, r1
 8012f36:	d804      	bhi.n	8012f42 <lv_fs_seek+0x34>
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	428b      	cmp	r3, r1
 8012f3c:	d301      	bcc.n	8012f42 <lv_fs_seek+0x34>
        switch(whence) {
 8012f3e:	2000      	movs	r0, #0
 8012f40:	e020      	b.n	8012f84 <lv_fs_seek+0x76>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8012f42:	2300      	movs	r3, #0
                    break;
                }
        }
    }
    else {
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8012f44:	460a      	mov	r2, r1
 8012f46:	e00a      	b.n	8012f5e <lv_fs_seek+0x50>
                    file_p->cache->file_position += pos;
 8012f48:	68a3      	ldr	r3, [r4, #8]
 8012f4a:	689a      	ldr	r2, [r3, #8]
 8012f4c:	440a      	add	r2, r1
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8012f4e:	6819      	ldr	r1, [r3, #0]
                    file_p->cache->file_position += pos;
 8012f50:	609a      	str	r2, [r3, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8012f52:	428a      	cmp	r2, r1
 8012f54:	d302      	bcc.n	8012f5c <lv_fs_seek+0x4e>
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	429a      	cmp	r2, r3
 8012f5a:	d9f0      	bls.n	8012f3e <lv_fs_seek+0x30>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8012f5c:	2300      	movs	r3, #0
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8012f5e:	6821      	ldr	r1, [r4, #0]
 8012f60:	46ac      	mov	ip, r5
    }

    return res;
}
 8012f62:	b003      	add	sp, #12
 8012f64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8012f68:	4760      	bx	ip
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8012f6a:	460a      	mov	r2, r1
 8012f6c:	6821      	ldr	r1, [r4, #0]
 8012f6e:	47a8      	blx	r5
                    if(res == LV_FS_RES_OK) {
 8012f70:	b940      	cbnz	r0, 8012f84 <lv_fs_seek+0x76>
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 8012f72:	6860      	ldr	r0, [r4, #4]
 8012f74:	6821      	ldr	r1, [r4, #0]
 8012f76:	69c3      	ldr	r3, [r0, #28]
 8012f78:	aa01      	add	r2, sp, #4
 8012f7a:	4798      	blx	r3
                        if(res == LV_FS_RES_OK) {
 8012f7c:	b910      	cbnz	r0, 8012f84 <lv_fs_seek+0x76>
                            file_p->cache->file_position = tmp_position;
 8012f7e:	68a3      	ldr	r3, [r4, #8]
 8012f80:	9a01      	ldr	r2, [sp, #4]
 8012f82:	609a      	str	r2, [r3, #8]
}
 8012f84:	b003      	add	sp, #12
 8012f86:	bd30      	pop	{r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 8012f88:	200b      	movs	r0, #11
 8012f8a:	e7fb      	b.n	8012f84 <lv_fs_seek+0x76>
        return LV_FS_RES_NOT_IMP;
 8012f8c:	2009      	movs	r0, #9
 8012f8e:	e7f9      	b.n	8012f84 <lv_fs_seek+0x76>

08012f90 <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 8012f90:	b538      	push	{r3, r4, r5, lr}
 8012f92:	4604      	mov	r4, r0
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8012f94:	4808      	ldr	r0, [pc, #32]	; (8012fb8 <lv_fs_get_drv+0x28>)
 8012f96:	4d08      	ldr	r5, [pc, #32]	; (8012fb8 <lv_fs_get_drv+0x28>)
 8012f98:	f000 f8d5 	bl	8013146 <_lv_ll_get_head>
 8012f9c:	4601      	mov	r1, r0
 8012f9e:	b909      	cbnz	r1, 8012fa4 <lv_fs_get_drv+0x14>
        if((*drv)->letter == letter) {
            return *drv;
        }
    }

    return NULL;
 8012fa0:	4608      	mov	r0, r1
}
 8012fa2:	bd38      	pop	{r3, r4, r5, pc}
        if((*drv)->letter == letter) {
 8012fa4:	6808      	ldr	r0, [r1, #0]
 8012fa6:	7803      	ldrb	r3, [r0, #0]
 8012fa8:	42a3      	cmp	r3, r4
 8012faa:	d0fa      	beq.n	8012fa2 <lv_fs_get_drv+0x12>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8012fac:	4628      	mov	r0, r5
 8012fae:	f000 f8d0 	bl	8013152 <_lv_ll_get_next>
 8012fb2:	4601      	mov	r1, r0
 8012fb4:	e7f3      	b.n	8012f9e <lv_fs_get_drv+0xe>
 8012fb6:	bf00      	nop
 8012fb8:	20000dd4 	.word	0x20000dd4

08012fbc <lv_fs_open>:
{
 8012fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fbe:	4606      	mov	r6, r0
 8012fc0:	4617      	mov	r7, r2
    if(path == NULL) {
 8012fc2:	460c      	mov	r4, r1
 8012fc4:	2900      	cmp	r1, #0
 8012fc6:	d031      	beq.n	801302c <lv_fs_open+0x70>
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 8012fc8:	7808      	ldrb	r0, [r1, #0]
 8012fca:	f7ff ffe1 	bl	8012f90 <lv_fs_get_drv>
    if(drv == NULL) {
 8012fce:	4605      	mov	r5, r0
 8012fd0:	b370      	cbz	r0, 8013030 <lv_fs_open+0x74>
    if(drv->ready_cb) {
 8012fd2:	6843      	ldr	r3, [r0, #4]
 8012fd4:	b91b      	cbnz	r3, 8012fde <lv_fs_open+0x22>
    if(drv->open_cb == NULL) {
 8012fd6:	68ab      	ldr	r3, [r5, #8]
 8012fd8:	b933      	cbnz	r3, 8012fe8 <lv_fs_open+0x2c>
        return LV_FS_RES_NOT_IMP;
 8012fda:	2009      	movs	r0, #9
 8012fdc:	e003      	b.n	8012fe6 <lv_fs_open+0x2a>
        if(drv->ready_cb(drv) == false) {
 8012fde:	4798      	blx	r3
 8012fe0:	2800      	cmp	r0, #0
 8012fe2:	d1f8      	bne.n	8012fd6 <lv_fs_open+0x1a>
            return LV_FS_RES_HW_ERR;
 8012fe4:	2001      	movs	r0, #1
}
 8012fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
    path++; /*Ignore the driver letter*/
    if(*path == ':') path++;
 8012fe8:	7862      	ldrb	r2, [r4, #1]
 8012fea:	2a3a      	cmp	r2, #58	; 0x3a
    path++; /*Ignore the driver letter*/
 8012fec:	bf14      	ite	ne
 8012fee:	1c61      	addne	r1, r4, #1
    if(*path == ':') path++;
 8012ff0:	1ca1      	addeq	r1, r4, #2
    void * file_d = drv->open_cb(drv, real_path, mode);
 8012ff2:	463a      	mov	r2, r7
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	4798      	blx	r3
    if(file_d == NULL || file_d == (void *)(-1)) {
 8012ff8:	1e43      	subs	r3, r0, #1
 8012ffa:	3303      	adds	r3, #3
 8012ffc:	d81a      	bhi.n	8013034 <lv_fs_open+0x78>
    file_p->file_d = file_d;
 8012ffe:	e9c6 0500 	strd	r0, r5, [r6]
    if(drv->cache_size) {
 8013002:	8868      	ldrh	r0, [r5, #2]
 8013004:	2800      	cmp	r0, #0
 8013006:	d0ee      	beq.n	8012fe6 <lv_fs_open+0x2a>
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 8013008:	2010      	movs	r0, #16
 801300a:	f000 f98d 	bl	8013328 <lv_mem_alloc>
 801300e:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 8013010:	b900      	cbnz	r0, 8013014 <lv_fs_open+0x58>
 8013012:	e7fe      	b.n	8013012 <lv_fs_open+0x56>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 8013014:	2110      	movs	r1, #16
 8013016:	f000 fb70 	bl	80136fa <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 801301a:	68b3      	ldr	r3, [r6, #8]
        file_p->cache->end = UINT32_MAX - 1;
 801301c:	f04f 31ff 	mov.w	r1, #4294967295
 8013020:	f06f 0201 	mvn.w	r2, #1
 8013024:	e9c3 1200 	strd	r1, r2, [r3]
    return LV_FS_RES_OK;
 8013028:	2000      	movs	r0, #0
 801302a:	e7dc      	b.n	8012fe6 <lv_fs_open+0x2a>
        return LV_FS_RES_INV_PARAM;
 801302c:	200b      	movs	r0, #11
 801302e:	e7da      	b.n	8012fe6 <lv_fs_open+0x2a>
        return LV_FS_RES_NOT_EX;
 8013030:	2003      	movs	r0, #3
 8013032:	e7d8      	b.n	8012fe6 <lv_fs_open+0x2a>
        return LV_FS_RES_UNKNOWN;
 8013034:	200c      	movs	r0, #12
 8013036:	e7d6      	b.n	8012fe6 <lv_fs_open+0x2a>

08013038 <lv_fs_get_ext>:
{
 8013038:	b510      	push	{r4, lr}
 801303a:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 801303c:	f7ed f8d2 	bl	80001e4 <strlen>
 8013040:	b908      	cbnz	r0, 8013046 <lv_fs_get_ext+0xe>
            return ""; /*No extension if a '\' or '/' found*/
 8013042:	4807      	ldr	r0, [pc, #28]	; (8013060 <lv_fs_get_ext+0x28>)
 8013044:	e004      	b.n	8013050 <lv_fs_get_ext+0x18>
        if(fn[i] == '.') {
 8013046:	5c23      	ldrb	r3, [r4, r0]
 8013048:	2b2e      	cmp	r3, #46	; 0x2e
 801304a:	d102      	bne.n	8013052 <lv_fs_get_ext+0x1a>
            return &fn[i + 1];
 801304c:	3001      	adds	r0, #1
 801304e:	4420      	add	r0, r4
}
 8013050:	bd10      	pop	{r4, pc}
        else if(fn[i] == '/' || fn[i] == '\\') {
 8013052:	2b2f      	cmp	r3, #47	; 0x2f
 8013054:	d0f5      	beq.n	8013042 <lv_fs_get_ext+0xa>
 8013056:	2b5c      	cmp	r3, #92	; 0x5c
 8013058:	d0f3      	beq.n	8013042 <lv_fs_get_ext+0xa>
    for(i = strlen(fn); i > 0; i--) {
 801305a:	3801      	subs	r0, #1
 801305c:	e7f0      	b.n	8013040 <lv_fs_get_ext+0x8>
 801305e:	bf00      	nop
 8013060:	08020471 	.word	0x08020471

08013064 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8013064:	b109      	cbz	r1, 801306a <node_set_prev+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 8013066:	6803      	ldr	r3, [r0, #0]
 8013068:	50ca      	str	r2, [r1, r3]
}
 801306a:	4770      	bx	lr

0801306c <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801306c:	b111      	cbz	r1, 8013074 <node_set_next+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 801306e:	6803      	ldr	r3, [r0, #0]
 8013070:	4419      	add	r1, r3
 8013072:	604a      	str	r2, [r1, #4]
}
 8013074:	4770      	bx	lr

08013076 <_lv_ll_init>:
    node_size = (node_size + 3) & (~0x3);
 8013076:	3103      	adds	r1, #3
    ll_p->head = NULL;
 8013078:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
 801307a:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
 801307e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
 8013082:	6001      	str	r1, [r0, #0]
}
 8013084:	4770      	bx	lr

08013086 <_lv_ll_ins_head>:
{
 8013086:	b538      	push	{r3, r4, r5, lr}
 8013088:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801308a:	6800      	ldr	r0, [r0, #0]
 801308c:	3008      	adds	r0, #8
 801308e:	f000 f94b 	bl	8013328 <lv_mem_alloc>
    if(n_new != NULL) {
 8013092:	4605      	mov	r5, r0
 8013094:	b180      	cbz	r0, 80130b8 <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8013096:	4601      	mov	r1, r0
 8013098:	2200      	movs	r2, #0
 801309a:	4620      	mov	r0, r4
 801309c:	f7ff ffe2 	bl	8013064 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 80130a0:	6862      	ldr	r2, [r4, #4]
 80130a2:	f7ff ffe3 	bl	801306c <node_set_next>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 80130a6:	6861      	ldr	r1, [r4, #4]
 80130a8:	b111      	cbz	r1, 80130b0 <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
 80130aa:	462a      	mov	r2, r5
 80130ac:	f7ff ffda 	bl	8013064 <node_set_prev>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80130b0:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 80130b2:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80130b4:	b903      	cbnz	r3, 80130b8 <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
 80130b6:	60a5      	str	r5, [r4, #8]
}
 80130b8:	4628      	mov	r0, r5
 80130ba:	bd38      	pop	{r3, r4, r5, pc}

080130bc <_lv_ll_ins_tail>:
{
 80130bc:	b538      	push	{r3, r4, r5, lr}
 80130be:	4605      	mov	r5, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80130c0:	6800      	ldr	r0, [r0, #0]
 80130c2:	3008      	adds	r0, #8
 80130c4:	f000 f930 	bl	8013328 <lv_mem_alloc>
    if(n_new != NULL) {
 80130c8:	4604      	mov	r4, r0
 80130ca:	b188      	cbz	r0, 80130f0 <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 80130cc:	4601      	mov	r1, r0
 80130ce:	2200      	movs	r2, #0
 80130d0:	4628      	mov	r0, r5
 80130d2:	f7ff ffcb 	bl	801306c <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 80130d6:	4621      	mov	r1, r4
 80130d8:	68aa      	ldr	r2, [r5, #8]
 80130da:	f7ff ffc3 	bl	8013064 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 80130de:	68a9      	ldr	r1, [r5, #8]
 80130e0:	b111      	cbz	r1, 80130e8 <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
 80130e2:	4622      	mov	r2, r4
 80130e4:	f7ff ffc2 	bl	801306c <node_set_next>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 80130e8:	686b      	ldr	r3, [r5, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 80130ea:	60ac      	str	r4, [r5, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 80130ec:	b903      	cbnz	r3, 80130f0 <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
 80130ee:	606c      	str	r4, [r5, #4]
}
 80130f0:	4620      	mov	r0, r4
 80130f2:	bd38      	pop	{r3, r4, r5, pc}

080130f4 <_lv_ll_remove>:
{
 80130f4:	b538      	push	{r3, r4, r5, lr}
 80130f6:	460b      	mov	r3, r1
    if(ll_p == NULL) return;
 80130f8:	b140      	cbz	r0, 801310c <_lv_ll_remove+0x18>
    if(_lv_ll_get_head(ll_p) == node_p) {
 80130fa:	e9d0 1400 	ldrd	r1, r4, [r0]
 80130fe:	42a3      	cmp	r3, r4
 8013100:	d10a      	bne.n	8013118 <_lv_ll_remove+0x24>
    return *((lv_ll_node_t **)n_act_d);
 8013102:	440b      	add	r3, r1
 8013104:	6859      	ldr	r1, [r3, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8013106:	6041      	str	r1, [r0, #4]
        if(ll_p->head == NULL) {
 8013108:	b909      	cbnz	r1, 801310e <_lv_ll_remove+0x1a>
            ll_p->tail = NULL;
 801310a:	6081      	str	r1, [r0, #8]
}
 801310c:	bd38      	pop	{r3, r4, r5, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 801310e:	2200      	movs	r2, #0
}
 8013110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        node_set_prev(ll_p, n_next, n_prev);
 8013114:	f7ff bfa6 	b.w	8013064 <node_set_prev>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8013118:	6885      	ldr	r5, [r0, #8]
    return *((lv_ll_node_t **)n_act_d);
 801311a:	585c      	ldr	r4, [r3, r1]
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 801311c:	42ab      	cmp	r3, r5
 801311e:	d109      	bne.n	8013134 <_lv_ll_remove+0x40>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8013120:	6084      	str	r4, [r0, #8]
        if(ll_p->tail == NULL) {
 8013122:	b90c      	cbnz	r4, 8013128 <_lv_ll_remove+0x34>
            ll_p->head = NULL;
 8013124:	6044      	str	r4, [r0, #4]
 8013126:	e7f1      	b.n	801310c <_lv_ll_remove+0x18>
            node_set_next(ll_p, ll_p->tail, NULL);
 8013128:	4621      	mov	r1, r4
 801312a:	2200      	movs	r2, #0
}
 801312c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 8013130:	f7ff bf9c 	b.w	801306c <node_set_next>
    return *((lv_ll_node_t **)n_act_d);
 8013134:	440b      	add	r3, r1
        node_set_next(ll_p, n_prev, n_next);
 8013136:	4621      	mov	r1, r4
    return *((lv_ll_node_t **)n_act_d);
 8013138:	685d      	ldr	r5, [r3, #4]
        node_set_next(ll_p, n_prev, n_next);
 801313a:	462a      	mov	r2, r5
 801313c:	f7ff ff96 	bl	801306c <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 8013140:	4622      	mov	r2, r4
 8013142:	4629      	mov	r1, r5
 8013144:	e7e4      	b.n	8013110 <_lv_ll_remove+0x1c>

08013146 <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 8013146:	b100      	cbz	r0, 801314a <_lv_ll_get_head+0x4>
    return ll_p->head;
 8013148:	6840      	ldr	r0, [r0, #4]
}
 801314a:	4770      	bx	lr

0801314c <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 801314c:	b100      	cbz	r0, 8013150 <_lv_ll_get_tail+0x4>
    return ll_p->tail;
 801314e:	6880      	ldr	r0, [r0, #8]
}
 8013150:	4770      	bx	lr

08013152 <_lv_ll_get_next>:
    return *((lv_ll_node_t **)n_act_d);
 8013152:	6803      	ldr	r3, [r0, #0]
 8013154:	4419      	add	r1, r3
}
 8013156:	6848      	ldr	r0, [r1, #4]
 8013158:	4770      	bx	lr

0801315a <_lv_ll_get_prev>:
    return *((lv_ll_node_t **)n_act_d);
 801315a:	6803      	ldr	r3, [r0, #0]
}
 801315c:	58c8      	ldr	r0, [r1, r3]
 801315e:	4770      	bx	lr

08013160 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 8013160:	b130      	cbz	r0, 8013170 <_lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8013162:	6843      	ldr	r3, [r0, #4]
 8013164:	b933      	cbnz	r3, 8013174 <_lv_ll_is_empty+0x14>
 8013166:	6880      	ldr	r0, [r0, #8]
 8013168:	fab0 f080 	clz	r0, r0
 801316c:	0940      	lsrs	r0, r0, #5
 801316e:	4770      	bx	lr
    if(ll_p == NULL) return true;
 8013170:	2001      	movs	r0, #1
 8013172:	4770      	bx	lr
    return false;
 8013174:	2000      	movs	r0, #0
}
 8013176:	4770      	bx	lr

08013178 <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 8013178:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801317c:	fb90 f2f3 	sdiv	r2, r0, r3
 8013180:	fb02 0013 	mls	r0, r2, r3, r0
 8013184:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 8013186:	2800      	cmp	r0, #0
 8013188:	bfbc      	itt	lt
 801318a:	18c0      	addlt	r0, r0, r3
 801318c:	b200      	sxthlt	r0, r0

    if(angle < 90) {
 801318e:	2859      	cmp	r0, #89	; 0x59
 8013190:	4b0e      	ldr	r3, [pc, #56]	; (80131cc <lv_trigo_sin+0x54>)
 8013192:	dc02      	bgt.n	801319a <lv_trigo_sin+0x22>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
 8013194:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8013198:	4770      	bx	lr
    else if(angle >= 90 && angle < 180) {
 801319a:	b280      	uxth	r0, r0
 801319c:	f1a0 025a 	sub.w	r2, r0, #90	; 0x5a
 80131a0:	2a59      	cmp	r2, #89	; 0x59
 80131a2:	d803      	bhi.n	80131ac <lv_trigo_sin+0x34>
        angle = 180 - angle;
 80131a4:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
 80131a8:	b280      	uxth	r0, r0
 80131aa:	e7f3      	b.n	8013194 <lv_trigo_sin+0x1c>
    }
    else if(angle >= 180 && angle < 270) {
 80131ac:	f1a0 02b4 	sub.w	r2, r0, #180	; 0xb4
 80131b0:	b292      	uxth	r2, r2
 80131b2:	2a59      	cmp	r2, #89	; 0x59
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 80131b4:	bf85      	ittet	hi
 80131b6:	f5c0 70b4 	rsbhi	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
 80131ba:	b280      	uxthhi	r0, r0
        ret   = -sin0_90_table[angle];
 80131bc:	f833 0012 	ldrhls.w	r0, [r3, r2, lsl #1]
        ret   = -sin0_90_table[angle];
 80131c0:	f833 0010 	ldrhhi.w	r0, [r3, r0, lsl #1]
 80131c4:	4240      	negs	r0, r0
 80131c6:	b200      	sxth	r0, r0
    }

    return ret;
}
 80131c8:	4770      	bx	lr
 80131ca:	bf00      	nop
 80131cc:	080202ec 	.word	0x080202ec

080131d0 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 80131d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t t_rem  = 1024 - t;
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
    uint32_t t2     = (t * t) >> 10;
 80131d2:	fb00 f600 	mul.w	r6, r0, r0
    uint32_t t_rem  = 1024 - t;
 80131d6:	f5c0 6480 	rsb	r4, r0, #1024	; 0x400
    uint32_t t2     = (t * t) >> 10;
 80131da:	0ab6      	lsrs	r6, r6, #10
    uint32_t t3     = (t2 * t) >> 10;

    uint32_t v1 = (t_rem3 * u0) >> 10;
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
    uint32_t v4 = (t3 * u3) >> 10;
 80131dc:	9f05      	ldr	r7, [sp, #20]
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 80131de:	fb04 f504 	mul.w	r5, r4, r4
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 80131e2:	4342      	muls	r2, r0
    uint32_t t3     = (t2 * t) >> 10;
 80131e4:	4370      	muls	r0, r6
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 80131e6:	0aad      	lsrs	r5, r5, #10
    uint32_t t3     = (t2 * t) >> 10;
 80131e8:	0a80      	lsrs	r0, r0, #10
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 80131ea:	436a      	muls	r2, r5
    uint32_t v4 = (t3 * u3) >> 10;
 80131ec:	4378      	muls	r0, r7
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 80131ee:	4363      	muls	r3, r4
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 80131f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 80131f4:	4373      	muls	r3, r6
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 80131f6:	436c      	muls	r4, r5
    uint32_t v4 = (t3 * u3) >> 10;
 80131f8:	0a80      	lsrs	r0, r0, #10

    return v1 + v2 + v3 + v4;
 80131fa:	eb00 5012 	add.w	r0, r0, r2, lsr #20
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 80131fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8013202:	0aa4      	lsrs	r4, r4, #10
    return v1 + v2 + v3 + v4;
 8013204:	eb00 5013 	add.w	r0, r0, r3, lsr #20
    uint32_t v1 = (t_rem3 * u0) >> 10;
 8013208:	4361      	muls	r1, r4
}
 801320a:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 801320e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013210 <lv_atan2>:
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
    if(x < 0) {
 8013210:	2800      	cmp	r0, #0
        negflag += 0x01;    // x flag bit
        x = (0 - x);        // is now +
 8013212:	bfba      	itte	lt
 8013214:	4240      	neglt	r0, r0
        negflag += 0x01;    // x flag bit
 8013216:	2301      	movlt	r3, #1
    negflag = 0;
 8013218:	2300      	movge	r3, #0
    }
    ux = x;                // copy to unsigned var before multiply
    if(y < 0) {
 801321a:	2900      	cmp	r1, #0
        negflag += 0x02;    // y flag bit
        y = (0 - y);        // is now +
 801321c:	bfbe      	ittt	lt
 801321e:	4249      	neglt	r1, r1
        negflag += 0x02;    // y flag bit
 8013220:	3302      	addlt	r3, #2
 8013222:	b2db      	uxtblt	r3, r3
    }
    uy = y;                // copy to unsigned var before multiply

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 8013224:	222d      	movs	r2, #45	; 0x2d
 8013226:	4288      	cmp	r0, r1
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 8013228:	bf89      	itett	hi
 801322a:	4351      	mulhi	r1, r2
        negflag += 0x10;    // octant flag bit
    }
    else {
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 801322c:	4350      	mulls	r0, r2
        negflag += 0x10;    // octant flag bit
 801322e:	3310      	addhi	r3, #16
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 8013230:	fbb1 f1f0 	udivhi	r1, r1, r0
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 8013234:	bf98      	it	ls
 8013236:	fbb0 f1f1 	udivls	r1, r0, r1
    }

    // 2. Compensate for the 4 degree error curve
    comp = 0;
    tempdegree = degree;    // use an unsigned char for speed!
 801323a:	b2ca      	uxtb	r2, r1
        negflag += 0x10;    // octant flag bit
 801323c:	bf88      	it	hi
 801323e:	b2db      	uxtbhi	r3, r3
    if(tempdegree > 22) {    // if top half of range
 8013240:	2a16      	cmp	r2, #22
 8013242:	d90f      	bls.n	8013264 <lv_atan2+0x54>
        if(tempdegree <= 44) comp++;
 8013244:	2a2c      	cmp	r2, #44	; 0x2c
 8013246:	bf94      	ite	ls
 8013248:	2001      	movls	r0, #1
 801324a:	2000      	movhi	r0, #0
        if(tempdegree <= 41) comp++;
 801324c:	2a29      	cmp	r2, #41	; 0x29
 801324e:	bf98      	it	ls
 8013250:	3001      	addls	r0, #1
        if(tempdegree <= 37) comp++;
 8013252:	2a25      	cmp	r2, #37	; 0x25
 8013254:	bf9c      	itt	ls
 8013256:	3001      	addls	r0, #1
 8013258:	b2c0      	uxtbls	r0, r0
        if(tempdegree <= 32) comp++;  // max is 4 degrees compensated
 801325a:	2a20      	cmp	r2, #32
 801325c:	d80f      	bhi.n	801327e <lv_atan2+0x6e>
    }
    else {   // else is lower half of range
        if(tempdegree >= 2) comp++;
        if(tempdegree >= 6) comp++;
        if(tempdegree >= 10) comp++;
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
 801325e:	3001      	adds	r0, #1
 8013260:	b2c0      	uxtb	r0, r0
 8013262:	e00c      	b.n	801327e <lv_atan2+0x6e>
        if(tempdegree >= 2) comp++;
 8013264:	2a01      	cmp	r2, #1
 8013266:	bf8c      	ite	hi
 8013268:	2001      	movhi	r0, #1
 801326a:	2000      	movls	r0, #0
        if(tempdegree >= 6) comp++;
 801326c:	2a05      	cmp	r2, #5
 801326e:	bf88      	it	hi
 8013270:	3001      	addhi	r0, #1
        if(tempdegree >= 10) comp++;
 8013272:	2a09      	cmp	r2, #9
 8013274:	bf84      	itt	hi
 8013276:	3001      	addhi	r0, #1
 8013278:	b2c0      	uxtbhi	r0, r0
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
 801327a:	2a0e      	cmp	r2, #14
 801327c:	d8ef      	bhi.n	801325e <lv_atan2+0x4e>
    }
    degree += comp;   // degree is now accurate to +/- 1 degree!

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 801327e:	06da      	lsls	r2, r3, #27
    degree += comp;   // degree is now accurate to +/- 1 degree!
 8013280:	4408      	add	r0, r1
    if(negflag & 0x10) degree = (90 - degree);
 8013282:	bf48      	it	mi
 8013284:	f1c0 005a 	rsbmi	r0, r0, #90	; 0x5a

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) { // if -Y
 8013288:	f003 0201 	and.w	r2, r3, #1
 801328c:	079b      	lsls	r3, r3, #30
 801328e:	d506      	bpl.n	801329e <lv_atan2+0x8e>
        if(negflag & 0x01)   // if -Y -X
 8013290:	b112      	cbz	r2, 8013298 <lv_atan2+0x88>
            degree = (180 + degree);
 8013292:	30b4      	adds	r0, #180	; 0xb4
    else {   // else is +Y
        if(negflag & 0x01)   // if +Y -X
            degree = (360 - degree);
    }
    return degree;
}
 8013294:	b280      	uxth	r0, r0
 8013296:	4770      	bx	lr
            degree = (180 - degree);
 8013298:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801329c:	e7fa      	b.n	8013294 <lv_atan2+0x84>
        if(negflag & 0x01)   // if +Y -X
 801329e:	2a00      	cmp	r2, #0
 80132a0:	d0f8      	beq.n	8013294 <lv_atan2+0x84>
            degree = (360 - degree);
 80132a2:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
 80132a6:	e7f5      	b.n	8013294 <lv_atan2+0x84>

080132a8 <lv_pow>:
 * @param base
 * @param power
 * @return base raised to the power exponent
 */
int64_t lv_pow(int64_t base, int8_t exp)
{
 80132a8:	b530      	push	{r4, r5, lr}
    int64_t result = 1;
 80132aa:	2300      	movs	r3, #0
 80132ac:	2401      	movs	r4, #1
    while(exp) {
 80132ae:	b912      	cbnz	r2, 80132b6 <lv_pow+0xe>
        exp >>= 1;
        base *= base;
    }

    return result;
}
 80132b0:	4620      	mov	r0, r4
 80132b2:	4619      	mov	r1, r3
 80132b4:	bd30      	pop	{r4, r5, pc}
        if(exp & 1)
 80132b6:	07d5      	lsls	r5, r2, #31
            result *= base;
 80132b8:	bf41      	itttt	mi
 80132ba:	fb04 f501 	mulmi.w	r5, r4, r1
 80132be:	fb00 5503 	mlami	r5, r0, r3, r5
 80132c2:	fba4 4300 	umullmi	r4, r3, r4, r0
 80132c6:	195b      	addmi	r3, r3, r5
        base *= base;
 80132c8:	fb00 f501 	mul.w	r5, r0, r1
 80132cc:	fba0 0100 	umull	r0, r1, r0, r0
        exp >>= 1;
 80132d0:	1052      	asrs	r2, r2, #1
        base *= base;
 80132d2:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 80132d6:	e7ea      	b.n	80132ae <lv_pow+0x6>

080132d8 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 80132d8:	b530      	push	{r4, r5, lr}
    if(max_in >= min_in && x >= max_in) return max_out;
 80132da:	428a      	cmp	r2, r1
{
 80132dc:	9d03      	ldr	r5, [sp, #12]
    if(max_in >= min_in && x >= max_in) return max_out;
 80132de:	db07      	blt.n	80132f0 <lv_map+0x18>
 80132e0:	4282      	cmp	r2, r0
 80132e2:	dd03      	ble.n	80132ec <lv_map+0x14>
    if(max_in >= min_in && x <= min_in) return min_out;
 80132e4:	4281      	cmp	r1, r0
 80132e6:	da0f      	bge.n	8013308 <lv_map+0x30>

    if(max_in <= min_in && x <= max_in) return max_out;
 80132e8:	428a      	cmp	r2, r1
 80132ea:	d105      	bne.n	80132f8 <lv_map+0x20>

    int32_t delta_in = max_in - min_in;
    int32_t delta_out = max_out - min_out;

    return ((x - min_in) * delta_out) / delta_in + min_out;
}
 80132ec:	4628      	mov	r0, r5
 80132ee:	bd30      	pop	{r4, r5, pc}
    if(max_in <= min_in && x <= max_in) return max_out;
 80132f0:	4282      	cmp	r2, r0
 80132f2:	dafb      	bge.n	80132ec <lv_map+0x14>
    if(max_in <= min_in && x >= min_in) return min_out;
 80132f4:	4281      	cmp	r1, r0
 80132f6:	dd07      	ble.n	8013308 <lv_map+0x30>
    return ((x - min_in) * delta_out) / delta_in + min_out;
 80132f8:	1a44      	subs	r4, r0, r1
    int32_t delta_out = max_out - min_out;
 80132fa:	1ae8      	subs	r0, r5, r3
    return ((x - min_in) * delta_out) / delta_in + min_out;
 80132fc:	4360      	muls	r0, r4
    int32_t delta_in = max_in - min_in;
 80132fe:	1a52      	subs	r2, r2, r1
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8013300:	fb90 f0f2 	sdiv	r0, r0, r2
 8013304:	18c5      	adds	r5, r0, r3
 8013306:	e7f1      	b.n	80132ec <lv_map+0x14>
    if(max_in >= min_in && x <= min_in) return min_out;
 8013308:	461d      	mov	r5, r3
 801330a:	e7ef      	b.n	80132ec <lv_map+0x14>

0801330c <lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 801330c:	b508      	push	{r3, lr}
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 801330e:	4804      	ldr	r0, [pc, #16]	; (8013320 <lv_mem_init+0x14>)
 8013310:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8013314:	f001 fbdf 	bl	8014ad6 <lv_tlsf_create_with_pool>
 8013318:	4b02      	ldr	r3, [pc, #8]	; (8013324 <lv_mem_init+0x18>)
 801331a:	6018      	str	r0, [r3, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 801331c:	bd08      	pop	{r3, pc}
 801331e:	bf00      	nop
 8013320:	20000ee8 	.word	0x20000ee8
 8013324:	20000ee4 	.word	0x20000ee4

08013328 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 8013328:	b510      	push	{r4, lr}
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 801332a:	4604      	mov	r4, r0
 801332c:	b180      	cbz	r0, 8013350 <lv_mem_alloc+0x28>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
    }

#if LV_MEM_CUSTOM == 0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 801332e:	4b09      	ldr	r3, [pc, #36]	; (8013354 <lv_mem_alloc+0x2c>)
 8013330:	4601      	mov	r1, r0
 8013332:	6818      	ldr	r0, [r3, #0]
 8013334:	f001 fbdd 	bl	8014af2 <lv_tlsf_malloc>
    else {
        lv_memset(alloc, 0xaa, size);
    }
#endif

    if(alloc) {
 8013338:	b148      	cbz	r0, 801334e <lv_mem_alloc+0x26>
#if LV_MEM_CUSTOM == 0
        cur_used += size;
 801333a:	4b07      	ldr	r3, [pc, #28]	; (8013358 <lv_mem_alloc+0x30>)
 801333c:	6819      	ldr	r1, [r3, #0]
 801333e:	440c      	add	r4, r1
 8013340:	601c      	str	r4, [r3, #0]
        max_used = LV_MAX(cur_used, max_used);
 8013342:	4b06      	ldr	r3, [pc, #24]	; (801335c <lv_mem_alloc+0x34>)
 8013344:	681a      	ldr	r2, [r3, #0]
 8013346:	42a2      	cmp	r2, r4
 8013348:	bf2c      	ite	cs
 801334a:	601a      	strcs	r2, [r3, #0]
 801334c:	601c      	strcc	r4, [r3, #0]
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
}
 801334e:	bd10      	pop	{r4, pc}
        return &zero_mem;
 8013350:	4803      	ldr	r0, [pc, #12]	; (8013360 <lv_mem_alloc+0x38>)
 8013352:	e7fc      	b.n	801334e <lv_mem_alloc+0x26>
 8013354:	20000ee4 	.word	0x20000ee4
 8013358:	20000edc 	.word	0x20000edc
 801335c:	20000ee0 	.word	0x20000ee0
 8013360:	20000014 	.word	0x20000014

08013364 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
 8013364:	b508      	push	{r3, lr}
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 8013366:	4b08      	ldr	r3, [pc, #32]	; (8013388 <lv_mem_free+0x24>)
 8013368:	4298      	cmp	r0, r3
{
 801336a:	4601      	mov	r1, r0
    if(data == &zero_mem) return;
 801336c:	d00b      	beq.n	8013386 <lv_mem_free+0x22>
    if(data == NULL) return;
 801336e:	b150      	cbz	r0, 8013386 <lv_mem_free+0x22>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 8013370:	4b06      	ldr	r3, [pc, #24]	; (801338c <lv_mem_free+0x28>)
 8013372:	6818      	ldr	r0, [r3, #0]
 8013374:	f001 fbd0 	bl	8014b18 <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 8013378:	4a05      	ldr	r2, [pc, #20]	; (8013390 <lv_mem_free+0x2c>)
 801337a:	6813      	ldr	r3, [r2, #0]
 801337c:	4298      	cmp	r0, r3
 801337e:	bf34      	ite	cc
 8013380:	1a1b      	subcc	r3, r3, r0
    else cur_used = 0;
 8013382:	2300      	movcs	r3, #0
 8013384:	6013      	str	r3, [r2, #0]
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 8013386:	bd08      	pop	{r3, pc}
 8013388:	20000014 	.word	0x20000014
 801338c:	20000ee4 	.word	0x20000ee4
 8013390:	20000edc 	.word	0x20000edc

08013394 <lv_mem_realloc>:
 * Its content will be copied to the new memory block and freed
 * @param new_size the desired new size in byte
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
 8013394:	b508      	push	{r3, lr}
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 8013396:	460a      	mov	r2, r1
 8013398:	b171      	cbz	r1, 80133b8 <lv_mem_realloc+0x24>
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
        return &zero_mem;
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 801339a:	4909      	ldr	r1, [pc, #36]	; (80133c0 <lv_mem_realloc+0x2c>)
 801339c:	4288      	cmp	r0, r1
 801339e:	d104      	bne.n	80133aa <lv_mem_realloc+0x16>
        return NULL;
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
}
 80133a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 80133a4:	4610      	mov	r0, r2
 80133a6:	f7ff bfbf 	b.w	8013328 <lv_mem_alloc>
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 80133aa:	4b06      	ldr	r3, [pc, #24]	; (80133c4 <lv_mem_realloc+0x30>)
 80133ac:	4601      	mov	r1, r0
 80133ae:	6818      	ldr	r0, [r3, #0]
}
 80133b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 80133b4:	f001 bbf2 	b.w	8014b9c <lv_tlsf_realloc>
        lv_mem_free(data_p);
 80133b8:	f7ff ffd4 	bl	8013364 <lv_mem_free>
}
 80133bc:	4800      	ldr	r0, [pc, #0]	; (80133c0 <lv_mem_realloc+0x2c>)
 80133be:	bd08      	pop	{r3, pc}
 80133c0:	20000014 	.word	0x20000014
 80133c4:	20000ee4 	.word	0x20000ee4

080133c8 <lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
 80133c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
 80133ca:	4605      	mov	r5, r0
 80133cc:	b1a0      	cbz	r0, 80133f8 <lv_mem_buf_get+0x30>
    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 80133ce:	4c23      	ldr	r4, [pc, #140]	; (801345c <lv_mem_buf_get+0x94>)
 80133d0:	2300      	movs	r3, #0
    int8_t i_guess = -1;
 80133d2:	f04f 32ff 	mov.w	r2, #4294967295
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 80133d6:	1d27      	adds	r7, r4, #4
 80133d8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 80133dc:	79b0      	ldrb	r0, [r6, #6]
 80133de:	4601      	mov	r1, r0
 80133e0:	07c0      	lsls	r0, r0, #31
 80133e2:	d413      	bmi.n	801340c <lv_mem_buf_get+0x44>
 80133e4:	f837 0033 	ldrh.w	r0, [r7, r3, lsl #3]
 80133e8:	42a8      	cmp	r0, r5
 80133ea:	d30f      	bcc.n	801340c <lv_mem_buf_get+0x44>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 80133ec:	d105      	bne.n	80133fa <lv_mem_buf_get+0x32>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 80133ee:	f041 0101 	orr.w	r1, r1, #1
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 80133f2:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 80133f6:	71b1      	strb	r1, [r6, #6]
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
    return NULL;
}
 80133f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if(i_guess < 0) {
 80133fa:	1c56      	adds	r6, r2, #1
 80133fc:	d101      	bne.n	8013402 <lv_mem_buf_get+0x3a>
                i_guess = i;
 80133fe:	b25a      	sxtb	r2, r3
 8013400:	e004      	b.n	801340c <lv_mem_buf_get+0x44>
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8013402:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 8013406:	8889      	ldrh	r1, [r1, #4]
 8013408:	4281      	cmp	r1, r0
 801340a:	d8f8      	bhi.n	80133fe <lv_mem_buf_get+0x36>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801340c:	3301      	adds	r3, #1
 801340e:	2b10      	cmp	r3, #16
 8013410:	d1e2      	bne.n	80133d8 <lv_mem_buf_get+0x10>
    if(i_guess >= 0) {
 8013412:	1c51      	adds	r1, r2, #1
 8013414:	d008      	beq.n	8013428 <lv_mem_buf_get+0x60>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8013416:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 801341a:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 801341e:	798b      	ldrb	r3, [r1, #6]
 8013420:	f043 0301 	orr.w	r3, r3, #1
 8013424:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8013426:	e7e7      	b.n	80133f8 <lv_mem_buf_get+0x30>
 8013428:	2600      	movs	r6, #0
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 801342a:	eb04 07c6 	add.w	r7, r4, r6, lsl #3
 801342e:	79bb      	ldrb	r3, [r7, #6]
 8013430:	07db      	lsls	r3, r3, #31
 8013432:	d40e      	bmi.n	8013452 <lv_mem_buf_get+0x8a>
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8013434:	f854 0036 	ldr.w	r0, [r4, r6, lsl #3]
 8013438:	4629      	mov	r1, r5
 801343a:	f7ff ffab 	bl	8013394 <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 801343e:	b900      	cbnz	r0, 8013442 <lv_mem_buf_get+0x7a>
 8013440:	e7fe      	b.n	8013440 <lv_mem_buf_get+0x78>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8013442:	79bb      	ldrb	r3, [r7, #6]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 8013444:	f844 0036 	str.w	r0, [r4, r6, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8013448:	f043 0301 	orr.w	r3, r3, #1
 801344c:	71bb      	strb	r3, [r7, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 801344e:	80bd      	strh	r5, [r7, #4]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 8013450:	e7d2      	b.n	80133f8 <lv_mem_buf_get+0x30>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8013452:	3601      	adds	r6, #1
 8013454:	2e10      	cmp	r6, #16
 8013456:	d1e8      	bne.n	801342a <lv_mem_buf_get+0x62>
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 8013458:	e7fe      	b.n	8013458 <lv_mem_buf_get+0x90>
 801345a:	bf00      	nop
 801345c:	20000e5c 	.word	0x20000e5c

08013460 <lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void lv_mem_buf_release(void * p)
{
 8013460:	b510      	push	{r4, lr}
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8013462:	4a08      	ldr	r2, [pc, #32]	; (8013484 <lv_mem_buf_release+0x24>)
{
 8013464:	2300      	movs	r3, #0
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8013466:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 801346a:	4284      	cmp	r4, r0
 801346c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013470:	d104      	bne.n	801347c <lv_mem_buf_release+0x1c>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8013472:	798b      	ldrb	r3, [r1, #6]
 8013474:	f36f 0300 	bfc	r3, #0, #1
 8013478:	718b      	strb	r3, [r1, #6]
            return;
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 801347a:	bd10      	pop	{r4, pc}
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801347c:	3301      	adds	r3, #1
 801347e:	2b10      	cmp	r3, #16
 8013480:	d1f1      	bne.n	8013466 <lv_mem_buf_release+0x6>
 8013482:	e7fa      	b.n	801347a <lv_mem_buf_release+0x1a>
 8013484:	20000e5c 	.word	0x20000e5c

08013488 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 8013488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801348a:	4c0b      	ldr	r4, [pc, #44]	; (80134b8 <lv_mem_buf_free_all+0x30>)
 801348c:	2500      	movs	r5, #0
 801348e:	4627      	mov	r7, r4
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 8013490:	462e      	mov	r6, r5
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 8013492:	6820      	ldr	r0, [r4, #0]
 8013494:	b148      	cbz	r0, 80134aa <lv_mem_buf_free_all+0x22>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 8013496:	f7ff ff65 	bl	8013364 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 801349a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 801349e:	6026      	str	r6, [r4, #0]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 80134a0:	799a      	ldrb	r2, [r3, #6]
 80134a2:	f366 0200 	bfi	r2, r6, #0, #1
 80134a6:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 80134a8:	80a6      	strh	r6, [r4, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80134aa:	3501      	adds	r5, #1
 80134ac:	2d10      	cmp	r5, #16
 80134ae:	f104 0408 	add.w	r4, r4, #8
 80134b2:	d1ee      	bne.n	8013492 <lv_mem_buf_free_all+0xa>
        }
    }
}
 80134b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134b6:	bf00      	nop
 80134b8:	20000e5c 	.word	0x20000e5c

080134bc <lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * lv_memcpy(void * dst, const void * src, size_t len)
{
 80134bc:	b570      	push	{r4, r5, r6, lr}
    uint8_t * d8 = dst;
    const uint8_t * s8 = src;

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 80134be:	f000 0503 	and.w	r5, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 80134c2:	f001 0603 	and.w	r6, r1, #3

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 80134c6:	42b5      	cmp	r5, r6
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 80134c8:	4604      	mov	r4, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 80134ca:	460b      	mov	r3, r1
    if(s_align != d_align) {
 80134cc:	f040 8098 	bne.w	8013600 <lv_memcpy+0x144>
        }
        return dst;
    }

    /*Make the memories aligned*/
    if(d_align) {
 80134d0:	2d00      	cmp	r5, #0
 80134d2:	f040 80a8 	bne.w	8013626 <lv_memcpy+0x16a>
    uint8_t * d8 = dst;
 80134d6:	4605      	mov	r5, r0
 80134d8:	462b      	mov	r3, r5
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
    const uint32_t * s32 = (uint32_t *)s8;
    while(len > 32) {
 80134da:	2a20      	cmp	r2, #32
 80134dc:	461c      	mov	r4, r3
 80134de:	f101 0520 	add.w	r5, r1, #32
 80134e2:	f103 0320 	add.w	r3, r3, #32
 80134e6:	f200 80b0 	bhi.w	801364a <lv_memcpy+0x18e>
        REPEAT8(COPY32)
        len -= 32;
    }

    while(len > 4) {
 80134ea:	2a04      	cmp	r2, #4
 80134ec:	460e      	mov	r6, r1
 80134ee:	f240 809f 	bls.w	8013630 <lv_memcpy+0x174>
        COPY32;
 80134f2:	f851 3b04 	ldr.w	r3, [r1], #4
 80134f6:	f844 3b04 	str.w	r3, [r4], #4
        len -= 4;
 80134fa:	3a04      	subs	r2, #4
 80134fc:	e7f5      	b.n	80134ea <lv_memcpy+0x2e>
            REPEAT8(COPY8);
 80134fe:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8013502:	f804 1c20 	strb.w	r1, [r4, #-32]
 8013506:	f813 1c1f 	ldrb.w	r1, [r3, #-31]
 801350a:	f804 1c1f 	strb.w	r1, [r4, #-31]
 801350e:	f813 1c1e 	ldrb.w	r1, [r3, #-30]
 8013512:	f804 1c1e 	strb.w	r1, [r4, #-30]
 8013516:	f813 1c1d 	ldrb.w	r1, [r3, #-29]
 801351a:	f804 1c1d 	strb.w	r1, [r4, #-29]
 801351e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8013522:	f804 1c1c 	strb.w	r1, [r4, #-28]
 8013526:	f813 1c1b 	ldrb.w	r1, [r3, #-27]
 801352a:	f804 1c1b 	strb.w	r1, [r4, #-27]
 801352e:	f813 1c1a 	ldrb.w	r1, [r3, #-26]
 8013532:	f804 1c1a 	strb.w	r1, [r4, #-26]
 8013536:	f813 1c19 	ldrb.w	r1, [r3, #-25]
 801353a:	f804 1c19 	strb.w	r1, [r4, #-25]
            REPEAT8(COPY8);
 801353e:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8013542:	f804 1c18 	strb.w	r1, [r4, #-24]
 8013546:	f813 1c17 	ldrb.w	r1, [r3, #-23]
 801354a:	f804 1c17 	strb.w	r1, [r4, #-23]
 801354e:	f813 1c16 	ldrb.w	r1, [r3, #-22]
 8013552:	f804 1c16 	strb.w	r1, [r4, #-22]
 8013556:	f813 1c15 	ldrb.w	r1, [r3, #-21]
 801355a:	f804 1c15 	strb.w	r1, [r4, #-21]
 801355e:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8013562:	f804 1c14 	strb.w	r1, [r4, #-20]
 8013566:	f813 1c13 	ldrb.w	r1, [r3, #-19]
 801356a:	f804 1c13 	strb.w	r1, [r4, #-19]
 801356e:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8013572:	f804 1c12 	strb.w	r1, [r4, #-18]
 8013576:	f813 1c11 	ldrb.w	r1, [r3, #-17]
 801357a:	f804 1c11 	strb.w	r1, [r4, #-17]
            REPEAT8(COPY8);
 801357e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8013582:	f804 1c10 	strb.w	r1, [r4, #-16]
 8013586:	f813 1c0f 	ldrb.w	r1, [r3, #-15]
 801358a:	f804 1c0f 	strb.w	r1, [r4, #-15]
 801358e:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8013592:	f804 1c0e 	strb.w	r1, [r4, #-14]
 8013596:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 801359a:	f804 1c0d 	strb.w	r1, [r4, #-13]
 801359e:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80135a2:	f804 1c0c 	strb.w	r1, [r4, #-12]
 80135a6:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 80135aa:	f804 1c0b 	strb.w	r1, [r4, #-11]
 80135ae:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 80135b2:	f804 1c0a 	strb.w	r1, [r4, #-10]
 80135b6:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 80135ba:	f804 1c09 	strb.w	r1, [r4, #-9]
            REPEAT8(COPY8);
 80135be:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 80135c2:	f804 1c08 	strb.w	r1, [r4, #-8]
 80135c6:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 80135ca:	f804 1c07 	strb.w	r1, [r4, #-7]
 80135ce:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 80135d2:	f804 1c06 	strb.w	r1, [r4, #-6]
 80135d6:	f813 1c05 	ldrb.w	r1, [r3, #-5]
 80135da:	f804 1c05 	strb.w	r1, [r4, #-5]
 80135de:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80135e2:	f804 1c04 	strb.w	r1, [r4, #-4]
 80135e6:	f813 1c03 	ldrb.w	r1, [r3, #-3]
 80135ea:	f804 1c03 	strb.w	r1, [r4, #-3]
 80135ee:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 80135f2:	f804 1c02 	strb.w	r1, [r4, #-2]
 80135f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80135fa:	f804 1c01 	strb.w	r1, [r4, #-1]
            len -= 32;
 80135fe:	3a20      	subs	r2, #32
        while(len > 32) {
 8013600:	2a20      	cmp	r2, #32
 8013602:	461d      	mov	r5, r3
 8013604:	4621      	mov	r1, r4
 8013606:	f103 0320 	add.w	r3, r3, #32
 801360a:	f104 0420 	add.w	r4, r4, #32
 801360e:	f63f af76 	bhi.w	80134fe <lv_memcpy+0x42>
 8013612:	1e6b      	subs	r3, r5, #1
 8013614:	440a      	add	r2, r1
        while(len) {
 8013616:	4291      	cmp	r1, r2
 8013618:	d100      	bne.n	801361c <lv_memcpy+0x160>
        COPY8
        len--;
    }

    return dst;
}
 801361a:	bd70      	pop	{r4, r5, r6, pc}
            COPY8
 801361c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8013620:	f801 4b01 	strb.w	r4, [r1], #1
            len--;
 8013624:	e7f7      	b.n	8013616 <lv_memcpy+0x15a>
        d_align = ALIGN_MASK + 1 - d_align;
 8013626:	f1c5 0504 	rsb	r5, r5, #4
 801362a:	4405      	add	r5, r0
 801362c:	461e      	mov	r6, r3
        while(d_align && len) {
 801362e:	b912      	cbnz	r2, 8013636 <lv_memcpy+0x17a>
 8013630:	1e73      	subs	r3, r6, #1
 8013632:	4422      	add	r2, r4
 8013634:	e030      	b.n	8013698 <lv_memcpy+0x1dc>
            COPY8;
 8013636:	f813 1b01 	ldrb.w	r1, [r3], #1
 801363a:	f804 1b01 	strb.w	r1, [r4], #1
        while(d_align && len) {
 801363e:	42ac      	cmp	r4, r5
            COPY8;
 8013640:	4619      	mov	r1, r3
            len--;
 8013642:	f102 32ff 	add.w	r2, r2, #4294967295
        while(d_align && len) {
 8013646:	d1f1      	bne.n	801362c <lv_memcpy+0x170>
 8013648:	e746      	b.n	80134d8 <lv_memcpy+0x1c>
        REPEAT8(COPY32)
 801364a:	f855 1c20 	ldr.w	r1, [r5, #-32]
 801364e:	f843 1c20 	str.w	r1, [r3, #-32]
 8013652:	f855 1c1c 	ldr.w	r1, [r5, #-28]
 8013656:	f843 1c1c 	str.w	r1, [r3, #-28]
 801365a:	f855 1c18 	ldr.w	r1, [r5, #-24]
 801365e:	f843 1c18 	str.w	r1, [r3, #-24]
 8013662:	f855 1c14 	ldr.w	r1, [r5, #-20]
 8013666:	f843 1c14 	str.w	r1, [r3, #-20]
 801366a:	f855 1c10 	ldr.w	r1, [r5, #-16]
 801366e:	f843 1c10 	str.w	r1, [r3, #-16]
 8013672:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8013676:	f843 1c0c 	str.w	r1, [r3, #-12]
 801367a:	f855 1c08 	ldr.w	r1, [r5, #-8]
 801367e:	f843 1c08 	str.w	r1, [r3, #-8]
 8013682:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8013686:	f843 1c04 	str.w	r1, [r3, #-4]
        len -= 32;
 801368a:	3a20      	subs	r2, #32
 801368c:	4629      	mov	r1, r5
 801368e:	e724      	b.n	80134da <lv_memcpy+0x1e>
        COPY8
 8013690:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8013694:	f804 1b01 	strb.w	r1, [r4], #1
    while(len) {
 8013698:	4294      	cmp	r4, r2
 801369a:	d1f9      	bne.n	8013690 <lv_memcpy+0x1d4>
 801369c:	e7bd      	b.n	801361a <lv_memcpy+0x15e>

0801369e <lv_memset>:
    uint8_t * d8 = (uint8_t *)dst;

    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;

    /*Make the address aligned*/
    if(d_align) {
 801369e:	f010 0303 	ands.w	r3, r0, #3
{
 80136a2:	b410      	push	{r4}
    if(d_align) {
 80136a4:	d009      	beq.n	80136ba <lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
 80136a6:	f1c3 0304 	rsb	r3, r3, #4
 80136aa:	4403      	add	r3, r0
        while(d_align && len) {
 80136ac:	b12a      	cbz	r2, 80136ba <lv_memset+0x1c>
            SET8(v);
 80136ae:	f800 1b01 	strb.w	r1, [r0], #1
        while(d_align && len) {
 80136b2:	4298      	cmp	r0, r3
            len--;
 80136b4:	f102 32ff 	add.w	r2, r2, #4294967295
        while(d_align && len) {
 80136b8:	d1f8      	bne.n	80136ac <lv_memset+0xe>
            d_align--;
        }
    }

    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 80136ba:	040c      	lsls	r4, r1, #16
 80136bc:	eb04 2401 	add.w	r4, r4, r1, lsl #8
 80136c0:	440c      	add	r4, r1
 80136c2:	eb04 6401 	add.w	r4, r4, r1, lsl #24

    uint32_t * d32 = (uint32_t *)d8;

    while(len > 32) {
 80136c6:	4603      	mov	r3, r0
 80136c8:	2a20      	cmp	r2, #32
 80136ca:	4618      	mov	r0, r3
 80136cc:	f103 0320 	add.w	r3, r3, #32
 80136d0:	d805      	bhi.n	80136de <lv_memset+0x40>
        REPEAT8(SET32(v32));
        len -= 32;
    }

    while(len > 4) {
 80136d2:	2a04      	cmp	r2, #4
 80136d4:	d80d      	bhi.n	80136f2 <lv_memset+0x54>
    d8 = (uint8_t *)d32;
    while(len) {
        SET8(v);
        len--;
    }
}
 80136d6:	f85d 4b04 	ldr.w	r4, [sp], #4
        SET8(v);
 80136da:	f00a bc9f 	b.w	801e01c <memset>
        REPEAT8(SET32(v32));
 80136de:	e943 4408 	strd	r4, r4, [r3, #-32]
 80136e2:	e943 4406 	strd	r4, r4, [r3, #-24]
 80136e6:	e943 4404 	strd	r4, r4, [r3, #-16]
 80136ea:	e943 4402 	strd	r4, r4, [r3, #-8]
        len -= 32;
 80136ee:	3a20      	subs	r2, #32
 80136f0:	e7ea      	b.n	80136c8 <lv_memset+0x2a>
        SET32(v32);
 80136f2:	f840 4b04 	str.w	r4, [r0], #4
        len -= 4;
 80136f6:	3a04      	subs	r2, #4
 80136f8:	e7eb      	b.n	80136d2 <lv_memset+0x34>

080136fa <lv_memset_00>:
{
    uint8_t * d8 = (uint8_t *)dst;
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;

    /*Make the address aligned*/
    if(d_align) {
 80136fa:	f010 0303 	ands.w	r3, r0, #3
 80136fe:	d10d      	bne.n	801371c <lv_memset_00+0x22>
 8013700:	4603      	mov	r3, r0
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
    while(len > 32) {
        REPEAT8(SET32(0));
 8013702:	2200      	movs	r2, #0
    while(len > 32) {
 8013704:	2920      	cmp	r1, #32
 8013706:	4618      	mov	r0, r3
 8013708:	f103 0320 	add.w	r3, r3, #32
 801370c:	d816      	bhi.n	801373c <lv_memset_00+0x42>
        len -= 32;
    }

    while(len > 4) {
        SET32(0);
 801370e:	2300      	movs	r3, #0
    while(len > 4) {
 8013710:	2904      	cmp	r1, #4
 8013712:	d908      	bls.n	8013726 <lv_memset_00+0x2c>
        SET32(0);
 8013714:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 8013718:	3904      	subs	r1, #4
 801371a:	e7f9      	b.n	8013710 <lv_memset_00+0x16>
        d_align = ALIGN_MASK + 1 - d_align;
 801371c:	f1c3 0304 	rsb	r3, r3, #4
 8013720:	4403      	add	r3, r0
            SET8(0);
 8013722:	2200      	movs	r2, #0
        while(d_align && len) {
 8013724:	b919      	cbnz	r1, 801372e <lv_memset_00+0x34>
    }

    d8 = (uint8_t *)d32;
    while(len) {
        SET8(0);
 8013726:	460a      	mov	r2, r1
 8013728:	2100      	movs	r1, #0
 801372a:	f00a bc77 	b.w	801e01c <memset>
            SET8(0);
 801372e:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 8013732:	4283      	cmp	r3, r0
            len--;
 8013734:	f101 31ff 	add.w	r1, r1, #4294967295
        while(d_align && len) {
 8013738:	d1f4      	bne.n	8013724 <lv_memset_00+0x2a>
 801373a:	e7e1      	b.n	8013700 <lv_memset_00+0x6>
        REPEAT8(SET32(0));
 801373c:	e943 2208 	strd	r2, r2, [r3, #-32]
 8013740:	e943 2206 	strd	r2, r2, [r3, #-24]
 8013744:	e943 2204 	strd	r2, r2, [r3, #-16]
 8013748:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 801374c:	3920      	subs	r1, #32
 801374e:	e7d9      	b.n	8013704 <lv_memset_00+0xa>

08013750 <lv_memset_ff>:
{
    uint8_t * d8 = (uint8_t *)dst;
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;

    /*Make the address aligned*/
    if(d_align) {
 8013750:	f010 0303 	ands.w	r3, r0, #3
 8013754:	d10f      	bne.n	8013776 <lv_memset_ff+0x26>
 8013756:	4603      	mov	r3, r0
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
    while(len > 32) {
        REPEAT8(SET32(0xFFFFFFFF));
 8013758:	f04f 32ff 	mov.w	r2, #4294967295
    while(len > 32) {
 801375c:	2920      	cmp	r1, #32
 801375e:	4618      	mov	r0, r3
 8013760:	f103 0320 	add.w	r3, r3, #32
 8013764:	d817      	bhi.n	8013796 <lv_memset_ff+0x46>
        len -= 32;
    }

    while(len > 4) {
        SET32(0xFFFFFFFF);
 8013766:	f04f 33ff 	mov.w	r3, #4294967295
    while(len > 4) {
 801376a:	2904      	cmp	r1, #4
 801376c:	d908      	bls.n	8013780 <lv_memset_ff+0x30>
        SET32(0xFFFFFFFF);
 801376e:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 8013772:	3904      	subs	r1, #4
 8013774:	e7f9      	b.n	801376a <lv_memset_ff+0x1a>
        d_align = ALIGN_MASK + 1 - d_align;
 8013776:	f1c3 0304 	rsb	r3, r3, #4
 801377a:	4403      	add	r3, r0
            SET8(0xFF);
 801377c:	22ff      	movs	r2, #255	; 0xff
        while(d_align && len) {
 801377e:	b919      	cbnz	r1, 8013788 <lv_memset_ff+0x38>
    }

    d8 = (uint8_t *)d32;
    while(len) {
        SET8(0xFF);
 8013780:	460a      	mov	r2, r1
 8013782:	21ff      	movs	r1, #255	; 0xff
 8013784:	f00a bc4a 	b.w	801e01c <memset>
            SET8(0xFF);
 8013788:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 801378c:	4283      	cmp	r3, r0
            len--;
 801378e:	f101 31ff 	add.w	r1, r1, #4294967295
        while(d_align && len) {
 8013792:	d1f4      	bne.n	801377e <lv_memset_ff+0x2e>
 8013794:	e7df      	b.n	8013756 <lv_memset_ff+0x6>
        REPEAT8(SET32(0xFFFFFFFF));
 8013796:	e943 2208 	strd	r2, r2, [r3, #-32]
 801379a:	e943 2206 	strd	r2, r2, [r3, #-24]
 801379e:	e943 2204 	strd	r2, r2, [r3, #-16]
 80137a2:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 80137a6:	3920      	subs	r1, #32
 80137a8:	e7d8      	b.n	801375c <lv_memset_ff+0xc>

080137aa <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
 80137aa:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
 80137ac:	bf38      	it	cc
 80137ae:	5488      	strbcc	r0, [r1, r2]
    }
}
 80137b0:	4770      	bx	lr

080137b2 <_out_null>:
{
    LV_UNUSED(character);
    LV_UNUSED(buffer);
    LV_UNUSED(idx);
    LV_UNUSED(maxlen);
}
 80137b2:	4770      	bx	lr

080137b4 <_ntoa_format>:
}

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80137b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b8:	4617      	mov	r7, r2
 80137ba:	e9dd 6211 	ldrd	r6, r2, [sp, #68]	; 0x44
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
 80137be:	f012 0a02 	ands.w	sl, r2, #2
{
 80137c2:	4680      	mov	r8, r0
 80137c4:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
 80137c8:	e9dd 0c0f 	ldrd	r0, ip, [sp, #60]	; 0x3c
 80137cc:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    if(!(flags & FLAGS_LEFT)) {
 80137d0:	d11f      	bne.n	8013812 <_ntoa_format+0x5e>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80137d2:	f002 0901 	and.w	r9, r2, #1
 80137d6:	b14e      	cbz	r6, 80137ec <_ntoa_format+0x38>
 80137d8:	f1b9 0f00 	cmp.w	r9, #0
 80137dc:	d006      	beq.n	80137ec <_ntoa_format+0x38>
 80137de:	f1be 0f00 	cmp.w	lr, #0
 80137e2:	d102      	bne.n	80137ea <_ntoa_format+0x36>
 80137e4:	f012 0f0c 	tst.w	r2, #12
 80137e8:	d000      	beq.n	80137ec <_ntoa_format+0x38>
            width--;
 80137ea:	3e01      	subs	r6, #1
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 80137ec:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80137f0:	e004      	b.n	80137fc <_ntoa_format+0x48>
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80137f2:	2c20      	cmp	r4, #32
 80137f4:	d004      	beq.n	8013800 <_ntoa_format+0x4c>
            buf[len++] = '0';
 80137f6:	f805 b004 	strb.w	fp, [r5, r4]
 80137fa:	3401      	adds	r4, #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80137fc:	45a4      	cmp	ip, r4
 80137fe:	d8f8      	bhi.n	80137f2 <_ntoa_format+0x3e>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 8013800:	f04f 0b30 	mov.w	fp, #48	; 0x30
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8013804:	f1b9 0f00 	cmp.w	r9, #0
 8013808:	d003      	beq.n	8013812 <_ntoa_format+0x5e>
 801380a:	42a6      	cmp	r6, r4
 801380c:	d901      	bls.n	8013812 <_ntoa_format+0x5e>
 801380e:	2c20      	cmp	r4, #32
 8013810:	d137      	bne.n	8013882 <_ntoa_format+0xce>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
 8013812:	f012 0f10 	tst.w	r2, #16
 8013816:	d019      	beq.n	801384c <_ntoa_format+0x98>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8013818:	f412 6f80 	tst.w	r2, #1024	; 0x400
 801381c:	d136      	bne.n	801388c <_ntoa_format+0xd8>
 801381e:	b3ac      	cbz	r4, 801388c <_ntoa_format+0xd8>
 8013820:	4564      	cmp	r4, ip
 8013822:	d001      	beq.n	8013828 <_ntoa_format+0x74>
 8013824:	42b4      	cmp	r4, r6
 8013826:	d131      	bne.n	801388c <_ntoa_format+0xd8>
            len--;
            if(len && (base == 16U)) {
 8013828:	f1b4 0c01 	subs.w	ip, r4, #1
 801382c:	d02d      	beq.n	801388a <_ntoa_format+0xd6>
 801382e:	2810      	cmp	r0, #16
 8013830:	d16a      	bne.n	8013908 <_ntoa_format+0x154>
                len--;
 8013832:	3c02      	subs	r4, #2
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8013834:	0690      	lsls	r0, r2, #26
 8013836:	d431      	bmi.n	801389c <_ntoa_format+0xe8>
 8013838:	2c1f      	cmp	r4, #31
 801383a:	d80f      	bhi.n	801385c <_ntoa_format+0xa8>
            buf[len++] = 'x';
 801383c:	2078      	movs	r0, #120	; 0x78
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'b';
 801383e:	5528      	strb	r0, [r5, r4]
 8013840:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
 8013842:	2c1f      	cmp	r4, #31
 8013844:	d80a      	bhi.n	801385c <_ntoa_format+0xa8>
            buf[len++] = '0';
 8013846:	2030      	movs	r0, #48	; 0x30
 8013848:	5528      	strb	r0, [r5, r4]
 801384a:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
 801384c:	2c20      	cmp	r4, #32
 801384e:	d005      	beq.n	801385c <_ntoa_format+0xa8>
        if(negative) {
 8013850:	f1be 0f00 	cmp.w	lr, #0
 8013854:	d026      	beq.n	80138a4 <_ntoa_format+0xf0>
            buf[len++] = '-';
 8013856:	202d      	movs	r0, #45	; 0x2d
        }
        else if(flags & FLAGS_PLUS) {
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
            buf[len++] = ' ';
 8013858:	5528      	strb	r0, [r5, r4]
 801385a:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 801385c:	0792      	lsls	r2, r2, #30
 801385e:	d03b      	beq.n	80138d8 <_ntoa_format+0x124>
 8013860:	463a      	mov	r2, r7
 8013862:	4425      	add	r5, r4
 8013864:	4414      	add	r4, r2
    while(len) {
 8013866:	42a2      	cmp	r2, r4
 8013868:	d13a      	bne.n	80138e0 <_ntoa_format+0x12c>
    if(flags & FLAGS_LEFT) {
 801386a:	f1ba 0f00 	cmp.w	sl, #0
 801386e:	d004      	beq.n	801387a <_ntoa_format+0xc6>
 8013870:	1bd5      	subs	r5, r2, r7
        while(idx - start_idx < width) {
 8013872:	42b5      	cmp	r5, r6
 8013874:	eb05 0407 	add.w	r4, r5, r7
 8013878:	d33d      	bcc.n	80138f6 <_ntoa_format+0x142>
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 801387a:	4620      	mov	r0, r4
 801387c:	b003      	add	sp, #12
 801387e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buf[len++] = '0';
 8013882:	f805 b004 	strb.w	fp, [r5, r4]
 8013886:	3401      	adds	r4, #1
 8013888:	e7bc      	b.n	8013804 <_ntoa_format+0x50>
 801388a:	4664      	mov	r4, ip
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801388c:	2810      	cmp	r0, #16
 801388e:	d0d1      	beq.n	8013834 <_ntoa_format+0x80>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8013890:	2802      	cmp	r0, #2
 8013892:	d1d6      	bne.n	8013842 <_ntoa_format+0x8e>
 8013894:	2c1f      	cmp	r4, #31
 8013896:	d8e1      	bhi.n	801385c <_ntoa_format+0xa8>
            buf[len++] = 'b';
 8013898:	2062      	movs	r0, #98	; 0x62
 801389a:	e7d0      	b.n	801383e <_ntoa_format+0x8a>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801389c:	2c1f      	cmp	r4, #31
 801389e:	d8dd      	bhi.n	801385c <_ntoa_format+0xa8>
            buf[len++] = 'X';
 80138a0:	2058      	movs	r0, #88	; 0x58
 80138a2:	e7cc      	b.n	801383e <_ntoa_format+0x8a>
        else if(flags & FLAGS_PLUS) {
 80138a4:	0750      	lsls	r0, r2, #29
 80138a6:	d501      	bpl.n	80138ac <_ntoa_format+0xf8>
            buf[len++] = '+';  // ignore the space if the '+' exists
 80138a8:	202b      	movs	r0, #43	; 0x2b
 80138aa:	e7d5      	b.n	8013858 <_ntoa_format+0xa4>
        else if(flags & FLAGS_SPACE) {
 80138ac:	0710      	lsls	r0, r2, #28
 80138ae:	d5d5      	bpl.n	801385c <_ntoa_format+0xa8>
            buf[len++] = ' ';
 80138b0:	2020      	movs	r0, #32
 80138b2:	e7d1      	b.n	8013858 <_ntoa_format+0xa4>
            out(' ', buffer, idx++, maxlen);
 80138b4:	2020      	movs	r0, #32
 80138b6:	e9cd 1300 	strd	r1, r3, [sp]
 80138ba:	47c0      	blx	r8
        for(i = len; i < width; i++) {
 80138bc:	e9dd 1300 	ldrd	r1, r3, [sp]
 80138c0:	f109 0901 	add.w	r9, r9, #1
 80138c4:	454e      	cmp	r6, r9
 80138c6:	eb0b 0209 	add.w	r2, fp, r9
 80138ca:	d8f3      	bhi.n	80138b4 <_ntoa_format+0x100>
 80138cc:	1b32      	subs	r2, r6, r4
 80138ce:	42b4      	cmp	r4, r6
 80138d0:	bf88      	it	hi
 80138d2:	2200      	movhi	r2, #0
 80138d4:	443a      	add	r2, r7
 80138d6:	e7c4      	b.n	8013862 <_ntoa_format+0xae>
 80138d8:	46a1      	mov	r9, r4
 80138da:	eba7 0b04 	sub.w	fp, r7, r4
 80138de:	e7f1      	b.n	80138c4 <_ntoa_format+0x110>
        out(buf[--len], buffer, idx++, maxlen);
 80138e0:	f102 0901 	add.w	r9, r2, #1
 80138e4:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 80138e8:	e9cd 1300 	strd	r1, r3, [sp]
 80138ec:	47c0      	blx	r8
 80138ee:	e9dd 1300 	ldrd	r1, r3, [sp]
 80138f2:	464a      	mov	r2, r9
 80138f4:	e7b7      	b.n	8013866 <_ntoa_format+0xb2>
            out(' ', buffer, idx++, maxlen);
 80138f6:	4622      	mov	r2, r4
 80138f8:	2020      	movs	r0, #32
 80138fa:	9301      	str	r3, [sp, #4]
 80138fc:	9100      	str	r1, [sp, #0]
 80138fe:	3501      	adds	r5, #1
 8013900:	47c0      	blx	r8
 8013902:	e9dd 1300 	ldrd	r1, r3, [sp]
 8013906:	e7b4      	b.n	8013872 <_ntoa_format+0xbe>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8013908:	2802      	cmp	r0, #2
 801390a:	4664      	mov	r4, ip
 801390c:	d199      	bne.n	8013842 <_ntoa_format+0x8e>
 801390e:	e7c3      	b.n	8013898 <_ntoa_format+0xe4>

08013910 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8013910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013914:	b091      	sub	sp, #68	; 0x44
 8013916:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8013918:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801391a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 801391c:	b90d      	cbnz	r5, 8013922 <_ntoa_long+0x12>
        flags &= ~FLAGS_HASH;
 801391e:	f027 0710 	bic.w	r7, r7, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 8013922:	057c      	lsls	r4, r7, #21
 8013924:	d500      	bpl.n	8013928 <_ntoa_long+0x18>
 8013926:	b315      	cbz	r5, 801396e <_ntoa_long+0x5e>
 8013928:	f017 0f20 	tst.w	r7, #32
 801392c:	bf14      	ite	ne
 801392e:	f04f 0e41 	movne.w	lr, #65	; 0x41
 8013932:	f04f 0e61 	moveq.w	lr, #97	; 0x61
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8013936:	46ac      	mov	ip, r5
 8013938:	f10d 0820 	add.w	r8, sp, #32
 801393c:	2500      	movs	r5, #0
 801393e:	f1ae 0e0a 	sub.w	lr, lr, #10
            const char digit = (char)(value % base);
 8013942:	fbbc f9f6 	udiv	r9, ip, r6
 8013946:	fb06 c919 	mls	r9, r6, r9, ip
 801394a:	fa5f f489 	uxtb.w	r4, r9
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801394e:	f1b9 0f09 	cmp.w	r9, #9
 8013952:	bf94      	ite	ls
 8013954:	3430      	addls	r4, #48	; 0x30
 8013956:	4474      	addhi	r4, lr
 8013958:	b2e4      	uxtb	r4, r4
            value /= base;
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 801395a:	45b4      	cmp	ip, r6
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801395c:	f808 4b01 	strb.w	r4, [r8], #1
            value /= base;
 8013960:	fbbc f4f6 	udiv	r4, ip, r6
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8013964:	f105 0501 	add.w	r5, r5, #1
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8013968:	d301      	bcc.n	801396e <_ntoa_long+0x5e>
 801396a:	2d20      	cmp	r5, #32
 801396c:	d110      	bne.n	8013990 <_ntoa_long+0x80>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 801396e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013970:	9405      	str	r4, [sp, #20]
 8013972:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8013974:	9706      	str	r7, [sp, #24]
 8013976:	e9cd 6403 	strd	r6, r4, [sp, #12]
 801397a:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801397e:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8013982:	ac08      	add	r4, sp, #32
 8013984:	9400      	str	r4, [sp, #0]
 8013986:	f7ff ff15 	bl	80137b4 <_ntoa_format>
}
 801398a:	b011      	add	sp, #68	; 0x44
 801398c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            value /= base;
 8013990:	46a4      	mov	ip, r4
 8013992:	e7d6      	b.n	8013942 <_ntoa_long+0x32>

08013994 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8013994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013998:	ed2d 8b04 	vpush	{d8-d9}
 801399c:	b093      	sub	sp, #76	; 0x4c
 801399e:	e9dd 6520 	ldrd	r6, r5, [sp, #128]	; 0x80
 80139a2:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 80139a4:	469a      	mov	sl, r3
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 80139a6:	ea56 0305 	orrs.w	r3, r6, r5
        flags &= ~FLAGS_HASH;
 80139aa:	bf08      	it	eq
 80139ac:	f027 0710 	biceq.w	r7, r7, #16
{
 80139b0:	ee09 2a10 	vmov	s18, r2
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 80139b4:	057a      	lsls	r2, r7, #21
{
 80139b6:	e9dd b924 	ldrd	fp, r9, [sp, #144]	; 0x90
 80139ba:	ee08 0a10 	vmov	s16, r0
 80139be:	ee08 1a90 	vmov	s17, r1
    if(!(flags & FLAGS_PRECISION) || value) {
 80139c2:	d502      	bpl.n	80139ca <_ntoa_long_long+0x36>
 80139c4:	ea56 0305 	orrs.w	r3, r6, r5
 80139c8:	d03d      	beq.n	8013a46 <_ntoa_long_long+0xb2>
 80139ca:	f017 0f20 	tst.w	r7, #32
 80139ce:	bf14      	ite	ne
 80139d0:	2341      	movne	r3, #65	; 0x41
 80139d2:	2361      	moveq	r3, #97	; 0x61
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80139d4:	3b0a      	subs	r3, #10
 80139d6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80139da:	2400      	movs	r4, #0
 80139dc:	9309      	str	r3, [sp, #36]	; 0x24
            const char digit = (char)(value % base);
 80139de:	465a      	mov	r2, fp
 80139e0:	464b      	mov	r3, r9
 80139e2:	4630      	mov	r0, r6
 80139e4:	4629      	mov	r1, r5
 80139e6:	f7ec fc05 	bl	80001f4 <__aeabi_uldivmod>
 80139ea:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80139ec:	2a09      	cmp	r2, #9
 80139ee:	bf8a      	itet	hi
 80139f0:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
 80139f2:	3230      	addls	r2, #48	; 0x30
 80139f4:	18d2      	addhi	r2, r2, r3
            value /= base;
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80139f6:	455e      	cmp	r6, fp
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80139f8:	b2d2      	uxtb	r2, r2
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80139fa:	eb75 0309 	sbcs.w	r3, r5, r9
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80139fe:	f808 2b01 	strb.w	r2, [r8], #1
 8013a02:	f104 0401 	add.w	r4, r4, #1
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8013a06:	d301      	bcc.n	8013a0c <_ntoa_long_long+0x78>
 8013a08:	2c20      	cmp	r4, #32
 8013a0a:	d119      	bne.n	8013a40 <_ntoa_long_long+0xac>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8013a0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8013a0e:	9305      	str	r3, [sp, #20]
 8013a10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013a12:	9706      	str	r7, [sp, #24]
 8013a14:	e9cd b303 	strd	fp, r3, [sp, #12]
 8013a18:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 8013a1c:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8013a20:	ab0a      	add	r3, sp, #40	; 0x28
 8013a22:	9300      	str	r3, [sp, #0]
 8013a24:	ee19 2a10 	vmov	r2, s18
 8013a28:	ee18 1a90 	vmov	r1, s17
 8013a2c:	ee18 0a10 	vmov	r0, s16
 8013a30:	4653      	mov	r3, sl
 8013a32:	f7ff febf 	bl	80137b4 <_ntoa_format>
}
 8013a36:	b013      	add	sp, #76	; 0x4c
 8013a38:	ecbd 8b04 	vpop	{d8-d9}
 8013a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            value /= base;
 8013a40:	4606      	mov	r6, r0
 8013a42:	460d      	mov	r5, r1
 8013a44:	e7cb      	b.n	80139de <_ntoa_long_long+0x4a>
    size_t len = 0U;
 8013a46:	2400      	movs	r4, #0
 8013a48:	e7e0      	b.n	8013a0c <_ntoa_long_long+0x78>
	...

08013a4c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
{
 8013a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a50:	b095      	sub	sp, #84	; 0x54
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
        // use null output function
        out = _out_null;
 8013a52:	f1b1 0800 	subs.w	r8, r1, #0
{
 8013a56:	930c      	str	r3, [sp, #48]	; 0x30
 8013a58:	9e1e      	ldr	r6, [sp, #120]	; 0x78
        out = _out_null;
 8013a5a:	4bb1      	ldr	r3, [pc, #708]	; (8013d20 <_vsnprintf+0x2d4>)
 8013a5c:	bf18      	it	ne
 8013a5e:	4603      	movne	r3, r0
{
 8013a60:	4617      	mov	r7, r2
        out = _out_null;
 8013a62:	930b      	str	r3, [sp, #44]	; 0x2c
                out('%', buffer, idx++, maxlen);
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
 8013a64:	2500      	movs	r5, #0
    while(*format) {
 8013a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a68:	7818      	ldrb	r0, [r3, #0]
 8013a6a:	b968      	cbnz	r0, 8013a88 <_vsnprintf+0x3c>
                break;
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8013a6c:	42bd      	cmp	r5, r7
 8013a6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013a70:	bf2c      	ite	cs
 8013a72:	f107 32ff 	addcs.w	r2, r7, #4294967295
 8013a76:	462a      	movcc	r2, r5
 8013a78:	463b      	mov	r3, r7
 8013a7a:	4641      	mov	r1, r8
 8013a7c:	2000      	movs	r0, #0
 8013a7e:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int)idx;
}
 8013a80:	4628      	mov	r0, r5
 8013a82:	b015      	add	sp, #84	; 0x54
 8013a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            format++;
 8013a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if(*format != '%') {
 8013a8a:	2825      	cmp	r0, #37	; 0x25
            format++;
 8013a8c:	f103 0301 	add.w	r3, r3, #1
 8013a90:	930c      	str	r3, [sp, #48]	; 0x30
        if(*format != '%') {
 8013a92:	d007      	beq.n	8013aa4 <_vsnprintf+0x58>
                out(*format, buffer, idx++, maxlen);
 8013a94:	1c6c      	adds	r4, r5, #1
 8013a96:	462a      	mov	r2, r5
 8013a98:	463b      	mov	r3, r7
 8013a9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013a9c:	4641      	mov	r1, r8
 8013a9e:	47a8      	blx	r5
 8013aa0:	4625      	mov	r5, r4
                break;
 8013aa2:	e7e0      	b.n	8013a66 <_vsnprintf+0x1a>
        flags = 0U;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	e006      	b.n	8013ab6 <_vsnprintf+0x6a>
            switch(*format) {
 8013aa8:	2a2d      	cmp	r2, #45	; 0x2d
 8013aaa:	d015      	beq.n	8013ad8 <_vsnprintf+0x8c>
 8013aac:	2a30      	cmp	r2, #48	; 0x30
 8013aae:	d10c      	bne.n	8013aca <_vsnprintf+0x7e>
                    flags |= FLAGS_ZEROPAD;
 8013ab0:	f043 0301 	orr.w	r3, r3, #1
            format++;
 8013ab4:	910c      	str	r1, [sp, #48]	; 0x30
            switch(*format) {
 8013ab6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013ab8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013abc:	2a2b      	cmp	r2, #43	; 0x2b
 8013abe:	d00e      	beq.n	8013ade <_vsnprintf+0x92>
 8013ac0:	d8f2      	bhi.n	8013aa8 <_vsnprintf+0x5c>
 8013ac2:	2a20      	cmp	r2, #32
 8013ac4:	d00e      	beq.n	8013ae4 <_vsnprintf+0x98>
 8013ac6:	2a23      	cmp	r2, #35	; 0x23
 8013ac8:	d00f      	beq.n	8013aea <_vsnprintf+0x9e>
        if(_is_digit(*format)) {
 8013aca:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8013ace:	2809      	cmp	r0, #9
 8013ad0:	d82c      	bhi.n	8013b2c <_vsnprintf+0xe0>
    unsigned int i = 0U;
 8013ad2:	f04f 0900 	mov.w	r9, #0
 8013ad6:	e011      	b.n	8013afc <_vsnprintf+0xb0>
                    flags |= FLAGS_LEFT;
 8013ad8:	f043 0302 	orr.w	r3, r3, #2
        } while(n);
 8013adc:	e7ea      	b.n	8013ab4 <_vsnprintf+0x68>
                    flags |= FLAGS_PLUS;
 8013ade:	f043 0304 	orr.w	r3, r3, #4
        } while(n);
 8013ae2:	e7e7      	b.n	8013ab4 <_vsnprintf+0x68>
                    flags |= FLAGS_SPACE;
 8013ae4:	f043 0308 	orr.w	r3, r3, #8
        } while(n);
 8013ae8:	e7e4      	b.n	8013ab4 <_vsnprintf+0x68>
                    flags |= FLAGS_HASH;
 8013aea:	f043 0310 	orr.w	r3, r3, #16
        } while(n);
 8013aee:	e7e1      	b.n	8013ab4 <_vsnprintf+0x68>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8013af0:	200a      	movs	r0, #10
 8013af2:	fb00 2209 	mla	r2, r0, r9, r2
 8013af6:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8013afa:	910c      	str	r1, [sp, #48]	; 0x30
    while(_is_digit(**str)) {
 8013afc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013afe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b02:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8013b06:	2809      	cmp	r0, #9
 8013b08:	d9f2      	bls.n	8013af0 <_vsnprintf+0xa4>
        if(*format == '.') {
 8013b0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b0c:	7812      	ldrb	r2, [r2, #0]
 8013b0e:	2a2e      	cmp	r2, #46	; 0x2e
            format++;
 8013b10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        if(*format == '.') {
 8013b12:	d15e      	bne.n	8013bd2 <_vsnprintf+0x186>
            if(_is_digit(*format)) {
 8013b14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013b16:	7849      	ldrb	r1, [r1, #1]
 8013b18:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8013b1c:	2809      	cmp	r0, #9
            format++;
 8013b1e:	f102 0201 	add.w	r2, r2, #1
            flags |= FLAGS_PRECISION;
 8013b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
            if(_is_digit(*format)) {
 8013b26:	d84b      	bhi.n	8013bc0 <_vsnprintf+0x174>
    unsigned int i = 0U;
 8013b28:	2400      	movs	r4, #0
 8013b2a:	e014      	b.n	8013b56 <_vsnprintf+0x10a>
        else if(*format == '*') {
 8013b2c:	2a2a      	cmp	r2, #42	; 0x2a
 8013b2e:	d10a      	bne.n	8013b46 <_vsnprintf+0xfa>
            const int w = va_arg(va, int);
 8013b30:	f856 9b04 	ldr.w	r9, [r6], #4
 8013b34:	910c      	str	r1, [sp, #48]	; 0x30
            if(w < 0) {
 8013b36:	f1b9 0f00 	cmp.w	r9, #0
                flags |= FLAGS_LEFT;    // reverse padding
 8013b3a:	bfbc      	itt	lt
 8013b3c:	f043 0302 	orrlt.w	r3, r3, #2
                width = (unsigned int) - w;
 8013b40:	f1c9 0900 	rsblt	r9, r9, #0
            format++;
 8013b44:	e7e1      	b.n	8013b0a <_vsnprintf+0xbe>
        width = 0U;
 8013b46:	f04f 0900 	mov.w	r9, #0
 8013b4a:	e7de      	b.n	8013b0a <_vsnprintf+0xbe>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8013b4c:	220a      	movs	r2, #10
 8013b4e:	fb02 1404 	mla	r4, r2, r4, r1
 8013b52:	3c30      	subs	r4, #48	; 0x30
 8013b54:	4602      	mov	r2, r0
    while(_is_digit(**str)) {
 8013b56:	4610      	mov	r0, r2
 8013b58:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013b5c:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
 8013b60:	f1bc 0f09 	cmp.w	ip, #9
 8013b64:	d9f2      	bls.n	8013b4c <_vsnprintf+0x100>
        switch(*format) {
 8013b66:	4693      	mov	fp, r2
 8013b68:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8013b6c:	296c      	cmp	r1, #108	; 0x6c
 8013b6e:	d039      	beq.n	8013be4 <_vsnprintf+0x198>
 8013b70:	d831      	bhi.n	8013bd6 <_vsnprintf+0x18a>
 8013b72:	2968      	cmp	r1, #104	; 0x68
 8013b74:	d03e      	beq.n	8013bf4 <_vsnprintf+0x1a8>
 8013b76:	296a      	cmp	r1, #106	; 0x6a
 8013b78:	d045      	beq.n	8013c06 <_vsnprintf+0x1ba>
 8013b7a:	4693      	mov	fp, r2
        switch(*format) {
 8013b7c:	465a      	mov	r2, fp
 8013b7e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8013b82:	920c      	str	r2, [sp, #48]	; 0x30
 8013b84:	2878      	cmp	r0, #120	; 0x78
 8013b86:	d885      	bhi.n	8013a94 <_vsnprintf+0x48>
 8013b88:	2861      	cmp	r0, #97	; 0x61
 8013b8a:	d83f      	bhi.n	8013c0c <_vsnprintf+0x1c0>
 8013b8c:	2825      	cmp	r0, #37	; 0x25
 8013b8e:	d081      	beq.n	8013a94 <_vsnprintf+0x48>
 8013b90:	2824      	cmp	r0, #36	; 0x24
 8013b92:	f67f af7f 	bls.w	8013a94 <_vsnprintf+0x48>
 8013b96:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
 8013b9a:	2a50      	cmp	r2, #80	; 0x50
 8013b9c:	f47f af7a 	bne.w	8013a94 <_vsnprintf+0x48>
                    if(*format == 'x' || *format == 'X') {
 8013ba0:	f000 02df 	and.w	r2, r0, #223	; 0xdf
 8013ba4:	2a58      	cmp	r2, #88	; 0x58
 8013ba6:	d009      	beq.n	8013bbc <_vsnprintf+0x170>
                    else if(*format == 'p' || *format == 'P') {
 8013ba8:	2a50      	cmp	r2, #80	; 0x50
 8013baa:	d165      	bne.n	8013c78 <_vsnprintf+0x22c>
                        if(*(format + 1) == 'V')
 8013bac:	f89b 2001 	ldrb.w	r2, [fp, #1]
                            format++;
 8013bb0:	990c      	ldr	r1, [sp, #48]	; 0x30
                            flags |= FLAGS_LONG;
 8013bb2:	f443 7388 	orr.w	r3, r3, #272	; 0x110
                            format++;
 8013bb6:	2a56      	cmp	r2, #86	; 0x56
 8013bb8:	bf08      	it	eq
 8013bba:	468b      	moveq	fp, r1
                        base = 16U;
 8013bbc:	2210      	movs	r2, #16
 8013bbe:	e062      	b.n	8013c86 <_vsnprintf+0x23a>
            else if(*format == '*') {
 8013bc0:	292a      	cmp	r1, #42	; 0x2a
 8013bc2:	d106      	bne.n	8013bd2 <_vsnprintf+0x186>
                precision = prec > 0 ? (unsigned int)prec : 0U;
 8013bc4:	f856 4b04 	ldr.w	r4, [r6], #4
                format++;
 8013bc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                precision = prec > 0 ? (unsigned int)prec : 0U;
 8013bca:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                format++;
 8013bce:	3202      	adds	r2, #2
 8013bd0:	e7c9      	b.n	8013b66 <_vsnprintf+0x11a>
        precision = 0U;
 8013bd2:	2400      	movs	r4, #0
 8013bd4:	e7c7      	b.n	8013b66 <_vsnprintf+0x11a>
        switch(*format) {
 8013bd6:	2974      	cmp	r1, #116	; 0x74
 8013bd8:	d001      	beq.n	8013bde <_vsnprintf+0x192>
 8013bda:	297a      	cmp	r1, #122	; 0x7a
 8013bdc:	d1cd      	bne.n	8013b7a <_vsnprintf+0x12e>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8013bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
                break;
 8013be2:	e7cb      	b.n	8013b7c <_vsnprintf+0x130>
                if(*format == 'l') {
 8013be4:	7851      	ldrb	r1, [r2, #1]
 8013be6:	296c      	cmp	r1, #108	; 0x6c
 8013be8:	d1f9      	bne.n	8013bde <_vsnprintf+0x192>
                    flags |= FLAGS_LONG_LONG;
 8013bea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
                    format++;
 8013bee:	f102 0b02 	add.w	fp, r2, #2
 8013bf2:	e7c3      	b.n	8013b7c <_vsnprintf+0x130>
                if(*format == 'h') {
 8013bf4:	7851      	ldrb	r1, [r2, #1]
 8013bf6:	2968      	cmp	r1, #104	; 0x68
 8013bf8:	d002      	beq.n	8013c00 <_vsnprintf+0x1b4>
                flags |= FLAGS_SHORT;
 8013bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bfe:	e7bd      	b.n	8013b7c <_vsnprintf+0x130>
                    flags |= FLAGS_CHAR;
 8013c00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013c04:	e7f3      	b.n	8013bee <_vsnprintf+0x1a2>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8013c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
                break;
 8013c0a:	e7b7      	b.n	8013b7c <_vsnprintf+0x130>
        switch(*format) {
 8013c0c:	f1a0 0262 	sub.w	r2, r0, #98	; 0x62
 8013c10:	2a16      	cmp	r2, #22
 8013c12:	f63f af3f 	bhi.w	8013a94 <_vsnprintf+0x48>
 8013c16:	a101      	add	r1, pc, #4	; (adr r1, 8013c1c <_vsnprintf+0x1d0>)
 8013c18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013c1c:	08013ba1 	.word	0x08013ba1
 8013c20:	08013dcd 	.word	0x08013dcd
 8013c24:	08013ba1 	.word	0x08013ba1
 8013c28:	08013a95 	.word	0x08013a95
 8013c2c:	08013a95 	.word	0x08013a95
 8013c30:	08013a95 	.word	0x08013a95
 8013c34:	08013a95 	.word	0x08013a95
 8013c38:	08013ba1 	.word	0x08013ba1
 8013c3c:	08013a95 	.word	0x08013a95
 8013c40:	08013a95 	.word	0x08013a95
 8013c44:	08013a95 	.word	0x08013a95
 8013c48:	08013a95 	.word	0x08013a95
 8013c4c:	08013a95 	.word	0x08013a95
 8013c50:	08013ba1 	.word	0x08013ba1
 8013c54:	08013ba1 	.word	0x08013ba1
 8013c58:	08013a95 	.word	0x08013a95
 8013c5c:	08013a95 	.word	0x08013a95
 8013c60:	08013e53 	.word	0x08013e53
 8013c64:	08013a95 	.word	0x08013a95
 8013c68:	08013ba1 	.word	0x08013ba1
 8013c6c:	08013a95 	.word	0x08013a95
 8013c70:	08013a95 	.word	0x08013a95
 8013c74:	08013ba1 	.word	0x08013ba1
                    else if(*format == 'o') {
 8013c78:	286f      	cmp	r0, #111	; 0x6f
 8013c7a:	d00f      	beq.n	8013c9c <_vsnprintf+0x250>
                    else if(*format == 'b') {
 8013c7c:	2862      	cmp	r0, #98	; 0x62
 8013c7e:	d00f      	beq.n	8013ca0 <_vsnprintf+0x254>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
 8013c80:	f023 0310 	bic.w	r3, r3, #16
                        base = 10U;
 8013c84:	220a      	movs	r2, #10
                    if(*format == 'X' || *format == 'P') {
 8013c86:	f89b 1000 	ldrb.w	r1, [fp]
 8013c8a:	f001 00f7 	and.w	r0, r1, #247	; 0xf7
 8013c8e:	2850      	cmp	r0, #80	; 0x50
 8013c90:	d108      	bne.n	8013ca4 <_vsnprintf+0x258>
                        flags |= FLAGS_UPPERCASE;
 8013c92:	f043 0320 	orr.w	r3, r3, #32
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8013c96:	f023 030c 	bic.w	r3, r3, #12
 8013c9a:	e007      	b.n	8013cac <_vsnprintf+0x260>
                        base =  8U;
 8013c9c:	2208      	movs	r2, #8
 8013c9e:	e7f2      	b.n	8013c86 <_vsnprintf+0x23a>
                        base =  2U;
 8013ca0:	2202      	movs	r2, #2
 8013ca2:	e7f0      	b.n	8013c86 <_vsnprintf+0x23a>
                    if((*format != 'i') && (*format != 'd')) {
 8013ca4:	2969      	cmp	r1, #105	; 0x69
 8013ca6:	d001      	beq.n	8013cac <_vsnprintf+0x260>
 8013ca8:	2964      	cmp	r1, #100	; 0x64
 8013caa:	d1f4      	bne.n	8013c96 <_vsnprintf+0x24a>
                    if(flags & FLAGS_PRECISION) {
 8013cac:	0558      	lsls	r0, r3, #21
                        flags &= ~FLAGS_ZEROPAD;
 8013cae:	bf48      	it	mi
 8013cb0:	f023 0301 	bicmi.w	r3, r3, #1
                    if((*format == 'i') || (*format == 'd')) {
 8013cb4:	2969      	cmp	r1, #105	; 0x69
 8013cb6:	d001      	beq.n	8013cbc <_vsnprintf+0x270>
 8013cb8:	2964      	cmp	r1, #100	; 0x64
 8013cba:	d13d      	bne.n	8013d38 <_vsnprintf+0x2ec>
                        if(flags & FLAGS_LONG_LONG) {
 8013cbc:	0598      	lsls	r0, r3, #22
 8013cbe:	d51e      	bpl.n	8013cfe <_vsnprintf+0x2b2>
                            const long long value = va_arg(va, long long);
 8013cc0:	3607      	adds	r6, #7
 8013cc2:	f026 0607 	bic.w	r6, r6, #7
 8013cc6:	46b2      	mov	sl, r6
 8013cc8:	6870      	ldr	r0, [r6, #4]
 8013cca:	f85a 1b08 	ldr.w	r1, [sl], #8
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 8013cce:	9406      	str	r4, [sp, #24]
 8013cd0:	e9cd 9307 	strd	r9, r3, [sp, #28]
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	9305      	str	r3, [sp, #20]
 8013cd8:	0fc3      	lsrs	r3, r0, #31
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	9302      	str	r3, [sp, #8]
 8013cde:	9204      	str	r2, [sp, #16]
 8013ce0:	460b      	mov	r3, r1
 8013ce2:	da02      	bge.n	8013cea <_vsnprintf+0x29e>
 8013ce4:	424b      	negs	r3, r1
 8013ce6:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8013cea:	e9cd 3000 	strd	r3, r0, [sp]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8013cee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013cf0:	463b      	mov	r3, r7
 8013cf2:	462a      	mov	r2, r5
 8013cf4:	4641      	mov	r1, r8
 8013cf6:	f7ff fe4d 	bl	8013994 <_ntoa_long_long>
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8013cfa:	4605      	mov	r5, r0
 8013cfc:	e02d      	b.n	8013d5a <_vsnprintf+0x30e>
                        else if(flags & FLAGS_LONG) {
 8013cfe:	05d9      	lsls	r1, r3, #23
                        lv_vaformat_t * vaf = va_arg(va, lv_vaformat_t *);
 8013d00:	f106 0a04 	add.w	sl, r6, #4
                        else if(flags & FLAGS_LONG) {
 8013d04:	d50e      	bpl.n	8013d24 <_vsnprintf+0x2d8>
                            const long value = va_arg(va, long);
 8013d06:	6831      	ldr	r1, [r6, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
 8013d08:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8013d0c:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8013d10:	2900      	cmp	r1, #0
 8013d12:	ea4f 73d1 	mov.w	r3, r1, lsr #31
 8013d16:	9301      	str	r3, [sp, #4]
 8013d18:	bfb8      	it	lt
 8013d1a:	4249      	neglt	r1, r1
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8013d1c:	9100      	str	r1, [sp, #0]
 8013d1e:	e03e      	b.n	8013d9e <_vsnprintf+0x352>
 8013d20:	080137b3 	.word	0x080137b3
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 8013d24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013d28:	6831      	ldr	r1, [r6, #0]
 8013d2a:	d001      	beq.n	8013d30 <_vsnprintf+0x2e4>
 8013d2c:	b2c9      	uxtb	r1, r1
 8013d2e:	e7eb      	b.n	8013d08 <_vsnprintf+0x2bc>
                                                                                                                                       int) : va_arg(va, int);
 8013d30:	061e      	lsls	r6, r3, #24
 8013d32:	bf48      	it	mi
 8013d34:	b209      	sxthmi	r1, r1
 8013d36:	e7e7      	b.n	8013d08 <_vsnprintf+0x2bc>
                    else if(*format == 'V') {
 8013d38:	2956      	cmp	r1, #86	; 0x56
 8013d3a:	d113      	bne.n	8013d64 <_vsnprintf+0x318>
                        lv_vaformat_t * vaf = va_arg(va, lv_vaformat_t *);
 8013d3c:	46b2      	mov	sl, r6
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
 8013d3e:	eb08 0105 	add.w	r1, r8, r5
                        lv_vaformat_t * vaf = va_arg(va, lv_vaformat_t *);
 8013d42:	f85a 3b04 	ldr.w	r3, [sl], #4
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
 8013d46:	980b      	ldr	r0, [sp, #44]	; 0x2c
                        va_copy(copy, *vaf->va);
 8013d48:	685a      	ldr	r2, [r3, #4]
 8013d4a:	6812      	ldr	r2, [r2, #0]
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
 8013d4c:	9200      	str	r2, [sp, #0]
                        va_copy(copy, *vaf->va);
 8013d4e:	9213      	str	r2, [sp, #76]	; 0x4c
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	1b7a      	subs	r2, r7, r5
 8013d54:	f7ff fe7a 	bl	8013a4c <_vsnprintf>
 8013d58:	4405      	add	r5, r0
                    format++;
 8013d5a:	f10b 0301 	add.w	r3, fp, #1
 8013d5e:	930c      	str	r3, [sp, #48]	; 0x30
                    break;
 8013d60:	4656      	mov	r6, sl
 8013d62:	e680      	b.n	8013a66 <_vsnprintf+0x1a>
                        if(flags & FLAGS_LONG_LONG) {
 8013d64:	f413 7100 	ands.w	r1, r3, #512	; 0x200
 8013d68:	d00e      	beq.n	8013d88 <_vsnprintf+0x33c>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8013d6a:	e9cd 9307 	strd	r9, r3, [sp, #28]
 8013d6e:	3607      	adds	r6, #7
 8013d70:	2300      	movs	r3, #0
 8013d72:	f026 0a07 	bic.w	sl, r6, #7
 8013d76:	9406      	str	r4, [sp, #24]
 8013d78:	9204      	str	r2, [sp, #16]
 8013d7a:	9305      	str	r3, [sp, #20]
 8013d7c:	9302      	str	r3, [sp, #8]
 8013d7e:	e8fa 2302 	ldrd	r2, r3, [sl], #8
 8013d82:	e9cd 2300 	strd	r2, r3, [sp]
 8013d86:	e7b2      	b.n	8013cee <_vsnprintf+0x2a2>
                        else if(flags & FLAGS_LONG) {
 8013d88:	05d8      	lsls	r0, r3, #23
                        lv_vaformat_t * vaf = va_arg(va, lv_vaformat_t *);
 8013d8a:	f106 0a04 	add.w	sl, r6, #4
                        else if(flags & FLAGS_LONG) {
 8013d8e:	d50d      	bpl.n	8013dac <_vsnprintf+0x360>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8013d90:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8013d94:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8013d98:	9101      	str	r1, [sp, #4]
 8013d9a:	6833      	ldr	r3, [r6, #0]
 8013d9c:	9300      	str	r3, [sp, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8013d9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013da0:	463b      	mov	r3, r7
 8013da2:	462a      	mov	r2, r5
 8013da4:	4641      	mov	r1, r8
 8013da6:	f7ff fdb3 	bl	8013910 <_ntoa_long>
 8013daa:	e7a6      	b.n	8013cfa <_vsnprintf+0x2ae>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8013dac:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013db0:	6831      	ldr	r1, [r6, #0]
 8013db2:	d007      	beq.n	8013dc4 <_vsnprintf+0x378>
 8013db4:	b2c9      	uxtb	r1, r1
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8013db6:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8013dba:	2300      	movs	r3, #0
 8013dbc:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8013dc0:	9301      	str	r3, [sp, #4]
 8013dc2:	e7ab      	b.n	8013d1c <_vsnprintf+0x2d0>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8013dc4:	0618      	lsls	r0, r3, #24
 8013dc6:	bf48      	it	mi
 8013dc8:	b289      	uxthmi	r1, r1
 8013dca:	e7f4      	b.n	8013db6 <_vsnprintf+0x36a>
                    if(!(flags & FLAGS_LEFT)) {
 8013dcc:	f013 0302 	ands.w	r3, r3, #2
 8013dd0:	930d      	str	r3, [sp, #52]	; 0x34
 8013dd2:	d028      	beq.n	8013e26 <_vsnprintf+0x3da>
                    unsigned int l = 1U;
 8013dd4:	f04f 0a01 	mov.w	sl, #1
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 8013dd8:	f856 0b04 	ldr.w	r0, [r6], #4
 8013ddc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013dde:	463b      	mov	r3, r7
 8013de0:	462a      	mov	r2, r5
 8013de2:	4641      	mov	r1, r8
 8013de4:	b2c0      	uxtb	r0, r0
 8013de6:	47a0      	blx	r4
                    if(flags & FLAGS_LEFT) {
 8013de8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 8013dea:	f105 0b01 	add.w	fp, r5, #1
                    if(flags & FLAGS_LEFT) {
 8013dee:	b373      	cbz	r3, 8013e4e <_vsnprintf+0x402>
 8013df0:	4654      	mov	r4, sl
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 8013df2:	465a      	mov	r2, fp
 8013df4:	e023      	b.n	8013e3e <_vsnprintf+0x3f2>
                            out(' ', buffer, idx++, maxlen);
 8013df6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013df8:	463b      	mov	r3, r7
 8013dfa:	4641      	mov	r1, r8
 8013dfc:	2020      	movs	r0, #32
 8013dfe:	47a0      	blx	r4
 8013e00:	eb05 020a 	add.w	r2, r5, sl
                        while(l++ < width) {
 8013e04:	f10a 0a01 	add.w	sl, sl, #1
 8013e08:	45d1      	cmp	r9, sl
 8013e0a:	d8f4      	bhi.n	8013df6 <_vsnprintf+0x3aa>
 8013e0c:	f1b9 0f00 	cmp.w	r9, #0
 8013e10:	f109 33ff 	add.w	r3, r9, #4294967295
 8013e14:	bf08      	it	eq
 8013e16:	2300      	moveq	r3, #0
 8013e18:	f109 0a01 	add.w	sl, r9, #1
 8013e1c:	441d      	add	r5, r3
 8013e1e:	bf08      	it	eq
 8013e20:	f04f 0a02 	moveq.w	sl, #2
 8013e24:	e7d8      	b.n	8013dd8 <_vsnprintf+0x38c>
 8013e26:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8013e2a:	e7e9      	b.n	8013e00 <_vsnprintf+0x3b4>
                            out(' ', buffer, idx++, maxlen);
 8013e2c:	1c53      	adds	r3, r2, #1
 8013e2e:	930d      	str	r3, [sp, #52]	; 0x34
 8013e30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013e32:	463b      	mov	r3, r7
 8013e34:	4641      	mov	r1, r8
 8013e36:	2020      	movs	r0, #32
 8013e38:	47a8      	blx	r5
 8013e3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e3c:	3401      	adds	r4, #1
                        while(l++ < width) {
 8013e3e:	45a1      	cmp	r9, r4
 8013e40:	d8f4      	bhi.n	8013e2c <_vsnprintf+0x3e0>
 8013e42:	eba9 030a 	sub.w	r3, r9, sl
 8013e46:	45d1      	cmp	r9, sl
 8013e48:	bf38      	it	cc
 8013e4a:	2300      	movcc	r3, #0
 8013e4c:	449b      	add	fp, r3
                    break;
 8013e4e:	465d      	mov	r5, fp
 8013e50:	e609      	b.n	8013a66 <_vsnprintf+0x1a>
                    const char * p = va_arg(va, char *);
 8013e52:	4632      	mov	r2, r6
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 8013e54:	2c00      	cmp	r4, #0
                    const char * p = va_arg(va, char *);
 8013e56:	f852 ab04 	ldr.w	sl, [r2], #4
 8013e5a:	920d      	str	r2, [sp, #52]	; 0x34
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 8013e5c:	bf14      	ite	ne
 8013e5e:	4622      	movne	r2, r4
 8013e60:	f04f 32ff 	moveq.w	r2, #4294967295
 8013e64:	4452      	add	r2, sl
 8013e66:	46d3      	mov	fp, sl
    for(s = str; *s && maxsize--; ++s);
 8013e68:	f89b 1000 	ldrb.w	r1, [fp]
 8013e6c:	b109      	cbz	r1, 8013e72 <_vsnprintf+0x426>
 8013e6e:	4593      	cmp	fp, r2
 8013e70:	d111      	bne.n	8013e96 <_vsnprintf+0x44a>
                    if(flags & FLAGS_PRECISION) {
 8013e72:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
    return (unsigned int)(s - str);
 8013e76:	ebab 0b0a 	sub.w	fp, fp, sl
                    if(flags & FLAGS_PRECISION) {
 8013e7a:	920e      	str	r2, [sp, #56]	; 0x38
 8013e7c:	d002      	beq.n	8013e84 <_vsnprintf+0x438>
                        l = (l < precision ? l : precision);
 8013e7e:	45a3      	cmp	fp, r4
 8013e80:	bf28      	it	cs
 8013e82:	46a3      	movcs	fp, r4
                    if(!(flags & FLAGS_LEFT)) {
 8013e84:	f013 0302 	ands.w	r3, r3, #2
 8013e88:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e8a:	d11c      	bne.n	8013ec6 <_vsnprintf+0x47a>
 8013e8c:	ebab 0305 	sub.w	r3, fp, r5
 8013e90:	462a      	mov	r2, r5
 8013e92:	9311      	str	r3, [sp, #68]	; 0x44
 8013e94:	e00a      	b.n	8013eac <_vsnprintf+0x460>
    for(s = str; *s && maxsize--; ++s);
 8013e96:	f10b 0b01 	add.w	fp, fp, #1
 8013e9a:	e7e5      	b.n	8013e68 <_vsnprintf+0x41c>
                            out(' ', buffer, idx++, maxlen);
 8013e9c:	1c53      	adds	r3, r2, #1
 8013e9e:	9310      	str	r3, [sp, #64]	; 0x40
 8013ea0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013ea2:	463b      	mov	r3, r7
 8013ea4:	4641      	mov	r1, r8
 8013ea6:	2020      	movs	r0, #32
 8013ea8:	47b0      	blx	r6
 8013eaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
                        while(l++ < width) {
 8013eac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013eae:	18d3      	adds	r3, r2, r3
 8013eb0:	4599      	cmp	r9, r3
 8013eb2:	d8f3      	bhi.n	8013e9c <_vsnprintf+0x450>
 8013eb4:	eba9 030b 	sub.w	r3, r9, fp
 8013eb8:	45d9      	cmp	r9, fp
 8013eba:	bf38      	it	cc
 8013ebc:	2300      	movcc	r3, #0
 8013ebe:	f10b 0b01 	add.w	fp, fp, #1
 8013ec2:	441d      	add	r5, r3
 8013ec4:	449b      	add	fp, r3
 8013ec6:	eba5 060a 	sub.w	r6, r5, sl
 8013eca:	e005      	b.n	8013ed8 <_vsnprintf+0x48c>
 8013ecc:	461c      	mov	r4, r3
                        out(*(p++), buffer, idx++, maxlen);
 8013ece:	462a      	mov	r2, r5
 8013ed0:	463b      	mov	r3, r7
 8013ed2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013ed4:	4641      	mov	r1, r8
 8013ed6:	47a8      	blx	r5
 8013ed8:	eb06 050a 	add.w	r5, r6, sl
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8013edc:	f81a 0b01 	ldrb.w	r0, [sl], #1
 8013ee0:	b128      	cbz	r0, 8013eee <_vsnprintf+0x4a2>
 8013ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d0f2      	beq.n	8013ece <_vsnprintf+0x482>
 8013ee8:	1e63      	subs	r3, r4, #1
 8013eea:	2c00      	cmp	r4, #0
 8013eec:	d1ee      	bne.n	8013ecc <_vsnprintf+0x480>
                    if(flags & FLAGS_LEFT) {
 8013eee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ef0:	b1a3      	cbz	r3, 8013f1c <_vsnprintf+0x4d0>
 8013ef2:	462a      	mov	r2, r5
 8013ef4:	ebab 0a05 	sub.w	sl, fp, r5
 8013ef8:	e006      	b.n	8013f08 <_vsnprintf+0x4bc>
                            out(' ', buffer, idx++, maxlen);
 8013efa:	1c56      	adds	r6, r2, #1
 8013efc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013efe:	463b      	mov	r3, r7
 8013f00:	4641      	mov	r1, r8
 8013f02:	2020      	movs	r0, #32
 8013f04:	47a0      	blx	r4
 8013f06:	4632      	mov	r2, r6
                        while(l++ < width) {
 8013f08:	eb02 030a 	add.w	r3, r2, sl
 8013f0c:	454b      	cmp	r3, r9
 8013f0e:	d3f4      	bcc.n	8013efa <_vsnprintf+0x4ae>
 8013f10:	eba9 030b 	sub.w	r3, r9, fp
 8013f14:	45d9      	cmp	r9, fp
 8013f16:	bf38      	it	cc
 8013f18:	2300      	movcc	r3, #0
 8013f1a:	441d      	add	r5, r3
                    const char * p = va_arg(va, char *);
 8013f1c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
                    break;
 8013f1e:	e5a2      	b.n	8013a66 <_vsnprintf+0x1a>

08013f20 <lv_snprintf>:

///////////////////////////////////////////////////////////////////////////////

int lv_snprintf(char * buffer, size_t count, const char * format, ...)
{
 8013f20:	b40c      	push	{r2, r3}
 8013f22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f24:	ac06      	add	r4, sp, #24
 8013f26:	460a      	mov	r2, r1
 8013f28:	f854 3b04 	ldr.w	r3, [r4], #4
    va_list va;
    va_start(va, format);
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8013f2c:	9400      	str	r4, [sp, #0]
 8013f2e:	4601      	mov	r1, r0
 8013f30:	4804      	ldr	r0, [pc, #16]	; (8013f44 <lv_snprintf+0x24>)
    va_start(va, format);
 8013f32:	9403      	str	r4, [sp, #12]
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8013f34:	f7ff fd8a 	bl	8013a4c <_vsnprintf>
    va_end(va);
    return ret;
}
 8013f38:	b004      	add	sp, #16
 8013f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f3e:	b002      	add	sp, #8
 8013f40:	4770      	bx	lr
 8013f42:	bf00      	nop
 8013f44:	080137ab 	.word	0x080137ab

08013f48 <lv_style_set_prop_helper>:
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
    *prop_storage = prop;
 8013f48:	8010      	strh	r0, [r2, #0]
    *value_storage = value;
 8013f4a:	6019      	str	r1, [r3, #0]
}
 8013f4c:	4770      	bx	lr

08013f4e <lv_style_init>:
    lv_memset_00(style, sizeof(lv_style_t));
 8013f4e:	2108      	movs	r1, #8
 8013f50:	f7ff bbd3 	b.w	80136fa <lv_memset_00>

08013f54 <lv_style_reset>:
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8013f54:	8882      	ldrh	r2, [r0, #4]
 8013f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f5a:	429a      	cmp	r2, r3
{
 8013f5c:	b510      	push	{r4, lr}
 8013f5e:	4604      	mov	r4, r0
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8013f60:	d00b      	beq.n	8013f7a <lv_style_reset+0x26>
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8013f62:	79c3      	ldrb	r3, [r0, #7]
 8013f64:	2b01      	cmp	r3, #1
 8013f66:	d902      	bls.n	8013f6e <lv_style_reset+0x1a>
 8013f68:	6800      	ldr	r0, [r0, #0]
 8013f6a:	f7ff f9fb 	bl	8013364 <lv_mem_free>
    lv_memset_00(style, sizeof(lv_style_t));
 8013f6e:	4620      	mov	r0, r4
 8013f70:	2108      	movs	r1, #8
}
 8013f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_memset_00(style, sizeof(lv_style_t));
 8013f76:	f7ff bbc0 	b.w	80136fa <lv_memset_00>
}
 8013f7a:	bd10      	pop	{r4, pc}

08013f7c <lv_style_register_prop>:
{
 8013f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) == NULL) {
 8013f80:	4f18      	ldr	r7, [pc, #96]	; (8013fe4 <lv_style_register_prop+0x68>)
 8013f82:	4d19      	ldr	r5, [pc, #100]	; (8013fe8 <lv_style_register_prop+0x6c>)
{
 8013f84:	4606      	mov	r6, r0
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) == NULL) {
 8013f86:	6838      	ldr	r0, [r7, #0]
 8013f88:	b918      	cbnz	r0, 8013f92 <lv_style_register_prop+0x16>
        _lv_style_custom_prop_flag_lookup_table_size = 0;
 8013f8a:	4b18      	ldr	r3, [pc, #96]	; (8013fec <lv_style_register_prop+0x70>)
 8013f8c:	6018      	str	r0, [r3, #0]
        last_custom_prop_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
 8013f8e:	236f      	movs	r3, #111	; 0x6f
 8013f90:	802b      	strh	r3, [r5, #0]
    if(((last_custom_prop_id + 1) & LV_STYLE_PROP_META_MASK) != 0) {
 8013f92:	8829      	ldrh	r1, [r5, #0]
 8013f94:	1c4b      	adds	r3, r1, #1
 8013f96:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8013f9a:	d002      	beq.n	8013fa2 <lv_style_register_prop+0x26>
        return LV_STYLE_PROP_INV;
 8013f9c:	2000      	movs	r0, #0
}
 8013f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_style_custom_prop_flag_lookup_table_size < required_size) {
 8013fa2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8013fec <lv_style_register_prop+0x70>
 8013fa6:	f8d8 2000 	ldr.w	r2, [r8]
    size_t required_size = (last_custom_prop_id + 1 - _LV_STYLE_LAST_BUILT_IN_PROP);
 8013faa:	f1a1 036e 	sub.w	r3, r1, #110	; 0x6e
    if(_lv_style_custom_prop_flag_lookup_table_size < required_size) {
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d20c      	bcs.n	8013fcc <lv_style_register_prop+0x50>
        required_size = (required_size + 31) & ~31;
 8013fb2:	394f      	subs	r1, #79	; 0x4f
        LV_ASSERT_MSG(required_size > 0, "required size has become 0?");
 8013fb4:	f031 041f 	bics.w	r4, r1, #31
 8013fb8:	d100      	bne.n	8013fbc <lv_style_register_prop+0x40>
 8013fba:	e7fe      	b.n	8013fba <lv_style_register_prop+0x3e>
        uint8_t * new_p = lv_mem_realloc(old_p, required_size * sizeof(uint8_t));
 8013fbc:	4621      	mov	r1, r4
 8013fbe:	f7ff f9e9 	bl	8013394 <lv_mem_realloc>
        if(new_p == NULL) {
 8013fc2:	2800      	cmp	r0, #0
 8013fc4:	d0ea      	beq.n	8013f9c <lv_style_register_prop+0x20>
        LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) = new_p;
 8013fc6:	6038      	str	r0, [r7, #0]
        _lv_style_custom_prop_flag_lookup_table_size = required_size;
 8013fc8:	f8c8 4000 	str.w	r4, [r8]
    last_custom_prop_id++;
 8013fcc:	882b      	ldrh	r3, [r5, #0]
 8013fce:	3301      	adds	r3, #1
 8013fd0:	b298      	uxth	r0, r3
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 8013fd2:	683b      	ldr	r3, [r7, #0]
    last_custom_prop_id++;
 8013fd4:	8028      	strh	r0, [r5, #0]
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 8013fd6:	b903      	cbnz	r3, 8013fda <lv_style_register_prop+0x5e>
 8013fd8:	e7fe      	b.n	8013fd8 <lv_style_register_prop+0x5c>
    LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[last_custom_prop_id - _LV_STYLE_NUM_BUILT_IN_PROPS] = flag;
 8013fda:	4403      	add	r3, r0
 8013fdc:	f803 6c70 	strb.w	r6, [r3, #-112]
    return last_custom_prop_id;
 8013fe0:	e7dd      	b.n	8013f9e <lv_style_register_prop+0x22>
 8013fe2:	bf00      	nop
 8013fe4:	20000e44 	.word	0x20000e44
 8013fe8:	20000018 	.word	0x20000018
 8013fec:	20006ee8 	.word	0x20006ee8

08013ff0 <lv_style_remove_prop>:
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8013ff0:	8882      	ldrh	r2, [r0, #4]
{
 8013ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8013ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ff8:	429a      	cmp	r2, r3
{
 8013ffa:	4604      	mov	r4, r0
 8013ffc:	460e      	mov	r6, r1
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8013ffe:	d04e      	beq.n	801409e <lv_style_remove_prop+0xae>
    if(style->prop_cnt == 0)  return false;
 8014000:	79c3      	ldrb	r3, [r0, #7]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d04b      	beq.n	801409e <lv_style_remove_prop+0xae>
    if(style->prop_cnt == 1) {
 8014006:	2b01      	cmp	r3, #1
 8014008:	d108      	bne.n	801401c <lv_style_remove_prop+0x2c>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 801400a:	f3c2 020d 	ubfx	r2, r2, #0, #14
 801400e:	428a      	cmp	r2, r1
 8014010:	d145      	bne.n	801409e <lv_style_remove_prop+0xae>
            style->prop1 = LV_STYLE_PROP_INV;
 8014012:	2200      	movs	r2, #0
 8014014:	8082      	strh	r2, [r0, #4]
            style->prop_cnt = 0;
 8014016:	71c2      	strb	r2, [r0, #7]
            return true;
 8014018:	2001      	movs	r0, #1
}
 801401a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801401c:	6805      	ldr	r5, [r0, #0]
    for(i = 0; i < style->prop_cnt; i++) {
 801401e:	2200      	movs	r2, #0
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8014020:	b218      	sxth	r0, r3
 8014022:	eb05 0783 	add.w	r7, r5, r3, lsl #2
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8014026:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 801402a:	f3c1 010d 	ubfx	r1, r1, #0, #14
 801402e:	42b1      	cmp	r1, r6
 8014030:	d132      	bne.n	8014098 <lv_style_remove_prop+0xa8>
            if(style->prop_cnt == 2) {
 8014032:	2b02      	cmp	r3, #2
 8014034:	d110      	bne.n	8014058 <lv_style_remove_prop+0x68>
                style->prop_cnt = 1;
 8014036:	2301      	movs	r3, #1
 8014038:	71e3      	strb	r3, [r4, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 801403a:	b942      	cbnz	r2, 801404e <lv_style_remove_prop+0x5e>
 801403c:	887b      	ldrh	r3, [r7, #2]
 801403e:	80a3      	strh	r3, [r4, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8014040:	b942      	cbnz	r2, 8014054 <lv_style_remove_prop+0x64>
 8014042:	686b      	ldr	r3, [r5, #4]
 8014044:	6023      	str	r3, [r4, #0]
            lv_mem_free(old_values);
 8014046:	4628      	mov	r0, r5
 8014048:	f7ff f98c 	bl	8013364 <lv_mem_free>
 801404c:	e7e4      	b.n	8014018 <lv_style_remove_prop+0x28>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 801404e:	f835 3020 	ldrh.w	r3, [r5, r0, lsl #2]
 8014052:	e7f4      	b.n	801403e <lv_style_remove_prop+0x4e>
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8014054:	682b      	ldr	r3, [r5, #0]
 8014056:	e7f5      	b.n	8014044 <lv_style_remove_prop+0x54>
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8014058:	3b01      	subs	r3, #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 801405a:	2006      	movs	r0, #6
 801405c:	4358      	muls	r0, r3
 801405e:	f7ff f963 	bl	8013328 <lv_mem_alloc>
                if(new_values_and_props == NULL) return false;
 8014062:	b1e0      	cbz	r0, 801409e <lv_style_remove_prop+0xae>
                style->prop_cnt--;
 8014064:	79e3      	ldrb	r3, [r4, #7]
                style->v_p.values_and_props = new_values_and_props;
 8014066:	6020      	str	r0, [r4, #0]
                style->prop_cnt--;
 8014068:	3b01      	subs	r3, #1
 801406a:	b2db      	uxtb	r3, r3
                for(i = j = 0; j <= style->prop_cnt;
 801406c:	2200      	movs	r2, #0
                style->prop_cnt--;
 801406e:	71e3      	strb	r3, [r4, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8014070:	ea4f 0e83 	mov.w	lr, r3, lsl #2
                for(i = j = 0; j <= style->prop_cnt;
 8014074:	4611      	mov	r1, r2
                    if(old_props[j] != prop) {
 8014076:	f837 c012 	ldrh.w	ip, [r7, r2, lsl #1]
 801407a:	45b4      	cmp	ip, r6
 801407c:	d008      	beq.n	8014090 <lv_style_remove_prop+0xa0>
                        new_values[i] = old_values[j];
 801407e:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 8014082:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
                        new_props[i++] = old_props[j];
 8014086:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 801408a:	3101      	adds	r1, #1
 801408c:	f824 c00e 	strh.w	ip, [r4, lr]
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8014090:	3201      	adds	r2, #1
                for(i = j = 0; j <= style->prop_cnt;
 8014092:	4293      	cmp	r3, r2
 8014094:	d2ef      	bcs.n	8014076 <lv_style_remove_prop+0x86>
 8014096:	e7d6      	b.n	8014046 <lv_style_remove_prop+0x56>
    for(i = 0; i < style->prop_cnt; i++) {
 8014098:	3201      	adds	r2, #1
 801409a:	4293      	cmp	r3, r2
 801409c:	d8c3      	bhi.n	8014026 <lv_style_remove_prop+0x36>
        return false;
 801409e:	2000      	movs	r0, #0
 80140a0:	e7bb      	b.n	801401a <lv_style_remove_prop+0x2a>
	...

080140a4 <lv_style_prop_get_default>:
    switch(prop) {
 80140a4:	2860      	cmp	r0, #96	; 0x60
 80140a6:	f200 8091 	bhi.w	80141cc <lv_style_prop_get_default+0x128>
 80140aa:	282f      	cmp	r0, #47	; 0x2f
 80140ac:	d80b      	bhi.n	80140c6 <lv_style_prop_get_default+0x22>
 80140ae:	2829      	cmp	r0, #41	; 0x29
 80140b0:	d807      	bhi.n	80140c2 <lv_style_prop_get_default+0x1e>
 80140b2:	281f      	cmp	r0, #31
 80140b4:	d870      	bhi.n	8014198 <lv_style_prop_get_default+0xf4>
 80140b6:	2803      	cmp	r0, #3
 80140b8:	f000 809d 	beq.w	80141f6 <lv_style_prop_get_default+0x152>
 80140bc:	2806      	cmp	r0, #6
 80140be:	f000 809a 	beq.w	80141f6 <lv_style_prop_get_default+0x152>
            value.ptr = NULL;
 80140c2:	2000      	movs	r0, #0
}
 80140c4:	4770      	bx	lr
    switch(prop) {
 80140c6:	3830      	subs	r0, #48	; 0x30
 80140c8:	2830      	cmp	r0, #48	; 0x30
 80140ca:	d8fa      	bhi.n	80140c2 <lv_style_prop_get_default+0x1e>
 80140cc:	a301      	add	r3, pc, #4	; (adr r3, 80140d4 <lv_style_prop_get_default+0x30>)
 80140ce:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80140d2:	bf00      	nop
 80140d4:	080141e3 	.word	0x080141e3
 80140d8:	080141eb 	.word	0x080141eb
 80140dc:	080140c3 	.word	0x080140c3
 80140e0:	080141ef 	.word	0x080141ef
 80140e4:	080140c3 	.word	0x080140c3
 80140e8:	080140c3 	.word	0x080140c3
 80140ec:	080141e3 	.word	0x080141e3
 80140f0:	080141eb 	.word	0x080141eb
 80140f4:	080140c3 	.word	0x080140c3
 80140f8:	080140c3 	.word	0x080140c3
 80140fc:	080140c3 	.word	0x080140c3
 8014100:	080140c3 	.word	0x080140c3
 8014104:	080140c3 	.word	0x080140c3
 8014108:	080140c3 	.word	0x080140c3
 801410c:	080140c3 	.word	0x080140c3
 8014110:	080140c3 	.word	0x080140c3
 8014114:	080140c3 	.word	0x080140c3
 8014118:	080140c3 	.word	0x080140c3
 801411c:	080140c3 	.word	0x080140c3
 8014120:	080140c3 	.word	0x080140c3
 8014124:	080141e3 	.word	0x080141e3
 8014128:	080141eb 	.word	0x080141eb
 801412c:	080141eb 	.word	0x080141eb
 8014130:	080141e3 	.word	0x080141e3
 8014134:	080140c3 	.word	0x080140c3
 8014138:	080140c3 	.word	0x080140c3
 801413c:	080140c3 	.word	0x080140c3
 8014140:	080140c3 	.word	0x080140c3
 8014144:	080140c3 	.word	0x080140c3
 8014148:	080141e3 	.word	0x080141e3
 801414c:	080141eb 	.word	0x080141eb
 8014150:	080140c3 	.word	0x080140c3
 8014154:	080140c3 	.word	0x080140c3
 8014158:	080140c3 	.word	0x080140c3
 801415c:	080141e3 	.word	0x080141e3
 8014160:	080141eb 	.word	0x080141eb
 8014164:	080140c3 	.word	0x080140c3
 8014168:	080141e3 	.word	0x080141e3
 801416c:	080141eb 	.word	0x080141eb
 8014170:	080141f3 	.word	0x080141f3
 8014174:	080140c3 	.word	0x080140c3
 8014178:	080140c3 	.word	0x080140c3
 801417c:	080140c3 	.word	0x080140c3
 8014180:	080140c3 	.word	0x080140c3
 8014184:	080140c3 	.word	0x080140c3
 8014188:	080140c3 	.word	0x080140c3
 801418c:	080140c3 	.word	0x080140c3
 8014190:	080140c3 	.word	0x080140c3
 8014194:	080141eb 	.word	0x080141eb
 8014198:	3820      	subs	r0, #32
 801419a:	2809      	cmp	r0, #9
 801419c:	d891      	bhi.n	80140c2 <lv_style_prop_get_default+0x1e>
 801419e:	a301      	add	r3, pc, #4	; (adr r3, 80141a4 <lv_style_prop_get_default+0x100>)
 80141a0:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80141a4:	080141d9 	.word	0x080141d9
 80141a8:	080140c3 	.word	0x080140c3
 80141ac:	080141e3 	.word	0x080141e3
 80141b0:	080140c3 	.word	0x080140c3
 80141b4:	080140c3 	.word	0x080140c3
 80141b8:	080141eb 	.word	0x080141eb
 80141bc:	080140c3 	.word	0x080140c3
 80141c0:	080140c3 	.word	0x080140c3
 80141c4:	080140c3 	.word	0x080140c3
 80141c8:	080141eb 	.word	0x080141eb
 80141cc:	286c      	cmp	r0, #108	; 0x6c
 80141ce:	f47f af78 	bne.w	80140c2 <lv_style_prop_get_default+0x1e>
            value.num = LV_IMG_ZOOM_NONE;
 80141d2:	f44f 7080 	mov.w	r0, #256	; 0x100
            break;
 80141d6:	4770      	bx	lr
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80141d8:	2301      	movs	r3, #1
 80141da:	2000      	movs	r0, #0
 80141dc:	f363 0007 	bfi	r0, r3, #0, #8
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
 80141e0:	4770      	bx	lr
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80141e2:	2000      	movs	r0, #0
 80141e4:	f36f 0007 	bfc	r0, #0, #8
}
static inline lv_color_t lv_color_black(void)
{
    return lv_color_make(0x00, 0x0, 0x00);
 80141e8:	4770      	bx	lr
            value.num = LV_OPA_COVER;
 80141ea:	20ff      	movs	r0, #255	; 0xff
            break;
 80141ec:	4770      	bx	lr
            value.num = LV_BORDER_SIDE_FULL;
 80141ee:	200f      	movs	r0, #15
            break;
 80141f0:	4770      	bx	lr
            value.ptr = LV_FONT_DEFAULT;
 80141f2:	4802      	ldr	r0, [pc, #8]	; (80141fc <lv_style_prop_get_default+0x158>)
            break;
 80141f4:	4770      	bx	lr
            value.num = LV_COORD_MAX;
 80141f6:	f641 70ff 	movw	r0, #8191	; 0x1fff
            break;
 80141fa:	4770      	bx	lr
 80141fc:	08020240 	.word	0x08020240

08014200 <lv_style_get_prop>:
{
 8014200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014202:	4603      	mov	r3, r0
 8014204:	4608      	mov	r0, r1
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8014206:	8899      	ldrh	r1, [r3, #4]
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8014208:	79dc      	ldrb	r4, [r3, #7]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 801420a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 801420e:	42a9      	cmp	r1, r5
 8014210:	d11c      	bne.n	801424c <lv_style_get_prop+0x4c>
        for(i = 0; i < style->prop_cnt; i++) {
 8014212:	2100      	movs	r1, #0
 8014214:	42a1      	cmp	r1, r4
 8014216:	d301      	bcc.n	801421c <lv_style_get_prop+0x1c>
        return LV_STYLE_RES_NOT_FOUND;
 8014218:	2400      	movs	r4, #0
 801421a:	e010      	b.n	801423e <lv_style_get_prop+0x3e>
            const_prop = style->v_p.const_props + i;
 801421c:	681d      	ldr	r5, [r3, #0]
 801421e:	eb05 06c1 	add.w	r6, r5, r1, lsl #3
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8014222:	f835 5031 	ldrh.w	r5, [r5, r1, lsl #3]
 8014226:	f3c5 070d 	ubfx	r7, r5, #0, #14
            if(prop_id == prop) {
 801422a:	42b8      	cmp	r0, r7
 801422c:	d10c      	bne.n	8014248 <lv_style_get_prop+0x48>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 801422e:	042f      	lsls	r7, r5, #16
 8014230:	d434      	bmi.n	801429c <lv_style_get_prop+0x9c>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8014232:	046d      	lsls	r5, r5, #17
 8014234:	d505      	bpl.n	8014242 <lv_style_get_prop+0x42>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
            if(prop_id == prop) {
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
                    return LV_STYLE_RES_INHERIT;
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
                    *value = lv_style_prop_get_default(prop_id);
 8014236:	f7ff ff35 	bl	80140a4 <lv_style_prop_get_default>
 801423a:	6010      	str	r0, [r2, #0]
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                    *value = values[i];
                }
                return LV_STYLE_RES_FOUND;
 801423c:	2401      	movs	r4, #1
}
 801423e:	4620      	mov	r0, r4
 8014240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8014242:	6873      	ldr	r3, [r6, #4]
                    *value = values[i];
 8014244:	6013      	str	r3, [r2, #0]
 8014246:	e7f9      	b.n	801423c <lv_style_get_prop+0x3c>
        for(i = 0; i < style->prop_cnt; i++) {
 8014248:	3101      	adds	r1, #1
 801424a:	e7e3      	b.n	8014214 <lv_style_get_prop+0x14>
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 801424c:	2c00      	cmp	r4, #0
 801424e:	d0f6      	beq.n	801423e <lv_style_get_prop+0x3e>
    if(style->prop_cnt > 1) {
 8014250:	2c01      	cmp	r4, #1
 8014252:	d014      	beq.n	801427e <lv_style_get_prop+0x7e>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8014254:	681e      	ldr	r6, [r3, #0]
        for(i = 0; i < style->prop_cnt; i++) {
 8014256:	2300      	movs	r3, #0
 8014258:	eb06 0584 	add.w	r5, r6, r4, lsl #2
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 801425c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8014260:	f3c1 070d 	ubfx	r7, r1, #0, #14
            if(prop_id == prop) {
 8014264:	42b8      	cmp	r0, r7
 8014266:	d106      	bne.n	8014276 <lv_style_get_prop+0x76>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8014268:	040c      	lsls	r4, r1, #16
 801426a:	d417      	bmi.n	801429c <lv_style_get_prop+0x9c>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 801426c:	044f      	lsls	r7, r1, #17
 801426e:	d4e2      	bmi.n	8014236 <lv_style_get_prop+0x36>
                    *value = values[i];
 8014270:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014274:	e7e6      	b.n	8014244 <lv_style_get_prop+0x44>
        for(i = 0; i < style->prop_cnt; i++) {
 8014276:	3301      	adds	r3, #1
 8014278:	429c      	cmp	r4, r3
 801427a:	d8ef      	bhi.n	801425c <lv_style_get_prop+0x5c>
 801427c:	e7cc      	b.n	8014218 <lv_style_get_prop+0x18>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 801427e:	f3c1 050d 	ubfx	r5, r1, #0, #14
 8014282:	42a8      	cmp	r0, r5
 8014284:	d1c8      	bne.n	8014218 <lv_style_get_prop+0x18>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8014286:	040d      	lsls	r5, r1, #16
 8014288:	d408      	bmi.n	801429c <lv_style_get_prop+0x9c>
            return LV_STYLE_RES_INHERIT;
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 801428a:	0449      	lsls	r1, r1, #17
 801428c:	d503      	bpl.n	8014296 <lv_style_get_prop+0x96>
 801428e:	f7ff ff09 	bl	80140a4 <lv_style_prop_get_default>
 8014292:	6010      	str	r0, [r2, #0]
 8014294:	e7d3      	b.n	801423e <lv_style_get_prop+0x3e>
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	6013      	str	r3, [r2, #0]
 801429a:	e7d0      	b.n	801423e <lv_style_get_prop+0x3e>
                    return LV_STYLE_RES_INHERIT;
 801429c:	2402      	movs	r4, #2
 801429e:	e7ce      	b.n	801423e <lv_style_get_prop+0x3e>

080142a0 <lv_style_is_empty>:
    return style->prop_cnt == 0 ? true : false;
 80142a0:	79c0      	ldrb	r0, [r0, #7]
}
 80142a2:	fab0 f080 	clz	r0, r0
 80142a6:	0940      	lsrs	r0, r0, #5
 80142a8:	4770      	bx	lr

080142aa <_lv_style_get_prop_group>:
    uint16_t group = (prop & 0x1FF) >> 4;
 80142aa:	0900      	lsrs	r0, r0, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80142ac:	f010 0f18 	tst.w	r0, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 80142b0:	bf0c      	ite	eq
 80142b2:	f000 001f 	andeq.w	r0, r0, #31
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80142b6:	2007      	movne	r0, #7
}
 80142b8:	4770      	bx	lr

080142ba <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 80142ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142be:	461f      	mov	r7, r3
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80142c0:	8883      	ldrh	r3, [r0, #4]
{
 80142c2:	4690      	mov	r8, r2
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80142c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142c8:	4293      	cmp	r3, r2
{
 80142ca:	4604      	mov	r4, r0
 80142cc:	460e      	mov	r6, r1
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80142ce:	d044      	beq.n	801435a <lv_style_set_prop_internal+0xa0>
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);

    if(style->prop_cnt > 1) {
 80142d0:	f890 c007 	ldrb.w	ip, [r0, #7]
 80142d4:	f1bc 0f01 	cmp.w	ip, #1
    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 80142d8:	f3c1 090d 	ubfx	r9, r1, #0, #14
    if(style->prop_cnt > 1) {
 80142dc:	d944      	bls.n	8014368 <lv_style_set_prop_internal+0xae>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
        uint16_t * props = (uint16_t *)tmp;
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80142de:	f10c 33ff 	add.w	r3, ip, #4294967295
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80142e2:	6800      	ldr	r0, [r0, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80142e4:	005d      	lsls	r5, r3, #1
 80142e6:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 80142ea:	4405      	add	r5, r0
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 80142ec:	462a      	mov	r2, r5
 80142ee:	3d02      	subs	r5, #2
 80142f0:	8811      	ldrh	r1, [r2, #0]
 80142f2:	f3c1 010d 	ubfx	r1, r1, #0, #14
 80142f6:	4589      	cmp	r9, r1
 80142f8:	d107      	bne.n	801430a <lv_style_set_prop_internal+0x50>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 80142fa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
    }
    else if(style->prop_cnt == 1) {
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 80142fe:	4641      	mov	r1, r8
 8014300:	4630      	mov	r0, r6
 8014302:	46bc      	mov	ip, r7
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
    style->has_group |= 1 << group;
}
 8014304:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8014308:	4760      	bx	ip
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 801430a:	3b01      	subs	r3, #1
 801430c:	d2ee      	bcs.n	80142ec <lv_style_set_prop_internal+0x32>
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 801430e:	2106      	movs	r1, #6
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 8014310:	fb0c 1101 	mla	r1, ip, r1, r1
 8014314:	f7ff f83e 	bl	8013394 <lv_mem_realloc>
        if(values_and_props == NULL) return;
 8014318:	b1f8      	cbz	r0, 801435a <lv_style_set_prop_internal+0xa0>
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801431a:	79e5      	ldrb	r5, [r4, #7]
        style->v_p.values_and_props = values_and_props;
 801431c:	6020      	str	r0, [r4, #0]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801431e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8014322:	462b      	mov	r3, r5
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 8014324:	1d11      	adds	r1, r2, #4
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8014326:	3b01      	subs	r3, #1
 8014328:	d219      	bcs.n	801435e <lv_style_set_prop_internal+0xa4>
        style->prop_cnt++;
 801432a:	3501      	adds	r5, #1
 801432c:	b2ed      	uxtb	r5, r5
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801432e:	00aa      	lsls	r2, r5, #2
        style->prop_cnt++;
 8014330:	71e5      	strb	r5, [r4, #7]
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 8014332:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8014336:	3d01      	subs	r5, #1
 8014338:	1f13      	subs	r3, r2, #4
 801433a:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 801433e:	4403      	add	r3, r0
 8014340:	4402      	add	r2, r0
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8014342:	4630      	mov	r0, r6
 8014344:	4641      	mov	r1, r8
 8014346:	47b8      	blx	r7
    uint8_t group = _lv_style_get_prop_group(prop_id);
 8014348:	4648      	mov	r0, r9
 801434a:	f7ff ffae 	bl	80142aa <_lv_style_get_prop_group>
    style->has_group |= 1 << group;
 801434e:	2301      	movs	r3, #1
 8014350:	fa03 f000 	lsl.w	r0, r3, r0
 8014354:	79a3      	ldrb	r3, [r4, #6]
 8014356:	4318      	orrs	r0, r3
 8014358:	71a0      	strb	r0, [r4, #6]
}
 801435a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 801435e:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
 8014362:	f821 c013 	strh.w	ip, [r1, r3, lsl #1]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8014366:	e7de      	b.n	8014326 <lv_style_set_prop_internal+0x6c>
    else if(style->prop_cnt == 1) {
 8014368:	d11b      	bne.n	80143a2 <lv_style_set_prop_internal+0xe8>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 801436a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801436e:	454b      	cmp	r3, r9
 8014370:	d102      	bne.n	8014378 <lv_style_set_prop_internal+0xbe>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8014372:	4603      	mov	r3, r0
 8014374:	1d02      	adds	r2, r0, #4
 8014376:	e7c2      	b.n	80142fe <lv_style_set_prop_internal+0x44>
        uint8_t * values_and_props = lv_mem_alloc(size);
 8014378:	200c      	movs	r0, #12
 801437a:	f7fe ffd5 	bl	8013328 <lv_mem_alloc>
        if(values_and_props == NULL) return;
 801437e:	2800      	cmp	r0, #0
 8014380:	d0eb      	beq.n	801435a <lv_style_set_prop_internal+0xa0>
        style->prop_cnt++;
 8014382:	79e3      	ldrb	r3, [r4, #7]
        props[0] = style->prop1;
 8014384:	88a5      	ldrh	r5, [r4, #4]
        lv_style_value_t value_tmp = style->v_p.value1;
 8014386:	6821      	ldr	r1, [r4, #0]
        style->v_p.values_and_props = values_and_props;
 8014388:	6020      	str	r0, [r4, #0]
        style->prop_cnt++;
 801438a:	3301      	adds	r3, #1
 801438c:	b2db      	uxtb	r3, r3
 801438e:	71e3      	strb	r3, [r4, #7]
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8014390:	eb00 0283 	add.w	r2, r0, r3, lsl #2
        props[0] = style->prop1;
 8014394:	f820 5023 	strh.w	r5, [r0, r3, lsl #2]
        values[0] = value_tmp;
 8014398:	4603      	mov	r3, r0
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 801439a:	3202      	adds	r2, #2
        values[0] = value_tmp;
 801439c:	f843 1b04 	str.w	r1, [r3], #4
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 80143a0:	e7cf      	b.n	8014342 <lv_style_set_prop_internal+0x88>
        style->prop_cnt = 1;
 80143a2:	2301      	movs	r3, #1
 80143a4:	71c3      	strb	r3, [r0, #7]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 80143a6:	1d02      	adds	r2, r0, #4
 80143a8:	4603      	mov	r3, r0
 80143aa:	e7ca      	b.n	8014342 <lv_style_set_prop_internal+0x88>

080143ac <lv_style_set_prop>:
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 80143ac:	4b01      	ldr	r3, [pc, #4]	; (80143b4 <lv_style_set_prop+0x8>)
 80143ae:	f7ff bf84 	b.w	80142ba <lv_style_set_prop_internal>
 80143b2:	bf00      	nop
 80143b4:	08013f49 	.word	0x08013f49

080143b8 <_lv_style_prop_lookup_flags>:
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 80143b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80143bc:	4298      	cmp	r0, r3
 80143be:	d010      	beq.n	80143e2 <_lv_style_prop_lookup_flags+0x2a>
    if(prop == LV_STYLE_PROP_INV) return 0;
 80143c0:	b190      	cbz	r0, 80143e8 <_lv_style_prop_lookup_flags+0x30>
    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 80143c2:	286f      	cmp	r0, #111	; 0x6f
 80143c4:	d802      	bhi.n	80143cc <_lv_style_prop_lookup_flags+0x14>
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 80143c6:	4b09      	ldr	r3, [pc, #36]	; (80143ec <_lv_style_prop_lookup_flags+0x34>)
 80143c8:	5c18      	ldrb	r0, [r3, r0]
 80143ca:	4770      	bx	lr
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 80143cc:	4b08      	ldr	r3, [pc, #32]	; (80143f0 <_lv_style_prop_lookup_flags+0x38>)
 80143ce:	681a      	ldr	r2, [r3, #0]
 80143d0:	b14a      	cbz	r2, 80143e6 <_lv_style_prop_lookup_flags+0x2e>
 80143d2:	4908      	ldr	r1, [pc, #32]	; (80143f4 <_lv_style_prop_lookup_flags+0x3c>)
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 80143d4:	3870      	subs	r0, #112	; 0x70
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 80143d6:	6809      	ldr	r1, [r1, #0]
 80143d8:	b283      	uxth	r3, r0
 80143da:	428b      	cmp	r3, r1
 80143dc:	d203      	bcs.n	80143e6 <_lv_style_prop_lookup_flags+0x2e>
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 80143de:	5cd0      	ldrb	r0, [r2, r3]
 80143e0:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 80143e2:	201f      	movs	r0, #31
 80143e4:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_INV) return 0;
 80143e6:	2000      	movs	r0, #0
}
 80143e8:	4770      	bx	lr
 80143ea:	bf00      	nop
 80143ec:	080203a2 	.word	0x080203a2
 80143f0:	20000e44 	.word	0x20000e44
 80143f4:	20006ee8 	.word	0x20006ee8

080143f8 <lv_style_set_width>:
#include "lv_style.h"

void lv_style_set_width(lv_style_t * style, lv_coord_t value)
{
 80143f8:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_WIDTH, v);
 80143fa:	2101      	movs	r1, #1
 80143fc:	f7ff bfd6 	b.w	80143ac <lv_style_set_prop>

08014400 <lv_style_set_pad_top>:
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_PIVOT_Y, v);
}

void lv_style_set_pad_top(lv_style_t * style, lv_coord_t value)
{
 8014400:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 8014402:	2110      	movs	r1, #16
 8014404:	f7ff bfd2 	b.w	80143ac <lv_style_set_prop>

08014408 <lv_style_set_pad_bottom>:
}

void lv_style_set_pad_bottom(lv_style_t * style, lv_coord_t value)
{
 8014408:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_BOTTOM, v);
 801440a:	2111      	movs	r1, #17
 801440c:	f7ff bfce 	b.w	80143ac <lv_style_set_prop>

08014410 <lv_style_set_pad_left>:
}

void lv_style_set_pad_left(lv_style_t * style, lv_coord_t value)
{
 8014410:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 8014412:	2112      	movs	r1, #18
 8014414:	f7ff bfca 	b.w	80143ac <lv_style_set_prop>

08014418 <lv_style_set_pad_right>:
}

void lv_style_set_pad_right(lv_style_t * style, lv_coord_t value)
{
 8014418:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 801441a:	2113      	movs	r1, #19
 801441c:	f7ff bfc6 	b.w	80143ac <lv_style_set_prop>

08014420 <lv_style_set_pad_row>:
}

void lv_style_set_pad_row(lv_style_t * style, lv_coord_t value)
{
 8014420:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_ROW, v);
 8014422:	2114      	movs	r1, #20
 8014424:	f7ff bfc2 	b.w	80143ac <lv_style_set_prop>

08014428 <lv_style_set_pad_column>:
}

void lv_style_set_pad_column(lv_style_t * style, lv_coord_t value)
{
 8014428:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v);
 801442a:	2115      	movs	r1, #21
 801442c:	f7ff bfbe 	b.w	80143ac <lv_style_set_prop>

08014430 <lv_style_set_bg_color>:
}

void lv_style_set_bg_color(lv_style_t * style, lv_color_t value)
{
 8014430:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8014432:	2300      	movs	r3, #0
 8014434:	f8ad 3000 	strh.w	r3, [sp]
 8014438:	f88d 3002 	strb.w	r3, [sp, #2]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 801443c:	9a00      	ldr	r2, [sp, #0]
    lv_style_value_t v = {
 801443e:	b2c9      	uxtb	r1, r1
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8014440:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8014444:	2120      	movs	r1, #32
}
 8014446:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8014448:	f7ff bfb0 	b.w	80143ac <lv_style_set_prop>

0801444c <lv_style_set_bg_opa>:

void lv_style_set_bg_opa(lv_style_t * style, lv_opa_t value)
{
 801444c:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BG_OPA, v);
 801444e:	2121      	movs	r1, #33	; 0x21
 8014450:	f7ff bfac 	b.w	80143ac <lv_style_set_prop>

08014454 <lv_style_set_border_color>:
    };
    lv_style_set_prop(style, LV_STYLE_BG_IMG_TILED, v);
}

void lv_style_set_border_color(lv_style_t * style, lv_color_t value)
{
 8014454:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8014456:	2300      	movs	r3, #0
 8014458:	f8ad 3000 	strh.w	r3, [sp]
 801445c:	f88d 3002 	strb.w	r3, [sp, #2]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 8014460:	9a00      	ldr	r2, [sp, #0]
    lv_style_value_t v = {
 8014462:	b2c9      	uxtb	r1, r1
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 8014464:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8014468:	2130      	movs	r1, #48	; 0x30
}
 801446a:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 801446c:	f7ff bf9e 	b.w	80143ac <lv_style_set_prop>

08014470 <lv_style_set_border_width>:
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_OPA, v);
}

void lv_style_set_border_width(lv_style_t * style, lv_coord_t value)
{
 8014470:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_WIDTH, v);
 8014472:	2132      	movs	r1, #50	; 0x32
 8014474:	f7ff bf9a 	b.w	80143ac <lv_style_set_prop>

08014478 <lv_style_set_border_side>:
}

void lv_style_set_border_side(lv_style_t * style, lv_border_side_t value)
{
 8014478:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 801447a:	2133      	movs	r1, #51	; 0x33
 801447c:	f7ff bf96 	b.w	80143ac <lv_style_set_prop>

08014480 <lv_style_set_outline_width>:
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_POST, v);
}

void lv_style_set_outline_width(lv_style_t * style, lv_coord_t value)
{
 8014480:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_WIDTH, v);
 8014482:	2135      	movs	r1, #53	; 0x35
 8014484:	f7ff bf92 	b.w	80143ac <lv_style_set_prop>

08014488 <lv_style_set_outline_color>:
}

void lv_style_set_outline_color(lv_style_t * style, lv_color_t value)
{
 8014488:	b082      	sub	sp, #8
    lv_style_value_t v = {
 801448a:	2300      	movs	r3, #0
 801448c:	f8ad 3000 	strh.w	r3, [sp]
 8014490:	f88d 3002 	strb.w	r3, [sp, #2]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8014494:	9a00      	ldr	r2, [sp, #0]
    lv_style_value_t v = {
 8014496:	b2c9      	uxtb	r1, r1
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8014498:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 801449c:	2136      	movs	r1, #54	; 0x36
}
 801449e:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 80144a0:	f7ff bf84 	b.w	80143ac <lv_style_set_prop>

080144a4 <lv_style_set_outline_pad>:
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_OPA, v);
}

void lv_style_set_outline_pad(lv_style_t * style, lv_coord_t value)
{
 80144a4:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_PAD, v);
 80144a6:	2138      	movs	r1, #56	; 0x38
 80144a8:	f7ff bf80 	b.w	80143ac <lv_style_set_prop>

080144ac <lv_style_set_line_width>:
    };
    lv_style_set_prop(style, LV_STYLE_IMG_RECOLOR_OPA, v);
}

void lv_style_set_line_width(lv_style_t * style, lv_coord_t value)
{
 80144ac:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_WIDTH, v);
 80144ae:	2149      	movs	r1, #73	; 0x49
 80144b0:	f7ff bf7c 	b.w	80143ac <lv_style_set_prop>

080144b4 <lv_style_set_line_color>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_ROUNDED, v);
}

void lv_style_set_line_color(lv_style_t * style, lv_color_t value)
{
 80144b4:	b082      	sub	sp, #8
    lv_style_value_t v = {
 80144b6:	2300      	movs	r3, #0
 80144b8:	f8ad 3000 	strh.w	r3, [sp]
 80144bc:	f88d 3002 	strb.w	r3, [sp, #2]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 80144c0:	9a00      	ldr	r2, [sp, #0]
    lv_style_value_t v = {
 80144c2:	b2c9      	uxtb	r1, r1
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 80144c4:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 80144c8:	214d      	movs	r1, #77	; 0x4d
}
 80144ca:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 80144cc:	f7ff bf6e 	b.w	80143ac <lv_style_set_prop>

080144d0 <lv_style_set_arc_width>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_OPA, v);
}

void lv_style_set_arc_width(lv_style_t * style, lv_coord_t value)
{
 80144d0:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 80144d2:	2150      	movs	r1, #80	; 0x50
 80144d4:	f7ff bf6a 	b.w	80143ac <lv_style_set_prop>

080144d8 <lv_style_set_arc_color>:
    };
    lv_style_set_prop(style, LV_STYLE_ARC_ROUNDED, v);
}

void lv_style_set_arc_color(lv_style_t * style, lv_color_t value)
{
 80144d8:	b082      	sub	sp, #8
    lv_style_value_t v = {
 80144da:	2300      	movs	r3, #0
 80144dc:	f8ad 3000 	strh.w	r3, [sp]
 80144e0:	f88d 3002 	strb.w	r3, [sp, #2]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 80144e4:	9a00      	ldr	r2, [sp, #0]
    lv_style_value_t v = {
 80144e6:	b2c9      	uxtb	r1, r1
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 80144e8:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 80144ec:	2152      	movs	r1, #82	; 0x52
}
 80144ee:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 80144f0:	f7ff bf5c 	b.w	80143ac <lv_style_set_prop>

080144f4 <lv_style_set_text_color>:
    };
    lv_style_set_prop(style, LV_STYLE_ARC_IMG_SRC, v);
}

void lv_style_set_text_color(lv_style_t * style, lv_color_t value)
{
 80144f4:	b082      	sub	sp, #8
    lv_style_value_t v = {
 80144f6:	2300      	movs	r3, #0
 80144f8:	f8ad 3000 	strh.w	r3, [sp]
 80144fc:	f88d 3002 	strb.w	r3, [sp, #2]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 8014500:	9a00      	ldr	r2, [sp, #0]
    lv_style_value_t v = {
 8014502:	b2c9      	uxtb	r1, r1
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 8014504:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8014508:	2155      	movs	r1, #85	; 0x55
}
 801450a:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 801450c:	f7ff bf4e 	b.w	80143ac <lv_style_set_prop>

08014510 <lv_style_set_text_font>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_OPA, v);
}

void lv_style_set_text_font(lv_style_t * style, const lv_font_t * value)
{
 8014510:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_FONT, v);
 8014512:	2157      	movs	r1, #87	; 0x57
 8014514:	f7ff bf4a 	b.w	80143ac <lv_style_set_prop>

08014518 <lv_style_set_text_line_space>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_LETTER_SPACE, v);
}

void lv_style_set_text_line_space(lv_style_t * style, lv_coord_t value)
{
 8014518:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_LINE_SPACE, v);
 801451a:	2159      	movs	r1, #89	; 0x59
 801451c:	f7ff bf46 	b.w	80143ac <lv_style_set_prop>

08014520 <lv_style_set_text_decor>:
}

void lv_style_set_text_decor(lv_style_t * style, lv_text_decor_t value)
{
 8014520:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_DECOR, v);
 8014522:	215a      	movs	r1, #90	; 0x5a
 8014524:	f7ff bf42 	b.w	80143ac <lv_style_set_prop>

08014528 <lv_style_set_radius>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_ALIGN, v);
}

void lv_style_set_radius(lv_style_t * style, lv_coord_t value)
{
 8014528:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_RADIUS, v);
 801452a:	210b      	movs	r1, #11
 801452c:	f7ff bf3e 	b.w	80143ac <lv_style_set_prop>

08014530 <lv_style_set_anim_time>:
    };
    lv_style_set_prop(style, LV_STYLE_ANIM, v);
}

void lv_style_set_anim_time(lv_style_t * style, uint32_t value)
{
 8014530:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ANIM_TIME, v);
 8014532:	2164      	movs	r1, #100	; 0x64
 8014534:	f7ff bf3a 	b.w	80143ac <lv_style_set_prop>

08014538 <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 8014538:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 801453a:	4804      	ldr	r0, [pc, #16]	; (801454c <_lv_timer_core_init+0x14>)
 801453c:	2118      	movs	r1, #24
 801453e:	f7fe fd9a 	bl	8013076 <_lv_ll_init>
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
    lv_timer_run = en;
 8014542:	4b03      	ldr	r3, [pc, #12]	; (8014550 <_lv_timer_core_init+0x18>)
 8014544:	2201      	movs	r2, #1
 8014546:	701a      	strb	r2, [r3, #0]
}
 8014548:	bd08      	pop	{r3, pc}
 801454a:	bf00      	nop
 801454c:	20000e50 	.word	0x20000e50
 8014550:	20006efc 	.word	0x20006efc

08014554 <lv_timer_create>:
{
 8014554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014556:	4606      	mov	r6, r0
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8014558:	480c      	ldr	r0, [pc, #48]	; (801458c <lv_timer_create+0x38>)
{
 801455a:	460f      	mov	r7, r1
 801455c:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 801455e:	f7fe fd92 	bl	8013086 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_timer);
 8014562:	4604      	mov	r4, r0
 8014564:	b900      	cbnz	r0, 8014568 <lv_timer_create+0x14>
 8014566:	e7fe      	b.n	8014566 <lv_timer_create+0x12>
    new_timer->repeat_count = -1;
 8014568:	f04f 33ff 	mov.w	r3, #4294967295
 801456c:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 801456e:	7d03      	ldrb	r3, [r0, #20]
    new_timer->period = period;
 8014570:	6007      	str	r7, [r0, #0]
    new_timer->paused = 0;
 8014572:	f36f 0300 	bfc	r3, #0, #1
    new_timer->timer_cb = timer_xcb;
 8014576:	6086      	str	r6, [r0, #8]
    new_timer->paused = 0;
 8014578:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 801457a:	f7fd ff45 	bl	8012408 <lv_tick_get>
    timer_created = true;
 801457e:	4b04      	ldr	r3, [pc, #16]	; (8014590 <lv_timer_create+0x3c>)
    new_timer->last_run = lv_tick_get();
 8014580:	6060      	str	r0, [r4, #4]
    timer_created = true;
 8014582:	2201      	movs	r2, #1
    new_timer->user_data = user_data;
 8014584:	60e5      	str	r5, [r4, #12]
    timer_created = true;
 8014586:	701a      	strb	r2, [r3, #0]
}
 8014588:	4620      	mov	r0, r4
 801458a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801458c:	20000e50 	.word	0x20000e50
 8014590:	20006f04 	.word	0x20006f04

08014594 <lv_timer_del>:
{
 8014594:	b510      	push	{r4, lr}
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8014596:	4601      	mov	r1, r0
{
 8014598:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 801459a:	4805      	ldr	r0, [pc, #20]	; (80145b0 <lv_timer_del+0x1c>)
 801459c:	f7fe fdaa 	bl	80130f4 <_lv_ll_remove>
    timer_deleted = true;
 80145a0:	4b04      	ldr	r3, [pc, #16]	; (80145b4 <lv_timer_del+0x20>)
 80145a2:	2201      	movs	r2, #1
    lv_mem_free(timer);
 80145a4:	4620      	mov	r0, r4
}
 80145a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    timer_deleted = true;
 80145aa:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 80145ac:	f7fe beda 	b.w	8013364 <lv_mem_free>
 80145b0:	20000e50 	.word	0x20000e50
 80145b4:	20006f05 	.word	0x20006f05

080145b8 <lv_timer_handler>:
{
 80145b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) {
 80145bc:	4f5c      	ldr	r7, [pc, #368]	; (8014730 <lv_timer_handler+0x178>)
 80145be:	783a      	ldrb	r2, [r7, #0]
 80145c0:	2301      	movs	r3, #1
 80145c2:	b922      	cbnz	r2, 80145ce <lv_timer_handler+0x16>
    if(lv_timer_run == false) {
 80145c4:	4a5b      	ldr	r2, [pc, #364]	; (8014734 <lv_timer_handler+0x17c>)
    already_running = true;
 80145c6:	703b      	strb	r3, [r7, #0]
    if(lv_timer_run == false) {
 80145c8:	7816      	ldrb	r6, [r2, #0]
 80145ca:	b916      	cbnz	r6, 80145d2 <lv_timer_handler+0x1a>
        already_running = false; /*Release mutex*/
 80145cc:	703e      	strb	r6, [r7, #0]
        return 1;
 80145ce:	461e      	mov	r6, r3
 80145d0:	e04e      	b.n	8014670 <lv_timer_handler+0xb8>
    uint32_t handler_start = lv_tick_get();
 80145d2:	f7fd ff19 	bl	8012408 <lv_tick_get>
    if(handler_start == 0) {
 80145d6:	4604      	mov	r4, r0
 80145d8:	b938      	cbnz	r0, 80145ea <lv_timer_handler+0x32>
        run_cnt++;
 80145da:	4a57      	ldr	r2, [pc, #348]	; (8014738 <lv_timer_handler+0x180>)
 80145dc:	6813      	ldr	r3, [r2, #0]
 80145de:	3301      	adds	r3, #1
 80145e0:	2b64      	cmp	r3, #100	; 0x64
 80145e2:	bf94      	ite	ls
 80145e4:	4619      	movls	r1, r3
 80145e6:	4601      	movhi	r1, r0
 80145e8:	6011      	str	r1, [r2, #0]
        timer_deleted             = false;
 80145ea:	f8df 8160 	ldr.w	r8, [pc, #352]	; 801474c <lv_timer_handler+0x194>
 80145ee:	f04f 0900 	mov.w	r9, #0
        timer_created             = false;
 80145f2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8014750 <lv_timer_handler+0x198>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 80145f6:	4851      	ldr	r0, [pc, #324]	; (801473c <lv_timer_handler+0x184>)
        timer_deleted             = false;
 80145f8:	f888 9000 	strb.w	r9, [r8]
        timer_created             = false;
 80145fc:	f88a 9000 	strb.w	r9, [sl]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8014600:	f7fe fda1 	bl	8013146 <_lv_ll_get_head>
 8014604:	4d4e      	ldr	r5, [pc, #312]	; (8014740 <lv_timer_handler+0x188>)
 8014606:	6028      	str	r0, [r5, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8014608:	6829      	ldr	r1, [r5, #0]
 801460a:	bba9      	cbnz	r1, 8014678 <lv_timer_handler+0xc0>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 801460c:	484b      	ldr	r0, [pc, #300]	; (801473c <lv_timer_handler+0x184>)
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 801460e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 801473c <lv_timer_handler+0x184>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8014612:	f7fe fd98 	bl	8013146 <_lv_ll_get_head>
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8014616:	f04f 36ff 	mov.w	r6, #4294967295
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 801461a:	4605      	mov	r5, r0
    while(next) {
 801461c:	2d00      	cmp	r5, #0
 801461e:	d171      	bne.n	8014704 <lv_timer_handler+0x14c>
    busy_time += lv_tick_elaps(handler_start);
 8014620:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8014754 <lv_timer_handler+0x19c>
 8014624:	4620      	mov	r0, r4
 8014626:	f7fd fef1 	bl	801240c <lv_tick_elaps>
 801462a:	f8d8 3000 	ldr.w	r3, [r8]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 801462e:	4c45      	ldr	r4, [pc, #276]	; (8014744 <lv_timer_handler+0x18c>)
    busy_time += lv_tick_elaps(handler_start);
 8014630:	4418      	add	r0, r3
 8014632:	f8c8 0000 	str.w	r0, [r8]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8014636:	6820      	ldr	r0, [r4, #0]
 8014638:	f7fd fee8 	bl	801240c <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 801463c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8014640:	d314      	bcc.n	801466c <lv_timer_handler+0xb4>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8014642:	f8d8 2000 	ldr.w	r2, [r8]
 8014646:	2364      	movs	r3, #100	; 0x64
 8014648:	435a      	muls	r2, r3
 801464a:	fbb2 f3f0 	udiv	r3, r2, r0
 801464e:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8014650:	2b64      	cmp	r3, #100	; 0x64
 8014652:	bf98      	it	ls
 8014654:	f1c3 0564 	rsbls	r5, r3, #100	; 0x64
 8014658:	4b3b      	ldr	r3, [pc, #236]	; (8014748 <lv_timer_handler+0x190>)
 801465a:	bf98      	it	ls
 801465c:	b2ed      	uxtbls	r5, r5
 801465e:	701d      	strb	r5, [r3, #0]
        busy_time         = 0;
 8014660:	2300      	movs	r3, #0
 8014662:	f8c8 3000 	str.w	r3, [r8]
        idle_period_start = lv_tick_get();
 8014666:	f7fd fecf 	bl	8012408 <lv_tick_get>
 801466a:	6020      	str	r0, [r4, #0]
    already_running = false; /*Release the mutex*/
 801466c:	2300      	movs	r3, #0
 801466e:	703b      	strb	r3, [r7, #0]
}
 8014670:	4630      	mov	r0, r6
 8014672:	b003      	add	sp, #12
 8014674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8014678:	4830      	ldr	r0, [pc, #192]	; (801473c <lv_timer_handler+0x184>)
 801467a:	f7fe fd6a 	bl	8013152 <_lv_ll_get_next>
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 801467e:	f8d5 b000 	ldr.w	fp, [r5]
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8014682:	9000      	str	r0, [sp, #0]
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
    if(timer->paused) return false;
 8014684:	f89b 2014 	ldrb.w	r2, [fp, #20]
 8014688:	f012 0201 	ands.w	r2, r2, #1
 801468c:	d002      	beq.n	8014694 <lv_timer_handler+0xdc>
            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 801468e:	9b00      	ldr	r3, [sp, #0]
 8014690:	602b      	str	r3, [r5, #0]
 8014692:	e7b9      	b.n	8014608 <lv_timer_handler+0x50>
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8014694:	f8db 0004 	ldr.w	r0, [fp, #4]
 8014698:	9201      	str	r2, [sp, #4]
 801469a:	f7fd feb7 	bl	801240c <lv_tick_elaps>
    if(lv_timer_time_remaining(timer) == 0) {
 801469e:	f8db 1000 	ldr.w	r1, [fp]
 80146a2:	9a01      	ldr	r2, [sp, #4]
 80146a4:	4288      	cmp	r0, r1
 80146a6:	d314      	bcc.n	80146d2 <lv_timer_handler+0x11a>
        int32_t original_repeat_count = timer->repeat_count;
 80146a8:	f8db 1010 	ldr.w	r1, [fp, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
 80146ac:	9101      	str	r1, [sp, #4]
 80146ae:	2900      	cmp	r1, #0
 80146b0:	bfc4      	itt	gt
 80146b2:	f101 32ff 	addgt.w	r2, r1, #4294967295
 80146b6:	f8cb 2010 	strgt.w	r2, [fp, #16]
        timer->last_run = lv_tick_get();
 80146ba:	f7fd fea5 	bl	8012408 <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 80146be:	f8db 2008 	ldr.w	r2, [fp, #8]
        timer->last_run = lv_tick_get();
 80146c2:	f8cb 0004 	str.w	r0, [fp, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 80146c6:	b11a      	cbz	r2, 80146d0 <lv_timer_handler+0x118>
 80146c8:	9901      	ldr	r1, [sp, #4]
 80146ca:	b109      	cbz	r1, 80146d0 <lv_timer_handler+0x118>
 80146cc:	4658      	mov	r0, fp
 80146ce:	4790      	blx	r2
        exec = true;
 80146d0:	4632      	mov	r2, r6
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 80146d2:	f898 1000 	ldrb.w	r1, [r8]
 80146d6:	b939      	cbnz	r1, 80146e8 <lv_timer_handler+0x130>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 80146d8:	f8db 1010 	ldr.w	r1, [fp, #16]
 80146dc:	b921      	cbnz	r1, 80146e8 <lv_timer_handler+0x130>
            lv_timer_del(timer);
 80146de:	4658      	mov	r0, fp
 80146e0:	9201      	str	r2, [sp, #4]
 80146e2:	f7ff ff57 	bl	8014594 <lv_timer_del>
 80146e6:	9a01      	ldr	r2, [sp, #4]
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 80146e8:	2a00      	cmp	r2, #0
 80146ea:	d0d0      	beq.n	801468e <lv_timer_handler+0xd6>
                if(timer_created || timer_deleted) {
 80146ec:	f89a 3000 	ldrb.w	r3, [sl]
 80146f0:	b91b      	cbnz	r3, 80146fa <lv_timer_handler+0x142>
 80146f2:	f898 3000 	ldrb.w	r3, [r8]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d0c9      	beq.n	801468e <lv_timer_handler+0xd6>
    } while(LV_GC_ROOT(_lv_timer_act));
 80146fa:	682b      	ldr	r3, [r5, #0]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	f47f af78 	bne.w	80145f2 <lv_timer_handler+0x3a>
 8014702:	e783      	b.n	801460c <lv_timer_handler+0x54>
        if(!next->paused) {
 8014704:	7d28      	ldrb	r0, [r5, #20]
 8014706:	f010 0801 	ands.w	r8, r0, #1
 801470a:	d10a      	bne.n	8014722 <lv_timer_handler+0x16a>
    uint32_t elp = lv_tick_elaps(timer->last_run);
 801470c:	6868      	ldr	r0, [r5, #4]
 801470e:	f7fd fe7d 	bl	801240c <lv_tick_elaps>
    if(elp >= timer->period)
 8014712:	682b      	ldr	r3, [r5, #0]
 8014714:	4298      	cmp	r0, r3
        return 0;
 8014716:	bf2c      	ite	cs
 8014718:	4640      	movcs	r0, r8
    return timer->period - elp;
 801471a:	1a18      	subcc	r0, r3, r0
            if(delay < time_till_next)
 801471c:	4286      	cmp	r6, r0
 801471e:	bf28      	it	cs
 8014720:	4606      	movcs	r6, r0
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8014722:	4629      	mov	r1, r5
 8014724:	4648      	mov	r0, r9
 8014726:	f7fe fd14 	bl	8013152 <_lv_ll_get_next>
 801472a:	4605      	mov	r5, r0
 801472c:	e776      	b.n	801461c <lv_timer_handler+0x64>
 801472e:	bf00      	nop
 8014730:	20006eec 	.word	0x20006eec
 8014734:	20006efc 	.word	0x20006efc
 8014738:	20006f00 	.word	0x20006f00
 801473c:	20000e50 	.word	0x20000e50
 8014740:	20000e4c 	.word	0x20000e4c
 8014744:	20006ef8 	.word	0x20006ef8
 8014748:	20006ef4 	.word	0x20006ef4
 801474c:	20006f05 	.word	0x20006f05
 8014750:	20006f04 	.word	0x20006f04
 8014754:	20006ef0 	.word	0x20006ef0

08014758 <lv_timer_pause>:
    timer->paused = true;
 8014758:	7d03      	ldrb	r3, [r0, #20]
 801475a:	f043 0301 	orr.w	r3, r3, #1
 801475e:	7503      	strb	r3, [r0, #20]
}
 8014760:	4770      	bx	lr

08014762 <lv_timer_resume>:
    timer->paused = false;
 8014762:	7d03      	ldrb	r3, [r0, #20]
 8014764:	f36f 0300 	bfc	r3, #0, #1
 8014768:	7503      	strb	r3, [r0, #20]
}
 801476a:	4770      	bx	lr

0801476c <lv_timer_ready>:
{
 801476c:	b510      	push	{r4, lr}
 801476e:	4604      	mov	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 8014770:	f7fd fe4a 	bl	8012408 <lv_tick_get>
 8014774:	6823      	ldr	r3, [r4, #0]
 8014776:	43db      	mvns	r3, r3
 8014778:	4403      	add	r3, r0
 801477a:	6063      	str	r3, [r4, #4]
}
 801477c:	bd10      	pop	{r4, pc}

0801477e <block_next>:
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801477e:	6843      	ldr	r3, [r0, #4]
/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
    block_header_t * next = offset_to_block(block_to_ptr(block),
                                            block_size(block) - block_header_overhead);
    tlsf_assert(!block_is_last(block));
 8014780:	f033 0303 	bics.w	r3, r3, #3
 8014784:	d100      	bne.n	8014788 <block_next+0xa>
 8014786:	e7fe      	b.n	8014786 <block_next+0x8>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8014788:	4418      	add	r0, r3
    return next;
}
 801478a:	3004      	adds	r0, #4
 801478c:	4770      	bx	lr

0801478e <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 801478e:	b508      	push	{r3, lr}
 8014790:	4602      	mov	r2, r0
    block_header_t * next = block_next(block);
 8014792:	f7ff fff4 	bl	801477e <block_next>
    next->prev_phys_block = block;
 8014796:	6002      	str	r2, [r0, #0]
    return next;
}
 8014798:	bd08      	pop	{r3, pc}

0801479a <block_split>:
    return tlsf_cast(void *,
 801479a:	1843      	adds	r3, r0, r1
 801479c:	f103 020c 	add.w	r2, r3, #12
    return block_size(block) >= sizeof(block_header_t) + size;
}

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 80147a0:	b570      	push	{r4, r5, r6, lr}
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80147a2:	1d1c      	adds	r4, r3, #4
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80147a4:	330f      	adds	r3, #15
 80147a6:	f023 0303 	bic.w	r3, r3, #3
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);

    const size_t remain_size = block_size(block) - (size + block_header_overhead);

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 80147aa:	429a      	cmp	r2, r3
 80147ac:	d000      	beq.n	80147b0 <block_split+0x16>
 80147ae:	e7fe      	b.n	80147ae <block_split+0x14>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80147b0:	6842      	ldr	r2, [r0, #4]
 80147b2:	f022 0203 	bic.w	r2, r2, #3
    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 80147b6:	1a55      	subs	r5, r2, r1
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 80147b8:	1f2e      	subs	r6, r5, #4
 80147ba:	440d      	add	r5, r1
 80147bc:	4295      	cmp	r5, r2
 80147be:	d000      	beq.n	80147c2 <block_split+0x28>
 80147c0:	e7fe      	b.n	80147c0 <block_split+0x26>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 80147c2:	6863      	ldr	r3, [r4, #4]
 80147c4:	f003 0303 	and.w	r3, r3, #3
 80147c8:	4333      	orrs	r3, r6
 80147ca:	6063      	str	r3, [r4, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80147cc:	f023 0303 	bic.w	r3, r3, #3
    block_set_size(remaining, remain_size);
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 80147d0:	2b0b      	cmp	r3, #11
 80147d2:	d800      	bhi.n	80147d6 <block_split+0x3c>
 80147d4:	e7fe      	b.n	80147d4 <block_split+0x3a>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 80147d6:	6843      	ldr	r3, [r0, #4]
 80147d8:	f003 0303 	and.w	r3, r3, #3
 80147dc:	4319      	orrs	r1, r3
 80147de:	6041      	str	r1, [r0, #4]
    block_header_t * next = block_link_next(block);
 80147e0:	4620      	mov	r0, r4
 80147e2:	f7ff ffd4 	bl	801478e <block_link_next>
    block->size |= block_header_prev_free_bit;
 80147e6:	6843      	ldr	r3, [r0, #4]
 80147e8:	f043 0302 	orr.w	r3, r3, #2
 80147ec:	6043      	str	r3, [r0, #4]
    block->size |= block_header_free_bit;
 80147ee:	6863      	ldr	r3, [r4, #4]
 80147f0:	f043 0301 	orr.w	r3, r3, #1
 80147f4:	6063      	str	r3, [r4, #4]

    block_set_size(block, size);
    block_mark_as_free(remaining);

    return remaining;
}
 80147f6:	4620      	mov	r0, r4
 80147f8:	bd70      	pop	{r4, r5, r6, pc}

080147fa <adjust_request_size>:
    if(size) {
 80147fa:	b180      	cbz	r0, 801481e <adjust_request_size+0x24>
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 80147fc:	1e4b      	subs	r3, r1, #1
 80147fe:	ea11 0203 	ands.w	r2, r1, r3
 8014802:	d000      	beq.n	8014806 <adjust_request_size+0xc>
 8014804:	e7fe      	b.n	8014804 <adjust_request_size+0xa>
    return (x + (align - 1)) & ~(align - 1);
 8014806:	4403      	add	r3, r0
 8014808:	4249      	negs	r1, r1
 801480a:	4019      	ands	r1, r3
        if(aligned < block_size_max) {
 801480c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8014810:	d203      	bcs.n	801481a <adjust_request_size+0x20>
            adjust = tlsf_max(aligned, block_size_min);
 8014812:	290c      	cmp	r1, #12
 8014814:	460a      	mov	r2, r1
 8014816:	bf38      	it	cc
 8014818:	220c      	movcc	r2, #12
}
 801481a:	4610      	mov	r0, r2
 801481c:	4770      	bx	lr
    size_t adjust = 0;
 801481e:	4602      	mov	r2, r0
    return adjust;
 8014820:	e7fb      	b.n	801481a <adjust_request_size+0x20>

08014822 <remove_free_block>:
{
 8014822:	b570      	push	{r4, r5, r6, lr}
    block_header_t * prev = block->prev_free;
 8014824:	68cd      	ldr	r5, [r1, #12]
    tlsf_assert(prev && "prev_free field can not be null");
 8014826:	b905      	cbnz	r5, 801482a <remove_free_block+0x8>
 8014828:	e7fe      	b.n	8014828 <remove_free_block+0x6>
    block_header_t * next = block->next_free;
 801482a:	688c      	ldr	r4, [r1, #8]
    tlsf_assert(next && "next_free field can not be null");
 801482c:	b904      	cbnz	r4, 8014830 <remove_free_block+0xe>
 801482e:	e7fe      	b.n	801482e <remove_free_block+0xc>
    next->prev_free = prev;
 8014830:	60e5      	str	r5, [r4, #12]
    prev->next_free = next;
 8014832:	60ac      	str	r4, [r5, #8]
    if(control->blocks[fl][sl] == block) {
 8014834:	eb03 1542 	add.w	r5, r3, r2, lsl #5
 8014838:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 801483c:	6bae      	ldr	r6, [r5, #56]	; 0x38
 801483e:	428e      	cmp	r6, r1
 8014840:	d112      	bne.n	8014868 <remove_free_block+0x46>
        if(next == &control->block_null) {
 8014842:	42a0      	cmp	r0, r4
        control->blocks[fl][sl] = next;
 8014844:	63ac      	str	r4, [r5, #56]	; 0x38
        if(next == &control->block_null) {
 8014846:	d10f      	bne.n	8014868 <remove_free_block+0x46>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8014848:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 801484c:	2101      	movs	r1, #1
 801484e:	696c      	ldr	r4, [r5, #20]
 8014850:	fa01 f303 	lsl.w	r3, r1, r3
 8014854:	ea24 0303 	bic.w	r3, r4, r3
 8014858:	616b      	str	r3, [r5, #20]
            if(!control->sl_bitmap[fl]) {
 801485a:	b92b      	cbnz	r3, 8014868 <remove_free_block+0x46>
                control->fl_bitmap &= ~(1U << fl);
 801485c:	fa01 f202 	lsl.w	r2, r1, r2
 8014860:	6901      	ldr	r1, [r0, #16]
 8014862:	ea21 0202 	bic.w	r2, r1, r2
 8014866:	6102      	str	r2, [r0, #16]
}
 8014868:	bd70      	pop	{r4, r5, r6, pc}

0801486a <mapping_insert>:
    if(size < SMALL_BLOCK_SIZE) {
 801486a:	287f      	cmp	r0, #127	; 0x7f
{
 801486c:	b510      	push	{r4, lr}
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 801486e:	bf83      	ittte	hi
 8014870:	fab0 f380 	clzhi	r3, r0
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8014874:	f1c3 041a 	rsbhi	r4, r3, #26
 8014878:	40e0      	lsrhi	r0, r4
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 801487a:	1080      	asrls	r0, r0, #2
        fl = 0;
 801487c:	bf92      	itee	ls
 801487e:	2300      	movls	r3, #0
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8014880:	f080 0020 	eorhi.w	r0, r0, #32
        fl -= (FL_INDEX_SHIFT - 1);
 8014884:	f1c3 0319 	rsbhi	r3, r3, #25
    *fli = fl;
 8014888:	600b      	str	r3, [r1, #0]
    *sli = sl;
 801488a:	6010      	str	r0, [r2, #0]
}
 801488c:	bd10      	pop	{r4, pc}

0801488e <block_insert>:
{
 801488e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014890:	4604      	mov	r4, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014892:	6848      	ldr	r0, [r1, #4]
    mapping_insert(block_size(block), &fl, &sl);
 8014894:	aa01      	add	r2, sp, #4
 8014896:	f020 0003 	bic.w	r0, r0, #3
{
 801489a:	460d      	mov	r5, r1
    mapping_insert(block_size(block), &fl, &sl);
 801489c:	4669      	mov	r1, sp
 801489e:	f7ff ffe4 	bl	801486a <mapping_insert>
    insert_free_block(control, block, fl, sl);
 80148a2:	e9dd 0700 	ldrd	r0, r7, [sp]
    block_header_t * current = control->blocks[fl][sl];
 80148a6:	eb07 1240 	add.w	r2, r7, r0, lsl #5
 80148aa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80148ae:	6b93      	ldr	r3, [r2, #56]	; 0x38
    tlsf_assert(current && "free list cannot have a null entry");
 80148b0:	b903      	cbnz	r3, 80148b4 <block_insert+0x26>
 80148b2:	e7fe      	b.n	80148b2 <block_insert+0x24>
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80148b4:	f105 010b 	add.w	r1, r5, #11
    return tlsf_cast(void *,
 80148b8:	f105 0608 	add.w	r6, r5, #8
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80148bc:	f021 0103 	bic.w	r1, r1, #3
    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 80148c0:	428e      	cmp	r6, r1
    block->prev_free = &control->block_null;
 80148c2:	e9c5 3402 	strd	r3, r4, [r5, #8]
    current->prev_free = block;
 80148c6:	60dd      	str	r5, [r3, #12]
    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 80148c8:	d000      	beq.n	80148cc <block_insert+0x3e>
 80148ca:	e7fe      	b.n	80148ca <block_insert+0x3c>
    control->blocks[fl][sl] = block;
 80148cc:	6395      	str	r5, [r2, #56]	; 0x38
    control->fl_bitmap |= (1U << fl);
 80148ce:	6922      	ldr	r2, [r4, #16]
 80148d0:	2301      	movs	r3, #1
 80148d2:	fa03 f100 	lsl.w	r1, r3, r0
 80148d6:	430a      	orrs	r2, r1
 80148d8:	6122      	str	r2, [r4, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 80148da:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80148de:	40bb      	lsls	r3, r7
 80148e0:	6962      	ldr	r2, [r4, #20]
 80148e2:	4313      	orrs	r3, r2
 80148e4:	6163      	str	r3, [r4, #20]
}
 80148e6:	b003      	add	sp, #12
 80148e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080148ea <block_prepare_used>:

    return block;
}

static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
{
 80148ea:	b538      	push	{r3, r4, r5, lr}
 80148ec:	4605      	mov	r5, r0
    void * p = 0;
    if(block) {
 80148ee:	460c      	mov	r4, r1
 80148f0:	b331      	cbz	r1, 8014940 <block_prepare_used+0x56>
        tlsf_assert(size && "size must be non-zero");
 80148f2:	b902      	cbnz	r2, 80148f6 <block_prepare_used+0xc>
 80148f4:	e7fe      	b.n	80148f4 <block_prepare_used+0xa>
    return tlsf_cast(int, block->size & block_header_free_bit);
 80148f6:	684b      	ldr	r3, [r1, #4]
    tlsf_assert(block_is_free(block) && "block must be free");
 80148f8:	07d9      	lsls	r1, r3, #31
 80148fa:	d400      	bmi.n	80148fe <block_prepare_used+0x14>
 80148fc:	e7fe      	b.n	80148fc <block_prepare_used+0x12>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80148fe:	f023 0303 	bic.w	r3, r3, #3
    return block_size(block) >= sizeof(block_header_t) + size;
 8014902:	f102 0110 	add.w	r1, r2, #16
    if(block_can_split(block, size)) {
 8014906:	428b      	cmp	r3, r1
 8014908:	d30e      	bcc.n	8014928 <block_prepare_used+0x3e>
        block_header_t * remaining_block = block_split(block, size);
 801490a:	4611      	mov	r1, r2
 801490c:	4620      	mov	r0, r4
 801490e:	f7ff ff44 	bl	801479a <block_split>
 8014912:	4601      	mov	r1, r0
        block_link_next(block);
 8014914:	4620      	mov	r0, r4
 8014916:	f7ff ff3a 	bl	801478e <block_link_next>
    block->size |= block_header_prev_free_bit;
 801491a:	684b      	ldr	r3, [r1, #4]
 801491c:	f043 0302 	orr.w	r3, r3, #2
 8014920:	604b      	str	r3, [r1, #4]
        block_insert(control, remaining_block);
 8014922:	4628      	mov	r0, r5
 8014924:	f7ff ffb3 	bl	801488e <block_insert>
    block_header_t * next = block_next(block);
 8014928:	4620      	mov	r0, r4
 801492a:	f7ff ff28 	bl	801477e <block_next>
    block->size &= ~block_header_prev_free_bit;
 801492e:	6843      	ldr	r3, [r0, #4]
 8014930:	f023 0302 	bic.w	r3, r3, #2
 8014934:	6043      	str	r3, [r0, #4]
    block->size &= ~block_header_free_bit;
 8014936:	6863      	ldr	r3, [r4, #4]
 8014938:	f023 0301 	bic.w	r3, r3, #1
 801493c:	6063      	str	r3, [r4, #4]
    return tlsf_cast(void *,
 801493e:	3408      	adds	r4, #8
        block_trim_free(control, block, size);
        block_mark_as_used(block);
        p = block_to_ptr(block);
    }
    return p;
}
 8014940:	4620      	mov	r0, r4
 8014942:	bd38      	pop	{r3, r4, r5, pc}

08014944 <block_remove>:
{
 8014944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014946:	4605      	mov	r5, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014948:	6848      	ldr	r0, [r1, #4]
{
 801494a:	460c      	mov	r4, r1
    mapping_insert(block_size(block), &fl, &sl);
 801494c:	aa01      	add	r2, sp, #4
 801494e:	4669      	mov	r1, sp
 8014950:	f020 0003 	bic.w	r0, r0, #3
 8014954:	f7ff ff89 	bl	801486a <mapping_insert>
    remove_free_block(control, block, fl, sl);
 8014958:	e9dd 2300 	ldrd	r2, r3, [sp]
 801495c:	4621      	mov	r1, r4
 801495e:	4628      	mov	r0, r5
 8014960:	f7ff ff5f 	bl	8014822 <remove_free_block>
}
 8014964:	b003      	add	sp, #12
 8014966:	bd30      	pop	{r4, r5, pc}

08014968 <block_locate_free>:
{
 8014968:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int fl = 0, sl = 0;
 801496a:	2300      	movs	r3, #0
 801496c:	e9cd 3300 	strd	r3, r3, [sp]
{
 8014970:	4605      	mov	r5, r0
    if(size) {
 8014972:	460e      	mov	r6, r1
 8014974:	b919      	cbnz	r1, 801497e <block_locate_free+0x16>
    block_header_t * block = 0;
 8014976:	2400      	movs	r4, #0
}
 8014978:	4620      	mov	r0, r4
 801497a:	b002      	add	sp, #8
 801497c:	bd70      	pop	{r4, r5, r6, pc}
    if(size >= SMALL_BLOCK_SIZE) {
 801497e:	297f      	cmp	r1, #127	; 0x7f
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8014980:	bf81      	itttt	hi
 8014982:	fab1 f081 	clzhi	r0, r1
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 8014986:	f1c0 031a 	rsbhi	r3, r0, #26
 801498a:	2001      	movhi	r0, #1
 801498c:	4098      	lslhi	r0, r3
 801498e:	bf86      	itte	hi
 8014990:	f100 30ff 	addhi.w	r0, r0, #4294967295
        size += round;
 8014994:	1840      	addhi	r0, r0, r1
 8014996:	4608      	movls	r0, r1
    mapping_insert(size, fli, sli);
 8014998:	aa01      	add	r2, sp, #4
 801499a:	4669      	mov	r1, sp
 801499c:	f7ff ff65 	bl	801486a <mapping_insert>
        if(fl < FL_INDEX_COUNT) {
 80149a0:	9a00      	ldr	r2, [sp, #0]
 80149a2:	2a08      	cmp	r2, #8
 80149a4:	dce7      	bgt.n	8014976 <block_locate_free+0xe>
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 80149a6:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 80149aa:	9c01      	ldr	r4, [sp, #4]
 80149ac:	6949      	ldr	r1, [r1, #20]
 80149ae:	f04f 33ff 	mov.w	r3, #4294967295
 80149b2:	fa03 f404 	lsl.w	r4, r3, r4
    if(!sl_map) {
 80149b6:	400c      	ands	r4, r1
 80149b8:	d10e      	bne.n	80149d8 <block_locate_free+0x70>
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 80149ba:	3201      	adds	r2, #1
 80149bc:	4093      	lsls	r3, r2
 80149be:	692a      	ldr	r2, [r5, #16]
        if(!fl_map) {
 80149c0:	401a      	ands	r2, r3
 80149c2:	d0d8      	beq.n	8014976 <block_locate_free+0xe>
    return __builtin_ffs(word) - 1;
 80149c4:	fa92 f2a2 	rbit	r2, r2
 80149c8:	fab2 f282 	clz	r2, r2
        sl_map = control->sl_bitmap[fl];
 80149cc:	eb05 0382 	add.w	r3, r5, r2, lsl #2
        *fli = fl;
 80149d0:	9200      	str	r2, [sp, #0]
        sl_map = control->sl_bitmap[fl];
 80149d2:	695c      	ldr	r4, [r3, #20]
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 80149d4:	b904      	cbnz	r4, 80149d8 <block_locate_free+0x70>
 80149d6:	e7fe      	b.n	80149d6 <block_locate_free+0x6e>
    return __builtin_ffs(word) - 1;
 80149d8:	fa94 f3a4 	rbit	r3, r4
 80149dc:	2c00      	cmp	r4, #0
 80149de:	fab3 f383 	clz	r3, r3
 80149e2:	bf08      	it	eq
 80149e4:	f04f 33ff 	moveq.w	r3, #4294967295
    return control->blocks[fl][sl];
 80149e8:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 80149ec:	320e      	adds	r2, #14
    *sli = sl;
 80149ee:	9301      	str	r3, [sp, #4]
    return control->blocks[fl][sl];
 80149f0:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
    if(block) {
 80149f4:	2c00      	cmp	r4, #0
 80149f6:	d0be      	beq.n	8014976 <block_locate_free+0xe>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80149f8:	6862      	ldr	r2, [r4, #4]
 80149fa:	f022 0203 	bic.w	r2, r2, #3
        tlsf_assert(block_size(block) >= size);
 80149fe:	4296      	cmp	r6, r2
 8014a00:	d900      	bls.n	8014a04 <block_locate_free+0x9c>
 8014a02:	e7fe      	b.n	8014a02 <block_locate_free+0x9a>
        remove_free_block(control, block, fl, sl);
 8014a04:	9a00      	ldr	r2, [sp, #0]
 8014a06:	4621      	mov	r1, r4
 8014a08:	4628      	mov	r0, r5
 8014a0a:	f7ff ff0a 	bl	8014822 <remove_free_block>
    return block;
 8014a0e:	e7b3      	b.n	8014978 <block_locate_free+0x10>

08014a10 <block_merge_next>:
{
 8014a10:	b538      	push	{r3, r4, r5, lr}
 8014a12:	4602      	mov	r2, r0
    block_header_t * next = block_next(block);
 8014a14:	4608      	mov	r0, r1
 8014a16:	f7ff feb2 	bl	801477e <block_next>
{
 8014a1a:	460c      	mov	r4, r1
    tlsf_assert(next && "next physical block can't be null");
 8014a1c:	4605      	mov	r5, r0
 8014a1e:	b900      	cbnz	r0, 8014a22 <block_merge_next+0x12>
 8014a20:	e7fe      	b.n	8014a20 <block_merge_next+0x10>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8014a22:	6843      	ldr	r3, [r0, #4]
    if(block_is_free(next)) {
 8014a24:	07db      	lsls	r3, r3, #31
 8014a26:	d516      	bpl.n	8014a56 <block_merge_next+0x46>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014a28:	684b      	ldr	r3, [r1, #4]
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8014a2a:	f033 0303 	bics.w	r3, r3, #3
 8014a2e:	d100      	bne.n	8014a32 <block_merge_next+0x22>
 8014a30:	e7fe      	b.n	8014a30 <block_merge_next+0x20>
        block_remove(control, next);
 8014a32:	4601      	mov	r1, r0
 8014a34:	4610      	mov	r0, r2
 8014a36:	f7ff ff85 	bl	8014944 <block_remove>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014a3a:	6862      	ldr	r2, [r4, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8014a3c:	f032 0303 	bics.w	r3, r2, #3
 8014a40:	d100      	bne.n	8014a44 <block_merge_next+0x34>
 8014a42:	e7fe      	b.n	8014a42 <block_merge_next+0x32>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014a44:	686b      	ldr	r3, [r5, #4]
    prev->size += block_size(block) + block_header_overhead;
 8014a46:	3204      	adds	r2, #4
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014a48:	f023 0303 	bic.w	r3, r3, #3
    prev->size += block_size(block) + block_header_overhead;
 8014a4c:	4413      	add	r3, r2
 8014a4e:	6063      	str	r3, [r4, #4]
    block_link_next(prev);
 8014a50:	4620      	mov	r0, r4
 8014a52:	f7ff fe9c 	bl	801478e <block_link_next>
}
 8014a56:	4620      	mov	r0, r4
 8014a58:	bd38      	pop	{r3, r4, r5, pc}

08014a5a <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 8014a5a:	b538      	push	{r3, r4, r5, lr}
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 8014a5c:	3a08      	subs	r2, #8

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 8014a5e:	f011 0303 	ands.w	r3, r1, #3
{
 8014a62:	460c      	mov	r4, r1
    return x - (x & (align - 1));
 8014a64:	f022 0203 	bic.w	r2, r2, #3
    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 8014a68:	d115      	bne.n	8014a96 <lv_tlsf_add_pool+0x3c>
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 8014a6a:	f1a2 050c 	sub.w	r5, r2, #12
 8014a6e:	f647 71f4 	movw	r1, #32756	; 0x7ff4
 8014a72:	428d      	cmp	r5, r1
 8014a74:	d811      	bhi.n	8014a9a <lv_tlsf_add_pool+0x40>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8014a76:	4625      	mov	r5, r4
    block->size &= ~block_header_prev_free_bit;
 8014a78:	f042 0201 	orr.w	r2, r2, #1
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8014a7c:	f855 3904 	ldr.w	r3, [r5], #-4
    block->size &= ~block_header_prev_free_bit;
 8014a80:	606a      	str	r2, [r5, #4]
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
    block_set_size(block, pool_bytes);
    block_set_free(block);
    block_set_prev_used(block);
    block_insert(tlsf_cast(control_t *, tlsf), block);
 8014a82:	4629      	mov	r1, r5
 8014a84:	f7ff ff03 	bl	801488e <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 8014a88:	4628      	mov	r0, r5
 8014a8a:	f7ff fe80 	bl	801478e <block_link_next>
    block->size |= block_header_prev_free_bit;
 8014a8e:	2302      	movs	r3, #2
 8014a90:	6043      	str	r3, [r0, #4]
    block_set_size(next, 0);
    block_set_used(next);
    block_set_prev_free(next);

    return mem;
}
 8014a92:	4620      	mov	r0, r4
 8014a94:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 8014a96:	2400      	movs	r4, #0
 8014a98:	e7fb      	b.n	8014a92 <lv_tlsf_add_pool+0x38>
 8014a9a:	461c      	mov	r4, r3
 8014a9c:	e7f9      	b.n	8014a92 <lv_tlsf_add_pool+0x38>

08014a9e <lv_tlsf_create>:
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8014a9e:	f010 0103 	ands.w	r1, r0, #3
{
 8014aa2:	b510      	push	{r4, lr}
 8014aa4:	4604      	mov	r4, r0
    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8014aa6:	d114      	bne.n	8014ad2 <lv_tlsf_create+0x34>
    control->block_null.prev_free = &control->block_null;
 8014aa8:	e9c0 0002 	strd	r0, r0, [r0, #8]
    control->fl_bitmap = 0;
 8014aac:	6101      	str	r1, [r0, #16]
        control->sl_bitmap[i] = 0;
 8014aae:	2224      	movs	r2, #36	; 0x24
 8014ab0:	3014      	adds	r0, #20
 8014ab2:	f009 fab3 	bl	801e01c <memset>
 8014ab6:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8014aba:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8014abe:	f103 0180 	add.w	r1, r3, #128	; 0x80
            control->blocks[i][j] = &control->block_null;
 8014ac2:	f843 4b04 	str.w	r4, [r3], #4
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8014ac6:	428b      	cmp	r3, r1
 8014ac8:	d1fb      	bne.n	8014ac2 <lv_tlsf_create+0x24>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8014aca:	429a      	cmp	r2, r3
 8014acc:	d1f7      	bne.n	8014abe <lv_tlsf_create+0x20>
    }

    control_constructor(tlsf_cast(control_t *, mem));

    return tlsf_cast(lv_tlsf_t, mem);
}
 8014ace:	4620      	mov	r0, r4
 8014ad0:	bd10      	pop	{r4, pc}
        return 0;
 8014ad2:	2400      	movs	r4, #0
 8014ad4:	e7fb      	b.n	8014ace <lv_tlsf_create+0x30>

08014ad6 <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 8014ad6:	b570      	push	{r4, r5, r6, lr}
 8014ad8:	460e      	mov	r6, r1
 8014ada:	4605      	mov	r5, r0
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 8014adc:	f7ff ffdf 	bl	8014a9e <lv_tlsf_create>
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 8014ae0:	f5a6 6297 	sub.w	r2, r6, #1208	; 0x4b8
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 8014ae4:	4604      	mov	r4, r0
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 8014ae6:	f505 6197 	add.w	r1, r5, #1208	; 0x4b8
 8014aea:	f7ff ffb6 	bl	8014a5a <lv_tlsf_add_pool>
    return tlsf;
}
 8014aee:	4620      	mov	r0, r4
 8014af0:	bd70      	pop	{r4, r5, r6, pc}

08014af2 <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 8014af2:	b513      	push	{r0, r1, r4, lr}
 8014af4:	4604      	mov	r4, r0
 8014af6:	4608      	mov	r0, r1
    control_t * control = tlsf_cast(control_t *, tlsf);
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8014af8:	2104      	movs	r1, #4
 8014afa:	f7ff fe7e 	bl	80147fa <adjust_request_size>
    block_header_t * block = block_locate_free(control, adjust);
 8014afe:	4601      	mov	r1, r0
 8014b00:	9001      	str	r0, [sp, #4]
 8014b02:	4620      	mov	r0, r4
 8014b04:	f7ff ff30 	bl	8014968 <block_locate_free>
    return block_prepare_used(control, block, adjust);
 8014b08:	9a01      	ldr	r2, [sp, #4]
    block_header_t * block = block_locate_free(control, adjust);
 8014b0a:	4601      	mov	r1, r0
    return block_prepare_used(control, block, adjust);
 8014b0c:	4620      	mov	r0, r4
}
 8014b0e:	b002      	add	sp, #8
 8014b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return block_prepare_used(control, block, adjust);
 8014b14:	f7ff bee9 	b.w	80148ea <block_prepare_used>

08014b18 <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 8014b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b1a:	4606      	mov	r6, r0
    size_t size = 0;
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 8014b1c:	460c      	mov	r4, r1
 8014b1e:	2900      	cmp	r1, #0
 8014b20:	d03a      	beq.n	8014b98 <lv_tlsf_free+0x80>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8014b22:	f851 7c04 	ldr.w	r7, [r1, #-4]
        control_t * control = tlsf_cast(control_t *, tlsf);
        block_header_t * block = block_from_ptr(ptr);
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8014b26:	07f9      	lsls	r1, r7, #31
 8014b28:	d500      	bpl.n	8014b2c <lv_tlsf_free+0x14>
 8014b2a:	e7fe      	b.n	8014b2a <lv_tlsf_free+0x12>
    return tlsf_cast(block_header_t *,
 8014b2c:	f1a4 0508 	sub.w	r5, r4, #8
    block_header_t * next = block_link_next(block);
 8014b30:	4628      	mov	r0, r5
 8014b32:	f7ff fe2c 	bl	801478e <block_link_next>
    block->size |= block_header_prev_free_bit;
 8014b36:	6843      	ldr	r3, [r0, #4]
 8014b38:	f043 0302 	orr.w	r3, r3, #2
 8014b3c:	6043      	str	r3, [r0, #4]
    block->size |= block_header_free_bit;
 8014b3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014b42:	f043 0301 	orr.w	r3, r3, #1
    if(block_is_prev_free(block)) {
 8014b46:	079a      	lsls	r2, r3, #30
    block->size |= block_header_free_bit;
 8014b48:	f844 3c04 	str.w	r3, [r4, #-4]
    if(block_is_prev_free(block)) {
 8014b4c:	d51a      	bpl.n	8014b84 <lv_tlsf_free+0x6c>
    return block->prev_phys_block;
 8014b4e:	f854 5c08 	ldr.w	r5, [r4, #-8]
        tlsf_assert(prev && "prev physical block can't be null");
 8014b52:	b905      	cbnz	r5, 8014b56 <lv_tlsf_free+0x3e>
 8014b54:	e7fe      	b.n	8014b54 <lv_tlsf_free+0x3c>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8014b56:	686b      	ldr	r3, [r5, #4]
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8014b58:	07db      	lsls	r3, r3, #31
 8014b5a:	d400      	bmi.n	8014b5e <lv_tlsf_free+0x46>
 8014b5c:	e7fe      	b.n	8014b5c <lv_tlsf_free+0x44>
        block_remove(control, prev);
 8014b5e:	4629      	mov	r1, r5
 8014b60:	4630      	mov	r0, r6
 8014b62:	f7ff feef 	bl	8014944 <block_remove>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014b66:	686a      	ldr	r2, [r5, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8014b68:	f032 0303 	bics.w	r3, r2, #3
 8014b6c:	d100      	bne.n	8014b70 <lv_tlsf_free+0x58>
 8014b6e:	e7fe      	b.n	8014b6e <lv_tlsf_free+0x56>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014b70:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014b74:	f023 0303 	bic.w	r3, r3, #3
    prev->size += block_size(block) + block_header_overhead;
 8014b78:	4413      	add	r3, r2
 8014b7a:	3304      	adds	r3, #4
 8014b7c:	606b      	str	r3, [r5, #4]
    block_link_next(prev);
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f7ff fe05 	bl	801478e <block_link_next>
        size = block->size;
        block_mark_as_free(block);
        block = block_merge_prev(control, block);
        block = block_merge_next(control, block);
 8014b84:	4629      	mov	r1, r5
 8014b86:	4630      	mov	r0, r6
 8014b88:	f7ff ff42 	bl	8014a10 <block_merge_next>
 8014b8c:	4601      	mov	r1, r0
        block_insert(control, block);
 8014b8e:	4630      	mov	r0, r6
 8014b90:	f7ff fe7d 	bl	801488e <block_insert>
    }

    return size;
}
 8014b94:	4638      	mov	r0, r7
 8014b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t size = 0;
 8014b98:	460f      	mov	r7, r1
    return size;
 8014b9a:	e7fb      	b.n	8014b94 <lv_tlsf_free+0x7c>

08014b9c <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 8014b9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ba0:	4607      	mov	r7, r0
 8014ba2:	4616      	mov	r6, r2
    control_t * control = tlsf_cast(control_t *, tlsf);
    void * p = 0;

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 8014ba4:	460d      	mov	r5, r1
 8014ba6:	b131      	cbz	r1, 8014bb6 <lv_tlsf_realloc+0x1a>
 8014ba8:	b952      	cbnz	r2, 8014bc0 <lv_tlsf_realloc+0x24>
        lv_tlsf_free(tlsf, ptr);
 8014baa:	f7ff ffb5 	bl	8014b18 <lv_tlsf_free>
    void * p = 0;
 8014bae:	4634      	mov	r4, r6
            p = ptr;
        }
    }

    return p;
}
 8014bb0:	4620      	mov	r0, r4
 8014bb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bb6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        p = lv_tlsf_malloc(tlsf, size);
 8014bba:	4611      	mov	r1, r2
 8014bbc:	f7ff bf99 	b.w	8014af2 <lv_tlsf_malloc>
    return tlsf_cast(block_header_t *,
 8014bc0:	f1a1 0908 	sub.w	r9, r1, #8
        block_header_t * next = block_next(block);
 8014bc4:	4648      	mov	r0, r9
 8014bc6:	f7ff fdda 	bl	801477e <block_next>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014bca:	f851 bc04 	ldr.w	fp, [r1, #-4]
        block_header_t * next = block_next(block);
 8014bce:	4682      	mov	sl, r0
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8014bd0:	2104      	movs	r1, #4
 8014bd2:	4610      	mov	r0, r2
 8014bd4:	f7ff fe11 	bl	80147fa <adjust_request_size>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014bd8:	f02b 0803 	bic.w	r8, fp, #3
        if(size > cursize && adjust == 0) {
 8014bdc:	4546      	cmp	r6, r8
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8014bde:	4604      	mov	r4, r0
        if(size > cursize && adjust == 0) {
 8014be0:	d901      	bls.n	8014be6 <lv_tlsf_realloc+0x4a>
 8014be2:	2800      	cmp	r0, #0
 8014be4:	d0e4      	beq.n	8014bb0 <lv_tlsf_realloc+0x14>
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8014be6:	f01b 0f01 	tst.w	fp, #1
 8014bea:	d000      	beq.n	8014bee <lv_tlsf_realloc+0x52>
 8014bec:	e7fe      	b.n	8014bec <lv_tlsf_realloc+0x50>
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8014bee:	45a0      	cmp	r8, r4
 8014bf0:	d22e      	bcs.n	8014c50 <lv_tlsf_realloc+0xb4>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014bf2:	f8da 3004 	ldr.w	r3, [sl, #4]
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8014bf6:	07d9      	lsls	r1, r3, #31
 8014bf8:	d506      	bpl.n	8014c08 <lv_tlsf_realloc+0x6c>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014bfa:	f023 0303 	bic.w	r3, r3, #3
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 8014bfe:	f108 0204 	add.w	r2, r8, #4
 8014c02:	4413      	add	r3, r2
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8014c04:	42a3      	cmp	r3, r4
 8014c06:	d212      	bcs.n	8014c2e <lv_tlsf_realloc+0x92>
            p = lv_tlsf_malloc(tlsf, size);
 8014c08:	4631      	mov	r1, r6
 8014c0a:	4638      	mov	r0, r7
 8014c0c:	f7ff ff71 	bl	8014af2 <lv_tlsf_malloc>
            if(p) {
 8014c10:	4604      	mov	r4, r0
 8014c12:	2800      	cmp	r0, #0
 8014c14:	d0cc      	beq.n	8014bb0 <lv_tlsf_realloc+0x14>
                lv_memcpy(p, ptr, minsize);
 8014c16:	4546      	cmp	r6, r8
 8014c18:	4632      	mov	r2, r6
 8014c1a:	4629      	mov	r1, r5
 8014c1c:	bf28      	it	cs
 8014c1e:	4642      	movcs	r2, r8
 8014c20:	f7fe fc4c 	bl	80134bc <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 8014c24:	4629      	mov	r1, r5
 8014c26:	4638      	mov	r0, r7
 8014c28:	f7ff ff76 	bl	8014b18 <lv_tlsf_free>
 8014c2c:	e7c0      	b.n	8014bb0 <lv_tlsf_realloc+0x14>
                block_merge_next(control, block);
 8014c2e:	4649      	mov	r1, r9
 8014c30:	4638      	mov	r0, r7
 8014c32:	f7ff feed 	bl	8014a10 <block_merge_next>
    block_header_t * next = block_next(block);
 8014c36:	4648      	mov	r0, r9
 8014c38:	f7ff fda1 	bl	801477e <block_next>
    block->size &= ~block_header_prev_free_bit;
 8014c3c:	6843      	ldr	r3, [r0, #4]
 8014c3e:	f023 0302 	bic.w	r3, r3, #2
 8014c42:	6043      	str	r3, [r0, #4]
    block->size &= ~block_header_free_bit;
 8014c44:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8014c48:	f023 0301 	bic.w	r3, r3, #1
 8014c4c:	f845 3c04 	str.w	r3, [r5, #-4]
    return tlsf_cast(int, block->size & block_header_free_bit);
 8014c50:	f855 3c04 	ldr.w	r3, [r5, #-4]
    tlsf_assert(!block_is_free(block) && "block must be used");
 8014c54:	07da      	lsls	r2, r3, #31
 8014c56:	d500      	bpl.n	8014c5a <lv_tlsf_realloc+0xbe>
 8014c58:	e7fe      	b.n	8014c58 <lv_tlsf_realloc+0xbc>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8014c5a:	f023 0303 	bic.w	r3, r3, #3
    return block_size(block) >= sizeof(block_header_t) + size;
 8014c5e:	f104 0210 	add.w	r2, r4, #16
    if(block_can_split(block, size)) {
 8014c62:	4293      	cmp	r3, r2
 8014c64:	d30f      	bcc.n	8014c86 <lv_tlsf_realloc+0xea>
        block_header_t * remaining_block = block_split(block, size);
 8014c66:	4621      	mov	r1, r4
 8014c68:	4648      	mov	r0, r9
 8014c6a:	f7ff fd96 	bl	801479a <block_split>
    block->size &= ~block_header_prev_free_bit;
 8014c6e:	6843      	ldr	r3, [r0, #4]
 8014c70:	f023 0302 	bic.w	r3, r3, #2
        block_header_t * remaining_block = block_split(block, size);
 8014c74:	4601      	mov	r1, r0
    block->size &= ~block_header_prev_free_bit;
 8014c76:	6043      	str	r3, [r0, #4]
        remaining_block = block_merge_next(control, remaining_block);
 8014c78:	4638      	mov	r0, r7
 8014c7a:	f7ff fec9 	bl	8014a10 <block_merge_next>
 8014c7e:	4601      	mov	r1, r0
        block_insert(control, remaining_block);
 8014c80:	4638      	mov	r0, r7
 8014c82:	f7ff fe04 	bl	801488e <block_insert>
 8014c86:	462c      	mov	r4, r5
 8014c88:	e792      	b.n	8014bb0 <lv_tlsf_realloc+0x14>

08014c8a <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if(LV_IS_ASCII(str[0]))
 8014c8a:	f990 2000 	ldrsb.w	r2, [r0]
 8014c8e:	7803      	ldrb	r3, [r0, #0]
 8014c90:	2a00      	cmp	r2, #0
 8014c92:	da0e      	bge.n	8014cb2 <lv_txt_utf8_size+0x28>
        return 1;
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 8014c94:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8014c98:	2ac0      	cmp	r2, #192	; 0xc0
 8014c9a:	d00c      	beq.n	8014cb6 <lv_txt_utf8_size+0x2c>
        return 2;
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 8014c9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8014ca0:	2ae0      	cmp	r2, #224	; 0xe0
 8014ca2:	d00a      	beq.n	8014cba <lv_txt_utf8_size+0x30>
        return 3;
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 8014ca4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
        return 4;
 8014ca8:	2bf0      	cmp	r3, #240	; 0xf0
 8014caa:	bf14      	ite	ne
 8014cac:	2000      	movne	r0, #0
 8014cae:	2004      	moveq	r0, #4
 8014cb0:	4770      	bx	lr
        return 1;
 8014cb2:	2001      	movs	r0, #1
 8014cb4:	4770      	bx	lr
        return 2;
 8014cb6:	2002      	movs	r0, #2
 8014cb8:	4770      	bx	lr
        return 3;
 8014cba:	2003      	movs	r0, #3
    return 0;
}
 8014cbc:	4770      	bx	lr

08014cbe <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 8014cbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
     */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8014cc0:	2300      	movs	r3, #0
{
 8014cc2:	4602      	mov	r2, r0
    uint32_t i_tmp = 0;
 8014cc4:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 8014cc6:	b901      	cbnz	r1, 8014cca <lv_txt_utf8_next+0xc>
 8014cc8:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 8014cca:	680b      	ldr	r3, [r1, #0]
 8014ccc:	56d5      	ldrsb	r5, [r2, r3]
 8014cce:	5cd0      	ldrb	r0, [r2, r3]
 8014cd0:	2d00      	cmp	r5, #0
        result = txt[*i];
        (*i)++;
 8014cd2:	f103 0401 	add.w	r4, r3, #1
    if(LV_IS_ASCII(txt[*i])) {
 8014cd6:	db02      	blt.n	8014cde <lv_txt_utf8_next+0x20>
        (*i)++;
 8014cd8:	600c      	str	r4, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 8014cda:	b002      	add	sp, #8
 8014cdc:	bd70      	pop	{r4, r5, r6, pc}
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 8014cde:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8014ce2:	2dc0      	cmp	r5, #192	; 0xc0
 8014ce4:	d110      	bne.n	8014d08 <lv_txt_utf8_next+0x4a>
            (*i)++;
 8014ce6:	600c      	str	r4, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8014ce8:	5d12      	ldrb	r2, [r2, r4]
 8014cea:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 8014cee:	2c80      	cmp	r4, #128	; 0x80
 8014cf0:	d001      	beq.n	8014cf6 <lv_txt_utf8_next+0x38>
    uint32_t result = 0;
 8014cf2:	2000      	movs	r0, #0
 8014cf4:	e7f1      	b.n	8014cda <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8014cf6:	0180      	lsls	r0, r0, #6
 8014cf8:	f400 60f8 	and.w	r0, r0, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 8014cfc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8014d00:	4410      	add	r0, r2
            (*i)++;
 8014d02:	3302      	adds	r3, #2
            (*i)++;
 8014d04:	600b      	str	r3, [r1, #0]
 8014d06:	e7e8      	b.n	8014cda <lv_txt_utf8_next+0x1c>
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 8014d08:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 8014d0c:	2de0      	cmp	r5, #224	; 0xe0
 8014d0e:	d117      	bne.n	8014d40 <lv_txt_utf8_next+0x82>
            (*i)++;
 8014d10:	600c      	str	r4, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8014d12:	5d14      	ldrb	r4, [r2, r4]
 8014d14:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8014d18:	2d80      	cmp	r5, #128	; 0x80
 8014d1a:	d1ea      	bne.n	8014cf2 <lv_txt_utf8_next+0x34>
            (*i)++;
 8014d1c:	1c9d      	adds	r5, r3, #2
 8014d1e:	600d      	str	r5, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8014d20:	5d52      	ldrb	r2, [r2, r5]
 8014d22:	f002 05c0 	and.w	r5, r2, #192	; 0xc0
 8014d26:	2d80      	cmp	r5, #128	; 0x80
 8014d28:	d1e3      	bne.n	8014cf2 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8014d2a:	0300      	lsls	r0, r0, #12
 8014d2c:	b280      	uxth	r0, r0
            result += (txt[*i] & 0x3F);
 8014d2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8014d32:	01a4      	lsls	r4, r4, #6
 8014d34:	4410      	add	r0, r2
 8014d36:	f404 647c 	and.w	r4, r4, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
 8014d3a:	4420      	add	r0, r4
            (*i)++;
 8014d3c:	3303      	adds	r3, #3
 8014d3e:	e7e1      	b.n	8014d04 <lv_txt_utf8_next+0x46>
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 8014d40:	f000 05f8 	and.w	r5, r0, #248	; 0xf8
 8014d44:	2df0      	cmp	r5, #240	; 0xf0
            (*i)++;
 8014d46:	600c      	str	r4, [r1, #0]
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 8014d48:	d1d3      	bne.n	8014cf2 <lv_txt_utf8_next+0x34>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8014d4a:	5d14      	ldrb	r4, [r2, r4]
 8014d4c:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8014d50:	2d80      	cmp	r5, #128	; 0x80
 8014d52:	d1ce      	bne.n	8014cf2 <lv_txt_utf8_next+0x34>
            (*i)++;
 8014d54:	1c9d      	adds	r5, r3, #2
 8014d56:	600d      	str	r5, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8014d58:	5d55      	ldrb	r5, [r2, r5]
 8014d5a:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8014d5e:	2e80      	cmp	r6, #128	; 0x80
 8014d60:	d1c7      	bne.n	8014cf2 <lv_txt_utf8_next+0x34>
            (*i)++;
 8014d62:	1cde      	adds	r6, r3, #3
 8014d64:	600e      	str	r6, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8014d66:	5d92      	ldrb	r2, [r2, r6]
 8014d68:	f002 06c0 	and.w	r6, r2, #192	; 0xc0
 8014d6c:	2e80      	cmp	r6, #128	; 0x80
 8014d6e:	d1c0      	bne.n	8014cf2 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8014d70:	0480      	lsls	r0, r0, #18
 8014d72:	f400 16e0 	and.w	r6, r0, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8014d76:	01ad      	lsls	r5, r5, #6
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8014d78:	0320      	lsls	r0, r4, #12
 8014d7a:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8014d7e:	f405 657c 	and.w	r5, r5, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 8014d82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8014d86:	4330      	orrs	r0, r6
            result += txt[*i] & 0x3F;
 8014d88:	4415      	add	r5, r2
 8014d8a:	4428      	add	r0, r5
            (*i)++;
 8014d8c:	3304      	adds	r3, #4
 8014d8e:	e7b9      	b.n	8014d04 <lv_txt_utf8_next+0x46>

08014d90 <lv_txt_utf8_prev>:
{
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 8014d90:	680b      	ldr	r3, [r1, #0]
{
 8014d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 8014d94:	3b01      	subs	r3, #1
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
 8014d96:	4f0e      	ldr	r7, [pc, #56]	; (8014dd0 <lv_txt_utf8_prev+0x40>)
    (*i)--;
 8014d98:	600b      	str	r3, [r1, #0]
{
 8014d9a:	4606      	mov	r6, r0
 8014d9c:	460c      	mov	r4, r1
    (*i)--;
 8014d9e:	2504      	movs	r5, #4
        c_size = _lv_txt_encoded_size(&txt[*i]);
 8014da0:	6820      	ldr	r0, [r4, #0]
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	4430      	add	r0, r6
 8014da6:	4798      	blx	r3
        if(c_size == 0) {
 8014da8:	6823      	ldr	r3, [r4, #0]
 8014daa:	b948      	cbnz	r0, 8014dc0 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 8014dac:	b12b      	cbz	r3, 8014dba <lv_txt_utf8_prev+0x2a>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8014dae:	3d01      	subs	r5, #1
                (*i)--;
 8014db0:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8014db2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
                (*i)--;
 8014db6:	6023      	str	r3, [r4, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8014db8:	d1f2      	bne.n	8014da0 <lv_txt_utf8_prev+0x10>
 8014dba:	2000      	movs	r0, #0

    uint32_t i_tmp  = *i;
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/

    return letter;
}
 8014dbc:	b003      	add	sp, #12
 8014dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 8014dc0:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8014dc2:	4b04      	ldr	r3, [pc, #16]	; (8014dd4 <lv_txt_utf8_prev+0x44>)
 8014dc4:	a901      	add	r1, sp, #4
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	4630      	mov	r0, r6
 8014dca:	4798      	blx	r3
    return letter;
 8014dcc:	e7f6      	b.n	8014dbc <lv_txt_utf8_prev+0x2c>
 8014dce:	bf00      	nop
 8014dd0:	2000002c 	.word	0x2000002c
 8014dd4:	20000024 	.word	0x20000024

08014dd8 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8014dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 8014ddc:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8014dde:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8014e0c <lv_txt_utf8_get_byte_id+0x34>
{
 8014de2:	4605      	mov	r5, r0
 8014de4:	460f      	mov	r7, r1
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8014de6:	4626      	mov	r6, r4
 8014de8:	42be      	cmp	r6, r7
 8014dea:	d002      	beq.n	8014df2 <lv_txt_utf8_get_byte_id+0x1a>
 8014dec:	5d2b      	ldrb	r3, [r5, r4]
 8014dee:	1928      	adds	r0, r5, r4
 8014df0:	b913      	cbnz	r3, 8014df8 <lv_txt_utf8_get_byte_id+0x20>
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
    }

    return byte_cnt;
}
 8014df2:	4620      	mov	r0, r4
 8014df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8014df8:	f8d8 3000 	ldr.w	r3, [r8]
 8014dfc:	4798      	blx	r3
        byte_cnt += c_size ? c_size : 1;
 8014dfe:	2801      	cmp	r0, #1
 8014e00:	bf38      	it	cc
 8014e02:	2001      	movcc	r0, #1
 8014e04:	fa54 f480 	uxtab	r4, r4, r0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8014e08:	3601      	adds	r6, #1
 8014e0a:	e7ed      	b.n	8014de8 <lv_txt_utf8_get_byte_id+0x10>
 8014e0c:	2000002c 	.word	0x2000002c

08014e10 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8014e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i        = 0;
 8014e12:	2400      	movs	r4, #0
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8014e14:	4f07      	ldr	r7, [pc, #28]	; (8014e34 <lv_txt_utf8_get_char_id+0x24>)
    uint32_t i        = 0;
 8014e16:	9401      	str	r4, [sp, #4]
{
 8014e18:	4606      	mov	r6, r0
 8014e1a:	460d      	mov	r5, r1
    while(i < byte_id) {
 8014e1c:	9b01      	ldr	r3, [sp, #4]
 8014e1e:	42ab      	cmp	r3, r5
 8014e20:	d302      	bcc.n	8014e28 <lv_txt_utf8_get_char_id+0x18>
        char_cnt++;
    }

    return char_cnt;
}
 8014e22:	4620      	mov	r0, r4
 8014e24:	b003      	add	sp, #12
 8014e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	a901      	add	r1, sp, #4
 8014e2c:	4630      	mov	r0, r6
 8014e2e:	4798      	blx	r3
        char_cnt++;
 8014e30:	3401      	adds	r4, #1
 8014e32:	e7f3      	b.n	8014e1c <lv_txt_utf8_get_char_id+0xc>
 8014e34:	20000024 	.word	0x20000024

08014e38 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8014e38:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 8014e3a:	2400      	movs	r4, #0

    while(txt[i] != '\0') {
        _lv_txt_encoded_next(txt, &i);
 8014e3c:	4e07      	ldr	r6, [pc, #28]	; (8014e5c <lv_txt_utf8_get_length+0x24>)
    uint32_t i   = 0;
 8014e3e:	9401      	str	r4, [sp, #4]
{
 8014e40:	4605      	mov	r5, r0
    while(txt[i] != '\0') {
 8014e42:	9b01      	ldr	r3, [sp, #4]
 8014e44:	5ceb      	ldrb	r3, [r5, r3]
 8014e46:	b913      	cbnz	r3, 8014e4e <lv_txt_utf8_get_length+0x16>
        len++;
    }

    return len;
}
 8014e48:	4620      	mov	r0, r4
 8014e4a:	b002      	add	sp, #8
 8014e4c:	bd70      	pop	{r4, r5, r6, pc}
        _lv_txt_encoded_next(txt, &i);
 8014e4e:	6833      	ldr	r3, [r6, #0]
 8014e50:	a901      	add	r1, sp, #4
 8014e52:	4628      	mov	r0, r5
 8014e54:	4798      	blx	r3
        len++;
 8014e56:	3401      	adds	r4, #1
 8014e58:	e7f3      	b.n	8014e42 <lv_txt_utf8_get_length+0xa>
 8014e5a:	bf00      	nop
 8014e5c:	20000024 	.word	0x20000024

08014e60 <lv_txt_unicode_to_utf8>:
    if(letter_uni < 128) return letter_uni;
 8014e60:	287f      	cmp	r0, #127	; 0x7f
{
 8014e62:	b082      	sub	sp, #8
    if(letter_uni < 128) return letter_uni;
 8014e64:	d913      	bls.n	8014e8e <lv_txt_unicode_to_utf8+0x2e>
    if(letter_uni < 0x0800) {
 8014e66:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8014e6a:	d212      	bcs.n	8014e92 <lv_txt_unicode_to_utf8+0x32>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8014e6c:	0983      	lsrs	r3, r0, #6
 8014e6e:	f063 033f 	orn	r3, r3, #63	; 0x3f
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014e72:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8014e76:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014e7a:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[2] = 0;
 8014e7e:	2300      	movs	r3, #0
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014e80:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
 8014e84:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = 0;
 8014e88:	f88d 3007 	strb.w	r3, [sp, #7]
    return *res_p;
 8014e8c:	9801      	ldr	r0, [sp, #4]
}
 8014e8e:	b002      	add	sp, #8
 8014e90:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
 8014e92:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8014e96:	d212      	bcs.n	8014ebe <lv_txt_unicode_to_utf8+0x5e>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 8014e98:	0b03      	lsrs	r3, r0, #12
 8014e9a:	f063 031f 	orn	r3, r3, #31
 8014e9e:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8014ea2:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014ea6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8014eaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014eae:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8014eb2:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014eb6:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	e7e4      	b.n	8014e88 <lv_txt_unicode_to_utf8+0x28>
    else if(letter_uni < 0x110000) {
 8014ebe:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8014ec2:	d217      	bcs.n	8014ef4 <lv_txt_unicode_to_utf8+0x94>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 8014ec4:	0c83      	lsrs	r3, r0, #18
 8014ec6:	f063 030f 	orn	r3, r3, #15
 8014eca:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8014ece:	f3c0 3305 	ubfx	r3, r0, #12, #6
 8014ed2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014ed6:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8014eda:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014ede:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8014ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014ee6:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8014eea:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8014eee:	f88d 0007 	strb.w	r0, [sp, #7]
 8014ef2:	e7cb      	b.n	8014e8c <lv_txt_unicode_to_utf8+0x2c>
        return 0;
 8014ef4:	2000      	movs	r0, #0
 8014ef6:	e7ca      	b.n	8014e8e <lv_txt_unicode_to_utf8+0x2e>

08014ef8 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8014ef8:	2923      	cmp	r1, #35	; 0x23
{
 8014efa:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8014efc:	d117      	bne.n	8014f2e <_lv_txt_is_cmd+0x36>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8014efe:	7803      	ldrb	r3, [r0, #0]
 8014f00:	b91b      	cbnz	r3, 8014f0a <_lv_txt_is_cmd+0x12>
            *state = LV_TEXT_CMD_STATE_PAR;
 8014f02:	2301      	movs	r3, #1
 8014f04:	7003      	strb	r3, [r0, #0]
            ret    = true;
 8014f06:	2001      	movs	r0, #1
 8014f08:	e004      	b.n	8014f14 <_lv_txt_is_cmd+0x1c>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 8014f0a:	2b01      	cmp	r3, #1
 8014f0c:	f04f 0000 	mov.w	r0, #0
 8014f10:	d109      	bne.n	8014f26 <_lv_txt_is_cmd+0x2e>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8014f12:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8014f14:	7813      	ldrb	r3, [r2, #0]
 8014f16:	2b01      	cmp	r3, #1
 8014f18:	d104      	bne.n	8014f24 <_lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 8014f1a:	2920      	cmp	r1, #32
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8014f1c:	bf04      	itt	eq
 8014f1e:	2102      	moveq	r1, #2
 8014f20:	7011      	strbeq	r1, [r2, #0]
        ret = true;
 8014f22:	4618      	mov	r0, r3
}
 8014f24:	4770      	bx	lr
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 8014f26:	2b02      	cmp	r3, #2
 8014f28:	d1f4      	bne.n	8014f14 <_lv_txt_is_cmd+0x1c>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8014f2a:	7010      	strb	r0, [r2, #0]
 8014f2c:	e7eb      	b.n	8014f06 <_lv_txt_is_cmd+0xe>
    bool ret = false;
 8014f2e:	2000      	movs	r0, #0
 8014f30:	e7f0      	b.n	8014f14 <_lv_txt_is_cmd+0x1c>
	...

08014f34 <_lv_txt_get_next_line>:
{
 8014f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f38:	ed2d 8b02 	vpush	{d8}
 8014f3c:	b08f      	sub	sp, #60	; 0x3c
 8014f3e:	4699      	mov	r9, r3
 8014f40:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8014f44:	9303      	str	r3, [sp, #12]
    if(used_width) *used_width = 0;
 8014f46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
{
 8014f48:	9204      	str	r2, [sp, #16]
 8014f4a:	4680      	mov	r8, r0
 8014f4c:	460d      	mov	r5, r1
    if(used_width) *used_width = 0;
 8014f4e:	b113      	cbz	r3, 8014f56 <_lv_txt_get_next_line+0x22>
 8014f50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014f52:	2300      	movs	r3, #0
 8014f54:	8013      	strh	r3, [r2, #0]
    if(txt == NULL) return 0;
 8014f56:	f1b8 0f00 	cmp.w	r8, #0
 8014f5a:	f000 80f9 	beq.w	8015150 <_lv_txt_get_next_line+0x21c>
    if(txt[0] == '\0') return 0;
 8014f5e:	f898 0000 	ldrb.w	r0, [r8]
 8014f62:	b1c8      	cbz	r0, 8014f98 <_lv_txt_get_next_line+0x64>
    if(font == NULL) return 0;
 8014f64:	2d00      	cmp	r5, #0
 8014f66:	f000 80f5 	beq.w	8015154 <_lv_txt_get_next_line+0x220>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 8014f6a:	9b03      	ldr	r3, [sp, #12]
 8014f6c:	f013 0006 	ands.w	r0, r3, #6
 8014f70:	d017      	beq.n	8014fa2 <_lv_txt_get_next_line+0x6e>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8014f72:	2000      	movs	r0, #0
 8014f74:	e000      	b.n	8014f78 <_lv_txt_get_next_line+0x44>
 8014f76:	3001      	adds	r0, #1
 8014f78:	f818 3000 	ldrb.w	r3, [r8, r0]
 8014f7c:	2b0a      	cmp	r3, #10
 8014f7e:	f000 80eb 	beq.w	8015158 <_lv_txt_get_next_line+0x224>
 8014f82:	2b0d      	cmp	r3, #13
 8014f84:	f000 80e8 	beq.w	8015158 <_lv_txt_get_next_line+0x224>
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d1f4      	bne.n	8014f76 <_lv_txt_get_next_line+0x42>
        if(used_width) *used_width = -1;
 8014f8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014f8e:	b11b      	cbz	r3, 8014f98 <_lv_txt_get_next_line+0x64>
 8014f90:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f96:	8013      	strh	r3, [r2, #0]
}
 8014f98:	b00f      	add	sp, #60	; 0x3c
 8014f9a:	ecbd 8b02 	vpop	{d8}
 8014f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014fa2:	9b03      	ldr	r3, [sp, #12]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8014fa4:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014fa8:	f013 0302 	ands.w	r3, r3, #2
 8014fac:	9305      	str	r3, [sp, #20]
 8014fae:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8014fb2:	bf18      	it	ne
 8014fb4:	4699      	movne	r9, r3
    uint32_t i = 0;                                        /*Iterating index into txt*/
 8014fb6:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t line_w = 0;
 8014fb8:	9000      	str	r0, [sp, #0]
    while(txt[i] != '\0' && max_width > 0) {
 8014fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fbc:	9301      	str	r3, [sp, #4]
 8014fbe:	4443      	add	r3, r8
 8014fc0:	ee08 3a10 	vmov	s16, r3
 8014fc4:	9b01      	ldr	r3, [sp, #4]
 8014fc6:	f818 3003 	ldrb.w	r3, [r8, r3]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	f000 80a7 	beq.w	801511e <_lv_txt_get_next_line+0x1ea>
 8014fd0:	f1b9 0f00 	cmp.w	r9, #0
 8014fd4:	f340 80a3 	ble.w	801511e <_lv_txt_get_next_line+0x1ea>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8014fd8:	9a05      	ldr	r2, [sp, #20]
 8014fda:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8014fde:	2a00      	cmp	r2, #0
 8014fe0:	bf08      	it	eq
 8014fe2:	464b      	moveq	r3, r9
 8014fe4:	9307      	str	r3, [sp, #28]
    letter = _lv_txt_encoded_next(txt, &i_next);
 8014fe6:	4b5d      	ldr	r3, [pc, #372]	; (801515c <_lv_txt_get_next_line+0x228>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8014fe8:	2400      	movs	r4, #0
    letter = _lv_txt_encoded_next(txt, &i_next);
 8014fea:	681b      	ldr	r3, [r3, #0]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8014fec:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
 8014ff0:	ee18 0a10 	vmov	r0, s16
 8014ff4:	a90c      	add	r1, sp, #48	; 0x30
 8014ff6:	4798      	blx	r3
    i_next_next = i_next;
 8014ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ffa:	930d      	str	r3, [sp, #52]	; 0x34
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8014ffc:	9b03      	ldr	r3, [sp, #12]
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 8014ffe:	9402      	str	r4, [sp, #8]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8015000:	f003 0301 	and.w	r3, r3, #1
    letter = _lv_txt_encoded_next(txt, &i_next);
 8015004:	4682      	mov	sl, r0
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 8015006:	f04f 3bff 	mov.w	fp, #4294967295
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 801500a:	4626      	mov	r6, r4
    uint32_t letter_next = 0; /*Letter at i_next*/
 801500c:	4622      	mov	r2, r4
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 801500e:	4627      	mov	r7, r4
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8015010:	9308      	str	r3, [sp, #32]
    while(txt[i] != '\0') {
 8015012:	ee18 3a10 	vmov	r3, s16
 8015016:	5dd9      	ldrb	r1, [r3, r7]
 8015018:	b949      	cbnz	r1, 801502e <_lv_txt_get_next_line+0xfa>
    if(break_index == NO_BREAK_FOUND) {
 801501a:	f1bb 3fff 	cmp.w	fp, #4294967295
 801501e:	d05a      	beq.n	80150d6 <_lv_txt_get_next_line+0x1a2>
    if(force) return break_index;
 8015020:	9b01      	ldr	r3, [sp, #4]
 8015022:	465f      	mov	r7, fp
 8015024:	2b00      	cmp	r3, #0
 8015026:	d05e      	beq.n	80150e6 <_lv_txt_get_next_line+0x1b2>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 8015028:	2400      	movs	r4, #0
    return 0;
 801502a:	4627      	mov	r7, r4
 801502c:	e05b      	b.n	80150e6 <_lv_txt_get_next_line+0x1b2>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 801502e:	4b4b      	ldr	r3, [pc, #300]	; (801515c <_lv_txt_get_next_line+0x228>)
 8015030:	ee18 0a10 	vmov	r0, s16
 8015034:	681a      	ldr	r2, [r3, #0]
 8015036:	a90d      	add	r1, sp, #52	; 0x34
 8015038:	4790      	blx	r2
        word_len++;
 801503a:	9b02      	ldr	r3, [sp, #8]
 801503c:	3301      	adds	r3, #1
 801503e:	9306      	str	r3, [sp, #24]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8015040:	9b08      	ldr	r3, [sp, #32]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8015042:	4602      	mov	r2, r0
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8015044:	b173      	cbz	r3, 8015064 <_lv_txt_get_next_line+0x130>
 8015046:	9009      	str	r0, [sp, #36]	; 0x24
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 8015048:	4651      	mov	r1, sl
 801504a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 801504e:	f7ff ff53 	bl	8014ef8 <_lv_txt_is_cmd>
 8015052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015054:	b130      	cbz	r0, 8015064 <_lv_txt_get_next_line+0x130>
        i_next = i_next_next;
 8015056:	e9dd 710c 	ldrd	r7, r1, [sp, #48]	; 0x30
 801505a:	9b06      	ldr	r3, [sp, #24]
 801505c:	910c      	str	r1, [sp, #48]	; 0x30
        letter = letter_next;
 801505e:	9302      	str	r3, [sp, #8]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8015060:	4692      	mov	sl, r2
 8015062:	e7d6      	b.n	8015012 <_lv_txt_get_next_line+0xde>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8015064:	4651      	mov	r1, sl
 8015066:	4628      	mov	r0, r5
 8015068:	9209      	str	r2, [sp, #36]	; 0x24
 801506a:	f7fc ff85 	bl	8011f78 <lv_font_get_glyph_width>
        cur_w += letter_w;
 801506e:	4406      	add	r6, r0
        if(letter_w > 0) {
 8015070:	b200      	sxth	r0, r0
 8015072:	2800      	cmp	r0, #0
            cur_w += letter_space;
 8015074:	bfc8      	it	gt
 8015076:	9b04      	ldrgt	r3, [sp, #16]
        if(letter_w > 0) {
 8015078:	9a09      	ldr	r2, [sp, #36]	; 0x24
        cur_w += letter_w;
 801507a:	b2b6      	uxth	r6, r6
            cur_w += letter_space;
 801507c:	bfc4      	itt	gt
 801507e:	18f6      	addgt	r6, r6, r3
 8015080:	b2b6      	uxthgt	r6, r6
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8015082:	f1bb 3fff 	cmp.w	fp, #4294967295
 8015086:	b236      	sxth	r6, r6
 8015088:	d105      	bne.n	8015096 <_lv_txt_get_next_line+0x162>
 801508a:	9b04      	ldr	r3, [sp, #16]
 801508c:	1af1      	subs	r1, r6, r3
 801508e:	9b07      	ldr	r3, [sp, #28]
 8015090:	4299      	cmp	r1, r3
 8015092:	bfc8      	it	gt
 8015094:	46bb      	movgt	fp, r7
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 8015096:	f1ba 0f0a 	cmp.w	sl, #10
 801509a:	d016      	beq.n	80150ca <_lv_txt_get_next_line+0x196>
 801509c:	f1ba 0f0d 	cmp.w	sl, #13
 80150a0:	d013      	beq.n	80150ca <_lv_txt_get_next_line+0x196>
{
    uint8_t i;
    bool ret = false;

    /* each chinese character can be break */
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 80150a2:	f5aa 409c 	sub.w	r0, sl, #19968	; 0x4e00
 80150a6:	f245 11a5 	movw	r1, #20901	; 0x51a5
 80150aa:	4288      	cmp	r0, r1
 80150ac:	d90d      	bls.n	80150ca <_lv_txt_get_next_line+0x196>
 80150ae:	2100      	movs	r1, #0
        return true;
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80150b0:	4b2b      	ldr	r3, [pc, #172]	; (8015160 <_lv_txt_get_next_line+0x22c>)
 80150b2:	b2c8      	uxtb	r0, r1
 80150b4:	5c18      	ldrb	r0, [r3, r0]
 80150b6:	b920      	cbnz	r0, 80150c2 <_lv_txt_get_next_line+0x18e>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 80150b8:	f1bb 3fff 	cmp.w	fp, #4294967295
 80150bc:	bf08      	it	eq
 80150be:	4634      	moveq	r4, r6
 80150c0:	e7c9      	b.n	8015056 <_lv_txt_get_next_line+0x122>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 80150c2:	4582      	cmp	sl, r0
 80150c4:	f101 0101 	add.w	r1, r1, #1
 80150c8:	d1f2      	bne.n	80150b0 <_lv_txt_get_next_line+0x17c>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 80150ca:	2f00      	cmp	r7, #0
 80150cc:	d1a5      	bne.n	801501a <_lv_txt_get_next_line+0xe6>
 80150ce:	f1bb 3fff 	cmp.w	fp, #4294967295
 80150d2:	d1a5      	bne.n	8015020 <_lv_txt_get_next_line+0xec>
 80150d4:	4634      	mov	r4, r6
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 80150d6:	9b02      	ldr	r3, [sp, #8]
 80150d8:	b123      	cbz	r3, 80150e4 <_lv_txt_get_next_line+0x1b0>
 80150da:	f1ba 0f0d 	cmp.w	sl, #13
 80150de:	d102      	bne.n	80150e6 <_lv_txt_get_next_line+0x1b2>
 80150e0:	2a0a      	cmp	r2, #10
 80150e2:	d100      	bne.n	80150e6 <_lv_txt_get_next_line+0x1b2>
 80150e4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
        line_w += word_w;
 80150e6:	9b00      	ldr	r3, [sp, #0]
        max_width -= word_w;
 80150e8:	b2a4      	uxth	r4, r4
 80150ea:	eba9 0904 	sub.w	r9, r9, r4
        line_w += word_w;
 80150ee:	441c      	add	r4, r3
 80150f0:	b223      	sxth	r3, r4
 80150f2:	9300      	str	r3, [sp, #0]
        max_width -= word_w;
 80150f4:	fa0f f989 	sxth.w	r9, r9
        i += advance;
 80150f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        if(advance == 0) {
 80150fa:	b187      	cbz	r7, 801511e <_lv_txt_get_next_line+0x1ea>
        i += advance;
 80150fc:	441f      	add	r7, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
 80150fe:	f898 3000 	ldrb.w	r3, [r8]
        i += advance;
 8015102:	970b      	str	r7, [sp, #44]	; 0x2c
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8015104:	2b0a      	cmp	r3, #10
 8015106:	d00a      	beq.n	801511e <_lv_txt_get_next_line+0x1ea>
 8015108:	2b0d      	cmp	r3, #13
 801510a:	d008      	beq.n	801511e <_lv_txt_get_next_line+0x1ea>
        if(txt[i] == '\n' || txt[i] == '\r') {
 801510c:	f818 3007 	ldrb.w	r3, [r8, r7]
 8015110:	2b0a      	cmp	r3, #10
 8015112:	d002      	beq.n	801511a <_lv_txt_get_next_line+0x1e6>
 8015114:	2b0d      	cmp	r3, #13
 8015116:	f47f af50 	bne.w	8014fba <_lv_txt_get_next_line+0x86>
            i++;  /*Include the following newline in the current line*/
 801511a:	3701      	adds	r7, #1
 801511c:	970b      	str	r7, [sp, #44]	; 0x2c
    if(i == 0) {
 801511e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015120:	b98c      	cbnz	r4, 8015146 <_lv_txt_get_next_line+0x212>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8015122:	4b0e      	ldr	r3, [pc, #56]	; (801515c <_lv_txt_get_next_line+0x228>)
 8015124:	a90b      	add	r1, sp, #44	; 0x2c
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	4640      	mov	r0, r8
 801512a:	4798      	blx	r3
        if(used_width != NULL) {
 801512c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 801512e:	4601      	mov	r1, r0
        if(used_width != NULL) {
 8015130:	b163      	cbz	r3, 801514c <_lv_txt_get_next_line+0x218>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 8015132:	4622      	mov	r2, r4
 8015134:	4628      	mov	r0, r5
 8015136:	f7fc ff1f 	bl	8011f78 <lv_font_get_glyph_width>
 801513a:	b203      	sxth	r3, r0
 801513c:	9300      	str	r3, [sp, #0]
        *used_width = line_w;
 801513e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015140:	9a00      	ldr	r2, [sp, #0]
 8015142:	801a      	strh	r2, [r3, #0]
 8015144:	e002      	b.n	801514c <_lv_txt_get_next_line+0x218>
    if(used_width != NULL) {
 8015146:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015148:	2b00      	cmp	r3, #0
 801514a:	d1f8      	bne.n	801513e <_lv_txt_get_next_line+0x20a>
    return i;
 801514c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801514e:	e723      	b.n	8014f98 <_lv_txt_get_next_line+0x64>
    if(txt == NULL) return 0;
 8015150:	4640      	mov	r0, r8
 8015152:	e721      	b.n	8014f98 <_lv_txt_get_next_line+0x64>
 8015154:	4628      	mov	r0, r5
 8015156:	e71f      	b.n	8014f98 <_lv_txt_get_next_line+0x64>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8015158:	3001      	adds	r0, #1
 801515a:	e717      	b.n	8014f8c <_lv_txt_get_next_line+0x58>
 801515c:	20000024 	.word	0x20000024
 8015160:	08020412 	.word	0x08020412

08015164 <_lv_txt_ins>:
{
 8015164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015168:	4688      	mov	r8, r1
 801516a:	4616      	mov	r6, r2
    if(txt_buf == NULL || ins_txt == NULL) return;
 801516c:	4604      	mov	r4, r0
 801516e:	b1e8      	cbz	r0, 80151ac <_lv_txt_ins+0x48>
 8015170:	b1e2      	cbz	r2, 80151ac <_lv_txt_ins+0x48>
    size_t ins_len = strlen(ins_txt);
 8015172:	4610      	mov	r0, r2
 8015174:	f7eb f836 	bl	80001e4 <strlen>
    if(ins_len == 0) return;
 8015178:	4605      	mov	r5, r0
 801517a:	b1b8      	cbz	r0, 80151ac <_lv_txt_ins+0x48>
    size_t old_len = strlen(txt_buf);
 801517c:	4620      	mov	r0, r4
 801517e:	f7eb f831 	bl	80001e4 <strlen>
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8015182:	4b0d      	ldr	r3, [pc, #52]	; (80151b8 <_lv_txt_ins+0x54>)
    size_t new_len = ins_len + old_len;
 8015184:	1947      	adds	r7, r0, r5
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	4641      	mov	r1, r8
 801518a:	4620      	mov	r0, r4
 801518c:	4798      	blx	r3
    for(i = new_len; i >= pos + ins_len; i--) {
 801518e:	19e3      	adds	r3, r4, r7
 8015190:	1829      	adds	r1, r5, r0
        txt_buf[i] = txt_buf[i - ins_len];
 8015192:	426f      	negs	r7, r5
    for(i = new_len; i >= pos + ins_len; i--) {
 8015194:	1b1a      	subs	r2, r3, r4
 8015196:	4291      	cmp	r1, r2
 8015198:	d90a      	bls.n	80151b0 <_lv_txt_ins+0x4c>
    lv_memcpy_small(txt_buf + pos, ins_txt, ins_len);
 801519a:	4404      	add	r4, r0
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 801519c:	3e01      	subs	r6, #1
 801519e:	4425      	add	r5, r4
        *d8 = *s8;
 80151a0:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 80151a4:	f804 3b01 	strb.w	r3, [r4], #1
    while(len) {
 80151a8:	42ac      	cmp	r4, r5
 80151aa:	d1f9      	bne.n	80151a0 <_lv_txt_ins+0x3c>
}
 80151ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt_buf[i] = txt_buf[i - ins_len];
 80151b0:	5dda      	ldrb	r2, [r3, r7]
 80151b2:	f803 2901 	strb.w	r2, [r3], #-1
    for(i = new_len; i >= pos + ins_len; i--) {
 80151b6:	e7ed      	b.n	8015194 <_lv_txt_ins+0x30>
 80151b8:	2000001c 	.word	0x2000001c

080151bc <_lv_txt_cut>:
{
 80151bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80151c0:	4617      	mov	r7, r2
 80151c2:	9101      	str	r1, [sp, #4]
    if(txt == NULL) return;
 80151c4:	4605      	mov	r5, r0
 80151c6:	b1a0      	cbz	r0, 80151f2 <_lv_txt_cut+0x36>
    size_t old_len = strlen(txt);
 80151c8:	f7eb f80c 	bl	80001e4 <strlen>
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 80151cc:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8015200 <_lv_txt_cut+0x44>
 80151d0:	9901      	ldr	r1, [sp, #4]
 80151d2:	f8d8 3000 	ldr.w	r3, [r8]
    size_t old_len = strlen(txt);
 80151d6:	4606      	mov	r6, r0
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 80151d8:	4628      	mov	r0, r5
 80151da:	4798      	blx	r3
    len = _lv_txt_encoded_get_byte_id(&txt[pos], len);
 80151dc:	182c      	adds	r4, r5, r0
 80151de:	f8d8 3000 	ldr.w	r3, [r8]
 80151e2:	4639      	mov	r1, r7
 80151e4:	4620      	mov	r0, r4
 80151e6:	4798      	blx	r3
    for(i = pos; i <= old_len - len; i++) {
 80151e8:	4623      	mov	r3, r4
 80151ea:	1a36      	subs	r6, r6, r0
 80151ec:	1b5a      	subs	r2, r3, r5
 80151ee:	4296      	cmp	r6, r2
 80151f0:	d202      	bcs.n	80151f8 <_lv_txt_cut+0x3c>
}
 80151f2:	b002      	add	sp, #8
 80151f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt[i] = txt[i + len];
 80151f8:	5c1a      	ldrb	r2, [r3, r0]
 80151fa:	f803 2b01 	strb.w	r2, [r3], #1
    for(i = pos; i <= old_len - len; i++) {
 80151fe:	e7f5      	b.n	80151ec <_lv_txt_cut+0x30>
 8015200:	2000001c 	.word	0x2000001c

08015204 <_lv_txt_encoded_letter_next_2>:
{
 8015204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *letter = _lv_txt_encoded_next(txt, ofs);
 8015208:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8015234 <_lv_txt_encoded_letter_next_2+0x30>
{
 801520c:	461c      	mov	r4, r3
 801520e:	460f      	mov	r7, r1
    *letter = _lv_txt_encoded_next(txt, ofs);
 8015210:	f8d8 3000 	ldr.w	r3, [r8]
 8015214:	4621      	mov	r1, r4
{
 8015216:	4606      	mov	r6, r0
 8015218:	4615      	mov	r5, r2
    *letter = _lv_txt_encoded_next(txt, ofs);
 801521a:	4798      	blx	r3
 801521c:	6038      	str	r0, [r7, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 801521e:	b128      	cbz	r0, 801522c <_lv_txt_encoded_letter_next_2+0x28>
 8015220:	6820      	ldr	r0, [r4, #0]
 8015222:	f8d8 3000 	ldr.w	r3, [r8]
 8015226:	2100      	movs	r1, #0
 8015228:	4430      	add	r0, r6
 801522a:	4798      	blx	r3
 801522c:	6028      	str	r0, [r5, #0]
}
 801522e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015232:	bf00      	nop
 8015234:	20000024 	.word	0x20000024

08015238 <lv_txt_get_width>:
{
 8015238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801523c:	4688      	mov	r8, r1
 801523e:	b085      	sub	sp, #20
 8015240:	4617      	mov	r7, r2
 8015242:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
 8015244:	4605      	mov	r5, r0
 8015246:	2800      	cmp	r0, #0
 8015248:	d034      	beq.n	80152b4 <lv_txt_get_width+0x7c>
    if(font == NULL) return 0;
 801524a:	2a00      	cmp	r2, #0
 801524c:	d034      	beq.n	80152b8 <lv_txt_get_width+0x80>
    if(txt[0] == '\0') return 0;
 801524e:	7804      	ldrb	r4, [r0, #0]
 8015250:	2300      	movs	r3, #0
 8015252:	b34c      	cbz	r4, 80152a8 <lv_txt_get_width+0x70>
    uint32_t i                   = 0;
 8015254:	9301      	str	r3, [sp, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8015256:	f88d 3003 	strb.w	r3, [sp, #3]
    if(length != 0) {
 801525a:	b349      	cbz	r1, 80152b0 <lv_txt_get_width+0x78>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801525c:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    lv_coord_t width             = 0;
 8015260:	461c      	mov	r4, r3
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8015262:	f009 0901 	and.w	r9, r9, #1
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 8015266:	ab01      	add	r3, sp, #4
 8015268:	aa03      	add	r2, sp, #12
 801526a:	a902      	add	r1, sp, #8
 801526c:	4628      	mov	r0, r5
 801526e:	f7ff ffc9 	bl	8015204 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8015272:	f1b9 0f00 	cmp.w	r9, #0
 8015276:	d005      	beq.n	8015284 <lv_txt_get_width+0x4c>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8015278:	9902      	ldr	r1, [sp, #8]
 801527a:	f10d 0003 	add.w	r0, sp, #3
 801527e:	f7ff fe3b 	bl	8014ef8 <_lv_txt_is_cmd>
 8015282:	b950      	cbnz	r0, 801529a <lv_txt_get_width+0x62>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8015284:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015288:	4638      	mov	r0, r7
 801528a:	f7fc fe75 	bl	8011f78 <lv_font_get_glyph_width>
            if(char_width > 0) {
 801528e:	b203      	sxth	r3, r0
 8015290:	2b00      	cmp	r3, #0
                width += letter_space;
 8015292:	bfc2      	ittt	gt
 8015294:	19a4      	addgt	r4, r4, r6
 8015296:	1824      	addgt	r4, r4, r0
 8015298:	b224      	sxthgt	r4, r4
        while(i < length) {
 801529a:	9b01      	ldr	r3, [sp, #4]
 801529c:	4598      	cmp	r8, r3
 801529e:	d8e2      	bhi.n	8015266 <lv_txt_get_width+0x2e>
        if(width > 0) {
 80152a0:	2c00      	cmp	r4, #0
 80152a2:	dd01      	ble.n	80152a8 <lv_txt_get_width+0x70>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 80152a4:	1ba4      	subs	r4, r4, r6
 80152a6:	b224      	sxth	r4, r4
}
 80152a8:	4620      	mov	r0, r4
 80152aa:	b005      	add	sp, #20
 80152ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_coord_t width             = 0;
 80152b0:	460c      	mov	r4, r1
 80152b2:	e7f9      	b.n	80152a8 <lv_txt_get_width+0x70>
    if(txt == NULL) return 0;
 80152b4:	4604      	mov	r4, r0
 80152b6:	e7f7      	b.n	80152a8 <lv_txt_get_width+0x70>
 80152b8:	4614      	mov	r4, r2
 80152ba:	e7f5      	b.n	80152a8 <lv_txt_get_width+0x70>

080152bc <lv_txt_get_size>:
{
 80152bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152c0:	b087      	sub	sp, #28
    size_res->x = 0;
 80152c2:	2500      	movs	r5, #0
{
 80152c4:	4698      	mov	r8, r3
 80152c6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80152ca:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 80152ce:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80152d2:	9302      	str	r3, [sp, #8]
 80152d4:	4604      	mov	r4, r0
 80152d6:	4616      	mov	r6, r2
    size_res->x = 0;
 80152d8:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 80152da:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 80152dc:	460f      	mov	r7, r1
 80152de:	b311      	cbz	r1, 8015326 <lv_txt_get_size+0x6a>
    if(font == NULL) return;
 80152e0:	b30a      	cbz	r2, 8015326 <lv_txt_get_size+0x6a>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80152e2:	f013 0f02 	tst.w	r3, #2
 80152e6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80152ea:	bf18      	it	ne
 80152ec:	469a      	movne	sl, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 80152ee:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80152f2:	9304      	str	r3, [sp, #16]
    uint16_t letter_height = lv_font_get_line_height(font);
 80152f4:	8913      	ldrh	r3, [r2, #8]
 80152f6:	9303      	str	r3, [sp, #12]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80152f8:	445b      	add	r3, fp
 80152fa:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 80152fc:	5d7b      	ldrb	r3, [r7, r5]
 80152fe:	eb07 0905 	add.w	r9, r7, r5
 8015302:	b99b      	cbnz	r3, 801532c <lv_txt_get_size+0x70>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8015304:	b155      	cbz	r5, 801531c <lv_txt_get_size+0x60>
 8015306:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 801530a:	2b0a      	cmp	r3, #10
 801530c:	d001      	beq.n	8015312 <lv_txt_get_size+0x56>
 801530e:	2b0d      	cmp	r3, #13
 8015310:	d104      	bne.n	801531c <lv_txt_get_size+0x60>
        size_res->y += letter_height + line_space;
 8015312:	9b03      	ldr	r3, [sp, #12]
 8015314:	8862      	ldrh	r2, [r4, #2]
 8015316:	445b      	add	r3, fp
 8015318:	4413      	add	r3, r2
 801531a:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 801531c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015320:	bb33      	cbnz	r3, 8015370 <lv_txt_get_size+0xb4>
        size_res->y = letter_height;
 8015322:	9b04      	ldr	r3, [sp, #16]
        size_res->y -= line_space;
 8015324:	8063      	strh	r3, [r4, #2]
}
 8015326:	b007      	add	sp, #28
 8015328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 801532c:	9b02      	ldr	r3, [sp, #8]
 801532e:	9301      	str	r3, [sp, #4]
 8015330:	2300      	movs	r3, #0
 8015332:	9300      	str	r3, [sp, #0]
 8015334:	4642      	mov	r2, r8
 8015336:	4653      	mov	r3, sl
 8015338:	4631      	mov	r1, r6
 801533a:	4648      	mov	r0, r9
 801533c:	f7ff fdfa 	bl	8014f34 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8015340:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015344:	9a05      	ldr	r2, [sp, #20]
 8015346:	4413      	add	r3, r2
 8015348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 801534c:	4601      	mov	r1, r0
 801534e:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8015350:	d2e9      	bcs.n	8015326 <lv_txt_get_size+0x6a>
            size_res->y += line_space;
 8015352:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 8015354:	9b02      	ldr	r3, [sp, #8]
 8015356:	9300      	str	r3, [sp, #0]
 8015358:	4632      	mov	r2, r6
 801535a:	4643      	mov	r3, r8
 801535c:	4648      	mov	r0, r9
 801535e:	f7ff ff6b 	bl	8015238 <lv_txt_get_width>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 8015362:	f9b4 3000 	ldrsh.w	r3, [r4]
 8015366:	4298      	cmp	r0, r3
 8015368:	bfb8      	it	lt
 801536a:	4618      	movlt	r0, r3
 801536c:	8020      	strh	r0, [r4, #0]
        line_start  = new_line_start;
 801536e:	e7c5      	b.n	80152fc <lv_txt_get_size+0x40>
        size_res->y -= line_space;
 8015370:	eba3 030b 	sub.w	r3, r3, fp
 8015374:	e7d6      	b.n	8015324 <lv_txt_get_size+0x68>

08015376 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8015376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801537a:	9d08      	ldr	r5, [sp, #32]
 801537c:	4680      	mov	r8, r0
 801537e:	460f      	mov	r7, r1
 8015380:	4614      	mov	r4, r2
 8015382:	4699      	mov	r9, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8015384:	b90c      	cbnz	r4, 801538a <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 8015386:	4626      	mov	r6, r4
 8015388:	e012      	b.n	80153b0 <_lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
 801538a:	ea4f 0a54 	mov.w	sl, r4, lsr #1
 801538e:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
 8015392:	4631      	mov	r1, r6
 8015394:	4640      	mov	r0, r8
 8015396:	47a8      	blx	r5
 8015398:	2800      	cmp	r0, #0
 801539a:	dd08      	ble.n	80153ae <_lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
 801539c:	43e4      	mvns	r4, r4
 801539e:	f004 0401 	and.w	r4, r4, #1
 80153a2:	ebaa 0a04 	sub.w	sl, sl, r4
            base = (middle += size);
 80153a6:	eb06 0709 	add.w	r7, r6, r9
{
 80153aa:	4654      	mov	r4, sl
 80153ac:	e7ea      	b.n	8015384 <_lv_utils_bsearch+0xe>
        else if(c < 0) {
 80153ae:	d1fc      	bne.n	80153aa <_lv_utils_bsearch+0x34>
}
 80153b0:	4630      	mov	r0, r6
 80153b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080153b6 <get_angle>:

static lv_coord_t get_angle(const lv_obj_t * obj)
{
    lv_arc_t * arc = (lv_arc_t *)obj;
    uint16_t angle = arc->rotation;
    if(arc->type == LV_ARC_MODE_NORMAL) {
 80153b6:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    uint16_t angle = arc->rotation;
 80153ba:	8c83      	ldrh	r3, [r0, #36]	; 0x24
    if(arc->type == LV_ARC_MODE_NORMAL) {
 80153bc:	f012 0206 	ands.w	r2, r2, #6
{
 80153c0:	b530      	push	{r4, r5, lr}
    if(arc->type == LV_ARC_MODE_NORMAL) {
 80153c2:	d104      	bne.n	80153ce <get_angle+0x18>
        angle += arc->indic_angle_end;
 80153c4:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    }
    else if(arc->type == LV_ARC_MODE_REVERSE) {
        angle += arc->indic_angle_start;
 80153c6:	4413      	add	r3, r2
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;

        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
        if(arc->indic_angle_start < angle_midpoint) angle += arc->indic_angle_start;
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
        else angle += angle_midpoint;
 80153c8:	b29b      	uxth	r3, r3
    }

    return angle;
}
 80153ca:	b218      	sxth	r0, r3
 80153cc:	bd30      	pop	{r4, r5, pc}
    else if(arc->type == LV_ARC_MODE_REVERSE) {
 80153ce:	2a04      	cmp	r2, #4
 80153d0:	d101      	bne.n	80153d6 <get_angle+0x20>
        angle += arc->indic_angle_start;
 80153d2:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80153d4:	e7f7      	b.n	80153c6 <get_angle+0x10>
    else if(arc->type == LV_ARC_MODE_SYMMETRICAL) {
 80153d6:	2a02      	cmp	r2, #2
 80153d8:	d1f7      	bne.n	80153ca <get_angle+0x14>
        int16_t bg_end = arc->bg_angle_end;
 80153da:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
        if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 80153dc:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 80153de:	8cc5      	ldrh	r5, [r0, #38]	; 0x26
        int16_t indic_end = arc->indic_angle_end;
 80153e0:	8d04      	ldrh	r4, [r0, #40]	; 0x28
        if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 80153e2:	4291      	cmp	r1, r2
 80153e4:	bf3c      	itt	cc
 80153e6:	f501 71b4 	addcc.w	r1, r1, #360	; 0x168
 80153ea:	b289      	uxthcc	r1, r1
 80153ec:	b209      	sxth	r1, r1
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 80153ee:	42ac      	cmp	r4, r5
        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
 80153f0:	440a      	add	r2, r1
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 80153f2:	bf38      	it	cc
 80153f4:	f504 70b4 	addcc.w	r0, r4, #360	; 0x168
        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
 80153f8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 80153fc:	bf34      	ite	cc
 80153fe:	b280      	uxthcc	r0, r0
 8015400:	4620      	movcs	r0, r4
        if(arc->indic_angle_start < angle_midpoint) angle += arc->indic_angle_start;
 8015402:	ebb5 0f62 	cmp.w	r5, r2, asr #1
        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
 8015406:	ea4f 0162 	mov.w	r1, r2, asr #1
        if(arc->indic_angle_start < angle_midpoint) angle += arc->indic_angle_start;
 801540a:	da01      	bge.n	8015410 <get_angle+0x5a>
 801540c:	442b      	add	r3, r5
 801540e:	e7db      	b.n	80153c8 <get_angle+0x12>
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
 8015410:	b200      	sxth	r0, r0
 8015412:	4288      	cmp	r0, r1
 8015414:	bfcc      	ite	gt
 8015416:	191b      	addgt	r3, r3, r4
        else angle += angle_midpoint;
 8015418:	185b      	addle	r3, r3, r1
 801541a:	e7d5      	b.n	80153c8 <get_angle+0x12>

0801541c <lv_obj_get_style_arc_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_OPA);
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
 801541c:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 801541e:	2250      	movs	r2, #80	; 0x50
 8015420:	f7f2 f834 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 8015424:	b200      	sxth	r0, r0
 8015426:	bd08      	pop	{r3, pc}

08015428 <lv_obj_get_style_pad_left>:
{
 8015428:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801542a:	2212      	movs	r2, #18
 801542c:	f7f2 f82e 	bl	800748c <lv_obj_get_style_prop>
}
 8015430:	b200      	sxth	r0, r0
 8015432:	bd08      	pop	{r3, pc}

08015434 <lv_obj_get_style_pad_right>:
{
 8015434:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8015436:	2213      	movs	r2, #19
 8015438:	f7f2 f828 	bl	800748c <lv_obj_get_style_prop>
}
 801543c:	b200      	sxth	r0, r0
 801543e:	bd08      	pop	{r3, pc}

08015440 <lv_obj_get_style_pad_top>:
{
 8015440:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8015442:	2210      	movs	r2, #16
 8015444:	f7f2 f822 	bl	800748c <lv_obj_get_style_prop>
}
 8015448:	b200      	sxth	r0, r0
 801544a:	bd08      	pop	{r3, pc}

0801544c <lv_obj_get_style_pad_bottom>:
{
 801544c:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801544e:	2211      	movs	r2, #17
 8015450:	f7f2 f81c 	bl	800748c <lv_obj_get_style_prop>
}
 8015454:	b200      	sxth	r0, r0
 8015456:	bd08      	pop	{r3, pc}

08015458 <get_center>:
{
 8015458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801545c:	460f      	mov	r7, r1
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801545e:	2100      	movs	r1, #0
{
 8015460:	4604      	mov	r4, r0
 8015462:	4690      	mov	r8, r2
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8015464:	f7ff ffe0 	bl	8015428 <lv_obj_get_style_pad_left>
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8015468:	2100      	movs	r1, #0
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801546a:	4606      	mov	r6, r0
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801546c:	4620      	mov	r0, r4
 801546e:	f7ff ffe1 	bl	8015434 <lv_obj_get_style_pad_right>
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8015472:	2100      	movs	r1, #0
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8015474:	4682      	mov	sl, r0
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8015476:	4620      	mov	r0, r4
 8015478:	f7ff ffe2 	bl	8015440 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_bg = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801547c:	2100      	movs	r1, #0
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801547e:	4605      	mov	r5, r0
    lv_coord_t bottom_bg = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8015480:	4620      	mov	r0, r4
 8015482:	f7ff ffe3 	bl	801544c <lv_obj_get_style_pad_bottom>
 8015486:	4681      	mov	r9, r0
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8015488:	4620      	mov	r0, r4
 801548a:	f7ef fd57 	bl	8004f3c <lv_obj_get_width>
 801548e:	1b80      	subs	r0, r0, r6
 8015490:	eba0 0b0a 	sub.w	fp, r0, sl
 8015494:	4620      	mov	r0, r4
 8015496:	f7ef fd57 	bl	8004f48 <lv_obj_get_height>
 801549a:	1b40      	subs	r0, r0, r5
 801549c:	eba0 0009 	sub.w	r0, r0, r9
 80154a0:	4583      	cmp	fp, r0
 80154a2:	4620      	mov	r0, r4
 80154a4:	da16      	bge.n	80154d4 <get_center+0x7c>
 80154a6:	f7ef fd49 	bl	8004f3c <lv_obj_get_width>
 80154aa:	1b82      	subs	r2, r0, r6
 80154ac:	eba2 030a 	sub.w	r3, r2, sl
    center->x = obj->coords.x1 + r + left_bg;
 80154b0:	8aa0      	ldrh	r0, [r4, #20]
 80154b2:	4406      	add	r6, r0
    center->y = obj->coords.y1 + r + top_bg;
 80154b4:	8ae0      	ldrh	r0, [r4, #22]
                           lv_obj_get_height(obj) - top_bg - bottom_bg)) / 2;
 80154b6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 80154ba:	f343 034f 	sbfx	r3, r3, #1, #16
    center->y = obj->coords.y1 + r + top_bg;
 80154be:	4405      	add	r5, r0
    center->x = obj->coords.x1 + r + left_bg;
 80154c0:	fa16 f683 	uxtah	r6, r6, r3
    center->y = obj->coords.y1 + r + top_bg;
 80154c4:	fa15 f583 	uxtah	r5, r5, r3
    center->x = obj->coords.x1 + r + left_bg;
 80154c8:	803e      	strh	r6, [r7, #0]
    center->y = obj->coords.y1 + r + top_bg;
 80154ca:	807d      	strh	r5, [r7, #2]
    if(arc_r) *arc_r = r;
 80154cc:	f8a8 3000 	strh.w	r3, [r8]
}
 80154d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 80154d4:	f7ef fd38 	bl	8004f48 <lv_obj_get_height>
 80154d8:	1b42      	subs	r2, r0, r5
 80154da:	eba2 0309 	sub.w	r3, r2, r9
 80154de:	e7e7      	b.n	80154b0 <get_center+0x58>

080154e0 <get_knob_area>:


static void get_knob_area(lv_obj_t * obj, const lv_point_t * center, lv_coord_t r, lv_area_t * knob_area)
{
 80154e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e4:	468b      	mov	fp, r1
    lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
 80154e6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
{
 80154ea:	4699      	mov	r9, r3
 80154ec:	4615      	mov	r5, r2
 80154ee:	4682      	mov	sl, r0
    lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
 80154f0:	f7ff ff94 	bl	801541c <lv_obj_get_style_arc_width>
    lv_coord_t indic_width_half = indic_width / 2;
 80154f4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    r -= indic_width_half;
 80154f8:	f3c0 044f 	ubfx	r4, r0, #1, #16

    lv_coord_t angle = get_angle(obj);
 80154fc:	4650      	mov	r0, sl
 80154fe:	f7ff ff5a 	bl	80153b6 <get_angle>
 8015502:	4607      	mov	r7, r0
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8015504:	305a      	adds	r0, #90	; 0x5a
 8015506:	b200      	sxth	r0, r0
 8015508:	f7fd fe36 	bl	8013178 <lv_trigo_sin>
 801550c:	4606      	mov	r6, r0
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 801550e:	4638      	mov	r0, r7
 8015510:	f7fd fe32 	bl	8013178 <lv_trigo_sin>

    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8015514:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8015518:	9001      	str	r0, [sp, #4]
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801551a:	4650      	mov	r0, sl
 801551c:	f7ff ff84 	bl	8015428 <lv_obj_get_style_pad_left>
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8015520:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8015524:	4680      	mov	r8, r0
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8015526:	4650      	mov	r0, sl
 8015528:	f7ff ff84 	bl	8015434 <lv_obj_get_style_pad_right>
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801552c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8015530:	9000      	str	r0, [sp, #0]
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8015532:	4650      	mov	r0, sl
 8015534:	f7ff ff84 	bl	8015440 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8015538:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801553c:	4607      	mov	r7, r0
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 801553e:	4650      	mov	r0, sl
 8015540:	f7ff ff84 	bl	801544c <lv_obj_get_style_pad_bottom>
    r -= indic_width_half;
 8015544:	1b2d      	subs	r5, r5, r4
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8015546:	9a01      	ldr	r2, [sp, #4]

    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 8015548:	9b00      	ldr	r3, [sp, #0]
    r -= indic_width_half;
 801554a:	b22d      	sxth	r5, r5
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 801554c:	fb05 f106 	mul.w	r1, r5, r6
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8015550:	f8bb 6000 	ldrh.w	r6, [fp]
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8015554:	4355      	muls	r5, r2
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8015556:	f8bb 2002 	ldrh.w	r2, [fp, #2]
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 801555a:	eb06 36e1 	add.w	r6, r6, r1, asr #15
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801555e:	eb02 32e5 	add.w	r2, r2, r5, asr #15
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8015562:	b2b6      	uxth	r6, r6
 8015564:	44a0      	add	r8, r4
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 8015566:	4423      	add	r3, r4
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8015568:	b292      	uxth	r2, r2
 801556a:	4427      	add	r7, r4
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 801556c:	4420      	add	r0, r4
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 801556e:	eba6 0808 	sub.w	r8, r6, r8
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8015572:	1bd7      	subs	r7, r2, r7
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 8015574:	441e      	add	r6, r3
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 8015576:	4402      	add	r2, r0
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8015578:	f8a9 8000 	strh.w	r8, [r9]
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 801557c:	f8a9 6004 	strh.w	r6, [r9, #4]
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8015580:	f8a9 7002 	strh.w	r7, [r9, #2]
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 8015584:	f8a9 2006 	strh.w	r2, [r9, #6]
}
 8015588:	b003      	add	sp, #12
 801558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015590 <lv_arc_constructor>:
    arc->rotation = 0;
 8015590:	f44f 0307 	mov.w	r3, #8847360	; 0x870000
{
 8015594:	b510      	push	{r4, lr}
    arc->min_value = 0;
 8015596:	4a14      	ldr	r2, [pc, #80]	; (80155e8 <lv_arc_constructor+0x58>)
    arc->rotation = 0;
 8015598:	624b      	str	r3, [r1, #36]	; 0x24
    arc->indic_angle_end   = 270;
 801559a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 801559e:	628b      	str	r3, [r1, #40]	; 0x28
    arc->min_value = 0;
 80155a0:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 80155a4:	e9c1 230b 	strd	r2, r3, [r1, #44]	; 0x2c
    arc->dragging = false;
 80155a8:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 80155ac:	f023 030f 	bic.w	r3, r3, #15
 80155b0:	f043 0308 	orr.w	r3, r3, #8
 80155b4:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
    arc->chg_rate = 720;
 80155b8:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 80155bc:	86cb      	strh	r3, [r1, #54]	; 0x36
{
 80155be:	460c      	mov	r4, r1
    arc->last_tick = lv_tick_get();
 80155c0:	f7fc ff22 	bl	8012408 <lv_tick_get>
    arc->last_angle = arc->indic_angle_end;
 80155c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    arc->last_tick = lv_tick_get();
 80155c6:	63a0      	str	r0, [r4, #56]	; 0x38
    arc->last_angle = arc->indic_angle_end;
 80155c8:	87a3      	strh	r3, [r4, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80155ca:	4620      	mov	r0, r4
 80155cc:	2102      	movs	r1, #2
 80155ce:	f7ee fca9 	bl	8003f24 <lv_obj_add_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN | LV_OBJ_FLAG_SCROLLABLE);
 80155d2:	4620      	mov	r0, r4
 80155d4:	f44f 7144 	mov.w	r1, #784	; 0x310
 80155d8:	f7ee fcd9 	bl	8003f8e <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 80155dc:	4620      	mov	r0, r4
 80155de:	210b      	movs	r1, #11
}
 80155e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 80155e4:	f7f0 b8ca 	b.w	800577c <lv_obj_set_ext_click_area>
 80155e8:	8000002d 	.word	0x8000002d

080155ec <inv_arc_area>:
{
 80155ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155f0:	b088      	sub	sp, #32
 80155f2:	4606      	mov	r6, r0
 80155f4:	460d      	mov	r5, r1
 80155f6:	4614      	mov	r4, r2
 80155f8:	461f      	mov	r7, r3
    if(lv_obj_is_visible(obj) == false) return;
 80155fa:	f7f0 f8a1 	bl	8005740 <lv_obj_is_visible>
 80155fe:	2800      	cmp	r0, #0
 8015600:	d045      	beq.n	801568e <inv_arc_area+0xa2>
    if(start_angle == end_angle) return;
 8015602:	42a5      	cmp	r5, r4
 8015604:	d043      	beq.n	801568e <inv_arc_area+0xa2>
    if(start_angle > 360) start_angle -= 360;
 8015606:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
    start_angle += arc->rotation;
 801560a:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
    if(start_angle > 360) start_angle -= 360;
 801560c:	bf84      	itt	hi
 801560e:	f5a5 75b4 	subhi.w	r5, r5, #360	; 0x168
 8015612:	b2ad      	uxthhi	r5, r5
    if(end_angle > 360) end_angle -= 360;
 8015614:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 8015618:	bf88      	it	hi
 801561a:	f5a4 74b4 	subhi.w	r4, r4, #360	; 0x168
    start_angle += arc->rotation;
 801561e:	4415      	add	r5, r2
 8015620:	b2ad      	uxth	r5, r5
    if(end_angle > 360) end_angle -= 360;
 8015622:	bf88      	it	hi
 8015624:	b2a4      	uxthhi	r4, r4
    end_angle += arc->rotation;
 8015626:	4414      	add	r4, r2
    if(start_angle > 360) start_angle -= 360;
 8015628:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
    end_angle += arc->rotation;
 801562c:	b2a4      	uxth	r4, r4
    if(start_angle > 360) start_angle -= 360;
 801562e:	bf84      	itt	hi
 8015630:	f5a5 75b4 	subhi.w	r5, r5, #360	; 0x168
 8015634:	b2ad      	uxthhi	r5, r5
    if(end_angle > 360) end_angle -= 360;
 8015636:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 801563a:	bf88      	it	hi
 801563c:	f5a4 74b4 	subhi.w	r4, r4, #360	; 0x168
    get_center(obj, &c, &r);
 8015640:	f10d 0212 	add.w	r2, sp, #18
 8015644:	a905      	add	r1, sp, #20
 8015646:	4630      	mov	r0, r6
    if(end_angle > 360) end_angle -= 360;
 8015648:	bf88      	it	hi
 801564a:	b2a4      	uxthhi	r4, r4
    get_center(obj, &c, &r);
 801564c:	f7ff ff04 	bl	8015458 <get_center>
    lv_coord_t w = lv_obj_get_style_arc_width(obj, part);
 8015650:	4639      	mov	r1, r7
 8015652:	4630      	mov	r0, r6
 8015654:	f7ff fee2 	bl	801541c <lv_obj_get_style_arc_width>

static inline bool lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8015658:	4639      	mov	r1, r7
 801565a:	4680      	mov	r8, r0
 801565c:	2251      	movs	r2, #81	; 0x51
 801565e:	4630      	mov	r0, r6
 8015660:	f7f1 ff14 	bl	800748c <lv_obj_get_style_prop>
    return (bool)v.num;
 8015664:	3800      	subs	r0, #0
 8015666:	bf18      	it	ne
 8015668:	2001      	movne	r0, #1
    lv_draw_arc_get_area(c.x, c.y, r, start_angle, end_angle, w, rounded, &inv_area);
 801566a:	af06      	add	r7, sp, #24
 801566c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8015670:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8015674:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8015678:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801567c:	e9cd 4800 	strd	r4, r8, [sp]
 8015680:	462b      	mov	r3, r5
 8015682:	f7f3 feae 	bl	80093e2 <lv_draw_arc_get_area>
    lv_obj_invalidate_area(obj, &inv_area);
 8015686:	4639      	mov	r1, r7
 8015688:	4630      	mov	r0, r6
 801568a:	f7ef fe4c 	bl	8005326 <lv_obj_invalidate_area>
}
 801568e:	b008      	add	sp, #32
 8015690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015694 <knob_get_extra_size>:
    }
    arc->last_angle = angle; /*Cache angle for slew rate limiting*/
}

static lv_coord_t knob_get_extra_size(lv_obj_t * obj)
{
 8015694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8015696:	2240      	movs	r2, #64	; 0x40
 8015698:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801569c:	4606      	mov	r6, r0
 801569e:	f7f1 fef5 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 80156a2:	2243      	movs	r2, #67	; 0x43
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 80156a4:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 80156a6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80156aa:	4630      	mov	r0, r6
 80156ac:	f7f1 feee 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 80156b0:	2241      	movs	r2, #65	; 0x41
    lv_coord_t knob_shadow_size = 0;
    knob_shadow_size += lv_obj_get_style_shadow_width(obj, LV_PART_KNOB);
    knob_shadow_size += lv_obj_get_style_shadow_spread(obj, LV_PART_KNOB);
 80156b2:	4405      	add	r5, r0
 80156b4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80156b8:	4630      	mov	r0, r6
 80156ba:	f7f1 fee7 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80156be:	b200      	sxth	r0, r0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_x(obj, LV_PART_KNOB));
 80156c0:	2800      	cmp	r0, #0
    knob_shadow_size += lv_obj_get_style_shadow_spread(obj, LV_PART_KNOB);
 80156c2:	b2ad      	uxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 80156c4:	f04f 0241 	mov.w	r2, #65	; 0x41
 80156c8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80156cc:	4630      	mov	r0, r6
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_x(obj, LV_PART_KNOB));
 80156ce:	dd2a      	ble.n	8015726 <knob_get_extra_size+0x92>
 80156d0:	f7f1 fedc 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80156d4:	b200      	sxth	r0, r0
 80156d6:	182c      	adds	r4, r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 80156d8:	2242      	movs	r2, #66	; 0x42
 80156da:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80156de:	4630      	mov	r0, r6
 80156e0:	f7f1 fed4 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80156e4:	b200      	sxth	r0, r0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_y(obj, LV_PART_KNOB));
 80156e6:	2800      	cmp	r0, #0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_x(obj, LV_PART_KNOB));
 80156e8:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 80156ea:	f04f 0242 	mov.w	r2, #66	; 0x42
 80156ee:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80156f2:	4630      	mov	r0, r6
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_y(obj, LV_PART_KNOB));
 80156f4:	dd1c      	ble.n	8015730 <knob_get_extra_size+0x9c>
 80156f6:	f7f1 fec9 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80156fa:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 80156fc:	2235      	movs	r2, #53	; 0x35
 80156fe:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8015702:	4630      	mov	r0, r6
 8015704:	f7f1 fec2 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8015708:	2238      	movs	r2, #56	; 0x38
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 801570a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 801570c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8015710:	4630      	mov	r0, r6
 8015712:	f7f1 febb 	bl	800748c <lv_obj_get_style_prop>
 8015716:	442c      	add	r4, r5

    lv_coord_t knob_outline_size = 0;
    knob_outline_size += lv_obj_get_style_outline_width(obj, LV_PART_KNOB);
    knob_outline_size += lv_obj_get_style_outline_pad(obj, LV_PART_KNOB);
 8015718:	4407      	add	r7, r0

    return LV_MAX(knob_shadow_size, knob_outline_size);
 801571a:	b224      	sxth	r4, r4
 801571c:	b238      	sxth	r0, r7
}
 801571e:	42a0      	cmp	r0, r4
 8015720:	bfb8      	it	lt
 8015722:	4620      	movlt	r0, r4
 8015724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8015726:	f7f1 feb1 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801572a:	b200      	sxth	r0, r0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_x(obj, LV_PART_KNOB));
 801572c:	4240      	negs	r0, r0
 801572e:	e7d2      	b.n	80156d6 <knob_get_extra_size+0x42>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8015730:	f7f1 feac 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8015734:	b200      	sxth	r0, r0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_y(obj, LV_PART_KNOB));
 8015736:	4245      	negs	r5, r0
 8015738:	e7e0      	b.n	80156fc <knob_get_extra_size+0x68>

0801573a <inv_knob_area>:
{
 801573a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801573c:	4604      	mov	r4, r0
    get_center(obj, &c, &r);
 801573e:	f10d 0202 	add.w	r2, sp, #2
 8015742:	a901      	add	r1, sp, #4
 8015744:	f7ff fe88 	bl	8015458 <get_center>
    get_knob_area(obj, &c, r, &a);
 8015748:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 801574c:	ab02      	add	r3, sp, #8
 801574e:	a901      	add	r1, sp, #4
 8015750:	4620      	mov	r0, r4
 8015752:	f7ff fec5 	bl	80154e0 <get_knob_area>
    lv_coord_t knob_extra_size = knob_get_extra_size(obj);
 8015756:	4620      	mov	r0, r4
 8015758:	f7ff ff9c 	bl	8015694 <knob_get_extra_size>
    if(knob_extra_size > 0) {
 801575c:	1e02      	subs	r2, r0, #0
 801575e:	dd03      	ble.n	8015768 <inv_knob_area+0x2e>
        lv_area_increase(&a, knob_extra_size, knob_extra_size);
 8015760:	4611      	mov	r1, r2
 8015762:	a802      	add	r0, sp, #8
 8015764:	f7fd f867 	bl	8012836 <lv_area_increase>
    lv_obj_invalidate_area(obj, &a);
 8015768:	a902      	add	r1, sp, #8
 801576a:	4620      	mov	r0, r4
 801576c:	f7ef fddb 	bl	8005326 <lv_obj_invalidate_area>
}
 8015770:	b004      	add	sp, #16
 8015772:	bd10      	pop	{r4, pc}

08015774 <lv_arc_create>:
{
 8015774:	b510      	push	{r4, lr}
 8015776:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8015778:	4803      	ldr	r0, [pc, #12]	; (8015788 <lv_arc_create+0x14>)
 801577a:	f7ee fe6d 	bl	8004458 <lv_obj_class_create_obj>
 801577e:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8015780:	f7ee fef7 	bl	8004572 <lv_obj_class_init_obj>
}
 8015784:	4620      	mov	r0, r4
 8015786:	bd10      	pop	{r4, pc}
 8015788:	0802041c 	.word	0x0802041c

0801578c <lv_arc_set_start_angle>:
    if(start > 360) start -= 360;
 801578c:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8015790:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8015792:	8d03      	ldrh	r3, [r0, #40]	; 0x28
{
 8015794:	460c      	mov	r4, r1
    if(start > 360) start -= 360;
 8015796:	bf88      	it	hi
 8015798:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 801579c:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 801579e:	eba3 0201 	sub.w	r2, r3, r1
    if(start > 360) start -= 360;
 80157a2:	bf88      	it	hi
 80157a4:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 80157a6:	b296      	uxth	r6, r2
 80157a8:	b212      	sxth	r2, r2
    if(old_delta < 0) old_delta = 360 + old_delta;
 80157aa:	2a00      	cmp	r2, #0
    int16_t new_delta = arc->indic_angle_end - start;
 80157ac:	eba3 0304 	sub.w	r3, r3, r4
 80157b0:	b29d      	uxth	r5, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 80157b2:	bfb8      	it	lt
 80157b4:	f506 72b4 	addlt.w	r2, r6, #360	; 0x168
    int16_t new_delta = arc->indic_angle_end - start;
 80157b8:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 80157ba:	bfb8      	it	lt
 80157bc:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 80157be:	2b00      	cmp	r3, #0
 80157c0:	bfbc      	itt	lt
 80157c2:	f505 73b4 	addlt.w	r3, r5, #360	; 0x168
 80157c6:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 80157c8:	1a9d      	subs	r5, r3, r2
 80157ca:	2d00      	cmp	r5, #0
 80157cc:	bfb8      	it	lt
 80157ce:	426d      	neglt	r5, r5
 80157d0:	2db4      	cmp	r5, #180	; 0xb4
 80157d2:	dd0d      	ble.n	80157f0 <lv_arc_set_start_angle+0x64>
 80157d4:	9001      	str	r0, [sp, #4]
 80157d6:	f7ef fdc7 	bl	8005368 <lv_obj_invalidate>
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->indic_angle_start, LV_PART_INDICATOR);
 80157da:	9801      	ldr	r0, [sp, #4]
    inv_knob_area(obj);
 80157dc:	9001      	str	r0, [sp, #4]
 80157de:	f7ff ffac 	bl	801573a <inv_knob_area>
    arc->indic_angle_start = start;
 80157e2:	9801      	ldr	r0, [sp, #4]
 80157e4:	84c4      	strh	r4, [r0, #38]	; 0x26
}
 80157e6:	b002      	add	sp, #8
 80157e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    inv_knob_area(obj);
 80157ec:	f7ff bfa5 	b.w	801573a <inv_knob_area>
    else if(new_delta < old_delta) inv_arc_area(obj, arc->indic_angle_start, start, LV_PART_INDICATOR);
 80157f0:	429a      	cmp	r2, r3
 80157f2:	dd06      	ble.n	8015802 <lv_arc_set_start_angle+0x76>
 80157f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80157f8:	4622      	mov	r2, r4
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->indic_angle_start, LV_PART_INDICATOR);
 80157fa:	9001      	str	r0, [sp, #4]
 80157fc:	f7ff fef6 	bl	80155ec <inv_arc_area>
 8015800:	e7eb      	b.n	80157da <lv_arc_set_start_angle+0x4e>
 8015802:	daeb      	bge.n	80157dc <lv_arc_set_start_angle+0x50>
 8015804:	460a      	mov	r2, r1
 8015806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801580a:	4621      	mov	r1, r4
 801580c:	e7f5      	b.n	80157fa <lv_arc_set_start_angle+0x6e>

0801580e <lv_arc_set_end_angle>:
    if(end > 360) end -= 360;
 801580e:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8015812:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8015814:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
{
 8015816:	460c      	mov	r4, r1
    if(end > 360) end -= 360;
 8015818:	bf88      	it	hi
 801581a:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 801581e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8015820:	eba1 0203 	sub.w	r2, r1, r3
    if(end > 360) end -= 360;
 8015824:	bf88      	it	hi
 8015826:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8015828:	b296      	uxth	r6, r2
 801582a:	b212      	sxth	r2, r2
    if(old_delta < 0) old_delta = 360 + old_delta;
 801582c:	2a00      	cmp	r2, #0
    int16_t new_delta = end - arc->indic_angle_start;
 801582e:	eba4 0303 	sub.w	r3, r4, r3
 8015832:	b29d      	uxth	r5, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8015834:	bfb8      	it	lt
 8015836:	f506 72b4 	addlt.w	r2, r6, #360	; 0x168
    int16_t new_delta = end - arc->indic_angle_start;
 801583a:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 801583c:	bfb8      	it	lt
 801583e:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8015840:	2b00      	cmp	r3, #0
 8015842:	bfbc      	itt	lt
 8015844:	f505 73b4 	addlt.w	r3, r5, #360	; 0x168
 8015848:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 801584a:	1a9d      	subs	r5, r3, r2
 801584c:	2d00      	cmp	r5, #0
 801584e:	bfb8      	it	lt
 8015850:	426d      	neglt	r5, r5
 8015852:	2db4      	cmp	r5, #180	; 0xb4
 8015854:	dd0d      	ble.n	8015872 <lv_arc_set_end_angle+0x64>
 8015856:	9001      	str	r0, [sp, #4]
 8015858:	f7ef fd86 	bl	8005368 <lv_obj_invalidate>
    else if(old_delta < new_delta) inv_arc_area(obj, arc->indic_angle_end, end, LV_PART_INDICATOR);
 801585c:	9801      	ldr	r0, [sp, #4]
    inv_knob_area(obj);
 801585e:	9001      	str	r0, [sp, #4]
 8015860:	f7ff ff6b 	bl	801573a <inv_knob_area>
    arc->indic_angle_end = end;
 8015864:	9801      	ldr	r0, [sp, #4]
 8015866:	8504      	strh	r4, [r0, #40]	; 0x28
}
 8015868:	b002      	add	sp, #8
 801586a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    inv_knob_area(obj);
 801586e:	f7ff bf64 	b.w	801573a <inv_knob_area>
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->indic_angle_end, LV_PART_INDICATOR);
 8015872:	429a      	cmp	r2, r3
 8015874:	dd07      	ble.n	8015886 <lv_arc_set_end_angle+0x78>
 8015876:	460a      	mov	r2, r1
 8015878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801587c:	4621      	mov	r1, r4
    else if(old_delta < new_delta) inv_arc_area(obj, arc->indic_angle_end, end, LV_PART_INDICATOR);
 801587e:	9001      	str	r0, [sp, #4]
 8015880:	f7ff feb4 	bl	80155ec <inv_arc_area>
 8015884:	e7ea      	b.n	801585c <lv_arc_set_end_angle+0x4e>
 8015886:	daea      	bge.n	801585e <lv_arc_set_end_angle+0x50>
 8015888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801588c:	4622      	mov	r2, r4
 801588e:	e7f6      	b.n	801587e <lv_arc_set_end_angle+0x70>

08015890 <lv_arc_set_angles>:
{
 8015890:	b538      	push	{r3, r4, r5, lr}
 8015892:	4604      	mov	r4, r0
 8015894:	460d      	mov	r5, r1
    lv_arc_set_end_angle(obj, end);
 8015896:	4611      	mov	r1, r2
 8015898:	f7ff ffb9 	bl	801580e <lv_arc_set_end_angle>
    lv_arc_set_start_angle(obj, start);
 801589c:	4629      	mov	r1, r5
 801589e:	4620      	mov	r0, r4
}
 80158a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_arc_set_start_angle(obj, start);
 80158a4:	f7ff bf72 	b.w	801578c <lv_arc_set_start_angle>

080158a8 <value_update>:
{
 80158a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80158aa:	4604      	mov	r4, r0
    if(arc->value == VALUE_UNSET) return;
 80158ac:	f9b0 002e 	ldrsh.w	r0, [r0, #46]	; 0x2e
 80158b0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80158b4:	d040      	beq.n	8015938 <value_update+0x90>
    int16_t bg_midpoint, range_midpoint, bg_end = arc->bg_angle_end;
 80158b6:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
    if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 80158b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    switch(arc->type) {
 80158ba:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 80158be:	429d      	cmp	r5, r3
 80158c0:	bf38      	it	cc
 80158c2:	f505 75b4 	addcc.w	r5, r5, #360	; 0x168
    switch(arc->type) {
 80158c6:	f3c2 0241 	ubfx	r2, r2, #1, #2
    if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 80158ca:	bf38      	it	cc
 80158cc:	b2ad      	uxthcc	r5, r5
    switch(arc->type) {
 80158ce:	2a01      	cmp	r2, #1
 80158d0:	b22d      	sxth	r5, r5
 80158d2:	d00d      	beq.n	80158f0 <value_update+0x48>
 80158d4:	2a02      	cmp	r2, #2
 80158d6:	d03d      	beq.n	8015954 <value_update+0xac>
 80158d8:	bb72      	cbnz	r2, 8015938 <value_update+0x90>
            angle = lv_map(arc->value, arc->min_value, arc->max_value, arc->bg_angle_start, bg_end);
 80158da:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 80158de:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 80158e2:	9500      	str	r5, [sp, #0]
 80158e4:	f7fd fcf8 	bl	80132d8 <lv_map>
            lv_arc_set_angles(obj, arc->bg_angle_start, angle);
 80158e8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
            angle = lv_map(arc->value, arc->min_value, arc->max_value, arc->bg_angle_start, bg_end);
 80158ea:	b205      	sxth	r5, r0
            lv_arc_set_angles(obj, arc->bg_angle_start, angle);
 80158ec:	b282      	uxth	r2, r0
 80158ee:	e03c      	b.n	801596a <value_update+0xc2>
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 80158f0:	f9b4 c030 	ldrsh.w	ip, [r4, #48]	; 0x30
 80158f4:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 80158f8:	eb0c 0602 	add.w	r6, ip, r2
 80158fc:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8015900:	195f      	adds	r7, r3, r5
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 8015902:	1071      	asrs	r1, r6, #1
            if(arc->value < range_midpoint) {
 8015904:	f346 064f 	sbfx	r6, r6, #1, #16
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8015908:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
            if(arc->value < range_midpoint) {
 801590c:	42b0      	cmp	r0, r6
                angle = lv_map(arc->value, arc->min_value, range_midpoint, arc->bg_angle_start, bg_midpoint);
 801590e:	f347 0e4f 	sbfx	lr, r7, #1, #16
                lv_arc_set_end_angle(obj, bg_midpoint);
 8015912:	f3c7 074f 	ubfx	r7, r7, #1, #16
            if(arc->value < range_midpoint) {
 8015916:	da11      	bge.n	801593c <value_update+0x94>
                angle = lv_map(arc->value, arc->min_value, range_midpoint, arc->bg_angle_start, bg_midpoint);
 8015918:	460a      	mov	r2, r1
 801591a:	f8cd e000 	str.w	lr, [sp]
 801591e:	4661      	mov	r1, ip
 8015920:	f7fd fcda 	bl	80132d8 <lv_map>
                lv_arc_set_start_angle(obj, angle);
 8015924:	b281      	uxth	r1, r0
                angle = lv_map(arc->value, arc->min_value, range_midpoint, arc->bg_angle_start, bg_midpoint);
 8015926:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, angle);
 8015928:	4620      	mov	r0, r4
 801592a:	f7ff ff2f 	bl	801578c <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, bg_midpoint);
 801592e:	4639      	mov	r1, r7
                lv_arc_set_end_angle(obj, angle);
 8015930:	4620      	mov	r0, r4
 8015932:	f7ff ff6c 	bl	801580e <lv_arc_set_end_angle>
    arc->last_angle = angle; /*Cache angle for slew rate limiting*/
 8015936:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 8015938:	b003      	add	sp, #12
 801593a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                angle = lv_map(arc->value, range_midpoint, arc->max_value, bg_midpoint, bg_end);
 801593c:	9500      	str	r5, [sp, #0]
 801593e:	4673      	mov	r3, lr
 8015940:	f7fd fcca 	bl	80132d8 <lv_map>
                lv_arc_set_start_angle(obj, bg_midpoint);
 8015944:	4639      	mov	r1, r7
                angle = lv_map(arc->value, range_midpoint, arc->max_value, bg_midpoint, bg_end);
 8015946:	4606      	mov	r6, r0
 8015948:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 801594a:	4620      	mov	r0, r4
 801594c:	f7ff ff1e 	bl	801578c <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, angle);
 8015950:	b2b1      	uxth	r1, r6
 8015952:	e7ed      	b.n	8015930 <value_update+0x88>
            angle = lv_map(arc->value, arc->min_value, arc->max_value, bg_end, arc->bg_angle_start);
 8015954:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8015958:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 801595c:	9300      	str	r3, [sp, #0]
 801595e:	462b      	mov	r3, r5
 8015960:	f7fd fcba 	bl	80132d8 <lv_map>
            lv_arc_set_angles(obj, angle, arc->bg_angle_end);
 8015964:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
            angle = lv_map(arc->value, arc->min_value, arc->max_value, bg_end, arc->bg_angle_start);
 8015966:	b205      	sxth	r5, r0
            lv_arc_set_angles(obj, angle, arc->bg_angle_end);
 8015968:	b281      	uxth	r1, r0
            lv_arc_set_angles(obj, arc->bg_angle_start, angle);
 801596a:	4620      	mov	r0, r4
 801596c:	f7ff ff90 	bl	8015890 <lv_arc_set_angles>
            break;
 8015970:	e7e1      	b.n	8015936 <value_update+0x8e>

08015972 <lv_arc_set_bg_start_angle>:
    if(start > 360) start -= 360;
 8015972:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8015976:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8015978:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
{
 801597a:	460c      	mov	r4, r1
    if(start > 360) start -= 360;
 801597c:	bf88      	it	hi
 801597e:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8015982:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8015984:	eba3 0201 	sub.w	r2, r3, r1
    if(start > 360) start -= 360;
 8015988:	bf88      	it	hi
 801598a:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 801598c:	b296      	uxth	r6, r2
 801598e:	b212      	sxth	r2, r2
    if(old_delta < 0) old_delta = 360 + old_delta;
 8015990:	2a00      	cmp	r2, #0
    int16_t new_delta = arc->bg_angle_end - start;
 8015992:	eba3 0304 	sub.w	r3, r3, r4
 8015996:	b29d      	uxth	r5, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8015998:	bfb8      	it	lt
 801599a:	f506 72b4 	addlt.w	r2, r6, #360	; 0x168
    int16_t new_delta = arc->bg_angle_end - start;
 801599e:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 80159a0:	bfb8      	it	lt
 80159a2:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	bfbc      	itt	lt
 80159a8:	f505 73b4 	addlt.w	r3, r5, #360	; 0x168
 80159ac:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 80159ae:	1a9d      	subs	r5, r3, r2
 80159b0:	2d00      	cmp	r5, #0
 80159b2:	bfb8      	it	lt
 80159b4:	426d      	neglt	r5, r5
 80159b6:	2db4      	cmp	r5, #180	; 0xb4
 80159b8:	dd09      	ble.n	80159ce <lv_arc_set_bg_start_angle+0x5c>
 80159ba:	9001      	str	r0, [sp, #4]
 80159bc:	f7ef fcd4 	bl	8005368 <lv_obj_invalidate>
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->bg_angle_start, LV_PART_MAIN);
 80159c0:	9801      	ldr	r0, [sp, #4]
    arc->bg_angle_start = start;
 80159c2:	8544      	strh	r4, [r0, #42]	; 0x2a
}
 80159c4:	b002      	add	sp, #8
 80159c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    value_update(obj);
 80159ca:	f7ff bf6d 	b.w	80158a8 <value_update>
    else if(new_delta < old_delta) inv_arc_area(obj, arc->bg_angle_start, start, LV_PART_MAIN);
 80159ce:	429a      	cmp	r2, r3
 80159d0:	dd05      	ble.n	80159de <lv_arc_set_bg_start_angle+0x6c>
 80159d2:	2300      	movs	r3, #0
 80159d4:	4622      	mov	r2, r4
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->bg_angle_start, LV_PART_MAIN);
 80159d6:	9001      	str	r0, [sp, #4]
 80159d8:	f7ff fe08 	bl	80155ec <inv_arc_area>
 80159dc:	e7f0      	b.n	80159c0 <lv_arc_set_bg_start_angle+0x4e>
 80159de:	daf0      	bge.n	80159c2 <lv_arc_set_bg_start_angle+0x50>
 80159e0:	460a      	mov	r2, r1
 80159e2:	2300      	movs	r3, #0
 80159e4:	4621      	mov	r1, r4
 80159e6:	e7f6      	b.n	80159d6 <lv_arc_set_bg_start_angle+0x64>

080159e8 <lv_arc_set_bg_end_angle>:
    if(end > 360) end -= 360;
 80159e8:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 80159ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 80159ee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
{
 80159f0:	460c      	mov	r4, r1
    if(end > 360) end -= 360;
 80159f2:	bf88      	it	hi
 80159f4:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 80159f8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80159fa:	eba1 0203 	sub.w	r2, r1, r3
    if(end > 360) end -= 360;
 80159fe:	bf88      	it	hi
 8015a00:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8015a02:	b296      	uxth	r6, r2
 8015a04:	b212      	sxth	r2, r2
    if(old_delta < 0) old_delta = 360 + old_delta;
 8015a06:	2a00      	cmp	r2, #0
    int16_t new_delta = end - arc->bg_angle_start;
 8015a08:	eba4 0303 	sub.w	r3, r4, r3
 8015a0c:	b29d      	uxth	r5, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8015a0e:	bfb8      	it	lt
 8015a10:	f506 72b4 	addlt.w	r2, r6, #360	; 0x168
    int16_t new_delta = end - arc->bg_angle_start;
 8015a14:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8015a16:	bfb8      	it	lt
 8015a18:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	bfbc      	itt	lt
 8015a1e:	f505 73b4 	addlt.w	r3, r5, #360	; 0x168
 8015a22:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8015a24:	1a9d      	subs	r5, r3, r2
 8015a26:	2d00      	cmp	r5, #0
 8015a28:	bfb8      	it	lt
 8015a2a:	426d      	neglt	r5, r5
 8015a2c:	2db4      	cmp	r5, #180	; 0xb4
 8015a2e:	dd09      	ble.n	8015a44 <lv_arc_set_bg_end_angle+0x5c>
 8015a30:	9001      	str	r0, [sp, #4]
 8015a32:	f7ef fc99 	bl	8005368 <lv_obj_invalidate>
    else if(old_delta < new_delta) inv_arc_area(obj, arc->bg_angle_end, end, LV_PART_MAIN);
 8015a36:	9801      	ldr	r0, [sp, #4]
    arc->bg_angle_end = end;
 8015a38:	8584      	strh	r4, [r0, #44]	; 0x2c
}
 8015a3a:	b002      	add	sp, #8
 8015a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    value_update(obj);
 8015a40:	f7ff bf32 	b.w	80158a8 <value_update>
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->bg_angle_end, LV_PART_MAIN);
 8015a44:	429a      	cmp	r2, r3
 8015a46:	dd06      	ble.n	8015a56 <lv_arc_set_bg_end_angle+0x6e>
 8015a48:	460a      	mov	r2, r1
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	4621      	mov	r1, r4
    else if(old_delta < new_delta) inv_arc_area(obj, arc->bg_angle_end, end, LV_PART_MAIN);
 8015a4e:	9001      	str	r0, [sp, #4]
 8015a50:	f7ff fdcc 	bl	80155ec <inv_arc_area>
 8015a54:	e7ef      	b.n	8015a36 <lv_arc_set_bg_end_angle+0x4e>
 8015a56:	daef      	bge.n	8015a38 <lv_arc_set_bg_end_angle+0x50>
 8015a58:	2300      	movs	r3, #0
 8015a5a:	4622      	mov	r2, r4
 8015a5c:	e7f7      	b.n	8015a4e <lv_arc_set_bg_end_angle+0x66>

08015a5e <lv_arc_set_bg_angles>:
{
 8015a5e:	b538      	push	{r3, r4, r5, lr}
 8015a60:	4604      	mov	r4, r0
 8015a62:	460d      	mov	r5, r1
    lv_arc_set_bg_end_angle(obj, end);
 8015a64:	4611      	mov	r1, r2
 8015a66:	f7ff ffbf 	bl	80159e8 <lv_arc_set_bg_end_angle>
    lv_arc_set_bg_start_angle(obj, start);
 8015a6a:	4629      	mov	r1, r5
 8015a6c:	4620      	mov	r0, r4
}
 8015a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_arc_set_bg_start_angle(obj, start);
 8015a72:	f7ff bf7e 	b.w	8015972 <lv_arc_set_bg_start_angle>

08015a76 <lv_arc_set_rotation>:
    arc->rotation = rotation;
 8015a76:	8481      	strh	r1, [r0, #36]	; 0x24
    lv_obj_invalidate(obj);
 8015a78:	f7ef bc76 	b.w	8005368 <lv_obj_invalidate>

08015a7c <lv_arc_set_value>:
{
 8015a7c:	b410      	push	{r4}
    if(arc->value == value) return;
 8015a7e:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 8015a82:	428c      	cmp	r4, r1
 8015a84:	d010      	beq.n	8015aa8 <lv_arc_set_value+0x2c>
    new_value = value > arc->max_value ? arc->max_value : value;
 8015a86:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 8015a8a:	428a      	cmp	r2, r1
 8015a8c:	bfa8      	it	ge
 8015a8e:	460a      	movge	r2, r1
    new_value = new_value < arc->min_value ? arc->min_value : new_value;
 8015a90:	f9b0 1030 	ldrsh.w	r1, [r0, #48]	; 0x30
 8015a94:	4291      	cmp	r1, r2
 8015a96:	bfb8      	it	lt
 8015a98:	4611      	movlt	r1, r2
    if(arc->value == new_value) return;
 8015a9a:	428c      	cmp	r4, r1
 8015a9c:	d004      	beq.n	8015aa8 <lv_arc_set_value+0x2c>
}
 8015a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
    arc->value = new_value;
 8015aa2:	85c1      	strh	r1, [r0, #46]	; 0x2e
    value_update(obj);
 8015aa4:	f7ff bf00 	b.w	80158a8 <value_update>
}
 8015aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015aac:	4770      	bx	lr
	...

08015ab0 <lv_arc_event>:
{
 8015ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8015ab4:	4eb0      	ldr	r6, [pc, #704]	; (8015d78 <lv_arc_event+0x2c8>)
{
 8015ab6:	b0a8      	sub	sp, #160	; 0xa0
    res = lv_obj_event_base(MY_CLASS, e);
 8015ab8:	4630      	mov	r0, r6
{
 8015aba:	460f      	mov	r7, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8015abc:	f7ed fade 	bl	800307c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8015ac0:	2801      	cmp	r0, #1
 8015ac2:	d139      	bne.n	8015b38 <lv_arc_event+0x88>
    lv_event_code_t code = lv_event_get_code(e);
 8015ac4:	4638      	mov	r0, r7
 8015ac6:	f7ed fbc5 	bl	8003254 <lv_event_get_code>
 8015aca:	4680      	mov	r8, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8015acc:	4638      	mov	r0, r7
 8015ace:	f7ed fbbd 	bl	800324c <lv_event_get_target>
 8015ad2:	4605      	mov	r5, r0
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 8015ad4:	4638      	mov	r0, r7
 8015ad6:	f7ed fbb9 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_PRESSING) {
 8015ada:	f1b8 0f02 	cmp.w	r8, #2
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 8015ade:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSING) {
 8015ae0:	f040 80fe 	bne.w	8015ce0 <lv_arc_event+0x230>
        lv_indev_t * indev = lv_indev_get_act();
 8015ae4:	f7ed fda6 	bl	8003634 <lv_indev_get_act>
        if(indev == NULL) return;
 8015ae8:	4606      	mov	r6, r0
 8015aea:	b328      	cbz	r0, 8015b38 <lv_arc_event+0x88>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8015aec:	f7ed fda8 	bl	8003640 <lv_indev_get_type>
        if(indev_type != LV_INDEV_TYPE_POINTER) return;
 8015af0:	2801      	cmp	r0, #1
 8015af2:	d121      	bne.n	8015b38 <lv_arc_event+0x88>
        lv_indev_get_point(indev, &p);
 8015af4:	a90a      	add	r1, sp, #40	; 0x28
 8015af6:	4630      	mov	r0, r6
 8015af8:	f7ed fe03 	bl	8003702 <lv_indev_get_point>
        get_center(obj, &center, &r);
 8015afc:	aa06      	add	r2, sp, #24
 8015afe:	a916      	add	r1, sp, #88	; 0x58
 8015b00:	4628      	mov	r0, r5
 8015b02:	f7ff fca9 	bl	8015458 <get_center>
        p.x -= center.x;
 8015b06:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8015b0a:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 8015b0e:	1a9b      	subs	r3, r3, r2
 8015b10:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        p.y -= center.y;
 8015b14:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
 8015b18:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8015b1c:	1a9b      	subs	r3, r3, r2
 8015b1e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        if(arc->dragging == false) {
 8015b22:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8015b26:	07da      	lsls	r2, r3, #31
 8015b28:	d509      	bpl.n	8015b3e <lv_arc_event+0x8e>
        if(p.x == 0 && p.y == 0) return;
 8015b2a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8015b2e:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
 8015b32:	ea51 0300 	orrs.w	r3, r1, r0
 8015b36:	d143      	bne.n	8015bc0 <lv_arc_event+0x110>
}
 8015b38:	b028      	add	sp, #160	; 0xa0
 8015b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
 8015b3e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8015b42:	4628      	mov	r0, r5
 8015b44:	f7ff fc6a 	bl	801541c <lv_obj_get_style_arc_width>
            r -= indic_width;
 8015b48:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8015b4c:	b287      	uxth	r7, r0
            lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
 8015b4e:	4606      	mov	r6, r0
            r -= indic_width;
 8015b50:	1bd2      	subs	r2, r2, r7
            if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 8015b52:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8015b56:	4628      	mov	r0, r5
            r -= indic_width;
 8015b58:	f8ad 2018 	strh.w	r2, [sp, #24]
            if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 8015b5c:	f7ee fa65 	bl	800402a <lv_obj_has_flag>
 8015b60:	b310      	cbz	r0, 8015ba8 <lv_arc_event+0xf8>
                r -= indic_width;
 8015b62:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015b66:	1bdb      	subs	r3, r3, r7
                r -= LV_MAX(r / 4, indic_width);
 8015b68:	b21b      	sxth	r3, r3
            if(r < 1) r = 1;
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	bfd8      	it	le
 8015b6e:	2301      	movle	r3, #1
            if(p.x * p.x + p.y * p.y > r * r) {
 8015b70:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
            if(r < 1) r = 1;
 8015b74:	f8ad 3018 	strh.w	r3, [sp, #24]
            if(p.x * p.x + p.y * p.y > r * r) {
 8015b78:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8015b7c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015b80:	4349      	muls	r1, r1
 8015b82:	fb02 1202 	mla	r2, r2, r2, r1
 8015b86:	435b      	muls	r3, r3
 8015b88:	429a      	cmp	r2, r3
 8015b8a:	dd08      	ble.n	8015b9e <lv_arc_event+0xee>
                arc->dragging = true;
 8015b8c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8015b90:	f043 0301 	orr.w	r3, r3, #1
 8015b94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                arc->last_tick = lv_tick_get(); /*Capture timestamp at dragging start*/
 8015b98:	f7fc fc36 	bl	8012408 <lv_tick_get>
 8015b9c:	63a0      	str	r0, [r4, #56]	; 0x38
        if(arc->dragging == false) return;
 8015b9e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8015ba2:	07db      	lsls	r3, r3, #31
 8015ba4:	d5c8      	bpl.n	8015b38 <lv_arc_event+0x88>
 8015ba6:	e7c0      	b.n	8015b2a <lv_arc_event+0x7a>
                r -= LV_MAX(r / 4, indic_width);
 8015ba8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	461a      	mov	r2, r3
 8015bb0:	bfb8      	it	lt
 8015bb2:	1cda      	addlt	r2, r3, #3
 8015bb4:	1092      	asrs	r2, r2, #2
 8015bb6:	42b2      	cmp	r2, r6
 8015bb8:	bfac      	ite	ge
 8015bba:	1a9b      	subge	r3, r3, r2
 8015bbc:	1b9b      	sublt	r3, r3, r6
 8015bbe:	e7d3      	b.n	8015b68 <lv_arc_event+0xb8>
        int16_t bg_end = arc->bg_angle_end;
 8015bc0:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
        if(arc->bg_angle_end < arc->bg_angle_start) {
 8015bc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8015bc4:	42b3      	cmp	r3, r6
            bg_end = arc->bg_angle_end + 360;
 8015bc6:	bf84      	itt	hi
 8015bc8:	f506 76b4 	addhi.w	r6, r6, #360	; 0x168
 8015bcc:	b2b6      	uxthhi	r6, r6
        angle = lv_atan2(p.y, p.x);
 8015bce:	f7fd fb1f 	bl	8013210 <lv_atan2>
        angle -= arc->bg_angle_start;  /*Make the angle relative to the start angle*/
 8015bd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8015bd4:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8015bd6:	441a      	add	r2, r3
 8015bd8:	1a80      	subs	r0, r0, r2
 8015bda:	b282      	uxth	r2, r0
 8015bdc:	b200      	sxth	r0, r0
        if(angle < 0) angle += 360;
 8015bde:	2800      	cmp	r0, #0
 8015be0:	bfb8      	it	lt
 8015be2:	f502 70b4 	addlt.w	r0, r2, #360	; 0x168
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 8015be6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
        if(angle < 0) angle += 360;
 8015be8:	bfb8      	it	lt
 8015bea:	b200      	sxthlt	r0, r0
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 8015bec:	eba2 0803 	sub.w	r8, r2, r3
 8015bf0:	b237      	sxth	r7, r6
        int16_t deg_range = bg_end - arc->bg_angle_start;
 8015bf2:	1af6      	subs	r6, r6, r3
 8015bf4:	1a9b      	subs	r3, r3, r2
 8015bf6:	b29a      	uxth	r2, r3
        int16_t delta_angle = angle - last_angle_rel;
 8015bf8:	fa10 f383 	uxtah	r3, r0, r3
        if(LV_ABS(delta_angle) > 280) {
 8015bfc:	b21b      	sxth	r3, r3
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	bfb8      	it	lt
 8015c02:	425b      	neglt	r3, r3
 8015c04:	b29b      	uxth	r3, r3
 8015c06:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
        int16_t deg_range = bg_end - arc->bg_angle_start;
 8015c0a:	b236      	sxth	r6, r6
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 8015c0c:	fa1f f888 	uxth.w	r8, r8
        if(LV_ABS(delta_angle) > 280) {
 8015c10:	d940      	bls.n	8015c94 <lv_arc_event+0x1e4>
            if(arc->min_close) angle = 0;
 8015c12:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
            else angle = deg_range;
 8015c16:	f013 0f08 	tst.w	r3, #8
 8015c1a:	bf0c      	ite	eq
 8015c1c:	4630      	moveq	r0, r6
 8015c1e:	2000      	movne	r0, #0
        delta_angle = angle - last_angle_rel;
 8015c20:	4410      	add	r0, r2
 8015c22:	b206      	sxth	r6, r0
        uint32_t delta_tick = lv_tick_elaps(arc->last_tick);
 8015c24:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015c26:	f7fc fbf1 	bl	801240c <lv_tick_elaps>
        int16_t delta_angle_max = (arc->chg_rate * delta_tick) / 1000;
 8015c2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015c2c:	4358      	muls	r0, r3
 8015c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015c32:	fbb0 f0f3 	udiv	r0, r0, r3
 8015c36:	b202      	sxth	r2, r0
        if(delta_angle > delta_angle_max) {
 8015c38:	4296      	cmp	r6, r2
 8015c3a:	dc05      	bgt.n	8015c48 <lv_arc_event+0x198>
        else if(delta_angle < -delta_angle_max) {
 8015c3c:	4252      	negs	r2, r2
 8015c3e:	4296      	cmp	r6, r2
            delta_angle = -delta_angle_max;
 8015c40:	bfba      	itte	lt
 8015c42:	4240      	neglt	r0, r0
 8015c44:	b202      	sxthlt	r2, r0
 8015c46:	4632      	movge	r2, r6
        int32_t round = ((bg_end - arc->bg_angle_start) * 8) / (arc->max_value - arc->min_value);
 8015c48:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8015c4a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8015c4e:	f9b4 c032 	ldrsh.w	ip, [r4, #50]	; 0x32
        int16_t old_value = arc->value;
 8015c52:	f9b4 902e 	ldrsh.w	r9, [r4, #46]	; 0x2e
        int16_t new_value = lv_map(angle, arc->bg_angle_start, bg_end, arc->min_value, arc->max_value);
 8015c56:	f8cd c000 	str.w	ip, [sp]
        int32_t round = ((bg_end - arc->bg_angle_start) * 8) / (arc->max_value - arc->min_value);
 8015c5a:	1a78      	subs	r0, r7, r1
 8015c5c:	ebac 0603 	sub.w	r6, ip, r3
 8015c60:	00c0      	lsls	r0, r0, #3
 8015c62:	fb90 f0f6 	sdiv	r0, r0, r6
        round = (round + 4) >> 4;
 8015c66:	1d06      	adds	r6, r0, #4
        angle += arc->bg_angle_start;  /*Make the angle absolute again*/
 8015c68:	eb08 0001 	add.w	r0, r8, r1
 8015c6c:	eb00 1026 	add.w	r0, r0, r6, asr #4
 8015c70:	4410      	add	r0, r2
        int16_t new_value = lv_map(angle, arc->bg_angle_start, bg_end, arc->min_value, arc->max_value);
 8015c72:	b200      	sxth	r0, r0
 8015c74:	463a      	mov	r2, r7
 8015c76:	f7fd fb2f 	bl	80132d8 <lv_map>
        if(new_value != lv_arc_get_value(obj)) {
 8015c7a:	f9b5 302e 	ldrsh.w	r3, [r5, #46]	; 0x2e
        int16_t new_value = lv_map(angle, arc->bg_angle_start, bg_end, arc->min_value, arc->max_value);
 8015c7e:	b206      	sxth	r6, r0
        if(new_value != lv_arc_get_value(obj)) {
 8015c80:	42b3      	cmp	r3, r6
 8015c82:	d115      	bne.n	8015cb0 <lv_arc_event+0x200>
        if(new_value == arc->min_value || new_value == arc->max_value) {
 8015c84:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8015c88:	42b3      	cmp	r3, r6
 8015c8a:	d123      	bne.n	8015cd4 <lv_arc_event+0x224>
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 8015c8c:	f7fc fbbc 	bl	8012408 <lv_tick_get>
 8015c90:	63a0      	str	r0, [r4, #56]	; 0x38
 8015c92:	e751      	b.n	8015b38 <lv_arc_event+0x88>
            if(angle < deg_range / 2)arc->min_close = 1;
 8015c94:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8015c98:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8015c9c:	ebb0 0f66 	cmp.w	r0, r6, asr #1
 8015ca0:	bfb4      	ite	lt
 8015ca2:	f043 0308 	orrlt.w	r3, r3, #8
            else arc->min_close = 0;
 8015ca6:	f36f 03c3 	bfcge	r3, #3, #1
 8015caa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8015cae:	e7b7      	b.n	8015c20 <lv_arc_event+0x170>
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 8015cb0:	f7fc fbaa 	bl	8012408 <lv_tick_get>
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 8015cb4:	4631      	mov	r1, r6
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 8015cb6:	63a0      	str	r0, [r4, #56]	; 0x38
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 8015cb8:	4628      	mov	r0, r5
 8015cba:	f7ff fedf 	bl	8015a7c <lv_arc_set_value>
            if(new_value != old_value) {
 8015cbe:	45b1      	cmp	r9, r6
 8015cc0:	d0e0      	beq.n	8015c84 <lv_arc_event+0x1d4>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	211c      	movs	r1, #28
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	f7ed faa0 	bl	800320c <lv_event_send>
                if(res != LV_RES_OK) return;
 8015ccc:	2801      	cmp	r0, #1
 8015cce:	f47f af33 	bne.w	8015b38 <lv_arc_event+0x88>
 8015cd2:	e7d7      	b.n	8015c84 <lv_arc_event+0x1d4>
        if(new_value == arc->min_value || new_value == arc->max_value) {
 8015cd4:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 8015cd8:	42b3      	cmp	r3, r6
 8015cda:	f47f af2d 	bne.w	8015b38 <lv_arc_event+0x88>
 8015cde:	e7d5      	b.n	8015c8c <lv_arc_event+0x1dc>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 8015ce0:	f1b8 0f08 	cmp.w	r8, #8
 8015ce4:	d002      	beq.n	8015cec <lv_arc_event+0x23c>
 8015ce6:	f1b8 0f03 	cmp.w	r8, #3
 8015cea:	d11d      	bne.n	8015d28 <lv_arc_event+0x278>
        arc->dragging = false;
 8015cec:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8015cf0:	f36f 0300 	bfc	r3, #0, #1
 8015cf4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 8015cf8:	4628      	mov	r0, r5
 8015cfa:	f7ee f9a5 	bl	8004048 <lv_obj_get_group>
 8015cfe:	4604      	mov	r4, r0
        bool editing               = lv_group_get_editing(g);
 8015d00:	f7ed fc93 	bl	800362a <lv_group_get_editing>
 8015d04:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8015d06:	f7ed fc95 	bl	8003634 <lv_indev_get_act>
 8015d0a:	f7ed fc99 	bl	8003640 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8015d0e:	2804      	cmp	r0, #4
 8015d10:	f47f af12 	bne.w	8015b38 <lv_arc_event+0x88>
            if(editing) lv_group_set_editing(g, false);
 8015d14:	2d00      	cmp	r5, #0
 8015d16:	f43f af0f 	beq.w	8015b38 <lv_arc_event+0x88>
 8015d1a:	2100      	movs	r1, #0
 8015d1c:	4620      	mov	r0, r4
}
 8015d1e:	b028      	add	sp, #160	; 0xa0
 8015d20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            if(editing) lv_group_set_editing(g, false);
 8015d24:	f7ed bc60 	b.w	80035e8 <lv_group_set_editing>
    else if(code == LV_EVENT_KEY) {
 8015d28:	f1b8 0f0d 	cmp.w	r8, #13
 8015d2c:	d126      	bne.n	8015d7c <lv_arc_event+0x2cc>
        char c = *((char *)lv_event_get_param(e));
 8015d2e:	4638      	mov	r0, r7
 8015d30:	f7ed fa94 	bl	800325c <lv_event_get_param>
 8015d34:	7803      	ldrb	r3, [r0, #0]
        int16_t old_value = arc->value;
 8015d36:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8015d3a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8015d3e:	2a11      	cmp	r2, #17
 8015d40:	d112      	bne.n	8015d68 <lv_arc_event+0x2b8>
            lv_arc_set_value(obj, lv_arc_get_value(obj) + 1);
 8015d42:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 8015d44:	3101      	adds	r1, #1
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 8015d46:	b209      	sxth	r1, r1
 8015d48:	4628      	mov	r0, r5
 8015d4a:	f7ff fe97 	bl	8015a7c <lv_arc_set_value>
        if(old_value != arc->value) {
 8015d4e:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 8015d52:	42b3      	cmp	r3, r6
 8015d54:	f43f aef0 	beq.w	8015b38 <lv_arc_event+0x88>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8015d58:	2200      	movs	r2, #0
 8015d5a:	211c      	movs	r1, #28
 8015d5c:	4628      	mov	r0, r5
}
 8015d5e:	b028      	add	sp, #160	; 0xa0
 8015d60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8015d64:	f7ed ba52 	b.w	800320c <lv_event_send>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8015d68:	2b14      	cmp	r3, #20
 8015d6a:	d002      	beq.n	8015d72 <lv_arc_event+0x2c2>
 8015d6c:	2b12      	cmp	r3, #18
 8015d6e:	f47f aee3 	bne.w	8015b38 <lv_arc_event+0x88>
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 8015d72:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 8015d74:	3901      	subs	r1, #1
 8015d76:	e7e6      	b.n	8015d46 <lv_arc_event+0x296>
 8015d78:	0802041c 	.word	0x0802041c
    else if(code == LV_EVENT_HIT_TEST) {
 8015d7c:	f1b8 0f11 	cmp.w	r8, #17
 8015d80:	d147      	bne.n	8015e12 <lv_arc_event+0x362>
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 8015d82:	4638      	mov	r0, r7
 8015d84:	f7ed fa6a 	bl	800325c <lv_event_get_param>
        get_center(obj, &p, &r);
 8015d88:	aa06      	add	r2, sp, #24
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 8015d8a:	4607      	mov	r7, r0
        get_center(obj, &p, &r);
 8015d8c:	a90a      	add	r1, sp, #40	; 0x28
 8015d8e:	4628      	mov	r0, r5
 8015d90:	f7ff fb62 	bl	8015458 <get_center>
        if(obj->spec_attr) ext_click_area = obj->spec_attr->ext_click_pad;
 8015d94:	68ae      	ldr	r6, [r5, #8]
 8015d96:	b10e      	cbz	r6, 8015d9c <lv_arc_event+0x2ec>
 8015d98:	f9b6 6014 	ldrsh.w	r6, [r6, #20]
        lv_coord_t w = lv_obj_get_style_arc_width(obj, LV_PART_MAIN);
 8015d9c:	2100      	movs	r1, #0
 8015d9e:	4628      	mov	r0, r5
 8015da0:	f7ff fb3c 	bl	801541c <lv_obj_get_style_arc_width>
        r -= w + ext_click_area;
 8015da4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8015da8:	fa10 f086 	uxtah	r0, r0, r6
 8015dac:	b284      	uxth	r4, r0
 8015dae:	1b0d      	subs	r5, r1, r4
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 8015db0:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
        r -= w + ext_click_area;
 8015db4:	fa1f f886 	uxth.w	r8, r6
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 8015db8:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
        r -= w + ext_click_area;
 8015dbc:	b2ad      	uxth	r5, r5
 8015dbe:	f8ad 5018 	strh.w	r5, [sp, #24]
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 8015dc2:	1a61      	subs	r1, r4, r1
 8015dc4:	19ab      	adds	r3, r5, r6
 8015dc6:	4405      	add	r5, r0
 8015dc8:	fa10 f281 	uxtah	r2, r0, r1
 8015dcc:	b22d      	sxth	r5, r5
 8015dce:	fa16 f181 	uxtah	r1, r6, r1
 8015dd2:	b212      	sxth	r2, r2
 8015dd4:	b209      	sxth	r1, r1
 8015dd6:	a816      	add	r0, sp, #88	; 0x58
 8015dd8:	9500      	str	r5, [sp, #0]
 8015dda:	b21b      	sxth	r3, r3
 8015ddc:	f7fc fd0c 	bl	80127f8 <lv_area_set>
        if(_lv_area_is_point_on(&a, info->point, LV_RADIUS_CIRCLE)) {
 8015de0:	6839      	ldr	r1, [r7, #0]
 8015de2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015de6:	a816      	add	r0, sp, #88	; 0x58
 8015de8:	f7fc fd91 	bl	801290e <_lv_area_is_point_on>
 8015dec:	b110      	cbz	r0, 8015df4 <lv_arc_event+0x344>
            info->res = false;
 8015dee:	2300      	movs	r3, #0
 8015df0:	713b      	strb	r3, [r7, #4]
            return;
 8015df2:	e6a1      	b.n	8015b38 <lv_arc_event+0x88>
        lv_area_increase(&a, w + ext_click_area * 2, w + ext_click_area * 2);
 8015df4:	eb08 0204 	add.w	r2, r8, r4
 8015df8:	b212      	sxth	r2, r2
 8015dfa:	4611      	mov	r1, r2
 8015dfc:	a816      	add	r0, sp, #88	; 0x58
 8015dfe:	f7fc fd1a 	bl	8012836 <lv_area_increase>
        info->res = _lv_area_is_point_on(&a, info->point, LV_RADIUS_CIRCLE);
 8015e02:	6839      	ldr	r1, [r7, #0]
 8015e04:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015e08:	a816      	add	r0, sp, #88	; 0x58
 8015e0a:	f7fc fd80 	bl	801290e <_lv_area_is_point_on>
 8015e0e:	7138      	strb	r0, [r7, #4]
 8015e10:	e692      	b.n	8015b38 <lv_arc_event+0x88>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8015e12:	f1b8 0f13 	cmp.w	r8, #19
 8015e16:	d155      	bne.n	8015ec4 <lv_arc_event+0x414>
        lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8015e18:	2100      	movs	r1, #0
 8015e1a:	4628      	mov	r0, r5
 8015e1c:	f7ff fb04 	bl	8015428 <lv_obj_get_style_pad_left>
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8015e20:	2100      	movs	r1, #0
        lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8015e22:	4606      	mov	r6, r0
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8015e24:	4628      	mov	r0, r5
 8015e26:	f7ff fb05 	bl	8015434 <lv_obj_get_style_pad_right>
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8015e2a:	2100      	movs	r1, #0
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8015e2c:	4681      	mov	r9, r0
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8015e2e:	4628      	mov	r0, r5
 8015e30:	f7ff fb06 	bl	8015440 <lv_obj_get_style_pad_top>
        lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8015e34:	2100      	movs	r1, #0
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8015e36:	4680      	mov	r8, r0
        lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8015e38:	4628      	mov	r0, r5
 8015e3a:	f7ff fb07 	bl	801544c <lv_obj_get_style_pad_bottom>
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 8015e3e:	454e      	cmp	r6, r9
 8015e40:	bfb8      	it	lt
 8015e42:	464e      	movlt	r6, r9
 8015e44:	b236      	sxth	r6, r6
 8015e46:	4546      	cmp	r6, r8
 8015e48:	bfb8      	it	lt
 8015e4a:	4646      	movlt	r6, r8
 8015e4c:	b236      	sxth	r6, r6
 8015e4e:	42b0      	cmp	r0, r6
 8015e50:	bfb8      	it	lt
 8015e52:	4630      	movlt	r0, r6
 8015e54:	b204      	sxth	r4, r0
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8015e56:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8015e5a:	4628      	mov	r0, r5
 8015e5c:	f7ff fae4 	bl	8015428 <lv_obj_get_style_pad_left>
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8015e60:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8015e64:	4680      	mov	r8, r0
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8015e66:	4628      	mov	r0, r5
 8015e68:	f7ff fae4 	bl	8015434 <lv_obj_get_style_pad_right>
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8015e6c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8015e70:	4682      	mov	sl, r0
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8015e72:	4628      	mov	r0, r5
 8015e74:	f7ff fae4 	bl	8015440 <lv_obj_get_style_pad_top>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8015e78:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8015e7c:	4681      	mov	r9, r0
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8015e7e:	4628      	mov	r0, r5
 8015e80:	f7ff fae4 	bl	801544c <lv_obj_get_style_pad_bottom>
 8015e84:	4606      	mov	r6, r0
        knob_extra_size += knob_get_extra_size(obj);
 8015e86:	4628      	mov	r0, r5
 8015e88:	f7ff fc04 	bl	8015694 <knob_get_extra_size>
 8015e8c:	4605      	mov	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 8015e8e:	4638      	mov	r0, r7
 8015e90:	f7ed f9e4 	bl	800325c <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 8015e94:	45d0      	cmp	r8, sl
 8015e96:	4641      	mov	r1, r8
 8015e98:	bfb8      	it	lt
 8015e9a:	4651      	movlt	r1, sl
 8015e9c:	b20a      	sxth	r2, r1
 8015e9e:	454a      	cmp	r2, r9
 8015ea0:	bfb8      	it	lt
 8015ea2:	464a      	movlt	r2, r9
 8015ea4:	b212      	sxth	r2, r2
        knob_extra_size += knob_get_extra_size(obj);
 8015ea6:	1cab      	adds	r3, r5, #2
 8015ea8:	42b2      	cmp	r2, r6
 8015eaa:	bfac      	ite	ge
 8015eac:	189b      	addge	r3, r3, r2
 8015eae:	199b      	addlt	r3, r3, r6
        lv_coord_t * s = lv_event_get_param(e);
 8015eb0:	4607      	mov	r7, r0
        knob_extra_size += knob_get_extra_size(obj);
 8015eb2:	1b1c      	subs	r4, r3, r4
        *s = LV_MAX(*s, knob_extra_size);
 8015eb4:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015eb8:	b224      	sxth	r4, r4
 8015eba:	4284      	cmp	r4, r0
 8015ebc:	bfb8      	it	lt
 8015ebe:	4604      	movlt	r4, r0
 8015ec0:	803c      	strh	r4, [r7, #0]
 8015ec2:	e639      	b.n	8015b38 <lv_arc_event+0x88>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8015ec4:	f1b8 0f15 	cmp.w	r8, #21
 8015ec8:	f47f ae36 	bne.w	8015b38 <lv_arc_event+0x88>
    lv_obj_t * obj = lv_event_get_target(e);
 8015ecc:	4638      	mov	r0, r7
 8015ece:	f7ed f9bd 	bl	800324c <lv_event_get_target>
 8015ed2:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8015ed4:	4638      	mov	r0, r7
 8015ed6:	f7ed fa0c 	bl	80032f2 <lv_event_get_draw_ctx>
    get_center(obj, &center, &arc_r);
 8015eda:	f10d 020a 	add.w	r2, sp, #10
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8015ede:	4607      	mov	r7, r0
    get_center(obj, &center, &arc_r);
 8015ee0:	a903      	add	r1, sp, #12
 8015ee2:	4620      	mov	r0, r4
 8015ee4:	f7ff fab8 	bl	8015458 <get_center>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8015ee8:	4639      	mov	r1, r7
 8015eea:	a816      	add	r0, sp, #88	; 0x58
 8015eec:	f7ee fe38 	bl	8004b60 <lv_obj_draw_dsc_init>
    if(arc_r > 0) {
 8015ef0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	dd2d      	ble.n	8015f54 <lv_arc_event+0x4a4>
        lv_draw_arc_dsc_init(&arc_dsc);
 8015ef8:	ad06      	add	r5, sp, #24
 8015efa:	4628      	mov	r0, r5
 8015efc:	f7f3 fa4e 	bl	800939c <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_MAIN, &arc_dsc);
 8015f00:	462a      	mov	r2, r5
 8015f02:	2100      	movs	r1, #0
 8015f04:	4620      	mov	r0, r4
 8015f06:	f7ee fd78 	bl	80049fa <lv_obj_init_draw_arc_dsc>
        part_draw_dsc.part = LV_PART_MAIN;
 8015f0a:	2300      	movs	r3, #0
        part_draw_dsc.type = LV_ARC_DRAW_PART_BACKGROUND;
 8015f0c:	e9cd 6317 	strd	r6, r3, [sp, #92]	; 0x5c
        part_draw_dsc.part = LV_PART_MAIN;
 8015f10:	9323      	str	r3, [sp, #140]	; 0x8c
        part_draw_dsc.p1 = &center;
 8015f12:	ab03      	add	r3, sp, #12
 8015f14:	931f      	str	r3, [sp, #124]	; 0x7c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8015f16:	aa16      	add	r2, sp, #88	; 0x58
        part_draw_dsc.radius = arc_r;
 8015f18:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015f1c:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8015f20:	211a      	movs	r1, #26
 8015f22:	4620      	mov	r0, r4
        part_draw_dsc.arc_dsc = &arc_dsc;
 8015f24:	951e      	str	r5, [sp, #120]	; 0x78
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8015f26:	f7ed f971 	bl	800320c <lv_event_send>
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->bg_angle_start + arc->rotation,
 8015f2a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8015f2c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015f2e:	441a      	add	r2, r3
 8015f30:	b292      	uxth	r2, r2
 8015f32:	9201      	str	r2, [sp, #4]
 8015f34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8015f36:	4413      	add	r3, r2
 8015f38:	b29b      	uxth	r3, r3
 8015f3a:	9300      	str	r3, [sp, #0]
 8015f3c:	aa03      	add	r2, sp, #12
 8015f3e:	4629      	mov	r1, r5
 8015f40:	4638      	mov	r0, r7
 8015f42:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8015f46:	f7f3 fa35 	bl	80093b4 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8015f4a:	aa16      	add	r2, sp, #88	; 0x58
 8015f4c:	211b      	movs	r1, #27
 8015f4e:	4620      	mov	r0, r4
 8015f50:	f7ed f95c 	bl	800320c <lv_event_send>
    lv_coord_t left_indic = lv_obj_get_style_pad_left(obj, LV_PART_INDICATOR);
 8015f54:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8015f58:	4620      	mov	r0, r4
 8015f5a:	f7ff fa65 	bl	8015428 <lv_obj_get_style_pad_left>
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 8015f5e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t left_indic = lv_obj_get_style_pad_left(obj, LV_PART_INDICATOR);
 8015f62:	4605      	mov	r5, r0
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 8015f64:	4620      	mov	r0, r4
 8015f66:	f7ff fa65 	bl	8015434 <lv_obj_get_style_pad_right>
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 8015f6a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 8015f6e:	4681      	mov	r9, r0
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 8015f70:	4620      	mov	r0, r4
 8015f72:	f7ff fa65 	bl	8015440 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_indic = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
 8015f76:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 8015f7a:	4680      	mov	r8, r0
    lv_coord_t bottom_indic = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	f7ff fa65 	bl	801544c <lv_obj_get_style_pad_bottom>
    lv_coord_t indic_r = arc_r - LV_MAX4(left_indic, right_indic, top_indic, bottom_indic);
 8015f82:	454d      	cmp	r5, r9
 8015f84:	bfb8      	it	lt
 8015f86:	464d      	movlt	r5, r9
 8015f88:	b22d      	sxth	r5, r5
 8015f8a:	4545      	cmp	r5, r8
 8015f8c:	bfb8      	it	lt
 8015f8e:	4645      	movlt	r5, r8
 8015f90:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015f94:	b22d      	sxth	r5, r5
 8015f96:	4285      	cmp	r5, r0
 8015f98:	bfac      	ite	ge
 8015f9a:	1b5b      	subge	r3, r3, r5
 8015f9c:	1a1b      	sublt	r3, r3, r0
 8015f9e:	b21d      	sxth	r5, r3
    if(indic_r > 0) {
 8015fa0:	2d00      	cmp	r5, #0
 8015fa2:	dd37      	ble.n	8016014 <lv_arc_event+0x564>
        lv_draw_arc_dsc_init(&arc_dsc);
 8015fa4:	f10d 0818 	add.w	r8, sp, #24
 8015fa8:	4640      	mov	r0, r8
 8015faa:	f7f3 f9f7 	bl	800939c <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_INDICATOR, &arc_dsc);
 8015fae:	4642      	mov	r2, r8
 8015fb0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	f7ee fd20 	bl	80049fa <lv_obj_init_draw_arc_dsc>
        part_draw_dsc.part = LV_PART_INDICATOR;
 8015fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015fbe:	9323      	str	r3, [sp, #140]	; 0x8c
        part_draw_dsc.type = LV_ARC_DRAW_PART_FOREGROUND;
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	9318      	str	r3, [sp, #96]	; 0x60
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8015fc4:	aa16      	add	r2, sp, #88	; 0x58
        part_draw_dsc.p1 = &center;
 8015fc6:	ab03      	add	r3, sp, #12
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8015fc8:	211a      	movs	r1, #26
 8015fca:	4620      	mov	r0, r4
        part_draw_dsc.p1 = &center;
 8015fcc:	931f      	str	r3, [sp, #124]	; 0x7c
        part_draw_dsc.class_p = MY_CLASS;
 8015fce:	9617      	str	r6, [sp, #92]	; 0x5c
        part_draw_dsc.radius = indic_r;
 8015fd0:	f8ad 5094 	strh.w	r5, [sp, #148]	; 0x94
        part_draw_dsc.arc_dsc = &arc_dsc;
 8015fd4:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8015fd8:	f7ed f918 	bl	800320c <lv_event_send>
        if(arc_dsc.width > part_draw_dsc.radius) arc_dsc.width = part_draw_dsc.radius;
 8015fdc:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8015fe0:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->indic_angle_start + arc->rotation,
 8015fe4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        if(arc_dsc.width > part_draw_dsc.radius) arc_dsc.width = part_draw_dsc.radius;
 8015fe6:	429a      	cmp	r2, r3
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->indic_angle_start + arc->rotation,
 8015fe8:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
        if(arc_dsc.width > part_draw_dsc.radius) arc_dsc.width = part_draw_dsc.radius;
 8015fea:	bfc8      	it	gt
 8015fec:	f8ad 301a 	strhgt.w	r3, [sp, #26]
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->indic_angle_start + arc->rotation,
 8015ff0:	4411      	add	r1, r2
 8015ff2:	b289      	uxth	r1, r1
 8015ff4:	9101      	str	r1, [sp, #4]
 8015ff6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8015ff8:	440a      	add	r2, r1
 8015ffa:	b292      	uxth	r2, r2
 8015ffc:	9200      	str	r2, [sp, #0]
 8015ffe:	4641      	mov	r1, r8
 8016000:	aa03      	add	r2, sp, #12
 8016002:	4638      	mov	r0, r7
 8016004:	b29b      	uxth	r3, r3
 8016006:	f7f3 f9d5 	bl	80093b4 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801600a:	aa16      	add	r2, sp, #88	; 0x58
 801600c:	211b      	movs	r1, #27
 801600e:	4620      	mov	r0, r4
 8016010:	f7ed f8fc 	bl	800320c <lv_event_send>
    get_knob_area(obj, &center, arc_r, &knob_area);
 8016014:	f10d 0810 	add.w	r8, sp, #16
 8016018:	4643      	mov	r3, r8
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801601a:	ad0a      	add	r5, sp, #40	; 0x28
    get_knob_area(obj, &center, arc_r, &knob_area);
 801601c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8016020:	a903      	add	r1, sp, #12
 8016022:	4620      	mov	r0, r4
 8016024:	f7ff fa5c 	bl	80154e0 <get_knob_area>
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8016028:	4628      	mov	r0, r5
 801602a:	f7f5 f8e9 	bl	800b200 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801602e:	462a      	mov	r2, r5
 8016030:	4620      	mov	r0, r4
 8016032:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8016036:	f7ee fafa 	bl	800462e <lv_obj_init_draw_rect_dsc>
    part_draw_dsc.part = LV_PART_KNOB;
 801603a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801603e:	9323      	str	r3, [sp, #140]	; 0x8c
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8016040:	aa16      	add	r2, sp, #88	; 0x58
    part_draw_dsc.type = LV_ARC_DRAW_PART_KNOB;
 8016042:	2302      	movs	r3, #2
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8016044:	211a      	movs	r1, #26
 8016046:	4620      	mov	r0, r4
    part_draw_dsc.draw_area = &knob_area;
 8016048:	e9cd 3818 	strd	r3, r8, [sp, #96]	; 0x60
    part_draw_dsc.class_p = MY_CLASS;
 801604c:	9617      	str	r6, [sp, #92]	; 0x5c
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 801604e:	951a      	str	r5, [sp, #104]	; 0x68
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8016050:	f7ed f8dc 	bl	800320c <lv_event_send>
    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 8016054:	4642      	mov	r2, r8
 8016056:	4629      	mov	r1, r5
 8016058:	4638      	mov	r0, r7
 801605a:	f7f5 f8f5 	bl	800b248 <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801605e:	aa16      	add	r2, sp, #88	; 0x58
 8016060:	211b      	movs	r1, #27
 8016062:	4620      	mov	r0, r4
 8016064:	f7ed f8d2 	bl	800320c <lv_event_send>
}
 8016068:	e566      	b.n	8015b38 <lv_arc_event+0x88>
 801606a:	bf00      	nop

0801606c <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801606c:	8883      	ldrh	r3, [r0, #4]
 801606e:	8800      	ldrh	r0, [r0, #0]
 8016070:	3301      	adds	r3, #1
 8016072:	1a18      	subs	r0, r3, r0
}
 8016074:	b200      	sxth	r0, r0
 8016076:	4770      	bx	lr

08016078 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016078:	88c3      	ldrh	r3, [r0, #6]
 801607a:	8840      	ldrh	r0, [r0, #2]
 801607c:	3301      	adds	r3, #1
 801607e:	1a18      	subs	r0, r3, r0
}
 8016080:	b200      	sxth	r0, r0
 8016082:	4770      	bx	lr

08016084 <lv_bar_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_bar_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8016084:	b510      	push	{r4, lr}
 8016086:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_bar_t * bar = (lv_bar_t *)obj;

    lv_anim_del(&bar->cur_value_anim, NULL);
 8016088:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801608c:	2100      	movs	r1, #0
 801608e:	f7fc fadf 	bl	8012650 <lv_anim_del>
    lv_anim_del(&bar->start_value_anim, NULL);
 8016092:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8016096:	2100      	movs	r1, #0
}
 8016098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_anim_del(&bar->start_value_anim, NULL);
 801609c:	f7fc bad8 	b.w	8012650 <lv_anim_del>

080160a0 <lv_bar_anim_ready>:
    lv_obj_invalidate(bar_anim->bar);
}

static void lv_bar_anim_ready(lv_anim_t * a)
{
    _lv_bar_anim_t * var = a->var;
 80160a0:	6803      	ldr	r3, [r0, #0]
    lv_obj_t * obj = (lv_obj_t *)var->bar;
 80160a2:	6818      	ldr	r0, [r3, #0]
    lv_bar_t * bar = (lv_bar_t *)obj;

    var->anim_state = LV_BAR_ANIM_STATE_INV;
 80160a4:	f04f 32ff 	mov.w	r2, #4294967295
 80160a8:	60da      	str	r2, [r3, #12]
    if(var == &bar->cur_value_anim)
 80160aa:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 80160ae:	4293      	cmp	r3, r2
 80160b0:	d103      	bne.n	80160ba <lv_bar_anim_ready+0x1a>
        bar->cur_value = var->anim_end;
 80160b2:	689b      	ldr	r3, [r3, #8]
 80160b4:	6243      	str	r3, [r0, #36]	; 0x24
    else if(var == &bar->start_value_anim)
        bar->start_value = var->anim_end;
    lv_obj_invalidate(var->bar);
 80160b6:	f7ef b957 	b.w	8005368 <lv_obj_invalidate>
    else if(var == &bar->start_value_anim)
 80160ba:	f100 024c 	add.w	r2, r0, #76	; 0x4c
 80160be:	4293      	cmp	r3, r2
        bar->start_value = var->anim_end;
 80160c0:	bf04      	itt	eq
 80160c2:	689b      	ldreq	r3, [r3, #8]
 80160c4:	6303      	streq	r3, [r0, #48]	; 0x30
 80160c6:	e7f6      	b.n	80160b6 <lv_bar_anim_ready+0x16>

080160c8 <lv_bar_anim>:
    bar_anim->anim_state    = value;
 80160c8:	60c1      	str	r1, [r0, #12]
    lv_obj_invalidate(bar_anim->bar);
 80160ca:	6800      	ldr	r0, [r0, #0]
 80160cc:	f7ef b94c 	b.w	8005368 <lv_obj_invalidate>

080160d0 <lv_bar_set_value_with_anim>:
}

static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
                                       _lv_bar_anim_t * anim_info, lv_anim_enable_t en)
{
 80160d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160d2:	b093      	sub	sp, #76	; 0x4c
 80160d4:	460d      	mov	r5, r1
 80160d6:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 80160da:	4607      	mov	r7, r0
 80160dc:	4616      	mov	r6, r2
 80160de:	461c      	mov	r4, r3
    if(en == LV_ANIM_OFF) {
 80160e0:	b961      	cbnz	r1, 80160fc <lv_bar_set_value_with_anim+0x2c>
        lv_anim_del(anim_info, NULL);
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7fc fab4 	bl	8012650 <lv_anim_del>
        anim_info->anim_state = LV_BAR_ANIM_STATE_INV;
 80160e8:	f04f 33ff 	mov.w	r3, #4294967295
        *value_ptr = new_value;
        lv_obj_invalidate((lv_obj_t *)obj);
 80160ec:	4638      	mov	r0, r7
        anim_info->anim_state = LV_BAR_ANIM_STATE_INV;
 80160ee:	60e3      	str	r3, [r4, #12]
        *value_ptr = new_value;
 80160f0:	6035      	str	r5, [r6, #0]
        lv_anim_set_values(&a, LV_BAR_ANIM_STATE_START, LV_BAR_ANIM_STATE_END);
        lv_anim_set_ready_cb(&a, lv_bar_anim_ready);
        lv_anim_set_time(&a, lv_obj_get_style_anim_time(obj, LV_PART_MAIN));
        lv_anim_start(&a);
    }
}
 80160f2:	b013      	add	sp, #76	; 0x4c
 80160f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_invalidate((lv_obj_t *)obj);
 80160f8:	f7ef b936 	b.w	8005368 <lv_obj_invalidate>
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 80160fc:	68db      	ldr	r3, [r3, #12]
 80160fe:	3301      	adds	r3, #1
            anim_info->anim_start = *value_ptr;
 8016100:	bf0c      	ite	eq
 8016102:	6813      	ldreq	r3, [r2, #0]
            anim_info->anim_start = anim_info->anim_end;
 8016104:	68a3      	ldrne	r3, [r4, #8]
        lv_anim_del(anim_info, NULL);
 8016106:	2100      	movs	r1, #0
            anim_info->anim_end   = new_value;
 8016108:	e9c4 3501 	strd	r3, r5, [r4, #4]
        lv_anim_del(anim_info, NULL);
 801610c:	4620      	mov	r0, r4
        *value_ptr = new_value;
 801610e:	6015      	str	r5, [r2, #0]
        lv_anim_del(anim_info, NULL);
 8016110:	f7fc fa9e 	bl	8012650 <lv_anim_del>
        lv_anim_init(&a);
 8016114:	a801      	add	r0, sp, #4
 8016116:	f7fc fa81 	bl	801261c <lv_anim_init>
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 801611a:	4b0a      	ldr	r3, [pc, #40]	; (8016144 <lv_bar_set_value_with_anim+0x74>)
 801611c:	9302      	str	r3, [sp, #8]
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
    a->start_value = start;
    a->current_value = start;
    a->end_value = end;
 801611e:	f44f 7380 	mov.w	r3, #256	; 0x100
    a->start_value = start;
 8016122:	2100      	movs	r1, #0
    a->end_value = end;
 8016124:	930b      	str	r3, [sp, #44]	; 0x2c
    return (const lv_anim_t *)v.ptr;
}

static inline uint32_t lv_obj_get_style_anim_time(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 8016126:	2264      	movs	r2, #100	; 0x64
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8016128:	4b07      	ldr	r3, [pc, #28]	; (8016148 <lv_bar_set_value_with_anim+0x78>)
 801612a:	9304      	str	r3, [sp, #16]
 801612c:	4638      	mov	r0, r7
    a->current_value = start;
 801612e:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
    a->var = var;
 8016132:	9401      	str	r4, [sp, #4]
 8016134:	f7f1 f9aa 	bl	800748c <lv_obj_get_style_prop>
    a->time = duration;
 8016138:	900c      	str	r0, [sp, #48]	; 0x30
        lv_anim_start(&a);
 801613a:	a801      	add	r0, sp, #4
 801613c:	f7fc fab8 	bl	80126b0 <lv_anim_start>
}
 8016140:	b013      	add	sp, #76	; 0x4c
 8016142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016144:	080160c9 	.word	0x080160c9
 8016148:	080160a1 	.word	0x080160a1

0801614c <draw_indic>:
{
 801614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016150:	ed2d 8b02 	vpush	{d8}
 8016154:	b0bb      	sub	sp, #236	; 0xec
 8016156:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8016158:	f7ed f878 	bl	800324c <lv_event_get_target>
 801615c:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801615e:	4628      	mov	r0, r5
 8016160:	f7ed f8c7 	bl	80032f2 <lv_event_get_draw_ctx>
    lv_obj_get_coords(obj, &bar_coords);
 8016164:	a90a      	add	r1, sp, #40	; 0x28
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016166:	4683      	mov	fp, r0
    lv_obj_get_coords(obj, &bar_coords);
 8016168:	4620      	mov	r0, r4
 801616a:	f7ee feb3 	bl	8004ed4 <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801616e:	2268      	movs	r2, #104	; 0x68
 8016170:	2100      	movs	r1, #0
 8016172:	4620      	mov	r0, r4
 8016174:	f7f1 f98a 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8016178:	2269      	movs	r2, #105	; 0x69
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801617a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801617c:	2100      	movs	r1, #0
 801617e:	4620      	mov	r0, r4
 8016180:	f7f1 f984 	bl	800748c <lv_obj_get_style_prop>
    bar_coords.x1 -= transf_w;
 8016184:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
    bar_coords.y1 -= transf_h;
 8016188:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
    bar_coords.x2 += transf_w;
 801618c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    bar_coords.x1 -= transf_w;
 8016190:	b2bf      	uxth	r7, r7
 8016192:	1beb      	subs	r3, r5, r7
    bar_coords.y1 -= transf_h;
 8016194:	b280      	uxth	r0, r0
    bar_coords.x1 -= transf_w;
 8016196:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    bar_coords.y1 -= transf_h;
 801619a:	1a0b      	subs	r3, r1, r0
 801619c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    bar_coords.y2 += transf_h;
 80161a0:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80161a4:	4403      	add	r3, r0
 80161a6:	b29b      	uxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80161a8:	3001      	adds	r0, #1
 80161aa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80161ae:	4403      	add	r3, r0
 80161b0:	1a5b      	subs	r3, r3, r1
 80161b2:	fa0f fa83 	sxth.w	sl, r3
    int32_t range = bar->max_value - bar->min_value;
 80161b6:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
    bar_coords.x2 += transf_w;
 80161ba:	443a      	add	r2, r7
 80161bc:	b292      	uxth	r2, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80161be:	3701      	adds	r7, #1
 80161c0:	4417      	add	r7, r2
 80161c2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    int32_t range = bar->max_value - bar->min_value;
 80161c6:	1aca      	subs	r2, r1, r3
 80161c8:	9200      	str	r2, [sp, #0]
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 80161ca:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 80161ce:	f002 0203 	and.w	r2, r2, #3
 80161d2:	1b7f      	subs	r7, r7, r5
 80161d4:	2a01      	cmp	r2, #1
 80161d6:	b23f      	sxth	r7, r7
 80161d8:	d16a      	bne.n	80162b0 <draw_indic+0x164>
 80161da:	2b00      	cmp	r3, #0
 80161dc:	da68      	bge.n	80162b0 <draw_indic+0x164>
 80161de:	2900      	cmp	r1, #0
 80161e0:	dd66      	ble.n	80162b0 <draw_indic+0x164>
 80161e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80161e4:	1ad5      	subs	r5, r2, r3
 80161e6:	426b      	negs	r3, r5
 80161e8:	416b      	adcs	r3, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80161ea:	2212      	movs	r2, #18
 80161ec:	2100      	movs	r1, #0
 80161ee:	4620      	mov	r0, r4
    bool sym = false;
 80161f0:	9301      	str	r3, [sp, #4]
 80161f2:	f7f1 f94b 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80161f6:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80161f8:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80161fa:	2100      	movs	r1, #0
 80161fc:	4620      	mov	r0, r4
 80161fe:	f7f1 f945 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016202:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016204:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016206:	2100      	movs	r1, #0
 8016208:	4620      	mov	r0, r4
 801620a:	f7f1 f93f 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801620e:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016210:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8016212:	2100      	movs	r1, #0
 8016214:	4620      	mov	r0, r4
 8016216:	f7f1 f939 	bl	800748c <lv_obj_get_style_prop>
    lv_area_copy(&bar->indic_area, &bar_coords);
 801621a:	f104 0334 	add.w	r3, r4, #52	; 0x34
    bar->indic_area.x1 += bg_left;
 801621e:	b2aa      	uxth	r2, r5
    lv_area_copy(&bar->indic_area, &bar_coords);
 8016220:	ee08 3a10 	vmov	s16, r3
    dest->x2 = src->x2;
 8016224:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
    bar->indic_area.x1 += bg_left;
 8016228:	9204      	str	r2, [sp, #16]
    bar->indic_area.x2 -= bg_right;
 801622a:	fa1f f288 	uxth.w	r2, r8
 801622e:	1a9b      	subs	r3, r3, r2
    dest->y1 = src->y1;
 8016230:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
    dest->y2 = src->y2;
 8016234:	f9bd e02e 	ldrsh.w	lr, [sp, #46]	; 0x2e
    bar->indic_area.x1 += bg_left;
 8016238:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
    bar->indic_area.x2 -= bg_right;
 801623c:	9202      	str	r2, [sp, #8]
    bar->indic_area.y1 += bg_top;
 801623e:	b2b2      	uxth	r2, r6
 8016240:	9205      	str	r2, [sp, #20]
    bar->indic_area.y2 -= bg_bottom;
 8016242:	b282      	uxth	r2, r0
    bar->indic_area.x1 += bg_left;
 8016244:	fa1c f585 	uxtah	r5, ip, r5
    bar->indic_area.y1 += bg_top;
 8016248:	fa11 f686 	uxtah	r6, r1, r6
    bar->indic_area.y2 -= bg_bottom;
 801624c:	9203      	str	r2, [sp, #12]
 801624e:	ebae 0202 	sub.w	r2, lr, r2
    bar->indic_area.x1 += bg_left;
 8016252:	b2ad      	uxth	r5, r5
    bar->indic_area.x2 -= bg_right;
 8016254:	b29b      	uxth	r3, r3
    bar->indic_area.y1 += bg_top;
 8016256:	b2b6      	uxth	r6, r6
    bar->indic_area.y2 -= bg_bottom;
 8016258:	b292      	uxth	r2, r2
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 801625a:	45ba      	cmp	sl, r7
    bar->indic_area.x1 += bg_left;
 801625c:	86a5      	strh	r5, [r4, #52]	; 0x34
    bar->indic_area.x2 -= bg_right;
 801625e:	8723      	strh	r3, [r4, #56]	; 0x38
    bar->indic_area.y1 += bg_top;
 8016260:	86e6      	strh	r6, [r4, #54]	; 0x36
    bar->indic_area.y2 -= bg_bottom;
 8016262:	8762      	strh	r2, [r4, #58]	; 0x3a
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 8016264:	dc26      	bgt.n	80162b4 <draw_indic+0x168>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016266:	3201      	adds	r2, #1
 8016268:	1b92      	subs	r2, r2, r6
 801626a:	b212      	sxth	r2, r2
 801626c:	2a03      	cmp	r2, #3
 801626e:	dc09      	bgt.n	8016284 <draw_indic+0x138>
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8016270:	8ae2      	ldrh	r2, [r4, #22]
 8016272:	eb0a 73da 	add.w	r3, sl, sl, lsr #31
 8016276:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801627a:	b29b      	uxth	r3, r3
 801627c:	1e9a      	subs	r2, r3, #2
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 801627e:	3302      	adds	r3, #2
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8016280:	86e2      	strh	r2, [r4, #54]	; 0x36
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 8016282:	8763      	strh	r3, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016284:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016286:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8016288:	3301      	adds	r3, #1
 801628a:	1a9b      	subs	r3, r3, r2
 801628c:	b21b      	sxth	r3, r3
 801628e:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016290:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8016292:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016294:	3301      	adds	r3, #1
 8016296:	1a9b      	subs	r3, r3, r2
 8016298:	b21b      	sxth	r3, r3
    lv_coord_t anim_length = hor ? indicw : indich;
 801629a:	45ba      	cmp	sl, r7
 801629c:	9307      	str	r3, [sp, #28]
 801629e:	f340 808b 	ble.w	80163b8 <draw_indic+0x26c>
 80162a2:	9b07      	ldr	r3, [sp, #28]
        indic_length_calc = lv_area_get_height;
 80162a4:	4a42      	ldr	r2, [pc, #264]	; (80163b0 <draw_indic+0x264>)
        axis1 = &bar->indic_area.y1;
 80162a6:	f104 0936 	add.w	r9, r4, #54	; 0x36
        axis2 = &bar->indic_area.y2;
 80162aa:	f104 083a 	add.w	r8, r4, #58	; 0x3a
        indic_length_calc = lv_area_get_height;
 80162ae:	e089      	b.n	80163c4 <draw_indic+0x278>
    bool sym = false;
 80162b0:	2300      	movs	r3, #0
 80162b2:	e79a      	b.n	80161ea <draw_indic+0x9e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80162b4:	3301      	adds	r3, #1
 80162b6:	1b5d      	subs	r5, r3, r5
    else if(!hor && lv_area_get_width(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 80162b8:	b22d      	sxth	r5, r5
 80162ba:	2d03      	cmp	r5, #3
 80162bc:	dce2      	bgt.n	8016284 <draw_indic+0x138>
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 80162be:	8aa2      	ldrh	r2, [r4, #20]
 80162c0:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
 80162c4:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	1e9a      	subs	r2, r3, #2
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 80162cc:	3302      	adds	r3, #2
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 80162ce:	86a2      	strh	r2, [r4, #52]	; 0x34
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 80162d0:	8723      	strh	r3, [r4, #56]	; 0x38
 80162d2:	e7d7      	b.n	8016284 <draw_indic+0x138>
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 80162d4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80162d6:	9900      	ldr	r1, [sp, #0]
 80162d8:	1aad      	subs	r5, r5, r2
 80162da:	435d      	muls	r5, r3
 80162dc:	fb95 f5f1 	sdiv	r5, r5, r1
 80162e0:	e089      	b.n	80163f6 <draw_indic+0x2aa>
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 80162e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80162e4:	1ab6      	subs	r6, r6, r2
 80162e6:	435e      	muls	r6, r3
 80162e8:	9a00      	ldr	r2, [sp, #0]
 80162ea:	fb96 f6f2 	sdiv	r6, r6, r2
 80162ee:	e09b      	b.n	8016428 <draw_indic+0x2dc>
            zero = *axis2 - shift + 1;
 80162f0:	f1c2 0301 	rsb	r3, r2, #1
 80162f4:	4403      	add	r3, r0
 80162f6:	b21b      	sxth	r3, r3
            if(*axis1 > zero)
 80162f8:	428b      	cmp	r3, r1
                *axis2 = *axis1;
 80162fa:	bfaa      	itet	ge
 80162fc:	f8a8 1000 	strhge.w	r1, [r8]
                *axis2 = zero;
 8016300:	f8a8 3000 	strhlt.w	r3, [r8]
                *axis1 = zero;
 8016304:	f8a9 3000 	strhge.w	r3, [r9]
            if(*axis2 < *axis1) {
 8016308:	f9b8 2000 	ldrsh.w	r2, [r8]
 801630c:	f9b9 3000 	ldrsh.w	r3, [r9]
 8016310:	429a      	cmp	r2, r3
 8016312:	f280 80c8 	bge.w	80164a6 <draw_indic+0x35a>
                *axis1 = *axis2;
 8016316:	f8a9 2000 	strh.w	r2, [r9]
                *axis2 = zero;
 801631a:	f8a8 3000 	strh.w	r3, [r8]
 801631e:	e0c2      	b.n	80164a6 <draw_indic+0x35a>
 8016320:	f108 0801 	add.w	r8, r8, #1
 8016324:	eba8 0803 	sub.w	r8, r8, r3
    else if(!hor && lv_area_get_width(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8016328:	fa0f f888 	sxth.w	r8, r8
 801632c:	f1b8 0f03 	cmp.w	r8, #3
 8016330:	f300 816e 	bgt.w	8016610 <draw_indic+0x4c4>
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 8016334:	8aa3      	ldrh	r3, [r4, #20]
 8016336:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801633a:	eb03 0767 	add.w	r7, r3, r7, asr #1
 801633e:	b2bf      	uxth	r7, r7
 8016340:	1ebb      	subs	r3, r7, #2
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 8016342:	3702      	adds	r7, #2
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 8016344:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 8016348:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801634c:	e160      	b.n	8016610 <draw_indic+0x4c4>
    if(!sym && indic_length_calc(&bar->indic_area) <= 1) {
 801634e:	ee18 0a10 	vmov	r0, s16
 8016352:	9b06      	ldr	r3, [sp, #24]
 8016354:	4798      	blx	r3
 8016356:	2801      	cmp	r0, #1
 8016358:	f300 80a5 	bgt.w	80164a6 <draw_indic+0x35a>
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801635c:	4659      	mov	r1, fp
 801635e:	a828      	add	r0, sp, #160	; 0xa0
 8016360:	f7ee fbfe 	bl	8004b60 <lv_obj_draw_dsc_init>
        part_draw_dsc.part = LV_PART_INDICATOR;
 8016364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016368:	9335      	str	r3, [sp, #212]	; 0xd4
        part_draw_dsc.class_p = MY_CLASS;
 801636a:	4b12      	ldr	r3, [pc, #72]	; (80163b4 <draw_indic+0x268>)
 801636c:	9329      	str	r3, [sp, #164]	; 0xa4
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801636e:	aa28      	add	r2, sp, #160	; 0xa0
        part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 8016370:	9b01      	ldr	r3, [sp, #4]
 8016372:	932a      	str	r3, [sp, #168]	; 0xa8
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8016374:	211a      	movs	r1, #26
 8016376:	4620      	mov	r0, r4
        part_draw_dsc.draw_area = &bar->indic_area;
 8016378:	ed8d 8a2b 	vstr	s16, [sp, #172]	; 0xac
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801637c:	f7ec ff46 	bl	800320c <lv_event_send>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8016380:	aa28      	add	r2, sp, #160	; 0xa0
 8016382:	211b      	movs	r1, #27
 8016384:	4620      	mov	r0, r4
 8016386:	f7ec ff41 	bl	800320c <lv_event_send>
}
 801638a:	b03b      	add	sp, #236	; 0xec
 801638c:	ecbd 8b02 	vpop	{d8}
 8016390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *axis1 = *axis2 - anim_cur_value_x + 1;
 8016394:	f8b8 2000 	ldrh.w	r2, [r8]
 8016398:	3201      	adds	r2, #1
 801639a:	eba2 020c 	sub.w	r2, r2, ip
 801639e:	f8a9 2000 	strh.w	r2, [r9]
        *axis2 -= anim_start_value_x;
 80163a2:	f8b8 2000 	ldrh.w	r2, [r8]
 80163a6:	1a51      	subs	r1, r2, r1
 80163a8:	f8a8 1000 	strh.w	r1, [r8]
 80163ac:	e05e      	b.n	801646c <draw_indic+0x320>
 80163ae:	bf00      	nop
 80163b0:	08016079 	.word	0x08016079
 80163b4:	08020438 	.word	0x08020438
    lv_coord_t anim_length = hor ? indicw : indich;
 80163b8:	9b08      	ldr	r3, [sp, #32]
        indic_length_calc = lv_area_get_width;
 80163ba:	4aac      	ldr	r2, [pc, #688]	; (801666c <draw_indic+0x520>)
        axis1 = &bar->indic_area.x1;
 80163bc:	ee18 9a10 	vmov	r9, s16
        axis2 = &bar->indic_area.x2;
 80163c0:	f104 0838 	add.w	r8, r4, #56	; 0x38
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 80163c4:	6da5      	ldr	r5, [r4, #88]	; 0x58
        indic_length_calc = lv_area_get_height;
 80163c6:	9206      	str	r2, [sp, #24]
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 80163c8:	1c68      	adds	r0, r5, #1
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 80163ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 80163cc:	d082      	beq.n	80162d4 <draw_indic+0x188>
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 80163ce:	6d26      	ldr	r6, [r4, #80]	; 0x50
 80163d0:	9900      	ldr	r1, [sp, #0]
 80163d2:	1ab6      	subs	r6, r6, r2
 80163d4:	435e      	muls	r6, r3
 80163d6:	fb96 f6f1 	sdiv	r6, r6, r1
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 80163da:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80163dc:	1a88      	subs	r0, r1, r2
 80163de:	4358      	muls	r0, r3
 80163e0:	9900      	ldr	r1, [sp, #0]
 80163e2:	fb90 f0f1 	sdiv	r0, r0, r1
        anim_start_value_x = (((anim_start_value_end_x - anim_start_value_start_x) * bar->start_value_anim.anim_state) /
 80163e6:	b231      	sxth	r1, r6
 80163e8:	b200      	sxth	r0, r0
 80163ea:	1a40      	subs	r0, r0, r1
 80163ec:	4345      	muls	r5, r0
 80163ee:	bf48      	it	mi
 80163f0:	35ff      	addmi	r5, #255	; 0xff
        anim_start_value_x += anim_start_value_start_x;
 80163f2:	eb06 2525 	add.w	r5, r6, r5, asr #8
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 80163f6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80163f8:	1c71      	adds	r1, r6, #1
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 80163fa:	b22d      	sxth	r5, r5
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 80163fc:	f43f af71 	beq.w	80162e2 <draw_indic+0x196>
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 8016400:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016402:	9900      	ldr	r1, [sp, #0]
 8016404:	1a80      	subs	r0, r0, r2
 8016406:	4358      	muls	r0, r3
 8016408:	fb90 f0f1 	sdiv	r0, r0, r1
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 801640c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801640e:	1a8a      	subs	r2, r1, r2
 8016410:	435a      	muls	r2, r3
 8016412:	9900      	ldr	r1, [sp, #0]
 8016414:	fb92 f2f1 	sdiv	r2, r2, r1
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 8016418:	b201      	sxth	r1, r0
 801641a:	b212      	sxth	r2, r2
 801641c:	1a52      	subs	r2, r2, r1
                                                      bar->cur_value_anim.anim_state) /
 801641e:	4356      	muls	r6, r2
 8016420:	bf48      	it	mi
 8016422:	36ff      	addmi	r6, #255	; 0xff
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 8016424:	eb00 2626 	add.w	r6, r0, r6, asr #8
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8016428:	2100      	movs	r1, #0
 801642a:	2216      	movs	r2, #22
 801642c:	4620      	mov	r0, r4
 801642e:	9309      	str	r3, [sp, #36]	; 0x24
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 8016430:	b236      	sxth	r6, r6
 8016432:	f7f1 f82b 	bl	800748c <lv_obj_get_style_prop>
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 8016436:	45ba      	cmp	sl, r7
 8016438:	9b09      	ldr	r3, [sp, #36]	; 0x24
        anim_cur_value_x = -anim_cur_value_x;
 801643a:	fa1f fc86 	uxth.w	ip, r6
        anim_start_value_x = -anim_start_value_x;
 801643e:	b2a9      	uxth	r1, r5
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 8016440:	dca8      	bgt.n	8016394 <draw_indic+0x248>
 8016442:	b2c0      	uxtb	r0, r0
 8016444:	2801      	cmp	r0, #1
 8016446:	d107      	bne.n	8016458 <draw_indic+0x30c>
        anim_cur_value_x = -anim_cur_value_x;
 8016448:	f1cc 0200 	rsb	r2, ip, #0
 801644c:	b216      	sxth	r6, r2
        anim_start_value_x = -anim_start_value_x;
 801644e:	4249      	negs	r1, r1
 8016450:	464a      	mov	r2, r9
 8016452:	b20d      	sxth	r5, r1
 8016454:	46c1      	mov	r9, r8
 8016456:	4690      	mov	r8, r2
        *axis2 = *axis1 + anim_cur_value_x;
 8016458:	f8b9 2000 	ldrh.w	r2, [r9]
 801645c:	4416      	add	r6, r2
 801645e:	f8a8 6000 	strh.w	r6, [r8]
        *axis1 += anim_start_value_x;
 8016462:	f8b9 2000 	ldrh.w	r2, [r9]
 8016466:	4415      	add	r5, r2
 8016468:	f8a9 5000 	strh.w	r5, [r9]
    if(sym) {
 801646c:	9a01      	ldr	r2, [sp, #4]
 801646e:	2a00      	cmp	r2, #0
 8016470:	f43f af6d 	beq.w	801634e <draw_indic+0x202>
        shift = (-bar->min_value * anim_length) / range;
 8016474:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            if(*axis2 > zero)
 8016476:	f9b8 0000 	ldrsh.w	r0, [r8]
            zero = *axis1 + shift;
 801647a:	f9b9 1000 	ldrsh.w	r1, [r9]
        shift = (-bar->min_value * anim_length) / range;
 801647e:	4252      	negs	r2, r2
        if(hor) {
 8016480:	45ba      	cmp	sl, r7
        shift = (-bar->min_value * anim_length) / range;
 8016482:	fb03 f202 	mul.w	r2, r3, r2
 8016486:	9b00      	ldr	r3, [sp, #0]
 8016488:	fb92 f2f3 	sdiv	r2, r2, r3
            zero = *axis1 + shift;
 801648c:	b292      	uxth	r2, r2
        if(hor) {
 801648e:	f73f af2f 	bgt.w	80162f0 <draw_indic+0x1a4>
            zero = *axis1 + shift;
 8016492:	440a      	add	r2, r1
 8016494:	b212      	sxth	r2, r2
            if(*axis2 > zero)
 8016496:	4290      	cmp	r0, r2
                *axis1 = *axis2;
 8016498:	bfd6      	itet	le
 801649a:	f8a9 0000 	strhle.w	r0, [r9]
                *axis1 = zero;
 801649e:	f8a9 2000 	strhgt.w	r2, [r9]
                *axis2 = zero;
 80164a2:	f8a8 2000 	strhle.w	r2, [r8]
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 80164a6:	ae1c      	add	r6, sp, #112	; 0x70
 80164a8:	4630      	mov	r0, r6
 80164aa:	f7f4 fea9 	bl	800b200 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_rect_dsc);
 80164ae:	4632      	mov	r2, r6
 80164b0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80164b4:	4620      	mov	r0, r4
 80164b6:	f7ee f8ba 	bl	800462e <lv_obj_init_draw_rect_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80164ba:	4659      	mov	r1, fp
 80164bc:	a828      	add	r0, sp, #160	; 0xa0
 80164be:	f7ee fb4f 	bl	8004b60 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_INDICATOR;
 80164c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 80164c6:	2500      	movs	r5, #0
    part_draw_dsc.part = LV_PART_INDICATOR;
 80164c8:	9335      	str	r3, [sp, #212]	; 0xd4
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80164ca:	aa28      	add	r2, sp, #160	; 0xa0
    part_draw_dsc.class_p = MY_CLASS;
 80164cc:	4b68      	ldr	r3, [pc, #416]	; (8016670 <draw_indic+0x524>)
 80164ce:	9329      	str	r3, [sp, #164]	; 0xa4
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80164d0:	211a      	movs	r1, #26
 80164d2:	4620      	mov	r0, r4
    part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 80164d4:	952a      	str	r5, [sp, #168]	; 0xa8
    part_draw_dsc.rect_dsc = &draw_rect_dsc;
 80164d6:	962c      	str	r6, [sp, #176]	; 0xb0
    part_draw_dsc.draw_area = &bar->indic_area;
 80164d8:	ed8d 8a2b 	vstr	s16, [sp, #172]	; 0xac
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80164dc:	f7ec fe96 	bl	800320c <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 80164e0:	4629      	mov	r1, r5
 80164e2:	220b      	movs	r2, #11
 80164e4:	4620      	mov	r0, r4
 80164e6:	f7f0 ffd1 	bl	800748c <lv_obj_get_style_prop>
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 80164ea:	45ba      	cmp	sl, r7
    if(indic_radius > short_side >> 1) indic_radius = short_side >> 1;
 80164ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 80164f0:	4655      	mov	r5, sl
 80164f2:	bfa8      	it	ge
 80164f4:	463d      	movge	r5, r7
    return (lv_coord_t)v.num;
 80164f6:	b200      	sxth	r0, r0
 80164f8:	106d      	asrs	r5, r5, #1
 80164fa:	4285      	cmp	r5, r0
 80164fc:	bfa8      	it	ge
 80164fe:	4605      	movge	r5, r0
    if(indic_radius > short_side >> 1) indic_radius = short_side >> 1;
 8016500:	429a      	cmp	r2, r3
 8016502:	bfa8      	it	ge
 8016504:	461a      	movge	r2, r3
    lv_coord_t indic_radius = draw_rect_dsc.radius;
 8016506:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
    if((hor && lv_area_get_width(&bar->indic_area) > indic_radius * 2) ||
 801650a:	1053      	asrs	r3, r2, #1
 801650c:	428b      	cmp	r3, r1
 801650e:	bfa8      	it	ge
 8016510:	460b      	movge	r3, r1
 8016512:	45ba      	cmp	sl, r7
 8016514:	bfd5      	itete	le
 8016516:	8f22      	ldrhle	r2, [r4, #56]	; 0x38
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016518:	8f62      	ldrhgt	r2, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801651a:	8ea1      	ldrhle	r1, [r4, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801651c:	8ee1      	ldrhgt	r1, [r4, #54]	; 0x36
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801651e:	bfd4      	ite	le
 8016520:	3201      	addle	r2, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016522:	3201      	addgt	r2, #1
 8016524:	1a52      	subs	r2, r2, r1
 8016526:	005b      	lsls	r3, r3, #1
       (!hor && lv_area_get_height(&bar->indic_area) > indic_radius * 2)) {
 8016528:	b212      	sxth	r2, r2
 801652a:	429a      	cmp	r2, r3
 801652c:	dd18      	ble.n	8016560 <draw_indic+0x414>
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801652e:	2300      	movs	r3, #0
        lv_opa_t bg_opa = draw_rect_dsc.bg_opa;
 8016530:	f89d 9073 	ldrb.w	r9, [sp, #115]	; 0x73
        lv_opa_t bg_img_opa = draw_rect_dsc.bg_img_opa;
 8016534:	f89d 8085 	ldrb.w	r8, [sp, #133]	; 0x85
        lv_opa_t border_opa = draw_rect_dsc.border_opa;
 8016538:	f89d 608c 	ldrb.w	r6, [sp, #140]	; 0x8c
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801653c:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
        lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8016540:	ee18 2a10 	vmov	r2, s16
 8016544:	a91c      	add	r1, sp, #112	; 0x70
 8016546:	4658      	mov	r0, fp
        draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 8016548:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
        draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 801654c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
        lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8016550:	f7f4 fe7a 	bl	800b248 <lv_draw_rect>
        draw_rect_dsc.bg_opa = bg_opa;
 8016554:	f88d 9073 	strb.w	r9, [sp, #115]	; 0x73
        draw_rect_dsc.bg_img_opa = bg_img_opa;
 8016558:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
        draw_rect_dsc.border_opa = border_opa;
 801655c:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 8016560:	9a04      	ldr	r2, [sp, #16]
 8016562:	8aa3      	ldrh	r3, [r4, #20]
 8016564:	4413      	add	r3, r2
 8016566:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 801656a:	9a02      	ldr	r2, [sp, #8]
 801656c:	8b23      	ldrh	r3, [r4, #24]
 801656e:	1a9b      	subs	r3, r3, r2
 8016570:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 8016574:	9a05      	ldr	r2, [sp, #20]
 8016576:	8ae3      	ldrh	r3, [r4, #22]
 8016578:	4413      	add	r3, r2
 801657a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 801657e:	9a03      	ldr	r2, [sp, #12]
 8016580:	8b63      	ldrh	r3, [r4, #26]
 8016582:	1a9b      	subs	r3, r3, r2
 8016584:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 8016588:	462a      	mov	r2, r5
 801658a:	2300      	movs	r3, #0
 801658c:	a90c      	add	r1, sp, #48	; 0x30
 801658e:	a810      	add	r0, sp, #64	; 0x40
 8016590:	f7f4 fc02 	bl	800ad98 <lv_draw_mask_radius_init>
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 8016594:	2100      	movs	r1, #0
 8016596:	a810      	add	r0, sp, #64	; 0x40
 8016598:	f7f4 fa4e 	bl	800aa38 <lv_draw_mask_add>
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 801659c:	2300      	movs	r3, #0
    mask_indic_max_area.x1 += bg_left;
 801659e:	9904      	ldr	r1, [sp, #16]
    lv_opa_t border_opa = draw_rect_dsc.border_opa;
 80165a0:	f89d 608c 	ldrb.w	r6, [sp, #140]	; 0x8c
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 80165a4:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 80165a8:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    mask_indic_max_area.x1 += bg_left;
 80165ac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    dest->y1 = src->y1;
 80165b0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
    dest->x2 = src->x2;
 80165b4:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 80165b8:	440b      	add	r3, r1
    mask_indic_max_area.y1 += bg_top;
 80165ba:	9905      	ldr	r1, [sp, #20]
 80165bc:	440a      	add	r2, r1
    mask_indic_max_area.x2 -= bg_right;
 80165be:	9902      	ldr	r1, [sp, #8]
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 80165c0:	4605      	mov	r5, r0
    mask_indic_max_area.x2 -= bg_right;
 80165c2:	eba8 0801 	sub.w	r8, r8, r1
    dest->y2 = src->y2;
 80165c6:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
    mask_indic_max_area.y2 -= bg_bottom;
 80165ca:	9903      	ldr	r1, [sp, #12]
 80165cc:	1a40      	subs	r0, r0, r1
    mask_indic_max_area.x1 += bg_left;
 80165ce:	b29b      	uxth	r3, r3
    mask_indic_max_area.y1 += bg_top;
 80165d0:	b292      	uxth	r2, r2
    mask_indic_max_area.x2 -= bg_right;
 80165d2:	fa1f f888 	uxth.w	r8, r8
    mask_indic_max_area.y2 -= bg_bottom;
 80165d6:	b280      	uxth	r0, r0
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 80165d8:	45ba      	cmp	sl, r7
    mask_indic_max_area.x1 += bg_left;
 80165da:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    mask_indic_max_area.y1 += bg_top;
 80165de:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
    mask_indic_max_area.x2 -= bg_right;
 80165e2:	f8ad 803c 	strh.w	r8, [sp, #60]	; 0x3c
    mask_indic_max_area.y2 -= bg_bottom;
 80165e6:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 80165ea:	f73f ae99 	bgt.w	8016320 <draw_indic+0x1d4>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80165ee:	3001      	adds	r0, #1
 80165f0:	1a80      	subs	r0, r0, r2
 80165f2:	b200      	sxth	r0, r0
 80165f4:	2803      	cmp	r0, #3
 80165f6:	dc0b      	bgt.n	8016610 <draw_indic+0x4c4>
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 80165f8:	8ae3      	ldrh	r3, [r4, #22]
 80165fa:	eb0a 72da 	add.w	r2, sl, sl, lsr #31
 80165fe:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8016602:	b29b      	uxth	r3, r3
 8016604:	1e9a      	subs	r2, r3, #2
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 8016606:	3302      	adds	r3, #2
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8016608:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 801660c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    lv_draw_mask_radius_init(&mask_indic_param, &bar->indic_area, draw_rect_dsc.radius, false);
 8016610:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
 8016614:	2300      	movs	r3, #0
 8016616:	ee18 1a10 	vmov	r1, s16
 801661a:	a816      	add	r0, sp, #88	; 0x58
 801661c:	f7f4 fbbc 	bl	800ad98 <lv_draw_mask_radius_init>
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 8016620:	2100      	movs	r1, #0
 8016622:	a816      	add	r0, sp, #88	; 0x58
 8016624:	f7f4 fa08 	bl	800aa38 <lv_draw_mask_add>
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &mask_indic_max_area);
 8016628:	aa0e      	add	r2, sp, #56	; 0x38
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 801662a:	4607      	mov	r7, r0
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &mask_indic_max_area);
 801662c:	a91c      	add	r1, sp, #112	; 0x70
 801662e:	4658      	mov	r0, fp
 8016630:	f7f4 fe0a 	bl	800b248 <lv_draw_rect>
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 8016634:	2300      	movs	r3, #0
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8016636:	ee18 2a10 	vmov	r2, s16
 801663a:	a91c      	add	r1, sp, #112	; 0x70
 801663c:	4658      	mov	r0, fp
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801663e:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 8016642:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 8016646:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
    draw_rect_dsc.border_opa = border_opa;
 801664a:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 801664e:	f7f4 fdfb 	bl	800b248 <lv_draw_rect>
    lv_draw_mask_free_param(&mask_indic_param);
 8016652:	a816      	add	r0, sp, #88	; 0x58
 8016654:	f7f4 fa52 	bl	800aafc <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_bg_param);
 8016658:	a810      	add	r0, sp, #64	; 0x40
 801665a:	f7f4 fa4f 	bl	800aafc <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_indic_id);
 801665e:	4638      	mov	r0, r7
 8016660:	f7f4 fa22 	bl	800aaa8 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bg_id);
 8016664:	4628      	mov	r0, r5
 8016666:	f7f4 fa1f 	bl	800aaa8 <lv_draw_mask_remove_id>
 801666a:	e689      	b.n	8016380 <draw_indic+0x234>
 801666c:	0801606d 	.word	0x0801606d
 8016670:	08020438 	.word	0x08020438

08016674 <lv_bar_event>:
{
 8016674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8016678:	482f      	ldr	r0, [pc, #188]	; (8016738 <lv_bar_event+0xc4>)
{
 801667a:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801667c:	f7ec fcfe 	bl	800307c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8016680:	2801      	cmp	r0, #1
 8016682:	d144      	bne.n	801670e <lv_bar_event+0x9a>
    lv_event_code_t code = lv_event_get_code(e);
 8016684:	4620      	mov	r0, r4
 8016686:	f7ec fde5 	bl	8003254 <lv_event_get_code>
 801668a:	4607      	mov	r7, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801668c:	4620      	mov	r0, r4
 801668e:	f7ec fddd 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8016692:	2f13      	cmp	r7, #19
    lv_obj_t * obj = lv_event_get_target(e);
 8016694:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8016696:	d13c      	bne.n	8016712 <lv_bar_event+0x9e>
        indic_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 8016698:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801669c:	f7ee f9f9 	bl	8004a92 <lv_obj_calculate_ext_draw_size>
 80166a0:	4680      	mov	r8, r0
        lv_coord_t * s = lv_event_get_param(e);
 80166a2:	4620      	mov	r0, r4
 80166a4:	f7ec fdda 	bl	800325c <lv_event_get_param>
        *s = LV_MAX(*s, indic_size);
 80166a8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80166ac:	4543      	cmp	r3, r8
 80166ae:	bfb8      	it	lt
 80166b0:	4643      	movlt	r3, r8
 80166b2:	8003      	strh	r3, [r0, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80166b4:	2212      	movs	r2, #18
 80166b6:	2100      	movs	r1, #0
        lv_coord_t * s = lv_event_get_param(e);
 80166b8:	4606      	mov	r6, r0
 80166ba:	4628      	mov	r0, r5
 80166bc:	f7f0 fee6 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80166c0:	463a      	mov	r2, r7
    return (lv_coord_t)v.num;
 80166c2:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80166c6:	2100      	movs	r1, #0
 80166c8:	4628      	mov	r0, r5
 80166ca:	f7f0 fedf 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80166ce:	2210      	movs	r2, #16
    return (lv_coord_t)v.num;
 80166d0:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80166d2:	2100      	movs	r1, #0
 80166d4:	4628      	mov	r0, r5
 80166d6:	f7f0 fed9 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80166da:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 80166dc:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80166de:	2100      	movs	r1, #0
 80166e0:	4628      	mov	r0, r5
 80166e2:	f7f0 fed3 	bl	800748c <lv_obj_get_style_prop>
        lv_coord_t pad = LV_MIN4(bg_left, bg_right, bg_top, bg_bottom);
 80166e6:	4544      	cmp	r4, r8
 80166e8:	4623      	mov	r3, r4
 80166ea:	bfa8      	it	ge
 80166ec:	4643      	movge	r3, r8
 80166ee:	42bb      	cmp	r3, r7
 80166f0:	bfa8      	it	ge
 80166f2:	463b      	movge	r3, r7
    return (lv_coord_t)v.num;
 80166f4:	b202      	sxth	r2, r0
 80166f6:	4293      	cmp	r3, r2
 80166f8:	bfa8      	it	ge
 80166fa:	4613      	movge	r3, r2
        if(pad < 0) {
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	da06      	bge.n	801670e <lv_bar_event+0x9a>
            *s = LV_MAX(*s, -pad);
 8016700:	f9b6 0000 	ldrsh.w	r0, [r6]
 8016704:	425b      	negs	r3, r3
 8016706:	4283      	cmp	r3, r0
 8016708:	bfb8      	it	lt
 801670a:	4603      	movlt	r3, r0
 801670c:	8033      	strh	r3, [r6, #0]
}
 801670e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 8016712:	2f01      	cmp	r7, #1
 8016714:	d001      	beq.n	801671a <lv_bar_event+0xa6>
 8016716:	2f08      	cmp	r7, #8
 8016718:	d106      	bne.n	8016728 <lv_bar_event+0xb4>
        lv_obj_invalidate_area(obj, &bar->indic_area);
 801671a:	f105 0134 	add.w	r1, r5, #52	; 0x34
 801671e:	4628      	mov	r0, r5
}
 8016720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_invalidate_area(obj, &bar->indic_area);
 8016724:	f7ee bdff 	b.w	8005326 <lv_obj_invalidate_area>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8016728:	2f15      	cmp	r7, #21
 801672a:	d1f0      	bne.n	801670e <lv_bar_event+0x9a>
        draw_indic(e);
 801672c:	4620      	mov	r0, r4
}
 801672e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        draw_indic(e);
 8016732:	f7ff bd0b 	b.w	801614c <draw_indic>
 8016736:	bf00      	nop
 8016738:	08020438 	.word	0x08020438

0801673c <lv_bar_set_value>:
{
 801673c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(bar->cur_value == value) return;
 801673e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016740:	428d      	cmp	r5, r1
 8016742:	d014      	beq.n	801676e <lv_bar_set_value+0x32>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 8016744:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller than the left value*/
 8016746:	6b06      	ldr	r6, [r0, #48]	; 0x30
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 8016748:	4299      	cmp	r1, r3
 801674a:	bfa8      	it	ge
 801674c:	4619      	movge	r1, r3
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller than the left value*/
 801674e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016750:	42b3      	cmp	r3, r6
 8016752:	bfb8      	it	lt
 8016754:	4633      	movlt	r3, r6
 8016756:	4299      	cmp	r1, r3
 8016758:	bfb8      	it	lt
 801675a:	4619      	movlt	r1, r3
    if(bar->cur_value == value) return;
 801675c:	428d      	cmp	r5, r1
 801675e:	d006      	beq.n	801676e <lv_bar_set_value+0x32>
    lv_bar_set_value_with_anim(obj, value, &bar->cur_value, &bar->cur_value_anim, anim);
 8016760:	9200      	str	r2, [sp, #0]
 8016762:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8016766:	f100 0224 	add.w	r2, r0, #36	; 0x24
 801676a:	f7ff fcb1 	bl	80160d0 <lv_bar_set_value_with_anim>
}
 801676e:	b002      	add	sp, #8
 8016770:	bd70      	pop	{r4, r5, r6, pc}

08016772 <lv_bar_constructor>:
{
 8016772:	b538      	push	{r3, r4, r5, lr}
    bar->cur_value = 0;
 8016774:	2500      	movs	r5, #0
    bar->max_value = 100;
 8016776:	2364      	movs	r3, #100	; 0x64
    bar->start_value = 0;
 8016778:	e9c1 350b 	strd	r3, r5, [r1, #44]	; 0x2c
    bar->mode = LV_BAR_MODE_NORMAL;
 801677c:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c

static void lv_bar_init_anim(lv_obj_t * obj, _lv_bar_anim_t * bar_anim)
{
    bar_anim->bar = obj;
    bar_anim->anim_start = 0;
    bar_anim->anim_end = 0;
 8016780:	644d      	str	r5, [r1, #68]	; 0x44
    bar->mode = LV_BAR_MODE_NORMAL;
 8016782:	f365 0301 	bfi	r3, r5, #0, #2
{
 8016786:	460c      	mov	r4, r1
    bar->mode = LV_BAR_MODE_NORMAL;
 8016788:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 801678c:	f04f 33ff 	mov.w	r3, #4294967295
    bar_anim->bar = obj;
 8016790:	e9c1 3112 	strd	r3, r1, [r1, #72]	; 0x48
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 8016794:	658b      	str	r3, [r1, #88]	; 0x58
    bar->min_value = 0;
 8016796:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    bar->indic_area.x2 = 0;
 801679a:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    bar_anim->anim_start = 0;
 801679e:	e9c1 150f 	strd	r1, r5, [r1, #60]	; 0x3c
    bar_anim->anim_end = 0;
 80167a2:	e9c1 5514 	strd	r5, r5, [r1, #80]	; 0x50
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 80167a6:	4620      	mov	r0, r4
 80167a8:	2108      	movs	r1, #8
 80167aa:	f7ed fbf0 	bl	8003f8e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 80167ae:	4620      	mov	r0, r4
 80167b0:	2110      	movs	r1, #16
 80167b2:	f7ed fbec 	bl	8003f8e <lv_obj_clear_flag>
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 80167b6:	462a      	mov	r2, r5
 80167b8:	4629      	mov	r1, r5
 80167ba:	4620      	mov	r0, r4
}
 80167bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 80167c0:	f7ff bfbc 	b.w	801673c <lv_bar_set_value>

080167c4 <lv_bar_set_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) {
 80167c4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80167c8:	f003 0303 	and.w	r3, r3, #3
 80167cc:	2b02      	cmp	r3, #2
{
 80167ce:	b513      	push	{r0, r1, r4, lr}
    if(bar->mode != LV_BAR_MODE_RANGE) {
 80167d0:	d115      	bne.n	80167fe <lv_bar_set_start_value+0x3a>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 80167d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80167d4:	4299      	cmp	r1, r3
 80167d6:	bfa8      	it	ge
 80167d8:	4619      	movge	r1, r3
 80167da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80167dc:	4299      	cmp	r1, r3
 80167de:	bfb8      	it	lt
 80167e0:	4619      	movlt	r1, r3
    value = value > bar->cur_value ? bar->cur_value : value; /*Can't be greater than the right value*/
 80167e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80167e4:	4299      	cmp	r1, r3
 80167e6:	bfa8      	it	ge
 80167e8:	4619      	movge	r1, r3
    if(bar->start_value == value) return;
 80167ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80167ec:	428b      	cmp	r3, r1
 80167ee:	d006      	beq.n	80167fe <lv_bar_set_start_value+0x3a>
    lv_bar_set_value_with_anim(obj, value, &bar->start_value, &bar->start_value_anim, anim);
 80167f0:	9200      	str	r2, [sp, #0]
 80167f2:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 80167f6:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80167fa:	f7ff fc69 	bl	80160d0 <lv_bar_set_value_with_anim>
}
 80167fe:	b002      	add	sp, #8
 8016800:	bd10      	pop	{r4, pc}

08016802 <lv_bar_get_value>:
    return LV_BAR_GET_ANIM_VALUE(bar->cur_value, bar->cur_value_anim);
 8016802:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8016804:	3301      	adds	r3, #1
 8016806:	bf14      	ite	ne
 8016808:	6c40      	ldrne	r0, [r0, #68]	; 0x44
 801680a:	6a40      	ldreq	r0, [r0, #36]	; 0x24
}
 801680c:	4770      	bx	lr

0801680e <lv_bar_get_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) return bar->min_value;
 801680e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8016812:	f003 0303 	and.w	r3, r3, #3
 8016816:	2b02      	cmp	r3, #2
 8016818:	d001      	beq.n	801681e <lv_bar_get_start_value+0x10>
 801681a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801681c:	4770      	bx	lr
    return LV_BAR_GET_ANIM_VALUE(bar->start_value, bar->start_value_anim);
 801681e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8016820:	3301      	adds	r3, #1
 8016822:	bf14      	ite	ne
 8016824:	6d40      	ldrne	r0, [r0, #84]	; 0x54
 8016826:	6b00      	ldreq	r0, [r0, #48]	; 0x30
}
 8016828:	4770      	bx	lr

0801682a <lv_bar_get_mode>:
    return bar->mode;
 801682a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
}
 801682e:	f000 0003 	and.w	r0, r0, #3
 8016832:	4770      	bx	lr

08016834 <lv_btn_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_btn_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8016834:	b507      	push	{r0, r1, r2, lr}
 8016836:	4608      	mov	r0, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8016838:	2110      	movs	r1, #16
 801683a:	9001      	str	r0, [sp, #4]
 801683c:	f7ed fba7 	bl	8003f8e <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8016840:	9801      	ldr	r0, [sp, #4]
 8016842:	f44f 6180 	mov.w	r1, #1024	; 0x400

    LV_TRACE_OBJ_CREATE("finished");
}
 8016846:	b003      	add	sp, #12
 8016848:	f85d eb04 	ldr.w	lr, [sp], #4
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801684c:	f7ed bb6a 	b.w	8003f24 <lv_obj_add_flag>

08016850 <lv_btnmatrix_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_btnmatrix_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8016850:	b510      	push	{r4, lr}
 8016852:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");
    LV_UNUSED(class_p);
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;
    lv_mem_free(btnm->button_areas);
 8016854:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8016856:	f7fc fd85 	bl	8013364 <lv_mem_free>
    lv_mem_free(btnm->ctrl_bits);
 801685a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801685c:	f7fc fd82 	bl	8013364 <lv_mem_free>
    btnm->button_areas = NULL;
 8016860:	2300      	movs	r3, #0
    btnm->ctrl_bits = NULL;
 8016862:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
    LV_TRACE_OBJ_CREATE("finished");
}
 8016866:	bd10      	pop	{r4, pc}

08016868 <lv_obj_get_style_pad_column.constprop.0>:
static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
 8016868:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801686a:	2215      	movs	r2, #21
 801686c:	2100      	movs	r1, #0
 801686e:	f7f0 fe0d 	bl	800748c <lv_obj_get_style_prop>
}
 8016872:	b200      	sxth	r0, r0
 8016874:	bd08      	pop	{r3, pc}
	...

08016878 <lv_btnmatrix_set_map.part.0>:
void lv_btnmatrix_set_map(lv_obj_t * obj, const char * map[])
 8016878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @param map_p pointer to a string array
 */
static void allocate_btn_areas_and_controls(const lv_obj_t * obj, const char ** map)
{
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;
    btnm->row_cnt = 1;
 801687c:	2301      	movs	r3, #1
    /*Count the buttons in the map*/
    uint16_t btn_cnt = 0;
    uint16_t i       = 0;
    while(map[i] && map[i][0] != '\0') {
 801687e:	2700      	movs	r7, #0
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8016880:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8016adc <lv_btnmatrix_set_map.part.0+0x264>
    btnm->row_cnt = 1;
 8016884:	8643      	strh	r3, [r0, #50]	; 0x32
void lv_btnmatrix_set_map(lv_obj_t * obj, const char * map[])
 8016886:	b093      	sub	sp, #76	; 0x4c
 8016888:	4604      	mov	r4, r0
 801688a:	460e      	mov	r6, r1
    uint16_t btn_cnt = 0;
 801688c:	463d      	mov	r5, r7
    while(map[i] && map[i][0] != '\0') {
 801688e:	b2bb      	uxth	r3, r7
 8016890:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8016894:	b108      	cbz	r0, 801689a <lv_btnmatrix_set_map.part.0+0x22>
 8016896:	7803      	ldrb	r3, [r0, #0]
 8016898:	b9a3      	cbnz	r3, 80168c4 <lv_btnmatrix_set_map.part.0+0x4c>
        }
        i++;
    }

    /*Do not allocate memory for the same amount of buttons*/
    if(btn_cnt == btnm->btn_cnt) return;
 801689a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801689c:	42ab      	cmp	r3, r5
 801689e:	d02b      	beq.n	80168f8 <lv_btnmatrix_set_map.part.0+0x80>

    if(btnm->button_areas != NULL) {
 80168a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80168a2:	b118      	cbz	r0, 80168ac <lv_btnmatrix_set_map.part.0+0x34>
        lv_mem_free(btnm->button_areas);
 80168a4:	f7fc fd5e 	bl	8013364 <lv_mem_free>
        btnm->button_areas = NULL;
 80168a8:	2300      	movs	r3, #0
 80168aa:	62a3      	str	r3, [r4, #40]	; 0x28
    }
    if(btnm->ctrl_bits != NULL) {
 80168ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80168ae:	b118      	cbz	r0, 80168b8 <lv_btnmatrix_set_map.part.0+0x40>
        lv_mem_free(btnm->ctrl_bits);
 80168b0:	f7fc fd58 	bl	8013364 <lv_mem_free>
        btnm->ctrl_bits = NULL;
 80168b4:	2300      	movs	r3, #0
 80168b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    btnm->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 80168b8:	00e8      	lsls	r0, r5, #3
 80168ba:	f7fc fd35 	bl	8013328 <lv_mem_alloc>
 80168be:	62a0      	str	r0, [r4, #40]	; 0x28
    LV_ASSERT_MALLOC(btnm->button_areas);
 80168c0:	b960      	cbnz	r0, 80168dc <lv_btnmatrix_set_map.part.0+0x64>
 80168c2:	e7fe      	b.n	80168c2 <lv_btnmatrix_set_map.part.0+0x4a>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 80168c4:	4641      	mov	r1, r8
 80168c6:	f7e9 fc83 	bl	80001d0 <strcmp>
 80168ca:	b118      	cbz	r0, 80168d4 <lv_btnmatrix_set_map.part.0+0x5c>
            btn_cnt++;
 80168cc:	3501      	adds	r5, #1
 80168ce:	b2ad      	uxth	r5, r5
        i++;
 80168d0:	3701      	adds	r7, #1
 80168d2:	e7dc      	b.n	801688e <lv_btnmatrix_set_map.part.0+0x16>
            btnm->row_cnt++;
 80168d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80168d6:	3301      	adds	r3, #1
 80168d8:	8663      	strh	r3, [r4, #50]	; 0x32
 80168da:	e7f9      	b.n	80168d0 <lv_btnmatrix_set_map.part.0+0x58>
    btnm->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 80168dc:	0068      	lsls	r0, r5, #1
 80168de:	f7fc fd23 	bl	8013328 <lv_mem_alloc>
 80168e2:	62e0      	str	r0, [r4, #44]	; 0x2c
    LV_ASSERT_MALLOC(btnm->ctrl_bits);
 80168e4:	b900      	cbnz	r0, 80168e8 <lv_btnmatrix_set_map.part.0+0x70>
 80168e6:	e7fe      	b.n	80168e6 <lv_btnmatrix_set_map.part.0+0x6e>
    if(btnm->button_areas == NULL || btnm->ctrl_bits == NULL) btn_cnt = 0;
 80168e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	bf08      	it	eq
 80168ee:	2500      	moveq	r5, #0

    lv_memset_00(btnm->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 80168f0:	0069      	lsls	r1, r5, #1
 80168f2:	f7fc ff02 	bl	80136fa <lv_memset_00>

    btnm->btn_cnt = btn_cnt;
 80168f6:	8625      	strh	r5, [r4, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80168f8:	2216      	movs	r2, #22
 80168fa:	2100      	movs	r1, #0
    btnm->map_p = map;
 80168fc:	6266      	str	r6, [r4, #36]	; 0x24
 80168fe:	4620      	mov	r0, r4
 8016900:	f7f0 fdc4 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016904:	2212      	movs	r2, #18
    return (lv_base_dir_t)v.num;
 8016906:	b2c3      	uxtb	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016908:	2100      	movs	r1, #0
 801690a:	4620      	mov	r0, r4
    return (lv_base_dir_t)v.num;
 801690c:	930e      	str	r3, [sp, #56]	; 0x38
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801690e:	f7f0 fdbd 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016912:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016914:	900d      	str	r0, [sp, #52]	; 0x34
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016916:	2100      	movs	r1, #0
 8016918:	4620      	mov	r0, r4
 801691a:	f7f0 fdb7 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801691e:	2214      	movs	r2, #20
 8016920:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016922:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8016924:	4620      	mov	r0, r4
 8016926:	f7f0 fdb1 	bl	800748c <lv_obj_get_style_prop>
 801692a:	4680      	mov	r8, r0
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801692c:	4620      	mov	r0, r4
 801692e:	f7ff ff9b 	bl	8016868 <lv_obj_get_style_pad_column.constprop.0>
 8016932:	9007      	str	r0, [sp, #28]
    lv_coord_t max_w            = lv_obj_get_content_width(obj);
 8016934:	4620      	mov	r0, r4
 8016936:	f7ee fb0d 	bl	8004f54 <lv_obj_get_content_width>
 801693a:	4607      	mov	r7, r0
    lv_coord_t max_h            = lv_obj_get_content_height(obj);
 801693c:	4620      	mov	r0, r4
 801693e:	f7ee fb1f 	bl	8004f80 <lv_obj_get_content_height>
    lv_coord_t max_h_no_gap = max_h - (prow * (btnm->row_cnt - 1));
 8016942:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8016944:	3b01      	subs	r3, #1
 8016946:	fb13 f308 	smulbb	r3, r3, r8
 801694a:	1ac0      	subs	r0, r0, r3
 801694c:	b203      	sxth	r3, r0
 801694e:	930a      	str	r3, [sp, #40]	; 0x28
 8016950:	fa1f f388 	uxth.w	r3, r8
 8016954:	930c      	str	r3, [sp, #48]	; 0x30
 8016956:	b2ab      	uxth	r3, r5
 8016958:	9304      	str	r3, [sp, #16]
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801695a:	b2bb      	uxth	r3, r7
    for(row = 0; row < btnm->row_cnt; row++) {
 801695c:	f04f 0800 	mov.w	r8, #0
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 8016960:	9306      	str	r3, [sp, #24]
 8016962:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    for(row = 0; row < btnm->row_cnt; row++) {
 8016966:	f8cd 8014 	str.w	r8, [sp, #20]
    uint32_t txt_tot_i = 0; /*Act. index in the str map*/
 801696a:	f8cd 8008 	str.w	r8, [sp, #8]
 801696e:	9310      	str	r3, [sp, #64]	; 0x40
    for(row = 0; row < btnm->row_cnt; row++) {
 8016970:	f8b4 a032 	ldrh.w	sl, [r4, #50]	; 0x32
 8016974:	9b05      	ldr	r3, [sp, #20]
 8016976:	4553      	cmp	r3, sl
 8016978:	d336      	bcc.n	80169e8 <lv_btnmatrix_set_map.part.0+0x170>
    lv_obj_refresh_ext_draw_size(obj);
 801697a:	4620      	mov	r0, r4
 801697c:	f7ee f8fd 	bl	8004b7a <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8016980:	4620      	mov	r0, r4
}
 8016982:	b013      	add	sp, #76	; 0x4c
 8016984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(obj);
 8016988:	f7ee bcee 	b.w	8005368 <lv_obj_invalidate>
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 801698c:	9b02      	ldr	r3, [sp, #8]
 801698e:	9a03      	ldr	r2, [sp, #12]
 8016990:	441d      	add	r5, r3
 8016992:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 * @param ctrl_bits least significant 3 bits used (1..7 valid values)
 * @return the width of the button in units
 */
static uint8_t get_button_width(lv_btnmatrix_ctrl_t ctrl_bits)
{
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 8016994:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 8016998:	f003 0307 	and.w	r3, r3, #7
 801699c:	2b01      	cmp	r3, #1
 801699e:	bf2c      	ite	cs
 80169a0:	18d2      	addcs	r2, r2, r3
 80169a2:	3201      	addcc	r2, #1
 80169a4:	b293      	uxth	r3, r2
 80169a6:	9303      	str	r3, [sp, #12]
            btn_cnt++;
 80169a8:	fa1f f789 	uxth.w	r7, r9
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 80169ac:	463d      	mov	r5, r7
 80169ae:	f856 b027 	ldr.w	fp, [r6, r7, lsl #2]
 80169b2:	f1bb 0f00 	cmp.w	fp, #0
 80169b6:	d00a      	beq.n	80169ce <lv_btnmatrix_set_map.part.0+0x156>
 80169b8:	4948      	ldr	r1, [pc, #288]	; (8016adc <lv_btnmatrix_set_map.part.0+0x264>)
 80169ba:	4658      	mov	r0, fp
 80169bc:	f7e9 fc08 	bl	80001d0 <strcmp>
 80169c0:	b128      	cbz	r0, 80169ce <lv_btnmatrix_set_map.part.0+0x156>
 80169c2:	f89b 3000 	ldrb.w	r3, [fp]
 80169c6:	f109 0901 	add.w	r9, r9, #1
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d1de      	bne.n	801698c <lv_btnmatrix_set_map.part.0+0x114>
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 80169ce:	9b05      	ldr	r3, [sp, #20]
 80169d0:	3301      	adds	r3, #1
 80169d2:	9305      	str	r3, [sp, #20]
        if(btn_cnt == 0) {
 80169d4:	b96f      	cbnz	r7, 80169f2 <lv_btnmatrix_set_map.part.0+0x17a>
            map_row = &map_row[btn_cnt + 1];       /*Set the map to the next row*/
 80169d6:	3604      	adds	r6, #4
    for(row = 0; row < btnm->row_cnt; row++) {
 80169d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169da:	9804      	ldr	r0, [sp, #16]
 80169dc:	4498      	add	r8, r3
 80169de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169e0:	4418      	add	r0, r3
 80169e2:	b283      	uxth	r3, r0
 80169e4:	9304      	str	r3, [sp, #16]
 80169e6:	e7c3      	b.n	8016970 <lv_btnmatrix_set_map.part.0+0xf8>
 80169e8:	f04f 0900 	mov.w	r9, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
 80169ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80169f0:	e7da      	b.n	80169a8 <lv_btnmatrix_set_map.part.0+0x130>
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 80169f2:	9b04      	ldr	r3, [sp, #16]
 80169f4:	fbb8 f2fa 	udiv	r2, r8, sl
 80169f8:	441a      	add	r2, r3
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 80169fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169fc:	4443      	add	r3, r8
 80169fe:	fbb3 fafa 	udiv	sl, r3, sl
 8016a02:	9b04      	ldr	r3, [sp, #16]
 8016a04:	3b01      	subs	r3, #1
 8016a06:	449a      	add	sl, r3
 8016a08:	fa0f f38a 	sxth.w	r3, sl
 8016a0c:	930b      	str	r3, [sp, #44]	; 0x2c
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 8016a0e:	9b07      	ldr	r3, [sp, #28]
 8016a10:	3f01      	subs	r7, #1
 8016a12:	fb17 f703 	smulbb	r7, r7, r3
 8016a16:	9b06      	ldr	r3, [sp, #24]
 8016a18:	1bdf      	subs	r7, r3, r7
 8016a1a:	b23f      	sxth	r7, r7
 8016a1c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8016a20:	9308      	str	r3, [sp, #32]
 8016a22:	9b02      	ldr	r3, [sp, #8]
 8016a24:	2700      	movs	r7, #0
 8016a26:	ea4f 0943 	mov.w	r9, r3, lsl #1
            btn_x1 += pleft;
 8016a2a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8016a2e:	9309      	str	r3, [sp, #36]	; 0x24
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 8016a30:	b212      	sxth	r2, r2
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8016a32:	46bb      	mov	fp, r7
        uint32_t row_unit_cnt = 0;  /*The current unit position in the row*/
 8016a34:	46ba      	mov	sl, r7
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8016a36:	9b08      	ldr	r3, [sp, #32]
 8016a38:	9903      	ldr	r1, [sp, #12]
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8016a3a:	9803      	ldr	r0, [sp, #12]
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 8016a3c:	9211      	str	r2, [sp, #68]	; 0x44
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8016a3e:	fb0a f303 	mul.w	r3, sl, r3
 8016a42:	fbb3 f3f1 	udiv	r3, r3, r1
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 8016a46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 8016a48:	f831 1009 	ldrh.w	r1, [r1, r9]
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 8016a4c:	f001 0107 	and.w	r1, r1, #7
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8016a50:	2901      	cmp	r1, #1
 8016a52:	bf2c      	ite	cs
 8016a54:	448a      	addcs	sl, r1
 8016a56:	f10a 0a01 	addcc.w	sl, sl, #1
 8016a5a:	9908      	ldr	r1, [sp, #32]
 8016a5c:	fb0a f101 	mul.w	r1, sl, r1
 8016a60:	fbb1 f1f0 	udiv	r1, r1, r0
 8016a64:	1e78      	subs	r0, r7, #1
 8016a66:	4401      	add	r1, r0
            if(base_dir == LV_BASE_DIR_RTL) {
 8016a68:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016a6a:	2801      	cmp	r0, #1
                btn_x1 = max_w - btn_x1;
 8016a6c:	bf08      	it	eq
 8016a6e:	9806      	ldreq	r0, [sp, #24]
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8016a70:	b289      	uxth	r1, r1
                btn_x1 = max_w - btn_x1;
 8016a72:	bf04      	itt	eq
 8016a74:	1a41      	subeq	r1, r0, r1
 8016a76:	b208      	sxtheq	r0, r1
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8016a78:	443b      	add	r3, r7
                btn_x2 = max_w - btn_x2;
 8016a7a:	bf08      	it	eq
 8016a7c:	9906      	ldreq	r1, [sp, #24]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	bf16      	itet	ne
 8016a82:	b218      	sxthne	r0, r3
                btn_x2 = max_w - btn_x2;
 8016a84:	1acb      	subeq	r3, r1, r3
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8016a86:	b20b      	sxthne	r3, r1
            btn_x1 += pleft;
 8016a88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a8a:	4401      	add	r1, r0
            btn_x2 += pleft;
 8016a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
                btn_x2 = max_w - btn_x2;
 8016a8e:	bf08      	it	eq
 8016a90:	b21b      	sxtheq	r3, r3
            btn_x2 += pleft;
 8016a92:	4403      	add	r3, r0
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 8016a94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016a96:	900f      	str	r0, [sp, #60]	; 0x3c
 8016a98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016a9a:	9000      	str	r0, [sp, #0]
 8016a9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016a9e:	b21b      	sxth	r3, r3
 8016aa0:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 8016aa4:	b209      	sxth	r1, r1
 8016aa6:	f7fb fea7 	bl	80127f8 <lv_area_set>
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8016aaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016aac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016aae:	f10b 0b01 	add.w	fp, fp, #1
 8016ab2:	441f      	add	r7, r3
 8016ab4:	455d      	cmp	r5, fp
 8016ab6:	f109 0902 	add.w	r9, r9, #2
 8016aba:	b2bf      	uxth	r7, r7
 8016abc:	d8bb      	bhi.n	8016a36 <lv_btnmatrix_set_map.part.0+0x1be>
 8016abe:	9a02      	ldr	r2, [sp, #8]
 8016ac0:	2d00      	cmp	r5, #0
 8016ac2:	f105 33ff 	add.w	r3, r5, #4294967295
 8016ac6:	f102 0201 	add.w	r2, r2, #1
 8016aca:	bf08      	it	eq
 8016acc:	2300      	moveq	r3, #0
 8016ace:	4413      	add	r3, r2
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 8016ad0:	3501      	adds	r5, #1
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8016ad2:	9302      	str	r3, [sp, #8]
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 8016ad4:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8016ad8:	e77e      	b.n	80169d8 <lv_btnmatrix_set_map.part.0+0x160>
 8016ada:	bf00      	nop
 8016adc:	08020470 	.word	0x08020470

08016ae0 <lv_btnmatrix_constructor>:
    btnm->btn_id_sel     = LV_BTNMATRIX_BTN_NONE;
 8016ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016ae4:	868a      	strh	r2, [r1, #52]	; 0x34
    btnm->one_check      = 0;
 8016ae6:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
    btnm->map_p          = NULL;
 8016aea:	2300      	movs	r3, #0
    btnm->one_check      = 0;
 8016aec:	f363 0200 	bfi	r2, r3, #0, #1
    btnm->button_areas   = NULL;
 8016af0:	e9c1 3309 	strd	r3, r3, [r1, #36]	; 0x24
    btnm->btn_cnt        = 0;
 8016af4:	e9c1 330b 	strd	r3, r3, [r1, #44]	; 0x2c
{
 8016af8:	4608      	mov	r0, r1
    btnm->one_check      = 0;
 8016afa:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    if(map == NULL) return;
 8016afe:	4901      	ldr	r1, [pc, #4]	; (8016b04 <lv_btnmatrix_constructor+0x24>)
 8016b00:	f7ff beba 	b.w	8016878 <lv_btnmatrix_set_map.part.0>
 8016b04:	20000038 	.word	0x20000038

08016b08 <draw_main>:
{
 8016b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b0c:	b0cd      	sub	sp, #308	; 0x134
 8016b0e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8016b10:	f7ec fb9c 	bl	800324c <lv_event_get_target>
    if(btnm->btn_cnt == 0) return;
 8016b14:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    lv_obj_t * obj = lv_event_get_target(e);
 8016b16:	4604      	mov	r4, r0
    if(btnm->btn_cnt == 0) return;
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	f000 81d7 	beq.w	8016ecc <draw_main+0x3c4>
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016b1e:	4628      	mov	r0, r5
 8016b20:	f7ec fbe7 	bl	80032f2 <lv_event_get_draw_ctx>
    obj->skip_trans = 1;
 8016b24:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8016b28:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_get_coords(obj, &area_obj);
 8016b2c:	a90e      	add	r1, sp, #56	; 0x38
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016b2e:	4682      	mov	sl, r0
    obj->skip_trans = 1;
 8016b30:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 8016b34:	4620      	mov	r0, r4
 8016b36:	f7ee f9cd 	bl	8004ed4 <lv_obj_get_coords>
    obj->state = LV_STATE_DEFAULT;
 8016b3a:	6a22      	ldr	r2, [r4, #32]
 8016b3c:	4bc0      	ldr	r3, [pc, #768]	; (8016e40 <draw_main+0x338>)
    lv_state_t state_ori = obj->state;
 8016b3e:	f8b4 9020 	ldrh.w	r9, [r4, #32]
    obj->state = LV_STATE_DEFAULT;
 8016b42:	4013      	ands	r3, r2
 8016b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016b48:	6223      	str	r3, [r4, #32]
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 8016b4a:	a82e      	add	r0, sp, #184	; 0xb8
 8016b4c:	f7f4 fb58 	bl	800b200 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&draw_label_dsc_def);
 8016b50:	a81a      	add	r0, sp, #104	; 0x68
 8016b52:	f7f3 f821 	bl	8009b98 <lv_draw_label_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_def);
 8016b56:	aa2e      	add	r2, sp, #184	; 0xb8
 8016b58:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8016b5c:	4620      	mov	r0, r4
 8016b5e:	f7ed fd66 	bl	800462e <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_def);
 8016b62:	aa1a      	add	r2, sp, #104	; 0x68
 8016b64:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8016b68:	4620      	mov	r0, r4
 8016b6a:	f7ed fea9 	bl	80048c0 <lv_obj_init_draw_label_dsc>
    obj->skip_trans = 0;
 8016b6e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    obj->state = state_ori;
 8016b72:	f8a4 9020 	strh.w	r9, [r4, #32]
    obj->skip_trans = 0;
 8016b76:	f36f 0382 	bfc	r3, #2, #1
 8016b7a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016b7e:	2210      	movs	r2, #16
 8016b80:	2100      	movs	r1, #0
 8016b82:	4620      	mov	r0, r4
 8016b84:	f7f0 fc82 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8016b88:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 8016b8a:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8016b8c:	2100      	movs	r1, #0
 8016b8e:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8016b90:	930a      	str	r3, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8016b92:	f7f0 fc7b 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016b96:	2212      	movs	r2, #18
    return (lv_coord_t)v.num;
 8016b98:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016b9a:	2100      	movs	r1, #0
 8016b9c:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8016b9e:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016ba0:	f7f0 fc74 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016ba4:	2213      	movs	r2, #19
    return (lv_coord_t)v.num;
 8016ba6:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016ba8:	2100      	movs	r1, #0
 8016baa:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8016bac:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016bae:	f7f0 fc6d 	bl	800748c <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8016bb2:	4651      	mov	r1, sl
    return (lv_coord_t)v.num;
 8016bb4:	b203      	sxth	r3, r0
 8016bb6:	a83a      	add	r0, sp, #232	; 0xe8
 8016bb8:	9307      	str	r3, [sp, #28]
 8016bba:	f7ed ffd1 	bl	8004b60 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 8016bbe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8016bc2:	9347      	str	r3, [sp, #284]	; 0x11c
    part_draw_dsc.class_p = MY_CLASS;
 8016bc4:	4b9f      	ldr	r3, [pc, #636]	; (8016e44 <draw_main+0x33c>)
 8016bc6:	933b      	str	r3, [sp, #236]	; 0xec
    part_draw_dsc.rect_dsc = &draw_rect_dsc_act;
 8016bc8:	ab22      	add	r3, sp, #136	; 0x88
 8016bca:	933e      	str	r3, [sp, #248]	; 0xf8
    part_draw_dsc.label_dsc = &draw_label_dsc_act;
 8016bcc:	ab12      	add	r3, sp, #72	; 0x48
    part_draw_dsc.type = LV_BTNMATRIX_DRAW_PART_BTN;
 8016bce:	2700      	movs	r7, #0
    part_draw_dsc.label_dsc = &draw_label_dsc_act;
 8016bd0:	933f      	str	r3, [sp, #252]	; 0xfc
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 8016bd2:	f009 0320 	and.w	r3, r9, #32
    part_draw_dsc.type = LV_BTNMATRIX_DRAW_PART_BTN;
 8016bd6:	973c      	str	r7, [sp, #240]	; 0xf0
    uint16_t txt_i = 0;
 8016bd8:	9705      	str	r7, [sp, #20]
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 8016bda:	930b      	str	r3, [sp, #44]	; 0x2c
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 8016bdc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016bde:	b2be      	uxth	r6, r7
 8016be0:	42b3      	cmp	r3, r6
 8016be2:	f240 816d 	bls.w	8016ec0 <draw_main+0x3b8>
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 8016be6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016be8:	9b05      	ldr	r3, [sp, #20]
 8016bea:	4997      	ldr	r1, [pc, #604]	; (8016e48 <draw_main+0x340>)
 8016bec:	009b      	lsls	r3, r3, #2
 8016bee:	9306      	str	r3, [sp, #24]
 8016bf0:	9b05      	ldr	r3, [sp, #20]
 8016bf2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8016bf6:	f7e9 faeb 	bl	80001d0 <strcmp>
            txt_i++;
 8016bfa:	9b05      	ldr	r3, [sp, #20]
 8016bfc:	3301      	adds	r3, #1
 8016bfe:	b29b      	uxth	r3, r3
 8016c00:	9305      	str	r3, [sp, #20]
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 8016c02:	2800      	cmp	r0, #0
 8016c04:	d0f0      	beq.n	8016be8 <draw_main+0xe0>
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 8016c06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016c08:	fa1f f887 	uxth.w	r8, r7
    return w != 0 ? w : 1;
}

static bool button_is_hidden(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8016c0c:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 8016c10:	06da      	lsls	r2, r3, #27
 8016c12:	f100 8113 	bmi.w	8016e3c <draw_main+0x334>
        lv_state_t btn_state = LV_STATE_DEFAULT;
 8016c16:	f3c3 2500 	ubfx	r5, r3, #8, #1
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 8016c1a:	065b      	lsls	r3, r3, #25
 8016c1c:	f140 8116 	bpl.w	8016e4c <draw_main+0x344>
 8016c20:	f045 0580 	orr.w	r5, r5, #128	; 0x80
        lv_area_copy(&btn_area, &btnm->button_areas[btn_i]);
 8016c24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016c26:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
        btn_area.x1 += area_obj.x1;
 8016c2a:	f833 3038 	ldrh.w	r3, [r3, r8, lsl #3]
    dest->y1 = src->y1;
 8016c2e:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
    dest->x2 = src->x2;
 8016c32:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
    dest->y2 = src->y2;
 8016c36:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8016c3a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8016c3e:	4413      	add	r3, r2
 8016c40:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        btn_area.y1 += area_obj.y1;
 8016c44:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
        btn_area.x2 += area_obj.x1;
 8016c48:	4432      	add	r2, r6
        btn_area.y1 += area_obj.y1;
 8016c4a:	4419      	add	r1, r3
        btn_area.y2 += area_obj.y1;
 8016c4c:	4403      	add	r3, r0
        btn_area.y1 += area_obj.y1;
 8016c4e:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
        btn_area.x2 += area_obj.x1;
 8016c52:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        btn_area.y2 += area_obj.y1;
 8016c56:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        if(btn_state == LV_STATE_DEFAULT) {
 8016c5a:	2d00      	cmp	r5, #0
 8016c5c:	f040 810e 	bne.w	8016e7c <draw_main+0x374>
            lv_memcpy(&draw_rect_dsc_act, &draw_rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 8016c60:	2230      	movs	r2, #48	; 0x30
 8016c62:	a92e      	add	r1, sp, #184	; 0xb8
 8016c64:	a822      	add	r0, sp, #136	; 0x88
 8016c66:	f7fc fc29 	bl	80134bc <lv_memcpy>
            lv_memcpy(&draw_label_dsc_act, &draw_label_dsc_def, sizeof(lv_draw_label_dsc_t));
 8016c6a:	2220      	movs	r2, #32
 8016c6c:	a91a      	add	r1, sp, #104	; 0x68
 8016c6e:	a812      	add	r0, sp, #72	; 0x48
 8016c70:	f7fc fc24 	bl	80134bc <lv_memcpy>
        bool recolor = button_is_recolor(btnm->ctrl_bits[btn_i]);
 8016c74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 8016c76:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECKED) ? true : false;
}

static bool button_is_recolor(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_RECOLOR) ? true : false;
 8016c7a:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
        part_draw_dsc.id = btn_i;
 8016c7e:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 8016c82:	0516      	lsls	r6, r2, #20
 8016c84:	bf4c      	ite	mi
 8016c86:	f043 0301 	orrmi.w	r3, r3, #1
        else draw_label_dsc_act.flag &= ~LV_TEXT_FLAG_RECOLOR;
 8016c8a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
 8016c8e:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8016c92:	aa3a      	add	r2, sp, #232	; 0xe8
        part_draw_dsc.draw_area = &btn_area;
 8016c94:	ab10      	add	r3, sp, #64	; 0x40
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8016c96:	211a      	movs	r1, #26
 8016c98:	4620      	mov	r0, r4
        part_draw_dsc.draw_area = &btn_area;
 8016c9a:	933d      	str	r3, [sp, #244]	; 0xf4
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8016c9c:	f7ec fab6 	bl	800320c <lv_event_send>
        if(draw_rect_dsc_act.border_side & LV_BORDER_SIDE_INTERNAL) {
 8016ca0:	f89d 30a5 	ldrb.w	r3, [sp, #165]	; 0xa5
 8016ca4:	f3c3 0244 	ubfx	r2, r3, #1, #5
 8016ca8:	06d0      	lsls	r0, r2, #27
 8016caa:	d54a      	bpl.n	8016d42 <draw_main+0x23a>
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 8016cac:	220f      	movs	r2, #15
 8016cae:	f362 0345 	bfi	r3, r2, #1, #5
 8016cb2:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 8016cb6:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8016cba:	9908      	ldr	r1, [sp, #32]
 8016cbc:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8016cc0:	440b      	add	r3, r1
 8016cc2:	429a      	cmp	r2, r3
 8016cc4:	bf08      	it	eq
 8016cc6:	f89d 30a5 	ldrbeq.w	r3, [sp, #165]	; 0xa5
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 8016cca:	9907      	ldr	r1, [sp, #28]
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 8016ccc:	bf02      	ittt	eq
 8016cce:	220b      	moveq	r2, #11
 8016cd0:	f362 0345 	bfieq	r3, r2, #1, #5
 8016cd4:	f88d 30a5 	strbeq.w	r3, [sp, #165]	; 0xa5
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 8016cd8:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8016cdc:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8016ce0:	1a5b      	subs	r3, r3, r1
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d109      	bne.n	8016cfa <draw_main+0x1f2>
 8016ce6:	f89d 30a5 	ldrb.w	r3, [sp, #165]	; 0xa5
 8016cea:	f3c3 0244 	ubfx	r2, r3, #1, #5
 8016cee:	f002 0217 	and.w	r2, r2, #23
 8016cf2:	f362 0345 	bfi	r3, r2, #1, #5
 8016cf6:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 8016cfa:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8016cfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016d00:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8016d04:	440b      	add	r3, r1
 8016d06:	429a      	cmp	r2, r3
 8016d08:	d109      	bne.n	8016d1e <draw_main+0x216>
 8016d0a:	f89d 30a5 	ldrb.w	r3, [sp, #165]	; 0xa5
 8016d0e:	f3c3 0244 	ubfx	r2, r3, #1, #5
 8016d12:	f002 021d 	and.w	r2, r2, #29
 8016d16:	f362 0345 	bfi	r3, r2, #1, #5
 8016d1a:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
            if(btn_area.y2 == obj->coords.y2 - pbottom) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_BOTTOM;
 8016d1e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8016d22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016d24:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8016d28:	1a5b      	subs	r3, r3, r1
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	d109      	bne.n	8016d42 <draw_main+0x23a>
 8016d2e:	f89d 30a5 	ldrb.w	r3, [sp, #165]	; 0xa5
 8016d32:	f3c3 0244 	ubfx	r2, r3, #1, #5
 8016d36:	f002 021e 	and.w	r2, r2, #30
 8016d3a:	f362 0345 	bfi	r3, r2, #1, #5
 8016d3e:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016d42:	f8bd 6046 	ldrh.w	r6, [sp, #70]	; 0x46
 8016d46:	f8bd b042 	ldrh.w	fp, [sp, #66]	; 0x42
 8016d4a:	3601      	adds	r6, #1
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8016d4c:	f015 0520 	ands.w	r5, r5, #32
 8016d50:	b2b6      	uxth	r6, r6
 8016d52:	d008      	beq.n	8016d66 <draw_main+0x25e>
 8016d54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016d56:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
 8016d5a:	0559      	lsls	r1, r3, #21
            btn_area.y1 -= btn_height;
 8016d5c:	bf44      	itt	mi
 8016d5e:	ebc6 034b 	rsbmi	r3, r6, fp, lsl #1
 8016d62:	f8ad 3042 	strhmi.w	r3, [sp, #66]	; 0x42
        lv_draw_rect(draw_ctx, &draw_rect_dsc_act, &btn_area);
 8016d66:	aa10      	add	r2, sp, #64	; 0x40
 8016d68:	a922      	add	r1, sp, #136	; 0x88
 8016d6a:	4650      	mov	r0, sl
 8016d6c:	f7f4 fa6c 	bl	800b248 <lv_draw_rect>
        const char * txt = btnm->map_p[txt_i];
 8016d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d72:	9a06      	ldr	r2, [sp, #24]
 8016d74:	5899      	ldr	r1, [r3, r2]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 8016d76:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 8016d7a:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016d7c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016d80:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8016d84:	9106      	str	r1, [sp, #24]
 8016d86:	3301      	adds	r3, #1
 8016d88:	1a9b      	subs	r3, r3, r2
 8016d8a:	b21b      	sxth	r3, r3
 8016d8c:	9301      	str	r3, [sp, #4]
 8016d8e:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 8016d92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d94:	9300      	str	r3, [sp, #0]
 8016d96:	a80d      	add	r0, sp, #52	; 0x34
 8016d98:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8016d9c:	f7fe fa8e 	bl	80152bc <lv_txt_get_size>
 8016da0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016da4:	f8bd c040 	ldrh.w	ip, [sp, #64]	; 0x40
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 8016da8:	f9bd e034 	ldrsh.w	lr, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016dac:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 8016db0:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8016db4:	9906      	ldr	r1, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016db6:	3301      	adds	r3, #1
 8016db8:	eba3 030c 	sub.w	r3, r3, ip
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 8016dbc:	b21b      	sxth	r3, r3
 8016dbe:	eba3 030e 	sub.w	r3, r3, lr
 8016dc2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8016dc6:	eb0c 0c63 	add.w	ip, ip, r3, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016dca:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8016dce:	3301      	adds	r3, #1
 8016dd0:	1a9b      	subs	r3, r3, r2
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 8016dd2:	b21b      	sxth	r3, r3
 8016dd4:	1a1b      	subs	r3, r3, r0
 8016dd6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8016dda:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8016dde:	b29b      	uxth	r3, r3
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 8016de0:	fa1f fc8c 	uxth.w	ip, ip
        btn_area.y2 = btn_area.y1 + txt_size.y;
 8016de4:	4418      	add	r0, r3
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 8016de6:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
        btn_area.y2 = btn_area.y1 + txt_size.y;
 8016dea:	b280      	uxth	r0, r0
        btn_area.x2 = btn_area.x1 + txt_size.x;
 8016dec:	44f4      	add	ip, lr
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 8016dee:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        btn_area.x2 = btn_area.x1 + txt_size.x;
 8016df2:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
        btn_area.y2 = btn_area.y1 + txt_size.y;
 8016df6:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8016dfa:	b195      	cbz	r5, 8016e22 <draw_main+0x31a>
 8016dfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016dfe:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
 8016e02:	0552      	lsls	r2, r2, #21
 8016e04:	d50d      	bpl.n	8016e22 <draw_main+0x31a>
 8016e06:	eba6 060b 	sub.w	r6, r6, fp
            btn_area.y1 -= btn_height / 2;
 8016e0a:	f3c6 3bc0 	ubfx	fp, r6, #15, #1
 8016e0e:	fa0b f686 	sxtah	r6, fp, r6
 8016e12:	f3c6 064f 	ubfx	r6, r6, #1, #16
 8016e16:	1b9b      	subs	r3, r3, r6
            btn_area.y2 -= btn_height / 2;
 8016e18:	1b80      	subs	r0, r0, r6
            btn_area.y1 -= btn_height / 2;
 8016e1a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            btn_area.y2 -= btn_height / 2;
 8016e1e:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
        lv_draw_label(draw_ctx, &draw_label_dsc_act, &btn_area, txt, NULL);
 8016e22:	2300      	movs	r3, #0
 8016e24:	9300      	str	r3, [sp, #0]
 8016e26:	aa10      	add	r2, sp, #64	; 0x40
 8016e28:	460b      	mov	r3, r1
 8016e2a:	4650      	mov	r0, sl
 8016e2c:	a912      	add	r1, sp, #72	; 0x48
 8016e2e:	f7f2 fed1 	bl	8009bd4 <lv_draw_label>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8016e32:	aa3a      	add	r2, sp, #232	; 0xe8
 8016e34:	211b      	movs	r1, #27
 8016e36:	4620      	mov	r0, r4
 8016e38:	f7ec f9e8 	bl	800320c <lv_event_send>
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 8016e3c:	3701      	adds	r7, #1
 8016e3e:	e6cd      	b.n	8016bdc <draw_main+0xd4>
 8016e40:	fffb0000 	.word	0xfffb0000
 8016e44:	0802048c 	.word	0x0802048c
 8016e48:	08020470 	.word	0x08020470
        else if(btn_i == btnm->btn_id_sel) {
 8016e4c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016e4e:	42b3      	cmp	r3, r6
 8016e50:	f47f aee8 	bne.w	8016c24 <draw_main+0x11c>
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 8016e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e56:	b10b      	cbz	r3, 8016e5c <draw_main+0x354>
 8016e58:	f045 0520 	orr.w	r5, r5, #32
            if(state_ori & LV_STATE_FOCUSED) btn_state |= LV_STATE_FOCUSED;
 8016e5c:	f019 0f02 	tst.w	r9, #2
 8016e60:	bf18      	it	ne
 8016e62:	f045 0502 	orrne.w	r5, r5, #2
            if(state_ori & LV_STATE_FOCUS_KEY) btn_state |= LV_STATE_FOCUS_KEY;
 8016e66:	f019 0f04 	tst.w	r9, #4
 8016e6a:	bf18      	it	ne
 8016e6c:	f045 0504 	orrne.w	r5, r5, #4
            if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 8016e70:	f019 0f08 	tst.w	r9, #8
 8016e74:	bf18      	it	ne
 8016e76:	f045 0508 	orrne.w	r5, r5, #8
 8016e7a:	e6d3      	b.n	8016c24 <draw_main+0x11c>
            obj->skip_trans = 1;
 8016e7c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
            obj->state = btn_state;
 8016e80:	8425      	strh	r5, [r4, #32]
            obj->skip_trans = 1;
 8016e82:	f043 0304 	orr.w	r3, r3, #4
 8016e86:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 8016e8a:	a822      	add	r0, sp, #136	; 0x88
 8016e8c:	f7f4 f9b8 	bl	800b200 <lv_draw_rect_dsc_init>
            lv_draw_label_dsc_init(&draw_label_dsc_act);
 8016e90:	a812      	add	r0, sp, #72	; 0x48
 8016e92:	f7f2 fe81 	bl	8009b98 <lv_draw_label_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_act);
 8016e96:	aa22      	add	r2, sp, #136	; 0x88
 8016e98:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	f7ed fbc6 	bl	800462e <lv_obj_init_draw_rect_dsc>
            lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_act);
 8016ea2:	aa12      	add	r2, sp, #72	; 0x48
 8016ea4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8016ea8:	4620      	mov	r0, r4
 8016eaa:	f7ed fd09 	bl	80048c0 <lv_obj_init_draw_label_dsc>
            obj->skip_trans = 0;
 8016eae:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
            obj->state = state_ori;
 8016eb2:	f8a4 9020 	strh.w	r9, [r4, #32]
            obj->skip_trans = 0;
 8016eb6:	f36f 0382 	bfc	r3, #2, #1
 8016eba:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8016ebe:	e6d9      	b.n	8016c74 <draw_main+0x16c>
    obj->skip_trans = 0;
 8016ec0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8016ec4:	f36f 0382 	bfc	r3, #2, #1
 8016ec8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 8016ecc:	b04d      	add	sp, #308	; 0x134
 8016ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ed2:	bf00      	nop

08016ed4 <get_button_from_point>:
 * @param obj pointer to a button matrix object
 * @param p a point with absolute coordinates
 * @return the id of the button or LV_BTNMATRIX_BTN_NONE.
 */
static uint16_t get_button_from_point(lv_obj_t * obj, lv_point_t * p)
{
 8016ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed8:	ed2d 8b02 	vpush	{d8}
 8016edc:	b08b      	sub	sp, #44	; 0x2c
 8016ede:	4605      	mov	r5, r0
 8016ee0:	ee08 1a10 	vmov	s16, r1
    lv_area_t obj_cords;
    lv_area_t btn_area;
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;;
    uint16_t i;
    lv_obj_get_coords(obj, &obj_cords);
 8016ee4:	a906      	add	r1, sp, #24
 8016ee6:	f7ed fff5 	bl	8004ed4 <lv_obj_get_coords>

    lv_coord_t w = lv_obj_get_width(obj);
 8016eea:	4628      	mov	r0, r5
 8016eec:	f7ee f826 	bl	8004f3c <lv_obj_get_width>
 8016ef0:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(obj);
 8016ef2:	4628      	mov	r0, r5
 8016ef4:	f7ee f828 	bl	8004f48 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016ef8:	2212      	movs	r2, #18
 8016efa:	9003      	str	r0, [sp, #12]
 8016efc:	2100      	movs	r1, #0
 8016efe:	4628      	mov	r0, r5
 8016f00:	f7f0 fac4 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016f04:	2213      	movs	r2, #19
    return (lv_coord_t)v.num;
 8016f06:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016f0a:	2100      	movs	r1, #0
 8016f0c:	4628      	mov	r0, r5
 8016f0e:	f7f0 fabd 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016f12:	2210      	movs	r2, #16
    return (lv_coord_t)v.num;
 8016f14:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016f16:	2100      	movs	r1, #0
 8016f18:	4628      	mov	r0, r5
 8016f1a:	f7f0 fab7 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8016f1e:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 8016f20:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8016f22:	2100      	movs	r1, #0
 8016f24:	4628      	mov	r0, r5
 8016f26:	f7f0 fab1 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8016f2a:	2214      	movs	r2, #20
    return (lv_coord_t)v.num;
 8016f2c:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8016f30:	2100      	movs	r1, #0
 8016f32:	4628      	mov	r0, r5
 8016f34:	f7f0 faaa 	bl	800748c <lv_obj_get_style_prop>
 8016f38:	4604      	mov	r4, r0
    lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
    lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
    lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    lv_coord_t prow = lv_obj_get_style_pad_row(obj, LV_PART_MAIN);
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 8016f3a:	4628      	mov	r0, r5
 8016f3c:	f7ff fc94 	bl	8016868 <lv_obj_get_style_pad_column.constprop.0>

    /*Get the half gap. Button look larger with this value. (+1 for rounding error)*/
    prow = (prow / 2) + 1 + (prow & 1);
 8016f40:	f004 0301 	and.w	r3, r4, #1
 8016f44:	1c5a      	adds	r2, r3, #1
 8016f46:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 8016f4a:	fa03 f384 	sxtah	r3, r3, r4
 8016f4e:	eb02 0363 	add.w	r3, r2, r3, asr #1
    pcol = (pcol / 2) + 1 + (pcol & 1);
 8016f52:	f000 0401 	and.w	r4, r0, #1
 8016f56:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 8016f5a:	eb04 0462 	add.w	r4, r4, r2, asr #1
    prow = (prow / 2) + 1 + (prow & 1);
 8016f5e:	b21b      	sxth	r3, r3
    pcol = (pcol / 2) + 1 + (pcol & 1);
 8016f60:	3401      	adds	r4, #1

    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 8016f62:	2b0b      	cmp	r3, #11
    pcol = (pcol / 2) + 1 + (pcol & 1);
 8016f64:	b224      	sxth	r4, r4
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 8016f66:	bfa8      	it	ge
 8016f68:	230b      	movge	r3, #11
    pcol = LV_MIN(pcol, BTN_EXTRA_CLICK_AREA_MAX);
 8016f6a:	2c0b      	cmp	r4, #11
 8016f6c:	bfa8      	it	ge
 8016f6e:	240b      	movge	r4, #11
    pright = LV_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
 8016f70:	2e0b      	cmp	r6, #11
 8016f72:	bfa8      	it	ge
 8016f74:	260b      	movge	r6, #11
    ptop = LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8016f76:	2f0b      	cmp	r7, #11
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 8016f78:	9301      	str	r3, [sp, #4]
    ptop = LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8016f7a:	bfa8      	it	ge
 8016f7c:	270b      	movge	r7, #11
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);

    for(i = 0; i < btnm->btn_cnt; i++) {
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8016f7e:	4653      	mov	r3, sl
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 8016f80:	f1b8 0f0b 	cmp.w	r8, #11
 8016f84:	bfa8      	it	ge
 8016f86:	f04f 080b 	movge.w	r8, #11
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8016f8a:	2b0b      	cmp	r3, #11
 8016f8c:	bfa8      	it	ge
 8016f8e:	230b      	movge	r3, #11
        else btn_area.x1 += obj_cords.x1 - pcol;

        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
        else btn_area.y1 += obj_cords.y1 - prow;

        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8016f90:	eba9 0906 	sub.w	r9, r9, r6
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8016f94:	9304      	str	r3, [sp, #16]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8016f96:	f1a9 0302 	sub.w	r3, r9, #2
    for(i = 0; i < btnm->btn_cnt; i++) {
 8016f9a:	f04f 0b00 	mov.w	fp, #0
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8016f9e:	9305      	str	r3, [sp, #20]
    for(i = 0; i < btnm->btn_cnt; i++) {
 8016fa0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8016fa2:	fa1f f98b 	uxth.w	r9, fp
 8016fa6:	454b      	cmp	r3, r9
 8016fa8:	d951      	bls.n	801704e <get_button_from_point+0x17a>
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
 8016faa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8016fac:	fa1f f38b 	uxth.w	r3, fp
 8016fb0:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    dest->x1 = src->x1;
 8016fb4:	f932 1033 	ldrsh.w	r1, [r2, r3, lsl #3]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8016fb8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8016fbc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    dest->y1 = src->y1;
 8016fc0:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
    dest->x2 = src->x2;
 8016fc4:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
    dest->y2 = src->y2;
 8016fc8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016fcc:	9002      	str	r0, [sp, #8]
 8016fce:	458a      	cmp	sl, r1
 8016fd0:	bfaa      	itet	ge
 8016fd2:	9904      	ldrge	r1, [sp, #16]
        else btn_area.x1 += obj_cords.x1 - pcol;
 8016fd4:	1b11      	sublt	r1, r2, r4
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8016fd6:	1a51      	subge	r1, r2, r1
        else btn_area.x1 += obj_cords.x1 - pcol;
 8016fd8:	440b      	add	r3, r1
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8016fda:	4577      	cmp	r7, lr
        else btn_area.x1 += obj_cords.x1 - pcol;
 8016fdc:	b21b      	sxth	r3, r3
        else btn_area.y1 += obj_cords.y1 - prow;
 8016fde:	bfb8      	it	lt
 8016fe0:	9801      	ldrlt	r0, [sp, #4]
 8016fe2:	f8ad 3020 	strh.w	r3, [sp, #32]
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8016fe6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8016fea:	fa1f f18e 	uxth.w	r1, lr
        else btn_area.y1 += obj_cords.y1 - prow;
 8016fee:	bfb4      	ite	lt
 8016ff0:	eba3 0e00 	sublt.w	lr, r3, r0
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8016ff4:	eba3 0e07 	subge.w	lr, r3, r7
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8016ff8:	9805      	ldr	r0, [sp, #20]
        else btn_area.y1 += obj_cords.y1 - prow;
 8016ffa:	4471      	add	r1, lr
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8016ffc:	4584      	cmp	ip, r0
        else btn_area.y1 += obj_cords.y1 - prow;
 8016ffe:	b209      	sxth	r1, r1
 8017000:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8017004:	bfa8      	it	ge
 8017006:	1992      	addge	r2, r2, r6
 8017008:	fa1f f18c 	uxth.w	r1, ip
                                                                                   BTN_EXTRA_CLICK_AREA_MAX);  /*-2 for rounding error*/
        else btn_area.x2 += obj_cords.x1 + pcol;
 801700c:	bfb8      	it	lt
 801700e:	1912      	addlt	r2, r2, r4
 8017010:	440a      	add	r2, r1

        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 8017012:	9903      	ldr	r1, [sp, #12]
 8017014:	9802      	ldr	r0, [sp, #8]
 8017016:	eba1 0108 	sub.w	r1, r1, r8
 801701a:	3902      	subs	r1, #2
 801701c:	4288      	cmp	r0, r1
                                                                                    BTN_EXTRA_CLICK_AREA_MAX); /*-2 for rounding error*/
        else btn_area.y2 += obj_cords.y1 + prow;
 801701e:	bfb8      	it	lt
 8017020:	9901      	ldrlt	r1, [sp, #4]
        else btn_area.x2 += obj_cords.x1 + pcol;
 8017022:	b212      	sxth	r2, r2
 8017024:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 8017028:	f8bd 2008 	ldrh.w	r2, [sp, #8]
        else btn_area.y2 += obj_cords.y1 + prow;
 801702c:	bfb4      	ite	lt
 801702e:	185b      	addlt	r3, r3, r1
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 8017030:	4443      	addge	r3, r8
        else btn_area.y2 += obj_cords.y1 + prow;
 8017032:	4413      	add	r3, r2
 8017034:	b21b      	sxth	r3, r3

        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 8017036:	ee18 1a10 	vmov	r1, s16
 801703a:	2200      	movs	r2, #0
 801703c:	a808      	add	r0, sp, #32
 801703e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017042:	f7fb fc64 	bl	801290e <_lv_area_is_point_on>
 8017046:	f10b 0b01 	add.w	fp, fp, #1
 801704a:	2800      	cmp	r0, #0
 801704c:	d0a8      	beq.n	8016fa0 <get_button_from_point+0xcc>
            break;
        }
    }

    if(i == btnm->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 801704e:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8017050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017054:	454a      	cmp	r2, r9
 8017056:	bf08      	it	eq
 8017058:	4699      	moveq	r9, r3

    return i;
}
 801705a:	4648      	mov	r0, r9
 801705c:	b00b      	add	sp, #44	; 0x2c
 801705e:	ecbd 8b02 	vpop	{d8}
 8017062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017066 <invalidate_button_area>:

static void invalidate_button_area(const lv_obj_t * obj, uint16_t btn_idx)
{
 8017066:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 8017068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801706c:	4299      	cmp	r1, r3
{
 801706e:	b085      	sub	sp, #20
 8017070:	4605      	mov	r5, r0
 8017072:	460e      	mov	r6, r1
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 8017074:	d062      	beq.n	801713c <invalidate_button_area+0xd6>

    lv_area_t btn_area;
    lv_area_t obj_area;

    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;;
    if(btn_idx >= btnm->btn_cnt) return;
 8017076:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8017078:	428b      	cmp	r3, r1
 801707a:	d95f      	bls.n	801713c <invalidate_button_area+0xd6>

    lv_area_copy(&btn_area, &btnm->button_areas[btn_idx]);
 801707c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801707e:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    dest->x1 = src->x1;
 8017082:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
 8017086:	f8ad 2000 	strh.w	r2, [sp]
    dest->y1 = src->y1;
 801708a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801708e:	f8ad 2002 	strh.w	r2, [sp, #2]
    lv_obj_get_coords(obj, &obj_area);
 8017092:	a902      	add	r1, sp, #8
    dest->x2 = src->x2;
 8017094:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    dest->y2 = src->y2;
 8017098:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801709c:	f8ad 3006 	strh.w	r3, [sp, #6]
    dest->x2 = src->x2;
 80170a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80170a4:	f7ed ff16 	bl	8004ed4 <lv_obj_get_coords>
 80170a8:	2214      	movs	r2, #20
 80170aa:	2100      	movs	r1, #0
 80170ac:	4628      	mov	r0, r5
 80170ae:	f7f0 f9ed 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80170b2:	b207      	sxth	r7, r0

    /*The buttons might have outline and shadow so make the invalidation larger with the gaps between the buttons.
     *It assumes that the outline or shadow is smaller than the gaps*/
    lv_coord_t row_gap = lv_obj_get_style_pad_row(obj, LV_PART_MAIN);
    lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 80170b4:	4628      	mov	r0, r5
 80170b6:	f7ff fbd7 	bl	8016868 <lv_obj_get_style_pad_column.constprop.0>
 80170ba:	4604      	mov	r4, r0

    /*Be sure to have a minimal extra space if row/col_gap is small*/
    lv_coord_t dpi = lv_disp_get_dpi(lv_obj_get_disp(obj));
 80170bc:	4628      	mov	r0, r5
 80170be:	f7f0 ffb5 	bl	800802c <lv_obj_get_disp>
 80170c2:	f7fb f975 	bl	80123b0 <lv_disp_get_dpi>
    row_gap = LV_MAX(row_gap, dpi / 10);
 80170c6:	230a      	movs	r3, #10
 80170c8:	fb90 f3f3 	sdiv	r3, r0, r3
 80170cc:	b21b      	sxth	r3, r3
 80170ce:	429f      	cmp	r7, r3
 80170d0:	bfb8      	it	lt
 80170d2:	461f      	movlt	r7, r3
    col_gap = LV_MAX(col_gap, dpi / 10);

    /*Convert relative coordinates to absolute*/
    btn_area.x1 += obj_area.x1 - row_gap;
 80170d4:	f8bd c008 	ldrh.w	ip, [sp, #8]
 80170d8:	f8bd 1000 	ldrh.w	r1, [sp]
    btn_area.y1 += obj_area.y1 - col_gap;
 80170dc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    col_gap = LV_MAX(col_gap, dpi / 10);
 80170e0:	42a3      	cmp	r3, r4
 80170e2:	bfb8      	it	lt
 80170e4:	4623      	movlt	r3, r4
    btn_area.x2 += obj_area.x1 + row_gap;
 80170e6:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    btn_area.x1 += obj_area.x1 - row_gap;
 80170ea:	b2ba      	uxth	r2, r7
 80170ec:	4461      	add	r1, ip
 80170ee:	1a89      	subs	r1, r1, r2
    btn_area.x2 += obj_area.x1 + row_gap;
 80170f0:	44a4      	add	ip, r4
 80170f2:	4494      	add	ip, r2
    btn_area.x1 += obj_area.x1 - row_gap;
 80170f4:	f8ad 1000 	strh.w	r1, [sp]
    btn_area.y2 += obj_area.y1 + col_gap;
 80170f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    btn_area.y1 += obj_area.y1 - col_gap;
 80170fc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    btn_area.x2 += obj_area.x1 + row_gap;
 8017100:	f8ad c004 	strh.w	ip, [sp, #4]
    btn_area.y1 += obj_area.y1 - col_gap;
 8017104:	b29b      	uxth	r3, r3
    btn_area.y2 += obj_area.y1 + col_gap;
 8017106:	4402      	add	r2, r0
    btn_area.y1 += obj_area.y1 - col_gap;
 8017108:	4401      	add	r1, r0
 801710a:	1ac9      	subs	r1, r1, r3
    btn_area.y2 += obj_area.y1 + col_gap;
 801710c:	4413      	add	r3, r2

    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 801710e:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
    btn_area.y1 += obj_area.y1 - col_gap;
 8017110:	b289      	uxth	r1, r1
    btn_area.y2 += obj_area.y1 + col_gap;
 8017112:	b29b      	uxth	r3, r3
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8017114:	42b2      	cmp	r2, r6
    btn_area.y1 += obj_area.y1 - col_gap;
 8017116:	f8ad 1002 	strh.w	r1, [sp, #2]
    btn_area.y2 += obj_area.y1 + col_gap;
 801711a:	f8ad 3006 	strh.w	r3, [sp, #6]
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 801711e:	d109      	bne.n	8017134 <invalidate_button_area+0xce>
 8017120:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8017122:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8017126:	0552      	lsls	r2, r2, #21
        /*Push up the upper boundary of the btn area to also invalidate the popover*/
        btn_area.y1 -= lv_area_get_height(&btn_area);
 8017128:	bf42      	ittt	mi
 801712a:	43db      	mvnmi	r3, r3
 801712c:	eb03 0341 	addmi.w	r3, r3, r1, lsl #1
 8017130:	f8ad 3002 	strhmi.w	r3, [sp, #2]
    }

    lv_obj_invalidate_area(obj, &btn_area);
 8017134:	4669      	mov	r1, sp
 8017136:	4628      	mov	r0, r5
 8017138:	f7ee f8f5 	bl	8005326 <lv_obj_invalidate_area>
}
 801713c:	b005      	add	sp, #20
 801713e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017140 <lv_btnmatrix_set_map>:
    if(map == NULL) return;
 8017140:	b109      	cbz	r1, 8017146 <lv_btnmatrix_set_map+0x6>
 8017142:	f7ff bb99 	b.w	8016878 <lv_btnmatrix_set_map.part.0>
}
 8017146:	4770      	bx	lr

08017148 <lv_btnmatrix_clear_btn_ctrl>:
{
 8017148:	b570      	push	{r4, r5, r6, lr}
 801714a:	4615      	mov	r5, r2
    if(btn_id >= btnm->btn_cnt) return;
 801714c:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801714e:	428a      	cmp	r2, r1
{
 8017150:	4604      	mov	r4, r0
    if(btn_id >= btnm->btn_cnt) return;
 8017152:	d90f      	bls.n	8017174 <lv_btnmatrix_clear_btn_ctrl+0x2c>
    btnm->ctrl_bits[btn_id] &= (~ctrl);
 8017154:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8017156:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 801715a:	ea22 0205 	bic.w	r2, r2, r5
 801715e:	f826 2011 	strh.w	r2, [r6, r1, lsl #1]
    invalidate_button_area(obj, btn_id);
 8017162:	f7ff ff80 	bl	8017066 <invalidate_button_area>
    if(ctrl & LV_BTNMATRIX_CTRL_POPOVER) {
 8017166:	056b      	lsls	r3, r5, #21
 8017168:	d504      	bpl.n	8017174 <lv_btnmatrix_clear_btn_ctrl+0x2c>
        lv_obj_refresh_ext_draw_size(obj);
 801716a:	4620      	mov	r0, r4
}
 801716c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_refresh_ext_draw_size(obj);
 8017170:	f7ed bd03 	b.w	8004b7a <lv_obj_refresh_ext_draw_size>
}
 8017174:	bd70      	pop	{r4, r5, r6, pc}

08017176 <lv_btnmatrix_clear_btn_ctrl_all>:
{
 8017176:	b570      	push	{r4, r5, r6, lr}
 8017178:	4604      	mov	r4, r0
 801717a:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 801717c:	2500      	movs	r5, #0
 801717e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017180:	b2a9      	uxth	r1, r5
 8017182:	428b      	cmp	r3, r1
 8017184:	d800      	bhi.n	8017188 <lv_btnmatrix_clear_btn_ctrl_all+0x12>
}
 8017186:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_clear_btn_ctrl(obj, i, ctrl);
 8017188:	4632      	mov	r2, r6
 801718a:	4620      	mov	r0, r4
 801718c:	f7ff ffdc 	bl	8017148 <lv_btnmatrix_clear_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 8017190:	3501      	adds	r5, #1
 8017192:	e7f4      	b.n	801717e <lv_btnmatrix_clear_btn_ctrl_all+0x8>

08017194 <lv_btnmatrix_set_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return;
 8017194:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8017196:	428b      	cmp	r3, r1
{
 8017198:	b570      	push	{r4, r5, r6, lr}
 801719a:	4604      	mov	r4, r0
 801719c:	460d      	mov	r5, r1
 801719e:	4616      	mov	r6, r2
    if(btn_id >= btnm->btn_cnt) return;
 80171a0:	d91a      	bls.n	80171d8 <lv_btnmatrix_set_btn_ctrl+0x44>
    if(btnm->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECKED)) {
 80171a2:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80171a6:	07d9      	lsls	r1, r3, #31
 80171a8:	d505      	bpl.n	80171b6 <lv_btnmatrix_set_btn_ctrl+0x22>
 80171aa:	05f2      	lsls	r2, r6, #23
 80171ac:	d503      	bpl.n	80171b6 <lv_btnmatrix_set_btn_ctrl+0x22>
        lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 80171ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80171b2:	f7ff ffe0 	bl	8017176 <lv_btnmatrix_clear_btn_ctrl_all>
    btnm->ctrl_bits[btn_id] |= ctrl;
 80171b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80171b8:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80171bc:	4333      	orrs	r3, r6
 80171be:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
    invalidate_button_area(obj, btn_id);
 80171c2:	4629      	mov	r1, r5
 80171c4:	4620      	mov	r0, r4
 80171c6:	f7ff ff4e 	bl	8017066 <invalidate_button_area>
    if(ctrl & LV_BTNMATRIX_CTRL_POPOVER) {
 80171ca:	0573      	lsls	r3, r6, #21
 80171cc:	d504      	bpl.n	80171d8 <lv_btnmatrix_set_btn_ctrl+0x44>
        lv_obj_refresh_ext_draw_size(obj);
 80171ce:	4620      	mov	r0, r4
}
 80171d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_refresh_ext_draw_size(obj);
 80171d4:	f7ed bcd1 	b.w	8004b7a <lv_obj_refresh_ext_draw_size>
}
 80171d8:	bd70      	pop	{r4, r5, r6, pc}

080171da <lv_btnmatrix_has_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return false;
 80171da:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80171dc:	428b      	cmp	r3, r1
 80171de:	d908      	bls.n	80171f2 <lv_btnmatrix_has_btn_ctrl+0x18>
    return ((btnm->ctrl_bits[btn_id] & ctrl) == ctrl) ? true : false;
 80171e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80171e2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80171e6:	ea32 0303 	bics.w	r3, r2, r3
 80171ea:	bf0c      	ite	eq
 80171ec:	2001      	moveq	r0, #1
 80171ee:	2000      	movne	r0, #0
 80171f0:	4770      	bx	lr
    if(btn_id >= btnm->btn_cnt) return false;
 80171f2:	2000      	movs	r0, #0
}
 80171f4:	4770      	bx	lr

080171f6 <make_one_button_checked>:
 * It simply clears the toggle flag on other buttons.
 * @param obj Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_checked(lv_obj_t * obj, uint16_t btn_idx)
{
 80171f6:	b570      	push	{r4, r5, r6, lr}
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 80171f8:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 80171fc:	4604      	mov	r4, r0
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 80171fe:	f7ff ffec 	bl	80171da <lv_btnmatrix_has_btn_ctrl>
{
 8017202:	460d      	mov	r5, r1
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 8017204:	4606      	mov	r6, r0

    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 8017206:	4611      	mov	r1, r2
 8017208:	4620      	mov	r0, r4
 801720a:	f7ff ffb4 	bl	8017176 <lv_btnmatrix_clear_btn_ctrl_all>

    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801720e:	b13e      	cbz	r6, 8017220 <make_one_button_checked+0x2a>
 8017210:	4629      	mov	r1, r5
 8017212:	4620      	mov	r0, r4
 8017214:	f44f 7280 	mov.w	r2, #256	; 0x100
}
 8017218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801721c:	f7ff bfba 	b.w	8017194 <lv_btnmatrix_set_btn_ctrl>
}
 8017220:	bd70      	pop	{r4, r5, r6, pc}
	...

08017224 <lv_btnmatrix_event>:
{
 8017224:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8017228:	4894      	ldr	r0, [pc, #592]	; (801747c <lv_btnmatrix_event+0x258>)
{
 801722a:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801722c:	f7eb ff26 	bl	800307c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8017230:	2801      	cmp	r0, #1
 8017232:	d11c      	bne.n	801726e <lv_btnmatrix_event+0x4a>
    lv_event_code_t code = lv_event_get_code(e);
 8017234:	4630      	mov	r0, r6
 8017236:	f7ec f80d 	bl	8003254 <lv_event_get_code>
 801723a:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801723c:	4630      	mov	r0, r6
 801723e:	f7ec f805 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8017242:	2d13      	cmp	r5, #19
    lv_obj_t * obj = lv_event_get_target(e);
 8017244:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8017246:	d129      	bne.n	801729c <lv_btnmatrix_event+0x78>
 */
static bool has_popovers_in_top_row(lv_obj_t * obj)
{
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;

    if(btnm->row_cnt <= 0) {
 8017248:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801724a:	b183      	cbz	r3, 801726e <lv_btnmatrix_event+0x4a>
        return false;
    }

    const char ** map_row = btnm->map_p;
 801724c:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
    uint16_t btn_cnt = 0;

    while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8017250:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8017480 <lv_btnmatrix_event+0x25c>
 8017254:	2700      	movs	r7, #0
 8017256:	fa1f f887 	uxth.w	r8, r7
 801725a:	f859 5028 	ldr.w	r5, [r9, r8, lsl #2]
 801725e:	b135      	cbz	r5, 801726e <lv_btnmatrix_event+0x4a>
 8017260:	4651      	mov	r1, sl
 8017262:	4628      	mov	r0, r5
 8017264:	f7e8 ffb4 	bl	80001d0 <strcmp>
 8017268:	b108      	cbz	r0, 801726e <lv_btnmatrix_event+0x4a>
 801726a:	782b      	ldrb	r3, [r5, #0]
 801726c:	b913      	cbnz	r3, 8017274 <lv_btnmatrix_event+0x50>
}
 801726e:	b002      	add	sp, #8
 8017270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(button_is_popover(btnm->ctrl_bits[btn_cnt])) {
 8017274:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_POPOVER) ? true : false;
 8017276:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
        if(button_is_popover(btnm->ctrl_bits[btn_cnt])) {
 801727a:	0559      	lsls	r1, r3, #21
 801727c:	f107 0701 	add.w	r7, r7, #1
 8017280:	d5e9      	bpl.n	8017256 <lv_btnmatrix_event+0x32>
            lv_coord_t s = btnm->row_cnt > 0 ? lv_obj_get_content_height(obj) / btnm->row_cnt : 0;
 8017282:	4620      	mov	r0, r4
 8017284:	f7ed fe7c 	bl	8004f80 <lv_obj_get_content_height>
 8017288:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 801728a:	fb90 f1f1 	sdiv	r1, r0, r1
            lv_event_set_ext_draw_size(e, s);
 801728e:	4630      	mov	r0, r6
 8017290:	b209      	sxth	r1, r1
}
 8017292:	b002      	add	sp, #8
 8017294:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            lv_event_set_ext_draw_size(e, s);
 8017298:	f7ec b832 	b.w	8003300 <lv_event_set_ext_draw_size>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801729c:	2d2a      	cmp	r5, #42	; 0x2a
 801729e:	d105      	bne.n	80172ac <lv_btnmatrix_event+0x88>
        lv_btnmatrix_set_map(obj, btnm->map_p);
 80172a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
}
 80172a2:	b002      	add	sp, #8
 80172a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        lv_btnmatrix_set_map(obj, btnm->map_p);
 80172a8:	f7ff bf4a 	b.w	8017140 <lv_btnmatrix_set_map>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80172ac:	2d29      	cmp	r5, #41	; 0x29
 80172ae:	d0f7      	beq.n	80172a0 <lv_btnmatrix_event+0x7c>
    else if(code == LV_EVENT_PRESSED) {
 80172b0:	2d01      	cmp	r5, #1
 80172b2:	d13e      	bne.n	8017332 <lv_btnmatrix_event+0x10e>
        void * param = lv_event_get_param(e);
 80172b4:	4630      	mov	r0, r6
 80172b6:	f7eb ffd1 	bl	800325c <lv_event_get_param>
        invalidate_button_area(obj, btnm->btn_id_sel);
 80172ba:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
        void * param = lv_event_get_param(e);
 80172bc:	4605      	mov	r5, r0
        invalidate_button_area(obj, btnm->btn_id_sel);
 80172be:	4620      	mov	r0, r4
 80172c0:	f7ff fed1 	bl	8017066 <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80172c4:	f7ec f9b6 	bl	8003634 <lv_indev_get_act>
 80172c8:	f7ec f9ba 	bl	8003640 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 80172cc:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 80172d0:	2801      	cmp	r0, #1
 80172d2:	d117      	bne.n	8017304 <lv_btnmatrix_event+0xe0>
            lv_indev_get_point(param, &p);
 80172d4:	4669      	mov	r1, sp
 80172d6:	4628      	mov	r0, r5
 80172d8:	f7ec fa13 	bl	8003702 <lv_indev_get_point>
            btn_pr = get_button_from_point(obj, &p);
 80172dc:	4669      	mov	r1, sp
 80172de:	4620      	mov	r0, r4
 80172e0:	f7ff fdf8 	bl	8016ed4 <get_button_from_point>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 80172e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80172e8:	4298      	cmp	r0, r3
            btn_pr = get_button_from_point(obj, &p);
 80172ea:	4601      	mov	r1, r0
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 80172ec:	d00a      	beq.n	8017304 <lv_btnmatrix_event+0xe0>
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 80172ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 80172f0:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 80172f4:	065a      	lsls	r2, r3, #25
 80172f6:	d405      	bmi.n	8017304 <lv_btnmatrix_event+0xe0>
 80172f8:	06df      	lsls	r7, r3, #27
 80172fa:	d403      	bmi.n	8017304 <lv_btnmatrix_event+0xe0>
                    btnm->btn_id_sel = btn_pr;
 80172fc:	86a0      	strh	r0, [r4, #52]	; 0x34
                    invalidate_button_area(obj, btnm->btn_id_sel); /*Invalidate the new area*/
 80172fe:	4620      	mov	r0, r4
 8017300:	f7ff feb1 	bl	8017066 <invalidate_button_area>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 8017304:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8017306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801730a:	429a      	cmp	r2, r3
 801730c:	d0af      	beq.n	801726e <lv_btnmatrix_event+0x4a>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801730e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 8017310:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8017314:	059e      	lsls	r6, r3, #22
 8017316:	d4aa      	bmi.n	801726e <lv_btnmatrix_event+0x4a>
 8017318:	055d      	lsls	r5, r3, #21
 801731a:	d4a8      	bmi.n	801726e <lv_btnmatrix_event+0x4a>
               button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801731c:	0658      	lsls	r0, r3, #25
 801731e:	d4a6      	bmi.n	801726e <lv_btnmatrix_event+0x4a>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8017320:	06d9      	lsls	r1, r3, #27
 8017322:	d4a4      	bmi.n	801726e <lv_btnmatrix_event+0x4a>
                uint32_t b = btnm->btn_id_sel;
 8017324:	9201      	str	r2, [sp, #4]
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 8017326:	aa01      	add	r2, sp, #4
 8017328:	211c      	movs	r1, #28
 801732a:	4620      	mov	r0, r4
 801732c:	f7eb ff6e 	bl	800320c <lv_event_send>
                    if(res != LV_RES_OK) return;
 8017330:	e79d      	b.n	801726e <lv_btnmatrix_event+0x4a>
    else if(code == LV_EVENT_PRESSING) {
 8017332:	2d02      	cmp	r5, #2
 8017334:	d143      	bne.n	80173be <lv_btnmatrix_event+0x19a>
        void * param = lv_event_get_param(e);
 8017336:	4630      	mov	r0, r6
 8017338:	f7eb ff90 	bl	800325c <lv_event_get_param>
 801733c:	4606      	mov	r6, r0
        lv_indev_t * indev = lv_indev_get_act();
 801733e:	f7ec f979 	bl	8003634 <lv_indev_get_act>
 8017342:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8017344:	f7ec f97c 	bl	8003640 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return;
 8017348:	2804      	cmp	r0, #4
 801734a:	d090      	beq.n	801726e <lv_btnmatrix_event+0x4a>
 801734c:	2802      	cmp	r0, #2
 801734e:	d08e      	beq.n	801726e <lv_btnmatrix_event+0x4a>
        lv_indev_get_point(indev, &p);
 8017350:	4628      	mov	r0, r5
 8017352:	4669      	mov	r1, sp
 8017354:	f7ec f9d5 	bl	8003702 <lv_indev_get_point>
        btn_pr = get_button_from_point(obj, &p);
 8017358:	4669      	mov	r1, sp
 801735a:	4620      	mov	r0, r4
 801735c:	f7ff fdba 	bl	8016ed4 <get_button_from_point>
        if(btn_pr != btnm->btn_id_sel) {
 8017360:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8017362:	4281      	cmp	r1, r0
        btn_pr = get_button_from_point(obj, &p);
 8017364:	4605      	mov	r5, r0
        if(btn_pr != btnm->btn_id_sel) {
 8017366:	d082      	beq.n	801726e <lv_btnmatrix_event+0x4a>
            if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 8017368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801736c:	4299      	cmp	r1, r3
 801736e:	d002      	beq.n	8017376 <lv_btnmatrix_event+0x152>
                invalidate_button_area(obj, btnm->btn_id_sel);
 8017370:	4620      	mov	r0, r4
 8017372:	f7ff fe78 	bl	8017066 <invalidate_button_area>
            btnm->btn_id_sel = btn_pr;
 8017376:	86a5      	strh	r5, [r4, #52]	; 0x34
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 8017378:	4630      	mov	r0, r6
 801737a:	f7ec f9b5 	bl	80036e8 <lv_indev_reset_long_press>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 801737e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017382:	429d      	cmp	r5, r3
 8017384:	f43f af73 	beq.w	801726e <lv_btnmatrix_event+0x4a>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 8017388:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801738a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 801738e:	065a      	lsls	r2, r3, #25
 8017390:	f53f af6d 	bmi.w	801726e <lv_btnmatrix_event+0x4a>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 8017394:	06db      	lsls	r3, r3, #27
 8017396:	f53f af6a 	bmi.w	801726e <lv_btnmatrix_event+0x4a>
                invalidate_button_area(obj, btn_pr);
 801739a:	4629      	mov	r1, r5
 801739c:	4620      	mov	r0, r4
 801739e:	f7ff fe62 	bl	8017066 <invalidate_button_area>
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 80173a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 80173a4:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 80173a8:	0597      	lsls	r7, r2, #22
 80173aa:	f53f af60 	bmi.w	801726e <lv_btnmatrix_event+0x4a>
                   button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == false) {
 80173ae:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_POPOVER) ? true : false;
 80173b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 80173b4:	055e      	lsls	r6, r3, #21
 80173b6:	f53f af5a 	bmi.w	801726e <lv_btnmatrix_event+0x4a>
                    uint32_t b = btn_pr;
 80173ba:	9501      	str	r5, [sp, #4]
 80173bc:	e7b3      	b.n	8017326 <lv_btnmatrix_event+0x102>
    else if(code == LV_EVENT_RELEASED) {
 80173be:	2d08      	cmp	r5, #8
 80173c0:	d13d      	bne.n	801743e <lv_btnmatrix_event+0x21a>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 80173c2:	8e82      	ldrh	r2, [r0, #52]	; 0x34
 80173c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80173c8:	429a      	cmp	r2, r3
 80173ca:	d02e      	beq.n	801742a <lv_btnmatrix_event+0x206>
            if(button_is_checkable(btnm->ctrl_bits[btnm->btn_id_sel]) &&
 80173cc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80173ce:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 80173d2:	0618      	lsls	r0, r3, #24
 80173d4:	d514      	bpl.n	8017400 <lv_btnmatrix_event+0x1dc>
 80173d6:	065f      	lsls	r7, r3, #25
 80173d8:	d412      	bmi.n	8017400 <lv_btnmatrix_event+0x1dc>
                if(button_get_checked(btnm->ctrl_bits[btnm->btn_id_sel]) && !btnm->one_check) {
 80173da:	05de      	lsls	r6, r3, #23
 80173dc:	d52c      	bpl.n	8017438 <lv_btnmatrix_event+0x214>
 80173de:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 80173e2:	07c5      	lsls	r5, r0, #31
 80173e4:	d428      	bmi.n	8017438 <lv_btnmatrix_event+0x214>
                    btnm->ctrl_bits[btnm->btn_id_sel] &= (~LV_BTNMATRIX_CTRL_CHECKED);
 80173e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80173ea:	b29b      	uxth	r3, r3
 80173ec:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
                if(btnm->one_check) make_one_button_checked(obj, btnm->btn_id_sel);
 80173f0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80173f4:	07d8      	lsls	r0, r3, #31
 80173f6:	d503      	bpl.n	8017400 <lv_btnmatrix_event+0x1dc>
 80173f8:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80173fa:	4620      	mov	r0, r4
 80173fc:	f7ff fefb 	bl	80171f6 <make_one_button_checked>
            if((button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true ||
 8017400:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8017402:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 8017404:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            if((button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true ||
 8017408:	0599      	lsls	r1, r3, #22
 801740a:	d401      	bmi.n	8017410 <lv_btnmatrix_event+0x1ec>
 801740c:	055f      	lsls	r7, r3, #21
 801740e:	d50c      	bpl.n	801742a <lv_btnmatrix_event+0x206>
                button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == true) &&
 8017410:	065e      	lsls	r6, r3, #25
 8017412:	d40a      	bmi.n	801742a <lv_btnmatrix_event+0x206>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8017414:	06dd      	lsls	r5, r3, #27
 8017416:	d408      	bmi.n	801742a <lv_btnmatrix_event+0x206>
                uint32_t b = btnm->btn_id_sel;
 8017418:	9201      	str	r2, [sp, #4]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801741a:	211c      	movs	r1, #28
 801741c:	aa01      	add	r2, sp, #4
 801741e:	4620      	mov	r0, r4
 8017420:	f7eb fef4 	bl	800320c <lv_event_send>
                if(res != LV_RES_OK) return;
 8017424:	2801      	cmp	r0, #1
 8017426:	f47f af22 	bne.w	801726e <lv_btnmatrix_event+0x4a>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801742a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 801742c:	4620      	mov	r0, r4
}
 801742e:	b002      	add	sp, #8
 8017430:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        invalidate_button_area(obj, btnm->btn_id_sel);
 8017434:	f7ff be17 	b.w	8017066 <invalidate_button_area>
                    btnm->ctrl_bits[btnm->btn_id_sel] |= LV_BTNMATRIX_CTRL_CHECKED;
 8017438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801743c:	e7d6      	b.n	80173ec <lv_btnmatrix_event+0x1c8>
    else if(code == LV_EVENT_LONG_PRESSED_REPEAT) {
 801743e:	2d06      	cmp	r5, #6
 8017440:	d113      	bne.n	801746a <lv_btnmatrix_event+0x246>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 8017442:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8017444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017448:	4293      	cmp	r3, r2
 801744a:	f43f af10 	beq.w	801726e <lv_btnmatrix_event+0x4a>
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801744e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
 8017450:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8017454:	0690      	lsls	r0, r2, #26
 8017456:	f53f af0a 	bmi.w	801726e <lv_btnmatrix_event+0x4a>
 801745a:	0651      	lsls	r1, r2, #25
 801745c:	f53f af07 	bmi.w	801726e <lv_btnmatrix_event+0x4a>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8017460:	06d2      	lsls	r2, r2, #27
 8017462:	f53f af04 	bmi.w	801726e <lv_btnmatrix_event+0x4a>
                uint32_t b = btnm->btn_id_sel;
 8017466:	9301      	str	r3, [sp, #4]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 8017468:	e75d      	b.n	8017326 <lv_btnmatrix_event+0x102>
    else if(code == LV_EVENT_PRESS_LOST) {
 801746a:	2d03      	cmp	r5, #3
 801746c:	d10a      	bne.n	8017484 <lv_btnmatrix_event+0x260>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801746e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8017470:	f7ff fdf9 	bl	8017066 <invalidate_button_area>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 8017474:	f64f 73ff 	movw	r3, #65535	; 0xffff
                btnm->btn_id_sel = b;
 8017478:	86a3      	strh	r3, [r4, #52]	; 0x34
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 801747a:	e6f8      	b.n	801726e <lv_btnmatrix_event+0x4a>
 801747c:	0802048c 	.word	0x0802048c
 8017480:	08020470 	.word	0x08020470
    else if(code == LV_EVENT_FOCUSED) {
 8017484:	2d0e      	cmp	r5, #14
 8017486:	f040 810a 	bne.w	801769e <lv_btnmatrix_event+0x47a>
        lv_indev_t * indev = lv_event_get_param(e);
 801748a:	4630      	mov	r0, r6
 801748c:	f7eb fee6 	bl	800325c <lv_event_get_param>
 8017490:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8017492:	f7ec f8d5 	bl	8003640 <lv_indev_get_type>
 8017496:	4605      	mov	r5, r0
        if(indev == NULL) {
 8017498:	b92e      	cbnz	r6, 80174a6 <lv_btnmatrix_event+0x282>
            indev = lv_indev_get_next(NULL);
 801749a:	4630      	mov	r0, r6
 801749c:	f7fa ffaa 	bl	80123f4 <lv_indev_get_next>
            indev_type = lv_indev_get_type(indev);
 80174a0:	f7ec f8ce 	bl	8003640 <lv_indev_get_type>
 80174a4:	4605      	mov	r5, r0
        bool editing = lv_group_get_editing(lv_obj_get_group(obj));
 80174a6:	4620      	mov	r0, r4
 80174a8:	f7ec fdce 	bl	8004048 <lv_obj_get_group>
 80174ac:	f7ec f8bd 	bl	800362a <lv_group_get_editing>
        if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 80174b0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80174b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174b6:	429a      	cmp	r2, r3
 80174b8:	f47f aed9 	bne.w	801726e <lv_btnmatrix_event+0x4a>
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 80174bc:	2d02      	cmp	r5, #2
 80174be:	d005      	beq.n	80174cc <lv_btnmatrix_event+0x2a8>
 80174c0:	2d04      	cmp	r5, #4
 80174c2:	f47f aed4 	bne.w	801726e <lv_btnmatrix_event+0x4a>
 80174c6:	2800      	cmp	r0, #0
 80174c8:	f43f aed1 	beq.w	801726e <lv_btnmatrix_event+0x4a>
                if(btnm->one_check) {
 80174cc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) ||
 80174d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
                if(btnm->one_check) {
 80174d2:	f013 0301 	ands.w	r3, r3, #1
 80174d6:	d111      	bne.n	80174fc <lv_btnmatrix_event+0x2d8>
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80174d8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 80174dc:	06d0      	lsls	r0, r2, #27
 80174de:	d401      	bmi.n	80174e4 <lv_btnmatrix_event+0x2c0>
 80174e0:	0657      	lsls	r7, r2, #25
 80174e2:	d5c9      	bpl.n	8017478 <lv_btnmatrix_event+0x254>
 80174e4:	3301      	adds	r3, #1
 80174e6:	e7f7      	b.n	80174d8 <lv_btnmatrix_event+0x2b4>
                          button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 80174e8:	3301      	adds	r3, #1
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80174ea:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) ||
 80174ee:	06d7      	lsls	r7, r2, #27
 80174f0:	d4fa      	bmi.n	80174e8 <lv_btnmatrix_event+0x2c4>
 80174f2:	0656      	lsls	r6, r2, #25
 80174f4:	d4f8      	bmi.n	80174e8 <lv_btnmatrix_event+0x2c4>
 80174f6:	05d5      	lsls	r5, r2, #23
 80174f8:	d5f6      	bpl.n	80174e8 <lv_btnmatrix_event+0x2c4>
 80174fa:	e7bd      	b.n	8017478 <lv_btnmatrix_event+0x254>
                uint32_t b = 0;
 80174fc:	2300      	movs	r3, #0
 80174fe:	e7f4      	b.n	80174ea <lv_btnmatrix_event+0x2c6>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(obj, btnm->btn_id_sel);
 8017500:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8017502:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8017506:	42a9      	cmp	r1, r5
 8017508:	d002      	beq.n	8017510 <lv_btnmatrix_event+0x2ec>
 801750a:	4620      	mov	r0, r4
 801750c:	f7ff fdab 	bl	8017066 <invalidate_button_area>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 8017510:	86a5      	strh	r5, [r4, #52]	; 0x34
 8017512:	e6ac      	b.n	801726e <lv_btnmatrix_event+0x4a>
        else if(c == LV_KEY_LEFT) {
 8017514:	2b14      	cmp	r3, #20
 8017516:	d11c      	bne.n	8017552 <lv_btnmatrix_event+0x32e>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) btnm->btn_id_sel = 0;
 8017518:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801751a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801751e:	429a      	cmp	r2, r3
 8017520:	bf04      	itt	eq
 8017522:	2300      	moveq	r3, #0
 8017524:	86a3      	strheq	r3, [r4, #52]	; 0x34
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 8017526:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017528:	b903      	cbnz	r3, 801752c <lv_btnmatrix_event+0x308>
 801752a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801752c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 801752e:	3b01      	subs	r3, #1
 8017530:	b29b      	uxth	r3, r3
 8017532:	86a3      	strh	r3, [r4, #52]	; 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8017534:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8017536:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801753a:	06d7      	lsls	r7, r2, #27
 801753c:	d402      	bmi.n	8017544 <lv_btnmatrix_event+0x320>
 801753e:	0656      	lsls	r6, r2, #25
 8017540:	f57f af73 	bpl.w	801742a <lv_btnmatrix_event+0x206>
                if(btnm->btn_id_sel > 0) btnm->btn_id_sel--;
 8017544:	b11b      	cbz	r3, 801754e <lv_btnmatrix_event+0x32a>
                else btnm->btn_id_sel = btnm->btn_cnt - 1;
 8017546:	3b01      	subs	r3, #1
 8017548:	b29b      	uxth	r3, r3
 801754a:	86a3      	strh	r3, [r4, #52]	; 0x34
 801754c:	e7f2      	b.n	8017534 <lv_btnmatrix_event+0x310>
 801754e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017550:	e7f9      	b.n	8017546 <lv_btnmatrix_event+0x322>
        else if(c == LV_KEY_DOWN) {
 8017552:	2b12      	cmp	r3, #18
 8017554:	d14a      	bne.n	80175ec <lv_btnmatrix_event+0x3c8>
            lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 8017556:	4620      	mov	r0, r4
 8017558:	f7ff f986 	bl	8016868 <lv_obj_get_style_pad_column.constprop.0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 801755c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801755e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017562:	429a      	cmp	r2, r3
 8017564:	d112      	bne.n	801758c <lv_btnmatrix_event+0x368>
                btnm->btn_id_sel = 0;
 8017566:	2100      	movs	r1, #0
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8017568:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                btnm->btn_id_sel = 0;
 801756a:	86a1      	strh	r1, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801756c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801756e:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8017572:	06d5      	lsls	r5, r2, #27
 8017574:	d402      	bmi.n	801757c <lv_btnmatrix_event+0x358>
 8017576:	0652      	lsls	r2, r2, #25
 8017578:	f57f af57 	bpl.w	801742a <lv_btnmatrix_event+0x206>
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801757c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
                    btnm->btn_id_sel++;
 801757e:	3301      	adds	r3, #1
 8017580:	b29b      	uxth	r3, r3
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8017582:	429a      	cmp	r2, r3
                    btnm->btn_id_sel++;
 8017584:	86a3      	strh	r3, [r4, #52]	; 0x34
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8017586:	bf98      	it	ls
 8017588:	86a1      	strhls	r1, [r4, #52]	; 0x34
 801758a:	e7ef      	b.n	801756c <lv_btnmatrix_event+0x348>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801758c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 801758e:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 8017592:	f835 1032 	ldrh.w	r1, [r5, r2, lsl #3]
 8017596:	eb05 07c2 	add.w	r7, r5, r2, lsl #3
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 801759a:	f105 0e02 	add.w	lr, r5, #2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801759e:	88bb      	ldrh	r3, [r7, #4]
 80175a0:	3301      	adds	r3, #1
 80175a2:	1a5b      	subs	r3, r3, r1
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 80175a4:	f343 034e 	sbfx	r3, r3, #1, #15
 80175a8:	440b      	add	r3, r1
                lv_coord_t pr_center =
 80175aa:	b21b      	sxth	r3, r3
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 80175ac:	0051      	lsls	r1, r2, #1
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 80175ae:	f105 0804 	add.w	r8, r5, #4
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 80175b2:	4594      	cmp	ip, r2
 80175b4:	f67f af39 	bls.w	801742a <lv_btnmatrix_event+0x206>
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 80175b8:	f93e 9021 	ldrsh.w	r9, [lr, r1, lsl #2]
 80175bc:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 80175c0:	45b1      	cmp	r9, r6
 80175c2:	dd0f      	ble.n	80175e4 <lv_btnmatrix_event+0x3c0>
 80175c4:	f935 6021 	ldrsh.w	r6, [r5, r1, lsl #2]
 80175c8:	429e      	cmp	r6, r3
 80175ca:	dc0b      	bgt.n	80175e4 <lv_btnmatrix_event+0x3c0>
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 80175cc:	f938 6021 	ldrsh.w	r6, [r8, r1, lsl #2]
 80175d0:	4406      	add	r6, r0
                       pr_center >= btnm->button_areas[area_below].x1 &&
 80175d2:	42b3      	cmp	r3, r6
 80175d4:	dc06      	bgt.n	80175e4 <lv_btnmatrix_event+0x3c0>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 80175d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 80175d8:	5a76      	ldrh	r6, [r6, r1]
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 80175da:	f016 0f40 	tst.w	r6, #64	; 0x40
 80175de:	d101      	bne.n	80175e4 <lv_btnmatrix_event+0x3c0>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 80175e0:	06f6      	lsls	r6, r6, #27
 80175e2:	d558      	bpl.n	8017696 <lv_btnmatrix_event+0x472>
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 80175e4:	3201      	adds	r2, #1
 80175e6:	b292      	uxth	r2, r2
 80175e8:	3102      	adds	r1, #2
 80175ea:	e7e2      	b.n	80175b2 <lv_btnmatrix_event+0x38e>
        else if(c == LV_KEY_UP) {
 80175ec:	2b11      	cmp	r3, #17
 80175ee:	f47f af1c 	bne.w	801742a <lv_btnmatrix_event+0x206>
            lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 80175f2:	4620      	mov	r0, r4
 80175f4:	f7ff f938 	bl	8016868 <lv_obj_get_style_pad_column.constprop.0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 80175f8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80175fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80175fe:	4293      	cmp	r3, r2
 8017600:	d112      	bne.n	8017628 <lv_btnmatrix_event+0x404>
                btnm->btn_id_sel = 0;
 8017602:	2100      	movs	r1, #0
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8017604:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                btnm->btn_id_sel = 0;
 8017606:	86a1      	strh	r1, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8017608:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801760a:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801760e:	06d5      	lsls	r5, r2, #27
 8017610:	d402      	bmi.n	8017618 <lv_btnmatrix_event+0x3f4>
 8017612:	0652      	lsls	r2, r2, #25
 8017614:	f57f af09 	bpl.w	801742a <lv_btnmatrix_event+0x206>
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8017618:	8e22      	ldrh	r2, [r4, #48]	; 0x30
                    btnm->btn_id_sel++;
 801761a:	3301      	adds	r3, #1
 801761c:	b29b      	uxth	r3, r3
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801761e:	429a      	cmp	r2, r3
                    btnm->btn_id_sel++;
 8017620:	86a3      	strh	r3, [r4, #52]	; 0x34
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8017622:	bf98      	it	ls
 8017624:	86a1      	strhls	r1, [r4, #52]	; 0x34
 8017626:	e7ef      	b.n	8017608 <lv_btnmatrix_event+0x3e4>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 8017628:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801762a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
 801762e:	f835 1033 	ldrh.w	r1, [r5, r3, lsl #3]
 8017632:	88b2      	ldrh	r2, [r6, #4]
 8017634:	3201      	adds	r2, #1
 8017636:	1a52      	subs	r2, r2, r1
 8017638:	f342 024e 	sbfx	r2, r2, #1, #15
 801763c:	440a      	add	r2, r1
                lv_coord_t pr_center =
 801763e:	b212      	sxth	r2, r2
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 8017640:	b21b      	sxth	r3, r3
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 8017642:	f105 0c02 	add.w	ip, r5, #2
                       pr_center <= btnm->button_areas[area_above].x2 &&
 8017646:	f105 0e04 	add.w	lr, r5, #4
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 801764a:	0419      	lsls	r1, r3, #16
 801764c:	b29f      	uxth	r7, r3
 801764e:	f53f aeec 	bmi.w	801742a <lv_btnmatrix_event+0x206>
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 8017652:	f93c 8033 	ldrsh.w	r8, [ip, r3, lsl #3]
 8017656:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 801765a:	4588      	cmp	r8, r1
 801765c:	da10      	bge.n	8017680 <lv_btnmatrix_event+0x45c>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 801765e:	f935 1033 	ldrsh.w	r1, [r5, r3, lsl #3]
 8017662:	1a09      	subs	r1, r1, r0
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 8017664:	428a      	cmp	r2, r1
 8017666:	db0b      	blt.n	8017680 <lv_btnmatrix_event+0x45c>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 8017668:	f93e 1033 	ldrsh.w	r1, [lr, r3, lsl #3]
 801766c:	4291      	cmp	r1, r2
 801766e:	db07      	blt.n	8017680 <lv_btnmatrix_event+0x45c>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 8017670:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8017672:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
                       pr_center <= btnm->button_areas[area_above].x2 &&
 8017676:	f011 0f40 	tst.w	r1, #64	; 0x40
 801767a:	d101      	bne.n	8017680 <lv_btnmatrix_event+0x45c>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 801767c:	06c9      	lsls	r1, r1, #27
 801767e:	d50c      	bpl.n	801769a <lv_btnmatrix_event+0x476>
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 8017680:	3b01      	subs	r3, #1
 8017682:	e7e2      	b.n	801764a <lv_btnmatrix_event+0x426>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8017684:	2d15      	cmp	r5, #21
 8017686:	f47f adf2 	bne.w	801726e <lv_btnmatrix_event+0x4a>
        draw_main(e);
 801768a:	4630      	mov	r0, r6
}
 801768c:	b002      	add	sp, #8
 801768e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        draw_main(e);
 8017692:	f7ff ba39 	b.w	8016b08 <draw_main>
                if(area_below < btnm->btn_cnt) btnm->btn_id_sel = area_below;
 8017696:	86a2      	strh	r2, [r4, #52]	; 0x34
 8017698:	e6c7      	b.n	801742a <lv_btnmatrix_event+0x206>
                if(area_above >= 0) btnm->btn_id_sel = area_above;
 801769a:	86a7      	strh	r7, [r4, #52]	; 0x34
 801769c:	e6c5      	b.n	801742a <lv_btnmatrix_event+0x206>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 801769e:	f1a5 030f 	sub.w	r3, r5, #15
 80176a2:	b2db      	uxtb	r3, r3
 80176a4:	2b01      	cmp	r3, #1
 80176a6:	f67f af2b 	bls.w	8017500 <lv_btnmatrix_event+0x2dc>
    else if(code == LV_EVENT_KEY) {
 80176aa:	2d0d      	cmp	r5, #13
 80176ac:	d1ea      	bne.n	8017684 <lv_btnmatrix_event+0x460>
        invalidate_button_area(obj, btnm->btn_id_sel);
 80176ae:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80176b0:	4620      	mov	r0, r4
 80176b2:	f7ff fcd8 	bl	8017066 <invalidate_button_area>
        char c = *((char *)lv_event_get_param(e));
 80176b6:	4630      	mov	r0, r6
 80176b8:	f7eb fdd0 	bl	800325c <lv_event_get_param>
 80176bc:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 80176be:	2b13      	cmp	r3, #19
 80176c0:	f47f af28 	bne.w	8017514 <lv_btnmatrix_event+0x2f0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 80176c4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80176c6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80176c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 80176ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80176ce:	4293      	cmp	r3, r2
            else btnm->btn_id_sel++;
 80176d0:	bf1a      	itte	ne
 80176d2:	3301      	addne	r3, #1
 80176d4:	b29b      	uxthne	r3, r3
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 80176d6:	2300      	moveq	r3, #0
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80176d8:	4299      	cmp	r1, r3
 80176da:	86a3      	strh	r3, [r4, #52]	; 0x34
 80176dc:	bf9c      	itt	ls
 80176de:	2300      	movls	r3, #0
 80176e0:	86a3      	strhls	r3, [r4, #52]	; 0x34
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80176e2:	2500      	movs	r5, #0
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80176e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80176e6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80176ea:	06d6      	lsls	r6, r2, #27
 80176ec:	d402      	bmi.n	80176f4 <lv_btnmatrix_event+0x4d0>
 80176ee:	0652      	lsls	r2, r2, #25
 80176f0:	f57f ae9b 	bpl.w	801742a <lv_btnmatrix_event+0x206>
                btnm->btn_id_sel++;
 80176f4:	3301      	adds	r3, #1
 80176f6:	b29b      	uxth	r3, r3
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80176f8:	4299      	cmp	r1, r3
                btnm->btn_id_sel++;
 80176fa:	86a3      	strh	r3, [r4, #52]	; 0x34
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80176fc:	bf98      	it	ls
 80176fe:	86a5      	strhls	r5, [r4, #52]	; 0x34
 8017700:	e7f0      	b.n	80176e4 <lv_btnmatrix_event+0x4c0>
 8017702:	bf00      	nop

08017704 <lv_checkbox_constructor>:
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    cb->txt = "Check box";
 8017704:	4b0c      	ldr	r3, [pc, #48]	; (8017738 <lv_checkbox_constructor+0x34>)
{
 8017706:	b510      	push	{r4, lr}
    cb->txt = "Check box";
 8017708:	624b      	str	r3, [r1, #36]	; 0x24
    cb->static_txt = 1;
 801770a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
{
 801770e:	460c      	mov	r4, r1
    cb->static_txt = 1;
 8017710:	f043 0301 	orr.w	r3, r3, #1
 8017714:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8017718:	4620      	mov	r0, r4
 801771a:	2102      	movs	r1, #2
 801771c:	f7ec fc02 	bl	8003f24 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 8017720:	4620      	mov	r0, r4
 8017722:	2108      	movs	r1, #8
 8017724:	f7ec fbfe 	bl	8003f24 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8017728:	4620      	mov	r0, r4
 801772a:	f44f 6180 	mov.w	r1, #1024	; 0x400

    LV_TRACE_OBJ_CREATE("finished");
}
 801772e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8017732:	f7ec bbf7 	b.w	8003f24 <lv_obj_add_flag>
 8017736:	bf00      	nop
 8017738:	080204a8 	.word	0x080204a8

0801773c <lv_checkbox_destructor>:

static void lv_checkbox_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801773c:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_checkbox_t * cb = (lv_checkbox_t *)obj;
    if(!cb->static_txt) {
 801773e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017742:	f013 0501 	ands.w	r5, r3, #1
{
 8017746:	460c      	mov	r4, r1
    if(!cb->static_txt) {
 8017748:	d103      	bne.n	8017752 <lv_checkbox_destructor+0x16>
        lv_mem_free(cb->txt);
 801774a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801774c:	f7fb fe0a 	bl	8013364 <lv_mem_free>
        cb->txt = NULL;
 8017750:	6265      	str	r5, [r4, #36]	; 0x24
    }
    LV_TRACE_OBJ_CREATE("finished");
}
 8017752:	bd38      	pop	{r3, r4, r5, pc}

08017754 <lv_checkbox_event>:

static void lv_checkbox_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8017754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res;
    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 8017758:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 8017a50 <lv_checkbox_event+0x2fc>
{
 801775c:	b0b9      	sub	sp, #228	; 0xe4
    res = lv_obj_event_base(MY_CLASS, e);
 801775e:	4658      	mov	r0, fp
{
 8017760:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8017762:	f7eb fc8b 	bl	800307c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8017766:	2801      	cmp	r0, #1
 8017768:	d165      	bne.n	8017836 <lv_checkbox_event+0xe2>

    lv_event_code_t code = lv_event_get_code(e);
 801776a:	4630      	mov	r0, r6
 801776c:	f7eb fd72 	bl	8003254 <lv_event_get_code>
 8017770:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8017772:	4630      	mov	r0, r6
 8017774:	f7eb fd6a 	bl	800324c <lv_event_get_target>

    if(code == LV_EVENT_GET_SELF_SIZE) {
 8017778:	2d2c      	cmp	r5, #44	; 0x2c
    lv_obj_t * obj = lv_event_get_target(e);
 801777a:	4604      	mov	r4, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 801777c:	d15e      	bne.n	801783c <lv_checkbox_event+0xe8>
        lv_point_t * p = lv_event_get_param(e);
 801777e:	4630      	mov	r0, r6
 8017780:	f7eb fd6c 	bl	800325c <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8017784:	2257      	movs	r2, #87	; 0x57
 8017786:	4606      	mov	r6, r0
 8017788:	2100      	movs	r1, #0
 801778a:	4620      	mov	r0, r4
 801778c:	f7ef fe7e 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8017790:	2259      	movs	r2, #89	; 0x59
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 8017792:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8017796:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8017798:	2100      	movs	r1, #0
 801779a:	4620      	mov	r0, r4
 801779c:	f7ef fe76 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80177a0:	2258      	movs	r2, #88	; 0x58
    return (lv_coord_t)v.num;
 80177a2:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80177a6:	2100      	movs	r1, #0
 80177a8:	4620      	mov	r0, r4
 80177aa:	f7ef fe6f 	bl	800748c <lv_obj_get_style_prop>
        lv_coord_t font_h = lv_font_get_line_height(font);
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);

        lv_point_t txt_size;
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 80177ae:	f04f 0900 	mov.w	r9, #0
 80177b2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80177b6:	e9cd 3901 	strd	r3, r9, [sp, #4]
 80177ba:	f8cd 8000 	str.w	r8, [sp]
 80177be:	b203      	sxth	r3, r0
 80177c0:	462a      	mov	r2, r5
 80177c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80177c4:	a826      	add	r0, sp, #152	; 0x98
 80177c6:	f7fd fd79 	bl	80152bc <lv_txt_get_size>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80177ca:	4649      	mov	r1, r9
 80177cc:	2215      	movs	r2, #21
 80177ce:	4620      	mov	r0, r4
 80177d0:	f7ef fe5c 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80177d4:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80177d6:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80177d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80177dc:	4620      	mov	r0, r4
 80177de:	f7ef fe55 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80177e2:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80177e4:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80177e6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80177ea:	4620      	mov	r0, r4
 80177ec:	f7ef fe4e 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80177f0:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80177f2:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80177f4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80177f8:	4620      	mov	r0, r4
 80177fa:	f7ef fe47 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80177fe:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017800:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017802:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8017806:	4620      	mov	r0, r4
 8017808:	f7ef fe40 	bl	800748c <lv_obj_get_style_prop>
        lv_coord_t marker_bottomp = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
        lv_point_t marker_size;
        marker_size.x = font_h + marker_leftp + marker_rightp;
        marker_size.y = font_h + marker_topp + marker_bottomp;

        p->x = marker_size.x + txt_size.x + bg_colp;
 801780c:	eb05 030a 	add.w	r3, r5, sl
 8017810:	f8bd 5098 	ldrh.w	r5, [sp, #152]	; 0x98
 8017814:	442b      	add	r3, r5
 8017816:	eb03 0509 	add.w	r5, r3, r9
        marker_size.y = font_h + marker_topp + marker_bottomp;
 801781a:	eb08 0300 	add.w	r3, r8, r0
 801781e:	fa13 f387 	uxtah	r3, r3, r7
        p->y = LV_MAX(marker_size.y, txt_size.y);
 8017822:	f9bd 009a 	ldrsh.w	r0, [sp, #154]	; 0x9a
 8017826:	b21b      	sxth	r3, r3
 8017828:	4283      	cmp	r3, r0
        p->x = marker_size.x + txt_size.x + bg_colp;
 801782a:	fa15 f587 	uxtah	r5, r5, r7
        p->y = LV_MAX(marker_size.y, txt_size.y);
 801782e:	bfb8      	it	lt
 8017830:	4603      	movlt	r3, r0
        p->x = marker_size.x + txt_size.x + bg_colp;
 8017832:	8035      	strh	r5, [r6, #0]
        p->y = LV_MAX(marker_size.y, txt_size.y);
 8017834:	8073      	strh	r3, [r6, #2]
        *s = LV_MAX(*s, m);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        lv_checkbox_draw(e);
    }
}
 8017836:	b039      	add	sp, #228	; 0xe4
 8017838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801783c:	2d13      	cmp	r5, #19
 801783e:	d10f      	bne.n	8017860 <lv_checkbox_event+0x10c>
        lv_coord_t * s = lv_event_get_param(e);
 8017840:	4630      	mov	r0, r6
 8017842:	f7eb fd0b 	bl	800325c <lv_event_get_param>
        lv_coord_t m = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 8017846:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        lv_coord_t * s = lv_event_get_param(e);
 801784a:	4605      	mov	r5, r0
        lv_coord_t m = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 801784c:	4620      	mov	r0, r4
 801784e:	f7ed f920 	bl	8004a92 <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, m);
 8017852:	f9b5 3000 	ldrsh.w	r3, [r5]
 8017856:	4298      	cmp	r0, r3
 8017858:	bfb8      	it	lt
 801785a:	4618      	movlt	r0, r3
 801785c:	8028      	strh	r0, [r5, #0]
 801785e:	e7ea      	b.n	8017836 <lv_checkbox_event+0xe2>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8017860:	2d15      	cmp	r5, #21
 8017862:	d1e8      	bne.n	8017836 <lv_checkbox_event+0xe2>

static void lv_checkbox_draw(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 8017864:	4630      	mov	r0, r6
 8017866:	f7eb fcf1 	bl	800324c <lv_event_get_target>
 801786a:	4604      	mov	r4, r0
    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801786c:	4630      	mov	r0, r6
 801786e:	f7eb fd40 	bl	80032f2 <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8017872:	2257      	movs	r2, #87	; 0x57
 8017874:	4606      	mov	r6, r0
 8017876:	2100      	movs	r1, #0
 8017878:	4620      	mov	r0, r4
 801787a:	f7ef fe07 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801787e:	2232      	movs	r2, #50	; 0x32
 8017880:	f9b0 a008 	ldrsh.w	sl, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8017884:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8017886:	2100      	movs	r1, #0
 8017888:	4620      	mov	r0, r4
 801788a:	f7ef fdff 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801788e:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8017890:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017892:	2100      	movs	r1, #0
 8017894:	4620      	mov	r0, r4
 8017896:	f7ef fdf9 	bl	800748c <lv_obj_get_style_prop>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
    lv_coord_t font_h = lv_font_get_line_height(font);

    lv_coord_t bg_border = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
    lv_coord_t bg_topp = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + bg_border;
 801789a:	fa10 f089 	uxtah	r0, r0, r9
 801789e:	b283      	uxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80178a0:	2212      	movs	r2, #18
 80178a2:	2100      	movs	r1, #0
 80178a4:	4620      	mov	r0, r4
 80178a6:	9305      	str	r3, [sp, #20]
 80178a8:	f7ef fdf0 	bl	800748c <lv_obj_get_style_prop>
 80178ac:	fa1f f789 	uxth.w	r7, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80178b0:	462a      	mov	r2, r5
    lv_coord_t bg_leftp = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + bg_border;
 80178b2:	4407      	add	r7, r0
 80178b4:	2100      	movs	r1, #0
 80178b6:	4620      	mov	r0, r4
 80178b8:	f7ef fde8 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80178bc:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80178be:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80178c0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80178c4:	4620      	mov	r0, r4
 80178c6:	f7ef fde1 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80178ca:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80178cc:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80178ce:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80178d2:	4620      	mov	r0, r4
 80178d4:	f7ef fdda 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80178d8:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80178da:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80178dc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80178e0:	4620      	mov	r0, r4
 80178e2:	f7ef fdd3 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80178e6:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80178e8:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80178ea:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80178ee:	4620      	mov	r0, r4
 80178f0:	f7ef fdcc 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80178f4:	2268      	movs	r2, #104	; 0x68
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80178f6:	9008      	str	r0, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80178f8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80178fc:	4620      	mov	r0, r4
 80178fe:	f7ef fdc5 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8017902:	2269      	movs	r2, #105	; 0x69
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8017904:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8017906:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801790a:	4620      	mov	r0, r4
 801790c:	f7ef fdbe 	bl	800748c <lv_obj_get_style_prop>

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_INDICATOR);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_INDICATOR);

    lv_draw_rect_dsc_t indic_dsc;
    lv_draw_rect_dsc_init(&indic_dsc);
 8017910:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8017914:	900a      	str	r0, [sp, #40]	; 0x28
 8017916:	4648      	mov	r0, r9
 8017918:	f7f3 fc72 	bl	800b200 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &indic_dsc);
 801791c:	464a      	mov	r2, r9
 801791e:	4620      	mov	r0, r4
 8017920:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8017924:	f7ec fe83 	bl	800462e <lv_obj_init_draw_rect_dsc>
    lv_area_t marker_area;
    marker_area.x1 = obj->coords.x1 + bg_leftp;
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
    marker_area.y1 = obj->coords.y1 + bg_topp;
 8017928:	9a05      	ldr	r2, [sp, #20]
 801792a:	f8b4 c016 	ldrh.w	ip, [r4, #22]
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801792e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 8017930:	8aa1      	ldrh	r1, [r4, #20]
    marker_area.y1 = obj->coords.y1 + bg_topp;
 8017932:	4494      	add	ip, r2
 8017934:	e9dd 2007 	ldrd	r2, r0, [sp, #28]
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 8017938:	442b      	add	r3, r5
    lv_coord_t bg_leftp = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + bg_border;
 801793a:	b2bf      	uxth	r7, r7
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801793c:	3b01      	subs	r3, #1
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 801793e:	4439      	add	r1, r7
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 8017940:	fa13 f38a 	uxtah	r3, r3, sl
 8017944:	4402      	add	r2, r0
    marker_area.y2 = marker_area.y1 + font_h + marker_topp + marker_bottomp - 1;

    lv_area_t marker_area_transf;
    lv_area_copy(&marker_area_transf, &marker_area);
    marker_area_transf.x1 -= transf_w;
 8017946:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801794a:	fa13 f381 	uxtah	r3, r3, r1
 801794e:	b29d      	uxth	r5, r3
    marker_area_transf.x1 -= transf_w;
 8017950:	1a09      	subs	r1, r1, r0
    marker_area_transf.x2 += transf_w;
 8017952:	fa10 f383 	uxtah	r3, r0, r3
 8017956:	3a01      	subs	r2, #1
    marker_area_transf.y1 -= transf_h;
 8017958:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
    marker_area_transf.x1 -= transf_w;
 801795c:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 8017960:	fa12 f28a 	uxtah	r2, r2, sl
 8017964:	b297      	uxth	r7, r2
    marker_area.y1 = obj->coords.y1 + bg_topp;
 8017966:	fa1f fc8c 	uxth.w	ip, ip
    marker_area_transf.y2 += transf_h;
 801796a:	fa10 f282 	uxtah	r2, r0, r2
    marker_area_transf.x2 += transf_w;
 801796e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8017972:	4631      	mov	r1, r6
    marker_area_transf.y1 -= transf_h;
 8017974:	ebac 0300 	sub.w	r3, ip, r0
    marker_area_transf.y2 += transf_h;
 8017978:	4494      	add	ip, r2
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801797a:	a826      	add	r0, sp, #152	; 0x98
    marker_area_transf.y2 += transf_h;
 801797c:	f8ad c03e 	strh.w	ip, [sp, #62]	; 0x3e
    marker_area_transf.y1 -= transf_h;
 8017980:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8017984:	f7ed f8ec 	bl	8004b60 <lv_obj_draw_dsc_init>
    part_draw_dsc.rect_dsc = &indic_dsc;
    part_draw_dsc.class_p = MY_CLASS;
    part_draw_dsc.type = LV_CHECKBOX_DRAW_PART_BOX;
    part_draw_dsc.draw_area = &marker_area_transf;
    part_draw_dsc.part = LV_PART_INDICATOR;
 8017988:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    part_draw_dsc.draw_area = &marker_area_transf;
 801798c:	ab0e      	add	r3, sp, #56	; 0x38
    part_draw_dsc.class_p = MY_CLASS;
 801798e:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
    part_draw_dsc.part = LV_PART_INDICATOR;
 8017992:	9233      	str	r2, [sp, #204]	; 0xcc
    part_draw_dsc.type = LV_CHECKBOX_DRAW_PART_BOX;
 8017994:	f04f 0b00 	mov.w	fp, #0

    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017998:	aa26      	add	r2, sp, #152	; 0x98
 801799a:	211a      	movs	r1, #26
 801799c:	4620      	mov	r0, r4
    part_draw_dsc.rect_dsc = &indic_dsc;
 801799e:	f8cd 90a8 	str.w	r9, [sp, #168]	; 0xa8
    part_draw_dsc.draw_area = &marker_area_transf;
 80179a2:	9329      	str	r3, [sp, #164]	; 0xa4
    part_draw_dsc.type = LV_CHECKBOX_DRAW_PART_BOX;
 80179a4:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80179a8:	f7eb fc30 	bl	800320c <lv_event_send>
    lv_draw_rect(draw_ctx, &indic_dsc, &marker_area_transf);
 80179ac:	ab0e      	add	r3, sp, #56	; 0x38
 80179ae:	461a      	mov	r2, r3
 80179b0:	4649      	mov	r1, r9
 80179b2:	4630      	mov	r0, r6
 80179b4:	f7f3 fc48 	bl	800b248 <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80179b8:	aa26      	add	r2, sp, #152	; 0x98
 80179ba:	211b      	movs	r1, #27
 80179bc:	4620      	mov	r0, r4
 80179be:	f7eb fc25 	bl	800320c <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80179c2:	4659      	mov	r1, fp
 80179c4:	2259      	movs	r2, #89	; 0x59
 80179c6:	4620      	mov	r0, r4
 80179c8:	f7ef fd60 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80179cc:	4659      	mov	r1, fp
    return (lv_coord_t)v.num;
 80179ce:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80179d2:	2258      	movs	r2, #88	; 0x58
 80179d4:	4620      	mov	r0, r4
 80179d6:	f7ef fd59 	bl	800748c <lv_obj_get_style_prop>

    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);

    lv_point_t txt_size;
    lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 80179da:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80179de:	e9cd 9300 	strd	r9, r3, [sp]
 80179e2:	f8cd b008 	str.w	fp, [sp, #8]
 80179e6:	b203      	sxth	r3, r0
 80179e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80179ea:	4642      	mov	r2, r8
 80179ec:	a80d      	add	r0, sp, #52	; 0x34
 80179ee:	f7fd fc65 	bl	80152bc <lv_txt_get_size>

    lv_draw_label_dsc_t txt_dsc;
    lv_draw_label_dsc_init(&txt_dsc);
 80179f2:	a812      	add	r0, sp, #72	; 0x48
 80179f4:	f7f2 f8d0 	bl	8009b98 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &txt_dsc);
 80179f8:	aa12      	add	r2, sp, #72	; 0x48
 80179fa:	4659      	mov	r1, fp
 80179fc:	4620      	mov	r0, r4
 80179fe:	f7ec ff5f 	bl	80048c0 <lv_obj_init_draw_label_dsc>

    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
    lv_area_t txt_area;
    txt_area.x1 = marker_area.x2 + bg_colp;
 8017a02:	9b06      	ldr	r3, [sp, #24]
    txt_area.x2 = txt_area.x1 + txt_size.x;
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8017a04:	9a05      	ldr	r2, [sp, #20]
    txt_area.x1 = marker_area.x2 + bg_colp;
 8017a06:	441d      	add	r5, r3
    txt_area.x2 = txt_area.x1 + txt_size.x;
 8017a08:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    txt_area.x1 = marker_area.x2 + bg_colp;
 8017a0c:	b2ad      	uxth	r5, r5
 8017a0e:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
    txt_area.x2 = txt_area.x1 + txt_size.x;
 8017a12:	441d      	add	r5, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8017a14:	1c7b      	adds	r3, r7, #1
    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 8017a16:	b21b      	sxth	r3, r3
 8017a18:	eba3 030a 	sub.w	r3, r3, sl
 8017a1c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8017a20:	f8b4 a016 	ldrh.w	sl, [r4, #22]
    txt_area.y2 = txt_area.y1 + txt_size.y;

    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 8017a24:	f8cd b000 	str.w	fp, [sp]
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8017a28:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8017a2c:	4453      	add	r3, sl
    txt_area.y2 = txt_area.y1 + txt_size.y;
 8017a2e:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    txt_area.x2 = txt_area.x1 + txt_size.x;
 8017a32:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8017a36:	b29b      	uxth	r3, r3
 8017a38:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    txt_area.y2 = txt_area.y1 + txt_size.y;
 8017a3c:	4413      	add	r3, r2
 8017a3e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 8017a42:	aa10      	add	r2, sp, #64	; 0x40
 8017a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a46:	a912      	add	r1, sp, #72	; 0x48
 8017a48:	4630      	mov	r0, r6
 8017a4a:	f7f2 f8c3 	bl	8009bd4 <lv_draw_label>
}
 8017a4e:	e6f2      	b.n	8017836 <lv_checkbox_event+0xe2>
 8017a50:	080204b4 	.word	0x080204b4

08017a54 <lv_dropdownlist_destructor>:
{
    LV_UNUSED(class_p);
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;
    dropdown->list = NULL;
 8017a54:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8017a56:	2200      	movs	r2, #0
 8017a58:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017a5a:	4770      	bx	lr

08017a5c <get_label>:
}

static lv_obj_t * get_label(const lv_obj_t * obj)
{
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;
    if(dropdown->list == NULL) return NULL;
 8017a5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017a5e:	b110      	cbz	r0, 8017a66 <get_label+0xa>

    return lv_obj_get_child(dropdown->list, 0);
 8017a60:	2100      	movs	r1, #0
 8017a62:	f7f0 bb06 	b.w	8008072 <lv_obj_get_child>
}
 8017a66:	4770      	bx	lr

08017a68 <position_to_selected>:
{
 8017a68:	b570      	push	{r4, r5, r6, lr}
 8017a6a:	4604      	mov	r4, r0
    lv_obj_t * label = get_label(dropdown_obj);
 8017a6c:	f7ff fff6 	bl	8017a5c <get_label>
    if(label == NULL) return;
 8017a70:	4605      	mov	r5, r0
 8017a72:	b308      	cbz	r0, 8017ab8 <position_to_selected+0x50>
    if(lv_obj_get_height(label) <= lv_obj_get_content_height(dropdown_obj)) return;
 8017a74:	f7ed fa68 	bl	8004f48 <lv_obj_get_height>
 8017a78:	4606      	mov	r6, r0
 8017a7a:	4620      	mov	r0, r4
 8017a7c:	f7ed fa80 	bl	8004f80 <lv_obj_get_content_height>
 8017a80:	4286      	cmp	r6, r0
 8017a82:	dd19      	ble.n	8017ab8 <position_to_selected+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8017a84:	2257      	movs	r2, #87	; 0x57
 8017a86:	2100      	movs	r1, #0
 8017a88:	4628      	mov	r0, r5
 8017a8a:	f7ef fcff 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8017a8e:	2259      	movs	r2, #89	; 0x59
 8017a90:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8017a94:	2100      	movs	r1, #0
 8017a96:	4628      	mov	r0, r5
 8017a98:	f7ef fcf8 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 8017a9c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    lv_coord_t unit_h = font_h + line_space;
 8017a9e:	4430      	add	r0, r6
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 8017aa0:	fb11 f100 	smulbb	r1, r1, r0
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017aa8:	b209      	sxth	r1, r1
 8017aaa:	f7ee fe21 	bl	80066f0 <lv_obj_scroll_to_y>
    lv_obj_invalidate(dropdown->list);
 8017aae:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
 8017ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(dropdown->list);
 8017ab4:	f7ed bc58 	b.w	8005368 <lv_obj_invalidate>
}
 8017ab8:	bd70      	pop	{r4, r5, r6, pc}

08017aba <lv_dropdownlist_constructor>:
{
 8017aba:	b507      	push	{r0, r1, r2, lr}
 8017abc:	4608      	mov	r0, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8017abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017ac2:	9001      	str	r0, [sp, #4]
 8017ac4:	f7ec fa63 	bl	8003f8e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 8017ac8:	9801      	ldr	r0, [sp, #4]
 8017aca:	2104      	movs	r1, #4
 8017acc:	f7ec fa5f 	bl	8003f8e <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_IGNORE_LAYOUT);
 8017ad0:	9801      	ldr	r0, [sp, #4]
 8017ad2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8017ad6:	f7ec fa25 	bl	8003f24 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_HIDDEN);
 8017ada:	9801      	ldr	r0, [sp, #4]
 8017adc:	2101      	movs	r1, #1
 8017ade:	f7ec fa21 	bl	8003f24 <lv_obj_add_flag>
    lv_label_create(obj);
 8017ae2:	9801      	ldr	r0, [sp, #4]
}
 8017ae4:	b003      	add	sp, #12
 8017ae6:	f85d eb04 	ldr.w	lr, [sp], #4
    lv_label_create(obj);
 8017aea:	f001 bafd 	b.w	80190e8 <lv_label_create>

08017aee <lv_dropdown_destructor>:
    if(dropdown->list) {
 8017aee:	6a48      	ldr	r0, [r1, #36]	; 0x24
{
 8017af0:	b538      	push	{r3, r4, r5, lr}
 8017af2:	460c      	mov	r4, r1
    if(dropdown->list) {
 8017af4:	b118      	cbz	r0, 8017afe <lv_dropdown_destructor+0x10>
        lv_obj_del(dropdown->list);
 8017af6:	f7f0 fb68 	bl	80081ca <lv_obj_del>
        dropdown->list = NULL;
 8017afa:	2300      	movs	r3, #0
 8017afc:	6263      	str	r3, [r4, #36]	; 0x24
    if(!dropdown->static_txt) {
 8017afe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8017b02:	f013 0510 	ands.w	r5, r3, #16
 8017b06:	d103      	bne.n	8017b10 <lv_dropdown_destructor+0x22>
        lv_mem_free(dropdown->options);
 8017b08:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017b0a:	f7fb fc2b 	bl	8013364 <lv_mem_free>
        dropdown->options = NULL;
 8017b0e:	6325      	str	r5, [r4, #48]	; 0x30
}
 8017b10:	bd38      	pop	{r3, r4, r5, pc}

08017b12 <draw_box_label>:
{
 8017b12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b16:	4690      	mov	r8, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 8017b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b1c:	4590      	cmp	r8, r2
{
 8017b1e:	b08f      	sub	sp, #60	; 0x3c
 8017b20:	4606      	mov	r6, r0
 8017b22:	460d      	mov	r5, r1
    if(id == LV_DROPDOWN_PR_NONE) return;
 8017b24:	d05e      	beq.n	8017be4 <draw_box_label+0xd2>
    lv_obj_t * list_obj = dropdown->list;
 8017b26:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_state_t state_orig = list_obj->state;
 8017b28:	8c27      	ldrh	r7, [r4, #32]
    if(state != list_obj->state) {
 8017b2a:	429f      	cmp	r7, r3
        list_obj->state = state;
 8017b2c:	bf1f      	itttt	ne
 8017b2e:	8423      	strhne	r3, [r4, #32]
        list_obj->skip_trans = 1;
 8017b30:	f894 3022 	ldrbne.w	r3, [r4, #34]	; 0x22
 8017b34:	f043 0304 	orrne.w	r3, r3, #4
 8017b38:	f884 3022 	strbne.w	r3, [r4, #34]	; 0x22
    lv_draw_label_dsc_init(&label_dsc);
 8017b3c:	a806      	add	r0, sp, #24
 8017b3e:	f7f2 f82b 	bl	8009b98 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(list_obj, LV_PART_SELECTED, &label_dsc);
 8017b42:	aa06      	add	r2, sp, #24
 8017b44:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8017b48:	4620      	mov	r0, r4
 8017b4a:	f7ec feb9 	bl	80048c0 <lv_obj_init_draw_label_dsc>
 8017b4e:	2259      	movs	r2, #89	; 0x59
 8017b50:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8017b54:	4620      	mov	r0, r4
 8017b56:	f7ef fc99 	bl	800748c <lv_obj_get_style_prop>
    label_dsc.line_space = lv_obj_get_style_text_line_space(list_obj,
 8017b5a:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
    lv_obj_t * label = get_label(dropdown_obj);
 8017b5e:	4630      	mov	r0, r6
 8017b60:	f7ff ff7c 	bl	8017a5c <get_label>
    if(label == NULL) return;
 8017b64:	4606      	mov	r6, r0
 8017b66:	2800      	cmp	r0, #0
 8017b68:	d03c      	beq.n	8017be4 <draw_box_label+0xd2>
 8017b6a:	9b06      	ldr	r3, [sp, #24]
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 8017b6c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8017b70:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8017b74:	1811      	adds	r1, r2, r0
 8017b76:	fb11 f308 	smulbb	r3, r1, r8
    area_sel.y1 -= label_dsc.line_space / 2;
 8017b7a:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
 8017b7e:	eba3 0361 	sub.w	r3, r3, r1, asr #1
 8017b82:	8af1      	ldrh	r1, [r6, #22]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 8017b84:	3801      	subs	r0, #1
    area_sel.y1 -= label_dsc.line_space / 2;
 8017b86:	440b      	add	r3, r1
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 8017b88:	4410      	add	r0, r2
    area_sel.y1 -= label_dsc.line_space / 2;
 8017b8a:	b29b      	uxth	r3, r3
 8017b8c:	f8ad 300a 	strh.w	r3, [sp, #10]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 8017b90:	4403      	add	r3, r0
 8017b92:	f8ad 300e 	strh.w	r3, [sp, #14]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 8017b96:	f10d 0810 	add.w	r8, sp, #16
    area_sel.x1 = list_obj->coords.x1;
 8017b9a:	8aa3      	ldrh	r3, [r4, #20]
 8017b9c:	f8ad 3008 	strh.w	r3, [sp, #8]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 8017ba0:	68a9      	ldr	r1, [r5, #8]
    area_sel.x2 = list_obj->coords.x2;
 8017ba2:	8b23      	ldrh	r3, [r4, #24]
 8017ba4:	f8ad 300c 	strh.w	r3, [sp, #12]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 8017ba8:	aa02      	add	r2, sp, #8
 8017baa:	4640      	mov	r0, r8
 8017bac:	f7fa fe63 	bl	8012876 <_lv_area_intersect>
    if(area_ok) {
 8017bb0:	b188      	cbz	r0, 8017bd6 <draw_box_label+0xc4>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8017bb2:	f8d5 9008 	ldr.w	r9, [r5, #8]
        draw_ctx->clip_area = &mask_sel;
 8017bb6:	f8c5 8008 	str.w	r8, [r5, #8]
        lv_draw_label(draw_ctx, &label_dsc, &label->coords, lv_label_get_text(label), NULL);
 8017bba:	4630      	mov	r0, r6
 8017bbc:	f001 fb52 	bl	8019264 <lv_label_get_text>
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	9200      	str	r2, [sp, #0]
 8017bc6:	a906      	add	r1, sp, #24
 8017bc8:	f106 0214 	add.w	r2, r6, #20
 8017bcc:	4628      	mov	r0, r5
 8017bce:	f7f2 f801 	bl	8009bd4 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8017bd2:	f8c5 9008 	str.w	r9, [r5, #8]
    list_obj->skip_trans = 0;
 8017bd6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    list_obj->state = state_orig;
 8017bda:	8427      	strh	r7, [r4, #32]
    list_obj->skip_trans = 0;
 8017bdc:	f36f 0382 	bfc	r3, #2, #1
 8017be0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 8017be4:	b00f      	add	sp, #60	; 0x3c
 8017be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017bea <draw_box>:
{
 8017bea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bee:	4693      	mov	fp, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 8017bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017bf4:	4593      	cmp	fp, r2
{
 8017bf6:	b091      	sub	sp, #68	; 0x44
 8017bf8:	4606      	mov	r6, r0
 8017bfa:	460f      	mov	r7, r1
    if(id == LV_DROPDOWN_PR_NONE) return;
 8017bfc:	d051      	beq.n	8017ca2 <draw_box+0xb8>
    lv_obj_t * list_obj = dropdown->list;
 8017bfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
    lv_state_t state_ori = list_obj->state;
 8017c00:	f8b5 8020 	ldrh.w	r8, [r5, #32]
    if(state != list_obj->state) {
 8017c04:	4598      	cmp	r8, r3
        list_obj->state = state;
 8017c06:	bf1f      	itttt	ne
 8017c08:	842b      	strhne	r3, [r5, #32]
        list_obj->skip_trans = 1;
 8017c0a:	f895 3022 	ldrbne.w	r3, [r5, #34]	; 0x22
 8017c0e:	f043 0304 	orrne.w	r3, r3, #4
 8017c12:	f885 3022 	strbne.w	r3, [r5, #34]	; 0x22
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8017c16:	2257      	movs	r2, #87	; 0x57
 8017c18:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8017c1c:	4628      	mov	r0, r5
 8017c1e:	f7ef fc35 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8017c22:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8017c26:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8017c28:	2259      	movs	r2, #89	; 0x59
 8017c2a:	4628      	mov	r0, r5
 8017c2c:	f7ef fc2e 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8017c30:	b202      	sxth	r2, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8017c32:	4681      	mov	r9, r0
    lv_obj_t * label = get_label(dropdown_obj);
 8017c34:	4630      	mov	r0, r6
 8017c36:	f9b4 a008 	ldrsh.w	sl, [r4, #8]
    return (lv_coord_t)v.num;
 8017c3a:	9201      	str	r2, [sp, #4]
 8017c3c:	f7ff ff0e 	bl	8017a5c <get_label>
    rect_area.y1 += id * (font_h + line_space);
 8017c40:	9a01      	ldr	r2, [sp, #4]
 8017c42:	eb0a 0402 	add.w	r4, sl, r2
 8017c46:	fb14 f30b 	smulbb	r3, r4, fp
    rect_area.y1 -= line_space / 2;
 8017c4a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8017c4e:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8017c52:	8ac2      	ldrh	r2, [r0, #22]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8017c54:	f109 39ff 	add.w	r9, r9, #4294967295
    rect_area.y1 -= line_space / 2;
 8017c58:	4413      	add	r3, r2
 8017c5a:	b29b      	uxth	r3, r3
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8017c5c:	44d1      	add	r9, sl
    rect_area.y1 -= line_space / 2;
 8017c5e:	f8ad 300a 	strh.w	r3, [sp, #10]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8017c62:	444b      	add	r3, r9
 8017c64:	f8ad 300e 	strh.w	r3, [sp, #14]
    rect_area.x1 = dropdown->list->coords.x1;
 8017c68:	6a73      	ldr	r3, [r6, #36]	; 0x24
    lv_draw_rect_dsc_init(&sel_rect);
 8017c6a:	a804      	add	r0, sp, #16
    rect_area.x1 = dropdown->list->coords.x1;
 8017c6c:	8a9a      	ldrh	r2, [r3, #20]
    rect_area.x2 = dropdown->list->coords.x2;
 8017c6e:	8b1b      	ldrh	r3, [r3, #24]
 8017c70:	f8ad 300c 	strh.w	r3, [sp, #12]
    rect_area.x1 = dropdown->list->coords.x1;
 8017c74:	f8ad 2008 	strh.w	r2, [sp, #8]
    lv_draw_rect_dsc_init(&sel_rect);
 8017c78:	f7f3 fac2 	bl	800b200 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(list_obj,  LV_PART_SELECTED, &sel_rect);
 8017c7c:	aa04      	add	r2, sp, #16
 8017c7e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8017c82:	4628      	mov	r0, r5
 8017c84:	f7ec fcd3 	bl	800462e <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &sel_rect, &rect_area);
 8017c88:	aa02      	add	r2, sp, #8
 8017c8a:	a904      	add	r1, sp, #16
 8017c8c:	4638      	mov	r0, r7
 8017c8e:	f7f3 fadb 	bl	800b248 <lv_draw_rect>
    list_obj->skip_trans = 0;
 8017c92:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    list_obj->state = state_ori;
 8017c96:	f8a5 8020 	strh.w	r8, [r5, #32]
    list_obj->skip_trans = 0;
 8017c9a:	f36f 0382 	bfc	r3, #2, #1
 8017c9e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
}
 8017ca2:	b011      	add	sp, #68	; 0x44
 8017ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017ca8 <get_id_on_point>:
{
 8017ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cac:	4606      	mov	r6, r0
 8017cae:	460d      	mov	r5, r1
    lv_obj_t * label = get_label(dropdown_obj);
 8017cb0:	f7ff fed4 	bl	8017a5c <get_label>
    if(label == NULL) return 0;
 8017cb4:	4604      	mov	r4, r0
 8017cb6:	b1f8      	cbz	r0, 8017cf8 <get_id_on_point+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8017cb8:	2257      	movs	r2, #87	; 0x57
 8017cba:	2100      	movs	r1, #0
    y -= label->coords.y1;
 8017cbc:	f8b0 8016 	ldrh.w	r8, [r0, #22]
 8017cc0:	f7ef fbe4 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8017cc4:	2259      	movs	r2, #89	; 0x59
 8017cc6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8017cca:	2100      	movs	r1, #0
 8017ccc:	4620      	mov	r0, r4
 8017cce:	f7ef fbdd 	bl	800748c <lv_obj_get_style_prop>
    y += line_space / 2;
 8017cd2:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 8017cd6:	fa04 f480 	sxtah	r4, r4, r0
 8017cda:	eb05 0464 	add.w	r4, r5, r4, asr #1
 8017cde:	eba4 0408 	sub.w	r4, r4, r8
    lv_coord_t h = font_h + line_space;
 8017ce2:	4438      	add	r0, r7
    uint16_t opt = y / h;
 8017ce4:	b200      	sxth	r0, r0
 8017ce6:	b224      	sxth	r4, r4
 8017ce8:	fb94 f4f0 	sdiv	r4, r4, r0
 8017cec:	b2a0      	uxth	r0, r4
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 8017cee:	8eb4      	ldrh	r4, [r6, #52]	; 0x34
 8017cf0:	4284      	cmp	r4, r0
 8017cf2:	d801      	bhi.n	8017cf8 <get_id_on_point+0x50>
 8017cf4:	3c01      	subs	r4, #1
 8017cf6:	b2a0      	uxth	r0, r4
}
 8017cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017cfc <lv_dropdown_set_options_static>:
{
 8017cfc:	b538      	push	{r3, r4, r5, lr}
 8017cfe:	4604      	mov	r4, r0
    LV_ASSERT_NULL(options);
 8017d00:	460d      	mov	r5, r1
 8017d02:	b901      	cbnz	r1, 8017d06 <lv_dropdown_set_options_static+0xa>
 8017d04:	e7fe      	b.n	8017d04 <lv_dropdown_set_options_static+0x8>
    dropdown->option_cnt = 0;
 8017d06:	2300      	movs	r3, #0
 8017d08:	8683      	strh	r3, [r0, #52]	; 0x34
void lv_dropdown_set_options_static(lv_obj_t * obj, const char * options)
 8017d0a:	3901      	subs	r1, #1
        if(options[i] == '\n') dropdown->option_cnt++;
 8017d0c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 8017d0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        if(options[i] == '\n') dropdown->option_cnt++;
 8017d12:	3301      	adds	r3, #1
 8017d14:	b29b      	uxth	r3, r3
    for(i = 0; options[i] != '\0'; i++) {
 8017d16:	b9d2      	cbnz	r2, 8017d4e <lv_dropdown_set_options_static+0x52>
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 8017d18:	86a3      	strh	r3, [r4, #52]	; 0x34
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 8017d1a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    dropdown->sel_opt_id      = 0;
 8017d1e:	86e2      	strh	r2, [r4, #54]	; 0x36
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 8017d20:	06db      	lsls	r3, r3, #27
    dropdown->sel_opt_id_orig = 0;
 8017d22:	8722      	strh	r2, [r4, #56]	; 0x38
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 8017d24:	d403      	bmi.n	8017d2e <lv_dropdown_set_options_static+0x32>
 8017d26:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017d28:	b108      	cbz	r0, 8017d2e <lv_dropdown_set_options_static+0x32>
        lv_mem_free(dropdown->options);
 8017d2a:	f7fb fb1b 	bl	8013364 <lv_mem_free>
    dropdown->static_txt = 1;
 8017d2e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    dropdown->options = (char *)options;
 8017d32:	6325      	str	r5, [r4, #48]	; 0x30
    dropdown->static_txt = 1;
 8017d34:	f043 0310 	orr.w	r3, r3, #16
    lv_obj_invalidate(obj);
 8017d38:	4620      	mov	r0, r4
    dropdown->static_txt = 1;
 8017d3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    lv_obj_invalidate(obj);
 8017d3e:	f7ed fb13 	bl	8005368 <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 8017d42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017d44:	b138      	cbz	r0, 8017d56 <lv_dropdown_set_options_static+0x5a>
}
 8017d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 8017d4a:	f7ed bb0d 	b.w	8005368 <lv_obj_invalidate>
        if(options[i] == '\n') dropdown->option_cnt++;
 8017d4e:	2a0a      	cmp	r2, #10
 8017d50:	bf08      	it	eq
 8017d52:	86a3      	strheq	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 8017d54:	e7da      	b.n	8017d0c <lv_dropdown_set_options_static+0x10>
}
 8017d56:	bd38      	pop	{r3, r4, r5, pc}

08017d58 <lv_dropdown_constructor>:
    dropdown->symbol         = LV_SYMBOL_DOWN;
 8017d58:	4a14      	ldr	r2, [pc, #80]	; (8017dac <lv_dropdown_constructor+0x54>)
{
 8017d5a:	b538      	push	{r3, r4, r5, lr}
    dropdown->list          = NULL;
 8017d5c:	2300      	movs	r3, #0
    dropdown->text         = NULL;
 8017d5e:	e9c1 320a 	strd	r3, r2, [r1, #40]	; 0x28
    dropdown->option_cnt      = 0;
 8017d62:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
    dropdown->list          = NULL;
 8017d66:	624b      	str	r3, [r1, #36]	; 0x24
    dropdown->sel_opt_id_orig = 0;
 8017d68:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8017d6c:	638b      	str	r3, [r1, #56]	; 0x38
    dropdown->dir = LV_DIR_BOTTOM;
 8017d6e:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
 8017d72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
{
 8017d76:	460c      	mov	r4, r1
    dropdown->dir = LV_DIR_BOTTOM;
 8017d78:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8017d7c:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8017d80:	4620      	mov	r0, r4
 8017d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017d86:	f7ec f8cd 	bl	8003f24 <lv_obj_add_flag>
    lv_dropdown_set_options_static(obj, "Option 1\nOption 2\nOption 3");
 8017d8a:	4909      	ldr	r1, [pc, #36]	; (8017db0 <lv_dropdown_constructor+0x58>)
 8017d8c:	4620      	mov	r0, r4
 8017d8e:	f7ff ffb5 	bl	8017cfc <lv_dropdown_set_options_static>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 8017d92:	4620      	mov	r0, r4
 8017d94:	f7f0 f943 	bl	800801e <lv_obj_get_screen>
 8017d98:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdownlist_class, parent);
 8017d9a:	4806      	ldr	r0, [pc, #24]	; (8017db4 <lv_dropdown_constructor+0x5c>)
 8017d9c:	f7ec fb5c 	bl	8004458 <lv_obj_class_create_obj>
 8017da0:	4605      	mov	r5, r0
    lv_obj_class_init_obj(obj);
 8017da2:	f7ec fbe6 	bl	8004572 <lv_obj_class_init_obj>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 8017da6:	6265      	str	r5, [r4, #36]	; 0x24
    list->dropdown = obj;
 8017da8:	626c      	str	r4, [r5, #36]	; 0x24
}
 8017daa:	bd38      	pop	{r3, r4, r5, pc}
 8017dac:	080204d0 	.word	0x080204d0
 8017db0:	080204d4 	.word	0x080204d4
 8017db4:	0802050c 	.word	0x0802050c

08017db8 <lv_dropdown_get_selected_str>:
{
 8017db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(dropdown->options)  {
 8017dbc:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
{
 8017dc0:	4606      	mov	r6, r0
 8017dc2:	460d      	mov	r5, r1
 8017dc4:	4617      	mov	r7, r2
    if(dropdown->options)  {
 8017dc6:	f1b8 0f00 	cmp.w	r8, #0
 8017dca:	d01d      	beq.n	8017e08 <lv_dropdown_get_selected_str+0x50>
        txt_len     = strlen(dropdown->options);
 8017dcc:	4640      	mov	r0, r8
 8017dce:	f7e8 fa09 	bl	80001e4 <strlen>
    uint32_t line        = 0;
 8017dd2:	2300      	movs	r3, #0
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8017dd4:	461c      	mov	r4, r3
 8017dd6:	4284      	cmp	r4, r0
 8017dd8:	d01f      	beq.n	8017e1a <lv_dropdown_get_selected_str+0x62>
 8017dda:	8f32      	ldrh	r2, [r6, #56]	; 0x38
        if(dropdown->options[i] == '\n') line++;
 8017ddc:	f818 1004 	ldrb.w	r1, [r8, r4]
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8017de0:	429a      	cmp	r2, r3
 8017de2:	d115      	bne.n	8017e10 <lv_dropdown_get_selected_str+0x58>
 8017de4:	2300      	movs	r3, #0
        if(buf_size && c >= buf_size - 1) {
 8017de6:	1e79      	subs	r1, r7, #1
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8017de8:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8017dea:	441a      	add	r2, r3
 8017dec:	5d12      	ldrb	r2, [r2, r4]
 8017dee:	2a0a      	cmp	r2, #10
 8017df0:	d007      	beq.n	8017e02 <lv_dropdown_get_selected_str+0x4a>
        if(buf_size && c >= buf_size - 1) {
 8017df2:	b10f      	cbz	r7, 8017df8 <lv_dropdown_get_selected_str+0x40>
 8017df4:	4299      	cmp	r1, r3
 8017df6:	d904      	bls.n	8017e02 <lv_dropdown_get_selected_str+0x4a>
        buf[c] = dropdown->options[i];
 8017df8:	54ea      	strb	r2, [r5, r3]
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8017dfa:	3301      	adds	r3, #1
 8017dfc:	18e2      	adds	r2, r4, r3
 8017dfe:	4282      	cmp	r2, r0
 8017e00:	d3f2      	bcc.n	8017de8 <lv_dropdown_get_selected_str+0x30>
    buf[c] = '\0';
 8017e02:	2200      	movs	r2, #0
 8017e04:	54ea      	strb	r2, [r5, r3]
 8017e06:	e001      	b.n	8017e0c <lv_dropdown_get_selected_str+0x54>
        buf[0] = '\0';
 8017e08:	f881 8000 	strb.w	r8, [r1]
}
 8017e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dropdown->options[i] == '\n') line++;
 8017e10:	290a      	cmp	r1, #10
 8017e12:	bf08      	it	eq
 8017e14:	3301      	addeq	r3, #1
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8017e16:	3401      	adds	r4, #1
 8017e18:	e7dd      	b.n	8017dd6 <lv_dropdown_get_selected_str+0x1e>
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	e7f1      	b.n	8017e02 <lv_dropdown_get_selected_str+0x4a>

08017e1e <lv_dropdown_open>:
{
 8017e1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017e22:	4604      	mov	r4, r0
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 8017e24:	2101      	movs	r1, #1
 8017e26:	f7ec f8ee 	bl	8004006 <lv_obj_add_state>
    lv_obj_set_parent(dropdown->list, lv_obj_get_screen(dropdown_obj));
 8017e2a:	4620      	mov	r0, r4
 8017e2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017e2e:	f7f0 f8f6 	bl	800801e <lv_obj_get_screen>
 8017e32:	4601      	mov	r1, r0
 8017e34:	4628      	mov	r0, r5
 8017e36:	f7f0 f9fc 	bl	8008232 <lv_obj_set_parent>
    lv_obj_move_to_index(dropdown->list, -1);
 8017e3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8017e40:	f7f0 fa67 	bl	8008312 <lv_obj_move_to_index>
    lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8017e44:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017e46:	2101      	movs	r1, #1
 8017e48:	f7ec f8a1 	bl	8003f8e <lv_obj_clear_flag>
    lv_event_send(dropdown_obj, LV_EVENT_READY, NULL);
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	211f      	movs	r1, #31
 8017e50:	4620      	mov	r0, r4
 8017e52:	f7eb f9db 	bl	800320c <lv_event_send>
    lv_obj_t * label = get_label(dropdown_obj);
 8017e56:	4620      	mov	r0, r4
 8017e58:	f7ff fe00 	bl	8017a5c <get_label>
    lv_label_set_text_static(label, dropdown->options);
 8017e5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lv_obj_t * label = get_label(dropdown_obj);
 8017e5e:	4606      	mov	r6, r0
    lv_label_set_text_static(label, dropdown->options);
 8017e60:	f001 f989 	bl	8019176 <lv_label_set_text_static>
    lv_obj_set_width(dropdown->list, LV_SIZE_CONTENT);
 8017e64:	f242 71d1 	movw	r1, #10193	; 0x27d1
 8017e68:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017e6a:	f7ec ff9c 	bl	8004da6 <lv_obj_set_width>
    lv_obj_update_layout(label);
 8017e6e:	4630      	mov	r0, r6
 8017e70:	f7ed ffa8 	bl	8005dc4 <lv_obj_update_layout>
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 8017e74:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017e76:	f7ed f861 	bl	8004f3c <lv_obj_get_width>
 8017e7a:	4605      	mov	r5, r0
 8017e7c:	4620      	mov	r0, r4
 8017e7e:	f7ed f85d 	bl	8004f3c <lv_obj_get_width>
 8017e82:	4285      	cmp	r5, r0
 8017e84:	dc0f      	bgt.n	8017ea6 <lv_dropdown_open+0x88>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 8017e86:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8017e8a:	f003 030f 	and.w	r3, r3, #15
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 8017e8e:	2b04      	cmp	r3, #4
 8017e90:	d001      	beq.n	8017e96 <lv_dropdown_open+0x78>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 8017e92:	2b08      	cmp	r3, #8
 8017e94:	d107      	bne.n	8017ea6 <lv_dropdown_open+0x88>
        lv_obj_set_width(dropdown->list, lv_obj_get_width(dropdown_obj));
 8017e96:	4620      	mov	r0, r4
 8017e98:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017e9a:	f7ed f84f 	bl	8004f3c <lv_obj_get_width>
 8017e9e:	4601      	mov	r1, r0
 8017ea0:	4628      	mov	r0, r5
 8017ea2:	f7ec ff80 	bl	8004da6 <lv_obj_set_width>
    lv_coord_t label_h = lv_obj_get_height(label);
 8017ea6:	4630      	mov	r0, r6
 8017ea8:	f7ed f84e 	bl	8004f48 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8017eac:	2232      	movs	r2, #50	; 0x32
 8017eae:	4680      	mov	r8, r0
 8017eb0:	2100      	movs	r1, #0
 8017eb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017eb4:	f7ef faea 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017eb8:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8017eba:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017ebc:	2100      	movs	r1, #0
 8017ebe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017ec0:	f7ef fae4 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017ec4:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017ec6:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017ec8:	2100      	movs	r1, #0
 8017eca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017ecc:	f7ef fade 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t list_fit_h = label_h + top + bottom;
 8017ed0:	183b      	adds	r3, r7, r0
 8017ed2:	eb03 0745 	add.w	r7, r3, r5, lsl #1
    lv_dir_t dir = dropdown->dir;
 8017ed6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    lv_coord_t list_fit_h = label_h + top + bottom;
 8017eda:	eb07 0508 	add.w	r5, r7, r8
    lv_dir_t dir = dropdown->dir;
 8017ede:	f003 070f 	and.w	r7, r3, #15
    if(dropdown->dir == LV_DIR_BOTTOM) {
 8017ee2:	2f08      	cmp	r7, #8
    lv_coord_t list_fit_h = label_h + top + bottom;
 8017ee4:	b22d      	sxth	r5, r5
    if(dropdown->dir == LV_DIR_BOTTOM) {
 8017ee6:	d16a      	bne.n	8017fbe <lv_dropdown_open+0x1a0>
        if(dropdown_obj->coords.y2 + list_h > LV_VER_RES) {
 8017ee8:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 8017eec:	f7fa fa3a 	bl	8012364 <lv_disp_get_default>
 8017ef0:	f7fa fa4e 	bl	8012390 <lv_disp_get_ver_res>
 8017ef4:	44a8      	add	r8, r5
 8017ef6:	4580      	cmp	r8, r0
 8017ef8:	dd7e      	ble.n	8017ff8 <lv_dropdown_open+0x1da>
            if(dropdown_obj->coords.y1 > LV_VER_RES - dropdown_obj->coords.y2) {
 8017efa:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8017efe:	f7fa fa31 	bl	8012364 <lv_disp_get_default>
 8017f02:	f7fa fa45 	bl	8012390 <lv_disp_get_ver_res>
 8017f06:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8017f0a:	1ac0      	subs	r0, r0, r3
 8017f0c:	4580      	cmp	r8, r0
 8017f0e:	dd4d      	ble.n	8017fac <lv_dropdown_open+0x18e>
                list_h = dropdown_obj->coords.y1 - 1;
 8017f10:	8ae1      	ldrh	r1, [r4, #22]
 8017f12:	3901      	subs	r1, #1
 8017f14:	b209      	sxth	r1, r1
                dir = LV_DIR_TOP;
 8017f16:	2704      	movs	r7, #4
    lv_obj_set_height(dropdown->list, list_h);
 8017f18:	42a9      	cmp	r1, r5
 8017f1a:	bfa8      	it	ge
 8017f1c:	4629      	movge	r1, r5
 8017f1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017f20:	f7ec ff58 	bl	8004dd4 <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 8017f24:	4620      	mov	r0, r4
 8017f26:	f7ff fd9f 	bl	8017a68 <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8017f2a:	2f08      	cmp	r7, #8
 8017f2c:	d166      	bne.n	8017ffc <lv_dropdown_open+0x1de>
 8017f2e:	2300      	movs	r3, #0
 8017f30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017f32:	9300      	str	r3, [sp, #0]
 8017f34:	220d      	movs	r2, #13
 8017f36:	4621      	mov	r1, r4
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8017f38:	f7ed ff5e 	bl	8005df8 <lv_obj_align_to>
    lv_obj_update_layout(dropdown->list);
 8017f3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017f3e:	f7ed ff41 	bl	8005dc4 <lv_obj_update_layout>
    if(dropdown->dir == LV_DIR_LEFT || dropdown->dir == LV_DIR_RIGHT) {
 8017f42:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8017f46:	f003 030f 	and.w	r3, r3, #15
 8017f4a:	3b01      	subs	r3, #1
 8017f4c:	2b01      	cmp	r3, #1
 8017f4e:	d81a      	bhi.n	8017f86 <lv_dropdown_open+0x168>
        lv_coord_t y1 = lv_obj_get_y(dropdown->list);
 8017f50:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017f52:	f7ec ffcc 	bl	8004eee <lv_obj_get_y>
 8017f56:	4605      	mov	r5, r0
        lv_coord_t y2 = lv_obj_get_y2(dropdown->list);
 8017f58:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017f5a:	f7ec ffe4 	bl	8004f26 <lv_obj_get_y2>
 8017f5e:	4607      	mov	r7, r0
        if(y2 >= LV_VER_RES) {
 8017f60:	f7fa fa00 	bl	8012364 <lv_disp_get_default>
 8017f64:	f7fa fa14 	bl	8012390 <lv_disp_get_ver_res>
 8017f68:	42b8      	cmp	r0, r7
 8017f6a:	dc0c      	bgt.n	8017f86 <lv_dropdown_open+0x168>
            lv_obj_set_y(dropdown->list, y1 - (y2 - LV_VER_RES) - 1);
 8017f6c:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8017f70:	f7fa f9f8 	bl	8012364 <lv_disp_get_default>
 8017f74:	f7fa fa0c 	bl	8012390 <lv_disp_get_ver_res>
 8017f78:	1e69      	subs	r1, r5, #1
 8017f7a:	1bcd      	subs	r5, r1, r7
 8017f7c:	4428      	add	r0, r5
 8017f7e:	b201      	sxth	r1, r0
 8017f80:	4640      	mov	r0, r8
 8017f82:	f7ec feee 	bl	8004d62 <lv_obj_set_y>
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, dropdown->options);
 8017f86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017f88:	2100      	movs	r1, #0
 8017f8a:	4630      	mov	r0, r6
 8017f8c:	f7f0 f818 	bl	8007fc0 <lv_obj_calculate_style_text_align>
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 8017f90:	2300      	movs	r3, #0
    switch(align) {
 8017f92:	2802      	cmp	r0, #2
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, dropdown->options);
 8017f94:	4601      	mov	r1, r0
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 8017f96:	461a      	mov	r2, r3
    switch(align) {
 8017f98:	d002      	beq.n	8017fa0 <lv_dropdown_open+0x182>
 8017f9a:	2803      	cmp	r0, #3
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 8017f9c:	bf18      	it	ne
 8017f9e:	2101      	movne	r1, #1
            lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 0);
 8017fa0:	4630      	mov	r0, r6
}
 8017fa2:	b002      	add	sp, #8
 8017fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 0);
 8017fa8:	f7ec bf86 	b.w	8004eb8 <lv_obj_align>
                list_h = LV_VER_RES - dropdown_obj->coords.y2 - 1 ;
 8017fac:	f7fa f9da 	bl	8012364 <lv_disp_get_default>
 8017fb0:	f7fa f9ee 	bl	8012390 <lv_disp_get_ver_res>
 8017fb4:	8b63      	ldrh	r3, [r4, #26]
 8017fb6:	43db      	mvns	r3, r3
 8017fb8:	4418      	add	r0, r3
 8017fba:	b201      	sxth	r1, r0
 8017fbc:	e7ac      	b.n	8017f18 <lv_dropdown_open+0xfa>
    else if(dropdown->dir == LV_DIR_TOP) {
 8017fbe:	2f04      	cmp	r7, #4
 8017fc0:	d11a      	bne.n	8017ff8 <lv_dropdown_open+0x1da>
        if(dropdown_obj->coords.y1 - list_h < 0) {
 8017fc2:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8017fc6:	eba8 0305 	sub.w	r3, r8, r5
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	da14      	bge.n	8017ff8 <lv_dropdown_open+0x1da>
            if(dropdown_obj->coords.y1 < LV_VER_RES - dropdown_obj->coords.y2) {
 8017fce:	f7fa f9c9 	bl	8012364 <lv_disp_get_default>
 8017fd2:	f7fa f9dd 	bl	8012390 <lv_disp_get_ver_res>
 8017fd6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8017fda:	1ac0      	subs	r0, r0, r3
 8017fdc:	4580      	cmp	r8, r0
 8017fde:	da08      	bge.n	8017ff2 <lv_dropdown_open+0x1d4>
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 8017fe0:	f7fa f9c0 	bl	8012364 <lv_disp_get_default>
 8017fe4:	f7fa f9d4 	bl	8012390 <lv_disp_get_ver_res>
 8017fe8:	8b61      	ldrh	r1, [r4, #26]
 8017fea:	1a41      	subs	r1, r0, r1
 8017fec:	b209      	sxth	r1, r1
                dir = LV_DIR_BOTTOM;
 8017fee:	2708      	movs	r7, #8
 8017ff0:	e792      	b.n	8017f18 <lv_dropdown_open+0xfa>
                list_h = dropdown_obj->coords.y1;
 8017ff2:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8017ff6:	e78f      	b.n	8017f18 <lv_dropdown_open+0xfa>
    lv_coord_t list_h = list_fit_h;
 8017ff8:	4629      	mov	r1, r5
 8017ffa:	e78d      	b.n	8017f18 <lv_dropdown_open+0xfa>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 8017ffc:	2f04      	cmp	r7, #4
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8017ffe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 8018000:	d104      	bne.n	801800c <lv_dropdown_open+0x1ee>
 8018002:	2300      	movs	r3, #0
 8018004:	9300      	str	r3, [sp, #0]
 8018006:	220a      	movs	r2, #10
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8018008:	4621      	mov	r1, r4
 801800a:	e795      	b.n	8017f38 <lv_dropdown_open+0x11a>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 801800c:	2f01      	cmp	r7, #1
 801800e:	d103      	bne.n	8018018 <lv_dropdown_open+0x1fa>
 8018010:	2300      	movs	r3, #0
 8018012:	9300      	str	r3, [sp, #0]
 8018014:	2210      	movs	r2, #16
 8018016:	e7f7      	b.n	8018008 <lv_dropdown_open+0x1ea>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8018018:	2f02      	cmp	r7, #2
 801801a:	d18f      	bne.n	8017f3c <lv_dropdown_open+0x11e>
 801801c:	2300      	movs	r3, #0
 801801e:	9300      	str	r3, [sp, #0]
 8018020:	2213      	movs	r2, #19
 8018022:	e7f1      	b.n	8018008 <lv_dropdown_open+0x1ea>

08018024 <lv_dropdown_close>:
{
 8018024:	b510      	push	{r4, lr}
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8018026:	2101      	movs	r1, #1
{
 8018028:	4604      	mov	r4, r0
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 801802a:	f7eb fff5 	bl	8004018 <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801802e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8018032:	6a60      	ldr	r0, [r4, #36]	; 0x24
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8018034:	8763      	strh	r3, [r4, #58]	; 0x3a
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8018036:	2101      	movs	r1, #1
 8018038:	f7eb ff74 	bl	8003f24 <lv_obj_add_flag>
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 801803c:	4620      	mov	r0, r4
 801803e:	2200      	movs	r2, #0
}
 8018040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8018044:	2120      	movs	r1, #32
 8018046:	f7eb b8e1 	b.w	800320c <lv_event_send>
	...

0801804c <lv_dropdown_list_event>:
{
 801804c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_event_code_t code = lv_event_get_code(e);
 801804e:	4608      	mov	r0, r1
{
 8018050:	460e      	mov	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
 8018052:	f7eb f8ff 	bl	8003254 <lv_event_get_code>
    if(code != LV_EVENT_DRAW_POST) {
 8018056:	2818      	cmp	r0, #24
    lv_event_code_t code = lv_event_get_code(e);
 8018058:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_POST) {
 801805a:	d141      	bne.n	80180e0 <lv_dropdown_list_event+0x94>
    lv_obj_t * list = lv_event_get_target(e);
 801805c:	4630      	mov	r0, r6
 801805e:	f7eb f8f5 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_RELEASED) {
 8018062:	2c08      	cmp	r4, #8
    lv_obj_t * list = lv_event_get_target(e);
 8018064:	4605      	mov	r5, r0
    if(code == LV_EVENT_RELEASED) {
 8018066:	d149      	bne.n	80180fc <lv_dropdown_list_event+0xb0>
        if(lv_indev_get_scroll_obj(lv_indev_get_act()) == NULL) {
 8018068:	f7eb fae4 	bl	8003634 <lv_indev_get_act>
 801806c:	f7eb fb6c 	bl	8003748 <lv_indev_get_scroll_obj>
 8018070:	4606      	mov	r6, r0
 8018072:	2800      	cmp	r0, #0
 8018074:	d13a      	bne.n	80180ec <lv_dropdown_list_event+0xa0>
    lv_obj_t * dropdown_obj = list->dropdown;
 8018076:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    lv_indev_t * indev = lv_indev_get_act();
 8018078:	f7eb fadc 	bl	8003634 <lv_indev_get_act>
 801807c:	4605      	mov	r5, r0
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 801807e:	f7eb fadf 	bl	8003640 <lv_indev_get_type>
 8018082:	2804      	cmp	r0, #4
 8018084:	d10c      	bne.n	80180a0 <lv_dropdown_list_event+0x54>
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8018086:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018088:	8723      	strh	r3, [r4, #56]	; 0x38
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 801808a:	4620      	mov	r0, r4
 801808c:	f7eb ffdc 	bl	8004048 <lv_obj_get_group>
 8018090:	4607      	mov	r7, r0
        if(lv_group_get_editing(g)) {
 8018092:	f7eb faca 	bl	800362a <lv_group_get_editing>
 8018096:	b118      	cbz	r0, 80180a0 <lv_dropdown_list_event+0x54>
            lv_group_set_editing(g, false);
 8018098:	4631      	mov	r1, r6
 801809a:	4638      	mov	r0, r7
 801809c:	f7eb faa4 	bl	80035e8 <lv_group_set_editing>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 80180a0:	4628      	mov	r0, r5
 80180a2:	f7eb facd 	bl	8003640 <lv_indev_get_type>
 80180a6:	2801      	cmp	r0, #1
 80180a8:	d122      	bne.n	80180f0 <lv_dropdown_list_event+0xa4>
        lv_indev_get_point(indev, &p);
 80180aa:	4669      	mov	r1, sp
 80180ac:	4628      	mov	r0, r5
 80180ae:	f7eb fb28 	bl	8003702 <lv_indev_get_point>
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 80180b2:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80180b6:	4620      	mov	r0, r4
 80180b8:	f7ff fdf6 	bl	8017ca8 <get_id_on_point>
 80180bc:	86e0      	strh	r0, [r4, #54]	; 0x36
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 80180be:	8720      	strh	r0, [r4, #56]	; 0x38
    lv_dropdown_close(dropdown_obj);
 80180c0:	4620      	mov	r0, r4
 80180c2:	f7ff ffaf 	bl	8018024 <lv_dropdown_close>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 80180c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80180c8:	b913      	cbnz	r3, 80180d0 <lv_dropdown_list_event+0x84>
 80180ca:	4620      	mov	r0, r4
 80180cc:	f7ed f94c 	bl	8005368 <lv_obj_invalidate>
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 80180d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80180d2:	9300      	str	r3, [sp, #0]
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 80180d4:	466a      	mov	r2, sp
 80180d6:	211c      	movs	r1, #28
 80180d8:	4620      	mov	r0, r4
 80180da:	f7eb f897 	bl	800320c <lv_event_send>
    if(res != LV_RES_OK) return res;
 80180de:	e005      	b.n	80180ec <lv_dropdown_list_event+0xa0>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 80180e0:	4841      	ldr	r0, [pc, #260]	; (80181e8 <lv_dropdown_list_event+0x19c>)
 80180e2:	4631      	mov	r1, r6
 80180e4:	f7ea ffca 	bl	800307c <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 80180e8:	2801      	cmp	r0, #1
 80180ea:	d0b7      	beq.n	801805c <lv_dropdown_list_event+0x10>
}
 80180ec:	b003      	add	sp, #12
 80180ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 80180f0:	4628      	mov	r0, r5
 80180f2:	f7eb faa5 	bl	8003640 <lv_indev_get_type>
 80180f6:	2803      	cmp	r0, #3
 80180f8:	d1e2      	bne.n	80180c0 <lv_dropdown_list_event+0x74>
 80180fa:	e7d6      	b.n	80180aa <lv_dropdown_list_event+0x5e>
    else if(code == LV_EVENT_PRESSED) {
 80180fc:	2c01      	cmp	r4, #1
    lv_obj_t * dropdown_obj = ((lv_dropdown_list_t *)list)->dropdown;
 80180fe:	6a47      	ldr	r7, [r0, #36]	; 0x24
    else if(code == LV_EVENT_PRESSED) {
 8018100:	d11c      	bne.n	801813c <lv_dropdown_list_event+0xf0>
    lv_indev_t * indev = lv_indev_get_act();
 8018102:	f7eb fa97 	bl	8003634 <lv_indev_get_act>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 8018106:	4604      	mov	r4, r0
 8018108:	2800      	cmp	r0, #0
 801810a:	d0ef      	beq.n	80180ec <lv_dropdown_list_event+0xa0>
 801810c:	f7eb fa98 	bl	8003640 <lv_indev_get_type>
 8018110:	2801      	cmp	r0, #1
 8018112:	d10d      	bne.n	8018130 <lv_dropdown_list_event+0xe4>
        lv_indev_get_point(indev, &p);
 8018114:	4669      	mov	r1, sp
 8018116:	4620      	mov	r0, r4
 8018118:	f7eb faf3 	bl	8003702 <lv_indev_get_point>
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 801811c:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8018120:	4638      	mov	r0, r7
 8018122:	f7ff fdc1 	bl	8017ca8 <get_id_on_point>
 8018126:	8778      	strh	r0, [r7, #58]	; 0x3a
        lv_obj_invalidate(list_obj);
 8018128:	4628      	mov	r0, r5
 801812a:	f7ed f91d 	bl	8005368 <lv_obj_invalidate>
 801812e:	e7dd      	b.n	80180ec <lv_dropdown_list_event+0xa0>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 8018130:	4620      	mov	r0, r4
 8018132:	f7eb fa85 	bl	8003640 <lv_indev_get_type>
 8018136:	2803      	cmp	r0, #3
 8018138:	d1d8      	bne.n	80180ec <lv_dropdown_list_event+0xa0>
 801813a:	e7eb      	b.n	8018114 <lv_dropdown_list_event+0xc8>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 801813c:	2c09      	cmp	r4, #9
 801813e:	d107      	bne.n	8018150 <lv_dropdown_list_event+0x104>
        dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8018140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018144:	877b      	strh	r3, [r7, #58]	; 0x3a
}
 8018146:	b003      	add	sp, #12
 8018148:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_invalidate(list);
 801814c:	f7ed b90c 	b.w	8005368 <lv_obj_invalidate>
    else if(code == LV_EVENT_DRAW_POST) {
 8018150:	2c18      	cmp	r4, #24
 8018152:	d1cb      	bne.n	80180ec <lv_dropdown_list_event+0xa0>
    lv_obj_t * list_obj = lv_event_get_target(e);
 8018154:	4630      	mov	r0, r6
 8018156:	f7eb f879 	bl	800324c <lv_event_get_target>
    lv_obj_t * dropdown_obj = list->dropdown;
 801815a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801815c:	4630      	mov	r0, r6
 801815e:	f7eb f8c8 	bl	80032f2 <lv_event_get_draw_ctx>
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 8018162:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018164:	6881      	ldr	r1, [r0, #8]
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8018166:	4605      	mov	r5, r0
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 8018168:	3214      	adds	r2, #20
 801816a:	4668      	mov	r0, sp
 801816c:	f7fa fb83 	bl	8012876 <_lv_area_intersect>
    if(has_common) {
 8018170:	b358      	cbz	r0, 80181ca <lv_dropdown_list_event+0x17e>
        if(dropdown->selected_highlight) {
 8018172:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8018176:	68af      	ldr	r7, [r5, #8]
            if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 8018178:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
        draw_ctx->clip_area = &clip_area_core;
 801817a:	f8c5 d008 	str.w	sp, [r5, #8]
        if(dropdown->selected_highlight) {
 801817e:	069b      	lsls	r3, r3, #26
 8018180:	d52a      	bpl.n	80181d8 <lv_dropdown_list_event+0x18c>
            if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 8018182:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8018184:	4291      	cmp	r1, r2
 8018186:	d108      	bne.n	801819a <lv_dropdown_list_event+0x14e>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 8018188:	2321      	movs	r3, #33	; 0x21
 801818a:	460a      	mov	r2, r1
 801818c:	4620      	mov	r0, r4
 801818e:	4629      	mov	r1, r5
 8018190:	f7ff fd2b 	bl	8017bea <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 8018194:	2321      	movs	r3, #33	; 0x21
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8018196:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8018198:	e012      	b.n	80181c0 <lv_dropdown_list_event+0x174>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801819a:	2320      	movs	r3, #32
 801819c:	4629      	mov	r1, r5
 801819e:	4620      	mov	r0, r4
 80181a0:	f7ff fd23 	bl	8017bea <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 80181a4:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 80181a6:	2320      	movs	r3, #32
 80181a8:	4629      	mov	r1, r5
 80181aa:	4620      	mov	r0, r4
 80181ac:	f7ff fcb1 	bl	8017b12 <draw_box_label>
                draw_box(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 80181b0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80181b2:	2301      	movs	r3, #1
 80181b4:	4629      	mov	r1, r5
 80181b6:	4620      	mov	r0, r4
 80181b8:	f7ff fd17 	bl	8017bea <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 80181bc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80181be:	2301      	movs	r3, #1
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 80181c0:	4629      	mov	r1, r5
 80181c2:	4620      	mov	r0, r4
 80181c4:	f7ff fca5 	bl	8017b12 <draw_box_label>
        draw_ctx->clip_area = clip_area_ori;
 80181c8:	60af      	str	r7, [r5, #8]
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 80181ca:	4807      	ldr	r0, [pc, #28]	; (80181e8 <lv_dropdown_list_event+0x19c>)
 80181cc:	4631      	mov	r1, r6
}
 80181ce:	b003      	add	sp, #12
 80181d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 80181d4:	f7ea bf52 	b.w	800307c <lv_obj_event_base>
            draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 80181d8:	2320      	movs	r3, #32
 80181da:	4629      	mov	r1, r5
 80181dc:	4620      	mov	r0, r4
 80181de:	f7ff fd04 	bl	8017bea <draw_box>
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 80181e2:	2320      	movs	r3, #32
 80181e4:	e7d7      	b.n	8018196 <lv_dropdown_list_event+0x14a>
 80181e6:	bf00      	nop
 80181e8:	0802050c 	.word	0x0802050c

080181ec <lv_dropdown_is_open>:
{
 80181ec:	b508      	push	{r3, lr}
    return lv_obj_has_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN) ? false : true;
 80181ee:	2101      	movs	r1, #1
 80181f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80181f2:	f7eb ff1a 	bl	800402a <lv_obj_has_flag>
 80181f6:	f080 0001 	eor.w	r0, r0, #1
}
 80181fa:	b2c0      	uxtb	r0, r0
 80181fc:	bd08      	pop	{r3, pc}

080181fe <btn_release_handler.isra.0>:
static lv_res_t btn_release_handler(lv_obj_t * obj)
 80181fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018200:	4604      	mov	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 8018202:	f7eb fa17 	bl	8003634 <lv_indev_get_act>
 8018206:	4605      	mov	r5, r0
    if(lv_indev_get_scroll_obj(indev) == NULL) {
 8018208:	f7eb fa9e 	bl	8003748 <lv_indev_get_scroll_obj>
 801820c:	bb50      	cbnz	r0, 8018264 <btn_release_handler.isra.0+0x66>
        if(lv_dropdown_is_open(obj)) {
 801820e:	4620      	mov	r0, r4
 8018210:	f7ff ffec 	bl	80181ec <lv_dropdown_is_open>
 8018214:	b300      	cbz	r0, 8018258 <btn_release_handler.isra.0+0x5a>
            lv_dropdown_close(obj);
 8018216:	4620      	mov	r0, r4
 8018218:	f7ff ff04 	bl	8018024 <lv_dropdown_close>
            if(dropdown->sel_opt_id_orig != dropdown->sel_opt_id) {
 801821c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801821e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8018220:	429a      	cmp	r2, r3
 8018222:	d00b      	beq.n	801823c <btn_release_handler.isra.0+0x3e>
                dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8018224:	8723      	strh	r3, [r4, #56]	; 0x38
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8018226:	aa01      	add	r2, sp, #4
 8018228:	211c      	movs	r1, #28
 801822a:	4620      	mov	r0, r4
                uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 801822c:	9301      	str	r3, [sp, #4]
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801822e:	f7ea ffed 	bl	800320c <lv_event_send>
                if(res != LV_RES_OK) return res;
 8018232:	2801      	cmp	r0, #1
 8018234:	d11e      	bne.n	8018274 <btn_release_handler.isra.0+0x76>
                lv_obj_invalidate(obj);
 8018236:	4620      	mov	r0, r4
 8018238:	f7ed f896 	bl	8005368 <lv_obj_invalidate>
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801823c:	4628      	mov	r0, r5
 801823e:	f7eb f9ff 	bl	8003640 <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8018242:	2804      	cmp	r0, #4
 8018244:	d116      	bne.n	8018274 <btn_release_handler.isra.0+0x76>
                lv_group_set_editing(lv_obj_get_group(obj), false);
 8018246:	4620      	mov	r0, r4
 8018248:	f7eb fefe 	bl	8004048 <lv_obj_get_group>
 801824c:	2100      	movs	r1, #0
}
 801824e:	b003      	add	sp, #12
 8018250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                lv_group_set_editing(lv_obj_get_group(obj), false);
 8018254:	f7eb b9c8 	b.w	80035e8 <lv_group_set_editing>
            lv_dropdown_open(obj);
 8018258:	4620      	mov	r0, r4
}
 801825a:	b003      	add	sp, #12
 801825c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            lv_dropdown_open(obj);
 8018260:	f7ff bddd 	b.w	8017e1e <lv_dropdown_open>
        dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8018264:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018266:	86e3      	strh	r3, [r4, #54]	; 0x36
        lv_obj_invalidate(obj);
 8018268:	4620      	mov	r0, r4
}
 801826a:	b003      	add	sp, #12
 801826c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        lv_obj_invalidate(obj);
 8018270:	f7ed b87a 	b.w	8005368 <lv_obj_invalidate>
}
 8018274:	b003      	add	sp, #12
 8018276:	bd30      	pop	{r4, r5, pc}

08018278 <lv_dropdown_event>:
{
 8018278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801827c:	48b4      	ldr	r0, [pc, #720]	; (8018550 <lv_dropdown_event+0x2d8>)
{
 801827e:	b09d      	sub	sp, #116	; 0x74
 8018280:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8018282:	f7ea fefb 	bl	800307c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8018286:	2801      	cmp	r0, #1
 8018288:	d143      	bne.n	8018312 <lv_dropdown_event+0x9a>
    lv_event_code_t code = lv_event_get_code(e);
 801828a:	4630      	mov	r0, r6
 801828c:	f7ea ffe2 	bl	8003254 <lv_event_get_code>
 8018290:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8018292:	4630      	mov	r0, r6
 8018294:	f7ea ffda 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_FOCUSED) {
 8018298:	2d0e      	cmp	r5, #14
    lv_obj_t * obj = lv_event_get_target(e);
 801829a:	4604      	mov	r4, r0
    if(code == LV_EVENT_FOCUSED) {
 801829c:	d112      	bne.n	80182c4 <lv_dropdown_event+0x4c>
        lv_group_t * g             = lv_obj_get_group(obj);
 801829e:	f7eb fed3 	bl	8004048 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 80182a2:	f7eb f9c2 	bl	800362a <lv_group_get_editing>
 80182a6:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80182a8:	f7eb f9c4 	bl	8003634 <lv_indev_get_act>
 80182ac:	f7eb f9c8 	bl	8003640 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80182b0:	2804      	cmp	r0, #4
 80182b2:	d12e      	bne.n	8018312 <lv_dropdown_event+0x9a>
            if(editing) {
 80182b4:	2d00      	cmp	r5, #0
 80182b6:	d05a      	beq.n	801836e <lv_dropdown_event+0xf6>
                lv_dropdown_open(obj);
 80182b8:	4620      	mov	r0, r4
}
 80182ba:	b01d      	add	sp, #116	; 0x74
 80182bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                lv_dropdown_open(obj);
 80182c0:	f7ff bdad 	b.w	8017e1e <lv_dropdown_open>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 80182c4:	f1a5 030f 	sub.w	r3, r5, #15
 80182c8:	b2db      	uxtb	r3, r3
 80182ca:	2b01      	cmp	r3, #1
 80182cc:	d804      	bhi.n	80182d8 <lv_dropdown_event+0x60>
}
 80182ce:	b01d      	add	sp, #116	; 0x74
 80182d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            lv_dropdown_close(obj);
 80182d4:	f7ff bea6 	b.w	8018024 <lv_dropdown_close>
    else if(code == LV_EVENT_RELEASED) {
 80182d8:	2d08      	cmp	r5, #8
 80182da:	d104      	bne.n	80182e6 <lv_dropdown_event+0x6e>
}
 80182dc:	b01d      	add	sp, #116	; 0x74
 80182de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                res = btn_release_handler(obj);
 80182e2:	f7ff bf8c 	b.w	80181fe <btn_release_handler.isra.0>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 80182e6:	2d2a      	cmp	r5, #42	; 0x2a
 80182e8:	d104      	bne.n	80182f4 <lv_dropdown_event+0x7c>
}
 80182ea:	b01d      	add	sp, #116	; 0x74
 80182ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_self_size(obj);
 80182f0:	f7ec beae 	b.w	8005050 <lv_obj_refresh_self_size>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80182f4:	2d29      	cmp	r5, #41	; 0x29
 80182f6:	d0f8      	beq.n	80182ea <lv_dropdown_event+0x72>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 80182f8:	2d2c      	cmp	r5, #44	; 0x2c
 80182fa:	d10d      	bne.n	8018318 <lv_dropdown_event+0xa0>
        lv_point_t * p = lv_event_get_param(e);
 80182fc:	4630      	mov	r0, r6
 80182fe:	f7ea ffad 	bl	800325c <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8018302:	2257      	movs	r2, #87	; 0x57
 8018304:	4605      	mov	r5, r0
 8018306:	2100      	movs	r1, #0
 8018308:	4620      	mov	r0, r4
 801830a:	f7ef f8bf 	bl	800748c <lv_obj_get_style_prop>
        p->y = lv_font_get_line_height(font);
 801830e:	8903      	ldrh	r3, [r0, #8]
 8018310:	806b      	strh	r3, [r5, #2]
}
 8018312:	b01d      	add	sp, #116	; 0x74
 8018314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_KEY) {
 8018318:	2d0d      	cmp	r5, #13
 801831a:	d134      	bne.n	8018386 <lv_dropdown_event+0x10e>
        char c = *((char *)lv_event_get_param(e));
 801831c:	4630      	mov	r0, r6
 801831e:	f7ea ff9d 	bl	800325c <lv_event_get_param>
 8018322:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8018324:	f1a3 0212 	sub.w	r2, r3, #18
 8018328:	2a01      	cmp	r2, #1
 801832a:	d810      	bhi.n	801834e <lv_dropdown_event+0xd6>
            if(!lv_dropdown_is_open(obj)) {
 801832c:	4620      	mov	r0, r4
 801832e:	f7ff ff5d 	bl	80181ec <lv_dropdown_is_open>
 8018332:	2800      	cmp	r0, #0
 8018334:	d0c0      	beq.n	80182b8 <lv_dropdown_event+0x40>
            else if(dropdown->sel_opt_id + 1 < dropdown->option_cnt) {
 8018336:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018338:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801833a:	3301      	adds	r3, #1
 801833c:	4293      	cmp	r3, r2
 801833e:	dae8      	bge.n	8018312 <lv_dropdown_event+0x9a>
                position_to_selected(obj);
 8018340:	4620      	mov	r0, r4
                dropdown->sel_opt_id--;
 8018342:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 8018344:	b01d      	add	sp, #116	; 0x74
 8018346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                position_to_selected(obj);
 801834a:	f7ff bb8d 	b.w	8017a68 <position_to_selected>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 801834e:	2b14      	cmp	r3, #20
 8018350:	d001      	beq.n	8018356 <lv_dropdown_event+0xde>
 8018352:	2b11      	cmp	r3, #17
 8018354:	d109      	bne.n	801836a <lv_dropdown_event+0xf2>
            if(!lv_dropdown_is_open(obj)) {
 8018356:	4620      	mov	r0, r4
 8018358:	f7ff ff48 	bl	80181ec <lv_dropdown_is_open>
 801835c:	2800      	cmp	r0, #0
 801835e:	d0ab      	beq.n	80182b8 <lv_dropdown_event+0x40>
            else if(dropdown->sel_opt_id > 0) {
 8018360:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018362:	2b00      	cmp	r3, #0
 8018364:	d0d5      	beq.n	8018312 <lv_dropdown_event+0x9a>
                dropdown->sel_opt_id--;
 8018366:	3b01      	subs	r3, #1
 8018368:	e7ea      	b.n	8018340 <lv_dropdown_event+0xc8>
        else if(c == LV_KEY_ESC) {
 801836a:	2b1b      	cmp	r3, #27
 801836c:	d103      	bne.n	8018376 <lv_dropdown_event+0xfe>
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801836e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018370:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_dropdown_close(obj);
 8018372:	4620      	mov	r0, r4
 8018374:	e7ab      	b.n	80182ce <lv_dropdown_event+0x56>
        else if(c == LV_KEY_ENTER) {
 8018376:	2b0a      	cmp	r3, #10
 8018378:	d1cb      	bne.n	8018312 <lv_dropdown_event+0x9a>
            lv_obj_t * indev_obj = lv_indev_get_obj_act();
 801837a:	f7eb fa01 	bl	8003780 <lv_indev_get_obj_act>
            if(indev_obj != obj) {
 801837e:	4284      	cmp	r4, r0
 8018380:	d0c7      	beq.n	8018312 <lv_dropdown_event+0x9a>
                res = btn_release_handler(obj);
 8018382:	4620      	mov	r0, r4
 8018384:	e7aa      	b.n	80182dc <lv_dropdown_event+0x64>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8018386:	2d15      	cmp	r5, #21
 8018388:	d1c3      	bne.n	8018312 <lv_dropdown_event+0x9a>
    lv_obj_t * obj = lv_event_get_target(e);
 801838a:	4630      	mov	r0, r6
 801838c:	f7ea ff5e 	bl	800324c <lv_event_get_target>
 8018390:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8018392:	4630      	mov	r0, r6
 8018394:	f7ea ffad 	bl	80032f2 <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8018398:	2232      	movs	r2, #50	; 0x32
 801839a:	2100      	movs	r1, #0
 801839c:	4682      	mov	sl, r0
 801839e:	4620      	mov	r0, r4
 80183a0:	f7ef f874 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80183a4:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80183a6:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80183a8:	2100      	movs	r1, #0
 80183aa:	4620      	mov	r0, r4
 80183ac:	f7ef f86e 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80183b0:	fa10 f086 	uxtah	r0, r0, r6
 80183b4:	b283      	uxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80183b6:	2213      	movs	r2, #19
 80183b8:	2100      	movs	r1, #0
 80183ba:	4620      	mov	r0, r4
 80183bc:	9304      	str	r3, [sp, #16]
 80183be:	f7ef f865 	bl	800748c <lv_obj_get_style_prop>
 80183c2:	b2b7      	uxth	r7, r6
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80183c4:	4438      	add	r0, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80183c6:	2210      	movs	r2, #16
 80183c8:	2100      	movs	r1, #0
 80183ca:	fa1f f980 	uxth.w	r9, r0
 80183ce:	4620      	mov	r0, r4
 80183d0:	f7ef f85c 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80183d4:	4438      	add	r0, r7
 80183d6:	b285      	uxth	r5, r0
    lv_draw_label_dsc_init(&symbol_dsc);
 80183d8:	a80c      	add	r0, sp, #48	; 0x30
 80183da:	f7f1 fbdd 	bl	8009b98 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_INDICATOR, &symbol_dsc);
 80183de:	aa0c      	add	r2, sp, #48	; 0x30
 80183e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80183e4:	4620      	mov	r0, r4
 80183e6:	f7ec fa6b 	bl	80048c0 <lv_obj_init_draw_label_dsc>
    if(dropdown->text) opt_txt = dropdown->text;
 80183ea:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80183ec:	b947      	cbnz	r7, 8018400 <lv_dropdown_event+0x188>
        char * buf = lv_mem_buf_get(128);
 80183ee:	2080      	movs	r0, #128	; 0x80
 80183f0:	f7fa ffea 	bl	80133c8 <lv_mem_buf_get>
        lv_dropdown_get_selected_str(obj, buf, 128);
 80183f4:	2280      	movs	r2, #128	; 0x80
        char * buf = lv_mem_buf_get(128);
 80183f6:	4607      	mov	r7, r0
        lv_dropdown_get_selected_str(obj, buf, 128);
 80183f8:	4601      	mov	r1, r0
 80183fa:	4620      	mov	r0, r4
 80183fc:	f7ff fcdc 	bl	8017db8 <lv_dropdown_get_selected_str>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8018400:	2216      	movs	r2, #22
 8018402:	2100      	movs	r1, #0
 8018404:	4620      	mov	r0, r4
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 8018406:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
 801840a:	f7ef f83f 	bl	800748c <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801840e:	fa5f f880 	uxtb.w	r8, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 8018412:	f1b8 0f01 	cmp.w	r8, #1
 8018416:	d007      	beq.n	8018428 <lv_dropdown_event+0x1b0>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 8018418:	f006 080f 	and.w	r8, r6, #15
 801841c:	f108 33ff 	add.w	r3, r8, #4294967295
 8018420:	f1d3 0800 	rsbs	r8, r3, #0
 8018424:	eb48 0803 	adc.w	r8, r8, r3
    if(dropdown->symbol) {
 8018428:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801842a:	2800      	cmp	r0, #0
 801842c:	d03b      	beq.n	80184a6 <lv_dropdown_event+0x22e>
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 801842e:	f7f1 fa4d 	bl	80098cc <lv_img_src_get_type>
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8018432:	2802      	cmp	r0, #2
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 8018434:	4683      	mov	fp, r0
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8018436:	d16d      	bne.n	8018514 <lv_dropdown_event+0x29c>
            lv_txt_get_size(&size, dropdown->symbol, symbol_dsc.font, symbol_dsc.letter_space, symbol_dsc.line_space, LV_COORD_MAX,
 8018438:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 801843c:	9302      	str	r3, [sp, #8]
 801843e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8018442:	9301      	str	r3, [sp, #4]
 8018444:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8018448:	9300      	str	r3, [sp, #0]
 801844a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801844c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8018450:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018452:	a814      	add	r0, sp, #80	; 0x50
 8018454:	f7fc ff32 	bl	80152bc <lv_txt_get_size>
            symbol_w = size.x;
 8018458:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
            symbol_h = size.y;
 801845c:	f9bd 6052 	ldrsh.w	r6, [sp, #82]	; 0x52
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8018460:	b299      	uxth	r1, r3
        if(symbol_to_left) {
 8018462:	f1b8 0f00 	cmp.w	r8, #0
 8018466:	d067      	beq.n	8018538 <lv_dropdown_event+0x2c0>
            symbol_area.x1 = obj->coords.x1 + left;
 8018468:	8aa2      	ldrh	r2, [r4, #20]
 801846a:	9804      	ldr	r0, [sp, #16]
 801846c:	4402      	add	r2, r0
 801846e:	b292      	uxth	r2, r2
 8018470:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8018474:	3a01      	subs	r2, #1
 8018476:	440a      	add	r2, r1
 8018478:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 801847c:	f1bb 0f02 	cmp.w	fp, #2
            symbol_area.y1 = obj->coords.y1 + top;
 8018480:	8ae2      	ldrh	r2, [r4, #22]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8018482:	b2b1      	uxth	r1, r6
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8018484:	d166      	bne.n	8018554 <lv_dropdown_event+0x2dc>
            symbol_area.y1 = obj->coords.y1 + top;
 8018486:	442a      	add	r2, r5
 8018488:	b292      	uxth	r2, r2
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 801848a:	2300      	movs	r3, #0
            symbol_area.y1 = obj->coords.y1 + top;
 801848c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8018490:	3a01      	subs	r2, #1
 8018492:	4411      	add	r1, r2
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 8018494:	9300      	str	r3, [sp, #0]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8018496:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 801849a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801849c:	aa0a      	add	r2, sp, #40	; 0x28
 801849e:	a90c      	add	r1, sp, #48	; 0x30
 80184a0:	4650      	mov	r0, sl
 80184a2:	f7f1 fb97 	bl	8009bd4 <lv_draw_label>
    lv_draw_label_dsc_init(&label_dsc);
 80184a6:	a814      	add	r0, sp, #80	; 0x50
 80184a8:	f7f1 fb76 	bl	8009b98 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 80184ac:	aa14      	add	r2, sp, #80	; 0x50
 80184ae:	2100      	movs	r1, #0
 80184b0:	4620      	mov	r0, r4
 80184b2:	f7ec fa05 	bl	80048c0 <lv_obj_init_draw_label_dsc>
    lv_txt_get_size(&size, opt_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 80184b6:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80184ba:	9302      	str	r3, [sp, #8]
 80184bc:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80184c0:	9301      	str	r3, [sp, #4]
 80184c2:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 80184c6:	9300      	str	r3, [sp, #0]
 80184c8:	a809      	add	r0, sp, #36	; 0x24
 80184ca:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 80184ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80184d0:	4639      	mov	r1, r7
 80184d2:	f7fc fef3 	bl	80152bc <lv_txt_get_size>
    txt_area.y1 = obj->coords.y1 + top;
 80184d6:	8ae0      	ldrh	r0, [r4, #22]
    txt_area.y2 = txt_area.y1 + size.y;
 80184d8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    txt_area.y1 = obj->coords.y1 + top;
 80184dc:	4405      	add	r5, r0
 80184de:	b2ad      	uxth	r5, r5
 80184e0:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
    txt_area.y2 = txt_area.y1 + size.y;
 80184e4:	441d      	add	r5, r3
    if(dropdown->symbol == NULL) {
 80184e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    txt_area.y2 = txt_area.y1 + size.y;
 80184e8:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    if(dropdown->symbol == NULL) {
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d168      	bne.n	80185c2 <lv_dropdown_event+0x34a>
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 80184f0:	4620      	mov	r0, r4
 80184f2:	8aa5      	ldrh	r5, [r4, #20]
 80184f4:	f7ec fd22 	bl	8004f3c <lv_obj_get_width>
 80184f8:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 80184fc:	1a80      	subs	r0, r0, r2
 80184fe:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8018502:	eb05 0560 	add.w	r5, r5, r0, asr #1
 8018506:	b2ab      	uxth	r3, r5
            txt_area.x1 = obj->coords.x1 + left;
 8018508:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            txt_area.x2 = txt_area.x1 + size.x;
 801850c:	4413      	add	r3, r2
 801850e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8018512:	e066      	b.n	80185e2 <lv_dropdown_event+0x36a>
            lv_res_t res = lv_img_decoder_get_info(dropdown->symbol, &header);
 8018514:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8018516:	a914      	add	r1, sp, #80	; 0x50
 8018518:	f7f3 fa28 	bl	800b96c <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 801851c:	2801      	cmp	r0, #1
                symbol_w = header.w;
 801851e:	bf05      	ittet	eq
 8018520:	9b14      	ldreq	r3, [sp, #80]	; 0x50
                symbol_h = header.h;
 8018522:	f8bd 6052 	ldrheq.w	r6, [sp, #82]	; 0x52
                symbol_h = -1;
 8018526:	f04f 36ff 	movne.w	r6, #4294967295
                symbol_w = header.w;
 801852a:	f3c3 238a 	ubfxeq	r3, r3, #10, #11
                symbol_h = header.h;
 801852e:	bf0c      	ite	eq
 8018530:	f3c6 164a 	ubfxeq	r6, r6, #5, #11
                symbol_w = -1;
 8018534:	4633      	movne	r3, r6
 8018536:	e793      	b.n	8018460 <lv_dropdown_event+0x1e8>
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 8018538:	8b20      	ldrh	r0, [r4, #24]
 801853a:	eba0 0009 	sub.w	r0, r0, r9
 801853e:	b280      	uxth	r0, r0
 8018540:	1a42      	subs	r2, r0, r1
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8018542:	3801      	subs	r0, #1
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 8018544:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8018548:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 801854c:	e796      	b.n	801847c <lv_dropdown_event+0x204>
 801854e:	bf00      	nop
 8018550:	080204f0 	.word	0x080204f0
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 8018554:	4620      	mov	r0, r4
 8018556:	9305      	str	r3, [sp, #20]
 8018558:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801855c:	f7ec fcf4 	bl	8004f48 <lv_obj_get_height>
 8018560:	9a07      	ldr	r2, [sp, #28]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8018562:	9906      	ldr	r1, [sp, #24]
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 8018564:	1b80      	subs	r0, r0, r6
 8018566:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801856a:	eb02 0260 	add.w	r2, r2, r0, asr #1
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801856e:	3901      	subs	r1, #1
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 8018570:	b292      	uxth	r2, r2
 8018572:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            lv_draw_img_dsc_init(&img_dsc);
 8018576:	a814      	add	r0, sp, #80	; 0x50
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8018578:	440a      	add	r2, r1
 801857a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            lv_draw_img_dsc_init(&img_dsc);
 801857e:	f7f1 f973 	bl	8009868 <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 8018582:	aa14      	add	r2, sp, #80	; 0x50
 8018584:	4620      	mov	r0, r4
 8018586:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801858a:	f7ec f9e5 	bl	8004958 <lv_obj_init_draw_img_dsc>
            img_dsc.pivot.x = symbol_w / 2;
 801858e:	9b05      	ldr	r3, [sp, #20]
            img_dsc.pivot.y = symbol_h / 2;
 8018590:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            img_dsc.pivot.x = symbol_w / 2;
 8018594:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8018598:	105b      	asrs	r3, r3, #1
            img_dsc.pivot.y = symbol_h / 2;
 801859a:	1076      	asrs	r6, r6, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801859c:	226d      	movs	r2, #109	; 0x6d
 801859e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80185a2:	4620      	mov	r0, r4
            img_dsc.pivot.x = symbol_w / 2;
 80185a4:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            img_dsc.pivot.y = symbol_h / 2;
 80185a8:	f8ad 6056 	strh.w	r6, [sp, #86]	; 0x56
 80185ac:	f7ee ff6e 	bl	800748c <lv_obj_get_style_prop>
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 80185b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            img_dsc.angle = lv_obj_get_style_transform_angle(obj, LV_PART_INDICATOR);
 80185b2:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 80185b6:	aa0a      	add	r2, sp, #40	; 0x28
 80185b8:	a914      	add	r1, sp, #80	; 0x50
 80185ba:	4650      	mov	r0, sl
 80185bc:	f7f1 f9a2 	bl	8009904 <lv_draw_img>
 80185c0:	e771      	b.n	80184a6 <lv_dropdown_event+0x22e>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 80185c2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
        if(symbol_to_left) {
 80185c6:	f1b8 0f00 	cmp.w	r8, #0
 80185ca:	d01a      	beq.n	8018602 <lv_dropdown_event+0x38a>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 80185cc:	8b20      	ldrh	r0, [r4, #24]
 80185ce:	eba0 0909 	sub.w	r9, r0, r9
 80185d2:	fa1f f989 	uxth.w	r9, r9
 80185d6:	eba9 0302 	sub.w	r3, r9, r2
 80185da:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            txt_area.x2 = txt_area.x1 + size.x;
 80185de:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
    lv_draw_label(draw_ctx, &label_dsc, &txt_area, opt_txt, NULL);
 80185e2:	2300      	movs	r3, #0
 80185e4:	9300      	str	r3, [sp, #0]
 80185e6:	aa0a      	add	r2, sp, #40	; 0x28
 80185e8:	463b      	mov	r3, r7
 80185ea:	a914      	add	r1, sp, #80	; 0x50
 80185ec:	4650      	mov	r0, sl
 80185ee:	f7f1 faf1 	bl	8009bd4 <lv_draw_label>
    if(dropdown->text == NULL) {
 80185f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	f47f ae8c 	bne.w	8018312 <lv_dropdown_event+0x9a>
        lv_mem_buf_release((char *)opt_txt);
 80185fa:	4638      	mov	r0, r7
 80185fc:	f7fa ff30 	bl	8013460 <lv_mem_buf_release>
}
 8018600:	e687      	b.n	8018312 <lv_dropdown_event+0x9a>
            txt_area.x1 = obj->coords.x1 + left;
 8018602:	8aa3      	ldrh	r3, [r4, #20]
 8018604:	9904      	ldr	r1, [sp, #16]
 8018606:	4419      	add	r1, r3
 8018608:	b28b      	uxth	r3, r1
 801860a:	e77d      	b.n	8018508 <lv_dropdown_event+0x290>

0801860c <lv_label_dot_tmp_free>:
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 801860c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8018610:	065b      	lsls	r3, r3, #25
{
 8018612:	b510      	push	{r4, lr}
 8018614:	4604      	mov	r4, r0
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8018616:	d503      	bpl.n	8018620 <lv_label_dot_tmp_free+0x14>
 8018618:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801861a:	b108      	cbz	r0, 8018620 <lv_label_dot_tmp_free+0x14>
        lv_mem_free(label->dot.tmp_ptr);
 801861c:	f7fa fea2 	bl	8013364 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 8018620:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018624:	f36f 1386 	bfc	r3, #6, #1
 8018628:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 801862c:	2300      	movs	r3, #0
 801862e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8018630:	bd10      	pop	{r4, pc}

08018632 <lv_label_destructor>:
{
 8018632:	b510      	push	{r4, lr}
 8018634:	460c      	mov	r4, r1
    lv_label_dot_tmp_free(obj);
 8018636:	4608      	mov	r0, r1
 8018638:	f7ff ffe8 	bl	801860c <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 801863c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018640:	071b      	lsls	r3, r3, #28
 8018642:	d402      	bmi.n	801864a <lv_label_destructor+0x18>
 8018644:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018646:	f7fa fe8d 	bl	8013364 <lv_mem_free>
    label->text = NULL;
 801864a:	2300      	movs	r3, #0
 801864c:	6263      	str	r3, [r4, #36]	; 0x24
}
 801864e:	bd10      	pop	{r4, pc}

08018650 <set_ofs_y_anim>:
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 8018650:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    lv_obj_invalidate(obj);
 8018654:	f7ec be88 	b.w	8005368 <lv_obj_invalidate>

08018658 <set_ofs_x_anim>:
    label->offset.x    = v;
 8018658:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    lv_obj_invalidate(obj);
 801865c:	f7ec be84 	b.w	8005368 <lv_obj_invalidate>

08018660 <lv_label_revert_dots>:
{
 8018660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 8018662:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8018666:	f003 0307 	and.w	r3, r3, #7
 801866a:	2b01      	cmp	r3, #1
{
 801866c:	4604      	mov	r4, r0
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 801866e:	d122      	bne.n	80186b6 <lv_label_revert_dots+0x56>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 8018670:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8018672:	1c4a      	adds	r2, r1, #1
 8018674:	d01f      	beq.n	80186b6 <lv_label_revert_dots+0x56>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 8018676:	4b11      	ldr	r3, [pc, #68]	; (80186bc <lv_label_revert_dots+0x5c>)
 8018678:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	3903      	subs	r1, #3
 801867e:	4798      	blx	r3
    if(label->dot_tmp_alloc) {
 8018680:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018684:	065b      	lsls	r3, r3, #25
        return label->dot.tmp_ptr;
 8018686:	bf4c      	ite	mi
 8018688:	6aa6      	ldrmi	r6, [r4, #40]	; 0x28
        return label->dot.tmp;
 801868a:	f104 0628 	addpl.w	r6, r4, #40	; 0x28
    while(label->text[byte_i + i] != '\0') {
 801868e:	2300      	movs	r3, #0
 8018690:	fa50 f283 	uxtab	r2, r0, r3
 8018694:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018696:	b2dd      	uxtb	r5, r3
 8018698:	f811 c002 	ldrb.w	ip, [r1, r2]
        label->text[byte_i + i] = dot_tmp[i];
 801869c:	5d75      	ldrb	r5, [r6, r5]
    while(label->text[byte_i + i] != '\0') {
 801869e:	188f      	adds	r7, r1, r2
 80186a0:	3301      	adds	r3, #1
 80186a2:	f1bc 0f00 	cmp.w	ip, #0
 80186a6:	d107      	bne.n	80186b8 <lv_label_revert_dots+0x58>
    label->text[byte_i + i] = dot_tmp[i];
 80186a8:	703d      	strb	r5, [r7, #0]
    lv_label_dot_tmp_free(obj);
 80186aa:	4620      	mov	r0, r4
 80186ac:	f7ff ffae 	bl	801860c <lv_label_dot_tmp_free>
    label->dot_end = LV_LABEL_DOT_END_INV;
 80186b0:	f04f 33ff 	mov.w	r3, #4294967295
 80186b4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80186b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        label->text[byte_i + i] = dot_tmp[i];
 80186b8:	548d      	strb	r5, [r1, r2]
        i++;
 80186ba:	e7e9      	b.n	8018690 <lv_label_revert_dots+0x30>
 80186bc:	2000001c 	.word	0x2000001c

080186c0 <lv_obj_get_style_text_line_space.constprop.0>:
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 80186c0:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80186c2:	2259      	movs	r2, #89	; 0x59
 80186c4:	2100      	movs	r1, #0
 80186c6:	f7ee fee1 	bl	800748c <lv_obj_get_style_prop>
}
 80186ca:	b200      	sxth	r0, r0
 80186cc:	bd08      	pop	{r3, pc}

080186ce <lv_obj_get_style_text_letter_space.constprop.0>:
static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t part)
 80186ce:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80186d0:	2258      	movs	r2, #88	; 0x58
 80186d2:	2100      	movs	r1, #0
 80186d4:	f7ee feda 	bl	800748c <lv_obj_get_style_prop>
}
 80186d8:	b200      	sxth	r0, r0
 80186da:	bd08      	pop	{r3, pc}

080186dc <lv_obj_get_style_text_font.constprop.0>:
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 80186dc:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80186de:	2257      	movs	r2, #87	; 0x57
 80186e0:	2100      	movs	r1, #0
 80186e2:	f7ee fed3 	bl	800748c <lv_obj_get_style_prop>
}
 80186e6:	bd08      	pop	{r3, pc}

080186e8 <lv_obj_get_style_width.constprop.0>:
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
 80186e8:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80186ea:	2201      	movs	r2, #1
 80186ec:	2100      	movs	r1, #0
 80186ee:	f7ee fecd 	bl	800748c <lv_obj_get_style_prop>
}
 80186f2:	b200      	sxth	r0, r0
 80186f4:	bd08      	pop	{r3, pc}
	...

080186f8 <lv_label_get_letter_on.part.0>:
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 80186f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186fc:	ed2d 8b02 	vpush	{d8}
 8018700:	b08f      	sub	sp, #60	; 0x3c
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8018702:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018706:	9304      	str	r3, [sp, #16]
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 8018708:	460d      	mov	r5, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801870a:	2212      	movs	r2, #18
 801870c:	2100      	movs	r1, #0
 801870e:	4604      	mov	r4, r0
 8018710:	f7ee febc 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8018714:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8018716:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8018718:	2100      	movs	r1, #0
 801871a:	4620      	mov	r0, r4
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801871c:	886d      	ldrh	r5, [r5, #2]
 801871e:	f7ee feb5 	bl	800748c <lv_obj_get_style_prop>
 8018722:	1a28      	subs	r0, r5, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8018724:	a90c      	add	r1, sp, #48	; 0x30
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8018726:	b203      	sxth	r3, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8018728:	4620      	mov	r0, r4
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801872a:	9305      	str	r3, [sp, #20]
    lv_obj_get_content_coords(obj, &txt_coords);
 801872c:	f7ec fc3e 	bl	8004fac <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8018730:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8018734:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    return label->text;
 8018738:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
 801873c:	3301      	adds	r3, #1
 801873e:	1a9b      	subs	r3, r3, r2
 8018740:	b21b      	sxth	r3, r3
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8018742:	4620      	mov	r0, r4
 8018744:	ee08 3a10 	vmov	s16, r3
 8018748:	f7ff ffc8 	bl	80186dc <lv_obj_get_style_text_font.constprop.0>
 801874c:	4680      	mov	r8, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801874e:	4620      	mov	r0, r4
 8018750:	f7ff ffb6 	bl	80186c0 <lv_obj_get_style_text_line_space.constprop.0>
 8018754:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8018756:	4620      	mov	r0, r4
 8018758:	f7ff ffb9 	bl	80186ce <lv_obj_get_style_text_letter_space.constprop.0>
 801875c:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 8018760:	9302      	str	r3, [sp, #8]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8018762:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8018766:	4683      	mov	fp, r0
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8018768:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801876a:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801876e:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8018770:	bf48      	it	mi
 8018772:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8018776:	f7ff ffb7 	bl	80186e8 <lv_obj_get_style_width.constprop.0>
 801877a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801877e:	4298      	cmp	r0, r3
 8018780:	d105      	bne.n	801878e <lv_label_get_letter_on.part.0+0x96>
 8018782:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8018786:	075b      	lsls	r3, r3, #29
 8018788:	bf58      	it	pl
 801878a:	f047 0704 	orrpl.w	r7, r7, #4
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 801878e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018790:	4620      	mov	r0, r4
 8018792:	2100      	movs	r1, #0
 8018794:	f7ef fc14 	bl	8007fc0 <lv_obj_calculate_style_text_align>
        y += letter_height + line_space;
 8018798:	9b02      	ldr	r3, [sp, #8]
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 801879a:	9003      	str	r0, [sp, #12]
    lv_coord_t y             = 0;
 801879c:	2400      	movs	r4, #0
        y += letter_height + line_space;
 801879e:	442b      	add	r3, r5
    uint32_t line_start      = 0;
 80187a0:	4626      	mov	r6, r4
        y += letter_height + line_space;
 80187a2:	9307      	str	r3, [sp, #28]
    while(txt[line_start] != '\0') {
 80187a4:	f819 3006 	ldrb.w	r3, [r9, r6]
 80187a8:	eb09 0a06 	add.w	sl, r9, r6
 80187ac:	b90b      	cbnz	r3, 80187b2 <lv_label_get_letter_on.part.0+0xba>
 80187ae:	4635      	mov	r5, r6
 80187b0:	e01c      	b.n	80187ec <lv_label_get_letter_on.part.0+0xf4>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80187b2:	2300      	movs	r3, #0
 80187b4:	9300      	str	r3, [sp, #0]
 80187b6:	465a      	mov	r2, fp
 80187b8:	ee18 3a10 	vmov	r3, s16
 80187bc:	9701      	str	r7, [sp, #4]
 80187be:	4641      	mov	r1, r8
 80187c0:	4650      	mov	r0, sl
 80187c2:	f7fc fbb7 	bl	8014f34 <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
 80187c6:	9b02      	ldr	r3, [sp, #8]
 80187c8:	9a05      	ldr	r2, [sp, #20]
 80187ca:	18e3      	adds	r3, r4, r3
 80187cc:	429a      	cmp	r2, r3
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80187ce:	eb00 0506 	add.w	r5, r0, r6
        if(pos.y <= y + letter_height) {
 80187d2:	dc6c      	bgt.n	80188ae <lv_label_get_letter_on.part.0+0x1b6>
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80187d4:	4b45      	ldr	r3, [pc, #276]	; (80188ec <lv_label_get_letter_on.part.0+0x1f4>)
            uint32_t tmp = new_line_start;
 80187d6:	950b      	str	r5, [sp, #44]	; 0x2c
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	a90b      	add	r1, sp, #44	; 0x2c
 80187dc:	4648      	mov	r0, r9
 80187de:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 80187e0:	280a      	cmp	r0, #10
 80187e2:	d003      	beq.n	80187ec <lv_label_get_letter_on.part.0+0xf4>
 80187e4:	f819 3005 	ldrb.w	r3, [r9, r5]
 80187e8:	b903      	cbnz	r3, 80187ec <lv_label_get_letter_on.part.0+0xf4>
 80187ea:	3501      	adds	r5, #1
    if(align == LV_TEXT_ALIGN_CENTER) {
 80187ec:	9b03      	ldr	r3, [sp, #12]
 80187ee:	2b02      	cmp	r3, #2
 80187f0:	d162      	bne.n	80188b8 <lv_label_get_letter_on.part.0+0x1c0>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80187f2:	465b      	mov	r3, fp
 80187f4:	9700      	str	r7, [sp, #0]
 80187f6:	4642      	mov	r2, r8
 80187f8:	1ba9      	subs	r1, r5, r6
 80187fa:	4650      	mov	r0, sl
 80187fc:	f7fc fd1c 	bl	8015238 <lv_txt_get_width>
 8018800:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8018804:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8018808:	3401      	adds	r4, #1
 801880a:	1ae4      	subs	r4, r4, r3
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801880c:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 8018810:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8018814:	fa03 f384 	sxtah	r3, r3, r4
 8018818:	1044      	asrs	r4, r0, #1
 801881a:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 801881e:	b224      	sxth	r4, r4
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8018820:	2300      	movs	r3, #0
 8018822:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t i = 0;
 8018826:	9309      	str	r3, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 8018828:	2d00      	cmp	r5, #0
 801882a:	d030      	beq.n	801888e <lv_label_get_letter_on.part.0+0x196>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801882c:	9a04      	ldr	r2, [sp, #16]
 801882e:	9906      	ldr	r1, [sp, #24]
 8018830:	1a52      	subs	r2, r2, r1
 8018832:	b212      	sxth	r2, r2
    uint32_t i_act = i;
 8018834:	e9cd 3202 	strd	r3, r2, [sp, #8]
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8018838:	f007 0701 	and.w	r7, r7, #1
        while(i + line_start < new_line_start) {
 801883c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801883e:	4433      	add	r3, r6
 8018840:	429d      	cmp	r5, r3
 8018842:	d924      	bls.n	801888e <lv_label_get_letter_on.part.0+0x196>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8018844:	ab09      	add	r3, sp, #36	; 0x24
 8018846:	aa0b      	add	r2, sp, #44	; 0x2c
 8018848:	a90a      	add	r1, sp, #40	; 0x28
 801884a:	4650      	mov	r0, sl
 801884c:	f7fc fcda 	bl	8015204 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8018850:	b147      	cbz	r7, 8018864 <lv_label_get_letter_on.part.0+0x16c>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 8018852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018854:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 8018858:	f81a 1003 	ldrb.w	r1, [sl, r3]
 801885c:	f7fc fb4c 	bl	8014ef8 <_lv_txt_is_cmd>
 8018860:	2800      	cmp	r0, #0
 8018862:	d1eb      	bne.n	801883c <lv_label_get_letter_on.part.0+0x144>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 8018864:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8018868:	4640      	mov	r0, r8
 801886a:	f7f9 fb85 	bl	8011f78 <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 801886e:	9a03      	ldr	r2, [sp, #12]
 8018870:	fa04 f380 	sxtah	r3, r4, r0
 8018874:	429a      	cmp	r2, r3
 8018876:	db08      	blt.n	801888a <lv_label_get_letter_on.part.0+0x192>
 8018878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801887a:	18f2      	adds	r2, r6, r3
 801887c:	4295      	cmp	r5, r2
 801887e:	d004      	beq.n	801888a <lv_label_get_letter_on.part.0+0x192>
 8018880:	9902      	ldr	r1, [sp, #8]
 8018882:	eb09 0206 	add.w	r2, r9, r6
 8018886:	5c52      	ldrb	r2, [r2, r1]
 8018888:	bb5a      	cbnz	r2, 80188e2 <lv_label_get_letter_on.part.0+0x1ea>
                i = i_act;
 801888a:	9b02      	ldr	r3, [sp, #8]
 801888c:	9309      	str	r3, [sp, #36]	; 0x24
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 801888e:	4d18      	ldr	r5, [pc, #96]	; (80188f0 <lv_label_get_letter_on.part.0+0x1f8>)
 8018890:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018892:	682b      	ldr	r3, [r5, #0]
 8018894:	4650      	mov	r0, sl
 8018896:	4798      	blx	r3
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 8018898:	682b      	ldr	r3, [r5, #0]
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 801889a:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 801889c:	4631      	mov	r1, r6
 801889e:	4648      	mov	r0, r9
 80188a0:	4798      	blx	r3
}
 80188a2:	4420      	add	r0, r4
 80188a4:	b00f      	add	sp, #60	; 0x3c
 80188a6:	ecbd 8b02 	vpop	{d8}
 80188aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + line_space;
 80188ae:	9b07      	ldr	r3, [sp, #28]
 80188b0:	441c      	add	r4, r3
 80188b2:	b224      	sxth	r4, r4
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80188b4:	462e      	mov	r6, r5
 80188b6:	e775      	b.n	80187a4 <lv_label_get_letter_on.part.0+0xac>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80188b8:	9b03      	ldr	r3, [sp, #12]
 80188ba:	2b03      	cmp	r3, #3
 80188bc:	d10f      	bne.n	80188de <lv_label_get_letter_on.part.0+0x1e6>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80188be:	465b      	mov	r3, fp
 80188c0:	9700      	str	r7, [sp, #0]
 80188c2:	4642      	mov	r2, r8
 80188c4:	1ba9      	subs	r1, r5, r6
 80188c6:	4650      	mov	r0, sl
 80188c8:	f7fc fcb6 	bl	8015238 <lv_txt_get_width>
 80188cc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80188d0:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80188d4:	3301      	adds	r3, #1
 80188d6:	1b1b      	subs	r3, r3, r4
        x += lv_area_get_width(&txt_coords) - line_w;
 80188d8:	1a18      	subs	r0, r3, r0
 80188da:	b204      	sxth	r4, r0
 80188dc:	e7a0      	b.n	8018820 <lv_label_get_letter_on.part.0+0x128>
    lv_coord_t x = 0;
 80188de:	2400      	movs	r4, #0
 80188e0:	e79e      	b.n	8018820 <lv_label_get_letter_on.part.0+0x128>
            x += letter_space;
 80188e2:	445c      	add	r4, fp
 80188e4:	4420      	add	r0, r4
 80188e6:	b204      	sxth	r4, r0
            i_act = i;
 80188e8:	9302      	str	r3, [sp, #8]
 80188ea:	e7a7      	b.n	801883c <lv_label_get_letter_on.part.0+0x144>
 80188ec:	20000028 	.word	0x20000028
 80188f0:	20000020 	.word	0x20000020

080188f4 <lv_label_refr_text>:
{
 80188f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(label->text == NULL) return;
 80188f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80188fa:	b09d      	sub	sp, #116	; 0x74
 80188fc:	4604      	mov	r4, r0
    if(label->text == NULL) return;
 80188fe:	2b00      	cmp	r3, #0
 8018900:	f000 80e0 	beq.w	8018ac4 <lv_label_refr_text+0x1d0>
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8018904:	f04f 33ff 	mov.w	r3, #4294967295
    lv_obj_get_content_coords(obj, &txt_coords);
 8018908:	a909      	add	r1, sp, #36	; 0x24
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 801890a:	6303      	str	r3, [r0, #48]	; 0x30
    lv_obj_get_content_coords(obj, &txt_coords);
 801890c:	f7ec fb4e 	bl	8004fac <lv_obj_get_content_coords>
 8018910:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 8018914:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018918:	f108 0801 	add.w	r8, r8, #1
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801891c:	4620      	mov	r0, r4
 801891e:	eba8 0803 	sub.w	r8, r8, r3
 8018922:	f7ff fedb 	bl	80186dc <lv_obj_get_style_text_font.constprop.0>
 8018926:	4606      	mov	r6, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8018928:	4620      	mov	r0, r4
 801892a:	f7ff fec9 	bl	80186c0 <lv_obj_get_style_text_line_space.constprop.0>
 801892e:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8018930:	4620      	mov	r0, r4
 8018932:	f7ff fecc 	bl	80186ce <lv_obj_get_style_text_letter_space.constprop.0>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8018936:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801893a:	4681      	mov	r9, r0
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801893c:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801893e:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8018942:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8018944:	bf48      	it	mi
 8018946:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801894a:	f7ff fecd 	bl	80186e8 <lv_obj_get_style_width.constprop.0>
 801894e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8018952:	4298      	cmp	r0, r3
 8018954:	fa0f f888 	sxth.w	r8, r8
 8018958:	d105      	bne.n	8018966 <lv_label_refr_text+0x72>
 801895a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801895e:	075b      	lsls	r3, r3, #29
 8018960:	bf58      	it	pl
 8018962:	f047 0704 	orrpl.w	r7, r7, #4
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8018966:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018968:	9500      	str	r5, [sp, #0]
 801896a:	464b      	mov	r3, r9
 801896c:	4632      	mov	r2, r6
 801896e:	a807      	add	r0, sp, #28
 8018970:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8018974:	f7fc fca2 	bl	80152bc <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 8018978:	4620      	mov	r0, r4
 801897a:	f7ec fb69 	bl	8005050 <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 801897e:	f894 a048 	ldrb.w	sl, [r4, #72]	; 0x48
 8018982:	f00a 0a07 	and.w	sl, sl, #7
 8018986:	f1ba 0f02 	cmp.w	sl, #2
 801898a:	f040 80a9 	bne.w	8018ae0 <lv_label_refr_text+0x1ec>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 801898e:	2265      	movs	r2, #101	; 0x65
 8018990:	2100      	movs	r1, #0
 8018992:	4620      	mov	r0, r4
 8018994:	f7ee fd7a 	bl	800748c <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8018998:	b287      	uxth	r7, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801899a:	b947      	cbnz	r7, 80189ae <lv_label_refr_text+0xba>
 801899c:	4620      	mov	r0, r4
 801899e:	f7ef fb45 	bl	800802c <lv_obj_get_disp>
 80189a2:	f7f9 fd05 	bl	80123b0 <lv_disp_get_dpi>
 80189a6:	2703      	movs	r7, #3
 80189a8:	fb90 f0f7 	sdiv	r0, r0, r7
 80189ac:	b287      	uxth	r7, r0
        lv_anim_init(&a);
 80189ae:	a80b      	add	r0, sp, #44	; 0x2c
 80189b0:	f7f9 fe34 	bl	801261c <lv_anim_init>
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 80189b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189b8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    a->playback_delay = delay;
 80189bc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80189c0:	9318      	str	r3, [sp, #96]	; 0x60
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
 80189c2:	931a      	str	r3, [sp, #104]	; 0x68
 80189c4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80189c8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        if(size.x > lv_area_get_width(&txt_coords)) {
 80189cc:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
    a->var = var;
 80189d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80189d2:	3301      	adds	r3, #1
 80189d4:	1a5b      	subs	r3, r3, r1
 80189d6:	b21b      	sxth	r3, r3
 80189d8:	429a      	cmp	r2, r3
 80189da:	f04f 0500 	mov.w	r5, #0
 80189de:	dd76      	ble.n	8018ace <lv_label_refr_text+0x1da>
    a->exec_cb = exec_cb;
 80189e0:	4999      	ldr	r1, [pc, #612]	; (8018c48 <lv_label_refr_text+0x354>)
 80189e2:	910c      	str	r1, [sp, #48]	; 0x30
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 80189e4:	1a9b      	subs	r3, r3, r2
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 80189e6:	4620      	mov	r0, r4
    a->current_value = start;
 80189e8:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    a->end_value = end;
 80189ec:	9315      	str	r3, [sp, #84]	; 0x54
 80189ee:	f7f9 fea1 	bl	8012734 <lv_anim_get>
            if(anim_cur) {
 80189f2:	2800      	cmp	r0, #0
 80189f4:	d069      	beq.n	8018aca <lv_label_refr_text+0x1d6>
                act_time = anim_cur->act_time;
 80189f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
                playback_now = anim_cur->playback_now;
 80189f8:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 80189fc:	f3c0 0040 	ubfx	r0, r0, #1, #1
            if(act_time < a.time) {
 8018a00:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018a02:	429a      	cmp	r2, r3
 8018a04:	dd10      	ble.n	8018a28 <lv_label_refr_text+0x134>
                a.act_time = act_time;      /*To keep the old position*/
 8018a06:	9317      	str	r3, [sp, #92]	; 0x5c
                a.early_apply = 0;
 8018a08:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
                    tmp      = a.start_value;
 8018a0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                    a.start_value = a.end_value;
 8018a0e:	9915      	ldr	r1, [sp, #84]	; 0x54
                a.early_apply = 0;
 8018a10:	f36f 0300 	bfc	r3, #0, #1
 8018a14:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
                if(playback_now) {
 8018a18:	b130      	cbz	r0, 8018a28 <lv_label_refr_text+0x134>
                    a.playback_now = 1;
 8018a1a:	b2db      	uxtb	r3, r3
 8018a1c:	f043 0302 	orr.w	r3, r3, #2
 8018a20:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
                    a.start_value = a.end_value;
 8018a24:	9113      	str	r1, [sp, #76]	; 0x4c
                    a.end_value   = tmp;
 8018a26:	9215      	str	r2, [sp, #84]	; 0x54
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8018a28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018a2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018a2c:	4638      	mov	r0, r7
 8018a2e:	f7f9 fe99 	bl	8012764 <lv_anim_speed_to_time>
    a->time = duration;
 8018a32:	9016      	str	r0, [sp, #88]	; 0x58
    a->playback_time = time;
 8018a34:	9019      	str	r0, [sp, #100]	; 0x64
            lv_anim_start(&a);
 8018a36:	a80b      	add	r0, sp, #44	; 0x2c
 8018a38:	f7f9 fe3a 	bl	80126b0 <lv_anim_start>
            hor_anim = true;
 8018a3c:	2501      	movs	r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018a3e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8018a42:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8018a46:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8018a4a:	3301      	adds	r3, #1
 8018a4c:	1a5b      	subs	r3, r3, r1
 8018a4e:	b21b      	sxth	r3, r3
 8018a50:	429a      	cmp	r2, r3
 8018a52:	f340 80dd 	ble.w	8018c10 <lv_label_refr_text+0x31c>
 8018a56:	2d00      	cmp	r5, #0
 8018a58:	f040 80da 	bne.w	8018c10 <lv_label_refr_text+0x31c>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8018a5c:	1a9b      	subs	r3, r3, r2
 8018a5e:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
    a->exec_cb = exec_cb;
 8018a62:	497a      	ldr	r1, [pc, #488]	; (8018c4c <lv_label_refr_text+0x358>)
 8018a64:	910c      	str	r1, [sp, #48]	; 0x30
 8018a66:	1a9b      	subs	r3, r3, r2
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8018a68:	4620      	mov	r0, r4
    a->current_value = start;
 8018a6a:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    a->end_value = end;
 8018a6e:	9315      	str	r3, [sp, #84]	; 0x54
 8018a70:	f7f9 fe60 	bl	8012734 <lv_anim_get>
            if(anim_cur) {
 8018a74:	2800      	cmp	r0, #0
 8018a76:	d031      	beq.n	8018adc <lv_label_refr_text+0x1e8>
                playback_now = anim_cur->playback_now;
 8018a78:	f890 5042 	ldrb.w	r5, [r0, #66]	; 0x42
                act_time = anim_cur->act_time;
 8018a7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
                playback_now = anim_cur->playback_now;
 8018a7e:	f3c5 0540 	ubfx	r5, r5, #1, #1
            if(act_time < a.time) {
 8018a82:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018a84:	429a      	cmp	r2, r3
 8018a86:	dd10      	ble.n	8018aaa <lv_label_refr_text+0x1b6>
                a.act_time = act_time;      /*To keep the old position*/
 8018a88:	9317      	str	r3, [sp, #92]	; 0x5c
                a.early_apply = 0;
 8018a8a:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
                    tmp      = a.start_value;
 8018a8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                    a.start_value = a.end_value;
 8018a90:	9915      	ldr	r1, [sp, #84]	; 0x54
                a.early_apply = 0;
 8018a92:	f36f 0300 	bfc	r3, #0, #1
 8018a96:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
                if(playback_now) {
 8018a9a:	b135      	cbz	r5, 8018aaa <lv_label_refr_text+0x1b6>
                    a.playback_now = 1;
 8018a9c:	b2db      	uxtb	r3, r3
 8018a9e:	f043 0302 	orr.w	r3, r3, #2
 8018aa2:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
                    a.start_value = a.end_value;
 8018aa6:	9113      	str	r1, [sp, #76]	; 0x4c
                    a.end_value   = tmp;
 8018aa8:	9215      	str	r2, [sp, #84]	; 0x54
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8018aaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018aac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018aae:	4638      	mov	r0, r7
 8018ab0:	f7f9 fe58 	bl	8012764 <lv_anim_speed_to_time>
    a->time = duration;
 8018ab4:	9016      	str	r0, [sp, #88]	; 0x58
    a->playback_time = time;
 8018ab6:	9019      	str	r0, [sp, #100]	; 0x64
            lv_anim_start(&a);
 8018ab8:	a80b      	add	r0, sp, #44	; 0x2c
 8018aba:	f7f9 fdf9 	bl	80126b0 <lv_anim_start>
    lv_obj_invalidate(obj);
 8018abe:	4620      	mov	r0, r4
 8018ac0:	f7ec fc52 	bl	8005368 <lv_obj_invalidate>
}
 8018ac4:	b01d      	add	sp, #116	; 0x74
 8018ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int32_t act_time = 0;
 8018aca:	4603      	mov	r3, r0
 8018acc:	e798      	b.n	8018a00 <lv_label_refr_text+0x10c>
            lv_anim_del(obj, set_ofs_x_anim);
 8018ace:	495e      	ldr	r1, [pc, #376]	; (8018c48 <lv_label_refr_text+0x354>)
 8018ad0:	4620      	mov	r0, r4
 8018ad2:	f7f9 fdbd 	bl	8012650 <lv_anim_del>
            label->offset.x = 0;
 8018ad6:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 8018ada:	e7b0      	b.n	8018a3e <lv_label_refr_text+0x14a>
            int32_t act_time = 0;
 8018adc:	462b      	mov	r3, r5
 8018ade:	e7d0      	b.n	8018a82 <lv_label_refr_text+0x18e>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8018ae0:	f1ba 0f03 	cmp.w	sl, #3
 8018ae4:	f040 809c 	bne.w	8018c20 <lv_label_refr_text+0x32c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 8018ae8:	2263      	movs	r2, #99	; 0x63
 8018aea:	2100      	movs	r1, #0
 8018aec:	4620      	mov	r0, r4
 8018aee:	f7ee fccd 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8018af2:	2265      	movs	r2, #101	; 0x65
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 8018af4:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8018af6:	2100      	movs	r1, #0
 8018af8:	4620      	mov	r0, r4
 8018afa:	f7ee fcc7 	bl	800748c <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8018afe:	fa1f f880 	uxth.w	r8, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8018b02:	f1b8 0f00 	cmp.w	r8, #0
 8018b06:	d108      	bne.n	8018b1a <lv_label_refr_text+0x226>
 8018b08:	4620      	mov	r0, r4
 8018b0a:	f7ef fa8f 	bl	800802c <lv_obj_get_disp>
 8018b0e:	f7f9 fc4f 	bl	80123b0 <lv_disp_get_dpi>
 8018b12:	fb90 f0fa 	sdiv	r0, r0, sl
 8018b16:	fa1f f880 	uxth.w	r8, r0
        lv_anim_init(&a);
 8018b1a:	a80b      	add	r0, sp, #44	; 0x2c
 8018b1c:	f7f9 fd7e 	bl	801261c <lv_anim_init>
    a->repeat_cnt = cnt;
 8018b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b24:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8018b28:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8018b2c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    a->var = var;
 8018b30:	940b      	str	r4, [sp, #44]	; 0x2c
 8018b32:	3301      	adds	r3, #1
 8018b34:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8018b36:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8018b3a:	b21b      	sxth	r3, r3
 8018b3c:	429a      	cmp	r2, r3
 8018b3e:	dd54      	ble.n	8018bea <lv_label_refr_text+0x2f6>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 8018b40:	2220      	movs	r2, #32
 8018b42:	4611      	mov	r1, r2
 8018b44:	4630      	mov	r0, r6
 8018b46:	f7f9 fa17 	bl	8011f78 <lv_font_get_glyph_width>
 8018b4a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
    a->exec_cb = exec_cb;
 8018b4e:	4d3e      	ldr	r5, [pc, #248]	; (8018c48 <lv_label_refr_text+0x354>)
 8018b50:	950c      	str	r5, [sp, #48]	; 0x30
 8018b52:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 8018b56:	1a82      	subs	r2, r0, r2
    a->start_value = start;
 8018b58:	2100      	movs	r1, #0
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8018b5a:	4640      	mov	r0, r8
    a->current_value = start;
 8018b5c:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
    a->end_value = end;
 8018b60:	9215      	str	r2, [sp, #84]	; 0x54
 8018b62:	f7f9 fdff 	bl	8012764 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8018b66:	4629      	mov	r1, r5
    a->time = duration;
 8018b68:	9016      	str	r0, [sp, #88]	; 0x58
 8018b6a:	4620      	mov	r0, r4
 8018b6c:	f7f9 fde2 	bl	8012734 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8018b70:	b100      	cbz	r0, 8018b74 <lv_label_refr_text+0x280>
 8018b72:	6b00      	ldr	r0, [r0, #48]	; 0x30
            if(anim_template) {
 8018b74:	b377      	cbz	r7, 8018bd4 <lv_label_refr_text+0x2e0>
                a.act_time = anim_template->act_time;
 8018b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b78:	9317      	str	r3, [sp, #92]	; 0x5c
                a.repeat_delay = anim_template->repeat_delay;
 8018b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b7c:	931a      	str	r3, [sp, #104]	; 0x68
            lv_anim_start(&a);
 8018b7e:	a80b      	add	r0, sp, #44	; 0x2c
 8018b80:	f7f9 fd96 	bl	80126b0 <lv_anim_start>
            hor_anim = true;
 8018b84:	2501      	movs	r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018b86:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8018b8a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8018b8e:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8018b92:	3301      	adds	r3, #1
 8018b94:	1a5b      	subs	r3, r3, r1
 8018b96:	b21b      	sxth	r3, r3
 8018b98:	429a      	cmp	r2, r3
 8018b9a:	dd39      	ble.n	8018c10 <lv_label_refr_text+0x31c>
 8018b9c:	2d00      	cmp	r5, #0
 8018b9e:	d137      	bne.n	8018c10 <lv_label_refr_text+0x31c>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8018ba0:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
    a->exec_cb = exec_cb;
 8018ba4:	4e29      	ldr	r6, [pc, #164]	; (8018c4c <lv_label_refr_text+0x358>)
 8018ba6:	960c      	str	r6, [sp, #48]	; 0x30
 8018ba8:	4252      	negs	r2, r2
 8018baa:	1ad2      	subs	r2, r2, r3
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8018bac:	4629      	mov	r1, r5
 8018bae:	4640      	mov	r0, r8
    a->current_value = start;
 8018bb0:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    a->end_value = end;
 8018bb4:	9215      	str	r2, [sp, #84]	; 0x54
 8018bb6:	f7f9 fdd5 	bl	8012764 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8018bba:	4631      	mov	r1, r6
    a->time = duration;
 8018bbc:	9016      	str	r0, [sp, #88]	; 0x58
 8018bbe:	4620      	mov	r0, r4
 8018bc0:	f7f9 fdb8 	bl	8012734 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8018bc4:	b100      	cbz	r0, 8018bc8 <lv_label_refr_text+0x2d4>
 8018bc6:	6b05      	ldr	r5, [r0, #48]	; 0x30
            if(anim_template) {
 8018bc8:	b1bf      	cbz	r7, 8018bfa <lv_label_refr_text+0x306>
                a.act_time = anim_template->act_time;
 8018bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bcc:	9317      	str	r3, [sp, #92]	; 0x5c
                a.repeat_delay = anim_template->repeat_delay;
 8018bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018bd0:	931a      	str	r3, [sp, #104]	; 0x68
 8018bd2:	e771      	b.n	8018ab8 <lv_label_refr_text+0x1c4>
            else if(act_time < a.time) {
 8018bd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018bd6:	4283      	cmp	r3, r0
                a.early_apply = 0;
 8018bd8:	bfc1      	itttt	gt
 8018bda:	f89d 306e 	ldrbgt.w	r3, [sp, #110]	; 0x6e
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8018bde:	9017      	strgt	r0, [sp, #92]	; 0x5c
                a.early_apply = 0;
 8018be0:	f367 0300 	bfigt	r3, r7, #0, #1
 8018be4:	f88d 306e 	strbgt.w	r3, [sp, #110]	; 0x6e
 8018be8:	e7c9      	b.n	8018b7e <lv_label_refr_text+0x28a>
            lv_anim_del(obj, set_ofs_x_anim);
 8018bea:	4917      	ldr	r1, [pc, #92]	; (8018c48 <lv_label_refr_text+0x354>)
 8018bec:	4620      	mov	r0, r4
            label->offset.x = 0;
 8018bee:	2500      	movs	r5, #0
            lv_anim_del(obj, set_ofs_x_anim);
 8018bf0:	f7f9 fd2e 	bl	8012650 <lv_anim_del>
            label->offset.x = 0;
 8018bf4:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 8018bf8:	e7c5      	b.n	8018b86 <lv_label_refr_text+0x292>
            else if(act_time < a.time) {
 8018bfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018bfc:	42ab      	cmp	r3, r5
                a.early_apply = 0;
 8018bfe:	bfc1      	itttt	gt
 8018c00:	f89d 306e 	ldrbgt.w	r3, [sp, #110]	; 0x6e
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8018c04:	9517      	strgt	r5, [sp, #92]	; 0x5c
                a.early_apply = 0;
 8018c06:	f367 0300 	bfigt	r3, r7, #0, #1
 8018c0a:	f88d 306e 	strbgt.w	r3, [sp, #110]	; 0x6e
 8018c0e:	e753      	b.n	8018ab8 <lv_label_refr_text+0x1c4>
            lv_anim_del(obj, set_ofs_y_anim);
 8018c10:	490e      	ldr	r1, [pc, #56]	; (8018c4c <lv_label_refr_text+0x358>)
 8018c12:	4620      	mov	r0, r4
 8018c14:	f7f9 fd1c 	bl	8012650 <lv_anim_del>
            label->offset.y = 0;
 8018c18:	2300      	movs	r3, #0
 8018c1a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8018c1e:	e74e      	b.n	8018abe <lv_label_refr_text+0x1ca>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 8018c20:	f1ba 0f01 	cmp.w	sl, #1
 8018c24:	f47f af4b 	bne.w	8018abe <lv_label_refr_text+0x1ca>
 8018c28:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8018c2c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 8018c30:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8018c34:	3301      	adds	r3, #1
 8018c36:	1a5b      	subs	r3, r3, r1
 8018c38:	b21b      	sxth	r3, r3
 8018c3a:	429a      	cmp	r2, r3
 8018c3c:	dc08      	bgt.n	8018c50 <lv_label_refr_text+0x35c>
            label->dot_end = LV_LABEL_DOT_END_INV;
 8018c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8018c42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018c44:	e73b      	b.n	8018abe <lv_label_refr_text+0x1ca>
 8018c46:	bf00      	nop
 8018c48:	08018659 	.word	0x08018659
 8018c4c:	08018651 	.word	0x08018651
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 8018c50:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8018c54:	4293      	cmp	r3, r2
 8018c56:	daf2      	bge.n	8018c3e <lv_label_refr_text+0x34a>
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 8018c58:	4b50      	ldr	r3, [pc, #320]	; (8018d9c <lv_label_refr_text+0x4a8>)
 8018c5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	4798      	blx	r3
 8018c60:	2803      	cmp	r0, #3
 8018c62:	d9ec      	bls.n	8018c3e <lv_label_refr_text+0x34a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8018c64:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8018c68:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 8018c6c:	222e      	movs	r2, #46	; 0x2e
 8018c6e:	4611      	mov	r1, r2
 8018c70:	4630      	mov	r0, r6
 8018c72:	3701      	adds	r7, #1
 8018c74:	1aff      	subs	r7, r7, r3
 8018c76:	f7f9 f97f 	bl	8011f78 <lv_font_get_glyph_width>
 8018c7a:	4448      	add	r0, r9
            p.x = lv_area_get_width(&txt_coords) -
 8018c7c:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
 8018c80:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018c84:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8018c88:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8018c8c:	3301      	adds	r3, #1
 8018c8e:	1a9b      	subs	r3, r3, r2
 8018c90:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8018c94:	b2bf      	uxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018c96:	b299      	uxth	r1, r3
 8018c98:	4407      	add	r7, r0
            y_overed = p.y %
 8018c9a:	b21b      	sxth	r3, r3
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 8018c9c:	1950      	adds	r0, r2, r5
            y_overed = p.y %
 8018c9e:	fb93 f6f0 	sdiv	r6, r3, r0
 8018ca2:	fb00 3316 	mls	r3, r0, r6, r3
            if(y_overed >= lv_font_get_line_height(font)) {
 8018ca6:	b218      	sxth	r0, r3
 8018ca8:	4282      	cmp	r2, r0
                p.y -= line_space;
 8018caa:	bfcc      	ite	gt
 8018cac:	1b49      	subgt	r1, r1, r5
                p.y += lv_font_get_line_height(font);
 8018cae:	1889      	addle	r1, r1, r2
                p.y -= line_space;
 8018cb0:	1acb      	subs	r3, r1, r3
 8018cb2:	b21b      	sxth	r3, r3
 8018cb4:	a908      	add	r1, sp, #32
 8018cb6:	4620      	mov	r0, r4
 8018cb8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            p.x = lv_area_get_width(&txt_coords) -
 8018cbc:	f8ad 7020 	strh.w	r7, [sp, #32]
    LV_ASSERT_NULL(pos_in);
 8018cc0:	f7ff fd1a 	bl	80186f8 <lv_label_get_letter_on.part.0>
            size_t txt_len = strlen(label->text);
 8018cc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018cc6:	4605      	mov	r5, r0
 8018cc8:	4630      	mov	r0, r6
 8018cca:	f7e7 fa8b 	bl	80001e4 <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8018cce:	4b34      	ldr	r3, [pc, #208]	; (8018da0 <lv_label_refr_text+0x4ac>)
            size_t txt_len = strlen(label->text);
 8018cd0:	4682      	mov	sl, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	4630      	mov	r0, r6
 8018cd6:	4629      	mov	r1, r5
 8018cd8:	4798      	blx	r3
                _lv_txt_encoded_prev(label->text, &byte_id);
 8018cda:	4e32      	ldr	r6, [pc, #200]	; (8018da4 <lv_label_refr_text+0x4b0>)
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8018cdc:	900b      	str	r0, [sp, #44]	; 0x2c
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8018cde:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
                _lv_txt_encoded_prev(label->text, &byte_id);
 8018ce0:	6a60      	ldr	r0, [r4, #36]	; 0x24
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8018ce2:	f107 0803 	add.w	r8, r7, #3
 8018ce6:	45c2      	cmp	sl, r8
 8018ce8:	d346      	bcc.n	8018d78 <lv_label_refr_text+0x484>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8018cea:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8018dac <lv_label_refr_text+0x4b8>
 8018cee:	f04f 0b04 	mov.w	fp, #4
            uint8_t len = 0;
 8018cf2:	2600      	movs	r6, #0
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8018cf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018cf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018cf8:	f8d9 3000 	ldr.w	r3, [r9]
 8018cfc:	4410      	add	r0, r2
 8018cfe:	4798      	blx	r3
                _lv_txt_encoded_next(label->text, &byte_id);
 8018d00:	4b29      	ldr	r3, [pc, #164]	; (8018da8 <lv_label_refr_text+0x4b4>)
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8018d02:	4406      	add	r6, r0
                _lv_txt_encoded_next(label->text, &byte_id);
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	6a60      	ldr	r0, [r4, #36]	; 0x24
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8018d08:	b2f6      	uxtb	r6, r6
                _lv_txt_encoded_next(label->text, &byte_id);
 8018d0a:	a90b      	add	r1, sp, #44	; 0x2c
 8018d0c:	4798      	blx	r3
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 8018d0e:	2e03      	cmp	r6, #3
 8018d10:	d805      	bhi.n	8018d1e <lv_label_refr_text+0x42a>
 8018d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d14:	459a      	cmp	sl, r3
 8018d16:	d302      	bcc.n	8018d1e <lv_label_refr_text+0x42a>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8018d18:	f1bb 0b01 	subs.w	fp, fp, #1
 8018d1c:	d1ea      	bne.n	8018cf4 <lv_label_refr_text+0x400>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8018d1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8018d20:	4620      	mov	r0, r4
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8018d22:	4439      	add	r1, r7
 8018d24:	9105      	str	r1, [sp, #20]
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8018d26:	f7ff fc71 	bl	801860c <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 8018d2a:	2e04      	cmp	r6, #4
 8018d2c:	9905      	ldr	r1, [sp, #20]
 8018d2e:	d928      	bls.n	8018d82 <lv_label_refr_text+0x48e>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8018d30:	1c70      	adds	r0, r6, #1
 8018d32:	f7fa faf9 	bl	8013328 <lv_mem_alloc>
 8018d36:	62a0      	str	r0, [r4, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 8018d38:	2800      	cmp	r0, #0
 8018d3a:	f43f aec0 	beq.w	8018abe <lv_label_refr_text+0x1ca>
        lv_memcpy(label->dot.tmp_ptr, data, len);
 8018d3e:	4632      	mov	r2, r6
 8018d40:	9905      	ldr	r1, [sp, #20]
 8018d42:	f7fa fbbb 	bl	80134bc <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 8018d46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018d48:	2200      	movs	r2, #0
 8018d4a:	559a      	strb	r2, [r3, r6]
        label->dot_tmp_alloc    = true;
 8018d4c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d54:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                    label->text[byte_id_ori + i] = '.';
 8018d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d5a:	222e      	movs	r2, #46	; 0x2e
 8018d5c:	55da      	strb	r2, [r3, r7]
 8018d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d60:	443b      	add	r3, r7
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8018d62:	3503      	adds	r5, #3
                    label->text[byte_id_ori + i] = '.';
 8018d64:	705a      	strb	r2, [r3, #1]
 8018d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d68:	443b      	add	r3, r7
 8018d6a:	709a      	strb	r2, [r3, #2]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8018d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d6e:	2200      	movs	r2, #0
 8018d70:	f803 2008 	strb.w	r2, [r3, r8]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8018d74:	62e5      	str	r5, [r4, #44]	; 0x2c
 8018d76:	e6a2      	b.n	8018abe <lv_label_refr_text+0x1ca>
                _lv_txt_encoded_prev(label->text, &byte_id);
 8018d78:	6833      	ldr	r3, [r6, #0]
 8018d7a:	a90b      	add	r1, sp, #44	; 0x2c
 8018d7c:	4798      	blx	r3
                letter_id--;
 8018d7e:	3d01      	subs	r5, #1
 8018d80:	e7ad      	b.n	8018cde <lv_label_refr_text+0x3ea>
        label->dot_tmp_alloc = false;
 8018d82:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018d86:	f36f 1386 	bfc	r3, #6, #1
 8018d8a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 8018d8e:	4632      	mov	r2, r6
 8018d90:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8018d94:	f7fa fb92 	bl	80134bc <lv_memcpy>
 8018d98:	e7de      	b.n	8018d58 <lv_label_refr_text+0x464>
 8018d9a:	bf00      	nop
 8018d9c:	20000030 	.word	0x20000030
 8018da0:	2000001c 	.word	0x2000001c
 8018da4:	20000028 	.word	0x20000028
 8018da8:	20000024 	.word	0x20000024
 8018dac:	2000002c 	.word	0x2000002c

08018db0 <lv_label_event>:
{
 8018db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8018db4:	4839      	ldr	r0, [pc, #228]	; (8018e9c <lv_label_event+0xec>)
{
 8018db6:	b095      	sub	sp, #84	; 0x54
 8018db8:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8018dba:	f7ea f95f 	bl	800307c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8018dbe:	2801      	cmp	r0, #1
 8018dc0:	d166      	bne.n	8018e90 <lv_label_event+0xe0>
    lv_event_code_t code = lv_event_get_code(e);
 8018dc2:	4628      	mov	r0, r5
 8018dc4:	f7ea fa46 	bl	8003254 <lv_event_get_code>
 8018dc8:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8018dca:	4628      	mov	r0, r5
 8018dcc:	f7ea fa3e 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8018dd0:	2e2a      	cmp	r6, #42	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 8018dd2:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8018dd4:	d107      	bne.n	8018de6 <lv_label_event+0x36>
        lv_label_revert_dots(obj);
 8018dd6:	f7ff fc43 	bl	8018660 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 8018dda:	4620      	mov	r0, r4
}
 8018ddc:	b015      	add	sp, #84	; 0x54
 8018dde:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        lv_label_refr_text(obj);
 8018de2:	f7ff bd87 	b.w	80188f4 <lv_label_refr_text>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8018de6:	2e13      	cmp	r6, #19
 8018de8:	d10d      	bne.n	8018e06 <lv_label_event+0x56>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8018dea:	f7ff fc77 	bl	80186dc <lv_obj_get_style_text_font.constprop.0>
        lv_event_set_ext_draw_size(e, font_h / 4);
 8018dee:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018df2:	2900      	cmp	r1, #0
 8018df4:	bfb8      	it	lt
 8018df6:	3103      	addlt	r1, #3
 8018df8:	1089      	asrs	r1, r1, #2
 8018dfa:	4628      	mov	r0, r5
}
 8018dfc:	b015      	add	sp, #84	; 0x54
 8018dfe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        lv_event_set_ext_draw_size(e, font_h / 4);
 8018e02:	f7ea ba7d 	b.w	8003300 <lv_event_set_ext_draw_size>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8018e06:	2e29      	cmp	r6, #41	; 0x29
 8018e08:	d0e5      	beq.n	8018dd6 <lv_label_event+0x26>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8018e0a:	2e2c      	cmp	r6, #44	; 0x2c
 8018e0c:	d148      	bne.n	8018ea0 <lv_label_event+0xf0>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8018e0e:	f7ff fc65 	bl	80186dc <lv_obj_get_style_text_font.constprop.0>
 8018e12:	4606      	mov	r6, r0
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8018e14:	4620      	mov	r0, r4
 8018e16:	f7ff fc5a 	bl	80186ce <lv_obj_get_style_text_letter_space.constprop.0>
 8018e1a:	4607      	mov	r7, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8018e1c:	4620      	mov	r0, r4
 8018e1e:	f7ff fc4f 	bl	80186c0 <lv_obj_get_style_text_line_space.constprop.0>
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8018e22:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8018e26:	4680      	mov	r8, r0
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8018e28:	f3c3 1900 	ubfx	r9, r3, #4, #1
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8018e2c:	0698      	lsls	r0, r3, #26
        lv_coord_t w = lv_obj_get_content_width(obj);
 8018e2e:	4620      	mov	r0, r4
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8018e30:	bf48      	it	mi
 8018e32:	f049 0902 	orrmi.w	r9, r9, #2
        lv_coord_t w = lv_obj_get_content_width(obj);
 8018e36:	f7ec f88d 	bl	8004f54 <lv_obj_get_content_width>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8018e3a:	4620      	mov	r0, r4
 8018e3c:	f7ff fc54 	bl	80186e8 <lv_obj_get_style_width.constprop.0>
 8018e40:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8018e44:	4298      	cmp	r0, r3
 8018e46:	d103      	bne.n	8018e50 <lv_label_event+0xa0>
 8018e48:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8018e4c:	0759      	lsls	r1, r3, #29
 8018e4e:	d522      	bpl.n	8018e96 <lv_label_event+0xe6>
        else w = lv_obj_get_content_width(obj);
 8018e50:	4620      	mov	r0, r4
 8018e52:	f7ec f87f 	bl	8004f54 <lv_obj_get_content_width>
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 8018e56:	e9cd 0901 	strd	r0, r9, [sp, #4]
 8018e5a:	f8cd 8000 	str.w	r8, [sp]
 8018e5e:	463b      	mov	r3, r7
 8018e60:	4632      	mov	r2, r6
 8018e62:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018e64:	a80c      	add	r0, sp, #48	; 0x30
 8018e66:	f7fc fa29 	bl	80152bc <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 8018e6a:	4628      	mov	r0, r5
 8018e6c:	f7ea f9f6 	bl	800325c <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 8018e70:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8018e74:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018e78:	4293      	cmp	r3, r2
 8018e7a:	bfb8      	it	lt
 8018e7c:	4613      	movlt	r3, r2
 8018e7e:	8003      	strh	r3, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 8018e80:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018e84:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018e88:	4293      	cmp	r3, r2
 8018e8a:	bfb8      	it	lt
 8018e8c:	4613      	movlt	r3, r2
 8018e8e:	8043      	strh	r3, [r0, #2]
}
 8018e90:	b015      	add	sp, #84	; 0x54
 8018e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8018e96:	f641 70ff 	movw	r0, #8191	; 0x1fff
 8018e9a:	e7dc      	b.n	8018e56 <lv_label_event+0xa6>
 8018e9c:	08020530 	.word	0x08020530
    else if(code == LV_EVENT_DRAW_MAIN) {
 8018ea0:	2e15      	cmp	r6, #21
 8018ea2:	d1f5      	bne.n	8018e90 <lv_label_event+0xe0>
    lv_obj_t * obj = lv_event_get_target(e);
 8018ea4:	4628      	mov	r0, r5
 8018ea6:	f7ea f9d1 	bl	800324c <lv_event_get_target>
 8018eaa:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8018eac:	4628      	mov	r0, r5
 8018eae:	f7ea fa20 	bl	80032f2 <lv_event_get_draw_ctx>
    lv_obj_get_content_coords(obj, &txt_coords);
 8018eb2:	a908      	add	r1, sp, #32
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8018eb4:	4605      	mov	r5, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	f7ec f878 	bl	8004fac <lv_obj_get_content_coords>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8018ebc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8018ec0:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8018ec2:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8018ec4:	f3c3 1600 	ubfx	r6, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8018ec8:	bf48      	it	mi
 8018eca:	f046 0602 	orrmi.w	r6, r6, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8018ece:	f7ff fc0b 	bl	80186e8 <lv_obj_get_style_width.constprop.0>
 8018ed2:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8018ed6:	4298      	cmp	r0, r3
 8018ed8:	d105      	bne.n	8018ee6 <lv_label_event+0x136>
 8018eda:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8018ede:	075b      	lsls	r3, r3, #29
 8018ee0:	bf58      	it	pl
 8018ee2:	f046 0604 	orrpl.w	r6, r6, #4
    lv_draw_label_dsc_init(&label_draw_dsc);
 8018ee6:	a80c      	add	r0, sp, #48	; 0x30
 8018ee8:	f7f0 fe56 	bl	8009b98 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 8018eec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018eee:	9311      	str	r3, [sp, #68]	; 0x44
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8018ef0:	aa0c      	add	r2, sp, #48	; 0x30
 8018ef2:	2100      	movs	r1, #0
 8018ef4:	4620      	mov	r0, r4
    label_draw_dsc.flag = flag;
 8018ef6:	f88d 604b 	strb.w	r6, [sp, #75]	; 0x4b
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8018efa:	f7eb fce1 	bl	80048c0 <lv_obj_init_draw_label_dsc>
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8018efe:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8018f02:	b913      	cbnz	r3, 8018f0a <lv_label_event+0x15a>
 8018f04:	2301      	movs	r3, #1
 8018f06:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    return label->sel_start;
 8018f0a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    return label->sel_end;
 8018f0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 8018f0e:	910d      	str	r1, [sp, #52]	; 0x34
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8018f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f14:	4299      	cmp	r1, r3
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8018f16:	920e      	str	r2, [sp, #56]	; 0x38
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8018f18:	d017      	beq.n	8018f4a <lv_label_event+0x19a>
 8018f1a:	429a      	cmp	r2, r3
 8018f1c:	d015      	beq.n	8018f4a <lv_label_event+0x19a>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8018f1e:	2255      	movs	r2, #85	; 0x55
 8018f20:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8018f24:	4620      	mov	r0, r4
 8018f26:	f7ee fab1 	bl	800748c <lv_obj_get_style_prop>
 8018f2a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8018f2e:	4602      	mov	r2, r0
 8018f30:	4620      	mov	r0, r4
 8018f32:	f7ee ff23 	bl	8007d7c <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8018f36:	2220      	movs	r2, #32
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 8018f38:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
 8018f3c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8018f40:	4620      	mov	r0, r4
 8018f42:	f7ee faa3 	bl	800748c <lv_obj_get_style_prop>
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 8018f46:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8018f4a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018f4e:	f003 0306 	and.w	r3, r3, #6
 8018f52:	2b02      	cmp	r3, #2
 8018f54:	d120      	bne.n	8018f98 <lv_label_event+0x1e8>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 8018f56:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8018f5a:	3b02      	subs	r3, #2
 8018f5c:	2b01      	cmp	r3, #1
 8018f5e:	d81b      	bhi.n	8018f98 <lv_label_event+0x1e8>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8018f60:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8018f64:	9301      	str	r3, [sp, #4]
 8018f66:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8018f6a:	9300      	str	r3, [sp, #0]
 8018f6c:	9602      	str	r6, [sp, #8]
 8018f6e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8018f72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018f74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018f76:	a80a      	add	r0, sp, #40	; 0x28
 8018f78:	f7fc f9a0 	bl	80152bc <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8018f7c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018f80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018f84:	3301      	adds	r3, #1
 8018f86:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8018f88:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8018f8c:	b21b      	sxth	r3, r3
 8018f8e:	429a      	cmp	r2, r3
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 8018f90:	bfc4      	itt	gt
 8018f92:	2301      	movgt	r3, #1
 8018f94:	f88d 304a 	strbgt.w	r3, [sp, #74]	; 0x4a
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8018f98:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018f9c:	f003 0307 	and.w	r3, r3, #7
 8018fa0:	2b03      	cmp	r3, #3
 8018fa2:	f000 8097 	beq.w	80190d4 <lv_label_event+0x324>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018fa6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8018faa:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8018fae:	3301      	adds	r3, #1
 8018fb0:	1a9b      	subs	r3, r3, r2
 8018fb2:	b21b      	sxth	r3, r3
 8018fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018fb8:	f2c0 808c 	blt.w	80190d4 <lv_label_event+0x324>
    lv_draw_label_hint_t * hint = &label->hint;
 8018fbc:	f104 0730 	add.w	r7, r4, #48	; 0x30
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 8018fc0:	68aa      	ldr	r2, [r5, #8]
 8018fc2:	a908      	add	r1, sp, #32
 8018fc4:	a80a      	add	r0, sp, #40	; 0x28
 8018fc6:	f7f9 fc56 	bl	8012876 <_lv_area_intersect>
    if(!is_common) return;
 8018fca:	2800      	cmp	r0, #0
 8018fcc:	f43f af60 	beq.w	8018e90 <lv_label_event+0xe0>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 8018fd0:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8018fd4:	f011 0107 	ands.w	r1, r1, #7
 8018fd8:	d10c      	bne.n	8018ff4 <lv_label_event+0x244>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 8018fda:	4620      	mov	r0, r4
 8018fdc:	9105      	str	r1, [sp, #20]
 8018fde:	f7ed f924 	bl	800622a <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 8018fe2:	4240      	negs	r0, r0
 8018fe4:	b202      	sxth	r2, r0
 8018fe6:	9905      	ldr	r1, [sp, #20]
 8018fe8:	a808      	add	r0, sp, #32
 8018fea:	f7f9 fc33 	bl	8012854 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 8018fee:	8b63      	ldrh	r3, [r4, #26]
 8018ff0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8018ff4:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8018ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8018ffa:	f002 0206 	and.w	r2, r2, #6
 8018ffe:	2a02      	cmp	r2, #2
 8019000:	d16a      	bne.n	80190d8 <lv_label_event+0x328>
        draw_ctx->clip_area = &txt_clip;
 8019002:	aa0a      	add	r2, sp, #40	; 0x28
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8019004:	f8d5 8008 	ldr.w	r8, [r5, #8]
        draw_ctx->clip_area = &txt_clip;
 8019008:	60aa      	str	r2, [r5, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 801900a:	a90c      	add	r1, sp, #48	; 0x30
 801900c:	9700      	str	r7, [sp, #0]
 801900e:	aa08      	add	r2, sp, #32
 8019010:	4628      	mov	r0, r5
 8019012:	f7f0 fddf 	bl	8009bd4 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8019016:	f8c5 8008 	str.w	r8, [r5, #8]
    draw_ctx->clip_area = &txt_clip;
 801901a:	ab0a      	add	r3, sp, #40	; 0x28
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801901c:	f8d5 8008 	ldr.w	r8, [r5, #8]
    draw_ctx->clip_area = &txt_clip;
 8019020:	60ab      	str	r3, [r5, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8019022:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8019026:	f003 0307 	and.w	r3, r3, #7
 801902a:	2b03      	cmp	r3, #3
 801902c:	d14f      	bne.n	80190ce <lv_label_event+0x31e>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 801902e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8019032:	9301      	str	r3, [sp, #4]
 8019034:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8019038:	9300      	str	r3, [sp, #0]
 801903a:	9602      	str	r6, [sp, #8]
 801903c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8019040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019042:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019044:	a807      	add	r0, sp, #28
 8019046:	f7fc f939 	bl	80152bc <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801904a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801904e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
        if(size.x > lv_area_get_width(&txt_coords)) {
 8019052:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019056:	3201      	adds	r2, #1
 8019058:	1a52      	subs	r2, r2, r1
 801905a:	b212      	sxth	r2, r2
 801905c:	4293      	cmp	r3, r2
 801905e:	dd18      	ble.n	8019092 <lv_label_event+0x2e2>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8019060:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8019064:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019066:	2220      	movs	r2, #32
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8019068:	4433      	add	r3, r6
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801906a:	4611      	mov	r1, r2
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801906c:	b29e      	uxth	r6, r3
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801906e:	f7f8 ff83 	bl	8011f78 <lv_font_get_glyph_width>
            label_draw_dsc.ofs_y = label->offset.y;
 8019072:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8019076:	9700      	str	r7, [sp, #0]
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8019078:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801907c:	4406      	add	r6, r0
            label_draw_dsc.ofs_y = label->offset.y;
 801907e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8019082:	aa08      	add	r2, sp, #32
 8019084:	6a63      	ldr	r3, [r4, #36]	; 0x24
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8019086:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 801908a:	a90c      	add	r1, sp, #48	; 0x30
 801908c:	4628      	mov	r0, r5
 801908e:	f7f0 fda1 	bl	8009bd4 <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8019092:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8019096:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        if(size.y > lv_area_get_height(&txt_coords)) {
 801909a:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801909e:	3301      	adds	r3, #1
 80190a0:	1a5b      	subs	r3, r3, r1
 80190a2:	b21b      	sxth	r3, r3
 80190a4:	429a      	cmp	r2, r3
 80190a6:	dd12      	ble.n	80190ce <lv_label_event+0x31e>
            label_draw_dsc.ofs_x = label->offset.x;
 80190a8:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80190ac:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80190b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 80190b2:	891b      	ldrh	r3, [r3, #8]
 80190b4:	441a      	add	r2, r3
 80190b6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80190ba:	9700      	str	r7, [sp, #0]
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 80190bc:	441a      	add	r2, r3
 80190be:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80190c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80190c4:	aa08      	add	r2, sp, #32
 80190c6:	a90c      	add	r1, sp, #48	; 0x30
 80190c8:	4628      	mov	r0, r5
 80190ca:	f7f0 fd83 	bl	8009bd4 <lv_draw_label>
    draw_ctx->clip_area = clip_area_ori;
 80190ce:	f8c5 8008 	str.w	r8, [r5, #8]
 80190d2:	e6dd      	b.n	8018e90 <lv_label_event+0xe0>
        hint = NULL;
 80190d4:	2700      	movs	r7, #0
 80190d6:	e773      	b.n	8018fc0 <lv_label_event+0x210>
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80190d8:	9700      	str	r7, [sp, #0]
 80190da:	aa08      	add	r2, sp, #32
 80190dc:	a90c      	add	r1, sp, #48	; 0x30
 80190de:	4628      	mov	r0, r5
 80190e0:	f7f0 fd78 	bl	8009bd4 <lv_draw_label>
 80190e4:	e799      	b.n	801901a <lv_label_event+0x26a>
 80190e6:	bf00      	nop

080190e8 <lv_label_create>:
{
 80190e8:	b510      	push	{r4, lr}
 80190ea:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80190ec:	4803      	ldr	r0, [pc, #12]	; (80190fc <lv_label_create+0x14>)
 80190ee:	f7eb f9b3 	bl	8004458 <lv_obj_class_create_obj>
 80190f2:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 80190f4:	f7eb fa3d 	bl	8004572 <lv_obj_class_init_obj>
}
 80190f8:	4620      	mov	r0, r4
 80190fa:	bd10      	pop	{r4, pc}
 80190fc:	08020530 	.word	0x08020530

08019100 <lv_label_set_text>:
{
 8019100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019102:	4604      	mov	r4, r0
 8019104:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 8019106:	f7ec f92f 	bl	8005368 <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 801910a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801910c:	2d00      	cmp	r5, #0
 801910e:	bf08      	it	eq
 8019110:	4635      	moveq	r5, r6
    if(label->text == text && label->static_txt == 0) {
 8019112:	42ae      	cmp	r6, r5
 8019114:	d112      	bne.n	801913c <lv_label_set_text+0x3c>
 8019116:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801911a:	071b      	lsls	r3, r3, #28
 801911c:	d418      	bmi.n	8019150 <lv_label_set_text+0x50>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 801911e:	4630      	mov	r0, r6
 8019120:	f7e7 f860 	bl	80001e4 <strlen>
 8019124:	1c41      	adds	r1, r0, #1
 8019126:	4630      	mov	r0, r6
 8019128:	f7fa f934 	bl	8013394 <lv_mem_realloc>
        LV_ASSERT_MALLOC(label->text);
 801912c:	b128      	cbz	r0, 801913a <lv_label_set_text+0x3a>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 801912e:	6260      	str	r0, [r4, #36]	; 0x24
    lv_label_refr_text(obj);
 8019130:	4620      	mov	r0, r4
}
 8019132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(obj);
 8019136:	f7ff bbdd 	b.w	80188f4 <lv_label_refr_text>
        LV_ASSERT_MALLOC(label->text);
 801913a:	e7fe      	b.n	801913a <lv_label_set_text+0x3a>
        if(label->text != NULL && label->static_txt == 0) {
 801913c:	b146      	cbz	r6, 8019150 <lv_label_set_text+0x50>
 801913e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8019142:	f013 0708 	ands.w	r7, r3, #8
 8019146:	d103      	bne.n	8019150 <lv_label_set_text+0x50>
            lv_mem_free(label->text);
 8019148:	4630      	mov	r0, r6
 801914a:	f7fa f90b 	bl	8013364 <lv_mem_free>
            label->text = NULL;
 801914e:	6267      	str	r7, [r4, #36]	; 0x24
        size_t len = strlen(text) + 1;
 8019150:	4628      	mov	r0, r5
 8019152:	f7e7 f847 	bl	80001e4 <strlen>
        label->text = lv_mem_alloc(len);
 8019156:	3001      	adds	r0, #1
 8019158:	f7fa f8e6 	bl	8013328 <lv_mem_alloc>
 801915c:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 801915e:	b900      	cbnz	r0, 8019162 <lv_label_set_text+0x62>
 8019160:	e7fe      	b.n	8019160 <lv_label_set_text+0x60>
        strcpy(label->text, text);
 8019162:	4629      	mov	r1, r5
 8019164:	f004 ffcc 	bl	801e100 <strcpy>
        label->static_txt = 0;
 8019168:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801916c:	f36f 03c3 	bfc	r3, #3, #1
 8019170:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8019174:	e7dc      	b.n	8019130 <lv_label_set_text+0x30>

08019176 <lv_label_set_text_static>:
    if(label->static_txt == 0 && label->text != NULL) {
 8019176:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 801917a:	b570      	push	{r4, r5, r6, lr}
    if(label->static_txt == 0 && label->text != NULL) {
 801917c:	f013 0608 	ands.w	r6, r3, #8
{
 8019180:	4604      	mov	r4, r0
 8019182:	460d      	mov	r5, r1
    if(label->static_txt == 0 && label->text != NULL) {
 8019184:	d104      	bne.n	8019190 <lv_label_set_text_static+0x1a>
 8019186:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019188:	b110      	cbz	r0, 8019190 <lv_label_set_text_static+0x1a>
        lv_mem_free(label->text);
 801918a:	f7fa f8eb 	bl	8013364 <lv_mem_free>
        label->text = NULL;
 801918e:	6266      	str	r6, [r4, #36]	; 0x24
    if(text != NULL) {
 8019190:	b135      	cbz	r5, 80191a0 <lv_label_set_text_static+0x2a>
        label->static_txt = 1;
 8019192:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        label->text       = (char *)text;
 8019196:	6265      	str	r5, [r4, #36]	; 0x24
        label->static_txt = 1;
 8019198:	f043 0308 	orr.w	r3, r3, #8
 801919c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 80191a0:	4620      	mov	r0, r4
}
 80191a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(obj);
 80191a6:	f7ff bba5 	b.w	80188f4 <lv_label_refr_text>
	...

080191ac <lv_label_set_long_mode>:
{
 80191ac:	b538      	push	{r3, r4, r5, lr}
 80191ae:	4604      	mov	r4, r0
 80191b0:	460d      	mov	r5, r1
    lv_anim_del(obj, set_ofs_x_anim);
 80191b2:	4914      	ldr	r1, [pc, #80]	; (8019204 <lv_label_set_long_mode+0x58>)
 80191b4:	f7f9 fa4c 	bl	8012650 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 80191b8:	4913      	ldr	r1, [pc, #76]	; (8019208 <lv_label_set_long_mode+0x5c>)
 80191ba:	4620      	mov	r0, r4
 80191bc:	f7f9 fa48 	bl	8012650 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 80191c0:	1eaa      	subs	r2, r5, #2
    label->offset.x = 0;
 80191c2:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 80191c4:	2a02      	cmp	r2, #2
    label->offset.x = 0;
 80191c6:	6463      	str	r3, [r4, #68]	; 0x44
 80191c8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 80191cc:	bf8c      	ite	hi
 80191ce:	2200      	movhi	r2, #0
 80191d0:	2201      	movls	r2, #1
 80191d2:	f362 1345 	bfi	r3, r2, #5, #1
 80191d6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 80191da:	f003 0307 	and.w	r3, r3, #7
 80191de:	2b01      	cmp	r3, #1
 80191e0:	d105      	bne.n	80191ee <lv_label_set_long_mode+0x42>
 80191e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80191e4:	3301      	adds	r3, #1
 80191e6:	d002      	beq.n	80191ee <lv_label_set_long_mode+0x42>
        lv_label_revert_dots(obj);
 80191e8:	4620      	mov	r0, r4
 80191ea:	f7ff fa39 	bl	8018660 <lv_label_revert_dots>
    label->long_mode = long_mode;
 80191ee:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80191f2:	f365 0302 	bfi	r3, r5, #0, #3
 80191f6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 80191fa:	4620      	mov	r0, r4
}
 80191fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(obj);
 8019200:	f7ff bb78 	b.w	80188f4 <lv_label_refr_text>
 8019204:	08018659 	.word	0x08018659
 8019208:	08018651 	.word	0x08018651

0801920c <lv_label_constructor>:
{
 801920c:	b538      	push	{r3, r4, r5, lr}
    label->dot_end    = LV_LABEL_DOT_END_INV;
 801920e:	f04f 33ff 	mov.w	r3, #4294967295
    label->hint.line_start = -1;
 8019212:	e9c1 330b 	strd	r3, r3, [r1, #44]	; 0x2c
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8019216:	f64f 73ff 	movw	r3, #65535	; 0xffff
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 801921a:	e9c1 330f 	strd	r3, r3, [r1, #60]	; 0x3c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801921e:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
{
 8019222:	460c      	mov	r4, r1
    label->text       = NULL;
 8019224:	2500      	movs	r5, #0
    label->long_mode  = LV_LABEL_LONG_WRAP;
 8019226:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 801922a:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 801922e:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    label->hint.coord_y    = 0;
 8019232:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    label->offset.x = 0;
 8019236:	644d      	str	r5, [r1, #68]	; 0x44
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8019238:	4620      	mov	r0, r4
 801923a:	2102      	movs	r1, #2
 801923c:	f7ea fea7 	bl	8003f8e <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 8019240:	4629      	mov	r1, r5
 8019242:	4620      	mov	r0, r4
 8019244:	f7ff ffb2 	bl	80191ac <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 8019248:	4620      	mov	r0, r4
 801924a:	4902      	ldr	r1, [pc, #8]	; (8019254 <lv_label_constructor+0x48>)
}
 801924c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_set_text(obj, "Text");
 8019250:	f7ff bf56 	b.w	8019100 <lv_label_set_text>
 8019254:	08020528 	.word	0x08020528

08019258 <lv_label_set_text_sel_start>:
    label->sel_start   = index;
 8019258:	63c1      	str	r1, [r0, #60]	; 0x3c
    lv_obj_invalidate(obj);
 801925a:	f7ec b885 	b.w	8005368 <lv_obj_invalidate>

0801925e <lv_label_set_text_sel_end>:
    label->sel_end     = index;
 801925e:	6401      	str	r1, [r0, #64]	; 0x40
    lv_obj_invalidate(obj);
 8019260:	f7ec b882 	b.w	8005368 <lv_obj_invalidate>

08019264 <lv_label_get_text>:
}
 8019264:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019266:	4770      	bx	lr

08019268 <lv_label_get_recolor>:
    return label->recolor == 0 ? false : true;
 8019268:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
}
 801926c:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8019270:	4770      	bx	lr
	...

08019274 <lv_label_get_letter_pos>:
{
 8019274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019278:	ed2d 8b02 	vpush	{d8}
 801927c:	b08b      	sub	sp, #44	; 0x2c
 801927e:	4605      	mov	r5, r0
 8019280:	9106      	str	r1, [sp, #24]
    LV_ASSERT_NULL(pos);
 8019282:	4690      	mov	r8, r2
 8019284:	b902      	cbnz	r2, 8019288 <lv_label_get_letter_pos+0x14>
 8019286:	e7fe      	b.n	8019286 <lv_label_get_letter_pos+0x12>
    return label->text;
 8019288:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, txt);
 801928a:	2100      	movs	r1, #0
 801928c:	4622      	mov	r2, r4
 801928e:	f7ee fe97 	bl	8007fc0 <lv_obj_calculate_style_text_align>
    if(txt[0] == '\0') {
 8019292:	7823      	ldrb	r3, [r4, #0]
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, txt);
 8019294:	9003      	str	r0, [sp, #12]
    if(txt[0] == '\0') {
 8019296:	b9db      	cbnz	r3, 80192d0 <lv_label_get_letter_pos+0x5c>
        switch(align) {
 8019298:	2802      	cmp	r0, #2
        pos->y = 0;
 801929a:	f8a8 3002 	strh.w	r3, [r8, #2]
        switch(align) {
 801929e:	d010      	beq.n	80192c2 <lv_label_get_letter_pos+0x4e>
 80192a0:	2803      	cmp	r0, #3
 80192a2:	d008      	beq.n	80192b6 <lv_label_get_letter_pos+0x42>
 80192a4:	2801      	cmp	r0, #1
 80192a6:	d101      	bne.n	80192ac <lv_label_get_letter_pos+0x38>
                pos->x = 0;
 80192a8:	f8a8 3000 	strh.w	r3, [r8]
}
 80192ac:	b00b      	add	sp, #44	; 0x2c
 80192ae:	ecbd 8b02 	vpop	{d8}
 80192b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pos->x = lv_obj_get_content_width(obj);
 80192b6:	4628      	mov	r0, r5
 80192b8:	f7eb fe4c 	bl	8004f54 <lv_obj_get_content_width>
                pos->x = lv_obj_get_content_width(obj) / 2;
 80192bc:	f8a8 0000 	strh.w	r0, [r8]
                break;
 80192c0:	e7f4      	b.n	80192ac <lv_label_get_letter_pos+0x38>
                pos->x = lv_obj_get_content_width(obj) / 2;
 80192c2:	4628      	mov	r0, r5
 80192c4:	f7eb fe46 	bl	8004f54 <lv_obj_get_content_width>
 80192c8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80192cc:	1040      	asrs	r0, r0, #1
 80192ce:	e7f5      	b.n	80192bc <lv_label_get_letter_pos+0x48>
    lv_obj_get_content_coords(obj, &txt_coords);
 80192d0:	a908      	add	r1, sp, #32
 80192d2:	4628      	mov	r0, r5
 80192d4:	f7eb fe6a 	bl	8004fac <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80192d8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80192dc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80192e0:	3301      	adds	r3, #1
 80192e2:	1a9b      	subs	r3, r3, r2
 80192e4:	b21b      	sxth	r3, r3
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80192e6:	4628      	mov	r0, r5
 80192e8:	ee08 3a10 	vmov	s16, r3
 80192ec:	f7ff f9f6 	bl	80186dc <lv_obj_get_style_text_font.constprop.0>
 80192f0:	4682      	mov	sl, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 80192f2:	4628      	mov	r0, r5
 80192f4:	f7ff f9e4 	bl	80186c0 <lv_obj_get_style_text_line_space.constprop.0>
 80192f8:	9004      	str	r0, [sp, #16]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 80192fa:	4628      	mov	r0, r5
 80192fc:	f7ff f9e7 	bl	80186ce <lv_obj_get_style_text_letter_space.constprop.0>
 8019300:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
 8019304:	9305      	str	r3, [sp, #20]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8019306:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801930a:	4683      	mov	fp, r0
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801930c:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801930e:	f3c3 1900 	ubfx	r9, r3, #4, #1
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8019312:	4628      	mov	r0, r5
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8019314:	bf48      	it	mi
 8019316:	f049 0902 	orrmi.w	r9, r9, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801931a:	f7ff f9e5 	bl	80186e8 <lv_obj_get_style_width.constprop.0>
 801931e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8019322:	4298      	cmp	r0, r3
 8019324:	d105      	bne.n	8019332 <lv_label_get_letter_pos+0xbe>
 8019326:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801932a:	075b      	lsls	r3, r3, #29
 801932c:	bf58      	it	pl
 801932e:	f049 0904 	orrpl.w	r9, r9, #4
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 8019332:	4b3f      	ldr	r3, [pc, #252]	; (8019430 <lv_label_get_letter_pos+0x1bc>)
 8019334:	9906      	ldr	r1, [sp, #24]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	4620      	mov	r0, r4
 801933a:	4798      	blx	r3
        y += letter_height + line_space;
 801933c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    lv_coord_t y             = 0;
 8019340:	2700      	movs	r7, #0
        y += letter_height + line_space;
 8019342:	4413      	add	r3, r2
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 8019344:	4605      	mov	r5, r0
    uint32_t line_start      = 0;
 8019346:	463e      	mov	r6, r7
        y += letter_height + line_space;
 8019348:	9307      	str	r3, [sp, #28]
    while(txt[new_line_start] != '\0') {
 801934a:	5da3      	ldrb	r3, [r4, r6]
 801934c:	19a0      	adds	r0, r4, r6
 801934e:	2b00      	cmp	r3, #0
 8019350:	d142      	bne.n	80193d8 <lv_label_get_letter_pos+0x164>
 8019352:	9602      	str	r6, [sp, #8]
    if(byte_id > 0) {
 8019354:	b175      	cbz	r5, 8019374 <lv_label_get_letter_pos+0x100>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
 8019356:	1963      	adds	r3, r4, r5
 8019358:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801935c:	2b0a      	cmp	r3, #10
 801935e:	d001      	beq.n	8019364 <lv_label_get_letter_pos+0xf0>
 8019360:	2b0d      	cmp	r3, #13
 8019362:	d107      	bne.n	8019374 <lv_label_get_letter_pos+0x100>
 8019364:	5d63      	ldrb	r3, [r4, r5]
 8019366:	b92b      	cbnz	r3, 8019374 <lv_label_get_letter_pos+0x100>
            y += letter_height + line_space;
 8019368:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 801936c:	4418      	add	r0, r3
 801936e:	4407      	add	r7, r0
 8019370:	b23f      	sxth	r7, r7
 8019372:	462e      	mov	r6, r5
    bidi_txt = &txt[line_start];
 8019374:	4434      	add	r4, r6
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 8019376:	465b      	mov	r3, fp
 8019378:	1ba9      	subs	r1, r5, r6
 801937a:	f8cd 9000 	str.w	r9, [sp]
 801937e:	4652      	mov	r2, sl
 8019380:	4620      	mov	r0, r4
 8019382:	f7fb ff59 	bl	8015238 <lv_txt_get_width>
    if(char_id != line_start) x += letter_space;
 8019386:	9b06      	ldr	r3, [sp, #24]
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 8019388:	4605      	mov	r5, r0
    if(char_id != line_start) x += letter_space;
 801938a:	429e      	cmp	r6, r3
    if(align == LV_TEXT_ALIGN_CENTER) {
 801938c:	9b03      	ldr	r3, [sp, #12]
    if(char_id != line_start) x += letter_space;
 801938e:	bf1c      	itt	ne
 8019390:	445d      	addne	r5, fp
 8019392:	b22d      	sxthne	r5, r5
    if(align == LV_TEXT_ALIGN_CENTER) {
 8019394:	2b02      	cmp	r3, #2
 8019396:	d135      	bne.n	8019404 <lv_label_get_letter_pos+0x190>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8019398:	9902      	ldr	r1, [sp, #8]
 801939a:	f8cd 9000 	str.w	r9, [sp]
 801939e:	465b      	mov	r3, fp
 80193a0:	4652      	mov	r2, sl
 80193a2:	1b89      	subs	r1, r1, r6
 80193a4:	4620      	mov	r0, r4
 80193a6:	f7fb ff47 	bl	8015238 <lv_txt_get_width>
 80193aa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80193ae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80193b2:	3301      	adds	r3, #1
 80193b4:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 80193b6:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80193ba:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80193be:	fa02 f383 	sxtah	r3, r2, r3
 80193c2:	f340 004f 	sbfx	r0, r0, #1, #16
 80193c6:	ebc0 0063 	rsb	r0, r0, r3, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
 80193ca:	4405      	add	r5, r0
 80193cc:	b22d      	sxth	r5, r5
    pos->x = x;
 80193ce:	f8a8 5000 	strh.w	r5, [r8]
    pos->y = y;
 80193d2:	f8a8 7002 	strh.w	r7, [r8, #2]
 80193d6:	e769      	b.n	80192ac <lv_label_get_letter_pos+0x38>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80193d8:	2300      	movs	r3, #0
 80193da:	9300      	str	r3, [sp, #0]
 80193dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80193e0:	ee18 3a10 	vmov	r3, s16
 80193e4:	465a      	mov	r2, fp
 80193e6:	4651      	mov	r1, sl
 80193e8:	f7fb fda4 	bl	8014f34 <_lv_txt_get_next_line>
 80193ec:	1833      	adds	r3, r6, r0
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 80193ee:	429d      	cmp	r5, r3
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80193f0:	9302      	str	r3, [sp, #8]
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 80193f2:	d3af      	bcc.n	8019354 <lv_label_get_letter_pos+0xe0>
 80193f4:	5ce3      	ldrb	r3, [r4, r3]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d0ac      	beq.n	8019354 <lv_label_get_letter_pos+0xe0>
        y += letter_height + line_space;
 80193fa:	9b07      	ldr	r3, [sp, #28]
 80193fc:	9e02      	ldr	r6, [sp, #8]
 80193fe:	441f      	add	r7, r3
 8019400:	b23f      	sxth	r7, r7
        line_start = new_line_start;
 8019402:	e7a2      	b.n	801934a <lv_label_get_letter_pos+0xd6>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8019404:	9b03      	ldr	r3, [sp, #12]
 8019406:	2b03      	cmp	r3, #3
 8019408:	d1e1      	bne.n	80193ce <lv_label_get_letter_pos+0x15a>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801940a:	9902      	ldr	r1, [sp, #8]
 801940c:	f8cd 9000 	str.w	r9, [sp]
 8019410:	465b      	mov	r3, fp
 8019412:	4652      	mov	r2, sl
 8019414:	1b89      	subs	r1, r1, r6
 8019416:	4620      	mov	r0, r4
 8019418:	f7fb ff0e 	bl	8015238 <lv_txt_get_width>
 801941c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019420:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019424:	3301      	adds	r3, #1
 8019426:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 8019428:	b21b      	sxth	r3, r3
 801942a:	1a18      	subs	r0, r3, r0
 801942c:	e7cd      	b.n	80193ca <lv_label_get_letter_pos+0x156>
 801942e:	bf00      	nop
 8019430:	2000001c 	.word	0x2000001c

08019434 <lv_label_get_letter_on>:
    LV_ASSERT_NULL(pos_in);
 8019434:	b901      	cbnz	r1, 8019438 <lv_label_get_letter_on+0x4>
 8019436:	e7fe      	b.n	8019436 <lv_label_get_letter_on+0x2>
 8019438:	f7ff b95e 	b.w	80186f8 <lv_label_get_letter_on.part.0>

0801943c <lv_label_is_char_under_pos>:
{
 801943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019440:	ed2d 8b02 	vpush	{d8}
 8019444:	b08d      	sub	sp, #52	; 0x34
 8019446:	4604      	mov	r4, r0
    LV_ASSERT_NULL(pos);
 8019448:	9102      	str	r1, [sp, #8]
 801944a:	b901      	cbnz	r1, 801944e <lv_label_is_char_under_pos+0x12>
 801944c:	e7fe      	b.n	801944c <lv_label_is_char_under_pos+0x10>
    lv_obj_get_content_coords(obj, &txt_coords);
 801944e:	a90a      	add	r1, sp, #40	; 0x28
 8019450:	f7eb fdac 	bl	8004fac <lv_obj_get_content_coords>
 8019454:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8019458:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    return label->text;
 801945c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8019460:	3301      	adds	r3, #1
 8019462:	1a9b      	subs	r3, r3, r2
 8019464:	b21b      	sxth	r3, r3
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8019466:	4620      	mov	r0, r4
 8019468:	ee08 3a10 	vmov	s16, r3
 801946c:	f7ff f936 	bl	80186dc <lv_obj_get_style_text_font.constprop.0>
 8019470:	4682      	mov	sl, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8019472:	4620      	mov	r0, r4
 8019474:	f7ff f924 	bl	80186c0 <lv_obj_get_style_text_line_space.constprop.0>
 8019478:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801947a:	4620      	mov	r0, r4
 801947c:	f7ff f927 	bl	80186ce <lv_obj_get_style_text_letter_space.constprop.0>
 8019480:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8019484:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8019486:	9304      	str	r3, [sp, #16]
 8019488:	2100      	movs	r1, #0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801948a:	4681      	mov	r9, r0
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 801948c:	4620      	mov	r0, r4
 801948e:	f7ee fd97 	bl	8007fc0 <lv_obj_calculate_style_text_align>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8019492:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8019496:	9003      	str	r0, [sp, #12]
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8019498:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801949a:	f3c3 1800 	ubfx	r8, r3, #4, #1
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801949e:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80194a0:	bf48      	it	mi
 80194a2:	f048 0802 	orrmi.w	r8, r8, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80194a6:	f7ff f91f 	bl	80186e8 <lv_obj_get_style_width.constprop.0>
 80194aa:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80194ae:	4298      	cmp	r0, r3
 80194b0:	d105      	bne.n	80194be <lv_label_is_char_under_pos+0x82>
 80194b2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80194b6:	075b      	lsls	r3, r3, #29
 80194b8:	d401      	bmi.n	80194be <lv_label_is_char_under_pos+0x82>
 80194ba:	f048 0804 	orr.w	r8, r8, #4
        y += letter_height + line_space;
 80194be:	9b04      	ldr	r3, [sp, #16]
{
 80194c0:	2400      	movs	r4, #0
        y += letter_height + line_space;
 80194c2:	442b      	add	r3, r5
{
 80194c4:	4627      	mov	r7, r4
        y += letter_height + line_space;
 80194c6:	9305      	str	r3, [sp, #20]
 80194c8:	e017      	b.n	80194fa <lv_label_is_char_under_pos+0xbe>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80194ca:	2300      	movs	r3, #0
 80194cc:	9300      	str	r3, [sp, #0]
 80194ce:	464a      	mov	r2, r9
 80194d0:	ee18 3a10 	vmov	r3, s16
 80194d4:	f8cd 8004 	str.w	r8, [sp, #4]
 80194d8:	4651      	mov	r1, sl
 80194da:	4630      	mov	r0, r6
 80194dc:	f7fb fd2a 	bl	8014f34 <_lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 80194e0:	9b02      	ldr	r3, [sp, #8]
 80194e2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80194e6:	9b04      	ldr	r3, [sp, #16]
 80194e8:	18e3      	adds	r3, r4, r3
 80194ea:	429a      	cmp	r2, r3
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80194ec:	eb07 0500 	add.w	r5, r7, r0
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 80194f0:	dd0a      	ble.n	8019508 <lv_label_is_char_under_pos+0xcc>
        y += letter_height + line_space;
 80194f2:	9b05      	ldr	r3, [sp, #20]
 80194f4:	441c      	add	r4, r3
 80194f6:	b224      	sxth	r4, r4
        line_start = new_line_start;
 80194f8:	462f      	mov	r7, r5
    while(txt[line_start] != '\0') {
 80194fa:	f81b 3007 	ldrb.w	r3, [fp, r7]
 80194fe:	eb0b 0607 	add.w	r6, fp, r7
 8019502:	2b00      	cmp	r3, #0
 8019504:	d1e1      	bne.n	80194ca <lv_label_is_char_under_pos+0x8e>
 8019506:	463d      	mov	r5, r7
    if(align == LV_TEXT_ALIGN_CENTER) {
 8019508:	9b03      	ldr	r3, [sp, #12]
 801950a:	2b02      	cmp	r3, #2
 801950c:	d139      	bne.n	8019582 <lv_label_is_char_under_pos+0x146>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 801950e:	464b      	mov	r3, r9
 8019510:	f8cd 8000 	str.w	r8, [sp]
 8019514:	4652      	mov	r2, sl
 8019516:	1be9      	subs	r1, r5, r7
 8019518:	4630      	mov	r0, r6
 801951a:	f7fb fe8d 	bl	8015238 <lv_txt_get_width>
 801951e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8019522:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019526:	3401      	adds	r4, #1
 8019528:	1ae4      	subs	r4, r4, r3
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801952a:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 801952e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8019532:	fa03 f384 	sxtah	r3, r3, r4
 8019536:	1044      	asrs	r4, r0, #1
 8019538:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 801953c:	b224      	sxth	r4, r4
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 801953e:	2600      	movs	r6, #0
    uint32_t letter      = '\0';
 8019540:	e9cd 7607 	strd	r7, r6, [sp, #28]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8019544:	f88d 601b 	strb.w	r6, [sp, #27]
    uint32_t letter_next = '\0';
 8019548:	9609      	str	r6, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 801954a:	2d00      	cmp	r5, #0
 801954c:	d158      	bne.n	8019600 <lv_label_is_char_under_pos+0x1c4>
    lv_coord_t last_x = 0;
 801954e:	462e      	mov	r6, r5
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 8019550:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8019554:	4650      	mov	r0, sl
 8019556:	f7f8 fd0f 	bl	8011f78 <lv_font_get_glyph_width>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 801955a:	9b02      	ldr	r3, [sp, #8]
 801955c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019560:	eba6 0209 	sub.w	r2, r6, r9
 8019564:	4293      	cmp	r3, r2
 8019566:	db4f      	blt.n	8019608 <lv_label_is_char_under_pos+0x1cc>
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 8019568:	4448      	add	r0, r9
 801956a:	f100 0901 	add.w	r9, r0, #1
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 801956e:	444e      	add	r6, r9
 8019570:	42b3      	cmp	r3, r6
 8019572:	bfcc      	ite	gt
 8019574:	2000      	movgt	r0, #0
 8019576:	2001      	movle	r0, #1
}
 8019578:	b00d      	add	sp, #52	; 0x34
 801957a:	ecbd 8b02 	vpop	{d8}
 801957e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8019582:	9b03      	ldr	r3, [sp, #12]
 8019584:	2b03      	cmp	r3, #3
 8019586:	d110      	bne.n	80195aa <lv_label_is_char_under_pos+0x16e>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 8019588:	464b      	mov	r3, r9
 801958a:	f8cd 8000 	str.w	r8, [sp]
 801958e:	4652      	mov	r2, sl
 8019590:	1be9      	subs	r1, r5, r7
 8019592:	4630      	mov	r0, r6
 8019594:	f7fb fe50 	bl	8015238 <lv_txt_get_width>
 8019598:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801959c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 80195a0:	3301      	adds	r3, #1
 80195a2:	1b1b      	subs	r3, r3, r4
        x += lv_area_get_width(&txt_coords) - line_w;
 80195a4:	1a18      	subs	r0, r3, r0
 80195a6:	b204      	sxth	r4, r0
 80195a8:	e7c9      	b.n	801953e <lv_label_is_char_under_pos+0x102>
    lv_coord_t x      = 0;
 80195aa:	2400      	movs	r4, #0
 80195ac:	e7c7      	b.n	801953e <lv_label_is_char_under_pos+0x102>
                if(_lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 80195ae:	9b07      	ldr	r3, [sp, #28]
 80195b0:	f10d 001b 	add.w	r0, sp, #27
 80195b4:	f81b 1003 	ldrb.w	r1, [fp, r3]
 80195b8:	f7fb fc9e 	bl	8014ef8 <_lv_txt_is_cmd>
 80195bc:	b158      	cbz	r0, 80195d6 <lv_label_is_char_under_pos+0x19a>
        while(i <= new_line_start - 1) {
 80195be:	9b07      	ldr	r3, [sp, #28]
 80195c0:	429d      	cmp	r5, r3
 80195c2:	d3c5      	bcc.n	8019550 <lv_label_is_char_under_pos+0x114>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 80195c4:	ab07      	add	r3, sp, #28
 80195c6:	aa09      	add	r2, sp, #36	; 0x24
 80195c8:	a908      	add	r1, sp, #32
 80195ca:	4658      	mov	r0, fp
 80195cc:	f7fb fe1a 	bl	8015204 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80195d0:	f1b8 0f00 	cmp.w	r8, #0
 80195d4:	d1eb      	bne.n	80195ae <lv_label_is_char_under_pos+0x172>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 80195d6:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80195da:	4650      	mov	r0, sl
 80195dc:	f7f8 fccc 	bl	8011f78 <lv_font_get_glyph_width>
            if(pos->x < x) {
 80195e0:	9a02      	ldr	r2, [sp, #8]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 80195e2:	4420      	add	r0, r4
            if(pos->x < x) {
 80195e4:	f9b2 2000 	ldrsh.w	r2, [r2]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 80195e8:	b283      	uxth	r3, r0
            if(pos->x < x) {
 80195ea:	b200      	sxth	r0, r0
 80195ec:	4282      	cmp	r2, r0
 80195ee:	da02      	bge.n	80195f6 <lv_label_is_char_under_pos+0x1ba>
                i = i_current;
 80195f0:	9707      	str	r7, [sp, #28]
                break;
 80195f2:	4626      	mov	r6, r4
 80195f4:	e7ac      	b.n	8019550 <lv_label_is_char_under_pos+0x114>
            x += letter_space;
 80195f6:	444b      	add	r3, r9
            i_current = i;
 80195f8:	4626      	mov	r6, r4
 80195fa:	9f07      	ldr	r7, [sp, #28]
            x += letter_space;
 80195fc:	b21c      	sxth	r4, r3
 80195fe:	e7de      	b.n	80195be <lv_label_is_char_under_pos+0x182>
        while(i <= new_line_start - 1) {
 8019600:	3d01      	subs	r5, #1
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8019602:	f008 0801 	and.w	r8, r8, #1
 8019606:	e7da      	b.n	80195be <lv_label_is_char_under_pos+0x182>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 8019608:	2000      	movs	r0, #0
 801960a:	e7b5      	b.n	8019578 <lv_label_is_char_under_pos+0x13c>

0801960c <lv_label_get_text_selection_start>:
}
 801960c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801960e:	4770      	bx	lr

08019610 <lv_label_get_text_selection_end>:
}
 8019610:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019612:	4770      	bx	lr

08019614 <lv_label_ins_text>:
{
 8019614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019618:	4604      	mov	r4, r0
 801961a:	460d      	mov	r5, r1
    LV_ASSERT_NULL(txt);
 801961c:	4616      	mov	r6, r2
 801961e:	b902      	cbnz	r2, 8019622 <lv_label_ins_text+0xe>
 8019620:	e7fe      	b.n	8019620 <lv_label_ins_text+0xc>
    if(label->static_txt != 0) return;
 8019622:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8019626:	071b      	lsls	r3, r3, #28
 8019628:	d425      	bmi.n	8019676 <lv_label_ins_text+0x62>
    lv_obj_invalidate(obj);
 801962a:	f7eb fe9d 	bl	8005368 <lv_obj_invalidate>
    size_t old_len = strlen(label->text);
 801962e:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8019632:	4640      	mov	r0, r8
 8019634:	f7e6 fdd6 	bl	80001e4 <strlen>
 8019638:	4607      	mov	r7, r0
    size_t ins_len = strlen(txt);
 801963a:	4630      	mov	r0, r6
 801963c:	f7e6 fdd2 	bl	80001e4 <strlen>
    size_t new_len = ins_len + old_len;
 8019640:	4438      	add	r0, r7
    label->text        = lv_mem_realloc(label->text, new_len + 1);
 8019642:	1c41      	adds	r1, r0, #1
 8019644:	4640      	mov	r0, r8
 8019646:	f7f9 fea5 	bl	8013394 <lv_mem_realloc>
 801964a:	6260      	str	r0, [r4, #36]	; 0x24
    LV_ASSERT_MALLOC(label->text);
 801964c:	b900      	cbnz	r0, 8019650 <lv_label_ins_text+0x3c>
 801964e:	e7fe      	b.n	801964e <lv_label_ins_text+0x3a>
    if(pos == LV_LABEL_POS_LAST) {
 8019650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019654:	429d      	cmp	r5, r3
 8019656:	d103      	bne.n	8019660 <lv_label_ins_text+0x4c>
        pos = _lv_txt_get_encoded_length(label->text);
 8019658:	4b08      	ldr	r3, [pc, #32]	; (801967c <lv_label_ins_text+0x68>)
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	4798      	blx	r3
 801965e:	4605      	mov	r5, r0
    _lv_txt_ins(label->text, pos, txt);
 8019660:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8019662:	4629      	mov	r1, r5
 8019664:	4632      	mov	r2, r6
 8019666:	f7fb fd7d 	bl	8015164 <_lv_txt_ins>
    lv_label_set_text(obj, NULL);
 801966a:	4620      	mov	r0, r4
 801966c:	2100      	movs	r1, #0
}
 801966e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_label_set_text(obj, NULL);
 8019672:	f7ff bd45 	b.w	8019100 <lv_label_set_text>
}
 8019676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801967a:	bf00      	nop
 801967c:	20000030 	.word	0x20000030

08019680 <set_y_anim>:
}


static void set_y_anim(void * obj, int32_t v)
{
    lv_obj_set_y(obj, v);
 8019680:	b209      	sxth	r1, r1
 8019682:	f7eb bb6e 	b.w	8004d62 <lv_obj_set_y>

08019686 <lv_obj_get_style_text_font>:
{
 8019686:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8019688:	2257      	movs	r2, #87	; 0x57
 801968a:	f7ed feff 	bl	800748c <lv_obj_get_style_prop>
}
 801968e:	bd08      	pop	{r3, pc}

08019690 <get_label>:
    return lv_obj_get_child(obj, 0);
 8019690:	2100      	movs	r1, #0
 8019692:	f7ee bcee 	b.w	8008072 <lv_obj_get_child>

08019696 <lv_obj_get_style_text_line_space.constprop.0>:
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 8019696:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8019698:	2259      	movs	r2, #89	; 0x59
 801969a:	2100      	movs	r1, #0
 801969c:	f7ed fef6 	bl	800748c <lv_obj_get_style_prop>
}
 80196a0:	b200      	sxth	r0, r0
 80196a2:	bd08      	pop	{r3, pc}

080196a4 <get_sel_area>:
{
 80196a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80196a6:	460f      	mov	r7, r1
    const lv_font_t * font_main = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80196a8:	2100      	movs	r1, #0
{
 80196aa:	4606      	mov	r6, r0
    const lv_font_t * font_main = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80196ac:	f7ff ffeb 	bl	8019686 <lv_obj_get_style_text_font>
    const lv_font_t * font_sel = lv_obj_get_style_text_font(obj, LV_PART_SELECTED);
 80196b0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    const lv_font_t * font_main = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80196b4:	4604      	mov	r4, r0
    const lv_font_t * font_sel = lv_obj_get_style_text_font(obj, LV_PART_SELECTED);
 80196b6:	4630      	mov	r0, r6
 80196b8:	f7ff ffe5 	bl	8019686 <lv_obj_get_style_text_font>
 80196bc:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80196c0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 80196c4:	4630      	mov	r0, r6
 80196c6:	f7ff ffe6 	bl	8019696 <lv_obj_get_style_text_line_space.constprop.0>
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 80196ca:	442c      	add	r4, r5
 80196cc:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80196d0:	eb00 0464 	add.w	r4, r0, r4, asr #1
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 80196d4:	4630      	mov	r0, r6
 80196d6:	8af5      	ldrh	r5, [r6, #22]
 80196d8:	f7eb fc36 	bl	8004f48 <lv_obj_get_height>
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 80196dc:	b2a4      	uxth	r4, r4
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 80196de:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80196e2:	eb05 0363 	add.w	r3, r5, r3, asr #1
 80196e6:	0be5      	lsrs	r5, r4, #15
 80196e8:	fa05 f584 	sxtah	r5, r5, r4
 80196ec:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 80196f0:	b29b      	uxth	r3, r3
    sel_area->y2 = sel_area->y1 + d;
 80196f2:	441c      	add	r4, r3
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 80196f4:	807b      	strh	r3, [r7, #2]
    sel_area->y2 = sel_area->y1 + d;
 80196f6:	80fc      	strh	r4, [r7, #6]
    lv_obj_get_coords(obj, &roller_coords);
 80196f8:	4669      	mov	r1, sp
 80196fa:	4630      	mov	r0, r6
 80196fc:	f7eb fbea 	bl	8004ed4 <lv_obj_get_coords>
    sel_area->x1 = roller_coords.x1;
 8019700:	f8bd 3000 	ldrh.w	r3, [sp]
 8019704:	803b      	strh	r3, [r7, #0]
    sel_area->x2 = roller_coords.x2;
 8019706:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801970a:	80bb      	strh	r3, [r7, #4]
}
 801970c:	b003      	add	sp, #12
 801970e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019710 <inf_normalize>:
{
 8019710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8019712:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8019716:	07db      	lsls	r3, r3, #31
{
 8019718:	4604      	mov	r4, r0
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801971a:	d537      	bpl.n	801978c <inf_normalize+0x7c>
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 801971c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 801971e:	2207      	movs	r2, #7
 8019720:	fbb3 f2f2 	udiv	r2, r3, r2
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 8019724:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8019726:	fbb3 f5f2 	udiv	r5, r3, r2
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801972a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 801972e:	fb02 3315 	mls	r3, r2, r5, r3
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 8019732:	fa13 f381 	uxtah	r3, r3, r1
 8019736:	b29b      	uxth	r3, r3
 8019738:	84c3      	strh	r3, [r0, #38]	; 0x26
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 801973a:	fbb3 f5f2 	udiv	r5, r3, r2
 801973e:	fb02 3315 	mls	r3, r2, r5, r3
        roller->sel_opt_id_ori += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 8019742:	fa13 f381 	uxtah	r3, r3, r1
 8019746:	8503      	strh	r3, [r0, #40]	; 0x28
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8019748:	2100      	movs	r1, #0
 801974a:	f7ff ff9c 	bl	8019686 <lv_obj_get_style_text_font>
 801974e:	4605      	mov	r5, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8019750:	4620      	mov	r0, r4
 8019752:	f7ff ffa0 	bl	8019696 <lv_obj_get_style_text_line_space.constprop.0>
 8019756:	4607      	mov	r7, r0
        lv_coord_t h                   = lv_obj_get_content_height(obj);
 8019758:	4620      	mov	r0, r4
 801975a:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 801975e:	f7eb fc0f 	bl	8004f80 <lv_obj_get_content_height>
 8019762:	4605      	mov	r5, r0
        lv_obj_t * label = get_label(obj);
 8019764:	4620      	mov	r0, r4
 8019766:	f7ff ff93 	bl	8019690 <get_label>
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 801976a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801976c:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
 8019770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 8019774:	443e      	add	r6, r7
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8019776:	1049      	asrs	r1, r1, #1
 8019778:	ebc1 0165 	rsb	r1, r1, r5, asr #1
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 801977c:	fb13 f606 	smulbb	r6, r3, r6
        lv_coord_t new_y = mid_y1 - sel_y1;
 8019780:	1b89      	subs	r1, r1, r6
        lv_obj_set_y(label, new_y);
 8019782:	b209      	sxth	r1, r1
}
 8019784:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_set_y(label, new_y);
 8019788:	f7eb baeb 	b.w	8004d62 <lv_obj_set_y>
}
 801978c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801978e <scroll_anim_ready_cb>:
{
 801978e:	b508      	push	{r3, lr}
    lv_obj_t * obj = lv_obj_get_parent(a->var); /*The label is animated*/
 8019790:	6800      	ldr	r0, [r0, #0]
 8019792:	f7ee fc6b 	bl	800806c <lv_obj_get_parent>
}
 8019796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    inf_normalize(obj);
 801979a:	f7ff bfb9 	b.w	8019710 <inf_normalize>
	...

080197a0 <refr_position>:
{
 80197a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197a4:	b093      	sub	sp, #76	; 0x4c
 80197a6:	4606      	mov	r6, r0
 80197a8:	4688      	mov	r8, r1
    lv_obj_t * label = get_label(obj);
 80197aa:	f7ff ff71 	bl	8019690 <get_label>
    if(label == NULL) return;
 80197ae:	4604      	mov	r4, r0
 80197b0:	2800      	cmp	r0, #0
 80197b2:	d07c      	beq.n	80198ae <refr_position+0x10e>
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, lv_label_get_text(label));
 80197b4:	f7ff fd56 	bl	8019264 <lv_label_get_text>
 80197b8:	2100      	movs	r1, #0
 80197ba:	4602      	mov	r2, r0
 80197bc:	4620      	mov	r0, r4
 80197be:	f7ee fbff 	bl	8007fc0 <lv_obj_calculate_style_text_align>
    switch(align) {
 80197c2:	2802      	cmp	r0, #2
 80197c4:	d005      	beq.n	80197d2 <refr_position+0x32>
 80197c6:	2803      	cmp	r0, #3
 80197c8:	d052      	beq.n	8019870 <refr_position+0xd0>
 80197ca:	2801      	cmp	r0, #1
 80197cc:	d110      	bne.n	80197f0 <refr_position+0x50>
            lv_obj_set_x(label, 0);
 80197ce:	2100      	movs	r1, #0
 80197d0:	e00b      	b.n	80197ea <refr_position+0x4a>
            lv_obj_set_x(label, (lv_obj_get_content_width(obj) - lv_obj_get_width(label)) / 2);
 80197d2:	4630      	mov	r0, r6
 80197d4:	f7eb fbbe 	bl	8004f54 <lv_obj_get_content_width>
 80197d8:	4605      	mov	r5, r0
 80197da:	4620      	mov	r0, r4
 80197dc:	f7eb fbae 	bl	8004f3c <lv_obj_get_width>
 80197e0:	1a28      	subs	r0, r5, r0
 80197e2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80197e6:	f340 014f 	sbfx	r1, r0, #1, #16
            lv_obj_set_x(label, 0);
 80197ea:	4620      	mov	r0, r4
 80197ec:	f7eb faa2 	bl	8004d34 <lv_obj_set_x>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80197f0:	2100      	movs	r1, #0
 80197f2:	4630      	mov	r0, r6
 80197f4:	f7ff ff47 	bl	8019686 <lv_obj_get_style_text_font>
 80197f8:	4607      	mov	r7, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 80197fa:	4630      	mov	r0, r6
 80197fc:	f7ff ff4b 	bl	8019696 <lv_obj_get_style_text_line_space.constprop.0>
 8019800:	4682      	mov	sl, r0
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 8019802:	4630      	mov	r0, r6
 8019804:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 8019808:	f7eb fbba 	bl	8004f80 <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801980c:	2264      	movs	r2, #100	; 0x64
 801980e:	4605      	mov	r5, r0
 8019810:	2100      	movs	r1, #0
 8019812:	4630      	mov	r0, r6
 8019814:	f7ed fe3a 	bl	800748c <lv_obj_get_style_prop>
 8019818:	4607      	mov	r7, r0
    uint16_t anim_time             = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);
 801981a:	fa1f fb80 	uxth.w	fp, r0
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801981e:	f1b8 0f00 	cmp.w	r8, #0
 8019822:	d002      	beq.n	801982a <refr_position+0x8a>
 8019824:	f1bb 0f00 	cmp.w	fp, #0
 8019828:	d102      	bne.n	8019830 <refr_position+0x90>
        inf_normalize(obj);
 801982a:	4630      	mov	r0, r6
 801982c:	f7ff ff70 	bl	8019710 <inf_normalize>
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8019830:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
 8019834:	eb09 75d9 	add.w	r5, r9, r9, lsr #31
    lv_coord_t sel_y1 = id * (font_h + line_space);
 8019838:	44d1      	add	r9, sl
 801983a:	f8b6 a026 	ldrh.w	sl, [r6, #38]	; 0x26
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801983e:	106d      	asrs	r5, r5, #1
 8019840:	ebc5 0560 	rsb	r5, r5, r0, asr #1
    lv_coord_t sel_y1 = id * (font_h + line_space);
 8019844:	fb1a f909 	smulbb	r9, sl, r9
    lv_coord_t new_y = mid_y1 - sel_y1;
 8019848:	eba5 0509 	sub.w	r5, r5, r9
 801984c:	b22d      	sxth	r5, r5
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801984e:	f1b8 0f00 	cmp.w	r8, #0
 8019852:	d002      	beq.n	801985a <refr_position+0xba>
 8019854:	f1bb 0f00 	cmp.w	fp, #0
 8019858:	d114      	bne.n	8019884 <refr_position+0xe4>
        lv_anim_del(label, set_y_anim);
 801985a:	4916      	ldr	r1, [pc, #88]	; (80198b4 <refr_position+0x114>)
 801985c:	4620      	mov	r0, r4
 801985e:	f7f8 fef7 	bl	8012650 <lv_anim_del>
        lv_obj_set_y(label, new_y);
 8019862:	4629      	mov	r1, r5
 8019864:	4620      	mov	r0, r4
}
 8019866:	b013      	add	sp, #76	; 0x4c
 8019868:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_set_y(label, new_y);
 801986c:	f7eb ba79 	b.w	8004d62 <lv_obj_set_y>
            lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
 8019870:	4630      	mov	r0, r6
 8019872:	f7eb fb6f 	bl	8004f54 <lv_obj_get_content_width>
 8019876:	4605      	mov	r5, r0
 8019878:	4620      	mov	r0, r4
 801987a:	f7eb fb5f 	bl	8004f3c <lv_obj_get_width>
 801987e:	1a28      	subs	r0, r5, r0
 8019880:	b201      	sxth	r1, r0
 8019882:	e7b2      	b.n	80197ea <refr_position+0x4a>
        lv_anim_init(&a);
 8019884:	a801      	add	r0, sp, #4
 8019886:	f7f8 fec9 	bl	801261c <lv_anim_init>
    a->exec_cb = exec_cb;
 801988a:	4b0a      	ldr	r3, [pc, #40]	; (80198b4 <refr_position+0x114>)
 801988c:	9302      	str	r3, [sp, #8]
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 801988e:	4620      	mov	r0, r4
    a->var = var;
 8019890:	9401      	str	r4, [sp, #4]
 8019892:	f7eb fb2c 	bl	8004eee <lv_obj_get_y>
    a->ready_cb = ready_cb;
 8019896:	4b08      	ldr	r3, [pc, #32]	; (80198b8 <refr_position+0x118>)
 8019898:	9304      	str	r3, [sp, #16]
    a->current_value = start;
 801989a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
    a->path_cb = path_cb;
 801989e:	4b07      	ldr	r3, [pc, #28]	; (80198bc <refr_position+0x11c>)
 80198a0:	950b      	str	r5, [sp, #44]	; 0x2c
    a->time = duration;
 80198a2:	b2bf      	uxth	r7, r7
        lv_anim_start(&a);
 80198a4:	a801      	add	r0, sp, #4
 80198a6:	970c      	str	r7, [sp, #48]	; 0x30
    a->path_cb = path_cb;
 80198a8:	9308      	str	r3, [sp, #32]
 80198aa:	f7f8 ff01 	bl	80126b0 <lv_anim_start>
}
 80198ae:	b013      	add	sp, #76	; 0x4c
 80198b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198b4:	08019681 	.word	0x08019681
 80198b8:	0801978f 	.word	0x0801978f
 80198bc:	08012781 	.word	0x08012781

080198c0 <lv_roller_set_options.part.0>:
void lv_roller_set_options(lv_obj_t * obj, const char * options, lv_roller_mode_t mode)
 80198c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198c4:	4604      	mov	r4, r0
 80198c6:	4689      	mov	r9, r1
 80198c8:	4615      	mov	r5, r2
    lv_obj_t * label = get_label(obj);
 80198ca:	f7ff fee1 	bl	8019690 <get_label>
    roller->option_cnt = 0;
 80198ce:	2300      	movs	r3, #0
    lv_obj_t * label = get_label(obj);
 80198d0:	4606      	mov	r6, r0
    roller->option_cnt = 0;
 80198d2:	6263      	str	r3, [r4, #36]	; 0x24
    roller->sel_opt_id_ori = 0;
 80198d4:	8523      	strh	r3, [r4, #40]	; 0x28
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80198d6:	f109 31ff 	add.w	r1, r9, #4294967295
        if(options[cnt] == '\n') roller->option_cnt++;
 80198da:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80198dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        if(options[cnt] == '\n') roller->option_cnt++;
 80198e0:	3301      	adds	r3, #1
 80198e2:	b29b      	uxth	r3, r3
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80198e4:	b992      	cbnz	r2, 801990c <lv_roller_set_options.part.0+0x4c>
    roller->option_cnt++; /*Last option has no `\n`*/
 80198e6:	84a3      	strh	r3, [r4, #36]	; 0x24
    if(mode == LV_ROLLER_MODE_NORMAL) {
 80198e8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80198ec:	b995      	cbnz	r5, 8019914 <lv_roller_set_options.part.0+0x54>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80198ee:	f365 0300 	bfi	r3, r5, #0, #1
 80198f2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        lv_label_set_text(label, options);
 80198f6:	4649      	mov	r1, r9
 80198f8:	4630      	mov	r0, r6
 80198fa:	f7ff fc01 	bl	8019100 <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80198fe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8019900:	8523      	strh	r3, [r4, #40]	; 0x28
    lv_obj_refresh_ext_draw_size(label);
 8019902:	4630      	mov	r0, r6
}
 8019904:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_refresh_ext_draw_size(label);
 8019908:	f7eb b937 	b.w	8004b7a <lv_obj_refresh_ext_draw_size>
        if(options[cnt] == '\n') roller->option_cnt++;
 801990c:	2a0a      	cmp	r2, #10
 801990e:	bf08      	it	eq
 8019910:	84a3      	strheq	r3, [r4, #36]	; 0x24
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8019912:	e7e2      	b.n	80198da <lv_roller_set_options.part.0+0x1a>
        roller->mode = LV_ROLLER_MODE_INFINITE;
 8019914:	f043 0301 	orr.w	r3, r3, #1
 8019918:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 801991c:	4648      	mov	r0, r9
 801991e:	f7e6 fc61 	bl	80001e4 <strlen>
 8019922:	1c45      	adds	r5, r0, #1
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 8019924:	ebc5 0ac5 	rsb	sl, r5, r5, lsl #3
 8019928:	4650      	mov	r0, sl
 801992a:	f7f9 fd4d 	bl	80133c8 <lv_mem_buf_get>
 801992e:	f04f 0807 	mov.w	r8, #7
 8019932:	4607      	mov	r7, r0
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8019934:	eb00 0b05 	add.w	fp, r0, r5
            strcpy(&opt_extra[opt_len * i], options);
 8019938:	ebab 0005 	sub.w	r0, fp, r5
 801993c:	4649      	mov	r1, r9
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801993e:	f108 38ff 	add.w	r8, r8, #4294967295
            strcpy(&opt_extra[opt_len * i], options);
 8019942:	f004 fbdd 	bl	801e100 <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8019946:	230a      	movs	r3, #10
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8019948:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 801994c:	f80b 3c01 	strb.w	r3, [fp, #-1]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8019950:	44ab      	add	fp, r5
 8019952:	d1f1      	bne.n	8019938 <lv_roller_set_options.part.0+0x78>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8019954:	44ba      	add	sl, r7
        lv_label_set_text(label, opt_extra);
 8019956:	4639      	mov	r1, r7
 8019958:	4630      	mov	r0, r6
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 801995a:	f80a 8c01 	strb.w	r8, [sl, #-1]
        lv_label_set_text(label, opt_extra);
 801995e:	f7ff fbcf 	bl	8019100 <lv_label_set_text>
        lv_mem_buf_release(opt_extra);
 8019962:	4638      	mov	r0, r7
 8019964:	f7f9 fd7c 	bl	8013460 <lv_mem_buf_release>
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 8019968:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801996a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 801996e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 8019972:	84e2      	strh	r2, [r4, #38]	; 0x26
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 8019974:	84a3      	strh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 8019976:	4620      	mov	r0, r4
 8019978:	f7ff feca 	bl	8019710 <inf_normalize>
 801997c:	e7bf      	b.n	80198fe <lv_roller_set_options.part.0+0x3e>
	...

08019980 <lv_roller_constructor>:
{
 8019980:	b538      	push	{r3, r4, r5, lr}
    roller->mode = LV_ROLLER_MODE_NORMAL;
 8019982:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
    roller->option_cnt = 0;
 8019986:	2500      	movs	r5, #0
{
 8019988:	460c      	mov	r4, r1
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801998a:	f365 0300 	bfi	r3, r5, #0, #1
 801998e:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    roller->option_cnt = 0;
 8019992:	624d      	str	r5, [r1, #36]	; 0x24
    roller->sel_opt_id_ori = 0;
 8019994:	850d      	strh	r5, [r1, #40]	; 0x28
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8019996:	4620      	mov	r0, r4
 8019998:	2110      	movs	r1, #16
 801999a:	f7ea faf8 	bl	8003f8e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN_VER);
 801999e:	4620      	mov	r0, r4
 80199a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80199a4:	f7ea faf3 	bl	8003f8e <lv_obj_clear_flag>
    lv_obj_t * label = lv_obj_class_create_obj(&lv_roller_label_class, obj);
 80199a8:	4621      	mov	r1, r4
 80199aa:	4806      	ldr	r0, [pc, #24]	; (80199c4 <lv_roller_constructor+0x44>)
 80199ac:	f7ea fd54 	bl	8004458 <lv_obj_class_create_obj>
    lv_obj_class_init_obj(label);
 80199b0:	f7ea fddf 	bl	8004572 <lv_obj_class_init_obj>
    LV_ASSERT_NULL(options);
 80199b4:	462a      	mov	r2, r5
 80199b6:	4620      	mov	r0, r4
 80199b8:	4903      	ldr	r1, [pc, #12]	; (80199c8 <lv_roller_constructor+0x48>)
}
 80199ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80199be:	f7ff bf7f 	b.w	80198c0 <lv_roller_set_options.part.0>
 80199c2:	bf00      	nop
 80199c4:	08020598 	.word	0x08020598
 80199c8:	0802054c 	.word	0x0802054c

080199cc <get_selected_label_width>:
{
 80199cc:	b570      	push	{r4, r5, r6, lr}
 80199ce:	b088      	sub	sp, #32
 80199d0:	4605      	mov	r5, r0
    lv_obj_t * label = get_label(obj);
 80199d2:	f7ff fe5d 	bl	8019690 <get_label>
    if(label == NULL) return 0;
 80199d6:	4604      	mov	r4, r0
 80199d8:	b1f0      	cbz	r0, 8019a18 <get_selected_label_width+0x4c>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_SELECTED);
 80199da:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80199de:	4628      	mov	r0, r5
 80199e0:	f7ff fe51 	bl	8019686 <lv_obj_get_style_text_font>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80199e4:	2258      	movs	r2, #88	; 0x58
 80199e6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80199ea:	4606      	mov	r6, r0
 80199ec:	4628      	mov	r0, r5
 80199ee:	f7ed fd4d 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80199f2:	b203      	sxth	r3, r0
    const char * txt = lv_label_get_text(label);
 80199f4:	4620      	mov	r0, r4
 80199f6:	9305      	str	r3, [sp, #20]
 80199f8:	f7ff fc34 	bl	8019264 <lv_label_get_text>
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 80199fc:	2200      	movs	r2, #0
    const char * txt = lv_label_get_text(label);
 80199fe:	4601      	mov	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8019a00:	f641 70ff 	movw	r0, #8191	; 0x1fff
 8019a04:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8019a08:	9200      	str	r2, [sp, #0]
 8019a0a:	a807      	add	r0, sp, #28
 8019a0c:	9b05      	ldr	r3, [sp, #20]
 8019a0e:	4632      	mov	r2, r6
 8019a10:	f7fb fc54 	bl	80152bc <lv_txt_get_size>
    return size.x;
 8019a14:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
}
 8019a18:	b008      	add	sp, #32
 8019a1a:	bd70      	pop	{r4, r5, r6, pc}

08019a1c <lv_roller_label_event>:
{
 8019a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_event_code_t code = lv_event_get_code(e);
 8019a20:	4608      	mov	r0, r1
{
 8019a22:	b090      	sub	sp, #64	; 0x40
 8019a24:	460c      	mov	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 8019a26:	f7e9 fc15 	bl	8003254 <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN) {
 8019a2a:	2815      	cmp	r0, #21
    lv_event_code_t code = lv_event_get_code(e);
 8019a2c:	4605      	mov	r5, r0
    if(code != LV_EVENT_DRAW_MAIN) {
 8019a2e:	d11a      	bne.n	8019a66 <lv_roller_label_event+0x4a>
    lv_obj_t * label = lv_event_get_target(e);
 8019a30:	4620      	mov	r0, r4
 8019a32:	f7e9 fc0b 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8019a36:	2d13      	cmp	r5, #19
    lv_obj_t * label = lv_event_get_target(e);
 8019a38:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8019a3a:	d11d      	bne.n	8019a78 <lv_roller_label_event+0x5c>
        lv_coord_t * s = lv_event_get_param(e);
 8019a3c:	4620      	mov	r0, r4
 8019a3e:	f7e9 fc0d 	bl	800325c <lv_event_get_param>
 8019a42:	4605      	mov	r5, r0
        lv_obj_t * obj = lv_obj_get_parent(label);
 8019a44:	4630      	mov	r0, r6
 8019a46:	f7ee fb11 	bl	800806c <lv_obj_get_parent>
        lv_coord_t sel_w = get_selected_label_width(obj);
 8019a4a:	f7ff ffbf 	bl	80199cc <get_selected_label_width>
 8019a4e:	4604      	mov	r4, r0
        lv_coord_t label_w = lv_obj_get_width(label);
 8019a50:	4630      	mov	r0, r6
 8019a52:	f7eb fa73 	bl	8004f3c <lv_obj_get_width>
        *s = LV_MAX(*s, sel_w - label_w);
 8019a56:	1a24      	subs	r4, r4, r0
 8019a58:	f9b5 0000 	ldrsh.w	r0, [r5]
 8019a5c:	4284      	cmp	r4, r0
 8019a5e:	bfb8      	it	lt
 8019a60:	4604      	movlt	r4, r0
 8019a62:	802c      	strh	r4, [r5, #0]
 8019a64:	e005      	b.n	8019a72 <lv_roller_label_event+0x56>
        res = lv_obj_event_base(MY_CLASS_LABEL, e);
 8019a66:	4844      	ldr	r0, [pc, #272]	; (8019b78 <lv_roller_label_event+0x15c>)
 8019a68:	4621      	mov	r1, r4
 8019a6a:	f7e9 fb07 	bl	800307c <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8019a6e:	2801      	cmp	r0, #1
 8019a70:	d0de      	beq.n	8019a30 <lv_roller_label_event+0x14>
}
 8019a72:	b010      	add	sp, #64	; 0x40
 8019a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8019a78:	2d29      	cmp	r5, #41	; 0x29
 8019a7a:	d107      	bne.n	8019a8c <lv_roller_label_event+0x70>
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 8019a7c:	f7ee faf6 	bl	800806c <lv_obj_get_parent>
 8019a80:	2100      	movs	r1, #0
}
 8019a82:	b010      	add	sp, #64	; 0x40
 8019a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 8019a88:	f7ff be8a 	b.w	80197a0 <refr_position>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8019a8c:	2d15      	cmp	r5, #21
 8019a8e:	d1f0      	bne.n	8019a72 <lv_roller_label_event+0x56>
    lv_obj_t * label_obj = lv_event_get_target(e);
 8019a90:	4620      	mov	r0, r4
 8019a92:	f7e9 fbdb 	bl	800324c <lv_event_get_target>
 8019a96:	4605      	mov	r5, r0
    lv_obj_t * roller = lv_obj_get_parent(label_obj);
 8019a98:	f7ee fae8 	bl	800806c <lv_obj_get_parent>
 8019a9c:	4606      	mov	r6, r0
    lv_draw_label_dsc_init(&label_draw_dsc);
 8019a9e:	a808      	add	r0, sp, #32
 8019aa0:	f7f0 f87a 	bl	8009b98 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(roller, LV_PART_MAIN, &label_draw_dsc);
 8019aa4:	4630      	mov	r0, r6
 8019aa6:	aa08      	add	r2, sp, #32
 8019aa8:	2100      	movs	r1, #0
 8019aaa:	f7ea ff09 	bl	80048c0 <lv_obj_init_draw_label_dsc>
    if(lv_label_get_recolor(label_obj)) label_draw_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 8019aae:	4628      	mov	r0, r5
 8019ab0:	f7ff fbda 	bl	8019268 <lv_label_get_recolor>
 8019ab4:	b128      	cbz	r0, 8019ac2 <lv_roller_label_event+0xa6>
 8019ab6:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8019aba:	f043 0301 	orr.w	r3, r3, #1
 8019abe:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8019ac2:	4620      	mov	r0, r4
 8019ac4:	f7e9 fc15 	bl	80032f2 <lv_event_get_draw_ctx>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8019ac8:	6887      	ldr	r7, [r0, #8]
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 8019aca:	f10d 0808 	add.w	r8, sp, #8
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8019ace:	4604      	mov	r4, r0
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 8019ad0:	f106 0214 	add.w	r2, r6, #20
 8019ad4:	4639      	mov	r1, r7
 8019ad6:	4640      	mov	r0, r8
 8019ad8:	f7f8 fecd 	bl	8012876 <_lv_area_intersect>
 8019adc:	2800      	cmp	r0, #0
 8019ade:	d0c8      	beq.n	8019a72 <lv_roller_label_event+0x56>
    get_sel_area(roller, &sel_area);
 8019ae0:	a904      	add	r1, sp, #16
 8019ae2:	4630      	mov	r0, r6
    draw_ctx->clip_area = &roller_clip_area;
 8019ae4:	f8c4 8008 	str.w	r8, [r4, #8]
    get_sel_area(roller, &sel_area);
 8019ae8:	f7ff fddc 	bl	80196a4 <get_sel_area>
    clip2.x1 = label_obj->coords.x1;
 8019aec:	8aab      	ldrh	r3, [r5, #20]
 8019aee:	f8ad 3018 	strh.w	r3, [sp, #24]
    clip2.y1 = label_obj->coords.y1;
 8019af2:	8aeb      	ldrh	r3, [r5, #22]
 8019af4:	f8ad 301a 	strh.w	r3, [sp, #26]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8019af8:	aa06      	add	r2, sp, #24
    clip2.x2 = label_obj->coords.x2;
 8019afa:	8b2b      	ldrh	r3, [r5, #24]
 8019afc:	f8ad 301c 	strh.w	r3, [sp, #28]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8019b00:	68a1      	ldr	r1, [r4, #8]
    clip2.y2 = sel_area.y1;
 8019b02:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019b06:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8019b0a:	4610      	mov	r0, r2
 8019b0c:	f7f8 feb3 	bl	8012876 <_lv_area_intersect>
 8019b10:	b178      	cbz	r0, 8019b32 <lv_roller_label_event+0x116>
        draw_ctx->clip_area = &clip2;
 8019b12:	ab06      	add	r3, sp, #24
        const lv_area_t * clip_area_ori2 = draw_ctx->clip_area;
 8019b14:	68a6      	ldr	r6, [r4, #8]
        draw_ctx->clip_area = &clip2;
 8019b16:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 8019b18:	4628      	mov	r0, r5
 8019b1a:	f7ff fba3 	bl	8019264 <lv_label_get_text>
 8019b1e:	2200      	movs	r2, #0
 8019b20:	4603      	mov	r3, r0
 8019b22:	9200      	str	r2, [sp, #0]
 8019b24:	a908      	add	r1, sp, #32
 8019b26:	f105 0214 	add.w	r2, r5, #20
 8019b2a:	4620      	mov	r0, r4
 8019b2c:	f7f0 f852 	bl	8009bd4 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori2;
 8019b30:	60a6      	str	r6, [r4, #8]
    clip2.x1 = label_obj->coords.x1;
 8019b32:	8aab      	ldrh	r3, [r5, #20]
 8019b34:	f8ad 3018 	strh.w	r3, [sp, #24]
    clip2.y1 = sel_area.y2;
 8019b38:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019b3c:	f8ad 301a 	strh.w	r3, [sp, #26]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8019b40:	aa06      	add	r2, sp, #24
    clip2.x2 = label_obj->coords.x2;
 8019b42:	8b2b      	ldrh	r3, [r5, #24]
 8019b44:	f8ad 301c 	strh.w	r3, [sp, #28]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8019b48:	68a1      	ldr	r1, [r4, #8]
    clip2.y2 = label_obj->coords.y2;
 8019b4a:	8b6b      	ldrh	r3, [r5, #26]
 8019b4c:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8019b50:	4610      	mov	r0, r2
 8019b52:	f7f8 fe90 	bl	8012876 <_lv_area_intersect>
 8019b56:	b168      	cbz	r0, 8019b74 <lv_roller_label_event+0x158>
        draw_ctx->clip_area = &clip2;
 8019b58:	ab06      	add	r3, sp, #24
 8019b5a:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 8019b5c:	4628      	mov	r0, r5
 8019b5e:	f7ff fb81 	bl	8019264 <lv_label_get_text>
 8019b62:	2200      	movs	r2, #0
 8019b64:	4603      	mov	r3, r0
 8019b66:	9200      	str	r2, [sp, #0]
 8019b68:	a908      	add	r1, sp, #32
 8019b6a:	f105 0214 	add.w	r2, r5, #20
 8019b6e:	4620      	mov	r0, r4
 8019b70:	f7f0 f830 	bl	8009bd4 <lv_draw_label>
    draw_ctx->clip_area = clip_area_ori;
 8019b74:	60a7      	str	r7, [r4, #8]
 8019b76:	e77c      	b.n	8019a72 <lv_roller_label_event+0x56>
 8019b78:	08020598 	.word	0x08020598

08019b7c <lv_roller_set_selected>:
{
 8019b7c:	460b      	mov	r3, r1
 8019b7e:	4611      	mov	r1, r2
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8019b80:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
 8019b84:	07d2      	lsls	r2, r2, #31
{
 8019b86:	b4f0      	push	{r4, r5, r6, r7}
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 8019b88:	8c86      	ldrh	r6, [r0, #36]	; 0x24
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8019b8a:	d51a      	bpl.n	8019bc2 <lv_roller_set_selected+0x46>
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 8019b8c:	2207      	movs	r2, #7
 8019b8e:	fbb6 f2f2 	udiv	r2, r6, r2
        if(sel_opt < real_option_cnt) {
 8019b92:	429a      	cmp	r2, r3
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 8019b94:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
        if(sel_opt < real_option_cnt) {
 8019b96:	d914      	bls.n	8019bc2 <lv_roller_set_selected+0x46>
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 8019b98:	fbb4 f5f2 	udiv	r5, r4, r2
            uint16_t act_opt = roller->sel_opt_id - current_page * real_option_cnt;
 8019b9c:	fb15 f502 	smulbb	r5, r5, r2
 8019ba0:	b2ad      	uxth	r5, r5
 8019ba2:	1b64      	subs	r4, r4, r5
 8019ba4:	b2a7      	uxth	r7, r4
            if(LV_ABS((int16_t)act_opt - sel_opt) > real_option_cnt / 2) {
 8019ba6:	b224      	sxth	r4, r4
 8019ba8:	1ae4      	subs	r4, r4, r3
 8019baa:	2c00      	cmp	r4, #0
 8019bac:	bfb8      	it	lt
 8019bae:	4264      	neglt	r4, r4
 8019bb0:	ebb4 0f52 	cmp.w	r4, r2, lsr #1
 8019bb4:	d903      	bls.n	8019bbe <lv_roller_set_selected+0x42>
                if(act_opt > sel_opt) sel_opt_signed += real_option_cnt;
 8019bb6:	42bb      	cmp	r3, r7
 8019bb8:	bf34      	ite	cc
 8019bba:	189b      	addcc	r3, r3, r2
                else sel_opt_signed -= real_option_cnt;
 8019bbc:	1a9b      	subcs	r3, r3, r2
            sel_opt = sel_opt_signed + real_option_cnt * current_page;
 8019bbe:	442b      	add	r3, r5
 8019bc0:	b29b      	uxth	r3, r3
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 8019bc2:	42b3      	cmp	r3, r6
 8019bc4:	bf24      	itt	cs
 8019bc6:	f106 33ff 	addcs.w	r3, r6, #4294967295
 8019bca:	b29b      	uxthcs	r3, r3
}
 8019bcc:	bcf0      	pop	{r4, r5, r6, r7}
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 8019bce:	84c3      	strh	r3, [r0, #38]	; 0x26
    roller->sel_opt_id_ori = roller->sel_opt_id;
 8019bd0:	8503      	strh	r3, [r0, #40]	; 0x28
    refr_position(obj, anim);
 8019bd2:	f7ff bde5 	b.w	80197a0 <refr_position>
	...

08019bd8 <lv_roller_event>:
{
 8019bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8019bdc:	48b7      	ldr	r0, [pc, #732]	; (8019ebc <lv_roller_event+0x2e4>)
{
 8019bde:	b09c      	sub	sp, #112	; 0x70
 8019be0:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8019be2:	f7e9 fa4b 	bl	800307c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8019be6:	2801      	cmp	r0, #1
 8019be8:	d111      	bne.n	8019c0e <lv_roller_event+0x36>
    lv_event_code_t code = lv_event_get_code(e);
 8019bea:	4630      	mov	r0, r6
 8019bec:	f7e9 fb32 	bl	8003254 <lv_event_get_code>
 8019bf0:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8019bf2:	4630      	mov	r0, r6
 8019bf4:	f7e9 fb2a 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_GET_SELF_SIZE) {
 8019bf8:	2d2c      	cmp	r5, #44	; 0x2c
    lv_obj_t * obj = lv_event_get_target(e);
 8019bfa:	4604      	mov	r4, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 8019bfc:	d10a      	bne.n	8019c14 <lv_roller_event+0x3c>
        lv_point_t * p = lv_event_get_param(e);
 8019bfe:	4630      	mov	r0, r6
 8019c00:	f7e9 fb2c 	bl	800325c <lv_event_get_param>
 8019c04:	4605      	mov	r5, r0
        p->x = get_selected_label_width(obj);
 8019c06:	4620      	mov	r0, r4
 8019c08:	f7ff fee0 	bl	80199cc <get_selected_label_width>
 8019c0c:	8028      	strh	r0, [r5, #0]
}
 8019c0e:	b01c      	add	sp, #112	; 0x70
 8019c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(code == LV_EVENT_STYLE_CHANGED) {
 8019c14:	2d2a      	cmp	r5, #42	; 0x2a
 8019c16:	d10c      	bne.n	8019c32 <lv_roller_event+0x5a>
        lv_obj_t * label = get_label(obj);
 8019c18:	f7ff fd3a 	bl	8019690 <get_label>
        if(label) lv_event_send(label, LV_EVENT_STYLE_CHANGED, NULL);
 8019c1c:	b118      	cbz	r0, 8019c26 <lv_roller_event+0x4e>
 8019c1e:	2200      	movs	r2, #0
 8019c20:	4629      	mov	r1, r5
 8019c22:	f7e9 faf3 	bl	800320c <lv_event_send>
        lv_obj_refresh_self_size(obj);
 8019c26:	4620      	mov	r0, r4
 8019c28:	f7eb fa12 	bl	8005050 <lv_obj_refresh_self_size>
        refr_position(obj, LV_ANIM_OFF);
 8019c2c:	2100      	movs	r1, #0
                    refr_position(obj, LV_ANIM_ON);
 8019c2e:	4620      	mov	r0, r4
 8019c30:	e002      	b.n	8019c38 <lv_roller_event+0x60>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8019c32:	2d29      	cmp	r5, #41	; 0x29
 8019c34:	d105      	bne.n	8019c42 <lv_roller_event+0x6a>
        refr_position(obj, LV_ANIM_OFF);
 8019c36:	2100      	movs	r1, #0
}
 8019c38:	b01c      	add	sp, #112	; 0x70
 8019c3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        refr_position(obj, LV_ANIM_OFF);
 8019c3e:	f7ff bdaf 	b.w	80197a0 <refr_position>
    else if(code == LV_EVENT_PRESSED) {
 8019c42:	2d01      	cmp	r5, #1
 8019c44:	d10d      	bne.n	8019c62 <lv_roller_event+0x8a>
        roller->moved = 0;
 8019c46:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8019c4a:	f36f 0341 	bfc	r3, #1, #1
 8019c4e:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
        lv_anim_del(get_label(obj), set_y_anim);
 8019c52:	f7ff fd1d 	bl	8019690 <get_label>
 8019c56:	499a      	ldr	r1, [pc, #616]	; (8019ec0 <lv_roller_event+0x2e8>)
}
 8019c58:	b01c      	add	sp, #112	; 0x70
 8019c5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        lv_anim_del(get_label(obj), set_y_anim);
 8019c5e:	f7f8 bcf7 	b.w	8012650 <lv_anim_del>
    else if(code == LV_EVENT_PRESSING) {
 8019c62:	2d02      	cmp	r5, #2
 8019c64:	d11c      	bne.n	8019ca0 <lv_roller_event+0xc8>
        lv_indev_t * indev = lv_indev_get_act();
 8019c66:	f7e9 fce5 	bl	8003634 <lv_indev_get_act>
        lv_indev_get_vect(indev, &p);
 8019c6a:	a910      	add	r1, sp, #64	; 0x40
 8019c6c:	f7e9 fd77 	bl	800375e <lv_indev_get_vect>
        if(p.y) {
 8019c70:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d0ca      	beq.n	8019c0e <lv_roller_event+0x36>
            lv_obj_t * label = get_label(obj);
 8019c78:	4620      	mov	r0, r4
 8019c7a:	f7ff fd09 	bl	8019690 <get_label>
 8019c7e:	4605      	mov	r5, r0
            lv_obj_set_y(label, lv_obj_get_y(label) + p.y);
 8019c80:	f7eb f935 	bl	8004eee <lv_obj_get_y>
 8019c84:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8019c88:	4401      	add	r1, r0
 8019c8a:	b209      	sxth	r1, r1
 8019c8c:	4628      	mov	r0, r5
 8019c8e:	f7eb f868 	bl	8004d62 <lv_obj_set_y>
            roller->moved = 1;
 8019c92:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8019c96:	f043 0302 	orr.w	r3, r3, #2
 8019c9a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 8019c9e:	e7b6      	b.n	8019c0e <lv_roller_event+0x36>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 8019ca0:	2d08      	cmp	r5, #8
 8019ca2:	d002      	beq.n	8019caa <lv_roller_event+0xd2>
 8019ca4:	2d03      	cmp	r5, #3
 8019ca6:	f040 8095 	bne.w	8019dd4 <lv_roller_event+0x1fc>
    lv_obj_t * label = get_label(obj);
 8019caa:	4620      	mov	r0, r4
 8019cac:	f7ff fcf0 	bl	8019690 <get_label>
    if(label == NULL) return LV_RES_OK;
 8019cb0:	4607      	mov	r7, r0
 8019cb2:	2800      	cmp	r0, #0
 8019cb4:	d0ab      	beq.n	8019c0e <lv_roller_event+0x36>
    lv_indev_t * indev = lv_indev_get_act();
 8019cb6:	f7e9 fcbd 	bl	8003634 <lv_indev_get_act>
 8019cba:	4680      	mov	r8, r0
    lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8019cbc:	f7e9 fcc0 	bl	8003640 <lv_indev_get_type>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8019cc0:	2804      	cmp	r0, #4
 8019cc2:	d001      	beq.n	8019cc8 <lv_roller_event+0xf0>
 8019cc4:	2802      	cmp	r0, #2
 8019cc6:	d10e      	bne.n	8019ce6 <lv_roller_event+0x10e>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8019cc8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8019cca:	8523      	strh	r3, [r4, #40]	; 0x28
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8019ccc:	2804      	cmp	r0, #4
 8019cce:	d10a      	bne.n	8019ce6 <lv_roller_event+0x10e>
            lv_group_t * g      = lv_obj_get_group(obj);
 8019cd0:	4620      	mov	r0, r4
 8019cd2:	f7ea f9b9 	bl	8004048 <lv_obj_get_group>
 8019cd6:	4605      	mov	r5, r0
            if(lv_group_get_editing(g)) {
 8019cd8:	f7e9 fca7 	bl	800362a <lv_group_get_editing>
 8019cdc:	b118      	cbz	r0, 8019ce6 <lv_roller_event+0x10e>
                lv_group_set_editing(g, false);
 8019cde:	2100      	movs	r1, #0
 8019ce0:	4628      	mov	r0, r5
 8019ce2:	f7e9 fc81 	bl	80035e8 <lv_group_set_editing>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8019ce6:	4640      	mov	r0, r8
 8019ce8:	f7e9 fcaa 	bl	8003640 <lv_indev_get_type>
 8019cec:	2801      	cmp	r0, #1
 8019cee:	d12e      	bne.n	8019d4e <lv_roller_event+0x176>
        if(roller->moved == 0) {
 8019cf0:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 8019cf4:	f016 0602 	ands.w	r6, r6, #2
 8019cf8:	d036      	beq.n	8019d68 <lv_roller_event+0x190>
            const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8019cfa:	2100      	movs	r1, #0
 8019cfc:	4620      	mov	r0, r4
 8019cfe:	f7ff fcc2 	bl	8019686 <lv_obj_get_style_text_font>
 8019d02:	4605      	mov	r5, r0
            lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8019d04:	4620      	mov	r0, r4
 8019d06:	f7ff fcc6 	bl	8019696 <lv_obj_get_style_text_line_space.constprop.0>
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8019d0a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8019d0e:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
            lv_coord_t label_unit = font_h + line_space;
 8019d12:	f8b5 9008 	ldrh.w	r9, [r5, #8]
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8019d16:	8afd      	ldrh	r5, [r7, #22]
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8019d18:	1af6      	subs	r6, r6, r3
            lv_coord_t label_unit = font_h + line_space;
 8019d1a:	4448      	add	r0, r9
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8019d1c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8019d20:	eb03 0366 	add.w	r3, r3, r6, asr #1
            lv_coord_t label_unit = font_h + line_space;
 8019d24:	fa0f f980 	sxth.w	r9, r0
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8019d28:	210c      	movs	r1, #12
 8019d2a:	4640      	mov	r0, r8
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8019d2c:	b21e      	sxth	r6, r3
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8019d2e:	f7e9 fd2d 	bl	800378c <lv_indev_scroll_throw_predict>
 8019d32:	4405      	add	r5, r0
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 8019d34:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
            int32_t id = (mid - label_y1) / label_unit;
 8019d36:	b22d      	sxth	r5, r5
 8019d38:	1b75      	subs	r5, r6, r5
 8019d3a:	fb95 f5f9 	sdiv	r5, r5, r9
            if(id < 0) id = 0;
 8019d3e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 8019d42:	429d      	cmp	r5, r3
 8019d44:	bfa8      	it	ge
 8019d46:	f103 35ff 	addge.w	r5, r3, #4294967295
            new_opt = id;
 8019d4a:	b22d      	sxth	r5, r5
 8019d4c:	e02c      	b.n	8019da8 <lv_roller_event+0x1d0>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8019d4e:	4640      	mov	r0, r8
 8019d50:	f7e9 fc76 	bl	8003640 <lv_indev_get_type>
 8019d54:	2803      	cmp	r0, #3
 8019d56:	d0cb      	beq.n	8019cf0 <lv_roller_event+0x118>
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 8019d58:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8019d5a:	9310      	str	r3, [sp, #64]	; 0x40
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8019d5c:	aa10      	add	r2, sp, #64	; 0x40
 8019d5e:	211c      	movs	r1, #28
 8019d60:	4620      	mov	r0, r4
 8019d62:	f7e9 fa53 	bl	800320c <lv_event_send>
    return res;
 8019d66:	e752      	b.n	8019c0e <lv_roller_event+0x36>
            lv_indev_get_point(indev, &p);
 8019d68:	4640      	mov	r0, r8
 8019d6a:	a90e      	add	r1, sp, #56	; 0x38
 8019d6c:	f7e9 fcc9 	bl	8003702 <lv_indev_get_point>
            p.y -= label->coords.y1;
 8019d70:	8afa      	ldrh	r2, [r7, #22]
 8019d72:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8019d76:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8019ec4 <lv_roller_event+0x2ec>
            p.y -= label->coords.y1;
 8019d7a:	1a9b      	subs	r3, r3, r2
 8019d7c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            p.x -= label->coords.x1;
 8019d80:	8aba      	ldrh	r2, [r7, #20]
 8019d82:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
            letter_i = lv_label_get_letter_on(label, &p);
 8019d86:	a90e      	add	r1, sp, #56	; 0x38
            p.x -= label->coords.x1;
 8019d88:	1a9b      	subs	r3, r3, r2
            letter_i = lv_label_get_letter_on(label, &p);
 8019d8a:	4638      	mov	r0, r7
            p.x -= label->coords.x1;
 8019d8c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            letter_i = lv_label_get_letter_on(label, &p);
 8019d90:	f7ff fb50 	bl	8019434 <lv_label_get_letter_on>
 8019d94:	4680      	mov	r8, r0
            const char * txt  = lv_label_get_text(label);
 8019d96:	4638      	mov	r0, r7
 8019d98:	f7ff fa64 	bl	8019264 <lv_label_get_text>
            uint32_t i_prev   = 0;
 8019d9c:	4637      	mov	r7, r6
            const char * txt  = lv_label_get_text(label);
 8019d9e:	4681      	mov	r9, r0
            uint32_t i        = 0;
 8019da0:	9610      	str	r6, [sp, #64]	; 0x40
            new_opt = 0;
 8019da2:	4635      	mov	r5, r6
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8019da4:	45b0      	cmp	r8, r6
 8019da6:	d107      	bne.n	8019db8 <lv_roller_event+0x1e0>
        if(new_opt >= 0) {
 8019da8:	2d00      	cmp	r5, #0
 8019daa:	dbd5      	blt.n	8019d58 <lv_roller_event+0x180>
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
 8019dac:	2201      	movs	r2, #1
 8019dae:	b2a9      	uxth	r1, r5
 8019db0:	4620      	mov	r0, r4
 8019db2:	f7ff fee3 	bl	8019b7c <lv_roller_set_selected>
 8019db6:	e7cf      	b.n	8019d58 <lv_roller_event+0x180>
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8019db8:	f8da 3000 	ldr.w	r3, [sl]
 8019dbc:	a910      	add	r1, sp, #64	; 0x40
 8019dbe:	4648      	mov	r0, r9
 8019dc0:	4798      	blx	r3
                if(letter == '\n' && i_prev != letter_i) new_opt++;
 8019dc2:	280a      	cmp	r0, #10
 8019dc4:	d103      	bne.n	8019dce <lv_roller_event+0x1f6>
 8019dc6:	45b8      	cmp	r8, r7
 8019dc8:	bf1c      	itt	ne
 8019dca:	3501      	addne	r5, #1
 8019dcc:	b22d      	sxthne	r5, r5
                i_prev = i;
 8019dce:	9f10      	ldr	r7, [sp, #64]	; 0x40
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8019dd0:	3601      	adds	r6, #1
 8019dd2:	e7e7      	b.n	8019da4 <lv_roller_event+0x1cc>
    else if(code == LV_EVENT_FOCUSED) {
 8019dd4:	2d0e      	cmp	r5, #14
 8019dd6:	d115      	bne.n	8019e04 <lv_roller_event+0x22c>
        lv_group_t * g             = lv_obj_get_group(obj);
 8019dd8:	f7ea f936 	bl	8004048 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8019ddc:	f7e9 fc25 	bl	800362a <lv_group_get_editing>
 8019de0:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8019de2:	f7e9 fc27 	bl	8003634 <lv_indev_get_act>
 8019de6:	f7e9 fc2b 	bl	8003640 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8019dea:	2804      	cmp	r0, #4
                if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8019dec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8019dee:	d107      	bne.n	8019e00 <lv_roller_event+0x228>
            if(!editing) {
 8019df0:	b935      	cbnz	r5, 8019e00 <lv_roller_event+0x228>
                if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8019df2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8019df4:	429a      	cmp	r2, r3
 8019df6:	f43f af0a 	beq.w	8019c0e <lv_roller_event+0x36>
                    roller->sel_opt_id = roller->sel_opt_id_ori;
 8019dfa:	84e2      	strh	r2, [r4, #38]	; 0x26
                    refr_position(obj, LV_ANIM_ON);
 8019dfc:	2101      	movs	r1, #1
 8019dfe:	e716      	b.n	8019c2e <lv_roller_event+0x56>
            roller->sel_opt_id_ori = roller->sel_opt_id; /*Save the current value. Used to revert this state if
 8019e00:	8523      	strh	r3, [r4, #40]	; 0x28
 8019e02:	e704      	b.n	8019c0e <lv_roller_event+0x36>
    else if(code == LV_EVENT_DEFOCUSED) {
 8019e04:	2d0f      	cmp	r5, #15
 8019e06:	d106      	bne.n	8019e16 <lv_roller_event+0x23e>
        if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8019e08:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8019e0a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8019e0c:	429a      	cmp	r2, r3
 8019e0e:	f43f aefe 	beq.w	8019c0e <lv_roller_event+0x36>
            roller->sel_opt_id = roller->sel_opt_id_ori;
 8019e12:	84c3      	strh	r3, [r0, #38]	; 0x26
            refr_position(obj, LV_ANIM_ON);
 8019e14:	e7f2      	b.n	8019dfc <lv_roller_event+0x224>
    else if(code == LV_EVENT_KEY) {
 8019e16:	2d0d      	cmp	r5, #13
 8019e18:	d121      	bne.n	8019e5e <lv_roller_event+0x286>
        char c = *((char *)lv_event_get_param(e));
 8019e1a:	4630      	mov	r0, r6
 8019e1c:	f7e9 fa1e 	bl	800325c <lv_event_get_param>
 8019e20:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8019e22:	f1a3 0212 	sub.w	r2, r3, #18
 8019e26:	2a01      	cmp	r2, #1
 8019e28:	d80d      	bhi.n	8019e46 <lv_roller_event+0x26e>
            if(roller->sel_opt_id + 1 < roller->option_cnt) {
 8019e2a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8019e2c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8019e2e:	3101      	adds	r1, #1
 8019e30:	4299      	cmp	r1, r3
 8019e32:	f6bf aeec 	bge.w	8019c0e <lv_roller_event+0x36>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 8019e36:	8d25      	ldrh	r5, [r4, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, LV_ANIM_ON);
 8019e38:	2201      	movs	r2, #1
 8019e3a:	b289      	uxth	r1, r1
 8019e3c:	4620      	mov	r0, r4
 8019e3e:	f7ff fe9d 	bl	8019b7c <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 8019e42:	8525      	strh	r5, [r4, #40]	; 0x28
 8019e44:	e6e3      	b.n	8019c0e <lv_roller_event+0x36>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8019e46:	2b14      	cmp	r3, #20
 8019e48:	d002      	beq.n	8019e50 <lv_roller_event+0x278>
 8019e4a:	2b11      	cmp	r3, #17
 8019e4c:	f47f aedf 	bne.w	8019c0e <lv_roller_event+0x36>
            if(roller->sel_opt_id > 0) {
 8019e50:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8019e52:	2900      	cmp	r1, #0
 8019e54:	f43f aedb 	beq.w	8019c0e <lv_roller_event+0x36>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 8019e58:	8d25      	ldrh	r5, [r4, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, LV_ANIM_ON);
 8019e5a:	3901      	subs	r1, #1
 8019e5c:	e7ec      	b.n	8019e38 <lv_roller_event+0x260>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8019e5e:	2d13      	cmp	r5, #19
 8019e60:	d106      	bne.n	8019e70 <lv_roller_event+0x298>
        lv_obj_t * label = get_label(obj);
 8019e62:	f7ff fc15 	bl	8019690 <get_label>
}
 8019e66:	b01c      	add	sp, #112	; 0x70
 8019e68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        lv_obj_refresh_ext_draw_size(label);
 8019e6c:	f7ea be85 	b.w	8004b7a <lv_obj_refresh_ext_draw_size>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 8019e70:	2d15      	cmp	r5, #21
 8019e72:	d002      	beq.n	8019e7a <lv_roller_event+0x2a2>
 8019e74:	2d18      	cmp	r5, #24
 8019e76:	f47f aeca 	bne.w	8019c0e <lv_roller_event+0x36>
    lv_event_code_t code = lv_event_get_code(e);
 8019e7a:	4630      	mov	r0, r6
 8019e7c:	f7e9 f9ea 	bl	8003254 <lv_event_get_code>
 8019e80:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8019e82:	4630      	mov	r0, r6
 8019e84:	f7e9 f9e2 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 8019e88:	2d15      	cmp	r5, #21
    lv_obj_t * obj = lv_event_get_target(e);
 8019e8a:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8019e8c:	d11c      	bne.n	8019ec8 <lv_roller_event+0x2f0>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8019e8e:	4630      	mov	r0, r6
 8019e90:	f7e9 fa2f 	bl	80032f2 <lv_event_get_draw_ctx>
        get_sel_area(obj, &sel_area);
 8019e94:	a90e      	add	r1, sp, #56	; 0x38
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8019e96:	4605      	mov	r5, r0
        get_sel_area(obj, &sel_area);
 8019e98:	4620      	mov	r0, r4
 8019e9a:	f7ff fc03 	bl	80196a4 <get_sel_area>
        lv_draw_rect_dsc_init(&sel_dsc);
 8019e9e:	a810      	add	r0, sp, #64	; 0x40
 8019ea0:	f7f1 f9ae 	bl	800b200 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_SELECTED, &sel_dsc);
 8019ea4:	aa10      	add	r2, sp, #64	; 0x40
 8019ea6:	4620      	mov	r0, r4
 8019ea8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8019eac:	f7ea fbbf 	bl	800462e <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(draw_ctx, &sel_dsc, &sel_area);
 8019eb0:	aa0e      	add	r2, sp, #56	; 0x38
 8019eb2:	a910      	add	r1, sp, #64	; 0x40
 8019eb4:	4628      	mov	r0, r5
 8019eb6:	f7f1 f9c7 	bl	800b248 <lv_draw_rect>
 8019eba:	e6a8      	b.n	8019c0e <lv_roller_event+0x36>
 8019ebc:	0802057c 	.word	0x0802057c
 8019ec0:	08019681 	.word	0x08019681
 8019ec4:	20000024 	.word	0x20000024
    else if(code == LV_EVENT_DRAW_POST) {
 8019ec8:	2d18      	cmp	r5, #24
 8019eca:	f47f aea0 	bne.w	8019c0e <lv_roller_event+0x36>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8019ece:	4630      	mov	r0, r6
 8019ed0:	f7e9 fa0f 	bl	80032f2 <lv_event_get_draw_ctx>
 8019ed4:	4605      	mov	r5, r0
        lv_draw_label_dsc_init(&label_dsc);
 8019ed6:	a810      	add	r0, sp, #64	; 0x40
 8019ed8:	f7ef fe5e 	bl	8009b98 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_SELECTED, &label_dsc);
 8019edc:	aa10      	add	r2, sp, #64	; 0x40
 8019ede:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8019ee2:	4620      	mov	r0, r4
 8019ee4:	f7ea fcec 	bl	80048c0 <lv_obj_init_draw_label_dsc>
        area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &sel_area);
 8019ee8:	af0c      	add	r7, sp, #48	; 0x30
        get_sel_area(obj, &sel_area);
 8019eea:	a90a      	add	r1, sp, #40	; 0x28
 8019eec:	4620      	mov	r0, r4
 8019eee:	f7ff fbd9 	bl	80196a4 <get_sel_area>
        area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &sel_area);
 8019ef2:	68a9      	ldr	r1, [r5, #8]
 8019ef4:	aa0a      	add	r2, sp, #40	; 0x28
 8019ef6:	4638      	mov	r0, r7
 8019ef8:	f7f8 fcbd 	bl	8012876 <_lv_area_intersect>
        if(area_ok) {
 8019efc:	2800      	cmp	r0, #0
 8019efe:	f43f ae86 	beq.w	8019c0e <lv_roller_event+0x36>
            lv_obj_t * label = get_label(obj);
 8019f02:	4620      	mov	r0, r4
 8019f04:	f7ff fbc4 	bl	8019690 <get_label>
 8019f08:	4606      	mov	r6, r0
            if(lv_label_get_recolor(label)) label_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 8019f0a:	f7ff f9ad 	bl	8019268 <lv_label_get_recolor>
 8019f0e:	b128      	cbz	r0, 8019f1c <lv_roller_event+0x344>
 8019f10:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8019f14:	f043 0301 	orr.w	r3, r3, #1
 8019f18:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 8019f1c:	4630      	mov	r0, r6
 8019f1e:	f7ff f9a1 	bl	8019264 <lv_label_get_text>
 8019f22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019f24:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 8019f28:	9007      	str	r0, [sp, #28]
 8019f2a:	4620      	mov	r0, r4
 8019f2c:	f9bd 8050 	ldrsh.w	r8, [sp, #80]	; 0x50
 8019f30:	9206      	str	r2, [sp, #24]
 8019f32:	9305      	str	r3, [sp, #20]
 8019f34:	f7eb f802 	bl	8004f3c <lv_obj_get_width>
 8019f38:	f04f 0c02 	mov.w	ip, #2
 8019f3c:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 8019f40:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8019f44:	9907      	ldr	r1, [sp, #28]
 8019f46:	f8cd 8000 	str.w	r8, [sp]
 8019f4a:	a809      	add	r0, sp, #36	; 0x24
 8019f4c:	f7fb f9b6 	bl	80152bc <lv_txt_get_size>
            lv_coord_t roller_h = lv_obj_get_height(obj);
 8019f50:	4620      	mov	r0, r4
 8019f52:	f7ea fff9 	bl	8004f48 <lv_obj_get_height>
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8019f56:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8019f5a:	f340 0a4f 	sbfx	sl, r0, #1, #16
                                                       obj->coords.y1); /*label offset from the middle line of the roller*/
 8019f5e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8019f62:	f9b6 9016 	ldrsh.w	r9, [r6, #22]
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8019f66:	4630      	mov	r0, r6
 8019f68:	f7ea ffee 	bl	8004f48 <lv_obj_get_height>
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8019f6c:	44d0      	add	r8, sl
 8019f6e:	eba9 0908 	sub.w	r9, r9, r8
            const lv_font_t * normal_label_font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8019f72:	2100      	movs	r1, #0
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8019f74:	ea4f 3989 	mov.w	r9, r9, lsl #14
 8019f78:	fb99 f9f0 	sdiv	r9, r9, r0
            const lv_font_t * normal_label_font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8019f7c:	4620      	mov	r0, r4
 8019f7e:	f7ff fb82 	bl	8019686 <lv_obj_get_style_text_font>
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8019f82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019f84:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8019f88:	f9b3 8008 	ldrsh.w	r8, [r3, #8]
            res_p.y -= corr;
 8019f8c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8019f90:	eba8 0802 	sub.w	r8, r8, r2
 8019f94:	eb08 72d8 	add.w	r2, r8, r8, lsr #31
            res_p.y -= corr;
 8019f98:	eba3 0362 	sub.w	r3, r3, r2, asr #1
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 8019f9c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
            res_p.y -= corr;
 8019fa0:	b21b      	sxth	r3, r3
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 8019fa2:	44d0      	add	r8, sl
            res_p.y -= corr;
 8019fa4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 8019fa8:	fb09 f303 	mul.w	r3, r9, r3
 8019fac:	eb08 33a3 	add.w	r3, r8, r3, asr #14
            label_sel_y -= corr;
 8019fb0:	eba3 0862 	sub.w	r8, r3, r2, asr #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8019fb4:	2100      	movs	r1, #0
 8019fb6:	2232      	movs	r2, #50	; 0x32
 8019fb8:	4620      	mov	r0, r4
 8019fba:	f7ed fa67 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019fbe:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8019fc0:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019fc2:	2100      	movs	r1, #0
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	f7ed fa61 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019fca:	2213      	movs	r2, #19
 8019fcc:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019fce:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019fd0:	4620      	mov	r0, r4
 8019fd2:	f7ed fa5b 	bl	800748c <lv_obj_get_style_prop>
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8019fd6:	8aa3      	ldrh	r3, [r4, #20]
            label_sel_area.y1 = label_sel_y;
 8019fd8:	f8ad 803a 	strh.w	r8, [sp, #58]	; 0x3a
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8019fdc:	fa19 f98a 	uxtah	r9, r9, sl
 8019fe0:	4499      	add	r9, r3
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 8019fe2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8019fe6:	f8ad 9038 	strh.w	r9, [sp, #56]	; 0x38
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 8019fea:	4498      	add	r8, r3
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 8019fec:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 8019ff0:	fa10 f08a 	uxtah	r0, r0, sl
 8019ff4:	f8b4 a018 	ldrh.w	sl, [r4, #24]
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 8019ff8:	f8ad 803e 	strh.w	r8, [sp, #62]	; 0x3e
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 8019ffc:	f043 0302 	orr.w	r3, r3, #2
 801a000:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 801a004:	ebaa 0000 	sub.w	r0, sl, r0
            const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801a008:	68ac      	ldr	r4, [r5, #8]
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 801a00a:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            draw_ctx->clip_area = &mask_sel;
 801a00e:	60af      	str	r7, [r5, #8]
            lv_draw_label(draw_ctx, &label_dsc, &label_sel_area, lv_label_get_text(label), NULL);
 801a010:	4630      	mov	r0, r6
 801a012:	f7ff f927 	bl	8019264 <lv_label_get_text>
 801a016:	2200      	movs	r2, #0
 801a018:	4603      	mov	r3, r0
 801a01a:	9200      	str	r2, [sp, #0]
 801a01c:	a910      	add	r1, sp, #64	; 0x40
 801a01e:	aa0e      	add	r2, sp, #56	; 0x38
 801a020:	4628      	mov	r0, r5
 801a022:	f7ef fdd7 	bl	8009bd4 <lv_draw_label>
            draw_ctx->clip_area = clip_area_ori;
 801a026:	60ac      	str	r4, [r5, #8]
 801a028:	e5f1      	b.n	8019c0e <lv_roller_event+0x36>
 801a02a:	bf00      	nop

0801a02c <lv_slider_get_mode>:
 * Get the mode of the slider.
 * @param obj       pointer to a bar object
 * @return          see ::lv_slider_mode_t
 */
static inline lv_slider_mode_t lv_slider_get_mode(lv_obj_t * slider)
{
 801a02c:	b508      	push	{r3, lr}
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 801a02e:	f7fc fbfc 	bl	801682a <lv_bar_get_mode>
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 801a032:	2801      	cmp	r0, #1
 801a034:	d002      	beq.n	801a03c <lv_slider_get_mode+0x10>
    else if(mode == LV_BAR_MODE_RANGE) return LV_SLIDER_MODE_RANGE;
    else return LV_SLIDER_MODE_NORMAL;
 801a036:	2802      	cmp	r0, #2
 801a038:	bf18      	it	ne
 801a03a:	2000      	movne	r0, #0
}
 801a03c:	bd08      	pop	{r3, pc}

0801a03e <lv_slider_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_slider_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801a03e:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    lv_slider_t * slider = (lv_slider_t *)obj;

    /*Initialize the allocated 'slider'*/
    slider->value_to_set = NULL;
    slider->dragging = 0U;
 801a040:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
{
 801a044:	460c      	mov	r4, r1
    slider->dragging = 0U;
 801a046:	f023 0303 	bic.w	r3, r3, #3
    slider->value_to_set = NULL;
 801a04a:	2500      	movs	r5, #0
    slider->dragging = 0U;
 801a04c:	f881 3074 	strb.w	r3, [r1, #116]	; 0x74
    slider->value_to_set = NULL;
 801a050:	670d      	str	r5, [r1, #112]	; 0x70
    slider->left_knob_focus = 0U;

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801a052:	4620      	mov	r0, r4
 801a054:	f44f 7140 	mov.w	r1, #768	; 0x300
 801a058:	f7e9 ff99 	bl	8003f8e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801a05c:	2110      	movs	r1, #16
 801a05e:	4620      	mov	r0, r4
 801a060:	f7e9 ff95 	bl	8003f8e <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 801a064:	4628      	mov	r0, r5
 801a066:	f7f8 f9a3 	bl	80123b0 <lv_disp_get_dpi>
 801a06a:	281d      	cmp	r0, #29
 801a06c:	dd0c      	ble.n	801a088 <lv_slider_constructor+0x4a>
 801a06e:	4628      	mov	r0, r5
 801a070:	f7f8 f99e 	bl	80123b0 <lv_disp_get_dpi>
 801a074:	2114      	movs	r1, #20
 801a076:	300a      	adds	r0, #10
 801a078:	fb90 f1f1 	sdiv	r1, r0, r1
 801a07c:	b209      	sxth	r1, r1
 801a07e:	4620      	mov	r0, r4
}
 801a080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 801a084:	f7eb bb7a 	b.w	800577c <lv_obj_set_ext_click_area>
 801a088:	2101      	movs	r1, #1
 801a08a:	e7f8      	b.n	801a07e <lv_slider_constructor+0x40>

0801a08c <position_knob>:
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
    }
}

static void position_knob(lv_obj_t * obj, lv_area_t * knob_area, const lv_coord_t knob_size, const bool hor)
{
 801a08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a090:	460c      	mov	r4, r1
    if(hor) {
        knob_area->x1 -= (knob_size >> 1);
 801a092:	f3c2 014f 	ubfx	r1, r2, #1, #16
 801a096:	3a01      	subs	r2, #1
{
 801a098:	4605      	mov	r5, r0
 801a09a:	b292      	uxth	r2, r2
    if(hor) {
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d04d      	beq.n	801a13c <position_knob+0xb0>
        knob_area->x1 -= (knob_size >> 1);
 801a0a0:	8823      	ldrh	r3, [r4, #0]
 801a0a2:	1a5b      	subs	r3, r3, r1
 801a0a4:	b29b      	uxth	r3, r3
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 801a0a6:	441a      	add	r2, r3
        knob_area->x1 -= (knob_size >> 1);
 801a0a8:	8023      	strh	r3, [r4, #0]
        knob_area->y1 = obj->coords.y1;
 801a0aa:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 801a0ae:	8063      	strh	r3, [r4, #2]
        knob_area->y2 = obj->coords.y2;
 801a0b0:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 801a0b4:	80a2      	strh	r2, [r4, #4]
        knob_area->y2 = obj->coords.y2;
 801a0b6:	80e3      	strh	r3, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a0b8:	2212      	movs	r2, #18
 801a0ba:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a0be:	4628      	mov	r0, r5
 801a0c0:	f7ed f9e4 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a0c4:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a0c6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a0c8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a0cc:	4628      	mov	r0, r5
 801a0ce:	f7ed f9dd 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a0d2:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a0d4:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a0d6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a0da:	4628      	mov	r0, r5
 801a0dc:	f7ed f9d6 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a0e0:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a0e2:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a0e4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a0e8:	4628      	mov	r0, r5
 801a0ea:	f7ed f9cf 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801a0ee:	2268      	movs	r2, #104	; 0x68
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a0f0:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801a0f2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a0f6:	4628      	mov	r0, r5
 801a0f8:	f7ed f9c8 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801a0fc:	2269      	movs	r2, #105	; 0x69
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801a0fe:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801a100:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a104:	4628      	mov	r0, r5
 801a106:	f7ed f9c1 	bl	800748c <lv_obj_get_style_prop>

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_KNOB);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_KNOB);

    /*Apply the paddings on the knob area*/
    knob_area->x1 -= knob_left + transf_w;
 801a10a:	8822      	ldrh	r2, [r4, #0]
 801a10c:	4603      	mov	r3, r0
    knob_area->x2 += knob_right + transf_w;
 801a10e:	88a0      	ldrh	r0, [r4, #4]
    knob_area->x1 -= knob_left + transf_w;
 801a110:	fa18 f886 	uxtah	r8, r8, r6
    knob_area->x2 += knob_right + transf_w;
 801a114:	fa1a f686 	uxtah	r6, sl, r6
    knob_area->x1 -= knob_left + transf_w;
 801a118:	eba2 0808 	sub.w	r8, r2, r8
    knob_area->x2 += knob_right + transf_w;
 801a11c:	4406      	add	r6, r0
    knob_area->y1 -= knob_top + transf_h;
 801a11e:	8862      	ldrh	r2, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 801a120:	88e0      	ldrh	r0, [r4, #6]
    knob_area->x1 -= knob_left + transf_w;
 801a122:	f8a4 8000 	strh.w	r8, [r4]
    knob_area->y1 -= knob_top + transf_h;
 801a126:	fa17 f783 	uxtah	r7, r7, r3
    knob_area->y2 += knob_bottom + transf_h;
 801a12a:	fa19 f383 	uxtah	r3, r9, r3
    knob_area->y1 -= knob_top + transf_h;
 801a12e:	1bd7      	subs	r7, r2, r7
    knob_area->y2 += knob_bottom + transf_h;
 801a130:	4403      	add	r3, r0
    knob_area->x2 += knob_right + transf_w;
 801a132:	80a6      	strh	r6, [r4, #4]
    knob_area->y1 -= knob_top + transf_h;
 801a134:	8067      	strh	r7, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 801a136:	80e3      	strh	r3, [r4, #6]
}
 801a138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        knob_area->y1 -= (knob_size >> 1);
 801a13c:	8863      	ldrh	r3, [r4, #2]
 801a13e:	1a5b      	subs	r3, r3, r1
 801a140:	b29b      	uxth	r3, r3
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 801a142:	441a      	add	r2, r3
        knob_area->y1 -= (knob_size >> 1);
 801a144:	8063      	strh	r3, [r4, #2]
        knob_area->x1 = obj->coords.x1;
 801a146:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 801a14a:	8023      	strh	r3, [r4, #0]
        knob_area->x2 = obj->coords.x2;
 801a14c:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 801a150:	80e2      	strh	r2, [r4, #6]
        knob_area->x2 = obj->coords.x2;
 801a152:	80a3      	strh	r3, [r4, #4]
 801a154:	e7b0      	b.n	801a0b8 <position_knob+0x2c>
	...

0801a158 <lv_slider_event>:
{
 801a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801a15c:	48c0      	ldr	r0, [pc, #768]	; (801a460 <lv_slider_event+0x308>)
{
 801a15e:	b0af      	sub	sp, #188	; 0xbc
 801a160:	460f      	mov	r7, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801a162:	f7e8 ff8b 	bl	800307c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801a166:	2801      	cmp	r0, #1
 801a168:	d14f      	bne.n	801a20a <lv_slider_event+0xb2>
    lv_event_code_t code = lv_event_get_code(e);
 801a16a:	4638      	mov	r0, r7
 801a16c:	f7e9 f872 	bl	8003254 <lv_event_get_code>
 801a170:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801a172:	4638      	mov	r0, r7
 801a174:	f7e9 f86a 	bl	800324c <lv_event_get_target>
 801a178:	4604      	mov	r4, r0
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 801a17a:	f7ff ff57 	bl	801a02c <lv_slider_get_mode>
    if(code == LV_EVENT_HIT_TEST) {
 801a17e:	2e11      	cmp	r6, #17
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 801a180:	4680      	mov	r8, r0
    if(code == LV_EVENT_HIT_TEST) {
 801a182:	d145      	bne.n	801a210 <lv_slider_event+0xb8>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 801a184:	4638      	mov	r0, r7
 801a186:	f7e9 f869 	bl	800325c <lv_event_get_param>
        lv_coord_t ext_click_area = obj->spec_attr ? obj->spec_attr->ext_click_pad : 0;
 801a18a:	68a5      	ldr	r5, [r4, #8]
        lv_hit_test_info_t * info = lv_event_get_param(e);
 801a18c:	4607      	mov	r7, r0
        lv_coord_t ext_click_area = obj->spec_attr ? obj->spec_attr->ext_click_pad : 0;
 801a18e:	b10d      	cbz	r5, 801a194 <lv_slider_event+0x3c>
 801a190:	f9b5 5014 	ldrsh.w	r5, [r5, #20]
    dest->x1 = src->x1;
 801a194:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 801a198:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    dest->y1 = src->y1;
 801a19c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 801a1a0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    dest->x2 = src->x2;
 801a1a4:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 801a1a8:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        lv_area_increase(&a, ext_click_area, ext_click_area);
 801a1ac:	462a      	mov	r2, r5
    dest->y2 = src->y2;
 801a1ae:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
 801a1b2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
 801a1b6:	4629      	mov	r1, r5
 801a1b8:	a81c      	add	r0, sp, #112	; 0x70
 801a1ba:	f7f8 fb3c 	bl	8012836 <lv_area_increase>
        info->res = _lv_area_is_point_on(&a, info->point, 0);
 801a1be:	6839      	ldr	r1, [r7, #0]
 801a1c0:	2200      	movs	r2, #0
 801a1c2:	a81c      	add	r0, sp, #112	; 0x70
 801a1c4:	f7f8 fba3 	bl	801290e <_lv_area_is_point_on>
 801a1c8:	4606      	mov	r6, r0
 801a1ca:	7138      	strb	r0, [r7, #4]
        if((info->res == false) && (type == LV_SLIDER_MODE_RANGE)) {
 801a1cc:	b9e8      	cbnz	r0, 801a20a <lv_slider_event+0xb2>
 801a1ce:	f1b8 0f02 	cmp.w	r8, #2
 801a1d2:	d11a      	bne.n	801a20a <lv_slider_event+0xb2>
    dest->x1 = src->x1;
 801a1d4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801a1d8:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    dest->y1 = src->y1;
 801a1dc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801a1e0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    dest->x2 = src->x2;
 801a1e4:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801a1e8:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            lv_area_increase(&a, ext_click_area, ext_click_area);
 801a1ec:	462a      	mov	r2, r5
    dest->y2 = src->y2;
 801a1ee:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801a1f2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
 801a1f6:	4629      	mov	r1, r5
 801a1f8:	a81c      	add	r0, sp, #112	; 0x70
 801a1fa:	f7f8 fb1c 	bl	8012836 <lv_area_increase>
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 801a1fe:	6839      	ldr	r1, [r7, #0]
 801a200:	4632      	mov	r2, r6
 801a202:	a81c      	add	r0, sp, #112	; 0x70
 801a204:	f7f8 fb83 	bl	801290e <_lv_area_is_point_on>
 801a208:	7138      	strb	r0, [r7, #4]
}
 801a20a:	b02f      	add	sp, #188	; 0xbc
 801a20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_PRESSED) {
 801a210:	2e01      	cmp	r6, #1
 801a212:	f040 808b 	bne.w	801a32c <lv_slider_event+0x1d4>
        lv_obj_invalidate(obj);
 801a216:	4620      	mov	r0, r4
 801a218:	f7eb f8a6 	bl	8005368 <lv_obj_invalidate>
        slider->dragging = true;
 801a21c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 801a220:	f1b8 0f01 	cmp.w	r8, #1
        slider->dragging = true;
 801a224:	f043 0301 	orr.w	r3, r3, #1
 801a228:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 801a22c:	d802      	bhi.n	801a234 <lv_slider_event+0xdc>
                    slider->value_to_set = &slider->bar.cur_value;
 801a22e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 801a232:	e053      	b.n	801a2dc <lv_slider_event+0x184>
        else if(type == LV_SLIDER_MODE_RANGE) {
 801a234:	f1b8 0f02 	cmp.w	r8, #2
 801a238:	d1e7      	bne.n	801a20a <lv_slider_event+0xb2>
            lv_indev_get_point(lv_indev_get_act(), &p);
 801a23a:	f7e9 f9fb 	bl	8003634 <lv_indev_get_act>
 801a23e:	a91c      	add	r1, sp, #112	; 0x70
 801a240:	f7e9 fa5f 	bl	8003702 <lv_indev_get_point>
            bool hor = lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 801a244:	4620      	mov	r0, r4
 801a246:	f7ea fe79 	bl	8004f3c <lv_obj_get_width>
 801a24a:	4606      	mov	r6, r0
 801a24c:	4620      	mov	r0, r4
 801a24e:	f7ea fe7b 	bl	8004f48 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801a252:	2216      	movs	r2, #22
 801a254:	4605      	mov	r5, r0
 801a256:	2100      	movs	r1, #0
 801a258:	4620      	mov	r0, r4
 801a25a:	f7ed f917 	bl	800748c <lv_obj_get_style_prop>
            if(hor) {
 801a25e:	42ae      	cmp	r6, r5
 801a260:	db46      	blt.n	801a2f0 <lv_slider_event+0x198>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 801a262:	b2c0      	uxtb	r0, r0
 801a264:	2801      	cmp	r0, #1
 801a266:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
 801a26a:	d02d      	beq.n	801a2c8 <lv_slider_event+0x170>
 801a26c:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 801a270:	428b      	cmp	r3, r1
 801a272:	dbdc      	blt.n	801a22e <lv_slider_event+0xd6>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 801a274:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801a278:	428b      	cmp	r3, r1
 801a27a:	dc2d      	bgt.n	801a2d8 <lv_slider_event+0x180>
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801a27c:	f9b4 2060 	ldrsh.w	r2, [r4, #96]	; 0x60
 801a280:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801a284:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801a288:	1a80      	subs	r0, r0, r2
 801a28a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801a28e:	eb02 0260 	add.w	r2, r2, r0, asr #1
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801a292:	f9b4 006c 	ldrsh.w	r0, [r4, #108]	; 0x6c
 801a296:	1ac0      	subs	r0, r0, r3
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801a298:	1a52      	subs	r2, r2, r1
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801a29a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801a29e:	2a00      	cmp	r2, #0
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801a2a0:	eb03 0360 	add.w	r3, r3, r0, asr #1
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801a2a4:	bfb8      	it	lt
 801a2a6:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801a2a8:	1a5b      	subs	r3, r3, r1
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	bfb8      	it	lt
 801a2ae:	425b      	neglt	r3, r3
                    if(dist_right < dist_left) {
 801a2b0:	b21b      	sxth	r3, r3
 801a2b2:	b212      	sxth	r2, r2
 801a2b4:	429a      	cmp	r2, r3
 801a2b6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801a2ba:	dd11      	ble.n	801a2e0 <lv_slider_event+0x188>
                        slider->value_to_set = &slider->bar.cur_value;
 801a2bc:	f104 0224 	add.w	r2, r4, #36	; 0x24
 801a2c0:	6722      	str	r2, [r4, #112]	; 0x70
            slider->left_knob_focus = 0;
 801a2c2:	f36f 0341 	bfc	r3, #1, #1
 801a2c6:	e010      	b.n	801a2ea <lv_slider_event+0x192>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 801a2c8:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 801a2cc:	428b      	cmp	r3, r1
 801a2ce:	dcae      	bgt.n	801a22e <lv_slider_event+0xd6>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 801a2d0:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	; 0x64
 801a2d4:	428b      	cmp	r3, r1
 801a2d6:	dad1      	bge.n	801a27c <lv_slider_event+0x124>
                    slider->value_to_set = &slider->bar.start_value;
 801a2d8:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a2dc:	6723      	str	r3, [r4, #112]	; 0x70
 801a2de:	e794      	b.n	801a20a <lv_slider_event+0xb2>
                        slider->value_to_set = &slider->bar.start_value;
 801a2e0:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801a2e4:	6722      	str	r2, [r4, #112]	; 0x70
                        slider->left_knob_focus = 1;
 801a2e6:	f043 0302 	orr.w	r3, r3, #2
 801a2ea:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 801a2ee:	e78c      	b.n	801a20a <lv_slider_event+0xb2>
                if(p.y < slider->right_knob_area.y1) {
 801a2f0:	f9bd 0072 	ldrsh.w	r0, [sp, #114]	; 0x72
 801a2f4:	f9b4 306a 	ldrsh.w	r3, [r4, #106]	; 0x6a
 801a2f8:	4298      	cmp	r0, r3
 801a2fa:	db98      	blt.n	801a22e <lv_slider_event+0xd6>
                else if(p.y > slider->left_knob_area.y2) {
 801a2fc:	f9b4 1066 	ldrsh.w	r1, [r4, #102]	; 0x66
 801a300:	4288      	cmp	r0, r1
 801a302:	dce9      	bgt.n	801a2d8 <lv_slider_event+0x180>
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801a304:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 801a308:	1a89      	subs	r1, r1, r2
 801a30a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801a30e:	eb02 0261 	add.w	r2, r2, r1, asr #1
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801a312:	f9b4 106e 	ldrsh.w	r1, [r4, #110]	; 0x6e
 801a316:	1ac9      	subs	r1, r1, r3
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801a318:	1a12      	subs	r2, r2, r0
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801a31a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801a31e:	2a00      	cmp	r2, #0
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801a320:	eb03 0361 	add.w	r3, r3, r1, asr #1
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801a324:	bfb8      	it	lt
 801a326:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801a328:	1a1b      	subs	r3, r3, r0
 801a32a:	e7be      	b.n	801a2aa <lv_slider_event+0x152>
    else if(code == LV_EVENT_PRESSING && slider->value_to_set != NULL) {
 801a32c:	2e02      	cmp	r6, #2
 801a32e:	f040 8099 	bne.w	801a464 <lv_slider_event+0x30c>
 801a332:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a334:	2b00      	cmp	r3, #0
 801a336:	f43f af68 	beq.w	801a20a <lv_slider_event+0xb2>
        lv_indev_t * indev = lv_indev_get_act();
 801a33a:	f7e9 f97b 	bl	8003634 <lv_indev_get_act>
 801a33e:	4605      	mov	r5, r0
        if(lv_indev_get_type(indev) != LV_INDEV_TYPE_POINTER) return;
 801a340:	f7e9 f97e 	bl	8003640 <lv_indev_get_type>
 801a344:	2801      	cmp	r0, #1
 801a346:	f47f af60 	bne.w	801a20a <lv_slider_event+0xb2>
        lv_indev_get_point(indev, &p);
 801a34a:	4628      	mov	r0, r5
 801a34c:	a91c      	add	r1, sp, #112	; 0x70
 801a34e:	f7e9 f9d8 	bl	8003702 <lv_indev_get_point>
        const int32_t range = slider->bar.max_value - slider->bar.min_value;
 801a352:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28

static bool is_slider_horizontal(lv_obj_t * obj)
{
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 801a356:	4620      	mov	r0, r4
        const int32_t range = slider->bar.max_value - slider->bar.min_value;
 801a358:	1acd      	subs	r5, r1, r3
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 801a35a:	f7ea fdef 	bl	8004f3c <lv_obj_get_width>
 801a35e:	4606      	mov	r6, r0
 801a360:	4620      	mov	r0, r4
 801a362:	f7ea fdf1 	bl	8004f48 <lv_obj_get_height>
        if(is_slider_horizontal(obj)) {
 801a366:	4286      	cmp	r6, r0
 801a368:	db53      	blt.n	801a412 <lv_slider_event+0x2ba>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a36a:	2212      	movs	r2, #18
 801a36c:	2100      	movs	r1, #0
 801a36e:	4620      	mov	r0, r4
 801a370:	f7ed f88c 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a374:	2213      	movs	r2, #19
 801a376:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a378:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a37a:	4620      	mov	r0, r4
 801a37c:	f7ed f886 	bl	800748c <lv_obj_get_style_prop>
 801a380:	4680      	mov	r8, r0
            const lv_coord_t w = lv_obj_get_width(obj);
 801a382:	4620      	mov	r0, r4
 801a384:	f7ea fdda 	bl	8004f3c <lv_obj_get_width>
            const lv_coord_t indic_w = w - bg_left - bg_right;
 801a388:	eb07 0608 	add.w	r6, r7, r8
 801a38c:	1b80      	subs	r0, r0, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801a38e:	2100      	movs	r1, #0
 801a390:	b206      	sxth	r6, r0
 801a392:	2216      	movs	r2, #22
 801a394:	4620      	mov	r0, r4
 801a396:	f7ed f879 	bl	800748c <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801a39a:	b2c0      	uxtb	r0, r0
            if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 801a39c:	2801      	cmp	r0, #1
 801a39e:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
 801a3a2:	d130      	bne.n	801a406 <lv_slider_event+0x2ae>
                new_value = (obj->coords.x2 - bg_right) - p.x;
 801a3a4:	f9b4 7018 	ldrsh.w	r7, [r4, #24]
 801a3a8:	fa0f f888 	sxth.w	r8, r8
 801a3ac:	eba7 0808 	sub.w	r8, r7, r8
 801a3b0:	eba8 0701 	sub.w	r7, r8, r1
            new_value = (new_value * range + indic_w / 2) / indic_w;
 801a3b4:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
 801a3b8:	1049      	asrs	r1, r1, #1
 801a3ba:	fb07 1105 	mla	r1, r7, r5, r1
 801a3be:	fb91 f1f6 	sdiv	r1, r1, r6
            new_value += slider->bar.min_value;
 801a3c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a3c4:	4419      	add	r1, r3
        if(slider->value_to_set == &slider->bar.start_value) {
 801a3c6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a3c8:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801a3cc:	4293      	cmp	r3, r2
            real_max_value = slider->bar.cur_value;
 801a3ce:	bf0c      	ite	eq
 801a3d0:	e9d4 5009 	ldrdeq	r5, r0, [r4, #36]	; 0x24
            real_min_value = slider->bar.start_value;
 801a3d4:	e9d4 500b 	ldrdne	r5, r0, [r4, #44]	; 0x2c
        new_value = LV_CLAMP(real_min_value, new_value, real_max_value);
 801a3d8:	42a9      	cmp	r1, r5
 801a3da:	bfa8      	it	ge
 801a3dc:	4629      	movge	r1, r5
 801a3de:	4281      	cmp	r1, r0
 801a3e0:	bfb8      	it	lt
 801a3e2:	4601      	movlt	r1, r0
        if(*slider->value_to_set != new_value) {
 801a3e4:	6818      	ldr	r0, [r3, #0]
 801a3e6:	4281      	cmp	r1, r0
 801a3e8:	f43f af0f 	beq.w	801a20a <lv_slider_event+0xb2>
            if(slider->value_to_set == &slider->bar.start_value) {
 801a3ec:	4293      	cmp	r3, r2
                lv_bar_set_start_value(obj, new_value, LV_ANIM_ON);
 801a3ee:	4620      	mov	r0, r4
 801a3f0:	f04f 0201 	mov.w	r2, #1
            if(slider->value_to_set == &slider->bar.start_value) {
 801a3f4:	d130      	bne.n	801a458 <lv_slider_event+0x300>
                lv_bar_set_start_value(obj, new_value, LV_ANIM_ON);
 801a3f6:	f7fc f9e5 	bl	80167c4 <lv_bar_set_start_value>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801a3fa:	2200      	movs	r2, #0
 801a3fc:	211c      	movs	r1, #28
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801a3fe:	4620      	mov	r0, r4
 801a400:	f7e8 ff04 	bl	800320c <lv_event_send>
}
 801a404:	e701      	b.n	801a20a <lv_slider_event+0xb2>
                new_value = p.x - (obj->coords.x1 + bg_left);
 801a406:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801a40a:	fa00 f787 	sxtah	r7, r0, r7
 801a40e:	1bcf      	subs	r7, r1, r7
 801a410:	e7d0      	b.n	801a3b4 <lv_slider_event+0x25c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a412:	2210      	movs	r2, #16
 801a414:	2100      	movs	r1, #0
 801a416:	4620      	mov	r0, r4
 801a418:	f7ed f838 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a41c:	2211      	movs	r2, #17
 801a41e:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a420:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a422:	4620      	mov	r0, r4
 801a424:	f7ed f832 	bl	800748c <lv_obj_get_style_prop>
 801a428:	4606      	mov	r6, r0
            const lv_coord_t h = lv_obj_get_height(obj);
 801a42a:	4620      	mov	r0, r4
 801a42c:	f7ea fd8c 	bl	8004f48 <lv_obj_get_height>
            new_value = p.y - (obj->coords.y2 + bg_bottom);
 801a430:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
            const lv_coord_t indic_h = h - bg_bottom - bg_top;
 801a434:	19f3      	adds	r3, r6, r7
            new_value = p.y - (obj->coords.y2 + bg_bottom);
 801a436:	fa01 f686 	sxtah	r6, r1, r6
 801a43a:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
            const lv_coord_t indic_h = h - bg_bottom - bg_top;
 801a43e:	1ac3      	subs	r3, r0, r3
            new_value = (-new_value * range + indic_h / 2) / indic_h;
 801a440:	1a76      	subs	r6, r6, r1
 801a442:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 801a446:	fa01 f183 	sxtah	r1, r1, r3
 801a44a:	1049      	asrs	r1, r1, #1
            const lv_coord_t indic_h = h - bg_bottom - bg_top;
 801a44c:	b21a      	sxth	r2, r3
            new_value = (-new_value * range + indic_h / 2) / indic_h;
 801a44e:	fb05 1106 	mla	r1, r5, r6, r1
 801a452:	fb91 f1f2 	sdiv	r1, r1, r2
 801a456:	e7b4      	b.n	801a3c2 <lv_slider_event+0x26a>
                lv_bar_set_value(obj, new_value, LV_ANIM_ON);
 801a458:	f7fc f970 	bl	801673c <lv_bar_set_value>
 801a45c:	e7cd      	b.n	801a3fa <lv_slider_event+0x2a2>
 801a45e:	bf00      	nop
 801a460:	080205b4 	.word	0x080205b4
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 801a464:	2e08      	cmp	r6, #8
 801a466:	d001      	beq.n	801a46c <lv_slider_event+0x314>
 801a468:	2e03      	cmp	r6, #3
 801a46a:	d130      	bne.n	801a4ce <lv_slider_event+0x376>
        slider->dragging = false;
 801a46c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
        slider->value_to_set = NULL;
 801a470:	2600      	movs	r6, #0
        slider->dragging = false;
 801a472:	f36f 0300 	bfc	r3, #0, #1
 801a476:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        lv_obj_invalidate(obj);
 801a47a:	4620      	mov	r0, r4
        slider->value_to_set = NULL;
 801a47c:	6726      	str	r6, [r4, #112]	; 0x70
        lv_obj_invalidate(obj);
 801a47e:	f7ea ff73 	bl	8005368 <lv_obj_invalidate>
        lv_group_t * g   = lv_obj_get_group(obj);
 801a482:	4620      	mov	r0, r4
 801a484:	f7e9 fde0 	bl	8004048 <lv_obj_get_group>
 801a488:	4605      	mov	r5, r0
        bool editing     = lv_group_get_editing(g);
 801a48a:	f7e9 f8ce 	bl	800362a <lv_group_get_editing>
 801a48e:	4607      	mov	r7, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801a490:	f7e9 f8d0 	bl	8003634 <lv_indev_get_act>
 801a494:	f7e9 f8d4 	bl	8003640 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801a498:	2804      	cmp	r0, #4
 801a49a:	f47f aeb6 	bne.w	801a20a <lv_slider_event+0xb2>
            if(editing) {
 801a49e:	2f00      	cmp	r7, #0
 801a4a0:	f43f aeb3 	beq.w	801a20a <lv_slider_event+0xb2>
                if(lv_slider_get_mode(obj) == LV_SLIDER_MODE_RANGE) {
 801a4a4:	4620      	mov	r0, r4
 801a4a6:	f7ff fdc1 	bl	801a02c <lv_slider_get_mode>
 801a4aa:	2802      	cmp	r0, #2
 801a4ac:	d108      	bne.n	801a4c0 <lv_slider_event+0x368>
                    if(slider->left_knob_focus == 0) slider->left_knob_focus = 1;
 801a4ae:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801a4b2:	0799      	lsls	r1, r3, #30
 801a4b4:	f57f af17 	bpl.w	801a2e6 <lv_slider_event+0x18e>
                        slider->left_knob_focus = 0;
 801a4b8:	f366 0341 	bfi	r3, r6, #1, #1
 801a4bc:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
                    lv_group_set_editing(g, false);
 801a4c0:	4631      	mov	r1, r6
 801a4c2:	4628      	mov	r0, r5
}
 801a4c4:	b02f      	add	sp, #188	; 0xbc
 801a4c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    lv_group_set_editing(g, false);
 801a4ca:	f7e9 b88d 	b.w	80035e8 <lv_group_set_editing>
    else if(code == LV_EVENT_FOCUSED) {
 801a4ce:	2e0e      	cmp	r6, #14
 801a4d0:	d10b      	bne.n	801a4ea <lv_slider_event+0x392>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801a4d2:	f7e9 f8af 	bl	8003634 <lv_indev_get_act>
 801a4d6:	f7e9 f8b3 	bl	8003640 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 801a4da:	2804      	cmp	r0, #4
 801a4dc:	d002      	beq.n	801a4e4 <lv_slider_event+0x38c>
 801a4de:	2802      	cmp	r0, #2
 801a4e0:	f47f ae93 	bne.w	801a20a <lv_slider_event+0xb2>
            slider->left_knob_focus = 0;
 801a4e4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801a4e8:	e6eb      	b.n	801a2c2 <lv_slider_event+0x16a>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801a4ea:	2e29      	cmp	r6, #41	; 0x29
 801a4ec:	d105      	bne.n	801a4fa <lv_slider_event+0x3a2>
        lv_obj_refresh_ext_draw_size(obj);
 801a4ee:	4620      	mov	r0, r4
}
 801a4f0:	b02f      	add	sp, #188	; 0xbc
 801a4f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_ext_draw_size(obj);
 801a4f6:	f7ea bb40 	b.w	8004b7a <lv_obj_refresh_ext_draw_size>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801a4fa:	2e13      	cmp	r6, #19
 801a4fc:	d178      	bne.n	801a5f0 <lv_slider_event+0x498>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a4fe:	2212      	movs	r2, #18
 801a500:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a504:	4620      	mov	r0, r4
 801a506:	f7ec ffc1 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a50a:	4632      	mov	r2, r6
 801a50c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801a510:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a514:	4620      	mov	r0, r4
 801a516:	f7ec ffb9 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a51a:	2210      	movs	r2, #16
 801a51c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801a520:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a522:	4620      	mov	r0, r4
 801a524:	f7ec ffb2 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a528:	2211      	movs	r2, #17
 801a52a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801a52e:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a532:	4620      	mov	r0, r4
 801a534:	f7ec ffaa 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801a538:	226c      	movs	r2, #108	; 0x6c
 801a53a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801a53e:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801a542:	4620      	mov	r0, r4
 801a544:	f7ec ffa2 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801a548:	2268      	movs	r2, #104	; 0x68
 801a54a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801a54e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801a552:	4620      	mov	r0, r4
 801a554:	f7ec ff9a 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801a558:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801a55c:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801a55e:	2269      	movs	r2, #105	; 0x69
 801a560:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801a562:	9300      	str	r3, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801a564:	f7ec ff92 	bl	800748c <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801a568:	b202      	sxth	r2, r0
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801a56a:	4620      	mov	r0, r4
 801a56c:	9201      	str	r2, [sp, #4]
 801a56e:	f7ea fce5 	bl	8004f3c <lv_obj_get_width>
 801a572:	9b00      	ldr	r3, [sp, #0]
 801a574:	005e      	lsls	r6, r3, #1
 801a576:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a57a:	4620      	mov	r0, r4
 801a57c:	9300      	str	r3, [sp, #0]
 801a57e:	f7ea fce3 	bl	8004f48 <lv_obj_get_height>
 801a582:	9a01      	ldr	r2, [sp, #4]
 801a584:	9b00      	ldr	r3, [sp, #0]
 801a586:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a58a:	4283      	cmp	r3, r0
 801a58c:	ea4f 0142 	mov.w	r1, r2, lsl #1
 801a590:	da25      	bge.n	801a5de <lv_slider_event+0x486>
 801a592:	4620      	mov	r0, r4
 801a594:	f7ea fcd2 	bl	8004f3c <lv_obj_get_width>
 801a598:	4406      	add	r6, r0
 801a59a:	f346 064f 	sbfx	r6, r6, #1, #16
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801a59e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a5a2:	4620      	mov	r0, r4
 801a5a4:	f7ea fa75 	bl	8004a92 <lv_obj_calculate_ext_draw_size>
 801a5a8:	4604      	mov	r4, r0
        lv_coord_t * s = lv_event_get_param(e);
 801a5aa:	4638      	mov	r0, r7
 801a5ac:	f7e8 fe56 	bl	800325c <lv_event_get_param>
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 801a5b0:	455d      	cmp	r5, fp
 801a5b2:	bfb8      	it	lt
 801a5b4:	465d      	movlt	r5, fp
 801a5b6:	4555      	cmp	r5, sl
 801a5b8:	bfb8      	it	lt
 801a5ba:	4655      	movlt	r5, sl
 801a5bc:	454d      	cmp	r5, r9
 801a5be:	bfb8      	it	lt
 801a5c0:	464d      	movlt	r5, r9
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801a5c2:	3502      	adds	r5, #2
 801a5c4:	192b      	adds	r3, r5, r4
        knob_size = (knob_size * zoom) >> 8;
 801a5c6:	fb06 f608 	mul.w	r6, r6, r8
        *s  = LV_MAX(*s, knob_size);
 801a5ca:	f9b0 1000 	ldrsh.w	r1, [r0]
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801a5ce:	eb03 2326 	add.w	r3, r3, r6, asr #8
        *s  = LV_MAX(*s, knob_size);
 801a5d2:	b21b      	sxth	r3, r3
 801a5d4:	428b      	cmp	r3, r1
 801a5d6:	bfb8      	it	lt
 801a5d8:	460b      	movlt	r3, r1
 801a5da:	8003      	strh	r3, [r0, #0]
 801a5dc:	e615      	b.n	801a20a <lv_slider_event+0xb2>
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801a5de:	4620      	mov	r0, r4
 801a5e0:	9100      	str	r1, [sp, #0]
 801a5e2:	f7ea fcb1 	bl	8004f48 <lv_obj_get_height>
 801a5e6:	9900      	ldr	r1, [sp, #0]
 801a5e8:	4408      	add	r0, r1
 801a5ea:	f340 064f 	sbfx	r6, r0, #1, #16
 801a5ee:	e7d6      	b.n	801a59e <lv_slider_event+0x446>
    else if(code == LV_EVENT_KEY) {
 801a5f0:	2e0d      	cmp	r6, #13
 801a5f2:	d137      	bne.n	801a664 <lv_slider_event+0x50c>
        char c = *((char *)lv_event_get_param(e));
 801a5f4:	4638      	mov	r0, r7
 801a5f6:	f7e8 fe31 	bl	800325c <lv_event_get_param>
 801a5fa:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801a5fc:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801a600:	2a11      	cmp	r2, #17
 801a602:	d11b      	bne.n	801a63c <lv_slider_event+0x4e4>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) + 1, LV_ANIM_ON);
 801a604:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801a608:	079a      	lsls	r2, r3, #30
    return lv_bar_get_value(obj);
 801a60a:	4620      	mov	r0, r4
 801a60c:	d40e      	bmi.n	801a62c <lv_slider_event+0x4d4>
 801a60e:	f7fc f8f8 	bl	8016802 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 801a612:	2201      	movs	r2, #1
 801a614:	1881      	adds	r1, r0, r2
 801a616:	4620      	mov	r0, r4
 801a618:	f7fc f890 	bl	801673c <lv_bar_set_value>
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801a61c:	2200      	movs	r2, #0
 801a61e:	211c      	movs	r1, #28
 801a620:	4620      	mov	r0, r4
}
 801a622:	b02f      	add	sp, #188	; 0xbc
 801a624:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801a628:	f7e8 bdf0 	b.w	800320c <lv_event_send>
    return lv_bar_get_start_value(obj);
 801a62c:	f7fc f8ef 	bl	801680e <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 801a630:	2201      	movs	r2, #1
 801a632:	1881      	adds	r1, r0, r2
 801a634:	4620      	mov	r0, r4
 801a636:	f7fc f8c5 	bl	80167c4 <lv_bar_set_start_value>
}
 801a63a:	e7ef      	b.n	801a61c <lv_slider_event+0x4c4>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801a63c:	2b14      	cmp	r3, #20
 801a63e:	d002      	beq.n	801a646 <lv_slider_event+0x4ee>
 801a640:	2b12      	cmp	r3, #18
 801a642:	f47f ade2 	bne.w	801a20a <lv_slider_event+0xb2>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) - 1, LV_ANIM_ON);
 801a646:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801a64a:	079b      	lsls	r3, r3, #30
    return lv_bar_get_value(obj);
 801a64c:	4620      	mov	r0, r4
 801a64e:	d404      	bmi.n	801a65a <lv_slider_event+0x502>
 801a650:	f7fc f8d7 	bl	8016802 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 801a654:	2201      	movs	r2, #1
 801a656:	1e41      	subs	r1, r0, #1
 801a658:	e7dd      	b.n	801a616 <lv_slider_event+0x4be>
    return lv_bar_get_start_value(obj);
 801a65a:	f7fc f8d8 	bl	801680e <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 801a65e:	2201      	movs	r2, #1
 801a660:	1e41      	subs	r1, r0, #1
 801a662:	e7e7      	b.n	801a634 <lv_slider_event+0x4dc>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801a664:	2e15      	cmp	r6, #21
 801a666:	f47f add0 	bne.w	801a20a <lv_slider_event+0xb2>
    lv_obj_t * obj = lv_event_get_target(e);
 801a66a:	4638      	mov	r0, r7
 801a66c:	f7e8 fdee 	bl	800324c <lv_event_get_target>
 801a670:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801a672:	4638      	mov	r0, r7
 801a674:	f7e8 fe3d 	bl	80032f2 <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801a678:	2216      	movs	r2, #22
 801a67a:	2100      	movs	r1, #0
 801a67c:	4605      	mov	r5, r0
 801a67e:	4620      	mov	r0, r4
 801a680:	f7ec ff04 	bl	800748c <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801a684:	fa5f f980 	uxtb.w	r9, r0
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 801a688:	4620      	mov	r0, r4
 801a68a:	f7ea fc57 	bl	8004f3c <lv_obj_get_width>
 801a68e:	4680      	mov	r8, r0
 801a690:	4620      	mov	r0, r4
 801a692:	f7ea fc59 	bl	8004f48 <lv_obj_get_height>
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 801a696:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 801a69a:	4580      	cmp	r8, r0
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 801a69c:	f003 0303 	and.w	r3, r3, #3
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 801a6a0:	bfb4      	ite	lt
 801a6a2:	f04f 0a00 	movlt.w	sl, #0
 801a6a6:	f04f 0a01 	movge.w	sl, #1
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 801a6aa:	2b01      	cmp	r3, #1
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 801a6ac:	4607      	mov	r7, r0
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 801a6ae:	d157      	bne.n	801a760 <lv_slider_event+0x608>
 801a6b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	da54      	bge.n	801a760 <lv_slider_event+0x608>
 801a6b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a6b8:	2e00      	cmp	r6, #0
 801a6ba:	bfd4      	ite	le
 801a6bc:	2600      	movle	r6, #0
 801a6be:	2601      	movgt	r6, #1
    if(is_horizontal) {
 801a6c0:	45b8      	cmp	r8, r7
        knob_size = lv_obj_get_height(obj);
 801a6c2:	4620      	mov	r0, r4
    if(is_horizontal) {
 801a6c4:	db56      	blt.n	801a774 <lv_slider_event+0x61c>
        knob_size = lv_obj_get_height(obj);
 801a6c6:	f7ea fc3f 	bl	8004f48 <lv_obj_get_height>
 801a6ca:	4683      	mov	fp, r0
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.x1 = slider->bar.indic_area.x1;
 801a6cc:	2e00      	cmp	r6, #0
 801a6ce:	d049      	beq.n	801a764 <lv_slider_event+0x60c>
 801a6d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	da46      	bge.n	801a764 <lv_slider_event+0x60c>
 801a6d6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
        else knob_area.x1 = LV_SLIDER_KNOB_COORD(is_rtl, slider->bar.indic_area);
 801a6d8:	f8ad 3008 	strh.w	r3, [sp, #8]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801a6dc:	a804      	add	r0, sp, #16
 801a6de:	f7f0 fd8f 	bl	800b200 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801a6e2:	aa04      	add	r2, sp, #16
 801a6e4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a6e8:	4620      	mov	r0, r4
 801a6ea:	f7e9 ffa0 	bl	800462e <lv_obj_init_draw_rect_dsc>
    position_knob(obj, &knob_area, knob_size, is_horizontal);
 801a6ee:	465a      	mov	r2, fp
 801a6f0:	4653      	mov	r3, sl
 801a6f2:	a902      	add	r1, sp, #8
 801a6f4:	4620      	mov	r0, r4
 801a6f6:	f7ff fcc9 	bl	801a08c <position_knob>
    dest->x1 = src->x1;
 801a6fa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a6fe:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    dest->y1 = src->y1;
 801a702:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a706:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    dest->x2 = src->x2;
 801a70a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a70e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
    dest->y2 = src->y2;
 801a712:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801a716:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801a71a:	4629      	mov	r1, r5
 801a71c:	a81c      	add	r0, sp, #112	; 0x70
 801a71e:	f7ea fa1f 	bl	8004b60 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_KNOB;
 801a722:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801a726:	9329      	str	r3, [sp, #164]	; 0xa4
    part_draw_dsc.class_p = MY_CLASS;
 801a728:	4b3c      	ldr	r3, [pc, #240]	; (801a81c <lv_slider_event+0x6c4>)
 801a72a:	931d      	str	r3, [sp, #116]	; 0x74
    part_draw_dsc.type = LV_SLIDER_DRAW_PART_KNOB;
 801a72c:	2300      	movs	r3, #0
 801a72e:	931e      	str	r3, [sp, #120]	; 0x78
    part_draw_dsc.id = 0;
 801a730:	932a      	str	r3, [sp, #168]	; 0xa8
    lv_area_copy(&slider->right_knob_area, &knob_area);
 801a732:	f104 0668 	add.w	r6, r4, #104	; 0x68
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 801a736:	ab04      	add	r3, sp, #16
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 801a738:	4620      	mov	r0, r4
    part_draw_dsc.draw_area = &slider->right_knob_area;
 801a73a:	961f      	str	r6, [sp, #124]	; 0x7c
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 801a73c:	9320      	str	r3, [sp, #128]	; 0x80
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 801a73e:	f7ff fc75 	bl	801a02c <lv_slider_get_mode>
 801a742:	2802      	cmp	r0, #2
 801a744:	d023      	beq.n	801a78e <lv_slider_event+0x636>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801a746:	aa1c      	add	r2, sp, #112	; 0x70
 801a748:	211a      	movs	r1, #26
 801a74a:	4620      	mov	r0, r4
 801a74c:	f7e8 fd5e 	bl	800320c <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->left_knob_area);
 801a750:	4632      	mov	r2, r6
 801a752:	a904      	add	r1, sp, #16
 801a754:	4628      	mov	r0, r5
 801a756:	f7f0 fd77 	bl	800b248 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801a75a:	aa1c      	add	r2, sp, #112	; 0x70
 801a75c:	211b      	movs	r1, #27
 801a75e:	e64e      	b.n	801a3fe <lv_slider_event+0x2a6>
    bool is_symmetrical = false;
 801a760:	2600      	movs	r6, #0
 801a762:	e7ad      	b.n	801a6c0 <lv_slider_event+0x568>
        else knob_area.x1 = LV_SLIDER_KNOB_COORD(is_rtl, slider->bar.indic_area);
 801a764:	f1b9 0f01 	cmp.w	r9, #1
 801a768:	bf0c      	ite	eq
 801a76a:	f9b4 3034 	ldrsheq.w	r3, [r4, #52]	; 0x34
 801a76e:	f9b4 3038 	ldrshne.w	r3, [r4, #56]	; 0x38
 801a772:	e7b1      	b.n	801a6d8 <lv_slider_event+0x580>
        knob_size = lv_obj_get_width(obj);
 801a774:	f7ea fbe2 	bl	8004f3c <lv_obj_get_width>
 801a778:	4683      	mov	fp, r0
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.y1 = slider->bar.indic_area.y2;
 801a77a:	b136      	cbz	r6, 801a78a <lv_slider_event+0x632>
 801a77c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a77e:	2b00      	cmp	r3, #0
 801a780:	da03      	bge.n	801a78a <lv_slider_event+0x632>
 801a782:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
        else knob_area.y1 = slider->bar.indic_area.y1;
 801a784:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a788:	e7a8      	b.n	801a6dc <lv_slider_event+0x584>
 801a78a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a78c:	e7fa      	b.n	801a784 <lv_slider_event+0x62c>
        lv_memcpy(&knob_rect_dsc_tmp, &knob_rect_dsc, sizeof(lv_draw_rect_dsc_t));
 801a78e:	2230      	movs	r2, #48	; 0x30
 801a790:	a904      	add	r1, sp, #16
 801a792:	a810      	add	r0, sp, #64	; 0x40
 801a794:	f7f8 fe92 	bl	80134bc <lv_memcpy>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801a798:	aa1c      	add	r2, sp, #112	; 0x70
 801a79a:	211a      	movs	r1, #26
 801a79c:	4620      	mov	r0, r4
 801a79e:	f7e8 fd35 	bl	800320c <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->right_knob_area);
 801a7a2:	4632      	mov	r2, r6
 801a7a4:	a904      	add	r1, sp, #16
 801a7a6:	4628      	mov	r0, r5
 801a7a8:	f7f0 fd4e 	bl	800b248 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801a7ac:	aa1c      	add	r2, sp, #112	; 0x70
 801a7ae:	211b      	movs	r1, #27
 801a7b0:	4620      	mov	r0, r4
 801a7b2:	f7e8 fd2b 	bl	800320c <lv_event_send>
        if(is_horizontal) {
 801a7b6:	45b8      	cmp	r8, r7
 801a7b8:	db2c      	blt.n	801a814 <lv_slider_event+0x6bc>
            knob_area.x1 = LV_SLIDER_KNOB_COORD(!is_rtl, slider->bar.indic_area);
 801a7ba:	f1b9 0f01 	cmp.w	r9, #1
 801a7be:	bf14      	ite	ne
 801a7c0:	f9b4 3034 	ldrshne.w	r3, [r4, #52]	; 0x34
 801a7c4:	f9b4 3038 	ldrsheq.w	r3, [r4, #56]	; 0x38
 801a7c8:	f8ad 3008 	strh.w	r3, [sp, #8]
        position_knob(obj, &knob_area, knob_size, is_horizontal);
 801a7cc:	4653      	mov	r3, sl
 801a7ce:	465a      	mov	r2, fp
 801a7d0:	a902      	add	r1, sp, #8
 801a7d2:	4620      	mov	r0, r4
 801a7d4:	f7ff fc5a 	bl	801a08c <position_knob>
    dest->x1 = src->x1;
 801a7d8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a7dc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    dest->y1 = src->y1;
 801a7e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a7e4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    dest->x2 = src->x2;
 801a7e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a7ec:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    dest->y2 = src->y2;
 801a7f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801a7f4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        lv_memcpy(&knob_rect_dsc, &knob_rect_dsc_tmp, sizeof(lv_draw_rect_dsc_t));
 801a7f8:	2230      	movs	r2, #48	; 0x30
 801a7fa:	a910      	add	r1, sp, #64	; 0x40
 801a7fc:	a804      	add	r0, sp, #16
 801a7fe:	f7f8 fe5d 	bl	80134bc <lv_memcpy>
        lv_area_copy(&slider->left_knob_area, &knob_area);
 801a802:	f104 0660 	add.w	r6, r4, #96	; 0x60
        part_draw_dsc.type = LV_SLIDER_DRAW_PART_KNOB_LEFT;
 801a806:	2301      	movs	r3, #1
        part_draw_dsc.rect_dsc = &knob_rect_dsc;
 801a808:	aa04      	add	r2, sp, #16
        part_draw_dsc.draw_area = &slider->left_knob_area;
 801a80a:	e9cd 361e 	strd	r3, r6, [sp, #120]	; 0x78
        part_draw_dsc.rect_dsc = &knob_rect_dsc;
 801a80e:	9220      	str	r2, [sp, #128]	; 0x80
        part_draw_dsc.id = 1;
 801a810:	932a      	str	r3, [sp, #168]	; 0xa8
 801a812:	e798      	b.n	801a746 <lv_slider_event+0x5ee>
            knob_area.y1 = slider->bar.indic_area.y2;
 801a814:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801a816:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a81a:	e7d7      	b.n	801a7cc <lv_slider_event+0x674>
 801a81c:	080205b4 	.word	0x080205b4

0801a820 <lv_switch_anim_ready>:
/**
 * Resets the switch's animation state to "no animation in progress".
 */
static void lv_switch_anim_ready(lv_anim_t * a)
{
    lv_switch_t * sw = a->var;
 801a820:	6800      	ldr	r0, [r0, #0]
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 801a822:	f04f 33ff 	mov.w	r3, #4294967295
 801a826:	6243      	str	r3, [r0, #36]	; 0x24
    lv_obj_invalidate((lv_obj_t *)sw);
 801a828:	f7ea bd9e 	b.w	8005368 <lv_obj_invalidate>

0801a82c <lv_switch_anim_exec_cb>:
    sw->anim_state = value;
 801a82c:	6241      	str	r1, [r0, #36]	; 0x24
    lv_obj_invalidate((lv_obj_t *)sw);
 801a82e:	f7ea bd9b 	b.w	8005368 <lv_obj_invalidate>

0801a832 <lv_switch_destructor>:
{
 801a832:	4608      	mov	r0, r1
    lv_anim_del(sw, NULL);
 801a834:	2100      	movs	r1, #0
 801a836:	f7f7 bf0b 	b.w	8012650 <lv_anim_del>

0801a83a <lv_switch_constructor>:
{
 801a83a:	b507      	push	{r0, r1, r2, lr}
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 801a83c:	f04f 33ff 	mov.w	r3, #4294967295
{
 801a840:	4608      	mov	r0, r1
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 801a842:	624b      	str	r3, [r1, #36]	; 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801a844:	2110      	movs	r1, #16
 801a846:	9001      	str	r0, [sp, #4]
 801a848:	f7e9 fba1 	bl	8003f8e <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801a84c:	9801      	ldr	r0, [sp, #4]
 801a84e:	2108      	movs	r1, #8
 801a850:	f7e9 fb68 	bl	8003f24 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801a854:	9801      	ldr	r0, [sp, #4]
 801a856:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 801a85a:	b003      	add	sp, #12
 801a85c:	f85d eb04 	ldr.w	lr, [sp], #4
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801a860:	f7e9 bb60 	b.w	8003f24 <lv_obj_add_flag>

0801a864 <lv_switch_event>:
{
 801a864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801a868:	48a8      	ldr	r0, [pc, #672]	; (801ab0c <lv_switch_event+0x2a8>)
{
 801a86a:	b0a3      	sub	sp, #140	; 0x8c
 801a86c:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801a86e:	f7e8 fc05 	bl	800307c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801a872:	2801      	cmp	r0, #1
 801a874:	d14d      	bne.n	801a912 <lv_switch_event+0xae>
    lv_event_code_t code = lv_event_get_code(e);
 801a876:	4630      	mov	r0, r6
 801a878:	f7e8 fcec 	bl	8003254 <lv_event_get_code>
 801a87c:	4607      	mov	r7, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801a87e:	4630      	mov	r0, r6
 801a880:	f7e8 fce4 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801a884:	2f13      	cmp	r7, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801a886:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801a888:	d14c      	bne.n	801a924 <lv_switch_event+0xc0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a88a:	2212      	movs	r2, #18
 801a88c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a890:	f7ec fdfc 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a894:	463a      	mov	r2, r7
    return (lv_coord_t)v.num;
 801a896:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a89a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a89e:	4628      	mov	r0, r5
 801a8a0:	f7ec fdf4 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a8a4:	2210      	movs	r2, #16
    return (lv_coord_t)v.num;
 801a8a6:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a8a8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a8ac:	4628      	mov	r0, r5
 801a8ae:	f7ec fded 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a8b2:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 801a8b4:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a8b8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a8bc:	4628      	mov	r0, r5
 801a8be:	f7ec fde5 	bl	800748c <lv_obj_get_style_prop>
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801a8c2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801a8c6:	b207      	sxth	r7, r0
 801a8c8:	4628      	mov	r0, r5
 801a8ca:	f7ea f8e2 	bl	8004a92 <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 801a8ce:	454c      	cmp	r4, r9
 801a8d0:	4623      	mov	r3, r4
 801a8d2:	bfb8      	it	lt
 801a8d4:	464b      	movlt	r3, r9
 801a8d6:	4543      	cmp	r3, r8
 801a8d8:	bfb8      	it	lt
 801a8da:	4643      	movlt	r3, r8
 801a8dc:	42bb      	cmp	r3, r7
 801a8de:	bfb8      	it	lt
 801a8e0:	463b      	movlt	r3, r7
        knob_size += _LV_SWITCH_KNOB_EXT_AREA_CORRECTION;
 801a8e2:	3302      	adds	r3, #2
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801a8e4:	4418      	add	r0, r3
 801a8e6:	b284      	uxth	r4, r0
        lv_coord_t * s = lv_event_get_param(e);
 801a8e8:	4630      	mov	r0, r6
 801a8ea:	f7e8 fcb7 	bl	800325c <lv_event_get_param>
 801a8ee:	4606      	mov	r6, r0
        *s = LV_MAX(*s, knob_size);
 801a8f0:	f9b0 0000 	ldrsh.w	r0, [r0]
 801a8f4:	b224      	sxth	r4, r4
 801a8f6:	4284      	cmp	r4, r0
 801a8f8:	bfb8      	it	lt
 801a8fa:	4604      	movlt	r4, r0
 801a8fc:	8034      	strh	r4, [r6, #0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801a8fe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a902:	4628      	mov	r0, r5
 801a904:	f7ea f8c5 	bl	8004a92 <lv_obj_calculate_ext_draw_size>
 801a908:	4284      	cmp	r4, r0
 801a90a:	dd05      	ble.n	801a918 <lv_switch_event+0xb4>
 801a90c:	f9b6 0000 	ldrsh.w	r0, [r6]
 801a910:	8030      	strh	r0, [r6, #0]
}
 801a912:	b023      	add	sp, #140	; 0x8c
 801a914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801a918:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a91c:	4628      	mov	r0, r5
 801a91e:	f7ea f8b8 	bl	8004a92 <lv_obj_calculate_ext_draw_size>
 801a922:	e7f5      	b.n	801a910 <lv_switch_event+0xac>
    else if(code == LV_EVENT_VALUE_CHANGED) {
 801a924:	2f1c      	cmp	r7, #28
 801a926:	d137      	bne.n	801a998 <lv_switch_event+0x134>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801a928:	2264      	movs	r2, #100	; 0x64
 801a92a:	2100      	movs	r1, #0
 801a92c:	f7ec fdae 	bl	800748c <lv_obj_get_style_prop>
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_switch_t * sw = (lv_switch_t *)obj;

    uint32_t anim_dur_full = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);

    if(anim_dur_full > 0) {
 801a930:	4607      	mov	r7, r0
 801a932:	b348      	cbz	r0, 801a988 <lv_switch_event+0x124>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 801a934:	4628      	mov	r0, r5
 801a936:	f7e9 fb85 	bl	8004044 <lv_obj_get_state>
        int32_t anim_start;
        int32_t anim_end;
        /*No animation in progress -> simply set the values*/
        if(sw->anim_state == LV_SWITCH_ANIM_STATE_INV) {
 801a93a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 801a93c:	1c61      	adds	r1, r4, #1
 801a93e:	f000 0601 	and.w	r6, r0, #1
 801a942:	d127      	bne.n	801a994 <lv_switch_event+0x130>
            anim_start = chk ? LV_SWITCH_ANIM_STATE_START : LV_SWITCH_ANIM_STATE_END;
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 801a944:	2e00      	cmp	r6, #0
 801a946:	bf08      	it	eq
 801a948:	f44f 7480 	moveq.w	r4, #256	; 0x100
 801a94c:	ea4f 2606 	mov.w	r6, r6, lsl #8
 801a950:	bf18      	it	ne
 801a952:	2400      	movne	r4, #0
        }
        /*Calculate actual animation duration*/
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;

        /*Stop the previous animation if it exists*/
        lv_anim_del(sw, NULL);
 801a954:	2100      	movs	r1, #0
 801a956:	4628      	mov	r0, r5
 801a958:	f7f7 fe7a 	bl	8012650 <lv_anim_del>

        lv_anim_t a;
        lv_anim_init(&a);
 801a95c:	a811      	add	r0, sp, #68	; 0x44
 801a95e:	f7f7 fe5d 	bl	801261c <lv_anim_init>
    a->current_value = start;
 801a962:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;
 801a966:	1ba4      	subs	r4, r4, r6
 801a968:	2c00      	cmp	r4, #0
 801a96a:	bfb8      	it	lt
 801a96c:	4264      	neglt	r4, r4
 801a96e:	fb07 f004 	mul.w	r0, r7, r4
    a->exec_cb = exec_cb;
 801a972:	4b67      	ldr	r3, [pc, #412]	; (801ab10 <lv_switch_event+0x2ac>)
 801a974:	9312      	str	r3, [sp, #72]	; 0x48
 801a976:	0a00      	lsrs	r0, r0, #8
    a->ready_cb = ready_cb;
 801a978:	4b66      	ldr	r3, [pc, #408]	; (801ab14 <lv_switch_event+0x2b0>)
    a->time = duration;
 801a97a:	901c      	str	r0, [sp, #112]	; 0x70
        lv_anim_set_var(&a, sw);
        lv_anim_set_exec_cb(&a, lv_switch_anim_exec_cb);
        lv_anim_set_values(&a, anim_start, anim_end);
        lv_anim_set_ready_cb(&a, lv_switch_anim_ready);
        lv_anim_set_time(&a, anim_dur);
        lv_anim_start(&a);
 801a97c:	a811      	add	r0, sp, #68	; 0x44
    a->var = var;
 801a97e:	9511      	str	r5, [sp, #68]	; 0x44
    a->end_value = end;
 801a980:	961b      	str	r6, [sp, #108]	; 0x6c
    a->ready_cb = ready_cb;
 801a982:	9314      	str	r3, [sp, #80]	; 0x50
 801a984:	f7f7 fe94 	bl	80126b0 <lv_anim_start>
        lv_obj_invalidate(obj);
 801a988:	4628      	mov	r0, r5
}
 801a98a:	b023      	add	sp, #140	; 0x8c
 801a98c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        lv_obj_invalidate(obj);
 801a990:	f7ea bcea 	b.w	8005368 <lv_obj_invalidate>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 801a994:	0236      	lsls	r6, r6, #8
 801a996:	e7dd      	b.n	801a954 <lv_switch_event+0xf0>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801a998:	2f15      	cmp	r7, #21
 801a99a:	d1ba      	bne.n	801a912 <lv_switch_event+0xae>
    lv_obj_t * obj = lv_event_get_target(e);
 801a99c:	4630      	mov	r0, r6
 801a99e:	f7e8 fc55 	bl	800324c <lv_event_get_target>
 801a9a2:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801a9a4:	4630      	mov	r0, r6
 801a9a6:	f7e8 fca4 	bl	80032f2 <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a9aa:	2212      	movs	r2, #18
 801a9ac:	4607      	mov	r7, r0
 801a9ae:	2100      	movs	r1, #0
 801a9b0:	4620      	mov	r0, r4
 801a9b2:	f7ec fd6b 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a9b6:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a9b8:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a9ba:	2100      	movs	r1, #0
 801a9bc:	4620      	mov	r0, r4
 801a9be:	f7ec fd65 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a9c2:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a9c4:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a9c6:	2100      	movs	r1, #0
 801a9c8:	4620      	mov	r0, r4
 801a9ca:	f7ec fd5f 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a9ce:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a9d0:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a9d2:	2100      	movs	r1, #0
 801a9d4:	4620      	mov	r0, r4
 801a9d6:	f7ec fd59 	bl	800748c <lv_obj_get_style_prop>
 801a9da:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
    dest->y1 = src->y1;
 801a9de:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    dest->x2 = src->x2;
 801a9e2:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
    indic_area.x1 += bg_left;
 801a9e6:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    indic_area.y2 -= bg_bottom;
 801a9ea:	1a18      	subs	r0, r3, r0
    indic_area.x1 += bg_left;
 801a9ec:	44ac      	add	ip, r5
    indic_area.y1 += bg_top;
 801a9ee:	eb01 0208 	add.w	r2, r1, r8
    indic_area.x2 -= bg_right;
 801a9f2:	eba6 0509 	sub.w	r5, r6, r9
    indic_area.y2 -= bg_bottom;
 801a9f6:	f8ad 000a 	strh.w	r0, [sp, #10]
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 801a9fa:	a805      	add	r0, sp, #20
    indic_area.x1 += bg_left;
 801a9fc:	f8ad c004 	strh.w	ip, [sp, #4]
    indic_area.x2 -= bg_right;
 801aa00:	f8ad 5008 	strh.w	r5, [sp, #8]
    indic_area.y1 += bg_top;
 801aa04:	f8ad 2006 	strh.w	r2, [sp, #6]
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 801aa08:	f7f0 fbfa 	bl	800b200 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_indic_dsc);
 801aa0c:	aa05      	add	r2, sp, #20
 801aa0e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801aa12:	4620      	mov	r0, r4
 801aa14:	f7e9 fe0b 	bl	800462e <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &draw_indic_dsc, &indic_area);
 801aa18:	aa01      	add	r2, sp, #4
 801aa1a:	a905      	add	r1, sp, #20
 801aa1c:	4638      	mov	r0, r7
 801aa1e:	f7f0 fc13 	bl	800b248 <lv_draw_rect>
    lv_coord_t knob_size = lv_obj_get_height(obj);
 801aa22:	4620      	mov	r0, r4
 801aa24:	f7ea fa90 	bl	8004f48 <lv_obj_get_height>
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 801aa28:	8b25      	ldrh	r5, [r4, #24]
 801aa2a:	8aa3      	ldrh	r3, [r4, #20]
 801aa2c:	b286      	uxth	r6, r0
 801aa2e:	1bad      	subs	r5, r5, r6
 801aa30:	3501      	adds	r5, #1
 801aa32:	1aed      	subs	r5, r5, r3
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 801aa34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aa36:	1c5a      	adds	r2, r3, #1
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 801aa38:	fa1f f885 	uxth.w	r8, r5
 801aa3c:	b22d      	sxth	r5, r5
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 801aa3e:	d05d      	beq.n	801aafc <lv_switch_event+0x298>
        anim_value_x = (anim_length * sw->anim_state) / LV_SWITCH_ANIM_STATE_END;
 801aa40:	435d      	muls	r5, r3
 801aa42:	bf48      	it	mi
 801aa44:	35ff      	addmi	r5, #255	; 0xff
 801aa46:	f345 250f 	sbfx	r5, r5, #8, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801aa4a:	2216      	movs	r2, #22
 801aa4c:	2100      	movs	r1, #0
 801aa4e:	4620      	mov	r0, r4
 801aa50:	f7ec fd1c 	bl	800748c <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801aa54:	b2c0      	uxtb	r0, r0
    if(LV_BASE_DIR_RTL == lv_obj_get_style_base_dir(obj, LV_PART_MAIN)) {
 801aa56:	2801      	cmp	r0, #1
        anim_value_x = anim_length - anim_value_x;
 801aa58:	bf08      	it	eq
 801aa5a:	eba8 0505 	subeq.w	r5, r8, r5
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 801aa5e:	8aa3      	ldrh	r3, [r4, #20]
        anim_value_x = anim_length - anim_value_x;
 801aa60:	bf08      	it	eq
 801aa62:	b22d      	sxtheq	r5, r5
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 801aa64:	441d      	add	r5, r3
 801aa66:	b2ad      	uxth	r5, r5
    knob_area.y1 = obj->coords.y1;
 801aa68:	8ae3      	ldrh	r3, [r4, #22]
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 801aa6a:	f8ad 500c 	strh.w	r5, [sp, #12]
    knob_area.y1 = obj->coords.y1;
 801aa6e:	f8ad 300e 	strh.w	r3, [sp, #14]
    knob_area.x2 = knob_area.x1 + knob_size;
 801aa72:	4435      	add	r5, r6
    knob_area.y2 = obj->coords.y2;
 801aa74:	8b63      	ldrh	r3, [r4, #26]
 801aa76:	f8ad 3012 	strh.w	r3, [sp, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801aa7a:	2212      	movs	r2, #18
 801aa7c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801aa80:	4620      	mov	r0, r4
    knob_area.x2 = knob_area.x1 + knob_size;
 801aa82:	f8ad 5010 	strh.w	r5, [sp, #16]
 801aa86:	f7ec fd01 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801aa8a:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801aa8c:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801aa8e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801aa92:	4620      	mov	r0, r4
 801aa94:	f7ec fcfa 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801aa98:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801aa9a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801aa9c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801aaa0:	4620      	mov	r0, r4
 801aaa2:	f7ec fcf3 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801aaa6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801aaaa:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801aaac:	2211      	movs	r2, #17
 801aaae:	4620      	mov	r0, r4
 801aab0:	f7ec fcec 	bl	800748c <lv_obj_get_style_prop>
    knob_area.x1 -= knob_left;
 801aab4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801aab8:	eba2 0308 	sub.w	r3, r2, r8
 801aabc:	f8ad 300c 	strh.w	r3, [sp, #12]
    knob_area.y1 -= knob_top;
 801aac0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    knob_area.x2 += knob_right;
 801aac4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801aac8:	441d      	add	r5, r3
    knob_area.y1 -= knob_top;
 801aaca:	1b93      	subs	r3, r2, r6
 801aacc:	f8ad 300e 	strh.w	r3, [sp, #14]
    knob_area.y2 += knob_bottom;
 801aad0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    knob_area.x2 += knob_right;
 801aad4:	f8ad 5010 	strh.w	r5, [sp, #16]
    knob_area.y2 += knob_bottom;
 801aad8:	4418      	add	r0, r3
 801aada:	f8ad 0012 	strh.w	r0, [sp, #18]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801aade:	a811      	add	r0, sp, #68	; 0x44
 801aae0:	f7f0 fb8e 	bl	800b200 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801aae4:	aa11      	add	r2, sp, #68	; 0x44
 801aae6:	4620      	mov	r0, r4
 801aae8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801aaec:	f7e9 fd9f 	bl	800462e <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 801aaf0:	aa03      	add	r2, sp, #12
 801aaf2:	a911      	add	r1, sp, #68	; 0x44
 801aaf4:	4638      	mov	r0, r7
 801aaf6:	f7f0 fba7 	bl	800b248 <lv_draw_rect>
}
 801aafa:	e70a      	b.n	801a912 <lv_switch_event+0xae>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 801aafc:	4620      	mov	r0, r4
 801aafe:	f7e9 faa1 	bl	8004044 <lv_obj_get_state>
        anim_value_x = chk ? anim_length : 0;
 801ab02:	f010 0f01 	tst.w	r0, #1
 801ab06:	bf08      	it	eq
 801ab08:	2500      	moveq	r5, #0
 801ab0a:	e79e      	b.n	801aa4a <lv_switch_event+0x1e6>
 801ab0c:	080205d0 	.word	0x080205d0
 801ab10:	0801a82d 	.word	0x0801a82d
 801ab14:	0801a821 	.word	0x0801a821

0801ab18 <lv_obj_get_style_pad_left>:
{
 801ab18:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ab1a:	2212      	movs	r2, #18
 801ab1c:	f7ec fcb6 	bl	800748c <lv_obj_get_style_prop>
}
 801ab20:	b200      	sxth	r0, r0
 801ab22:	bd08      	pop	{r3, pc}

0801ab24 <lv_obj_get_style_pad_right>:
{
 801ab24:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ab26:	2213      	movs	r2, #19
 801ab28:	f7ec fcb0 	bl	800748c <lv_obj_get_style_prop>
}
 801ab2c:	b200      	sxth	r0, r0
 801ab2e:	bd08      	pop	{r3, pc}

0801ab30 <lv_obj_get_style_pad_top>:
{
 801ab30:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ab32:	2210      	movs	r2, #16
 801ab34:	f7ec fcaa 	bl	800748c <lv_obj_get_style_prop>
}
 801ab38:	b200      	sxth	r0, r0
 801ab3a:	bd08      	pop	{r3, pc}

0801ab3c <get_row_height>:
}

static lv_coord_t get_row_height(lv_obj_t * obj, uint16_t row_id, const lv_font_t * font,
                                 lv_coord_t letter_space, lv_coord_t line_space,
                                 lv_coord_t cell_left, lv_coord_t cell_right, lv_coord_t cell_top, lv_coord_t cell_bottom)
{
 801ab3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab40:	ed2d 8b02 	vpush	{d8}
 801ab44:	b08f      	sub	sp, #60	; 0x3c
 801ab46:	ee08 3a10 	vmov	s16, r3
 801ab4a:	f9bd 9074 	ldrsh.w	r9, [sp, #116]	; 0x74
 801ab4e:	f9bd a078 	ldrsh.w	sl, [sp, #120]	; 0x78
 801ab52:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 801ab56:	9309      	str	r3, [sp, #36]	; 0x24
 801ab58:	eb09 050a 	add.w	r5, r9, sl
 801ab5c:	b2ab      	uxth	r3, r5
 801ab5e:	9308      	str	r3, [sp, #32]
    lv_table_t * table = (lv_table_t *)obj;

    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 801ab60:	8913      	ldrh	r3, [r2, #8]
 801ab62:	fa13 f585 	uxtah	r5, r3, r5
    /* Calculate the cell_data index where to start */
    uint16_t row_start = row_id * table->col_cnt;
 801ab66:	8c83      	ldrh	r3, [r0, #36]	; 0x24
{
 801ab68:	4690      	mov	r8, r2
    uint16_t row_start = row_id * table->col_cnt;
 801ab6a:	fb13 f101 	smulbb	r1, r3, r1
                           h_max);
        }
        /*Else we have to calculate the height of the cell text*/
        else {
            lv_point_t txt_size;
            txt_w -= cell_left + cell_right;
 801ab6e:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 801ab72:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    uint16_t row_start = row_id * table->col_cnt;
 801ab76:	fa1f fb81 	uxth.w	fp, r1
            txt_w -= cell_left + cell_right;
 801ab7a:	18d3      	adds	r3, r2, r3
{
 801ab7c:	4607      	mov	r7, r0
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 801ab7e:	b22d      	sxth	r5, r5
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801ab80:	465c      	mov	r4, fp
 801ab82:	2600      	movs	r6, #0
            txt_w -= cell_left + cell_right;
 801ab84:	930b      	str	r3, [sp, #44]	; 0x2c
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801ab86:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 801ab88:	eb0b 0300 	add.w	r3, fp, r0
 801ab8c:	429c      	cmp	r4, r3
 801ab8e:	db05      	blt.n	801ab9c <get_row_height+0x60>
            col += col_merge;
        }
    }

    return h_max;
}
 801ab90:	4628      	mov	r0, r5
 801ab92:	b00f      	add	sp, #60	; 0x3c
 801ab94:	ecbd 8b02 	vpop	{d8}
 801ab98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        char * cell_data = table->cell_data[cell];
 801ab9c:	f8d7 e028 	ldr.w	lr, [r7, #40]	; 0x28
 801aba0:	f85e 1024 	ldr.w	r1, [lr, r4, lsl #2]
        if(is_cell_empty(cell_data)) {
 801aba4:	b1e9      	cbz	r1, 801abe2 <get_row_height+0xa6>
        lv_coord_t txt_w = table->col_w[col];
 801aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aba8:	9306      	str	r3, [sp, #24]
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801abaa:	3801      	subs	r0, #1
        lv_coord_t txt_w = table->col_w[col];
 801abac:	f933 3016 	ldrsh.w	r3, [r3, r6, lsl #1]
 801abb0:	9305      	str	r3, [sp, #20]
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801abb2:	2200      	movs	r2, #0
 801abb4:	900a      	str	r0, [sp, #40]	; 0x28
 801abb6:	b293      	uxth	r3, r2
 801abb8:	9307      	str	r3, [sp, #28]
 801abba:	469c      	mov	ip, r3
 801abbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abbe:	fa16 f082 	uxtah	r0, r6, r2
 801abc2:	4298      	cmp	r0, r3
 801abc4:	db12      	blt.n	801abec <get_row_height+0xb0>
        if(ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP) {
 801abc6:	780a      	ldrb	r2, [r1, #0]
 801abc8:	f012 0202 	ands.w	r2, r2, #2
 801abcc:	d024      	beq.n	801ac18 <get_row_height+0xdc>
 801abce:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
            h_max = LV_MAX(lv_font_get_line_height(font) + cell_top + cell_bottom,
 801abd2:	eb03 0209 	add.w	r2, r3, r9
 801abd6:	4452      	add	r2, sl
 801abd8:	42aa      	cmp	r2, r5
 801abda:	dd02      	ble.n	801abe2 <get_row_height+0xa6>
 801abdc:	9a08      	ldr	r2, [sp, #32]
 801abde:	4413      	add	r3, r2
 801abe0:	b21d      	sxth	r5, r3
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801abe2:	3401      	adds	r4, #1
 801abe4:	3601      	adds	r6, #1
 801abe6:	b2a4      	uxth	r4, r4
 801abe8:	b2b6      	uxth	r6, r6
 801abea:	e7cc      	b.n	801ab86 <get_row_height+0x4a>
            char * next_cell_data = table->cell_data[cell + col_merge];
 801abec:	44a4      	add	ip, r4
 801abee:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
            if(is_cell_empty(next_cell_data)) break;
 801abf2:	f1bc 0f00 	cmp.w	ip, #0
 801abf6:	d0e6      	beq.n	801abc6 <get_row_height+0x8a>
            if(ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT) {
 801abf8:	f89c c000 	ldrb.w	ip, [ip]
 801abfc:	f01c 0f01 	tst.w	ip, #1
 801ac00:	f102 0201 	add.w	r2, r2, #1
 801ac04:	d0df      	beq.n	801abc6 <get_row_height+0x8a>
                txt_w += table->col_w[col + col_merge + 1];
 801ac06:	9b06      	ldr	r3, [sp, #24]
 801ac08:	3001      	adds	r0, #1
 801ac0a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ac0e:	9b05      	ldr	r3, [sp, #20]
 801ac10:	4403      	add	r3, r0
 801ac12:	b21b      	sxth	r3, r3
 801ac14:	9305      	str	r3, [sp, #20]
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801ac16:	e7ce      	b.n	801abb6 <get_row_height+0x7a>
            txt_w -= cell_left + cell_right;
 801ac18:	9805      	ldr	r0, [sp, #20]
 801ac1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 801ac1c:	9202      	str	r2, [sp, #8]
            txt_w -= cell_left + cell_right;
 801ac1e:	1ac3      	subs	r3, r0, r3
            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 801ac20:	b21b      	sxth	r3, r3
 801ac22:	9301      	str	r3, [sp, #4]
 801ac24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac26:	9300      	str	r3, [sp, #0]
 801ac28:	4642      	mov	r2, r8
 801ac2a:	ee18 3a10 	vmov	r3, s16
 801ac2e:	3101      	adds	r1, #1
 801ac30:	a80d      	add	r0, sp, #52	; 0x34
 801ac32:	f7fa fb43 	bl	80152bc <lv_txt_get_size>
            h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 801ac36:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801ac3a:	444b      	add	r3, r9
 801ac3c:	4453      	add	r3, sl
 801ac3e:	429d      	cmp	r5, r3
 801ac40:	bfb8      	it	lt
 801ac42:	461d      	movlt	r5, r3
            cell += col_merge;
 801ac44:	9b07      	ldr	r3, [sp, #28]
 801ac46:	441c      	add	r4, r3
            col += col_merge;
 801ac48:	441e      	add	r6, r3
            h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 801ac4a:	b22d      	sxth	r5, r5
            cell += col_merge;
 801ac4c:	b2a4      	uxth	r4, r4
            col += col_merge;
 801ac4e:	b2b6      	uxth	r6, r6
 801ac50:	e7c7      	b.n	801abe2 <get_row_height+0xa6>

0801ac52 <lv_table_destructor>:
{
 801ac52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801ac54:	2500      	movs	r5, #0
{
 801ac56:	460c      	mov	r4, r1
            table->cell_data[i] = NULL;
 801ac58:	462f      	mov	r7, r5
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801ac5a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801ac5c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
        if(table->cell_data[i]) {
 801ac5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801ac60:	b2ae      	uxth	r6, r5
 801ac62:	4353      	muls	r3, r2
 801ac64:	429e      	cmp	r6, r3
 801ac66:	db0c      	blt.n	801ac82 <lv_table_destructor+0x30>
    if(table->cell_data) lv_mem_free(table->cell_data);
 801ac68:	b108      	cbz	r0, 801ac6e <lv_table_destructor+0x1c>
 801ac6a:	f7f8 fb7b 	bl	8013364 <lv_mem_free>
    if(table->row_h) lv_mem_free(table->row_h);
 801ac6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801ac70:	b108      	cbz	r0, 801ac76 <lv_table_destructor+0x24>
 801ac72:	f7f8 fb77 	bl	8013364 <lv_mem_free>
    if(table->col_w) lv_mem_free(table->col_w);
 801ac76:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ac78:	b168      	cbz	r0, 801ac96 <lv_table_destructor+0x44>
}
 801ac7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if(table->col_w) lv_mem_free(table->col_w);
 801ac7e:	f7f8 bb71 	b.w	8013364 <lv_mem_free>
        if(table->cell_data[i]) {
 801ac82:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 801ac86:	b120      	cbz	r0, 801ac92 <lv_table_destructor+0x40>
            lv_mem_free(table->cell_data[i]);
 801ac88:	f7f8 fb6c 	bl	8013364 <lv_mem_free>
            table->cell_data[i] = NULL;
 801ac8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ac8e:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801ac92:	3501      	adds	r5, #1
 801ac94:	e7e1      	b.n	801ac5a <lv_table_destructor+0x8>
}
 801ac96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ac98 <lv_table_constructor>:
    table->col_cnt = 1;
 801ac98:	f04f 1301 	mov.w	r3, #65537	; 0x10001
{
 801ac9c:	b510      	push	{r4, lr}
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 801ac9e:	2002      	movs	r0, #2
    table->col_cnt = 1;
 801aca0:	624b      	str	r3, [r1, #36]	; 0x24
{
 801aca2:	460c      	mov	r4, r1
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 801aca4:	f7f8 fb40 	bl	8013328 <lv_mem_alloc>
 801aca8:	6320      	str	r0, [r4, #48]	; 0x30
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 801acaa:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 801acac:	0040      	lsls	r0, r0, #1
 801acae:	f7f8 fb3b 	bl	8013328 <lv_mem_alloc>
    table->col_w[0] = LV_DPI_DEF;
 801acb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 801acb4:	62e0      	str	r0, [r4, #44]	; 0x2c
    table->col_w[0] = LV_DPI_DEF;
 801acb6:	2374      	movs	r3, #116	; 0x74
 801acb8:	8013      	strh	r3, [r2, #0]
    table->row_h[0] = LV_DPI_DEF;
 801acba:	8003      	strh	r3, [r0, #0]
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 801acbc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801acbe:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 801acc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801acc2:	4359      	muls	r1, r3
 801acc4:	0089      	lsls	r1, r1, #2
 801acc6:	f7f8 fb65 	bl	8013394 <lv_mem_realloc>
    table->cell_data[0] = NULL;
 801acca:	2300      	movs	r3, #0
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 801accc:	62a0      	str	r0, [r4, #40]	; 0x28
    table->cell_data[0] = NULL;
 801acce:	6003      	str	r3, [r0, #0]
}
 801acd0:	bd10      	pop	{r4, pc}

0801acd2 <get_cell_area>:
    strcpy(&dst[1], txt);
#endif
}

static void get_cell_area(lv_obj_t * obj, uint16_t row, uint16_t col, lv_area_t * area)
{
 801acd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acd6:	461c      	mov	r4, r3
    lv_table_t * table = (lv_table_t *)obj;

    uint32_t c;
    area->x1 = 0;
 801acd8:	2300      	movs	r3, #0
{
 801acda:	4605      	mov	r5, r0
 801acdc:	460f      	mov	r7, r1
 801acde:	4690      	mov	r8, r2
    area->x1 = 0;
 801ace0:	8023      	strh	r3, [r4, #0]
    for(c = 0; c < col; c++) {
 801ace2:	4598      	cmp	r8, r3
 801ace4:	d839      	bhi.n	801ad5a <get_cell_area+0x88>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801ace6:	2216      	movs	r2, #22
 801ace8:	2100      	movs	r1, #0
 801acea:	4628      	mov	r0, r5
 801acec:	f7ec fbce 	bl	800748c <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801acf0:	b2c0      	uxtb	r0, r0
        area->x1 += table->col_w[c];
    }

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL;
    if(rtl) {
 801acf2:	2801      	cmp	r0, #1
        area->x1 += lv_obj_get_scroll_x(obj);
 801acf4:	4628      	mov	r0, r5
    if(rtl) {
 801acf6:	d138      	bne.n	801ad6a <get_cell_area+0x98>
        area->x1 += lv_obj_get_scroll_x(obj);
 801acf8:	f7eb fa8b 	bl	8006212 <lv_obj_get_scroll_x>
 801acfc:	8823      	ldrh	r3, [r4, #0]
 801acfe:	4418      	add	r0, r3
 801ad00:	8020      	strh	r0, [r4, #0]
        lv_coord_t w = lv_obj_get_width(obj);
 801ad02:	4628      	mov	r0, r5
 801ad04:	f7ea f91a 	bl	8004f3c <lv_obj_get_width>
        area->x2 = w - area->x1 - lv_obj_get_style_pad_right(obj, 0);
 801ad08:	8826      	ldrh	r6, [r4, #0]
 801ad0a:	1b80      	subs	r0, r0, r6
 801ad0c:	b286      	uxth	r6, r0
 801ad0e:	2100      	movs	r1, #0
 801ad10:	4628      	mov	r0, r5
 801ad12:	f7ff ff07 	bl	801ab24 <lv_obj_get_style_pad_right>
 801ad16:	1a30      	subs	r0, r6, r0
        area->x1 = area->x2 - table->col_w[col];
 801ad18:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        area->x2 = w - area->x1 - lv_obj_get_style_pad_right(obj, 0);
 801ad1a:	b280      	uxth	r0, r0
 801ad1c:	80a0      	strh	r0, [r4, #4]
        area->x1 = area->x2 - table->col_w[col];
 801ad1e:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
 801ad22:	1ac0      	subs	r0, r0, r3
 801ad24:	8020      	strh	r0, [r4, #0]
        area->x1 += lv_obj_get_style_pad_left(obj, 0);
        area->x2 = area->x1 + table->col_w[col] - 1;
    }

    uint32_t r;
    area->y1 = 0;
 801ad26:	2300      	movs	r3, #0
 801ad28:	8063      	strh	r3, [r4, #2]
    for(r = 0; r < row; r++) {
 801ad2a:	429f      	cmp	r7, r3
 801ad2c:	d831      	bhi.n	801ad92 <get_cell_area+0xc0>
        area->y1 += table->row_h[r];
    }

    area->y1 += lv_obj_get_style_pad_top(obj, 0);
 801ad2e:	2100      	movs	r1, #0
 801ad30:	4628      	mov	r0, r5
 801ad32:	f7ff fefd 	bl	801ab30 <lv_obj_get_style_pad_top>
 801ad36:	8863      	ldrh	r3, [r4, #2]
 801ad38:	4418      	add	r0, r3
 801ad3a:	8060      	strh	r0, [r4, #2]
    area->y1 -= lv_obj_get_scroll_y(obj);
 801ad3c:	4628      	mov	r0, r5
 801ad3e:	f7eb fa6e 	bl	800621e <lv_obj_get_scroll_y>
 801ad42:	8863      	ldrh	r3, [r4, #2]
 801ad44:	1a18      	subs	r0, r3, r0
 801ad46:	b280      	uxth	r0, r0
    area->y2 = area->y1 + table->row_h[row] - 1;
 801ad48:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    area->y1 -= lv_obj_get_scroll_y(obj);
 801ad4a:	8060      	strh	r0, [r4, #2]
    area->y2 = area->y1 + table->row_h[row] - 1;
 801ad4c:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 801ad50:	3b01      	subs	r3, #1
 801ad52:	4418      	add	r0, r3
 801ad54:	80e0      	strh	r0, [r4, #6]

}
 801ad56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        area->x1 += table->col_w[c];
 801ad5a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801ad5c:	8821      	ldrh	r1, [r4, #0]
 801ad5e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801ad62:	440a      	add	r2, r1
 801ad64:	8022      	strh	r2, [r4, #0]
    for(c = 0; c < col; c++) {
 801ad66:	3301      	adds	r3, #1
 801ad68:	e7bb      	b.n	801ace2 <get_cell_area+0x10>
        area->x1 -= lv_obj_get_scroll_x(obj);
 801ad6a:	f7eb fa52 	bl	8006212 <lv_obj_get_scroll_x>
 801ad6e:	8823      	ldrh	r3, [r4, #0]
 801ad70:	1a18      	subs	r0, r3, r0
 801ad72:	8020      	strh	r0, [r4, #0]
        area->x1 += lv_obj_get_style_pad_left(obj, 0);
 801ad74:	2100      	movs	r1, #0
 801ad76:	4628      	mov	r0, r5
 801ad78:	f7ff fece 	bl	801ab18 <lv_obj_get_style_pad_left>
 801ad7c:	8823      	ldrh	r3, [r4, #0]
 801ad7e:	4418      	add	r0, r3
 801ad80:	b280      	uxth	r0, r0
        area->x2 = area->x1 + table->col_w[col] - 1;
 801ad82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        area->x1 += lv_obj_get_style_pad_left(obj, 0);
 801ad84:	8020      	strh	r0, [r4, #0]
        area->x2 = area->x1 + table->col_w[col] - 1;
 801ad86:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
 801ad8a:	3b01      	subs	r3, #1
 801ad8c:	4418      	add	r0, r3
 801ad8e:	80a0      	strh	r0, [r4, #4]
 801ad90:	e7c9      	b.n	801ad26 <get_cell_area+0x54>
        area->y1 += table->row_h[r];
 801ad92:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801ad94:	8861      	ldrh	r1, [r4, #2]
 801ad96:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801ad9a:	440a      	add	r2, r1
 801ad9c:	8062      	strh	r2, [r4, #2]
    for(r = 0; r < row; r++) {
 801ad9e:	3301      	adds	r3, #1
 801ada0:	e7c3      	b.n	801ad2a <get_cell_area+0x58>

0801ada2 <scroll_to_selected_cell>:


static void scroll_to_selected_cell(lv_obj_t * obj)
{
 801ada2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    lv_table_t * table = (lv_table_t *)obj;

    lv_area_t a;
    get_cell_area(obj, table->row_act, table->col_act, &a);
 801ada4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ada6:	8e82      	ldrh	r2, [r0, #52]	; 0x34
 801ada8:	466b      	mov	r3, sp
{
 801adaa:	4604      	mov	r4, r0
    get_cell_area(obj, table->row_act, table->col_act, &a);
 801adac:	f7ff ff91 	bl	801acd2 <get_cell_area>
    if(a.x1 < 0) {
 801adb0:	f9bd 1000 	ldrsh.w	r1, [sp]
 801adb4:	2900      	cmp	r1, #0
 801adb6:	da13      	bge.n	801ade0 <scroll_to_selected_cell+0x3e>
        lv_obj_scroll_by_bounded(obj, -a.x1, 0, LV_ANIM_ON);
 801adb8:	4249      	negs	r1, r1
    }
    else if(a.x2 > lv_obj_get_width(obj)) {
        lv_obj_scroll_by_bounded(obj, lv_obj_get_width(obj) - a.x2, 0, LV_ANIM_ON);
 801adba:	2301      	movs	r3, #1
 801adbc:	2200      	movs	r2, #0
 801adbe:	b209      	sxth	r1, r1
 801adc0:	4620      	mov	r0, r4
 801adc2:	f7eb fc1b 	bl	80065fc <lv_obj_scroll_by_bounded>
    }

    if(a.y1 < 0) {
 801adc6:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 801adca:	2a00      	cmp	r2, #0
 801adcc:	da16      	bge.n	801adfc <scroll_to_selected_cell+0x5a>
        lv_obj_scroll_by_bounded(obj, 0, -a.y1, LV_ANIM_ON);
 801adce:	4252      	negs	r2, r2
    }
    else if(a.y2 > lv_obj_get_height(obj)) {
        lv_obj_scroll_by_bounded(obj, 0, lv_obj_get_height(obj) - a.y2, LV_ANIM_ON);
 801add0:	2301      	movs	r3, #1
 801add2:	b212      	sxth	r2, r2
 801add4:	2100      	movs	r1, #0
 801add6:	4620      	mov	r0, r4
 801add8:	f7eb fc10 	bl	80065fc <lv_obj_scroll_by_bounded>
    }

}
 801addc:	b003      	add	sp, #12
 801adde:	bd30      	pop	{r4, r5, pc}
    else if(a.x2 > lv_obj_get_width(obj)) {
 801ade0:	4620      	mov	r0, r4
 801ade2:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 801ade6:	f7ea f8a9 	bl	8004f3c <lv_obj_get_width>
 801adea:	4285      	cmp	r5, r0
 801adec:	ddeb      	ble.n	801adc6 <scroll_to_selected_cell+0x24>
        lv_obj_scroll_by_bounded(obj, lv_obj_get_width(obj) - a.x2, 0, LV_ANIM_ON);
 801adee:	4620      	mov	r0, r4
 801adf0:	f7ea f8a4 	bl	8004f3c <lv_obj_get_width>
 801adf4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801adf8:	1a41      	subs	r1, r0, r1
 801adfa:	e7de      	b.n	801adba <scroll_to_selected_cell+0x18>
    else if(a.y2 > lv_obj_get_height(obj)) {
 801adfc:	4620      	mov	r0, r4
 801adfe:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801ae02:	f7ea f8a1 	bl	8004f48 <lv_obj_get_height>
 801ae06:	4285      	cmp	r5, r0
 801ae08:	dde8      	ble.n	801addc <scroll_to_selected_cell+0x3a>
        lv_obj_scroll_by_bounded(obj, 0, lv_obj_get_height(obj) - a.y2, LV_ANIM_ON);
 801ae0a:	4620      	mov	r0, r4
 801ae0c:	f7ea f89c 	bl	8004f48 <lv_obj_get_height>
 801ae10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801ae14:	1a82      	subs	r2, r0, r2
 801ae16:	e7db      	b.n	801add0 <scroll_to_selected_cell+0x2e>

0801ae18 <refr_size_form_row.constprop.0>:
static void refr_size_form_row(lv_obj_t * obj, uint32_t start_row)
 801ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const lv_coord_t cell_pad_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801ae1c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
static void refr_size_form_row(lv_obj_t * obj, uint32_t start_row)
 801ae20:	b08b      	sub	sp, #44	; 0x2c
 801ae22:	4604      	mov	r4, r0
    const lv_coord_t cell_pad_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801ae24:	f7ff fe78 	bl	801ab18 <lv_obj_get_style_pad_left>
    const lv_coord_t cell_pad_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801ae28:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    const lv_coord_t cell_pad_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801ae2c:	9007      	str	r0, [sp, #28]
    const lv_coord_t cell_pad_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801ae2e:	4620      	mov	r0, r4
 801ae30:	f7ff fe78 	bl	801ab24 <lv_obj_get_style_pad_right>
    const lv_coord_t cell_pad_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801ae34:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    const lv_coord_t cell_pad_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801ae38:	9008      	str	r0, [sp, #32]
    const lv_coord_t cell_pad_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801ae3a:	4620      	mov	r0, r4
 801ae3c:	f7ff fe78 	bl	801ab30 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ae40:	2211      	movs	r2, #17
 801ae42:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ae46:	4606      	mov	r6, r0
 801ae48:	4620      	mov	r0, r4
 801ae4a:	f7ec fb1f 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801ae4e:	2258      	movs	r2, #88	; 0x58
 801ae50:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    return (lv_coord_t)v.num;
 801ae54:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801ae58:	4620      	mov	r0, r4
 801ae5a:	f7ec fb17 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801ae5e:	2259      	movs	r2, #89	; 0x59
 801ae60:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    return (lv_coord_t)v.num;
 801ae64:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801ae68:	4620      	mov	r0, r4
 801ae6a:	f7ec fb0f 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801ae6e:	2257      	movs	r2, #87	; 0x57
    return (lv_coord_t)v.num;
 801ae70:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801ae72:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ae76:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801ae78:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801ae7a:	f7ec fb07 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 801ae7e:	2205      	movs	r2, #5
 801ae80:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801ae84:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 801ae86:	4620      	mov	r0, r4
 801ae88:	f7ec fb00 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 801ae8c:	2206      	movs	r2, #6
    return (lv_coord_t)v.num;
 801ae8e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 801ae92:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ae96:	4620      	mov	r0, r4
 801ae98:	f7ec faf8 	bl	800748c <lv_obj_get_style_prop>
    for(i = start_row; i < table->row_cnt; i++) {
 801ae9c:	2500      	movs	r5, #0
    return (lv_coord_t)v.num;
 801ae9e:	b207      	sxth	r7, r0
 801aea0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 801aea2:	4295      	cmp	r5, r2
 801aea4:	d308      	bcc.n	801aeb8 <refr_size_form_row.constprop.0+0xa0>
    lv_obj_refresh_self_size(obj);
 801aea6:	4620      	mov	r0, r4
 801aea8:	f7ea f8d2 	bl	8005050 <lv_obj_refresh_self_size>
    lv_obj_invalidate(obj);
 801aeac:	4620      	mov	r0, r4
}
 801aeae:	b00b      	add	sp, #44	; 0x2c
 801aeb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(obj);
 801aeb4:	f7ea ba58 	b.w	8005368 <lv_obj_invalidate>
        lv_coord_t calculated_height = get_row_height(obj, i, font, letter_space, line_space,
 801aeb8:	9b08      	ldr	r3, [sp, #32]
 801aeba:	9302      	str	r3, [sp, #8]
 801aebc:	9b07      	ldr	r3, [sp, #28]
 801aebe:	9301      	str	r3, [sp, #4]
 801aec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aec2:	9300      	str	r3, [sp, #0]
 801aec4:	464a      	mov	r2, r9
 801aec6:	b2a9      	uxth	r1, r5
 801aec8:	e9cd 6b03 	strd	r6, fp, [sp, #12]
 801aecc:	4653      	mov	r3, sl
 801aece:	4620      	mov	r0, r4
 801aed0:	f7ff fe34 	bl	801ab3c <get_row_height>
        table->row_h[i] = LV_CLAMP(minh, calculated_height, maxh);
 801aed4:	42b8      	cmp	r0, r7
 801aed6:	bfa8      	it	ge
 801aed8:	4638      	movge	r0, r7
 801aeda:	b200      	sxth	r0, r0
 801aedc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801aede:	4540      	cmp	r0, r8
 801aee0:	bfb8      	it	lt
 801aee2:	4640      	movlt	r0, r8
 801aee4:	f822 0015 	strh.w	r0, [r2, r5, lsl #1]
    for(i = start_row; i < table->row_cnt; i++) {
 801aee8:	3501      	adds	r5, #1
 801aeea:	e7d9      	b.n	801aea0 <refr_size_form_row.constprop.0+0x88>

0801aeec <draw_main>:
{
 801aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aef0:	b0dd      	sub	sp, #372	; 0x174
 801aef2:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801aef4:	f7e8 f9aa 	bl	800324c <lv_event_get_target>
 801aef8:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801aefa:	4628      	mov	r0, r5
 801aefc:	f7e8 f9f9 	bl	80032f2 <lv_event_get_draw_ctx>
    if(!_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area)) return;
 801af00:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 801af04:	6882      	ldr	r2, [r0, #8]
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801af06:	4606      	mov	r6, r0
    if(!_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area)) return;
 801af08:	f104 0114 	add.w	r1, r4, #20
 801af0c:	4640      	mov	r0, r8
 801af0e:	f7f7 fcb2 	bl	8012876 <_lv_area_intersect>
 801af12:	2800      	cmp	r0, #0
 801af14:	f000 8087 	beq.w	801b026 <draw_main+0x13a>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801af18:	68b3      	ldr	r3, [r6, #8]
    draw_ctx->clip_area = &clip_area;
 801af1a:	f8c6 8008 	str.w	r8, [r6, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801af1e:	2232      	movs	r2, #50	; 0x32
 801af20:	2100      	movs	r1, #0
 801af22:	4620      	mov	r0, r4
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801af24:	9311      	str	r3, [sp, #68]	; 0x44
 801af26:	f7ec fab1 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801af2a:	2100      	movs	r1, #0
 801af2c:	4605      	mov	r5, r0
 801af2e:	4620      	mov	r0, r4
 801af30:	f7ff fdfe 	bl	801ab30 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801af34:	2211      	movs	r2, #17
 801af36:	900b      	str	r0, [sp, #44]	; 0x2c
 801af38:	2100      	movs	r1, #0
 801af3a:	4620      	mov	r0, r4
 801af3c:	f7ec faa6 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801af40:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 801af42:	b203      	sxth	r3, r0
 801af44:	4620      	mov	r0, r4
 801af46:	9313      	str	r3, [sp, #76]	; 0x4c
 801af48:	f7ff fde6 	bl	801ab18 <lv_obj_get_style_pad_left>
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801af4c:	2100      	movs	r1, #0
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801af4e:	900c      	str	r0, [sp, #48]	; 0x30
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801af50:	4620      	mov	r0, r4
 801af52:	f7ff fde7 	bl	801ab24 <lv_obj_get_style_pad_right>
    lv_state_t state_ori = obj->state;
 801af56:	8c23      	ldrh	r3, [r4, #32]
    obj->state = LV_STATE_DEFAULT;
 801af58:	6a22      	ldr	r2, [r4, #32]
    lv_state_t state_ori = obj->state;
 801af5a:	930e      	str	r3, [sp, #56]	; 0x38
    obj->state = LV_STATE_DEFAULT;
 801af5c:	4bad      	ldr	r3, [pc, #692]	; (801b214 <draw_main+0x328>)
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801af5e:	900d      	str	r0, [sp, #52]	; 0x34
    obj->state = LV_STATE_DEFAULT;
 801af60:	4013      	ands	r3, r2
 801af62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801af66:	6223      	str	r3, [r4, #32]
    lv_draw_rect_dsc_init(&rect_dsc_def);
 801af68:	a832      	add	r0, sp, #200	; 0xc8
 801af6a:	f7f0 f949 	bl	800b200 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_def);
 801af6e:	aa32      	add	r2, sp, #200	; 0xc8
 801af70:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801af74:	4620      	mov	r0, r4
 801af76:	f7e9 fb5a 	bl	800462e <lv_obj_init_draw_rect_dsc>
    lv_draw_label_dsc_init(&label_dsc_def);
 801af7a:	a822      	add	r0, sp, #136	; 0x88
 801af7c:	f7ee fe0c 	bl	8009b98 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_def);
 801af80:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801af84:	aa22      	add	r2, sp, #136	; 0x88
 801af86:	4620      	mov	r0, r4
 801af88:	f7e9 fc9a 	bl	80048c0 <lv_obj_init_draw_label_dsc>
    obj->state = state_ori;
 801af8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af8e:	8423      	strh	r3, [r4, #32]
    obj->skip_trans = 0;
 801af90:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 801af94:	8ae7      	ldrh	r7, [r4, #22]
    obj->skip_trans = 0;
 801af96:	f36f 0382 	bfc	r3, #2, #1
 801af9a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 801af9e:	4620      	mov	r0, r4
 801afa0:	f7eb f93d 	bl	800621e <lv_obj_get_scroll_y>
 801afa4:	b2ab      	uxth	r3, r5
 801afa6:	9309      	str	r3, [sp, #36]	; 0x24
 801afa8:	3b01      	subs	r3, #1
 801afaa:	b29a      	uxth	r2, r3
 801afac:	9214      	str	r2, [sp, #80]	; 0x50
 801afae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801afb0:	fa17 f383 	uxtah	r3, r7, r3
 801afb4:	4413      	add	r3, r2
 801afb6:	1a18      	subs	r0, r3, r0
 801afb8:	f8ad 006e 	strh.w	r0, [sp, #110]	; 0x6e
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 801afbc:	4620      	mov	r0, r4
 801afbe:	f7eb f928 	bl	8006212 <lv_obj_get_scroll_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801afc2:	2216      	movs	r2, #22
 801afc4:	9012      	str	r0, [sp, #72]	; 0x48
 801afc6:	2100      	movs	r1, #0
 801afc8:	4620      	mov	r0, r4
 801afca:	f7ec fa5f 	bl	800748c <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801afce:	4631      	mov	r1, r6
    return (lv_base_dir_t)v.num;
 801afd0:	b2c3      	uxtb	r3, r0
 801afd2:	a84a      	add	r0, sp, #296	; 0x128
 801afd4:	9308      	str	r3, [sp, #32]
 801afd6:	f7e9 fdc3 	bl	8004b60 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 801afda:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801afde:	9357      	str	r3, [sp, #348]	; 0x15c
    part_draw_dsc.class_p = MY_CLASS;
 801afe0:	4b8d      	ldr	r3, [pc, #564]	; (801b218 <draw_main+0x32c>)
 801afe2:	934b      	str	r3, [sp, #300]	; 0x12c
    part_draw_dsc.rect_dsc = &rect_dsc_act;
 801afe4:	ab3e      	add	r3, sp, #248	; 0xf8
    part_draw_dsc.type = LV_TABLE_DRAW_PART_CELL;
 801afe6:	2700      	movs	r7, #0
    part_draw_dsc.rect_dsc = &rect_dsc_act;
 801afe8:	934e      	str	r3, [sp, #312]	; 0x138
    part_draw_dsc.label_dsc = &label_dsc_act;
 801afea:	ab2a      	add	r3, sp, #168	; 0xa8
    part_draw_dsc.type = LV_TABLE_DRAW_PART_CELL;
 801afec:	974c      	str	r7, [sp, #304]	; 0x130
    part_draw_dsc.label_dsc = &label_dsc_act;
 801afee:	934f      	str	r3, [sp, #316]	; 0x13c
    uint16_t cell = 0;
 801aff0:	46ba      	mov	sl, r7
        cell_area.y1 = cell_area.y2 + 1;
 801aff2:	ad1a      	add	r5, sp, #104	; 0x68
        if(cell_area.y1 > clip_area.y2) break;
 801aff4:	f8cd 8014 	str.w	r8, [sp, #20]
 801aff8:	b2bb      	uxth	r3, r7
 801affa:	930a      	str	r3, [sp, #40]	; 0x28
    for(row = 0; row < table->row_cnt; row++) {
 801affc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801affe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801b000:	4293      	cmp	r3, r2
 801b002:	d90e      	bls.n	801b022 <draw_main+0x136>
        lv_coord_t h_row = table->row_h[row];
 801b004:	b2bb      	uxth	r3, r7
 801b006:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        cell_area.y1 = cell_area.y2 + 1;
 801b008:	88e9      	ldrh	r1, [r5, #6]
        lv_coord_t h_row = table->row_h[row];
 801b00a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
        cell_area.y1 = cell_area.y2 + 1;
 801b00e:	1c4b      	adds	r3, r1, #1
        cell_area.y2 = cell_area.y1 + h_row - 1;
 801b010:	4411      	add	r1, r2
 801b012:	80e9      	strh	r1, [r5, #6]
        if(cell_area.y1 > clip_area.y2) break;
 801b014:	9905      	ldr	r1, [sp, #20]
 801b016:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
        cell_area.y1 = cell_area.y2 + 1;
 801b01a:	b21b      	sxth	r3, r3
        if(cell_area.y1 > clip_area.y2) break;
 801b01c:	4299      	cmp	r1, r3
        cell_area.y1 = cell_area.y2 + 1;
 801b01e:	806b      	strh	r3, [r5, #2]
        if(cell_area.y1 > clip_area.y2) break;
 801b020:	da04      	bge.n	801b02c <draw_main+0x140>
    draw_ctx->clip_area = clip_area_ori;
 801b022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b024:	60b3      	str	r3, [r6, #8]
}
 801b026:	b05d      	add	sp, #372	; 0x174
 801b028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(rtl) cell_area.x1 = obj->coords.x2 - bg_right - 1 - scroll_x - border_width;
 801b02c:	9b08      	ldr	r3, [sp, #32]
 801b02e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 801b032:	2b01      	cmp	r3, #1
 801b034:	d113      	bne.n	801b05e <draw_main+0x172>
 801b036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b038:	8b20      	ldrh	r0, [r4, #24]
 801b03a:	43db      	mvns	r3, r3
 801b03c:	4403      	add	r3, r0
 801b03e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b040:	1a1b      	subs	r3, r3, r0
 801b042:	1a5b      	subs	r3, r3, r1
 801b044:	802b      	strh	r3, [r5, #0]
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801b046:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801b04a:	f3c2 034f 	ubfx	r3, r2, #1, #16
 801b04e:	9310      	str	r3, [sp, #64]	; 0x40
 801b050:	f04f 0800 	mov.w	r8, #0
        for(col = 0; col < table->col_cnt; col++) {
 801b054:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801b056:	4541      	cmp	r1, r8
 801b058:	d809      	bhi.n	801b06e <draw_main+0x182>
    for(row = 0; row < table->row_cnt; row++) {
 801b05a:	3701      	adds	r7, #1
 801b05c:	e7cc      	b.n	801aff8 <draw_main+0x10c>
        else cell_area.x2 = obj->coords.x1 + bg_left - 1 - scroll_x + border_width;
 801b05e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b060:	8aa3      	ldrh	r3, [r4, #20]
 801b062:	4403      	add	r3, r0
 801b064:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b066:	4403      	add	r3, r0
 801b068:	1a5b      	subs	r3, r3, r1
 801b06a:	80ab      	strh	r3, [r5, #4]
 801b06c:	e7eb      	b.n	801b046 <draw_main+0x15a>
            if(table->cell_data[cell]) ctrl = table->cell_data[cell][0];
 801b06e:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
 801b072:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801b076:	9306      	str	r3, [sp, #24]
 801b078:	f859 302a 	ldr.w	r3, [r9, sl, lsl #2]
 801b07c:	b103      	cbz	r3, 801b080 <draw_main+0x194>
 801b07e:	781b      	ldrb	r3, [r3, #0]
            lv_table_cell_ctrl_t ctrl = 0;
 801b080:	9307      	str	r3, [sp, #28]
            if(rtl) {
 801b082:	9b08      	ldr	r3, [sp, #32]
                cell_area.x1 = cell_area.x2 - table->col_w[col] + 1;
 801b084:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
            if(rtl) {
 801b088:	2b01      	cmp	r3, #1
 801b08a:	f040 80ba 	bne.w	801b202 <draw_main+0x316>
                cell_area.x2 = cell_area.x1 - 1;
 801b08e:	882b      	ldrh	r3, [r5, #0]
 801b090:	1e5a      	subs	r2, r3, #1
 801b092:	80aa      	strh	r2, [r5, #4]
                cell_area.x1 = cell_area.x2 - table->col_w[col] + 1;
 801b094:	f83e 2018 	ldrh.w	r2, [lr, r8, lsl #1]
 801b098:	1a9b      	subs	r3, r3, r2
 801b09a:	802b      	strh	r3, [r5, #0]
            lv_table_cell_ctrl_t ctrl = 0;
 801b09c:	2200      	movs	r2, #0
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801b09e:	3901      	subs	r1, #1
 801b0a0:	fa18 f082 	uxtah	r0, r8, r2
 801b0a4:	b293      	uxth	r3, r2
 801b0a6:	4288      	cmp	r0, r1
 801b0a8:	469c      	mov	ip, r3
 801b0aa:	f2c0 80b7 	blt.w	801b21c <draw_main+0x330>
            if(cell_area.y2 < clip_area.y1) {
 801b0ae:	3301      	adds	r3, #1
 801b0b0:	b29a      	uxth	r2, r3
                cell += col_merge + 1;
 801b0b2:	fa1a f383 	uxtah	r3, sl, r3
 801b0b6:	fa1f fa83 	uxth.w	sl, r3
            if(cell_area.y2 < clip_area.y1) {
 801b0ba:	9b05      	ldr	r3, [sp, #20]
 801b0bc:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b0c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b0c4:	920f      	str	r2, [sp, #60]	; 0x3c
 801b0c6:	428b      	cmp	r3, r1
 801b0c8:	f300 815b 	bgt.w	801b382 <draw_main+0x496>
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_LEFT) && cell_area_border.x1 > obj->coords.x1 + bg_left) {
 801b0cc:	f89d e0e5 	ldrb.w	lr, [sp, #229]	; 0xe5
    dest->x1 = src->x1;
 801b0d0:	f9b5 c000 	ldrsh.w	ip, [r5]
    dest->y1 = src->y1;
 801b0d4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
    dest->x2 = src->x2;
 801b0d8:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
    dest->x1 = src->x1;
 801b0dc:	f8ad c070 	strh.w	ip, [sp, #112]	; 0x70
 801b0e0:	f01e 0f08 	tst.w	lr, #8
    dest->y1 = src->y1;
 801b0e4:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
    dest->x2 = src->x2;
 801b0e8:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
    dest->y2 = src->y2;
 801b0ec:	f8ad 1076 	strh.w	r1, [sp, #118]	; 0x76
 801b0f0:	f3ce 0944 	ubfx	r9, lr, #1, #5
 801b0f4:	d00d      	beq.n	801b112 <draw_main+0x226>
 801b0f6:	f9b4 e014 	ldrsh.w	lr, [r4, #20]
 801b0fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b0fc:	449e      	add	lr, r3
 801b0fe:	45f4      	cmp	ip, lr
                cell_area_border.x1 -= rect_dsc_def.border_width / 2;
 801b100:	bfc1      	itttt	gt
 801b102:	f9bd e0e2 	ldrshgt.w	lr, [sp, #226]	; 0xe2
 801b106:	eb0e 7ede 	addgt.w	lr, lr, lr, lsr #31
 801b10a:	ebac 0c6e 	subgt.w	ip, ip, lr, asr #1
 801b10e:	f8ad c070 	strhgt.w	ip, [sp, #112]	; 0x70
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_TOP) && cell_area_border.y1 > obj->coords.y1 + bg_top) {
 801b112:	f019 0f02 	tst.w	r9, #2
 801b116:	d00d      	beq.n	801b134 <draw_main+0x248>
 801b118:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 801b11c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b11e:	449c      	add	ip, r3
 801b120:	4562      	cmp	r2, ip
                cell_area_border.y1 -= rect_dsc_def.border_width / 2;
 801b122:	bfc1      	itttt	gt
 801b124:	f9bd c0e2 	ldrshgt.w	ip, [sp, #226]	; 0xe2
 801b128:	eb0c 7cdc 	addgt.w	ip, ip, ip, lsr #31
 801b12c:	eba2 026c 	subgt.w	r2, r2, ip, asr #1
 801b130:	f8ad 2072 	strhgt.w	r2, [sp, #114]	; 0x72
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_RIGHT) && cell_area_border.x2 < obj->coords.x2 - bg_right - 1) {
 801b134:	f019 0f08 	tst.w	r9, #8
 801b138:	d011      	beq.n	801b15e <draw_main+0x272>
 801b13a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 801b13e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b140:	1ad2      	subs	r2, r2, r3
 801b142:	3a01      	subs	r2, #1
 801b144:	4290      	cmp	r0, r2
 801b146:	da0a      	bge.n	801b15e <draw_main+0x272>
                cell_area_border.x2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 801b148:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
 801b14c:	eb02 7cd2 	add.w	ip, r2, r2, lsr #31
 801b150:	f002 0201 	and.w	r2, r2, #1
 801b154:	eb02 026c 	add.w	r2, r2, ip, asr #1
 801b158:	4402      	add	r2, r0
 801b15a:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 801b15e:	f019 0f01 	tst.w	r9, #1
 801b162:	d011      	beq.n	801b188 <draw_main+0x29c>
               cell_area_border.y2 < obj->coords.y2 - bg_bottom - 1) {
 801b164:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801b168:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b16a:	1a9b      	subs	r3, r3, r2
 801b16c:	3b01      	subs	r3, #1
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 801b16e:	4299      	cmp	r1, r3
 801b170:	da0a      	bge.n	801b188 <draw_main+0x29c>
                cell_area_border.y2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 801b172:	f9bd 30e2 	ldrsh.w	r3, [sp, #226]	; 0xe2
 801b176:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 801b17a:	f003 0301 	and.w	r3, r3, #1
 801b17e:	eb03 0362 	add.w	r3, r3, r2, asr #1
 801b182:	440b      	add	r3, r1
 801b184:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            if(row == table->row_act && col == table->col_act) {
 801b188:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b18c:	4293      	cmp	r3, r2
 801b18e:	d163      	bne.n	801b258 <draw_main+0x36c>
 801b190:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b192:	4543      	cmp	r3, r8
 801b194:	d160      	bne.n	801b258 <draw_main+0x36c>
                if(!(obj->state & LV_STATE_SCROLLED) && (obj->state & LV_STATE_PRESSED)) cell_state |= LV_STATE_PRESSED;
 801b196:	8c22      	ldrh	r2, [r4, #32]
 801b198:	f002 0360 	and.w	r3, r2, #96	; 0x60
            lv_state_t cell_state = LV_STATE_DEFAULT;
 801b19c:	2b20      	cmp	r3, #32
 801b19e:	bf18      	it	ne
 801b1a0:	2300      	movne	r3, #0
                if(obj->state & LV_STATE_FOCUSED) cell_state |= LV_STATE_FOCUSED;
 801b1a2:	0790      	lsls	r0, r2, #30
 801b1a4:	bf48      	it	mi
 801b1a6:	f043 0302 	orrmi.w	r3, r3, #2
                if(obj->state & LV_STATE_FOCUS_KEY) cell_state |= LV_STATE_FOCUS_KEY;
 801b1aa:	0751      	lsls	r1, r2, #29
 801b1ac:	bf44      	itt	mi
 801b1ae:	f043 0304 	orrmi.w	r3, r3, #4
 801b1b2:	b29b      	uxthmi	r3, r3
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 801b1b4:	0712      	lsls	r2, r2, #28
 801b1b6:	d54d      	bpl.n	801b254 <draw_main+0x368>
 801b1b8:	f043 0308 	orr.w	r3, r3, #8
 801b1bc:	b29b      	uxth	r3, r3
                obj->state = cell_state;
 801b1be:	8423      	strh	r3, [r4, #32]
                obj->skip_trans = 1;
 801b1c0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801b1c4:	f043 0304 	orr.w	r3, r3, #4
 801b1c8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                lv_draw_rect_dsc_init(&rect_dsc_act);
 801b1cc:	a83e      	add	r0, sp, #248	; 0xf8
 801b1ce:	f7f0 f817 	bl	800b200 <lv_draw_rect_dsc_init>
                lv_draw_label_dsc_init(&label_dsc_act);
 801b1d2:	a82a      	add	r0, sp, #168	; 0xa8
 801b1d4:	f7ee fce0 	bl	8009b98 <lv_draw_label_dsc_init>
                lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_act);
 801b1d8:	aa3e      	add	r2, sp, #248	; 0xf8
 801b1da:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801b1de:	4620      	mov	r0, r4
 801b1e0:	f7e9 fa25 	bl	800462e <lv_obj_init_draw_rect_dsc>
                lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_act);
 801b1e4:	aa2a      	add	r2, sp, #168	; 0xa8
 801b1e6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801b1ea:	4620      	mov	r0, r4
 801b1ec:	f7e9 fb68 	bl	80048c0 <lv_obj_init_draw_label_dsc>
                obj->state = state_ori;
 801b1f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b1f2:	8423      	strh	r3, [r4, #32]
                obj->skip_trans = 0;
 801b1f4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801b1f8:	f36f 0382 	bfc	r3, #2, #1
 801b1fc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801b200:	e034      	b.n	801b26c <draw_main+0x380>
                cell_area.x1 = cell_area.x2 + 1;
 801b202:	88ab      	ldrh	r3, [r5, #4]
 801b204:	1c5a      	adds	r2, r3, #1
 801b206:	802a      	strh	r2, [r5, #0]
                cell_area.x2 = cell_area.x1 + table->col_w[col] - 1;
 801b208:	f83e 2018 	ldrh.w	r2, [lr, r8, lsl #1]
 801b20c:	4413      	add	r3, r2
 801b20e:	80ab      	strh	r3, [r5, #4]
 801b210:	e744      	b.n	801b09c <draw_main+0x1b0>
 801b212:	bf00      	nop
 801b214:	fffb0000 	.word	0xfffb0000
 801b218:	080205ec 	.word	0x080205ec
                char * next_cell_data = table->cell_data[cell + col_merge];
 801b21c:	44d4      	add	ip, sl
 801b21e:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
                if(is_cell_empty(next_cell_data)) break;
 801b222:	f1bc 0f00 	cmp.w	ip, #0
 801b226:	f43f af42 	beq.w	801b0ae <draw_main+0x1c2>
                if(merge_ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT) {
 801b22a:	f89c c000 	ldrb.w	ip, [ip]
 801b22e:	f01c 0f01 	tst.w	ip, #1
 801b232:	f43f af3c 	beq.w	801b0ae <draw_main+0x1c2>
                    lv_coord_t offset = table->col_w[col + col_merge + 1];
 801b236:	3001      	adds	r0, #1
 801b238:	3201      	adds	r2, #1
                    if(rtl) cell_area.x1 -= offset;
 801b23a:	f83e 3010 	ldrh.w	r3, [lr, r0, lsl #1]
 801b23e:	9808      	ldr	r0, [sp, #32]
 801b240:	2801      	cmp	r0, #1
 801b242:	bf0b      	itete	eq
 801b244:	8828      	ldrheq	r0, [r5, #0]
                    else cell_area.x2 += offset;
 801b246:	88a8      	ldrhne	r0, [r5, #4]
                    if(rtl) cell_area.x1 -= offset;
 801b248:	1ac3      	subeq	r3, r0, r3
                    else cell_area.x2 += offset;
 801b24a:	181b      	addne	r3, r3, r0
                    if(rtl) cell_area.x1 -= offset;
 801b24c:	bf0c      	ite	eq
 801b24e:	802b      	strheq	r3, [r5, #0]
                    else cell_area.x2 += offset;
 801b250:	80ab      	strhne	r3, [r5, #4]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801b252:	e725      	b.n	801b0a0 <draw_main+0x1b4>
            if(cell_state == LV_STATE_DEFAULT) {
 801b254:	2b00      	cmp	r3, #0
 801b256:	d1b2      	bne.n	801b1be <draw_main+0x2d2>
                lv_memcpy(&rect_dsc_act, &rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 801b258:	2230      	movs	r2, #48	; 0x30
 801b25a:	a932      	add	r1, sp, #200	; 0xc8
 801b25c:	a83e      	add	r0, sp, #248	; 0xf8
 801b25e:	f7f8 f92d 	bl	80134bc <lv_memcpy>
                lv_memcpy(&label_dsc_act, &label_dsc_def, sizeof(lv_draw_label_dsc_t));
 801b262:	2220      	movs	r2, #32
 801b264:	a922      	add	r1, sp, #136	; 0x88
 801b266:	a82a      	add	r0, sp, #168	; 0xa8
 801b268:	f7f8 f928 	bl	80134bc <lv_memcpy>
            part_draw_dsc.id = row * table->col_cnt + col;
 801b26c:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801b26e:	b2bb      	uxth	r3, r7
 801b270:	fb02 8303 	mla	r3, r2, r3, r8
            part_draw_dsc.draw_area = &cell_area_border;
 801b274:	f10d 0970 	add.w	r9, sp, #112	; 0x70
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801b278:	aa4a      	add	r2, sp, #296	; 0x128
 801b27a:	211a      	movs	r1, #26
 801b27c:	4620      	mov	r0, r4
            part_draw_dsc.id = row * table->col_cnt + col;
 801b27e:	9358      	str	r3, [sp, #352]	; 0x160
            part_draw_dsc.draw_area = &cell_area_border;
 801b280:	f8cd 9134 	str.w	r9, [sp, #308]	; 0x134
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801b284:	f7e7 ffc2 	bl	800320c <lv_event_send>
            lv_draw_rect(draw_ctx, &rect_dsc_act, &cell_area_border);
 801b288:	464a      	mov	r2, r9
 801b28a:	a93e      	add	r1, sp, #248	; 0xf8
 801b28c:	4630      	mov	r0, r6
 801b28e:	f7ef ffdb 	bl	800b248 <lv_draw_rect>
            if(table->cell_data[cell]) {
 801b292:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b294:	9a06      	ldr	r2, [sp, #24]
 801b296:	589b      	ldr	r3, [r3, r2]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d06d      	beq.n	801b378 <draw_main+0x48c>
                const lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801b29c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801b2a0:	4620      	mov	r0, r4
 801b2a2:	f7ff fc39 	bl	801ab18 <lv_obj_get_style_pad_left>
                const lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801b2a6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
                const lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801b2aa:	4681      	mov	r9, r0
                const lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801b2ac:	4620      	mov	r0, r4
 801b2ae:	f7ff fc39 	bl	801ab24 <lv_obj_get_style_pad_right>
                const lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801b2b2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
                const lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801b2b6:	9015      	str	r0, [sp, #84]	; 0x54
                const lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801b2b8:	4620      	mov	r0, r4
 801b2ba:	f7ff fc39 	bl	801ab30 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b2be:	2211      	movs	r2, #17
 801b2c0:	4683      	mov	fp, r0
 801b2c2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801b2c6:	4620      	mov	r0, r4
 801b2c8:	f7ec f8e0 	bl	800748c <lv_obj_get_style_prop>
                txt_area.x1 = cell_area.x1 + cell_left;
 801b2cc:	882a      	ldrh	r2, [r5, #0]
                txt_area.x2 = cell_area.x2 - cell_right;
 801b2ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801b2d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                txt_area.x1 = cell_area.x1 + cell_left;
 801b2d2:	4491      	add	r9, r2
                txt_area.x2 = cell_area.x2 - cell_right;
 801b2d4:	88aa      	ldrh	r2, [r5, #4]
 801b2d6:	1ad3      	subs	r3, r2, r3
                txt_area.y1 = cell_area.y1 + cell_top;
 801b2d8:	886a      	ldrh	r2, [r5, #2]
 801b2da:	4493      	add	fp, r2
                txt_area.y2 = cell_area.y2 - cell_bottom;
 801b2dc:	88ea      	ldrh	r2, [r5, #6]
                txt_area.y1 = cell_area.y1 + cell_top;
 801b2de:	f8ad b07a 	strh.w	fp, [sp, #122]	; 0x7a
                txt_area.y2 = cell_area.y2 - cell_bottom;
 801b2e2:	1a10      	subs	r0, r2, r0
                txt_area.x2 = cell_area.x2 - cell_right;
 801b2e4:	b29b      	uxth	r3, r3
                txt_area.x1 = cell_area.x1 + cell_left;
 801b2e6:	fa1f f989 	uxth.w	r9, r9
                txt_area.x2 = cell_area.x2 - cell_right;
 801b2ea:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                txt_area.y2 = cell_area.y2 - cell_bottom;
 801b2ee:	f8ad 007e 	strh.w	r0, [sp, #126]	; 0x7e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801b2f2:	3301      	adds	r3, #1
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801b2f4:	9806      	ldr	r0, [sp, #24]
                bool crop = ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP ? true : false;
 801b2f6:	9a07      	ldr	r2, [sp, #28]
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801b2f8:	5809      	ldr	r1, [r1, r0]
                txt_area.x1 = cell_area.x1 + cell_left;
 801b2fa:	f8ad 9078 	strh.w	r9, [sp, #120]	; 0x78
 801b2fe:	eba3 0309 	sub.w	r3, r3, r9
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801b302:	b21b      	sxth	r3, r3
                bool crop = ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP ? true : false;
 801b304:	f3c2 0b40 	ubfx	fp, r2, #1, #1
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801b308:	9301      	str	r3, [sp, #4]
                if(crop) txt_flags = LV_TEXT_FLAG_EXPAND;
 801b30a:	f002 0202 	and.w	r2, r2, #2
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801b30e:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 801b312:	9202      	str	r2, [sp, #8]
 801b314:	9300      	str	r3, [sp, #0]
 801b316:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801b318:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
 801b31c:	3101      	adds	r1, #1
 801b31e:	a817      	add	r0, sp, #92	; 0x5c
 801b320:	f7f9 ffcc 	bl	80152bc <lv_txt_get_size>
                if(!crop) {
 801b324:	f1bb 0f00 	cmp.w	fp, #0
 801b328:	d10f      	bne.n	801b34a <draw_main+0x45e>
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801b32a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b32c:	886b      	ldrh	r3, [r5, #2]
 801b32e:	4413      	add	r3, r2
 801b330:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801b334:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801b338:	b29b      	uxth	r3, r3
 801b33a:	f3c2 024f 	ubfx	r2, r2, #1, #16
 801b33e:	1a99      	subs	r1, r3, r2
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 801b340:	4413      	add	r3, r2
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801b342:	f8ad 107a 	strh.w	r1, [sp, #122]	; 0x7a
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 801b346:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
                label_mask_ok = _lv_area_intersect(&label_clip_area, &clip_area, &cell_area);
 801b34a:	f10d 0980 	add.w	r9, sp, #128	; 0x80
 801b34e:	9905      	ldr	r1, [sp, #20]
 801b350:	aa1a      	add	r2, sp, #104	; 0x68
 801b352:	4648      	mov	r0, r9
 801b354:	f7f7 fa8f 	bl	8012876 <_lv_area_intersect>
                if(label_mask_ok) {
 801b358:	b170      	cbz	r0, 801b378 <draw_main+0x48c>
                    lv_draw_label(draw_ctx, &label_dsc_act, &txt_area, table->cell_data[cell] + 1, NULL);
 801b35a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b35c:	9a06      	ldr	r2, [sp, #24]
                    draw_ctx->clip_area = &label_clip_area;
 801b35e:	f8c6 9008 	str.w	r9, [r6, #8]
                    lv_draw_label(draw_ctx, &label_dsc_act, &txt_area, table->cell_data[cell] + 1, NULL);
 801b362:	589b      	ldr	r3, [r3, r2]
 801b364:	2200      	movs	r2, #0
 801b366:	9200      	str	r2, [sp, #0]
 801b368:	3301      	adds	r3, #1
 801b36a:	aa1e      	add	r2, sp, #120	; 0x78
 801b36c:	a92a      	add	r1, sp, #168	; 0xa8
 801b36e:	4630      	mov	r0, r6
 801b370:	f7ee fc30 	bl	8009bd4 <lv_draw_label>
                    draw_ctx->clip_area = &clip_area;
 801b374:	9b05      	ldr	r3, [sp, #20]
 801b376:	60b3      	str	r3, [r6, #8]
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801b378:	aa4a      	add	r2, sp, #296	; 0x128
 801b37a:	211b      	movs	r1, #27
 801b37c:	4620      	mov	r0, r4
 801b37e:	f7e7 ff45 	bl	800320c <lv_event_send>
        for(col = 0; col < table->col_cnt; col++) {
 801b382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b384:	4443      	add	r3, r8
 801b386:	fa1f f883 	uxth.w	r8, r3
 801b38a:	e663      	b.n	801b054 <draw_main+0x168>

0801b38c <lv_table_event>:
{
 801b38c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801b38e:	489a      	ldr	r0, [pc, #616]	; (801b5f8 <lv_table_event+0x26c>)
{
 801b390:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801b392:	f7e7 fe73 	bl	800307c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801b396:	2801      	cmp	r0, #1
 801b398:	d123      	bne.n	801b3e2 <lv_table_event+0x56>
    lv_event_code_t code = lv_event_get_code(e);
 801b39a:	4630      	mov	r0, r6
 801b39c:	f7e7 ff5a 	bl	8003254 <lv_event_get_code>
 801b3a0:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801b3a2:	4630      	mov	r0, r6
 801b3a4:	f7e7 ff52 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801b3a8:	2d2a      	cmp	r5, #42	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 801b3aa:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801b3ac:	d104      	bne.n	801b3b8 <lv_table_event+0x2c>
}
 801b3ae:	b003      	add	sp, #12
 801b3b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        refr_size_form_row(obj, 0);
 801b3b4:	f7ff bd30 	b.w	801ae18 <refr_size_form_row.constprop.0>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801b3b8:	2d2c      	cmp	r5, #44	; 0x2c
 801b3ba:	d122      	bne.n	801b402 <lv_table_event+0x76>
        lv_point_t * p = lv_event_get_param(e);
 801b3bc:	4630      	mov	r0, r6
 801b3be:	f7e7 ff4d 	bl	800325c <lv_event_get_param>
        lv_coord_t w = 0;
 801b3c2:	2300      	movs	r3, #0
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 801b3c4:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
 801b3c6:	4619      	mov	r1, r3
 801b3c8:	42a9      	cmp	r1, r5
 801b3ca:	b29a      	uxth	r2, r3
 801b3cc:	d30b      	bcc.n	801b3e6 <lv_table_event+0x5a>
        lv_coord_t h = 0;
 801b3ce:	2300      	movs	r3, #0
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 801b3d0:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 801b3d2:	4619      	mov	r1, r3
 801b3d4:	42a9      	cmp	r1, r5
 801b3d6:	b29b      	uxth	r3, r3
 801b3d8:	d30c      	bcc.n	801b3f4 <lv_table_event+0x68>
        p->x = w - 1;
 801b3da:	3a01      	subs	r2, #1
        p->y = h - 1;
 801b3dc:	3b01      	subs	r3, #1
        p->x = w - 1;
 801b3de:	8002      	strh	r2, [r0, #0]
        p->y = h - 1;
 801b3e0:	8043      	strh	r3, [r0, #2]
}
 801b3e2:	b003      	add	sp, #12
 801b3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 801b3e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b3e8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801b3ec:	4413      	add	r3, r2
 801b3ee:	b21b      	sxth	r3, r3
 801b3f0:	3101      	adds	r1, #1
 801b3f2:	e7e9      	b.n	801b3c8 <lv_table_event+0x3c>
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 801b3f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b3f6:	f836 6011 	ldrh.w	r6, [r6, r1, lsl #1]
 801b3fa:	4433      	add	r3, r6
 801b3fc:	b21b      	sxth	r3, r3
 801b3fe:	3101      	adds	r1, #1
 801b400:	e7e8      	b.n	801b3d4 <lv_table_event+0x48>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_PRESSING) {
 801b402:	1e6b      	subs	r3, r5, #1
 801b404:	b2db      	uxtb	r3, r3
 801b406:	2b01      	cmp	r3, #1
 801b408:	d863      	bhi.n	801b4d2 <lv_table_event+0x146>
    lv_indev_type_t type = lv_indev_get_type(lv_indev_get_act());
 801b40a:	f7e8 f913 	bl	8003634 <lv_indev_get_act>
 801b40e:	f7e8 f917 	bl	8003640 <lv_indev_get_type>
    if(type != LV_INDEV_TYPE_POINTER && type != LV_INDEV_TYPE_BUTTON) {
 801b412:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801b416:	2801      	cmp	r0, #1
 801b418:	d1e3      	bne.n	801b3e2 <lv_table_event+0x56>
    lv_indev_get_point(lv_indev_get_act(), &p);
 801b41a:	f7e8 f90b 	bl	8003634 <lv_indev_get_act>
 801b41e:	a901      	add	r1, sp, #4
 801b420:	f7e8 f96f 	bl	8003702 <lv_indev_get_point>
        lv_coord_t x = p.x + lv_obj_get_scroll_x(obj);
 801b424:	4620      	mov	r0, r4
 801b426:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801b42a:	f7ea fef2 	bl	8006212 <lv_obj_get_scroll_x>
 801b42e:	4430      	add	r0, r6
 801b430:	b285      	uxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801b432:	2216      	movs	r2, #22
 801b434:	2100      	movs	r1, #0
 801b436:	4620      	mov	r0, r4
 801b438:	f7ec f828 	bl	800748c <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801b43c:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 801b43e:	2801      	cmp	r0, #1
 801b440:	d13e      	bne.n	801b4c0 <lv_table_event+0x134>
            x = obj->coords.x2 - lv_obj_get_style_pad_right(obj, LV_PART_MAIN) - x;
 801b442:	2100      	movs	r1, #0
 801b444:	4620      	mov	r0, r4
 801b446:	8b26      	ldrh	r6, [r4, #24]
 801b448:	f7ff fb6c 	bl	801ab24 <lv_obj_get_style_pad_right>
 801b44c:	1b76      	subs	r6, r6, r5
 801b44e:	1a30      	subs	r0, r6, r0
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 801b450:	2300      	movs	r3, #0
 801b452:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801b454:	b200      	sxth	r0, r0
        tmp = 0;
 801b456:	461a      	mov	r2, r3
 801b458:	b29f      	uxth	r7, r3
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 801b45a:	42b9      	cmp	r1, r7
 801b45c:	d908      	bls.n	801b470 <lv_table_event+0xe4>
            tmp += table->col_w[*col];
 801b45e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b460:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 801b464:	442a      	add	r2, r5
 801b466:	b212      	sxth	r2, r2
            if(x < tmp) break;
 801b468:	4282      	cmp	r2, r0
 801b46a:	f103 0301 	add.w	r3, r3, #1
 801b46e:	ddf3      	ble.n	801b458 <lv_table_event+0xcc>
        lv_coord_t y = p.y + lv_obj_get_scroll_y(obj);;
 801b470:	4620      	mov	r0, r4
 801b472:	f8bd 6006 	ldrh.w	r6, [sp, #6]
 801b476:	f7ea fed2 	bl	800621e <lv_obj_get_scroll_y>
        y -= obj->coords.y1;
 801b47a:	8ae5      	ldrh	r5, [r4, #22]
 801b47c:	1b76      	subs	r6, r6, r5
 801b47e:	4406      	add	r6, r0
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801b480:	2100      	movs	r1, #0
 801b482:	4620      	mov	r0, r4
 801b484:	f7ff fb54 	bl	801ab30 <lv_obj_get_style_pad_top>
        y -= obj->coords.y1;
 801b488:	b2b6      	uxth	r6, r6
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801b48a:	1a30      	subs	r0, r6, r0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 801b48c:	2300      	movs	r3, #0
 801b48e:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801b490:	b200      	sxth	r0, r0
        tmp = 0;
 801b492:	461a      	mov	r2, r3
 801b494:	b299      	uxth	r1, r3
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 801b496:	428d      	cmp	r5, r1
 801b498:	d908      	bls.n	801b4ac <lv_table_event+0x120>
            tmp += table->row_h[*row];
 801b49a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b49c:	f836 6013 	ldrh.w	r6, [r6, r3, lsl #1]
 801b4a0:	4432      	add	r2, r6
 801b4a2:	b212      	sxth	r2, r2
            if(y < tmp) break;
 801b4a4:	4290      	cmp	r0, r2
 801b4a6:	f103 0301 	add.w	r3, r3, #1
 801b4aa:	daf3      	bge.n	801b494 <lv_table_event+0x108>
        if(pr_res == LV_RES_OK && (table->col_act != col || table->row_act != row)) {
 801b4ac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b4ae:	42bb      	cmp	r3, r7
 801b4b0:	d102      	bne.n	801b4b8 <lv_table_event+0x12c>
 801b4b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b4b4:	428b      	cmp	r3, r1
 801b4b6:	d094      	beq.n	801b3e2 <lv_table_event+0x56>
            table->col_act = col;
 801b4b8:	86a7      	strh	r7, [r4, #52]	; 0x34
            table->row_act = row;
 801b4ba:	86e1      	strh	r1, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 801b4bc:	4620      	mov	r0, r4
 801b4be:	e032      	b.n	801b526 <lv_table_event+0x19a>
            x -= obj->coords.x1;
 801b4c0:	8aa0      	ldrh	r0, [r4, #20]
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801b4c2:	2100      	movs	r1, #0
            x -= obj->coords.x1;
 801b4c4:	1a2d      	subs	r5, r5, r0
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	f7ff fb26 	bl	801ab18 <lv_obj_get_style_pad_left>
            x -= obj->coords.x1;
 801b4cc:	b2ad      	uxth	r5, r5
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801b4ce:	1a28      	subs	r0, r5, r0
 801b4d0:	e7be      	b.n	801b450 <lv_table_event+0xc4>
    else if(code == LV_EVENT_RELEASED) {
 801b4d2:	2d08      	cmp	r5, #8
 801b4d4:	d125      	bne.n	801b522 <lv_table_event+0x196>
        lv_obj_invalidate(obj);
 801b4d6:	f7e9 ff47 	bl	8005368 <lv_obj_invalidate>
        lv_indev_t * indev = lv_indev_get_act();
 801b4da:	f7e8 f8ab 	bl	8003634 <lv_indev_get_act>
        lv_obj_t * scroll_obj = lv_indev_get_scroll_obj(indev);
 801b4de:	f7e8 f933 	bl	8003748 <lv_indev_get_scroll_obj>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 801b4e2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801b4e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b4e8:	429a      	cmp	r2, r3
 801b4ea:	d10c      	bne.n	801b506 <lv_table_event+0x17a>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801b4ec:	f7e8 f8a2 	bl	8003634 <lv_indev_get_act>
 801b4f0:	f7e8 f8a6 	bl	8003640 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 801b4f4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801b4f8:	2801      	cmp	r0, #1
 801b4fa:	f47f af72 	bne.w	801b3e2 <lv_table_event+0x56>
            table->col_act = LV_TABLE_CELL_NONE;
 801b4fe:	f04f 33ff 	mov.w	r3, #4294967295
 801b502:	6363      	str	r3, [r4, #52]	; 0x34
 801b504:	e76d      	b.n	801b3e2 <lv_table_event+0x56>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 801b506:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b508:	429a      	cmp	r2, r3
 801b50a:	d0ef      	beq.n	801b4ec <lv_table_event+0x160>
 801b50c:	2800      	cmp	r0, #0
 801b50e:	d1ed      	bne.n	801b4ec <lv_table_event+0x160>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801b510:	4602      	mov	r2, r0
 801b512:	211c      	movs	r1, #28
 801b514:	4620      	mov	r0, r4
 801b516:	f7e7 fe79 	bl	800320c <lv_event_send>
            if(res != LV_RES_OK) return;
 801b51a:	2801      	cmp	r0, #1
 801b51c:	f47f af61 	bne.w	801b3e2 <lv_table_event+0x56>
 801b520:	e7e4      	b.n	801b4ec <lv_table_event+0x160>
    else if(code == LV_EVENT_FOCUSED) {
 801b522:	2d0e      	cmp	r5, #14
 801b524:	d104      	bne.n	801b530 <lv_table_event+0x1a4>
}
 801b526:	b003      	add	sp, #12
 801b528:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_invalidate(obj);
 801b52c:	f7e9 bf1c 	b.w	8005368 <lv_obj_invalidate>
    else if(code == LV_EVENT_KEY) {
 801b530:	2d0d      	cmp	r5, #13
 801b532:	d158      	bne.n	801b5e6 <lv_table_event+0x25a>
        int32_t c = *((int32_t *)lv_event_get_param(e));
 801b534:	4630      	mov	r0, r6
 801b536:	f7e7 fe91 	bl	800325c <lv_event_get_param>
        int32_t col = table->col_act;
 801b53a:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
        int32_t row = table->row_act;
 801b53c:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 801b53e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b542:	429d      	cmp	r5, r3
 801b544:	d001      	beq.n	801b54a <lv_table_event+0x1be>
 801b546:	429e      	cmp	r6, r3
 801b548:	d105      	bne.n	801b556 <lv_table_event+0x1ca>
            table->col_act = 0;
 801b54a:	2300      	movs	r3, #0
 801b54c:	6363      	str	r3, [r4, #52]	; 0x34
            scroll_to_selected_cell(obj);
 801b54e:	4620      	mov	r0, r4
 801b550:	f7ff fc27 	bl	801ada2 <scroll_to_selected_cell>
 801b554:	e7b2      	b.n	801b4bc <lv_table_event+0x130>
        if(col >= table->col_cnt) col = 0;
 801b556:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
        if(row >= table->row_cnt) row = 0;
 801b558:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
        int32_t c = *((int32_t *)lv_event_get_param(e));
 801b55a:	6800      	ldr	r0, [r0, #0]
        if(col >= table->col_cnt) col = 0;
 801b55c:	428d      	cmp	r5, r1
 801b55e:	bf34      	ite	cc
 801b560:	462a      	movcc	r2, r5
 801b562:	2200      	movcs	r2, #0
        if(row >= table->row_cnt) row = 0;
 801b564:	42be      	cmp	r6, r7
 801b566:	bf34      	ite	cc
 801b568:	4633      	movcc	r3, r6
 801b56a:	2300      	movcs	r3, #0
        if(c == LV_KEY_LEFT) col--;
 801b56c:	2814      	cmp	r0, #20
 801b56e:	d108      	bne.n	801b582 <lv_table_event+0x1f6>
 801b570:	3a01      	subs	r2, #1
        if(col >= table->col_cnt) {
 801b572:	4291      	cmp	r1, r2
 801b574:	dd0a      	ble.n	801b58c <lv_table_event+0x200>
        else if(col < 0) {
 801b576:	1c50      	adds	r0, r2, #1
 801b578:	d10f      	bne.n	801b59a <lv_table_event+0x20e>
            if(row != 0) {
 801b57a:	b393      	cbz	r3, 801b5e2 <lv_table_event+0x256>
                col = table->col_cnt - 1;
 801b57c:	1e4a      	subs	r2, r1, #1
                row--;
 801b57e:	3b01      	subs	r3, #1
 801b580:	e00b      	b.n	801b59a <lv_table_event+0x20e>
        else if(c == LV_KEY_RIGHT) col++;
 801b582:	2813      	cmp	r0, #19
 801b584:	d124      	bne.n	801b5d0 <lv_table_event+0x244>
 801b586:	3201      	adds	r2, #1
        if(col >= table->col_cnt) {
 801b588:	4291      	cmp	r1, r2
 801b58a:	dc06      	bgt.n	801b59a <lv_table_event+0x20e>
            if(row < table->row_cnt - 1) {
 801b58c:	1e7a      	subs	r2, r7, #1
 801b58e:	429a      	cmp	r2, r3
                row++;
 801b590:	bfc6      	itte	gt
 801b592:	3301      	addgt	r3, #1
                col = 0;
 801b594:	2200      	movgt	r2, #0
                col = table->col_cnt - 1;
 801b596:	f101 32ff 	addle.w	r2, r1, #4294967295
        if(row >= table->row_cnt) {
 801b59a:	429f      	cmp	r7, r3
            row = table->row_cnt - 1;
 801b59c:	bfd4      	ite	le
 801b59e:	f107 33ff 	addle.w	r3, r7, #4294967295
        else if(row < 0) {
 801b5a2:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
        if(table->col_act != col || table->row_act != row) {
 801b5a6:	4295      	cmp	r5, r2
 801b5a8:	d102      	bne.n	801b5b0 <lv_table_event+0x224>
 801b5aa:	429e      	cmp	r6, r3
 801b5ac:	f43f af19 	beq.w	801b3e2 <lv_table_event+0x56>
            table->col_act = col;
 801b5b0:	86a2      	strh	r2, [r4, #52]	; 0x34
            table->row_act = row;
 801b5b2:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 801b5b4:	4620      	mov	r0, r4
 801b5b6:	f7e9 fed7 	bl	8005368 <lv_obj_invalidate>
            scroll_to_selected_cell(obj);
 801b5ba:	4620      	mov	r0, r4
 801b5bc:	f7ff fbf1 	bl	801ada2 <scroll_to_selected_cell>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801b5c0:	2200      	movs	r2, #0
 801b5c2:	211c      	movs	r1, #28
 801b5c4:	4620      	mov	r0, r4
}
 801b5c6:	b003      	add	sp, #12
 801b5c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801b5cc:	f7e7 be1e 	b.w	800320c <lv_event_send>
        else if(c == LV_KEY_UP) row--;
 801b5d0:	2811      	cmp	r0, #17
 801b5d2:	d101      	bne.n	801b5d8 <lv_table_event+0x24c>
 801b5d4:	3b01      	subs	r3, #1
 801b5d6:	e7d7      	b.n	801b588 <lv_table_event+0x1fc>
        else if(c == LV_KEY_DOWN) row++;
 801b5d8:	2812      	cmp	r0, #18
 801b5da:	f47f af02 	bne.w	801b3e2 <lv_table_event+0x56>
 801b5de:	3301      	adds	r3, #1
 801b5e0:	e7d2      	b.n	801b588 <lv_table_event+0x1fc>
                col = 0;
 801b5e2:	461a      	mov	r2, r3
 801b5e4:	e7d9      	b.n	801b59a <lv_table_event+0x20e>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801b5e6:	2d15      	cmp	r5, #21
 801b5e8:	f47f aefb 	bne.w	801b3e2 <lv_table_event+0x56>
        draw_main(e);
 801b5ec:	4630      	mov	r0, r6
}
 801b5ee:	b003      	add	sp, #12
 801b5f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        draw_main(e);
 801b5f4:	f7ff bc7a 	b.w	801aeec <draw_main>
 801b5f8:	080205ec 	.word	0x080205ec

0801b5fc <pwd_char_hider_anim>:
 */
static void pwd_char_hider_anim(void * obj, int32_t x)
{
    LV_UNUSED(obj);
    LV_UNUSED(x);
}
 801b5fc:	4770      	bx	lr

0801b5fe <lv_textarea_destructor>:
    if(ta->pwd_tmp != NULL) {
 801b5fe:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
{
 801b600:	b510      	push	{r4, lr}
 801b602:	460c      	mov	r4, r1
    if(ta->pwd_tmp != NULL) {
 801b604:	b118      	cbz	r0, 801b60e <lv_textarea_destructor+0x10>
        lv_mem_free(ta->pwd_tmp);
 801b606:	f7f7 fead 	bl	8013364 <lv_mem_free>
        ta->pwd_tmp = NULL;
 801b60a:	2300      	movs	r3, #0
 801b60c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if(ta->pwd_bullet != NULL) {
 801b60e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b610:	b118      	cbz	r0, 801b61a <lv_textarea_destructor+0x1c>
        lv_mem_free(ta->pwd_bullet);
 801b612:	f7f7 fea7 	bl	8013364 <lv_mem_free>
        ta->pwd_bullet = NULL;
 801b616:	2300      	movs	r3, #0
 801b618:	6323      	str	r3, [r4, #48]	; 0x30
    if(ta->placeholder_txt != NULL) {
 801b61a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b61c:	b118      	cbz	r0, 801b626 <lv_textarea_destructor+0x28>
        lv_mem_free(ta->placeholder_txt);
 801b61e:	f7f7 fea1 	bl	8013364 <lv_mem_free>
        ta->placeholder_txt = NULL;
 801b622:	2300      	movs	r3, #0
 801b624:	62a3      	str	r3, [r4, #40]	; 0x28
}
 801b626:	bd10      	pop	{r4, pc}

0801b628 <cursor_blink_anim_cb>:
{
 801b628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(show != ta->cursor.show) {
 801b62a:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 801b62e:	f002 0401 	and.w	r4, r2, #1
 801b632:	428c      	cmp	r4, r1
 801b634:	d020      	beq.n	801b678 <cursor_blink_anim_cb+0x50>
        ta->cursor.show = show ? 1U : 0U;
 801b636:	3900      	subs	r1, #0
 801b638:	bf18      	it	ne
 801b63a:	2101      	movne	r1, #1
 801b63c:	f361 0200 	bfi	r2, r1, #0, #1
        area_tmp.x1 += ta->label->coords.x1;
 801b640:	6a45      	ldr	r5, [r0, #36]	; 0x24
        ta->cursor.show = show ? 1U : 0U;
 801b642:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
        area_tmp.y1 += ta->label->coords.y1;
 801b646:	8aeb      	ldrh	r3, [r5, #22]
    dest->y1 = src->y1;
 801b648:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	; 0x4a
        area_tmp.x1 += ta->label->coords.x1;
 801b64c:	8aaa      	ldrh	r2, [r5, #20]
    dest->x2 = src->x2;
 801b64e:	f9b0 704c 	ldrsh.w	r7, [r0, #76]	; 0x4c
    dest->y2 = src->y2;
 801b652:	f9b0 604e 	ldrsh.w	r6, [r0, #78]	; 0x4e
 801b656:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
        area_tmp.y1 += ta->label->coords.y1;
 801b65a:	4419      	add	r1, r3
        area_tmp.x1 += ta->label->coords.x1;
 801b65c:	4414      	add	r4, r2
        area_tmp.y1 += ta->label->coords.y1;
 801b65e:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_tmp.x2 += ta->label->coords.x1;
 801b662:	443a      	add	r2, r7
        area_tmp.y2 += ta->label->coords.y1;
 801b664:	4433      	add	r3, r6
        lv_obj_invalidate_area(obj, &area_tmp);
 801b666:	4669      	mov	r1, sp
        area_tmp.x1 += ta->label->coords.x1;
 801b668:	f8ad 4000 	strh.w	r4, [sp]
        area_tmp.x2 += ta->label->coords.x1;
 801b66c:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_tmp.y2 += ta->label->coords.y1;
 801b670:	f8ad 3006 	strh.w	r3, [sp, #6]
        lv_obj_invalidate_area(obj, &area_tmp);
 801b674:	f7e9 fe57 	bl	8005326 <lv_obj_invalidate_area>
}
 801b678:	b003      	add	sp, #12
 801b67a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b67c <start_cursor_blink>:

    return false; /*The character wasn't in the list*/
}

static void start_cursor_blink(lv_obj_t * obj)
{
 801b67c:	b530      	push	{r4, r5, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801b67e:	2264      	movs	r2, #100	; 0x64
 801b680:	b093      	sub	sp, #76	; 0x4c
 801b682:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801b686:	4604      	mov	r4, r0
 801b688:	f7eb ff00 	bl	800748c <lv_obj_get_style_prop>
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    uint32_t blink_time = lv_obj_get_style_anim_time(obj, LV_PART_CURSOR);
    if(blink_time == 0) {
 801b68c:	4605      	mov	r5, r0
 801b68e:	b958      	cbnz	r0, 801b6a8 <start_cursor_blink+0x2c>
        lv_anim_del(obj, cursor_blink_anim_cb);
 801b690:	4911      	ldr	r1, [pc, #68]	; (801b6d8 <start_cursor_blink+0x5c>)
 801b692:	4620      	mov	r0, r4
 801b694:	f7f6 ffdc 	bl	8012650 <lv_anim_del>
        ta->cursor.show = 1;
 801b698:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801b69c:	f043 0301 	orr.w	r3, r3, #1
 801b6a0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        lv_anim_set_values(&a, 1, 0);
        lv_anim_set_path_cb(&a, lv_anim_path_step);
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
        lv_anim_start(&a);
    }
}
 801b6a4:	b013      	add	sp, #76	; 0x4c
 801b6a6:	bd30      	pop	{r4, r5, pc}
        lv_anim_init(&a);
 801b6a8:	a801      	add	r0, sp, #4
 801b6aa:	f7f6 ffb7 	bl	801261c <lv_anim_init>
    a->exec_cb = exec_cb;
 801b6ae:	4b0a      	ldr	r3, [pc, #40]	; (801b6d8 <start_cursor_blink+0x5c>)
 801b6b0:	9302      	str	r3, [sp, #8]
    a->start_value = start;
 801b6b2:	2301      	movs	r3, #1
    a->current_value = start;
 801b6b4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->end_value = end;
 801b6b8:	2300      	movs	r3, #0
 801b6ba:	930b      	str	r3, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 801b6bc:	4b07      	ldr	r3, [pc, #28]	; (801b6dc <start_cursor_blink+0x60>)
 801b6be:	9308      	str	r3, [sp, #32]
        lv_anim_start(&a);
 801b6c0:	a801      	add	r0, sp, #4
    a->repeat_cnt = cnt;
 801b6c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a->var = var;
 801b6c6:	9401      	str	r4, [sp, #4]
    a->time = duration;
 801b6c8:	950c      	str	r5, [sp, #48]	; 0x30
    a->playback_time = time;
 801b6ca:	950f      	str	r5, [sp, #60]	; 0x3c
    a->repeat_cnt = cnt;
 801b6cc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801b6d0:	f7f6 ffee 	bl	80126b0 <lv_anim_start>
}
 801b6d4:	e7e6      	b.n	801b6a4 <start_cursor_blink+0x28>
 801b6d6:	bf00      	nop
 801b6d8:	0801b629 	.word	0x0801b629
 801b6dc:	080127b7 	.word	0x080127b7

0801b6e0 <lv_obj_get_style_text_font.constprop.0>:
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 801b6e0:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801b6e2:	2257      	movs	r2, #87	; 0x57
 801b6e4:	2100      	movs	r1, #0
 801b6e6:	f7eb fed1 	bl	800748c <lv_obj_get_style_prop>
}
 801b6ea:	bd08      	pop	{r3, pc}

0801b6ec <refr_cursor_area>:

static void refr_cursor_area(lv_obj_t * obj)
{
 801b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6f0:	b089      	sub	sp, #36	; 0x24
 801b6f2:	4604      	mov	r4, r0
    lv_textarea_t * ta = (lv_textarea_t *)obj;

    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801b6f4:	f7ff fff4 	bl	801b6e0 <lv_obj_get_style_text_font.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801b6f8:	2259      	movs	r2, #89	; 0x59
 801b6fa:	2100      	movs	r1, #0
 801b6fc:	4681      	mov	r9, r0
 801b6fe:	4620      	mov	r0, r4
 801b700:	f7eb fec4 	bl	800748c <lv_obj_get_style_prop>
 801b704:	9002      	str	r0, [sp, #8]
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);

    uint32_t cur_pos = lv_textarea_get_cursor_pos(obj);
    const char * txt = lv_label_get_text(ta->label);
 801b706:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return ta->cursor.pos;
 801b708:	6c65      	ldr	r5, [r4, #68]	; 0x44

    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801b70a:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 801b8f0 <refr_cursor_area+0x204>
    const char * txt = lv_label_get_text(ta->label);
 801b70e:	f7fd fda9 	bl	8019264 <lv_label_get_text>
    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 801b712:	4b75      	ldr	r3, [pc, #468]	; (801b8e8 <refr_cursor_area+0x1fc>)
    const char * txt = lv_label_get_text(ta->label);
 801b714:	9001      	str	r0, [sp, #4]
    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	4629      	mov	r1, r5
 801b71a:	4798      	blx	r3
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801b71c:	9b01      	ldr	r3, [sp, #4]
 801b71e:	eb03 0b00 	add.w	fp, r3, r0
    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 801b722:	4607      	mov	r7, r0
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801b724:	f8da 3000 	ldr.w	r3, [sl]
 801b728:	2100      	movs	r1, #0
 801b72a:	4658      	mov	r0, fp
 801b72c:	4798      	blx	r3
    }
}

static inline bool is_valid_but_non_printable_char(const uint32_t letter)
{
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 801b72e:	280d      	cmp	r0, #13
 801b730:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801b734:	4680      	mov	r8, r0
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 801b736:	f200 80d2 	bhi.w	801b8de <refr_cursor_area+0x1f2>
 801b73a:	f242 4201 	movw	r2, #9217	; 0x2401
 801b73e:	40c2      	lsrs	r2, r0
 801b740:	f012 0f01 	tst.w	r2, #1
 801b744:	bf0c      	ite	eq
 801b746:	4601      	moveq	r1, r0
 801b748:	2120      	movne	r1, #32
    lv_coord_t letter_w = lv_font_get_glyph_width(font, letter_space, IGNORE_KERNING);
 801b74a:	2200      	movs	r2, #0
 801b74c:	4648      	mov	r0, r9
 801b74e:	9303      	str	r3, [sp, #12]
 801b750:	f7f6 fc12 	bl	8011f78 <lv_font_get_glyph_width>
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 801b754:	4629      	mov	r1, r5
 801b756:	aa05      	add	r2, sp, #20
    lv_coord_t letter_w = lv_font_get_glyph_width(font, letter_space, IGNORE_KERNING);
 801b758:	b206      	sxth	r6, r0
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 801b75a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b75c:	f7fd fd8a 	bl	8019274 <lv_label_get_letter_pos>
    lv_text_align_t align = lv_obj_calculate_style_text_align(ta->label, LV_PART_MAIN, lv_label_get_text(ta->label));
 801b760:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801b762:	4628      	mov	r0, r5
 801b764:	f7fd fd7e 	bl	8019264 <lv_label_get_text>
 801b768:	2100      	movs	r1, #0
 801b76a:	4602      	mov	r2, r0
 801b76c:	4628      	mov	r0, r5
 801b76e:	f7ec fc27 	bl	8007fc0 <lv_obj_calculate_style_text_align>
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 801b772:	6a62      	ldr	r2, [r4, #36]	; 0x24
        letter_pos.y += letter_h + line_space;
 801b774:	9b03      	ldr	r3, [sp, #12]
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 801b776:	f9b2 1014 	ldrsh.w	r1, [r2, #20]
 801b77a:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
        letter_pos.y += letter_h + line_space;
 801b77e:	b29d      	uxth	r5, r3
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 801b780:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b784:	440b      	add	r3, r1
 801b786:	4433      	add	r3, r6
 801b788:	4293      	cmp	r3, r2
 801b78a:	dd30      	ble.n	801b7ee <refr_cursor_area+0x102>
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {
 801b78c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 801b790:	f011 0108 	ands.w	r1, r1, #8
 801b794:	d12b      	bne.n	801b7ee <refr_cursor_area+0x102>
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {
 801b796:	2803      	cmp	r0, #3
 801b798:	d029      	beq.n	801b7ee <refr_cursor_area+0x102>
        letter_pos.y += letter_h + line_space;
 801b79a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801b79e:	9b02      	ldr	r3, [sp, #8]
        letter_pos.x = 0;
 801b7a0:	f8ad 1014 	strh.w	r1, [sp, #20]
        letter_pos.y += letter_h + line_space;
 801b7a4:	4403      	add	r3, r0
 801b7a6:	4618      	mov	r0, r3
 801b7a8:	4428      	add	r0, r5
        letter_pos.x = 0;
 801b7aa:	9103      	str	r1, [sp, #12]
        letter_pos.y += letter_h + line_space;
 801b7ac:	f8ad 0016 	strh.w	r0, [sp, #22]
        if(letter != '\0') {
 801b7b0:	f1b8 0f00 	cmp.w	r8, #0
 801b7b4:	f000 8095 	beq.w	801b8e2 <refr_cursor_area+0x1f6>
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
 801b7b8:	4b4c      	ldr	r3, [pc, #304]	; (801b8ec <refr_cursor_area+0x200>)
 801b7ba:	4658      	mov	r0, fp
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	4798      	blx	r3
 801b7c0:	4407      	add	r7, r0
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801b7c2:	9801      	ldr	r0, [sp, #4]
 801b7c4:	9903      	ldr	r1, [sp, #12]
 801b7c6:	f8da 3000 	ldr.w	r3, [sl]
 801b7ca:	4438      	add	r0, r7
 801b7cc:	4798      	blx	r3
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 801b7ce:	280d      	cmp	r0, #13
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801b7d0:	4601      	mov	r1, r0
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 801b7d2:	d807      	bhi.n	801b7e4 <refr_cursor_area+0xf8>
 801b7d4:	f242 4301 	movw	r3, #9217	; 0x2401
 801b7d8:	40c3      	lsrs	r3, r0
            tmp = ' ';
 801b7da:	f013 0f01 	tst.w	r3, #1
 801b7de:	bf0c      	ite	eq
 801b7e0:	4601      	moveq	r1, r0
 801b7e2:	2120      	movne	r1, #32
        letter_w = lv_font_get_glyph_width(font, tmp, IGNORE_KERNING);
 801b7e4:	2200      	movs	r2, #0
 801b7e6:	4648      	mov	r0, r9
 801b7e8:	f7f6 fbc6 	bl	8011f78 <lv_font_get_glyph_width>
 801b7ec:	b206      	sxth	r6, r0
    ta->cursor.txt_byte_pos = byte_pos;
 801b7ee:	6527      	str	r7, [r4, #80]	; 0x50
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801b7f0:	2232      	movs	r2, #50	; 0x32
 801b7f2:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801b7f6:	4620      	mov	r0, r4
 801b7f8:	f7eb fe48 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b7fc:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801b7fe:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b800:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801b804:	4620      	mov	r0, r4
 801b806:	f7eb fe41 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 801b80a:	fa1f fa87 	uxth.w	sl, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b80e:	2211      	movs	r2, #17
 801b810:	fa10 f787 	uxtah	r7, r0, r7
 801b814:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801b818:	4620      	mov	r0, r4
 801b81a:	f7eb fe37 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_CURSOR) + border_width;
 801b81e:	4450      	add	r0, sl
 801b820:	fa1f f980 	uxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b824:	2212      	movs	r2, #18
 801b826:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801b82a:	4620      	mov	r0, r4
 801b82c:	f7eb fe2e 	bl	800748c <lv_obj_get_style_prop>
 801b830:	4450      	add	r0, sl
 801b832:	fa1f f880 	uxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b836:	2213      	movs	r2, #19
 801b838:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801b83c:	4620      	mov	r0, r4
 801b83e:	f7eb fe25 	bl	800748c <lv_obj_get_style_prop>
    cur_area.x1 = letter_pos.x - left;
 801b842:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    cur_area.y1 = letter_pos.y - top;
 801b846:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    dest->y1 = src->y1;
 801b84a:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
    dest->x2 = src->x2;
 801b84e:	f9b4 e04c 	ldrsh.w	lr, [r4, #76]	; 0x4c
    dest->y2 = src->y2;
 801b852:	f9b4 c04e 	ldrsh.w	ip, [r4, #78]	; 0x4e
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_CURSOR) + border_width;
 801b856:	4450      	add	r0, sl
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 801b858:	3801      	subs	r0, #1
 801b85a:	4418      	add	r0, r3
    cur_area.x1 = letter_pos.x - left;
 801b85c:	eba3 0808 	sub.w	r8, r3, r8
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801b860:	f109 39ff 	add.w	r9, r9, #4294967295
    area_tmp.x1 += ta->label->coords.x1;
 801b864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b866:	b2bf      	uxth	r7, r7
    cur_area.y1 = letter_pos.y - top;
 801b868:	1bd7      	subs	r7, r2, r7
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801b86a:	444a      	add	r2, r9
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 801b86c:	4406      	add	r6, r0
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801b86e:	4415      	add	r5, r2
    area_tmp.x1 += ta->label->coords.x1;
 801b870:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 801b874:	8a9a      	ldrh	r2, [r3, #20]
    area_tmp.y1 += ta->label->coords.y1;
 801b876:	8adb      	ldrh	r3, [r3, #22]
    area_tmp.x1 += ta->label->coords.x1;
 801b878:	4410      	add	r0, r2
    area_tmp.y1 += ta->label->coords.y1;
 801b87a:	4419      	add	r1, r3
    area_tmp.x2 += ta->label->coords.x1;
 801b87c:	4472      	add	r2, lr
    area_tmp.y2 += ta->label->coords.y1;
 801b87e:	4463      	add	r3, ip
    area_tmp.x1 += ta->label->coords.x1;
 801b880:	f8ad 0018 	strh.w	r0, [sp, #24]
    area_tmp.y1 += ta->label->coords.y1;
 801b884:	f8ad 101a 	strh.w	r1, [sp, #26]
    lv_obj_invalidate_area(obj, &area_tmp);
 801b888:	4620      	mov	r0, r4
 801b88a:	a906      	add	r1, sp, #24
    area_tmp.x2 += ta->label->coords.x1;
 801b88c:	f8ad 201c 	strh.w	r2, [sp, #28]
    area_tmp.y2 += ta->label->coords.y1;
 801b890:	f8ad 301e 	strh.w	r3, [sp, #30]
    cur_area.x1 = letter_pos.x - left;
 801b894:	fa1f f888 	uxth.w	r8, r8
    lv_obj_invalidate_area(obj, &area_tmp);
 801b898:	f7e9 fd45 	bl	8005326 <lv_obj_invalidate_area>
    cur_area.y1 = letter_pos.y - top;
 801b89c:	b2bf      	uxth	r7, r7
    area_tmp.x1 += ta->label->coords.x1;
 801b89e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dest->x1 = src->x1;
 801b8a0:	f8a4 8048 	strh.w	r8, [r4, #72]	; 0x48
    dest->y1 = src->y1;
 801b8a4:	f8a4 704a 	strh.w	r7, [r4, #74]	; 0x4a
 801b8a8:	8a9a      	ldrh	r2, [r3, #20]
    area_tmp.y1 += ta->label->coords.y1;
 801b8aa:	8adb      	ldrh	r3, [r3, #22]
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 801b8ac:	b2b6      	uxth	r6, r6
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801b8ae:	b2ad      	uxth	r5, r5
    dest->x2 = src->x2;
 801b8b0:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
    dest->y2 = src->y2;
 801b8b4:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
    area_tmp.x1 += ta->label->coords.x1;
 801b8b8:	4490      	add	r8, r2
    area_tmp.y1 += ta->label->coords.y1;
 801b8ba:	441f      	add	r7, r3
    area_tmp.x2 += ta->label->coords.x1;
 801b8bc:	4416      	add	r6, r2
    area_tmp.y2 += ta->label->coords.y1;
 801b8be:	441d      	add	r5, r3
    lv_obj_invalidate_area(obj, &area_tmp);
 801b8c0:	a906      	add	r1, sp, #24
 801b8c2:	4620      	mov	r0, r4
    area_tmp.x1 += ta->label->coords.x1;
 801b8c4:	f8ad 8018 	strh.w	r8, [sp, #24]
    area_tmp.y1 += ta->label->coords.y1;
 801b8c8:	f8ad 701a 	strh.w	r7, [sp, #26]
    area_tmp.x2 += ta->label->coords.x1;
 801b8cc:	f8ad 601c 	strh.w	r6, [sp, #28]
    area_tmp.y2 += ta->label->coords.y1;
 801b8d0:	f8ad 501e 	strh.w	r5, [sp, #30]
    lv_obj_invalidate_area(obj, &area_tmp);
 801b8d4:	f7e9 fd27 	bl	8005326 <lv_obj_invalidate_area>
}
 801b8d8:	b009      	add	sp, #36	; 0x24
 801b8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 801b8de:	4601      	mov	r1, r0
 801b8e0:	e733      	b.n	801b74a <refr_cursor_area+0x5e>
            tmp = ' ';
 801b8e2:	2120      	movs	r1, #32
 801b8e4:	e77e      	b.n	801b7e4 <refr_cursor_area+0xf8>
 801b8e6:	bf00      	nop
 801b8e8:	2000001c 	.word	0x2000001c
 801b8ec:	2000002c 	.word	0x2000002c
 801b8f0:	20000024 	.word	0x20000024

0801b8f4 <label_event_cb>:
{
 801b8f4:	b570      	push	{r4, r5, r6, lr}
 801b8f6:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 801b8f8:	f7e7 fcac 	bl	8003254 <lv_event_get_code>
 801b8fc:	4604      	mov	r4, r0
    lv_obj_t * label = lv_event_get_target(e);
 801b8fe:	4628      	mov	r0, r5
 801b900:	f7e7 fca4 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED || code == LV_EVENT_SIZE_CHANGED) {
 801b904:	3c29      	subs	r4, #41	; 0x29
    lv_obj_t * label = lv_event_get_target(e);
 801b906:	4606      	mov	r6, r0
    lv_obj_t * ta = lv_obj_get_parent(label);
 801b908:	f7ec fbb0 	bl	800806c <lv_obj_get_parent>
    if(code == LV_EVENT_STYLE_CHANGED || code == LV_EVENT_SIZE_CHANGED) {
 801b90c:	b2e4      	uxtb	r4, r4
 801b90e:	2c01      	cmp	r4, #1
    lv_obj_t * ta = lv_obj_get_parent(label);
 801b910:	4605      	mov	r5, r0
    if(code == LV_EVENT_STYLE_CHANGED || code == LV_EVENT_SIZE_CHANGED) {
 801b912:	d80b      	bhi.n	801b92c <label_event_cb+0x38>
        lv_label_set_text(label, NULL);
 801b914:	4630      	mov	r0, r6
 801b916:	2100      	movs	r1, #0
 801b918:	f7fd fbf2 	bl	8019100 <lv_label_set_text>
        refr_cursor_area(ta);
 801b91c:	4628      	mov	r0, r5
 801b91e:	f7ff fee5 	bl	801b6ec <refr_cursor_area>
        start_cursor_blink(ta);
 801b922:	4628      	mov	r0, r5
}
 801b924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        start_cursor_blink(ta);
 801b928:	f7ff bea8 	b.w	801b67c <start_cursor_blink>
}
 801b92c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b930 <lv_textarea_set_cursor_pos>:
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 801b930:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801b932:	428b      	cmp	r3, r1
{
 801b934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b936:	4604      	mov	r4, r0
 801b938:	460e      	mov	r6, r1
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 801b93a:	d06f      	beq.n	801ba1c <lv_textarea_set_cursor_pos+0xec>
    uint32_t len = _lv_txt_get_encoded_length(lv_label_get_text(ta->label));
 801b93c:	4b38      	ldr	r3, [pc, #224]	; (801ba20 <lv_textarea_set_cursor_pos+0xf0>)
 801b93e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b940:	681d      	ldr	r5, [r3, #0]
 801b942:	f7fd fc8f 	bl	8019264 <lv_label_get_text>
 801b946:	47a8      	blx	r5
    if(pos < 0) pos = len + pos;
 801b948:	2e00      	cmp	r6, #0
 801b94a:	bfb8      	it	lt
 801b94c:	1836      	addlt	r6, r6, r0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
 801b94e:	42b0      	cmp	r0, r6
 801b950:	4605      	mov	r5, r0
 801b952:	db04      	blt.n	801b95e <lv_textarea_set_cursor_pos+0x2e>
 801b954:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b958:	429e      	cmp	r6, r3
 801b95a:	bf18      	it	ne
 801b95c:	4635      	movne	r5, r6
    ta->cursor.pos = pos;
 801b95e:	6465      	str	r5, [r4, #68]	; 0x44
    lv_obj_update_layout(obj);
 801b960:	4620      	mov	r0, r4
 801b962:	f7ea fa2f 	bl	8005dc4 <lv_obj_update_layout>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801b966:	4620      	mov	r0, r4
 801b968:	f7ff feba 	bl	801b6e0 <lv_obj_get_style_text_font.constprop.0>
    lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 801b96c:	4629      	mov	r1, r5
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801b96e:	4606      	mov	r6, r0
    lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 801b970:	aa01      	add	r2, sp, #4
 801b972:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b974:	f7fd fc7e 	bl	8019274 <lv_label_get_letter_pos>
    if(cur_pos.y < lv_obj_get_scroll_top(obj)) {
 801b978:	4620      	mov	r0, r4
 801b97a:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 801b97e:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 801b982:	f7ea fc52 	bl	800622a <lv_obj_get_scroll_top>
 801b986:	4286      	cmp	r6, r0
 801b988:	da05      	bge.n	801b996 <lv_textarea_set_cursor_pos+0x66>
        lv_obj_scroll_to_y(obj, cur_pos.y, LV_ANIM_ON);
 801b98a:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801b98e:	2201      	movs	r2, #1
 801b990:	4620      	mov	r0, r4
 801b992:	f7ea fead 	bl	80066f0 <lv_obj_scroll_to_y>
    lv_coord_t h = lv_obj_get_content_height(obj);
 801b996:	4620      	mov	r0, r4
 801b998:	f7e9 faf2 	bl	8004f80 <lv_obj_get_content_height>
 801b99c:	4607      	mov	r7, r0
    if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 801b99e:	4620      	mov	r0, r4
 801b9a0:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 801b9a4:	f7ea fc41 	bl	800622a <lv_obj_get_scroll_top>
 801b9a8:	442e      	add	r6, r5
 801b9aa:	1a36      	subs	r6, r6, r0
 801b9ac:	42be      	cmp	r6, r7
 801b9ae:	dd08      	ble.n	801b9c2 <lv_textarea_set_cursor_pos+0x92>
        lv_obj_scroll_to_y(obj, cur_pos.y - h + font_h, LV_ANIM_ON);
 801b9b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801b9b4:	442b      	add	r3, r5
 801b9b6:	1bd9      	subs	r1, r3, r7
 801b9b8:	2201      	movs	r2, #1
 801b9ba:	b209      	sxth	r1, r1
 801b9bc:	4620      	mov	r0, r4
 801b9be:	f7ea fe97 	bl	80066f0 <lv_obj_scroll_to_y>
    if(cur_pos.x < lv_obj_get_scroll_left(obj)) {
 801b9c2:	4620      	mov	r0, r4
 801b9c4:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 801b9c8:	f7ea fc86 	bl	80062d8 <lv_obj_get_scroll_left>
 801b9cc:	4286      	cmp	r6, r0
 801b9ce:	da05      	bge.n	801b9dc <lv_textarea_set_cursor_pos+0xac>
        lv_obj_scroll_to_x(obj, cur_pos.x, LV_ANIM_ON);
 801b9d0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801b9d4:	2201      	movs	r2, #1
 801b9d6:	4620      	mov	r0, r4
 801b9d8:	f7ea fe74 	bl	80066c4 <lv_obj_scroll_to_x>
    lv_coord_t w = lv_obj_get_content_width(obj);
 801b9dc:	4620      	mov	r0, r4
 801b9de:	f7e9 fab9 	bl	8004f54 <lv_obj_get_content_width>
 801b9e2:	4607      	mov	r7, r0
    if(cur_pos.x + font_h - lv_obj_get_scroll_left(obj) > w) {
 801b9e4:	4620      	mov	r0, r4
 801b9e6:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 801b9ea:	f7ea fc75 	bl	80062d8 <lv_obj_get_scroll_left>
 801b9ee:	442e      	add	r6, r5
 801b9f0:	1a36      	subs	r6, r6, r0
 801b9f2:	42be      	cmp	r6, r7
 801b9f4:	dd08      	ble.n	801ba08 <lv_textarea_set_cursor_pos+0xd8>
        lv_obj_scroll_to_x(obj, cur_pos.x - w + font_h, LV_ANIM_ON);
 801b9f6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801b9fa:	440d      	add	r5, r1
 801b9fc:	1be9      	subs	r1, r5, r7
 801b9fe:	2201      	movs	r2, #1
 801ba00:	b209      	sxth	r1, r1
 801ba02:	4620      	mov	r0, r4
 801ba04:	f7ea fe5e 	bl	80066c4 <lv_obj_scroll_to_x>
    ta->cursor.valid_x = cur_pos.x;
 801ba08:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ba0c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    start_cursor_blink(obj);
 801ba10:	4620      	mov	r0, r4
 801ba12:	f7ff fe33 	bl	801b67c <start_cursor_blink>
    refr_cursor_area(obj);
 801ba16:	4620      	mov	r0, r4
 801ba18:	f7ff fe68 	bl	801b6ec <refr_cursor_area>
}
 801ba1c:	b003      	add	sp, #12
 801ba1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba20:	20000030 	.word	0x20000030

0801ba24 <lv_textarea_constructor>:
{
 801ba24:	b538      	push	{r3, r4, r5, lr}
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 801ba26:	f240 53dc 	movw	r3, #1500	; 0x5dc
 801ba2a:	878b      	strh	r3, [r1, #60]	; 0x3c
    ta->cursor.pos        = 1;
 801ba2c:	2301      	movs	r3, #1
 801ba2e:	644b      	str	r3, [r1, #68]	; 0x44
    ta->cursor.show      = 1;
 801ba30:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
 801ba34:	f023 0303 	bic.w	r3, r3, #3
 801ba38:	f043 0303 	orr.w	r3, r3, #3
 801ba3c:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
    ta->text_sel_en = 0;
 801ba40:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    ta->pwd_tmp           = NULL;
 801ba44:	2500      	movs	r5, #0
    ta->text_sel_en = 0;
 801ba46:	f023 030e 	bic.w	r3, r3, #14
 801ba4a:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
    ta->pwd_bullet        = NULL;
 801ba4e:	e9c1 550b 	strd	r5, r5, [r1, #44]	; 0x2c
    ta->max_length        = 0;
 801ba52:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    ta->placeholder_txt = NULL;
 801ba56:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    ta->cursor.valid_x    = 0;
 801ba5a:	f8a1 5040 	strh.w	r5, [r1, #64]	; 0x40
    ta->label = lv_label_create(obj);
 801ba5e:	4608      	mov	r0, r1
{
 801ba60:	460c      	mov	r4, r1
    ta->label = lv_label_create(obj);
 801ba62:	f7fd fb41 	bl	80190e8 <lv_label_create>
    lv_obj_set_width(ta->label, lv_pct(100));
 801ba66:	f242 0164 	movw	r1, #8292	; 0x2064
    ta->label = lv_label_create(obj);
 801ba6a:	6260      	str	r0, [r4, #36]	; 0x24
    lv_obj_set_width(ta->label, lv_pct(100));
 801ba6c:	f7e9 f99b 	bl	8004da6 <lv_obj_set_width>
    lv_label_set_text(ta->label, "");
 801ba70:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ba72:	490b      	ldr	r1, [pc, #44]	; (801baa0 <lv_textarea_constructor+0x7c>)
 801ba74:	f7fd fb44 	bl	8019100 <lv_label_set_text>
    lv_obj_add_event_cb(ta->label, label_event_cb, LV_EVENT_ALL, NULL);
 801ba78:	462b      	mov	r3, r5
 801ba7a:	462a      	mov	r2, r5
 801ba7c:	4909      	ldr	r1, [pc, #36]	; (801baa4 <lv_textarea_constructor+0x80>)
 801ba7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ba80:	f7e7 fc00 	bl	8003284 <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801ba84:	4620      	mov	r0, r4
 801ba86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ba8a:	f7e8 fa4b 	bl	8003f24 <lv_obj_add_flag>
    lv_textarea_set_cursor_pos(obj, 0);
 801ba8e:	4620      	mov	r0, r4
 801ba90:	4629      	mov	r1, r5
 801ba92:	f7ff ff4d 	bl	801b930 <lv_textarea_set_cursor_pos>
    start_cursor_blink(obj);
 801ba96:	4620      	mov	r0, r4
}
 801ba98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    start_cursor_blink(obj);
 801ba9c:	f7ff bdee 	b.w	801b67c <start_cursor_blink>
 801baa0:	08020471 	.word	0x08020471
 801baa4:	0801b8f5 	.word	0x0801b8f5

0801baa8 <lv_textarea_set_cursor_click_pos>:
    ta->cursor.click_pos = en ? 1U : 0U;
 801baa8:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 801baac:	f361 0341 	bfi	r3, r1, #1, #1
 801bab0:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
}
 801bab4:	4770      	bx	lr

0801bab6 <lv_textarea_set_one_line>:
    if(ta->one_line == en) return;
 801bab6:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 801baba:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 801babe:	428a      	cmp	r2, r1
{
 801bac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bac4:	4604      	mov	r4, r0
 801bac6:	460d      	mov	r5, r1
    if(ta->one_line == en) return;
 801bac8:	d027      	beq.n	801bb1a <lv_textarea_set_one_line+0x64>
    lv_coord_t width = en ? LV_SIZE_CONTENT : lv_pct(100);
 801baca:	2d00      	cmp	r5, #0
    ta->one_line = en ? 1U : 0U;
 801bacc:	f361 03c3 	bfi	r3, r1, #3, #1
    lv_coord_t width = en ? LV_SIZE_CONTENT : lv_pct(100);
 801bad0:	f242 76d1 	movw	r6, #10193	; 0x27d1
 801bad4:	f242 0164 	movw	r1, #8292	; 0x2064
 801bad8:	bf16      	itet	ne
 801bada:	460f      	movne	r7, r1
 801badc:	2700      	moveq	r7, #0
    lv_obj_set_width(ta->label, width);
 801bade:	4631      	movne	r1, r6
    ta->one_line = en ? 1U : 0U;
 801bae0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    lv_obj_set_width(ta->label, width);
 801bae4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801bae6:	f7e9 f95e 	bl	8004da6 <lv_obj_set_width>
    lv_obj_set_style_min_width(ta->label, min_width_value, 0);
 801baea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801baec:	2200      	movs	r2, #0
 801baee:	4639      	mov	r1, r7
 801baf0:	f7ec fa7c 	bl	8007fec <lv_obj_set_style_min_width>
    if(en) {
 801baf4:	b15d      	cbz	r5, 801bb0e <lv_textarea_set_one_line+0x58>
        lv_obj_set_height(obj, LV_SIZE_CONTENT);
 801baf6:	4631      	mov	r1, r6
 801baf8:	4620      	mov	r0, r4
 801bafa:	f7e9 f96b 	bl	8004dd4 <lv_obj_set_height>
    lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 801bafe:	2300      	movs	r3, #0
 801bb00:	4620      	mov	r0, r4
 801bb02:	461a      	mov	r2, r3
}
 801bb04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 801bb08:	4619      	mov	r1, r3
 801bb0a:	f7ea be07 	b.w	800671c <lv_obj_scroll_to>
        lv_obj_remove_local_style_prop(obj, LV_STYLE_HEIGHT, LV_PART_MAIN);
 801bb0e:	462a      	mov	r2, r5
 801bb10:	2104      	movs	r1, #4
 801bb12:	4620      	mov	r0, r4
 801bb14:	f7ec f867 	bl	8007be6 <lv_obj_remove_local_style_prop>
 801bb18:	e7f1      	b.n	801bafe <lv_textarea_set_one_line+0x48>
}
 801bb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bb1e <lv_textarea_get_text>:
    if(ta->pwd_mode == 0) {
 801bb1e:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 801bb22:	075b      	lsls	r3, r3, #29
 801bb24:	d402      	bmi.n	801bb2c <lv_textarea_get_text+0xe>
        txt = lv_label_get_text(ta->label);
 801bb26:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801bb28:	f7fd bb9c 	b.w	8019264 <lv_label_get_text>
}
 801bb2c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801bb2e:	4770      	bx	lr

0801bb30 <lv_textarea_get_password_bullet>:
{
 801bb30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(ta->pwd_bullet) return ta->pwd_bullet;
 801bb32:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801bb34:	b964      	cbnz	r4, 801bb50 <lv_textarea_get_password_bullet+0x20>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801bb36:	f7ff fdd3 	bl	801b6e0 <lv_obj_get_style_text_font.constprop.0>
    if(lv_font_get_glyph_dsc(font, &g, LV_TEXTAREA_PWD_BULLET_UNICODE, 0))
 801bb3a:	4623      	mov	r3, r4
 801bb3c:	f242 0222 	movw	r2, #8226	; 0x2022
 801bb40:	4669      	mov	r1, sp
 801bb42:	f7f6 f9c9 	bl	8011ed8 <lv_font_get_glyph_dsc>
        return LV_SYMBOL_BULLET;
 801bb46:	4c04      	ldr	r4, [pc, #16]	; (801bb58 <lv_textarea_get_password_bullet+0x28>)
 801bb48:	4b04      	ldr	r3, [pc, #16]	; (801bb5c <lv_textarea_get_password_bullet+0x2c>)
 801bb4a:	2800      	cmp	r0, #0
 801bb4c:	bf18      	it	ne
 801bb4e:	461c      	movne	r4, r3
}
 801bb50:	4620      	mov	r0, r4
 801bb52:	b004      	add	sp, #16
 801bb54:	bd10      	pop	{r4, pc}
 801bb56:	bf00      	nop
 801bb58:	08020608 	.word	0x08020608
 801bb5c:	0802060a 	.word	0x0802060a

0801bb60 <pwd_char_hider>:
{
 801bb60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(ta->pwd_mode == 0) {
 801bb64:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 801bb68:	075b      	lsls	r3, r3, #29
{
 801bb6a:	4604      	mov	r4, r0
    if(ta->pwd_mode == 0) {
 801bb6c:	d531      	bpl.n	801bbd2 <pwd_char_hider+0x72>
    char * txt = lv_label_get_text(ta->label);
 801bb6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801bb70:	f7fd fb78 	bl	8019264 <lv_label_get_text>
    uint32_t enc_len = _lv_txt_get_encoded_length(txt);
 801bb74:	4b18      	ldr	r3, [pc, #96]	; (801bbd8 <pwd_char_hider+0x78>)
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	4798      	blx	r3
    if(enc_len == 0) return;
 801bb7a:	4606      	mov	r6, r0
 801bb7c:	b348      	cbz	r0, 801bbd2 <pwd_char_hider+0x72>
    const char * bullet = lv_textarea_get_password_bullet(obj);
 801bb7e:	4620      	mov	r0, r4
 801bb80:	f7ff ffd6 	bl	801bb30 <lv_textarea_get_password_bullet>
 801bb84:	4681      	mov	r9, r0
    const size_t bullet_len = strlen(bullet);
 801bb86:	f7e4 fb2d 	bl	80001e4 <strlen>
    char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 801bb8a:	fb00 fa06 	mul.w	sl, r0, r6
    const size_t bullet_len = strlen(bullet);
 801bb8e:	4607      	mov	r7, r0
    char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 801bb90:	f10a 0001 	add.w	r0, sl, #1
 801bb94:	f7f7 fc18 	bl	80133c8 <lv_mem_buf_get>
    for(i = 0; i < enc_len; i++) {
 801bb98:	f04f 0800 	mov.w	r8, #0
    char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 801bb9c:	4605      	mov	r5, r0
    for(i = 0; i < enc_len; i++) {
 801bb9e:	4683      	mov	fp, r0
        lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
 801bba0:	4658      	mov	r0, fp
 801bba2:	463a      	mov	r2, r7
 801bba4:	4649      	mov	r1, r9
    for(i = 0; i < enc_len; i++) {
 801bba6:	f108 0801 	add.w	r8, r8, #1
        lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
 801bbaa:	f7f7 fc87 	bl	80134bc <lv_memcpy>
    for(i = 0; i < enc_len; i++) {
 801bbae:	4546      	cmp	r6, r8
 801bbb0:	44bb      	add	fp, r7
 801bbb2:	d1f5      	bne.n	801bba0 <pwd_char_hider+0x40>
    txt_tmp[i * bullet_len] = '\0';
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	f805 300a 	strb.w	r3, [r5, sl]
    lv_label_set_text(ta->label, txt_tmp);
 801bbba:	4629      	mov	r1, r5
 801bbbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bbbe:	f7fd fa9f 	bl	8019100 <lv_label_set_text>
    lv_mem_buf_release(txt_tmp);
 801bbc2:	4628      	mov	r0, r5
 801bbc4:	f7f7 fc4c 	bl	8013460 <lv_mem_buf_release>
    refr_cursor_area(obj);
 801bbc8:	4620      	mov	r0, r4
}
 801bbca:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    refr_cursor_area(obj);
 801bbce:	f7ff bd8d 	b.w	801b6ec <refr_cursor_area>
}
 801bbd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbd6:	bf00      	nop
 801bbd8:	20000030 	.word	0x20000030

0801bbdc <auto_hide_characters>:
{
 801bbdc:	b510      	push	{r4, lr}
    if(ta->pwd_show_time == 0) {
 801bbde:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
{
 801bbe0:	b092      	sub	sp, #72	; 0x48
 801bbe2:	4604      	mov	r4, r0
    if(ta->pwd_show_time == 0) {
 801bbe4:	b923      	cbnz	r3, 801bbf0 <auto_hide_characters+0x14>
}
 801bbe6:	b012      	add	sp, #72	; 0x48
 801bbe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pwd_char_hider(obj);
 801bbec:	f7ff bfb8 	b.w	801bb60 <pwd_char_hider>
        lv_anim_init(&a);
 801bbf0:	a801      	add	r0, sp, #4
 801bbf2:	f7f6 fd13 	bl	801261c <lv_anim_init>
    a->exec_cb = exec_cb;
 801bbf6:	4b09      	ldr	r3, [pc, #36]	; (801bc1c <auto_hide_characters+0x40>)
 801bbf8:	9302      	str	r3, [sp, #8]
    a->time = duration;
 801bbfa:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 801bbfc:	930c      	str	r3, [sp, #48]	; 0x30
    a->start_value = start;
 801bbfe:	2300      	movs	r3, #0
    a->current_value = start;
 801bc00:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a->end_value = end;
 801bc04:	2301      	movs	r3, #1
 801bc06:	930b      	str	r3, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 801bc08:	4b05      	ldr	r3, [pc, #20]	; (801bc20 <auto_hide_characters+0x44>)
 801bc0a:	9308      	str	r3, [sp, #32]
        lv_anim_start(&a);
 801bc0c:	a801      	add	r0, sp, #4
    a->ready_cb = ready_cb;
 801bc0e:	4b05      	ldr	r3, [pc, #20]	; (801bc24 <auto_hide_characters+0x48>)
    a->var = var;
 801bc10:	9401      	str	r4, [sp, #4]
    a->ready_cb = ready_cb;
 801bc12:	9304      	str	r3, [sp, #16]
 801bc14:	f7f6 fd4c 	bl	80126b0 <lv_anim_start>
}
 801bc18:	b012      	add	sp, #72	; 0x48
 801bc1a:	bd10      	pop	{r4, pc}
 801bc1c:	0801b5fd 	.word	0x0801b5fd
 801bc20:	080127b7 	.word	0x080127b7
 801bc24:	0801bc29 	.word	0x0801bc29

0801bc28 <pwd_char_hider_anim_ready>:
    pwd_char_hider(obj);
 801bc28:	6800      	ldr	r0, [r0, #0]
 801bc2a:	f7ff bf99 	b.w	801bb60 <pwd_char_hider>

0801bc2e <lv_textarea_clear_selection>:
{
 801bc2e:	b538      	push	{r3, r4, r5, lr}
 801bc30:	4604      	mov	r4, r0
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 801bc32:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801bc34:	f7fd fcea 	bl	801960c <lv_label_get_text_selection_start>
 801bc38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bc3c:	4298      	cmp	r0, r3
 801bc3e:	4605      	mov	r5, r0
 801bc40:	d00b      	beq.n	801bc5a <lv_textarea_clear_selection+0x2c>
        lv_label_set_text_sel_start(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 801bc42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bc44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bc48:	f7fd fb06 	bl	8019258 <lv_label_set_text_sel_start>
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 801bc4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bc4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
}
 801bc52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 801bc56:	f7fd bb02 	b.w	801925e <lv_label_set_text_sel_end>
       lv_label_get_text_selection_end(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL) {
 801bc5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bc5c:	f7fd fcd8 	bl	8019610 <lv_label_get_text_selection_end>
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 801bc60:	42a8      	cmp	r0, r5
 801bc62:	d1ee      	bne.n	801bc42 <lv_textarea_clear_selection+0x14>
}
 801bc64:	bd38      	pop	{r3, r4, r5, pc}
	...

0801bc68 <lv_textarea_add_text>:
{
 801bc68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bc6a:	4604      	mov	r4, r0
    LV_ASSERT_NULL(txt);
 801bc6c:	460d      	mov	r5, r1
 801bc6e:	b901      	cbnz	r1, 801bc72 <lv_textarea_add_text+0xa>
 801bc70:	e7fe      	b.n	801bc70 <lv_textarea_add_text+0x8>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 801bc72:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 801bc76:	075a      	lsls	r2, r3, #29
 801bc78:	d501      	bpl.n	801bc7e <lv_textarea_add_text+0x16>
 801bc7a:	f7ff ff71 	bl	801bb60 <pwd_char_hider>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 801bc7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bc80:	b90b      	cbnz	r3, 801bc86 <lv_textarea_add_text+0x1e>
 801bc82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bc84:	b19b      	cbz	r3, 801bcae <lv_textarea_add_text+0x46>
        uint32_t i = 0;
 801bc86:	2300      	movs	r3, #0
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 801bc88:	4e2b      	ldr	r6, [pc, #172]	; (801bd38 <lv_textarea_add_text+0xd0>)
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 801bc8a:	4f2c      	ldr	r7, [pc, #176]	; (801bd3c <lv_textarea_add_text+0xd4>)
        uint32_t i = 0;
 801bc8c:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 801bc8e:	9b01      	ldr	r3, [sp, #4]
 801bc90:	5ceb      	ldrb	r3, [r5, r3]
 801bc92:	b90b      	cbnz	r3, 801bc98 <lv_textarea_add_text+0x30>
}
 801bc94:	b003      	add	sp, #12
 801bc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 801bc98:	a901      	add	r1, sp, #4
 801bc9a:	6833      	ldr	r3, [r6, #0]
 801bc9c:	4628      	mov	r0, r5
 801bc9e:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 801bca0:	683b      	ldr	r3, [r7, #0]
 801bca2:	4798      	blx	r3
 801bca4:	4601      	mov	r1, r0
 801bca6:	4620      	mov	r0, r4
 801bca8:	f000 f86a 	bl	801bd80 <lv_textarea_add_char>
 801bcac:	e7ef      	b.n	801bc8e <lv_textarea_add_text+0x26>
    lv_res_t res = insert_handler(obj, txt);
 801bcae:	4629      	mov	r1, r5
 801bcb0:	4620      	mov	r0, r4
 801bcb2:	f000 f847 	bl	801bd44 <insert_handler>
    if(res != LV_RES_OK) return;
 801bcb6:	2801      	cmp	r0, #1
 801bcb8:	d1ec      	bne.n	801bc94 <lv_textarea_add_text+0x2c>
    if(ta->placeholder_txt) {
 801bcba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801bcbc:	b13b      	cbz	r3, 801bcce <lv_textarea_add_text+0x66>
        const char * txt_act = lv_label_get_text(ta->label);
 801bcbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bcc0:	f7fd fad0 	bl	8019264 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 801bcc4:	7803      	ldrb	r3, [r0, #0]
 801bcc6:	b913      	cbnz	r3, 801bcce <lv_textarea_add_text+0x66>
 801bcc8:	4620      	mov	r0, r4
 801bcca:	f7e9 fb4d 	bl	8005368 <lv_obj_invalidate>
    lv_label_ins_text(ta->label, ta->cursor.pos, txt);
 801bcce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801bcd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bcd2:	462a      	mov	r2, r5
 801bcd4:	f7fd fc9e 	bl	8019614 <lv_label_ins_text>
    lv_textarea_clear_selection(obj);
 801bcd8:	4620      	mov	r0, r4
 801bcda:	f7ff ffa8 	bl	801bc2e <lv_textarea_clear_selection>
    if(ta->pwd_mode) {
 801bcde:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801bce2:	075b      	lsls	r3, r3, #29
 801bce4:	d516      	bpl.n	801bd14 <lv_textarea_add_text+0xac>
        size_t realloc_size = strlen(ta->pwd_tmp) + strlen(txt) + 1;
 801bce6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801bce8:	4638      	mov	r0, r7
 801bcea:	f7e4 fa7b 	bl	80001e4 <strlen>
 801bcee:	4606      	mov	r6, r0
 801bcf0:	4628      	mov	r0, r5
 801bcf2:	f7e4 fa77 	bl	80001e4 <strlen>
 801bcf6:	4430      	add	r0, r6
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, realloc_size);
 801bcf8:	1c41      	adds	r1, r0, #1
 801bcfa:	4638      	mov	r0, r7
 801bcfc:	f7f7 fb4a 	bl	8013394 <lv_mem_realloc>
 801bd00:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 801bd02:	b900      	cbnz	r0, 801bd06 <lv_textarea_add_text+0x9e>
 801bd04:	e7fe      	b.n	801bd04 <lv_textarea_add_text+0x9c>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, txt);
 801bd06:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801bd08:	462a      	mov	r2, r5
 801bd0a:	f7f9 fa2b 	bl	8015164 <_lv_txt_ins>
        auto_hide_characters(obj);
 801bd0e:	4620      	mov	r0, r4
 801bd10:	f7ff ff64 	bl	801bbdc <auto_hide_characters>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 801bd14:	4b0a      	ldr	r3, [pc, #40]	; (801bd40 <lv_textarea_add_text+0xd8>)
    return ta->cursor.pos;
 801bd16:	6c66      	ldr	r6, [r4, #68]	; 0x44
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	4628      	mov	r0, r5
 801bd1c:	4798      	blx	r3
 801bd1e:	1981      	adds	r1, r0, r6
 801bd20:	4620      	mov	r0, r4
 801bd22:	f7ff fe05 	bl	801b930 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801bd26:	2200      	movs	r2, #0
 801bd28:	211c      	movs	r1, #28
 801bd2a:	4620      	mov	r0, r4
}
 801bd2c:	b003      	add	sp, #12
 801bd2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801bd32:	f7e7 ba6b 	b.w	800320c <lv_event_send>
 801bd36:	bf00      	nop
 801bd38:	20000024 	.word	0x20000024
 801bd3c:	20000034 	.word	0x20000034
 801bd40:	20000030 	.word	0x20000030

0801bd44 <insert_handler>:
{
 801bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ta_insert_replace = NULL;
 801bd46:	4c0d      	ldr	r4, [pc, #52]	; (801bd7c <insert_handler+0x38>)
    lv_event_send(obj, LV_EVENT_INSERT, (char *)txt);
 801bd48:	460a      	mov	r2, r1
{
 801bd4a:	460d      	mov	r5, r1
    ta_insert_replace = NULL;
 801bd4c:	2700      	movs	r7, #0
    lv_event_send(obj, LV_EVENT_INSERT, (char *)txt);
 801bd4e:	211d      	movs	r1, #29
    ta_insert_replace = NULL;
 801bd50:	6027      	str	r7, [r4, #0]
{
 801bd52:	4606      	mov	r6, r0
    lv_event_send(obj, LV_EVENT_INSERT, (char *)txt);
 801bd54:	f7e7 fa5a 	bl	800320c <lv_event_send>
    if(ta_insert_replace && ta_insert_replace[0] == '\0')
 801bd58:	6824      	ldr	r4, [r4, #0]
 801bd5a:	b164      	cbz	r4, 801bd76 <insert_handler+0x32>
 801bd5c:	7820      	ldrb	r0, [r4, #0]
 801bd5e:	b148      	cbz	r0, 801bd74 <insert_handler+0x30>
        if(strcmp(ta_insert_replace, txt)) {
 801bd60:	4629      	mov	r1, r5
 801bd62:	4620      	mov	r0, r4
 801bd64:	f7e4 fa34 	bl	80001d0 <strcmp>
 801bd68:	b128      	cbz	r0, 801bd76 <insert_handler+0x32>
            lv_textarea_add_text(obj, ta_insert_replace);
 801bd6a:	4630      	mov	r0, r6
 801bd6c:	4621      	mov	r1, r4
 801bd6e:	f7ff ff7b 	bl	801bc68 <lv_textarea_add_text>
            return LV_RES_INV;
 801bd72:	4638      	mov	r0, r7
}
 801bd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_RES_OK;
 801bd76:	2001      	movs	r0, #1
 801bd78:	e7fc      	b.n	801bd74 <insert_handler+0x30>
 801bd7a:	bf00      	nop
 801bd7c:	20006f08 	.word	0x20006f08

0801bd80 <lv_textarea_add_char>:
{
 801bd80:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(ta->one_line && (c == '\n' || c == '\r')) {
 801bd82:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
{
 801bd86:	b087      	sub	sp, #28
 801bd88:	4604      	mov	r4, r0
    if(ta->one_line && (c == '\n' || c == '\r')) {
 801bd8a:	0718      	lsls	r0, r3, #28
{
 801bd8c:	9101      	str	r1, [sp, #4]
    if(ta->one_line && (c == '\n' || c == '\r')) {
 801bd8e:	d503      	bpl.n	801bd98 <lv_textarea_add_char+0x18>
 801bd90:	290a      	cmp	r1, #10
 801bd92:	d053      	beq.n	801be3c <lv_textarea_add_char+0xbc>
 801bd94:	290d      	cmp	r1, #13
 801bd96:	d051      	beq.n	801be3c <lv_textarea_add_char+0xbc>
    u32_buf[0] = c;
 801bd98:	9104      	str	r1, [sp, #16]
    u32_buf[1] = 0;
 801bd9a:	2500      	movs	r5, #0
    lv_res_t res = insert_handler(obj, letter_buf);
 801bd9c:	a904      	add	r1, sp, #16
 801bd9e:	4620      	mov	r0, r4
    u32_buf[1] = 0;
 801bda0:	9505      	str	r5, [sp, #20]
    lv_res_t res = insert_handler(obj, letter_buf);
 801bda2:	f7ff ffcf 	bl	801bd44 <insert_handler>
    if(res != LV_RES_OK) return;
 801bda6:	2801      	cmp	r0, #1
 801bda8:	d148      	bne.n	801be3c <lv_textarea_add_char+0xbc>
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
 801bdaa:	4e31      	ldr	r6, [pc, #196]	; (801be70 <lv_textarea_add_char+0xf0>)
 801bdac:	4629      	mov	r1, r5
 801bdae:	6833      	ldr	r3, [r6, #0]
 801bdb0:	a801      	add	r0, sp, #4
 801bdb2:	4798      	blx	r3
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 801bdb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
 801bdb6:	4605      	mov	r5, r0
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 801bdb8:	b143      	cbz	r3, 801bdcc <lv_textarea_add_char+0x4c>
 801bdba:	4b2e      	ldr	r3, [pc, #184]	; (801be74 <lv_textarea_add_char+0xf4>)
 801bdbc:	4620      	mov	r0, r4
 801bdbe:	681f      	ldr	r7, [r3, #0]
 801bdc0:	f7ff fead 	bl	801bb1e <lv_textarea_get_text>
 801bdc4:	47b8      	blx	r7
 801bdc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bdc8:	4298      	cmp	r0, r3
 801bdca:	d237      	bcs.n	801be3c <lv_textarea_add_char+0xbc>
    if(ta->accepted_chars == NULL || ta->accepted_chars[0] == '\0') return true;
 801bdcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bdce:	bb63      	cbnz	r3, 801be2a <lv_textarea_add_char+0xaa>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 801bdd0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801bdd4:	075a      	lsls	r2, r3, #29
 801bdd6:	d502      	bpl.n	801bdde <lv_textarea_add_char+0x5e>
 801bdd8:	4620      	mov	r0, r4
 801bdda:	f7ff fec1 	bl	801bb60 <pwd_char_hider>
    if(ta->placeholder_txt) {
 801bdde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801bde0:	b13b      	cbz	r3, 801bdf2 <lv_textarea_add_char+0x72>
        const char * txt = lv_label_get_text(ta->label);
 801bde2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bde4:	f7fd fa3e 	bl	8019264 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 801bde8:	7803      	ldrb	r3, [r0, #0]
 801bdea:	b913      	cbnz	r3, 801bdf2 <lv_textarea_add_char+0x72>
 801bdec:	4620      	mov	r0, r4
 801bdee:	f7e9 fabb 	bl	8005368 <lv_obj_invalidate>
    lv_label_ins_text(ta->label, ta->cursor.pos, letter_buf); /*Insert the character*/
 801bdf2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801bdf4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bdf6:	aa04      	add	r2, sp, #16
 801bdf8:	f7fd fc0c 	bl	8019614 <lv_label_ins_text>
    lv_textarea_clear_selection(obj); /*Clear selection*/
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	f7ff ff16 	bl	801bc2e <lv_textarea_clear_selection>
    if(ta->pwd_mode) {
 801be02:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801be06:	075b      	lsls	r3, r3, #29
 801be08:	d527      	bpl.n	801be5a <lv_textarea_add_char+0xda>
        size_t realloc_size = strlen(ta->pwd_tmp) + strlen(letter_buf) + 1;
 801be0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801be0c:	4630      	mov	r0, r6
 801be0e:	f7e4 f9e9 	bl	80001e4 <strlen>
 801be12:	4605      	mov	r5, r0
 801be14:	a804      	add	r0, sp, #16
 801be16:	f7e4 f9e5 	bl	80001e4 <strlen>
 801be1a:	4428      	add	r0, r5
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, realloc_size);
 801be1c:	1c41      	adds	r1, r0, #1
 801be1e:	4630      	mov	r0, r6
 801be20:	f7f7 fab8 	bl	8013394 <lv_mem_realloc>
 801be24:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 801be26:	b988      	cbnz	r0, 801be4c <lv_textarea_add_char+0xcc>
 801be28:	e7fe      	b.n	801be28 <lv_textarea_add_char+0xa8>
    if(ta->accepted_chars == NULL || ta->accepted_chars[0] == '\0') return true;
 801be2a:	781b      	ldrb	r3, [r3, #0]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d0cf      	beq.n	801bdd0 <lv_textarea_add_char+0x50>
    uint32_t i = 0;
 801be30:	2300      	movs	r3, #0
 801be32:	9303      	str	r3, [sp, #12]
    while(ta->accepted_chars[i] != '\0') {
 801be34:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801be36:	9b03      	ldr	r3, [sp, #12]
 801be38:	5cc3      	ldrb	r3, [r0, r3]
 801be3a:	b90b      	cbnz	r3, 801be40 <lv_textarea_add_char+0xc0>
}
 801be3c:	b007      	add	sp, #28
 801be3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t a = _lv_txt_encoded_next(ta->accepted_chars, &i);
 801be40:	6833      	ldr	r3, [r6, #0]
 801be42:	a903      	add	r1, sp, #12
 801be44:	4798      	blx	r3
        if(a == c) return true; /*Accepted*/
 801be46:	4285      	cmp	r5, r0
 801be48:	d1f4      	bne.n	801be34 <lv_textarea_add_char+0xb4>
 801be4a:	e7c1      	b.n	801bdd0 <lv_textarea_add_char+0x50>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, (const char *)letter_buf);
 801be4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801be4e:	aa04      	add	r2, sp, #16
 801be50:	f7f9 f988 	bl	8015164 <_lv_txt_ins>
        auto_hide_characters(obj);
 801be54:	4620      	mov	r0, r4
 801be56:	f7ff fec1 	bl	801bbdc <auto_hide_characters>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + 1);
 801be5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801be5c:	4620      	mov	r0, r4
 801be5e:	3101      	adds	r1, #1
 801be60:	f7ff fd66 	bl	801b930 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801be64:	2200      	movs	r2, #0
 801be66:	211c      	movs	r1, #28
 801be68:	4620      	mov	r0, r4
 801be6a:	f7e7 f9cf 	bl	800320c <lv_event_send>
 801be6e:	e7e5      	b.n	801be3c <lv_textarea_add_char+0xbc>
 801be70:	20000024 	.word	0x20000024
 801be74:	20000030 	.word	0x20000030

0801be78 <lv_textarea_del_char>:
    if(cur_pos == 0) return;
 801be78:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 801be7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801be7c:	4604      	mov	r4, r0
    if(cur_pos == 0) return;
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d040      	beq.n	801bf04 <lv_textarea_del_char+0x8c>
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 801be82:	237f      	movs	r3, #127	; 0x7f
    lv_res_t res = insert_handler(obj, del_buf);
 801be84:	a901      	add	r1, sp, #4
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 801be86:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_res_t res = insert_handler(obj, del_buf);
 801be8a:	f7ff ff5b 	bl	801bd44 <insert_handler>
    if(res != LV_RES_OK) return;
 801be8e:	2801      	cmp	r0, #1
    lv_res_t res = insert_handler(obj, del_buf);
 801be90:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return;
 801be92:	d137      	bne.n	801bf04 <lv_textarea_del_char+0x8c>
    char * label_txt = lv_label_get_text(ta->label);
 801be94:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801be96:	f7fd f9e5 	bl	8019264 <lv_label_get_text>
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 801be9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
    char * label_txt = lv_label_get_text(ta->label);
 801be9c:	4606      	mov	r6, r0
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 801be9e:	462a      	mov	r2, r5
 801bea0:	3901      	subs	r1, #1
 801bea2:	f7f9 f98b 	bl	80151bc <_lv_txt_cut>
    lv_label_set_text(ta->label, label_txt);
 801bea6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bea8:	4631      	mov	r1, r6
 801beaa:	f7fd f929 	bl	8019100 <lv_label_set_text>
    lv_textarea_clear_selection(obj);
 801beae:	4620      	mov	r0, r4
 801beb0:	f7ff febd 	bl	801bc2e <lv_textarea_clear_selection>
    if(ta->placeholder_txt) {
 801beb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801beb6:	b13b      	cbz	r3, 801bec8 <lv_textarea_del_char+0x50>
        const char * txt = lv_label_get_text(ta->label);
 801beb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801beba:	f7fd f9d3 	bl	8019264 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 801bebe:	7803      	ldrb	r3, [r0, #0]
 801bec0:	b913      	cbnz	r3, 801bec8 <lv_textarea_del_char+0x50>
 801bec2:	4620      	mov	r0, r4
 801bec4:	f7e9 fa50 	bl	8005368 <lv_obj_invalidate>
    if(ta->pwd_mode) {
 801bec8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801becc:	075b      	lsls	r3, r3, #29
 801bece:	d50f      	bpl.n	801bef0 <lv_textarea_del_char+0x78>
        _lv_txt_cut(ta->pwd_tmp, ta->cursor.pos - 1, 1);
 801bed0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801bed2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801bed4:	3901      	subs	r1, #1
 801bed6:	2201      	movs	r2, #1
 801bed8:	f7f9 f970 	bl	80151bc <_lv_txt_cut>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 801bedc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 801bede:	4628      	mov	r0, r5
 801bee0:	f7e4 f980 	bl	80001e4 <strlen>
 801bee4:	1c41      	adds	r1, r0, #1
 801bee6:	4628      	mov	r0, r5
 801bee8:	f7f7 fa54 	bl	8013394 <lv_mem_realloc>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 801beec:	b160      	cbz	r0, 801bf08 <lv_textarea_del_char+0x90>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 801beee:	62e0      	str	r0, [r4, #44]	; 0x2c
    lv_textarea_set_cursor_pos(obj, ta->cursor.pos - 1);
 801bef0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801bef2:	4620      	mov	r0, r4
 801bef4:	3901      	subs	r1, #1
 801bef6:	f7ff fd1b 	bl	801b930 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801befa:	2200      	movs	r2, #0
 801befc:	211c      	movs	r1, #28
 801befe:	4620      	mov	r0, r4
 801bf00:	f7e7 f984 	bl	800320c <lv_event_send>
}
 801bf04:	b002      	add	sp, #8
 801bf06:	bd70      	pop	{r4, r5, r6, pc}
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 801bf08:	e7fe      	b.n	801bf08 <lv_textarea_del_char+0x90>

0801bf0a <lv_textarea_del_char_forward>:
{
 801bf0a:	b538      	push	{r3, r4, r5, lr}
    return ta->cursor.pos;
 801bf0c:	6c45      	ldr	r5, [r0, #68]	; 0x44
{
 801bf0e:	4604      	mov	r4, r0
    lv_textarea_set_cursor_pos(obj, cp + 1);
 801bf10:	1c69      	adds	r1, r5, #1
 801bf12:	f7ff fd0d 	bl	801b930 <lv_textarea_set_cursor_pos>
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 801bf16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801bf18:	429d      	cmp	r5, r3
 801bf1a:	d004      	beq.n	801bf26 <lv_textarea_del_char_forward+0x1c>
 801bf1c:	4620      	mov	r0, r4
}
 801bf1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 801bf22:	f7ff bfa9 	b.w	801be78 <lv_textarea_del_char>
}
 801bf26:	bd38      	pop	{r3, r4, r5, pc}

0801bf28 <lv_textarea_set_text>:
{
 801bf28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bf2a:	4604      	mov	r4, r0
    LV_ASSERT_NULL(txt);
 801bf2c:	460d      	mov	r5, r1
 801bf2e:	b901      	cbnz	r1, 801bf32 <lv_textarea_set_text+0xa>
 801bf30:	e7fe      	b.n	801bf30 <lv_textarea_set_text+0x8>
    lv_textarea_clear_selection(obj);
 801bf32:	f7ff fe7c 	bl	801bc2e <lv_textarea_clear_selection>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 801bf36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bf38:	b913      	cbnz	r3, 801bf40 <lv_textarea_set_text+0x18>
 801bf3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d03b      	beq.n	801bfb8 <lv_textarea_set_text+0x90>
        lv_label_set_text(ta->label, "");
 801bf40:	4929      	ldr	r1, [pc, #164]	; (801bfe8 <lv_textarea_set_text+0xc0>)
 801bf42:	6a60      	ldr	r0, [r4, #36]	; 0x24
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 801bf44:	4e29      	ldr	r6, [pc, #164]	; (801bfec <lv_textarea_set_text+0xc4>)
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 801bf46:	4f2a      	ldr	r7, [pc, #168]	; (801bff0 <lv_textarea_set_text+0xc8>)
        lv_label_set_text(ta->label, "");
 801bf48:	f7fd f8da 	bl	8019100 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 801bf4c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801bf50:	4620      	mov	r0, r4
 801bf52:	f7ff fced 	bl	801b930 <lv_textarea_set_cursor_pos>
        if(ta->pwd_mode) {
 801bf56:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801bf5a:	f013 0f04 	tst.w	r3, #4
            ta->pwd_tmp[0] = '\0'; /*Clear the password too*/
 801bf5e:	bf18      	it	ne
 801bf60:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 801bf62:	f04f 0300 	mov.w	r3, #0
 801bf66:	bf18      	it	ne
 801bf68:	7013      	strbne	r3, [r2, #0]
        uint32_t i = 0;
 801bf6a:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 801bf6c:	9b01      	ldr	r3, [sp, #4]
 801bf6e:	5ceb      	ldrb	r3, [r5, r3]
 801bf70:	b9bb      	cbnz	r3, 801bfa2 <lv_textarea_set_text+0x7a>
    if(ta->placeholder_txt) {
 801bf72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801bf74:	b13b      	cbz	r3, 801bf86 <lv_textarea_set_text+0x5e>
        const char * txt_act = lv_label_get_text(ta->label);
 801bf76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bf78:	f7fd f974 	bl	8019264 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 801bf7c:	7803      	ldrb	r3, [r0, #0]
 801bf7e:	b913      	cbnz	r3, 801bf86 <lv_textarea_set_text+0x5e>
 801bf80:	4620      	mov	r0, r4
 801bf82:	f7e9 f9f1 	bl	8005368 <lv_obj_invalidate>
    if(ta->pwd_mode) {
 801bf86:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801bf8a:	075b      	lsls	r3, r3, #29
 801bf8c:	d524      	bpl.n	801bfd8 <lv_textarea_set_text+0xb0>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(txt) + 1);
 801bf8e:	4628      	mov	r0, r5
 801bf90:	f7e4 f928 	bl	80001e4 <strlen>
 801bf94:	1c41      	adds	r1, r0, #1
 801bf96:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801bf98:	f7f7 f9fc 	bl	8013394 <lv_mem_realloc>
 801bf9c:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 801bf9e:	b9a8      	cbnz	r0, 801bfcc <lv_textarea_set_text+0xa4>
 801bfa0:	e7fe      	b.n	801bfa0 <lv_textarea_set_text+0x78>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 801bfa2:	a901      	add	r1, sp, #4
 801bfa4:	6833      	ldr	r3, [r6, #0]
 801bfa6:	4628      	mov	r0, r5
 801bfa8:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 801bfaa:	683b      	ldr	r3, [r7, #0]
 801bfac:	4798      	blx	r3
 801bfae:	4601      	mov	r1, r0
 801bfb0:	4620      	mov	r0, r4
 801bfb2:	f7ff fee5 	bl	801bd80 <lv_textarea_add_char>
 801bfb6:	e7d9      	b.n	801bf6c <lv_textarea_set_text+0x44>
        lv_label_set_text(ta->label, txt);
 801bfb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bfba:	4629      	mov	r1, r5
 801bfbc:	f7fd f8a0 	bl	8019100 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 801bfc0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801bfc4:	4620      	mov	r0, r4
 801bfc6:	f7ff fcb3 	bl	801b930 <lv_textarea_set_cursor_pos>
 801bfca:	e7d2      	b.n	801bf72 <lv_textarea_set_text+0x4a>
        strcpy(ta->pwd_tmp, txt);
 801bfcc:	4629      	mov	r1, r5
 801bfce:	f002 f897 	bl	801e100 <strcpy>
        auto_hide_characters(obj);
 801bfd2:	4620      	mov	r0, r4
 801bfd4:	f7ff fe02 	bl	801bbdc <auto_hide_characters>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801bfd8:	2200      	movs	r2, #0
 801bfda:	211c      	movs	r1, #28
 801bfdc:	4620      	mov	r0, r4
}
 801bfde:	b003      	add	sp, #12
 801bfe0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801bfe4:	f7e7 b912 	b.w	800320c <lv_event_send>
 801bfe8:	08020471 	.word	0x08020471
 801bfec:	20000024 	.word	0x20000024
 801bff0:	20000034 	.word	0x20000034

0801bff4 <lv_textarea_cursor_right>:
    cp++;
 801bff4:	6c41      	ldr	r1, [r0, #68]	; 0x44
    lv_textarea_set_cursor_pos(obj, cp);
 801bff6:	3101      	adds	r1, #1
 801bff8:	f7ff bc9a 	b.w	801b930 <lv_textarea_set_cursor_pos>

0801bffc <lv_textarea_cursor_left>:
    return ta->cursor.pos;
 801bffc:	6c41      	ldr	r1, [r0, #68]	; 0x44
    if(cp > 0) {
 801bffe:	b111      	cbz	r1, 801c006 <lv_textarea_cursor_left+0xa>
        lv_textarea_set_cursor_pos(obj, cp);
 801c000:	3901      	subs	r1, #1
 801c002:	f7ff bc95 	b.w	801b930 <lv_textarea_set_cursor_pos>
}
 801c006:	4770      	bx	lr

0801c008 <lv_textarea_cursor_down>:
{
 801c008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c00a:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 801c00c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801c00e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c010:	aa01      	add	r2, sp, #4
 801c012:	f7fd f92f 	bl	8019274 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801c016:	2259      	movs	r2, #89	; 0x59
 801c018:	2100      	movs	r1, #0
 801c01a:	4620      	mov	r0, r4
 801c01c:	f7eb fa36 	bl	800748c <lv_obj_get_style_prop>
 801c020:	4605      	mov	r5, r0
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801c022:	4620      	mov	r0, r4
 801c024:	f7ff fb5c 	bl	801b6e0 <lv_obj_get_style_text_font.constprop.0>
    pos.y += font_h + line_space + 1;
 801c028:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c02c:	441d      	add	r5, r3
 801c02e:	8903      	ldrh	r3, [r0, #8]
    if(pos.y < lv_obj_get_height(ta->label)) {
 801c030:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pos.y += font_h + line_space + 1;
 801c032:	3501      	adds	r5, #1
 801c034:	441d      	add	r5, r3
 801c036:	b22d      	sxth	r5, r5
    pos.x = ta->cursor.valid_x;
 801c038:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    pos.y += font_h + line_space + 1;
 801c03c:	f8ad 5006 	strh.w	r5, [sp, #6]
    pos.x = ta->cursor.valid_x;
 801c040:	f8ad 3004 	strh.w	r3, [sp, #4]
    if(pos.y < lv_obj_get_height(ta->label)) {
 801c044:	f7e8 ff80 	bl	8004f48 <lv_obj_get_height>
 801c048:	4285      	cmp	r5, r0
 801c04a:	da0b      	bge.n	801c064 <lv_textarea_cursor_down+0x5c>
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 801c04c:	a901      	add	r1, sp, #4
 801c04e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c050:	f7fd f9f0 	bl	8019434 <lv_label_get_letter_on>
        lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 801c054:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 801c058:	4601      	mov	r1, r0
        lv_textarea_set_cursor_pos(obj, new_cur_pos);
 801c05a:	4620      	mov	r0, r4
 801c05c:	f7ff fc68 	bl	801b930 <lv_textarea_set_cursor_pos>
        ta->cursor.valid_x = cur_valid_x_tmp;
 801c060:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
 801c064:	b003      	add	sp, #12
 801c066:	bd30      	pop	{r4, r5, pc}

0801c068 <lv_textarea_cursor_up>:
{
 801c068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c06a:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 801c06c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801c06e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c070:	aa01      	add	r2, sp, #4
 801c072:	f7fd f8ff 	bl	8019274 <lv_label_get_letter_pos>
 801c076:	2259      	movs	r2, #89	; 0x59
 801c078:	2100      	movs	r1, #0
 801c07a:	4620      	mov	r0, r4
 801c07c:	f7eb fa06 	bl	800748c <lv_obj_get_style_prop>
 801c080:	4605      	mov	r5, r0
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801c082:	4620      	mov	r0, r4
 801c084:	f7ff fb2c 	bl	801b6e0 <lv_obj_get_style_text_font.constprop.0>
    pos.y -= font_h + line_space - 1;
 801c088:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801c08c:	8900      	ldrh	r0, [r0, #8]
 801c08e:	3201      	adds	r2, #1
 801c090:	1b53      	subs	r3, r2, r5
 801c092:	1a1b      	subs	r3, r3, r0
 801c094:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 801c098:	a901      	add	r1, sp, #4
    pos.x = ta->cursor.valid_x;
 801c09a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 801c09e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pos.x = ta->cursor.valid_x;
 801c0a0:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 801c0a4:	f7fd f9c6 	bl	8019434 <lv_label_get_letter_on>
 801c0a8:	4601      	mov	r1, r0
    lv_textarea_set_cursor_pos(obj, new_cur_pos);
 801c0aa:	4620      	mov	r0, r4
    lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 801c0ac:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
    lv_textarea_set_cursor_pos(obj, new_cur_pos);
 801c0b0:	f7ff fc3e 	bl	801b930 <lv_textarea_set_cursor_pos>
    ta->cursor.valid_x = cur_valid_x_tmp;
 801c0b4:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
 801c0b8:	b003      	add	sp, #12
 801c0ba:	bd30      	pop	{r4, r5, pc}

0801c0bc <lv_textarea_event>:
{
 801c0bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801c0c0:	4896      	ldr	r0, [pc, #600]	; (801c31c <lv_textarea_event+0x260>)
{
 801c0c2:	b09d      	sub	sp, #116	; 0x74
 801c0c4:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801c0c6:	f7e6 ffd9 	bl	800307c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801c0ca:	2801      	cmp	r0, #1
 801c0cc:	f040 80e7 	bne.w	801c29e <lv_textarea_event+0x1e2>
    lv_event_code_t code = lv_event_get_code(e);
 801c0d0:	4628      	mov	r0, r5
 801c0d2:	f7e7 f8bf 	bl	8003254 <lv_event_get_code>
 801c0d6:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801c0d8:	4628      	mov	r0, r5
 801c0da:	f7e7 f8b7 	bl	800324c <lv_event_get_target>
    if(code == LV_EVENT_FOCUSED) {
 801c0de:	2e0e      	cmp	r6, #14
    lv_obj_t * obj = lv_event_get_target(e);
 801c0e0:	4604      	mov	r4, r0
    if(code == LV_EVENT_FOCUSED) {
 801c0e2:	d104      	bne.n	801c0ee <lv_textarea_event+0x32>
}
 801c0e4:	b01d      	add	sp, #116	; 0x74
 801c0e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        start_cursor_blink(obj);
 801c0ea:	f7ff bac7 	b.w	801b67c <start_cursor_blink>
    else if(code == LV_EVENT_KEY) {
 801c0ee:	2e0d      	cmp	r6, #13
 801c0f0:	d155      	bne.n	801c19e <lv_textarea_event+0xe2>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 801c0f2:	4628      	mov	r0, r5
 801c0f4:	f7e7 f8b2 	bl	800325c <lv_event_get_param>
 801c0f8:	6801      	ldr	r1, [r0, #0]
        if(c == LV_KEY_RIGHT)
 801c0fa:	2913      	cmp	r1, #19
 801c0fc:	d105      	bne.n	801c10a <lv_textarea_event+0x4e>
            lv_textarea_cursor_right(obj);
 801c0fe:	4620      	mov	r0, r4
}
 801c100:	b01d      	add	sp, #116	; 0x74
 801c102:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_cursor_right(obj);
 801c106:	f7ff bf75 	b.w	801bff4 <lv_textarea_cursor_right>
        else if(c == LV_KEY_LEFT)
 801c10a:	2914      	cmp	r1, #20
 801c10c:	d105      	bne.n	801c11a <lv_textarea_event+0x5e>
            lv_textarea_cursor_left(obj);
 801c10e:	4620      	mov	r0, r4
}
 801c110:	b01d      	add	sp, #116	; 0x74
 801c112:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_cursor_left(obj);
 801c116:	f7ff bf71 	b.w	801bffc <lv_textarea_cursor_left>
        else if(c == LV_KEY_UP)
 801c11a:	2911      	cmp	r1, #17
 801c11c:	d105      	bne.n	801c12a <lv_textarea_event+0x6e>
            lv_textarea_cursor_up(obj);
 801c11e:	4620      	mov	r0, r4
}
 801c120:	b01d      	add	sp, #116	; 0x74
 801c122:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_cursor_up(obj);
 801c126:	f7ff bf9f 	b.w	801c068 <lv_textarea_cursor_up>
        else if(c == LV_KEY_DOWN)
 801c12a:	2912      	cmp	r1, #18
 801c12c:	d105      	bne.n	801c13a <lv_textarea_event+0x7e>
            lv_textarea_cursor_down(obj);
 801c12e:	4620      	mov	r0, r4
}
 801c130:	b01d      	add	sp, #116	; 0x74
 801c132:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_cursor_down(obj);
 801c136:	f7ff bf67 	b.w	801c008 <lv_textarea_cursor_down>
        else if(c == LV_KEY_BACKSPACE)
 801c13a:	2908      	cmp	r1, #8
 801c13c:	d105      	bne.n	801c14a <lv_textarea_event+0x8e>
            lv_textarea_del_char(obj);
 801c13e:	4620      	mov	r0, r4
}
 801c140:	b01d      	add	sp, #116	; 0x74
 801c142:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_del_char(obj);
 801c146:	f7ff be97 	b.w	801be78 <lv_textarea_del_char>
        else if(c == LV_KEY_DEL)
 801c14a:	297f      	cmp	r1, #127	; 0x7f
 801c14c:	d105      	bne.n	801c15a <lv_textarea_event+0x9e>
            lv_textarea_del_char_forward(obj);
 801c14e:	4620      	mov	r0, r4
}
 801c150:	b01d      	add	sp, #116	; 0x74
 801c152:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_del_char_forward(obj);
 801c156:	f7ff bed8 	b.w	801bf0a <lv_textarea_del_char_forward>
        else if(c == LV_KEY_HOME)
 801c15a:	2902      	cmp	r1, #2
 801c15c:	d106      	bne.n	801c16c <lv_textarea_event+0xb0>
            lv_textarea_set_cursor_pos(obj, 0);
 801c15e:	2100      	movs	r1, #0
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 801c160:	4620      	mov	r0, r4
}
 801c162:	b01d      	add	sp, #116	; 0x74
 801c164:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 801c168:	f7ff bbe2 	b.w	801b930 <lv_textarea_set_cursor_pos>
        else if(c == LV_KEY_END)
 801c16c:	2903      	cmp	r1, #3
 801c16e:	d102      	bne.n	801c176 <lv_textarea_event+0xba>
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 801c170:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801c174:	e7f4      	b.n	801c160 <lv_textarea_event+0xa4>
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 801c176:	290a      	cmp	r1, #10
 801c178:	d10b      	bne.n	801c192 <lv_textarea_event+0xd6>
    return ta->one_line == 1U;
 801c17a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 801c17e:	071b      	lsls	r3, r3, #28
 801c180:	d507      	bpl.n	801c192 <lv_textarea_event+0xd6>
            lv_event_send(obj, LV_EVENT_READY, NULL);
 801c182:	2200      	movs	r2, #0
 801c184:	211f      	movs	r1, #31
 801c186:	4620      	mov	r0, r4
}
 801c188:	b01d      	add	sp, #116	; 0x74
 801c18a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_event_send(obj, LV_EVENT_READY, NULL);
 801c18e:	f7e7 b83d 	b.w	800320c <lv_event_send>
            lv_textarea_add_char(obj, c);
 801c192:	4620      	mov	r0, r4
}
 801c194:	b01d      	add	sp, #116	; 0x74
 801c196:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            lv_textarea_add_char(obj, c);
 801c19a:	f7ff bdf1 	b.w	801bd80 <lv_textarea_add_char>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_PRESSING || code == LV_EVENT_PRESS_LOST ||
 801c19e:	1e73      	subs	r3, r6, #1
 801c1a0:	b2db      	uxtb	r3, r3
 801c1a2:	2b02      	cmp	r3, #2
 801c1a4:	d902      	bls.n	801c1ac <lv_textarea_event+0xf0>
 801c1a6:	2e08      	cmp	r6, #8
 801c1a8:	f040 80ba 	bne.w	801c320 <lv_textarea_event+0x264>
    lv_indev_t * click_source = lv_indev_get_act();
 801c1ac:	f7e7 fa42 	bl	8003634 <lv_indev_get_act>
    if(click_source == NULL) return;
 801c1b0:	4606      	mov	r6, r0
 801c1b2:	2800      	cmp	r0, #0
 801c1b4:	d073      	beq.n	801c29e <lv_textarea_event+0x1e2>
    lv_obj_t * obj = lv_event_get_target(e);
 801c1b6:	4628      	mov	r0, r5
 801c1b8:	f7e7 f848 	bl	800324c <lv_event_get_target>
    if(ta->cursor.click_pos == 0) return;
 801c1bc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 801c1c0:	079f      	lsls	r7, r3, #30
    lv_obj_t * obj = lv_event_get_target(e);
 801c1c2:	4604      	mov	r4, r0
    if(ta->cursor.click_pos == 0) return;
 801c1c4:	d56b      	bpl.n	801c29e <lv_textarea_event+0x1e2>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 801c1c6:	4630      	mov	r0, r6
 801c1c8:	f7e7 fa3a 	bl	8003640 <lv_indev_get_type>
 801c1cc:	2802      	cmp	r0, #2
 801c1ce:	d066      	beq.n	801c29e <lv_textarea_event+0x1e2>
       lv_indev_get_type(click_source) == LV_INDEV_TYPE_ENCODER) {
 801c1d0:	4630      	mov	r0, r6
 801c1d2:	f7e7 fa35 	bl	8003640 <lv_indev_get_type>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 801c1d6:	2804      	cmp	r0, #4
 801c1d8:	d061      	beq.n	801c29e <lv_textarea_event+0x1e2>
    lv_obj_get_coords(ta->label, &label_coords);
 801c1da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c1dc:	a910      	add	r1, sp, #64	; 0x40
 801c1de:	f7e8 fe79 	bl	8004ed4 <lv_obj_get_coords>
    lv_indev_get_point(click_source, &point_act);
 801c1e2:	a904      	add	r1, sp, #16
 801c1e4:	4630      	mov	r0, r6
 801c1e6:	f7e7 fa8c 	bl	8003702 <lv_indev_get_point>
    lv_indev_get_vect(click_source, &vect_act);
 801c1ea:	a906      	add	r1, sp, #24
 801c1ec:	4630      	mov	r0, r6
 801c1ee:	f7e7 fab6 	bl	800375e <lv_indev_get_vect>
    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
 801c1f2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c1f6:	2a00      	cmp	r2, #0
 801c1f8:	db51      	blt.n	801c29e <lv_textarea_event+0x1e2>
 801c1fa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	db4d      	blt.n	801c29e <lv_textarea_event+0x1e2>
    rel_pos.x = point_act.x - label_coords.x1;
 801c202:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 801c206:	1a52      	subs	r2, r2, r1
 801c208:	f8ad 2020 	strh.w	r2, [sp, #32]
    rel_pos.y = point_act.y - label_coords.y1;
 801c20c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
    const lv_event_code_t code = lv_event_get_code(e);
 801c210:	4628      	mov	r0, r5
    rel_pos.y = point_act.y - label_coords.y1;
 801c212:	1a9b      	subs	r3, r3, r2
 801c214:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    const lv_event_code_t code = lv_event_get_code(e);
 801c218:	f7e7 f81c 	bl	8003254 <lv_event_get_code>
 801c21c:	4607      	mov	r7, r0
    lv_coord_t label_width = lv_obj_get_width(ta->label);
 801c21e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c220:	f7e8 fe8c 	bl	8004f3c <lv_obj_get_width>
    if(rel_pos.x < 0) {
 801c224:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
    lv_label_t * label_data = (lv_label_t *)ta->label;
 801c228:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if(rel_pos.x < 0) {
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	db3a      	blt.n	801c2a4 <lv_textarea_event+0x1e8>
    else if(rel_pos.x >= label_width) {
 801c22e:	4298      	cmp	r0, r3
 801c230:	dd3b      	ble.n	801c2aa <lv_textarea_event+0x1ee>
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 801c232:	a908      	add	r1, sp, #32
 801c234:	4628      	mov	r0, r5
 801c236:	f7fd f8fd 	bl	8019434 <lv_label_get_letter_on>
        click_outside_label = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 801c23a:	a908      	add	r1, sp, #32
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 801c23c:	b286      	uxth	r6, r0
        click_outside_label = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 801c23e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c240:	f7fd f8fc 	bl	801943c <lv_label_is_char_under_pos>
 801c244:	f080 0301 	eor.w	r3, r0, #1
 801c248:	b2db      	uxtb	r3, r3
    if(ta->text_sel_en) {
 801c24a:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 801c24e:	0790      	lsls	r0, r2, #30
 801c250:	d53e      	bpl.n	801c2d0 <lv_textarea_event+0x214>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 801c252:	07d1      	lsls	r1, r2, #31
 801c254:	d441      	bmi.n	801c2da <lv_textarea_event+0x21e>
 801c256:	b363      	cbz	r3, 801c2b2 <lv_textarea_event+0x1f6>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 801c258:	2f01      	cmp	r7, #1
 801c25a:	d120      	bne.n	801c29e <lv_textarea_event+0x1e2>
 801c25c:	4631      	mov	r1, r6
 801c25e:	4620      	mov	r0, r4
 801c260:	f7ff fb66 	bl	801b930 <lv_textarea_set_cursor_pos>
    if(ta->text_sel_in_prog) {
 801c264:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801c268:	07db      	lsls	r3, r3, #31
 801c26a:	d518      	bpl.n	801c29e <lv_textarea_event+0x1e2>
        if(ta->sel_start > ta->sel_end) {
 801c26c:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
 801c270:	429a      	cmp	r2, r3
            if(label_data->sel_start != ta->sel_end || label_data->sel_end != ta->sel_start) {
 801c272:	6be9      	ldr	r1, [r5, #60]	; 0x3c
        if(ta->sel_start > ta->sel_end) {
 801c274:	d93f      	bls.n	801c2f6 <lv_textarea_event+0x23a>
            if(label_data->sel_start != ta->sel_end || label_data->sel_end != ta->sel_start) {
 801c276:	428b      	cmp	r3, r1
 801c278:	d102      	bne.n	801c280 <lv_textarea_event+0x1c4>
 801c27a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801c27c:	428a      	cmp	r2, r1
 801c27e:	d004      	beq.n	801c28a <lv_textarea_event+0x1ce>
                label_data->sel_end   = ta->sel_start;
 801c280:	e9c5 320f 	strd	r3, r2, [r5, #60]	; 0x3c
                lv_obj_invalidate(obj);
 801c284:	4620      	mov	r0, r4
 801c286:	f7e9 f86f 	bl	8005368 <lv_obj_invalidate>
        if(code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED) {
 801c28a:	2f03      	cmp	r7, #3
 801c28c:	d001      	beq.n	801c292 <lv_textarea_event+0x1d6>
 801c28e:	2f08      	cmp	r7, #8
 801c290:	d105      	bne.n	801c29e <lv_textarea_event+0x1e2>
            ta->text_sel_in_prog = 0;
 801c292:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801c296:	f36f 0300 	bfc	r3, #0, #1
 801c29a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 801c29e:	b01d      	add	sp, #116	; 0x74
 801c2a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        click_outside_label = true;
 801c2a4:	2301      	movs	r3, #1
        char_id_at_click = 0;
 801c2a6:	2600      	movs	r6, #0
 801c2a8:	e7cf      	b.n	801c24a <lv_textarea_event+0x18e>
        click_outside_label = true;
 801c2aa:	2301      	movs	r3, #1
        char_id_at_click = LV_TEXTAREA_CURSOR_LAST;
 801c2ac:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801c2b0:	e7cb      	b.n	801c24a <lv_textarea_event+0x18e>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 801c2b2:	2f01      	cmp	r7, #1
 801c2b4:	d1f3      	bne.n	801c29e <lv_textarea_event+0x1e2>
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 801c2b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
            ta->text_sel_in_prog = 1;
 801c2ba:	f042 0201 	orr.w	r2, r2, #1
            ta->sel_start    = char_id_at_click;
 801c2be:	65a6      	str	r6, [r4, #88]	; 0x58
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 801c2c0:	65e3      	str	r3, [r4, #92]	; 0x5c
            ta->text_sel_in_prog = 1;
 801c2c2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801c2c6:	f44f 7140 	mov.w	r1, #768	; 0x300
 801c2ca:	4620      	mov	r0, r4
 801c2cc:	f7e7 fe5f 	bl	8003f8e <lv_obj_clear_flag>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 801c2d0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801c2d4:	07d8      	lsls	r0, r3, #31
 801c2d6:	d5bf      	bpl.n	801c258 <lv_textarea_event+0x19c>
 801c2d8:	e7c0      	b.n	801c25c <lv_textarea_event+0x1a0>
        else if(ta->text_sel_in_prog && code == LV_EVENT_PRESSING) {
 801c2da:	2f02      	cmp	r7, #2
 801c2dc:	d101      	bne.n	801c2e2 <lv_textarea_event+0x226>
            ta->sel_end = char_id_at_click;
 801c2de:	65e6      	str	r6, [r4, #92]	; 0x5c
 801c2e0:	e7bc      	b.n	801c25c <lv_textarea_event+0x1a0>
        else if(ta->text_sel_in_prog && (code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED)) {
 801c2e2:	2f03      	cmp	r7, #3
 801c2e4:	d001      	beq.n	801c2ea <lv_textarea_event+0x22e>
 801c2e6:	2f08      	cmp	r7, #8
 801c2e8:	d1b8      	bne.n	801c25c <lv_textarea_event+0x1a0>
            lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801c2ea:	f44f 7140 	mov.w	r1, #768	; 0x300
 801c2ee:	4620      	mov	r0, r4
 801c2f0:	f7e7 fe18 	bl	8003f24 <lv_obj_add_flag>
 801c2f4:	e7ec      	b.n	801c2d0 <lv_textarea_event+0x214>
        else if(ta->sel_start < ta->sel_end) {
 801c2f6:	d207      	bcs.n	801c308 <lv_textarea_event+0x24c>
            if(label_data->sel_start != ta->sel_start || label_data->sel_end != ta->sel_end) {
 801c2f8:	428a      	cmp	r2, r1
 801c2fa:	d102      	bne.n	801c302 <lv_textarea_event+0x246>
 801c2fc:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801c2fe:	428b      	cmp	r3, r1
 801c300:	d0c3      	beq.n	801c28a <lv_textarea_event+0x1ce>
                label_data->sel_start = ta->sel_start;
 801c302:	63ea      	str	r2, [r5, #60]	; 0x3c
                label_data->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 801c304:	642b      	str	r3, [r5, #64]	; 0x40
 801c306:	e7bd      	b.n	801c284 <lv_textarea_event+0x1c8>
            if(label_data->sel_start != LV_DRAW_LABEL_NO_TXT_SEL || label_data->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 801c308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c30c:	4299      	cmp	r1, r3
 801c30e:	d102      	bne.n	801c316 <lv_textarea_event+0x25a>
 801c310:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 801c312:	429a      	cmp	r2, r3
 801c314:	d0b9      	beq.n	801c28a <lv_textarea_event+0x1ce>
                label_data->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 801c316:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c318:	e7f4      	b.n	801c304 <lv_textarea_event+0x248>
 801c31a:	bf00      	nop
 801c31c:	08020610 	.word	0x08020610
    else if(code == LV_EVENT_DRAW_MAIN) {
 801c320:	2e15      	cmp	r6, #21
 801c322:	d159      	bne.n	801c3d8 <lv_textarea_event+0x31c>
    lv_obj_t * obj = lv_event_get_target(e);
 801c324:	4628      	mov	r0, r5
 801c326:	f7e6 ff91 	bl	800324c <lv_event_get_target>
 801c32a:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801c32c:	4628      	mov	r0, r5
 801c32e:	f7e6 ffe0 	bl	80032f2 <lv_event_get_draw_ctx>
 801c332:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ta->label);
 801c334:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c336:	f7fc ff95 	bl	8019264 <lv_label_get_text>
    if(txt[0] == '\0' && ta->placeholder_txt && ta->placeholder_txt[0] != 0) {
 801c33a:	7803      	ldrb	r3, [r0, #0]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d1ae      	bne.n	801c29e <lv_textarea_event+0x1e2>
 801c340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c342:	2b00      	cmp	r3, #0
 801c344:	d0ab      	beq.n	801c29e <lv_textarea_event+0x1e2>
 801c346:	781b      	ldrb	r3, [r3, #0]
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d0a8      	beq.n	801c29e <lv_textarea_event+0x1e2>
        lv_draw_label_dsc_init(&ph_dsc);
 801c34c:	a810      	add	r0, sp, #64	; 0x40
 801c34e:	f7ed fc23 	bl	8009b98 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_TEXTAREA_PLACEHOLDER, &ph_dsc);
 801c352:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801c356:	aa10      	add	r2, sp, #64	; 0x40
 801c358:	4620      	mov	r0, r4
 801c35a:	f7e8 fab1 	bl	80048c0 <lv_obj_init_draw_label_dsc>
        if(ta->one_line) ph_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 801c35e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801c362:	0719      	lsls	r1, r3, #28
 801c364:	bf48      	it	mi
 801c366:	f89d 305b 	ldrbmi.w	r3, [sp, #91]	; 0x5b
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c36a:	f04f 0212 	mov.w	r2, #18
 801c36e:	bf48      	it	mi
 801c370:	f043 0302 	orrmi.w	r3, r3, #2
 801c374:	f04f 0100 	mov.w	r1, #0
 801c378:	4620      	mov	r0, r4
 801c37a:	bf48      	it	mi
 801c37c:	f88d 305b 	strbmi.w	r3, [sp, #91]	; 0x5b
 801c380:	f7eb f884 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c384:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c386:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c388:	2100      	movs	r1, #0
 801c38a:	4620      	mov	r0, r4
 801c38c:	f7eb f87e 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c390:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c392:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c394:	2100      	movs	r1, #0
 801c396:	4620      	mov	r0, r4
 801c398:	f7eb f878 	bl	800748c <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 801c39c:	8aa3      	ldrh	r3, [r4, #20]
 801c39e:	f8ad 3020 	strh.w	r3, [sp, #32]
    dest->y1 = src->y1;
 801c3a2:	8ae3      	ldrh	r3, [r4, #22]
 801c3a4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        lv_area_move(&ph_coords, left + border_width, top + border_width);
 801c3a8:	fa15 f280 	uxtah	r2, r5, r0
    dest->x2 = src->x2;
 801c3ac:	8b23      	ldrh	r3, [r4, #24]
 801c3ae:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801c3b2:	fa17 f180 	uxtah	r1, r7, r0
    dest->y2 = src->y2;
 801c3b6:	8b63      	ldrh	r3, [r4, #26]
 801c3b8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c3bc:	b212      	sxth	r2, r2
 801c3be:	b209      	sxth	r1, r1
 801c3c0:	a808      	add	r0, sp, #32
 801c3c2:	f7f6 fa47 	bl	8012854 <lv_area_move>
        lv_draw_label(draw_ctx, &ph_dsc, &ph_coords, ta->placeholder_txt, NULL);
 801c3c6:	2300      	movs	r3, #0
 801c3c8:	9300      	str	r3, [sp, #0]
 801c3ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c3cc:	aa08      	add	r2, sp, #32
 801c3ce:	a910      	add	r1, sp, #64	; 0x40
 801c3d0:	4630      	mov	r0, r6
        lv_draw_label(draw_ctx, &cur_label_dsc, &cur_area, letter_buf, NULL);
 801c3d2:	f7ed fbff 	bl	8009bd4 <lv_draw_label>
 801c3d6:	e762      	b.n	801c29e <lv_textarea_event+0x1e2>
    else if(code == LV_EVENT_DRAW_POST) {
 801c3d8:	2e18      	cmp	r6, #24
 801c3da:	f47f af60 	bne.w	801c29e <lv_textarea_event+0x1e2>
    lv_obj_t * obj = lv_event_get_target(e);
 801c3de:	4628      	mov	r0, r5
 801c3e0:	f7e6 ff34 	bl	800324c <lv_event_get_target>
 801c3e4:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801c3e6:	4628      	mov	r0, r5
 801c3e8:	f7e6 ff83 	bl	80032f2 <lv_event_get_draw_ctx>
 801c3ec:	4607      	mov	r7, r0
    const char * txt = lv_label_get_text(ta->label);
 801c3ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c3f0:	f7fc ff38 	bl	8019264 <lv_label_get_text>
    if(ta->cursor.show == 0) return;
 801c3f4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801c3f8:	07da      	lsls	r2, r3, #31
    const char * txt = lv_label_get_text(ta->label);
 801c3fa:	4680      	mov	r8, r0
    if(ta->cursor.show == 0) return;
 801c3fc:	f57f af4f 	bpl.w	801c29e <lv_textarea_event+0x1e2>
    lv_draw_rect_dsc_init(&cur_dsc);
 801c400:	a810      	add	r0, sp, #64	; 0x40
 801c402:	f7ee fefd 	bl	800b200 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_CURSOR, &cur_dsc);
 801c406:	aa10      	add	r2, sp, #64	; 0x40
 801c408:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801c40c:	4620      	mov	r0, r4
 801c40e:	f7e8 f90e 	bl	800462e <lv_obj_init_draw_rect_dsc>
    cur_area.x1 += ta->label->coords.x1;
 801c412:	6a65      	ldr	r5, [r4, #36]	; 0x24
    dest->x2 = src->x2;
 801c414:	f9b4 c04c 	ldrsh.w	ip, [r4, #76]	; 0x4c
 801c418:	8aaa      	ldrh	r2, [r5, #20]
    cur_area.y1 += ta->label->coords.y1;
 801c41a:	8aeb      	ldrh	r3, [r5, #22]
    dest->y1 = src->y1;
 801c41c:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
    cur_area.x1 += ta->label->coords.x1;
 801c420:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    dest->y2 = src->y2;
 801c424:	f9b4 604e 	ldrsh.w	r6, [r4, #78]	; 0x4e
 801c428:	4410      	add	r0, r2
    cur_area.y1 += ta->label->coords.y1;
 801c42a:	4419      	add	r1, r3
    cur_area.x2 += ta->label->coords.x1;
 801c42c:	4462      	add	r2, ip
    cur_area.y2 += ta->label->coords.y1;
 801c42e:	4433      	add	r3, r6
    cur_area.x1 += ta->label->coords.x1;
 801c430:	f8ad 0010 	strh.w	r0, [sp, #16]
    cur_area.y1 += ta->label->coords.y1;
 801c434:	f8ad 1012 	strh.w	r1, [sp, #18]
    cur_area.x2 += ta->label->coords.x1;
 801c438:	f8ad 2014 	strh.w	r2, [sp, #20]
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 801c43c:	a910      	add	r1, sp, #64	; 0x40
 801c43e:	aa04      	add	r2, sp, #16
 801c440:	4638      	mov	r0, r7
    cur_area.y2 += ta->label->coords.y1;
 801c442:	f8ad 3016 	strh.w	r3, [sp, #22]
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 801c446:	f7ee feff 	bl	800b248 <lv_draw_rect>
 801c44a:	2232      	movs	r2, #50	; 0x32
 801c44c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801c450:	4620      	mov	r0, r4
 801c452:	f7eb f81b 	bl	800748c <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c456:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c458:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c45a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801c45e:	4620      	mov	r0, r4
 801c460:	f7eb f814 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR) + border_width;
 801c464:	fa1f f986 	uxth.w	r9, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c468:	2210      	movs	r2, #16
 801c46a:	fa10 f686 	uxtah	r6, r0, r6
 801c46e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801c472:	4620      	mov	r0, r4
 801c474:	f7eb f80a 	bl	800748c <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 801c478:	4448      	add	r0, r9
    char letter_buf[8] = {0};
 801c47a:	f04f 0900 	mov.w	r9, #0
 801c47e:	e9cd 9906 	strd	r9, r9, [sp, #24]
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 801c482:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801c484:	4b1a      	ldr	r3, [pc, #104]	; (801c4f0 <lv_textarea_event+0x434>)
 801c486:	4441      	add	r1, r8
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	9103      	str	r1, [sp, #12]
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 801c48c:	b285      	uxth	r5, r0
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 801c48e:	4608      	mov	r0, r1
 801c490:	4798      	blx	r3
 801c492:	9903      	ldr	r1, [sp, #12]
 801c494:	4602      	mov	r2, r0
 801c496:	a806      	add	r0, sp, #24
 801c498:	f7f7 f810 	bl	80134bc <lv_memcpy>
    cur_area.x1 += left;
 801c49c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR) + border_width;
 801c4a0:	b2b6      	uxth	r6, r6
    cur_area.x1 += left;
 801c4a2:	4406      	add	r6, r0
    cur_area.y1 += top;
 801c4a4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    cur_area.x1 += left;
 801c4a8:	f8ad 6010 	strh.w	r6, [sp, #16]
    cur_area.y1 += top;
 801c4ac:	4405      	add	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
 801c4ae:	2255      	movs	r2, #85	; 0x55
 801c4b0:	4649      	mov	r1, r9
 801c4b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c4b4:	f8ad 5012 	strh.w	r5, [sp, #18]
 801c4b8:	f7ea ffe8 	bl	800748c <lv_obj_get_style_prop>
    return v.color;
 801c4bc:	b2c5      	uxtb	r5, r0
    lv_draw_label_dsc_init(&cur_label_dsc);
 801c4be:	a808      	add	r0, sp, #32
 801c4c0:	f7ed fb6a 	bl	8009b98 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
 801c4c4:	aa08      	add	r2, sp, #32
 801c4c6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801c4ca:	4620      	mov	r0, r4
 801c4cc:	f7e8 f9f8 	bl	80048c0 <lv_obj_init_draw_label_dsc>
    if(cur_dsc.bg_opa > LV_OPA_MIN || cur_label_dsc.color.full != label_color.full) {
 801c4d0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 801c4d4:	2b02      	cmp	r3, #2
 801c4d6:	d804      	bhi.n	801c4e2 <lv_textarea_event+0x426>
 801c4d8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801c4dc:	42ab      	cmp	r3, r5
 801c4de:	f43f aede 	beq.w	801c29e <lv_textarea_event+0x1e2>
        lv_draw_label(draw_ctx, &cur_label_dsc, &cur_area, letter_buf, NULL);
 801c4e2:	2300      	movs	r3, #0
 801c4e4:	9300      	str	r3, [sp, #0]
 801c4e6:	aa04      	add	r2, sp, #16
 801c4e8:	ab06      	add	r3, sp, #24
 801c4ea:	a908      	add	r1, sp, #32
 801c4ec:	4638      	mov	r0, r7
 801c4ee:	e770      	b.n	801c3d2 <lv_textarea_event+0x316>
 801c4f0:	2000002c 	.word	0x2000002c

0801c4f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801c4f4:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 801c4f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801c4fa:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801c4fc:	f001 f85c 	bl	801d5b8 <xTaskGetSchedulerState>
 801c500:	2801      	cmp	r0, #1
 801c502:	d003      	beq.n	801c50c <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 801c504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 801c508:	f001 bb64 	b.w	801dbd4 <xPortSysTickHandler>
}
 801c50c:	bd08      	pop	{r3, pc}
	...

0801c510 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c510:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 801c514:	b92b      	cbnz	r3, 801c522 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 801c516:	4b06      	ldr	r3, [pc, #24]	; (801c530 <osKernelInitialize+0x20>)
 801c518:	6818      	ldr	r0, [r3, #0]
 801c51a:	b928      	cbnz	r0, 801c528 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801c51c:	2201      	movs	r2, #1
 801c51e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801c520:	4770      	bx	lr
    stat = osErrorISR;
 801c522:	f06f 0005 	mvn.w	r0, #5
 801c526:	4770      	bx	lr
    } else {
      stat = osError;
 801c528:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 801c52c:	4770      	bx	lr
 801c52e:	bf00      	nop
 801c530:	200071c8 	.word	0x200071c8

0801c534 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801c534:	b510      	push	{r4, lr}
 801c536:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 801c53a:	b95c      	cbnz	r4, 801c554 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 801c53c:	4b08      	ldr	r3, [pc, #32]	; (801c560 <osKernelStart+0x2c>)
 801c53e:	681a      	ldr	r2, [r3, #0]
 801c540:	2a01      	cmp	r2, #1
 801c542:	d10a      	bne.n	801c55a <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c544:	4a07      	ldr	r2, [pc, #28]	; (801c564 <osKernelStart+0x30>)
 801c546:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801c548:	2202      	movs	r2, #2
 801c54a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801c54c:	f000 fd9e 	bl	801d08c <vTaskStartScheduler>
      stat = osOK;
 801c550:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 801c552:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 801c554:	f06f 0005 	mvn.w	r0, #5
 801c558:	e7fb      	b.n	801c552 <osKernelStart+0x1e>
      stat = osError;
 801c55a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 801c55e:	e7f8      	b.n	801c552 <osKernelStart+0x1e>
 801c560:	200071c8 	.word	0x200071c8
 801c564:	e000ed00 	.word	0xe000ed00

0801c568 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801c568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c56a:	b087      	sub	sp, #28
 801c56c:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801c56e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801c570:	460b      	mov	r3, r1
  hTask = NULL;
 801c572:	9205      	str	r2, [sp, #20]
 801c574:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 801c578:	b9d2      	cbnz	r2, 801c5b0 <osThreadNew+0x48>
 801c57a:	b1c8      	cbz	r0, 801c5b0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 801c57c:	2c00      	cmp	r4, #0
 801c57e:	d02f      	beq.n	801c5e0 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 801c580:	69a5      	ldr	r5, [r4, #24]
 801c582:	2d00      	cmp	r5, #0
 801c584:	bf08      	it	eq
 801c586:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801c588:	1e69      	subs	r1, r5, #1
 801c58a:	2937      	cmp	r1, #55	; 0x37
 801c58c:	46ac      	mov	ip, r5
 801c58e:	d82b      	bhi.n	801c5e8 <osThreadNew+0x80>
 801c590:	6861      	ldr	r1, [r4, #4]
 801c592:	07c9      	lsls	r1, r1, #31
 801c594:	d428      	bmi.n	801c5e8 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 801c596:	6966      	ldr	r6, [r4, #20]
 801c598:	b16e      	cbz	r6, 801c5b6 <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801c59a:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801c59c:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
      if (attr->name != NULL) {
 801c5a0:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801c5a2:	b157      	cbz	r7, 801c5ba <osThreadNew+0x52>
 801c5a4:	f1be 0fbb 	cmp.w	lr, #187	; 0xbb
 801c5a8:	d902      	bls.n	801c5b0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801c5aa:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801c5ac:	b104      	cbz	r4, 801c5b0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801c5ae:	b9ee      	cbnz	r6, 801c5ec <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801c5b0:	9805      	ldr	r0, [sp, #20]
}
 801c5b2:	b007      	add	sp, #28
 801c5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 801c5b6:	2280      	movs	r2, #128	; 0x80
 801c5b8:	e7f0      	b.n	801c59c <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801c5ba:	f1be 0f00 	cmp.w	lr, #0
 801c5be:	d1f7      	bne.n	801c5b0 <osThreadNew+0x48>
      if (mem == 0) {
 801c5c0:	6924      	ldr	r4, [r4, #16]
 801c5c2:	2c00      	cmp	r4, #0
 801c5c4:	d1f4      	bne.n	801c5b0 <osThreadNew+0x48>
 801c5c6:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801c5c8:	a905      	add	r1, sp, #20
 801c5ca:	e9cd c100 	strd	ip, r1, [sp]
 801c5ce:	b292      	uxth	r2, r2
 801c5d0:	4621      	mov	r1, r4
 801c5d2:	f000 fd2d 	bl	801d030 <xTaskCreate>
 801c5d6:	2801      	cmp	r0, #1
            hTask = NULL;
 801c5d8:	bf1c      	itt	ne
 801c5da:	2300      	movne	r3, #0
 801c5dc:	9305      	strne	r3, [sp, #20]
 801c5de:	e7e7      	b.n	801c5b0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 801c5e0:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 801c5e4:	2280      	movs	r2, #128	; 0x80
 801c5e6:	e7ef      	b.n	801c5c8 <osThreadNew+0x60>
        return (NULL);
 801c5e8:	4610      	mov	r0, r2
 801c5ea:	e7e2      	b.n	801c5b2 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801c5ec:	e9cd 4701 	strd	r4, r7, [sp, #4]
 801c5f0:	9500      	str	r5, [sp, #0]
 801c5f2:	f000 fce5 	bl	801cfc0 <xTaskCreateStatic>
 801c5f6:	9005      	str	r0, [sp, #20]
 801c5f8:	e7da      	b.n	801c5b0 <osThreadNew+0x48>

0801c5fa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801c5fa:	b510      	push	{r4, lr}
 801c5fc:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 801c600:	b924      	cbnz	r4, 801c60c <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 801c602:	b110      	cbz	r0, 801c60a <osDelay+0x10>
      vTaskDelay(ticks);
 801c604:	f000 feaa 	bl	801d35c <vTaskDelay>
    stat = osOK;
 801c608:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 801c60a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 801c60c:	f06f 0005 	mvn.w	r0, #5
 801c610:	e7fb      	b.n	801c60a <osDelay+0x10>
	...

0801c614 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801c614:	4b03      	ldr	r3, [pc, #12]	; (801c624 <vApplicationGetIdleTaskMemory+0x10>)
 801c616:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801c618:	4b03      	ldr	r3, [pc, #12]	; (801c628 <vApplicationGetIdleTaskMemory+0x14>)
 801c61a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801c61c:	2380      	movs	r3, #128	; 0x80
 801c61e:	6013      	str	r3, [r2, #0]
}
 801c620:	4770      	bx	lr
 801c622:	bf00      	nop
 801c624:	2000710c 	.word	0x2000710c
 801c628:	20006f0c 	.word	0x20006f0c

0801c62c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801c62c:	4b03      	ldr	r3, [pc, #12]	; (801c63c <vApplicationGetTimerTaskMemory+0x10>)
 801c62e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801c630:	4b03      	ldr	r3, [pc, #12]	; (801c640 <vApplicationGetTimerTaskMemory+0x14>)
 801c632:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801c634:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c638:	6013      	str	r3, [r2, #0]
}
 801c63a:	4770      	bx	lr
 801c63c:	200075cc 	.word	0x200075cc
 801c640:	200071cc 	.word	0x200071cc

0801c644 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801c644:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801c648:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801c64c:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801c650:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801c652:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801c654:	2300      	movs	r3, #0
 801c656:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801c658:	4770      	bx	lr

0801c65a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801c65a:	2300      	movs	r3, #0
 801c65c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801c65e:	4770      	bx	lr

0801c660 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 801c660:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801c662:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801c664:	689a      	ldr	r2, [r3, #8]
 801c666:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801c668:	689a      	ldr	r2, [r3, #8]
 801c66a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801c66c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801c66e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 801c670:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801c672:	3301      	adds	r3, #1
 801c674:	6003      	str	r3, [r0, #0]
}
 801c676:	4770      	bx	lr

0801c678 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801c678:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801c67a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801c67c:	1c63      	adds	r3, r4, #1
 801c67e:	d10a      	bne.n	801c696 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801c680:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801c682:	685a      	ldr	r2, [r3, #4]
 801c684:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801c686:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801c688:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801c68a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801c68c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 801c68e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801c690:	3301      	adds	r3, #1
 801c692:	6003      	str	r3, [r0, #0]
}
 801c694:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801c696:	f100 0208 	add.w	r2, r0, #8
 801c69a:	4613      	mov	r3, r2
 801c69c:	6852      	ldr	r2, [r2, #4]
 801c69e:	6815      	ldr	r5, [r2, #0]
 801c6a0:	42a5      	cmp	r5, r4
 801c6a2:	d9fa      	bls.n	801c69a <vListInsert+0x22>
 801c6a4:	e7ed      	b.n	801c682 <vListInsert+0xa>

0801c6a6 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801c6a6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 801c6aa:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801c6ac:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801c6ae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801c6b0:	6859      	ldr	r1, [r3, #4]
 801c6b2:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801c6b4:	bf08      	it	eq
 801c6b6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801c6b8:	2200      	movs	r2, #0
 801c6ba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801c6bc:	681a      	ldr	r2, [r3, #0]
 801c6be:	3a01      	subs	r2, #1
 801c6c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801c6c2:	6818      	ldr	r0, [r3, #0]
}
 801c6c4:	4770      	bx	lr

0801c6c6 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801c6c6:	b510      	push	{r4, lr}
 801c6c8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801c6ca:	f001 fa1b 	bl	801db04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801c6ce:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801c6d0:	f001 fa38 	bl	801db44 <vPortExitCritical>

	return xReturn;
}
 801c6d4:	fab4 f084 	clz	r0, r4
 801c6d8:	0940      	lsrs	r0, r0, #5
 801c6da:	bd10      	pop	{r4, pc}

0801c6dc <prvCopyDataToQueue>:
{
 801c6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6de:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801c6e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801c6e2:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 801c6e4:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801c6e6:	b952      	cbnz	r2, 801c6fe <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801c6e8:	6807      	ldr	r7, [r0, #0]
 801c6ea:	bb47      	cbnz	r7, 801c73e <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801c6ec:	6880      	ldr	r0, [r0, #8]
 801c6ee:	f000 ff73 	bl	801d5d8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801c6f2:	60a7      	str	r7, [r4, #8]
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801c6f4:	4605      	mov	r5, r0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801c6f6:	3601      	adds	r6, #1
 801c6f8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 801c6fa:	4628      	mov	r0, r5
 801c6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 801c6fe:	b965      	cbnz	r5, 801c71a <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801c700:	6840      	ldr	r0, [r0, #4]
 801c702:	f001 fc63 	bl	801dfcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801c706:	6863      	ldr	r3, [r4, #4]
 801c708:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801c70a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801c70c:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801c70e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801c710:	4293      	cmp	r3, r2
 801c712:	d3f0      	bcc.n	801c6f6 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801c714:	6823      	ldr	r3, [r4, #0]
 801c716:	6063      	str	r3, [r4, #4]
 801c718:	e7ed      	b.n	801c6f6 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801c71a:	68c0      	ldr	r0, [r0, #12]
 801c71c:	f001 fc56 	bl	801dfcc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801c720:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801c722:	68e3      	ldr	r3, [r4, #12]
 801c724:	4251      	negs	r1, r2
 801c726:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801c728:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801c72a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801c72c:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801c72e:	bf3e      	ittt	cc
 801c730:	68a3      	ldrcc	r3, [r4, #8]
 801c732:	185b      	addcc	r3, r3, r1
 801c734:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801c736:	2d02      	cmp	r5, #2
 801c738:	d101      	bne.n	801c73e <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801c73a:	b116      	cbz	r6, 801c742 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 801c73c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 801c73e:	2500      	movs	r5, #0
 801c740:	e7d9      	b.n	801c6f6 <prvCopyDataToQueue+0x1a>
 801c742:	4635      	mov	r5, r6
 801c744:	e7d7      	b.n	801c6f6 <prvCopyDataToQueue+0x1a>

0801c746 <prvCopyDataFromQueue>:
{
 801c746:	4603      	mov	r3, r0
 801c748:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801c74a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 801c74c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801c74e:	b16a      	cbz	r2, 801c76c <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801c750:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801c752:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801c754:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801c756:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801c758:	bf28      	it	cs
 801c75a:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801c75c:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801c75e:	bf28      	it	cs
 801c760:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801c762:	68d9      	ldr	r1, [r3, #12]
}
 801c764:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801c768:	f001 bc30 	b.w	801dfcc <memcpy>
}
 801c76c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c770:	4770      	bx	lr

0801c772 <prvUnlockQueue>:
{
 801c772:	b570      	push	{r4, r5, r6, lr}
 801c774:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801c776:	f001 f9c5 	bl	801db04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801c77a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801c77e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 801c782:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801c784:	2d00      	cmp	r5, #0
 801c786:	dc14      	bgt.n	801c7b2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 801c788:	23ff      	movs	r3, #255	; 0xff
 801c78a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 801c78e:	f001 f9d9 	bl	801db44 <vPortExitCritical>
	taskENTER_CRITICAL();
 801c792:	f001 f9b7 	bl	801db04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801c796:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801c79a:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 801c79e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801c7a0:	2d00      	cmp	r5, #0
 801c7a2:	dc12      	bgt.n	801c7ca <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 801c7a4:	23ff      	movs	r3, #255	; 0xff
 801c7a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 801c7aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 801c7ae:	f001 b9c9 	b.w	801db44 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801c7b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d0e7      	beq.n	801c788 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801c7b8:	4630      	mov	r0, r6
 801c7ba:	f000 fe6b 	bl	801d494 <xTaskRemoveFromEventList>
 801c7be:	b108      	cbz	r0, 801c7c4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 801c7c0:	f000 fef4 	bl	801d5ac <vTaskMissedYield>
			--cTxLock;
 801c7c4:	3d01      	subs	r5, #1
 801c7c6:	b26d      	sxtb	r5, r5
 801c7c8:	e7dc      	b.n	801c784 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801c7ca:	6923      	ldr	r3, [r4, #16]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d0e9      	beq.n	801c7a4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801c7d0:	4630      	mov	r0, r6
 801c7d2:	f000 fe5f 	bl	801d494 <xTaskRemoveFromEventList>
 801c7d6:	b108      	cbz	r0, 801c7dc <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 801c7d8:	f000 fee8 	bl	801d5ac <vTaskMissedYield>
				--cRxLock;
 801c7dc:	3d01      	subs	r5, #1
 801c7de:	b26d      	sxtb	r5, r5
 801c7e0:	e7de      	b.n	801c7a0 <prvUnlockQueue+0x2e>

0801c7e2 <xQueueGenericReset>:
{
 801c7e2:	b538      	push	{r3, r4, r5, lr}
 801c7e4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 801c7e6:	4604      	mov	r4, r0
 801c7e8:	b940      	cbnz	r0, 801c7fc <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801c7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c7ee:	f383 8811 	msr	BASEPRI, r3
 801c7f2:	f3bf 8f6f 	isb	sy
 801c7f6:	f3bf 8f4f 	dsb	sy
 801c7fa:	e7fe      	b.n	801c7fa <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 801c7fc:	f001 f982 	bl	801db04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801c800:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 801c804:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801c806:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801c808:	434b      	muls	r3, r1
 801c80a:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801c80c:	1a5b      	subs	r3, r3, r1
 801c80e:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801c810:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801c812:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801c814:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 801c816:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801c818:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 801c81a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801c81e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 801c822:	b9a5      	cbnz	r5, 801c84e <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801c824:	6923      	ldr	r3, [r4, #16]
 801c826:	b173      	cbz	r3, 801c846 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801c828:	f104 0010 	add.w	r0, r4, #16
 801c82c:	f000 fe32 	bl	801d494 <xTaskRemoveFromEventList>
 801c830:	b148      	cbz	r0, 801c846 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 801c832:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801c836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c83a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801c83e:	f3bf 8f4f 	dsb	sy
 801c842:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 801c846:	f001 f97d 	bl	801db44 <vPortExitCritical>
}
 801c84a:	2001      	movs	r0, #1
 801c84c:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801c84e:	f104 0010 	add.w	r0, r4, #16
 801c852:	f7ff fef7 	bl	801c644 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801c856:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801c85a:	f7ff fef3 	bl	801c644 <vListInitialise>
 801c85e:	e7f2      	b.n	801c846 <xQueueGenericReset+0x64>

0801c860 <xQueueGenericCreateStatic>:
	{
 801c860:	b513      	push	{r0, r1, r4, lr}
 801c862:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801c864:	b940      	cbnz	r0, 801c878 <xQueueGenericCreateStatic+0x18>
 801c866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c86a:	f383 8811 	msr	BASEPRI, r3
 801c86e:	f3bf 8f6f 	isb	sy
 801c872:	f3bf 8f4f 	dsb	sy
 801c876:	e7fe      	b.n	801c876 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 801c878:	b943      	cbnz	r3, 801c88c <xQueueGenericCreateStatic+0x2c>
 801c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c87e:	f383 8811 	msr	BASEPRI, r3
 801c882:	f3bf 8f6f 	isb	sy
 801c886:	f3bf 8f4f 	dsb	sy
 801c88a:	e7fe      	b.n	801c88a <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801c88c:	b14a      	cbz	r2, 801c8a2 <xQueueGenericCreateStatic+0x42>
 801c88e:	b991      	cbnz	r1, 801c8b6 <xQueueGenericCreateStatic+0x56>
 801c890:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c894:	f383 8811 	msr	BASEPRI, r3
 801c898:	f3bf 8f6f 	isb	sy
 801c89c:	f3bf 8f4f 	dsb	sy
 801c8a0:	e7fe      	b.n	801c8a0 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801c8a2:	b141      	cbz	r1, 801c8b6 <xQueueGenericCreateStatic+0x56>
 801c8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c8a8:	f383 8811 	msr	BASEPRI, r3
 801c8ac:	f3bf 8f6f 	isb	sy
 801c8b0:	f3bf 8f4f 	dsb	sy
 801c8b4:	e7fe      	b.n	801c8b4 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 801c8b6:	2350      	movs	r3, #80	; 0x50
 801c8b8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 801c8ba:	9b01      	ldr	r3, [sp, #4]
 801c8bc:	2b50      	cmp	r3, #80	; 0x50
 801c8be:	d008      	beq.n	801c8d2 <xQueueGenericCreateStatic+0x72>
 801c8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c8c4:	f383 8811 	msr	BASEPRI, r3
 801c8c8:	f3bf 8f6f 	isb	sy
 801c8cc:	f3bf 8f4f 	dsb	sy
 801c8d0:	e7fe      	b.n	801c8d0 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 801c8d2:	2900      	cmp	r1, #0
 801c8d4:	bf08      	it	eq
 801c8d6:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801c8d8:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801c8da:	6022      	str	r2, [r4, #0]
 801c8dc:	2301      	movs	r3, #1
	pxNewQueue->uxItemSize = uxItemSize;
 801c8de:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801c8e2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801c8e6:	4619      	mov	r1, r3
 801c8e8:	4620      	mov	r0, r4
 801c8ea:	f7ff ff7a 	bl	801c7e2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 801c8ee:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801c8f2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 801c8f6:	4620      	mov	r0, r4
 801c8f8:	b002      	add	sp, #8
 801c8fa:	bd10      	pop	{r4, pc}

0801c8fc <xQueueGenericSend>:
{
 801c8fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c900:	b085      	sub	sp, #20
 801c902:	4688      	mov	r8, r1
 801c904:	9201      	str	r2, [sp, #4]
 801c906:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 801c908:	4604      	mov	r4, r0
 801c90a:	b940      	cbnz	r0, 801c91e <xQueueGenericSend+0x22>
 801c90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c910:	f383 8811 	msr	BASEPRI, r3
 801c914:	f3bf 8f6f 	isb	sy
 801c918:	f3bf 8f4f 	dsb	sy
 801c91c:	e7fe      	b.n	801c91c <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801c91e:	b951      	cbnz	r1, 801c936 <xQueueGenericSend+0x3a>
 801c920:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801c922:	b143      	cbz	r3, 801c936 <xQueueGenericSend+0x3a>
 801c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c928:	f383 8811 	msr	BASEPRI, r3
 801c92c:	f3bf 8f6f 	isb	sy
 801c930:	f3bf 8f4f 	dsb	sy
 801c934:	e7fe      	b.n	801c934 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801c936:	2f02      	cmp	r7, #2
 801c938:	d10b      	bne.n	801c952 <xQueueGenericSend+0x56>
 801c93a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c93c:	2b01      	cmp	r3, #1
 801c93e:	d008      	beq.n	801c952 <xQueueGenericSend+0x56>
 801c940:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c944:	f383 8811 	msr	BASEPRI, r3
 801c948:	f3bf 8f6f 	isb	sy
 801c94c:	f3bf 8f4f 	dsb	sy
 801c950:	e7fe      	b.n	801c950 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801c952:	f000 fe31 	bl	801d5b8 <xTaskGetSchedulerState>
 801c956:	4606      	mov	r6, r0
 801c958:	b950      	cbnz	r0, 801c970 <xQueueGenericSend+0x74>
 801c95a:	9b01      	ldr	r3, [sp, #4]
 801c95c:	b14b      	cbz	r3, 801c972 <xQueueGenericSend+0x76>
 801c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c962:	f383 8811 	msr	BASEPRI, r3
 801c966:	f3bf 8f6f 	isb	sy
 801c96a:	f3bf 8f4f 	dsb	sy
 801c96e:	e7fe      	b.n	801c96e <xQueueGenericSend+0x72>
 801c970:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 801c972:	f04f 0900 	mov.w	r9, #0
 801c976:	e037      	b.n	801c9e8 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 801c978:	9d01      	ldr	r5, [sp, #4]
 801c97a:	b91d      	cbnz	r5, 801c984 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 801c97c:	f001 f8e2 	bl	801db44 <vPortExitCritical>
			return errQUEUE_FULL;
 801c980:	2000      	movs	r0, #0
 801c982:	e052      	b.n	801ca2a <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 801c984:	b916      	cbnz	r6, 801c98c <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801c986:	a802      	add	r0, sp, #8
 801c988:	f000 fdc8 	bl	801d51c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801c98c:	f001 f8da 	bl	801db44 <vPortExitCritical>
		vTaskSuspendAll();
 801c990:	f000 fbcc 	bl	801d12c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801c994:	f001 f8b6 	bl	801db04 <vPortEnterCritical>
 801c998:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801c99c:	2bff      	cmp	r3, #255	; 0xff
 801c99e:	bf08      	it	eq
 801c9a0:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 801c9a4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801c9a8:	2bff      	cmp	r3, #255	; 0xff
 801c9aa:	bf08      	it	eq
 801c9ac:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 801c9b0:	f001 f8c8 	bl	801db44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801c9b4:	a901      	add	r1, sp, #4
 801c9b6:	a802      	add	r0, sp, #8
 801c9b8:	f000 fdbc 	bl	801d534 <xTaskCheckForTimeOut>
 801c9bc:	2800      	cmp	r0, #0
 801c9be:	d14a      	bne.n	801ca56 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801c9c0:	f001 f8a0 	bl	801db04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801c9c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801c9c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c9c8:	429a      	cmp	r2, r3
 801c9ca:	d131      	bne.n	801ca30 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801c9cc:	f001 f8ba 	bl	801db44 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801c9d0:	9901      	ldr	r1, [sp, #4]
 801c9d2:	f104 0010 	add.w	r0, r4, #16
 801c9d6:	f000 fd25 	bl	801d424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801c9da:	4620      	mov	r0, r4
 801c9dc:	f7ff fec9 	bl	801c772 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801c9e0:	f000 fc48 	bl	801d274 <xTaskResumeAll>
 801c9e4:	b360      	cbz	r0, 801ca40 <xQueueGenericSend+0x144>
 801c9e6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 801c9e8:	f001 f88c 	bl	801db04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801c9ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801c9ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c9f0:	429a      	cmp	r2, r3
 801c9f2:	d301      	bcc.n	801c9f8 <xQueueGenericSend+0xfc>
 801c9f4:	2f02      	cmp	r7, #2
 801c9f6:	d1bf      	bne.n	801c978 <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801c9f8:	463a      	mov	r2, r7
 801c9fa:	4641      	mov	r1, r8
 801c9fc:	4620      	mov	r0, r4
 801c9fe:	f7ff fe6d 	bl	801c6dc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ca02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ca04:	b11b      	cbz	r3, 801ca0e <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ca06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801ca0a:	f000 fd43 	bl	801d494 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 801ca0e:	b148      	cbz	r0, 801ca24 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 801ca10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801ca14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ca18:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801ca1c:	f3bf 8f4f 	dsb	sy
 801ca20:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801ca24:	f001 f88e 	bl	801db44 <vPortExitCritical>
				return pdPASS;
 801ca28:	2001      	movs	r0, #1
}
 801ca2a:	b005      	add	sp, #20
 801ca2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 801ca30:	f001 f888 	bl	801db44 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 801ca34:	4620      	mov	r0, r4
 801ca36:	f7ff fe9c 	bl	801c772 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801ca3a:	f000 fc1b 	bl	801d274 <xTaskResumeAll>
 801ca3e:	e7d2      	b.n	801c9e6 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 801ca40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801ca44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ca48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801ca4c:	f3bf 8f4f 	dsb	sy
 801ca50:	f3bf 8f6f 	isb	sy
 801ca54:	e7c7      	b.n	801c9e6 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 801ca56:	4620      	mov	r0, r4
 801ca58:	f7ff fe8b 	bl	801c772 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801ca5c:	f000 fc0a 	bl	801d274 <xTaskResumeAll>
 801ca60:	e78e      	b.n	801c980 <xQueueGenericSend+0x84>

0801ca62 <xQueueGenericSendFromISR>:
{
 801ca62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca66:	4689      	mov	r9, r1
 801ca68:	4690      	mov	r8, r2
 801ca6a:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 801ca6c:	4604      	mov	r4, r0
 801ca6e:	b940      	cbnz	r0, 801ca82 <xQueueGenericSendFromISR+0x20>
 801ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ca74:	f383 8811 	msr	BASEPRI, r3
 801ca78:	f3bf 8f6f 	isb	sy
 801ca7c:	f3bf 8f4f 	dsb	sy
 801ca80:	e7fe      	b.n	801ca80 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ca82:	b951      	cbnz	r1, 801ca9a <xQueueGenericSendFromISR+0x38>
 801ca84:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801ca86:	b143      	cbz	r3, 801ca9a <xQueueGenericSendFromISR+0x38>
 801ca88:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ca8c:	f383 8811 	msr	BASEPRI, r3
 801ca90:	f3bf 8f6f 	isb	sy
 801ca94:	f3bf 8f4f 	dsb	sy
 801ca98:	e7fe      	b.n	801ca98 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801ca9a:	2f02      	cmp	r7, #2
 801ca9c:	d10b      	bne.n	801cab6 <xQueueGenericSendFromISR+0x54>
 801ca9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801caa0:	2b01      	cmp	r3, #1
 801caa2:	d008      	beq.n	801cab6 <xQueueGenericSendFromISR+0x54>
 801caa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801caa8:	f383 8811 	msr	BASEPRI, r3
 801caac:	f3bf 8f6f 	isb	sy
 801cab0:	f3bf 8f4f 	dsb	sy
 801cab4:	e7fe      	b.n	801cab4 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801cab6:	f001 f93b 	bl	801dd30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801caba:	f3ef 8611 	mrs	r6, BASEPRI
 801cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cac2:	f383 8811 	msr	BASEPRI, r3
 801cac6:	f3bf 8f6f 	isb	sy
 801caca:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801cace:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801cad0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801cad2:	429a      	cmp	r2, r3
 801cad4:	d301      	bcc.n	801cada <xQueueGenericSendFromISR+0x78>
 801cad6:	2f02      	cmp	r7, #2
 801cad8:	d123      	bne.n	801cb22 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 801cada:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801cade:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 801cae0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801cae2:	463a      	mov	r2, r7
 801cae4:	4649      	mov	r1, r9
 801cae6:	4620      	mov	r0, r4
 801cae8:	f7ff fdf8 	bl	801c6dc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 801caec:	1c6b      	adds	r3, r5, #1
 801caee:	d113      	bne.n	801cb18 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801caf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801caf2:	b90b      	cbnz	r3, 801caf8 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 801caf4:	2001      	movs	r0, #1
 801caf6:	e00b      	b.n	801cb10 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801caf8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801cafc:	f000 fcca 	bl	801d494 <xTaskRemoveFromEventList>
 801cb00:	2800      	cmp	r0, #0
 801cb02:	d0f7      	beq.n	801caf4 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 801cb04:	f1b8 0f00 	cmp.w	r8, #0
 801cb08:	d0f4      	beq.n	801caf4 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801cb0a:	2001      	movs	r0, #1
 801cb0c:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801cb10:	f386 8811 	msr	BASEPRI, r6
}
 801cb14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801cb18:	3501      	adds	r5, #1
 801cb1a:	b26d      	sxtb	r5, r5
 801cb1c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 801cb20:	e7e8      	b.n	801caf4 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 801cb22:	2000      	movs	r0, #0
 801cb24:	e7f4      	b.n	801cb10 <xQueueGenericSendFromISR+0xae>

0801cb26 <xQueueReceive>:
{
 801cb26:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801cb2a:	460f      	mov	r7, r1
 801cb2c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801cb2e:	4604      	mov	r4, r0
 801cb30:	b940      	cbnz	r0, 801cb44 <xQueueReceive+0x1e>
	__asm volatile
 801cb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb36:	f383 8811 	msr	BASEPRI, r3
 801cb3a:	f3bf 8f6f 	isb	sy
 801cb3e:	f3bf 8f4f 	dsb	sy
 801cb42:	e7fe      	b.n	801cb42 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801cb44:	b951      	cbnz	r1, 801cb5c <xQueueReceive+0x36>
 801cb46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801cb48:	b143      	cbz	r3, 801cb5c <xQueueReceive+0x36>
 801cb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb4e:	f383 8811 	msr	BASEPRI, r3
 801cb52:	f3bf 8f6f 	isb	sy
 801cb56:	f3bf 8f4f 	dsb	sy
 801cb5a:	e7fe      	b.n	801cb5a <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801cb5c:	f000 fd2c 	bl	801d5b8 <xTaskGetSchedulerState>
 801cb60:	4606      	mov	r6, r0
 801cb62:	b950      	cbnz	r0, 801cb7a <xQueueReceive+0x54>
 801cb64:	9b01      	ldr	r3, [sp, #4]
 801cb66:	b14b      	cbz	r3, 801cb7c <xQueueReceive+0x56>
 801cb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb6c:	f383 8811 	msr	BASEPRI, r3
 801cb70:	f3bf 8f6f 	isb	sy
 801cb74:	f3bf 8f4f 	dsb	sy
 801cb78:	e7fe      	b.n	801cb78 <xQueueReceive+0x52>
 801cb7a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 801cb7c:	f04f 0800 	mov.w	r8, #0
 801cb80:	e03d      	b.n	801cbfe <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 801cb82:	9d01      	ldr	r5, [sp, #4]
 801cb84:	b91d      	cbnz	r5, 801cb8e <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 801cb86:	f000 ffdd 	bl	801db44 <vPortExitCritical>
				return errQUEUE_EMPTY;
 801cb8a:	2000      	movs	r0, #0
 801cb8c:	e056      	b.n	801cc3c <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 801cb8e:	b916      	cbnz	r6, 801cb96 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801cb90:	a802      	add	r0, sp, #8
 801cb92:	f000 fcc3 	bl	801d51c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801cb96:	f000 ffd5 	bl	801db44 <vPortExitCritical>
		vTaskSuspendAll();
 801cb9a:	f000 fac7 	bl	801d12c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801cb9e:	f000 ffb1 	bl	801db04 <vPortEnterCritical>
 801cba2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801cba6:	2bff      	cmp	r3, #255	; 0xff
 801cba8:	bf08      	it	eq
 801cbaa:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 801cbae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801cbb2:	2bff      	cmp	r3, #255	; 0xff
 801cbb4:	bf08      	it	eq
 801cbb6:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 801cbba:	f000 ffc3 	bl	801db44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801cbbe:	a901      	add	r1, sp, #4
 801cbc0:	a802      	add	r0, sp, #8
 801cbc2:	f000 fcb7 	bl	801d534 <xTaskCheckForTimeOut>
 801cbc6:	2800      	cmp	r0, #0
 801cbc8:	d141      	bne.n	801cc4e <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801cbca:	4620      	mov	r0, r4
 801cbcc:	f7ff fd7b 	bl	801c6c6 <prvIsQueueEmpty>
 801cbd0:	b3b8      	cbz	r0, 801cc42 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801cbd2:	9901      	ldr	r1, [sp, #4]
 801cbd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801cbd8:	f000 fc24 	bl	801d424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801cbdc:	4620      	mov	r0, r4
 801cbde:	f7ff fdc8 	bl	801c772 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801cbe2:	f000 fb47 	bl	801d274 <xTaskResumeAll>
 801cbe6:	b948      	cbnz	r0, 801cbfc <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 801cbe8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801cbec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cbf0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801cbf4:	f3bf 8f4f 	dsb	sy
 801cbf8:	f3bf 8f6f 	isb	sy
 801cbfc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 801cbfe:	f000 ff81 	bl	801db04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801cc02:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801cc04:	2d00      	cmp	r5, #0
 801cc06:	d0bc      	beq.n	801cb82 <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801cc08:	4639      	mov	r1, r7
 801cc0a:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801cc0c:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801cc0e:	f7ff fd9a 	bl	801c746 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801cc12:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801cc14:	6923      	ldr	r3, [r4, #16]
 801cc16:	b173      	cbz	r3, 801cc36 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801cc18:	f104 0010 	add.w	r0, r4, #16
 801cc1c:	f000 fc3a 	bl	801d494 <xTaskRemoveFromEventList>
 801cc20:	b148      	cbz	r0, 801cc36 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 801cc22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801cc26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cc2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801cc2e:	f3bf 8f4f 	dsb	sy
 801cc32:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801cc36:	f000 ff85 	bl	801db44 <vPortExitCritical>
				return pdPASS;
 801cc3a:	2001      	movs	r0, #1
}
 801cc3c:	b004      	add	sp, #16
 801cc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 801cc42:	4620      	mov	r0, r4
 801cc44:	f7ff fd95 	bl	801c772 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801cc48:	f000 fb14 	bl	801d274 <xTaskResumeAll>
 801cc4c:	e7d6      	b.n	801cbfc <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 801cc4e:	4620      	mov	r0, r4
 801cc50:	f7ff fd8f 	bl	801c772 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801cc54:	f000 fb0e 	bl	801d274 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801cc58:	4620      	mov	r0, r4
 801cc5a:	f7ff fd34 	bl	801c6c6 <prvIsQueueEmpty>
 801cc5e:	2800      	cmp	r0, #0
 801cc60:	d0cc      	beq.n	801cbfc <xQueueReceive+0xd6>
 801cc62:	e792      	b.n	801cb8a <xQueueReceive+0x64>

0801cc64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801cc64:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801cc66:	4a07      	ldr	r2, [pc, #28]	; (801cc84 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801cc68:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801cc6a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 801cc6e:	b92c      	cbnz	r4, 801cc7c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801cc70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801cc74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801cc78:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801cc7a:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801cc7c:	3301      	adds	r3, #1
 801cc7e:	2b08      	cmp	r3, #8
 801cc80:	d1f3      	bne.n	801cc6a <vQueueAddToRegistry+0x6>
 801cc82:	e7fa      	b.n	801cc7a <vQueueAddToRegistry+0x16>
 801cc84:	20007688 	.word	0x20007688

0801cc88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801cc88:	b570      	push	{r4, r5, r6, lr}
 801cc8a:	4604      	mov	r4, r0
 801cc8c:	460d      	mov	r5, r1
 801cc8e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801cc90:	f000 ff38 	bl	801db04 <vPortEnterCritical>
 801cc94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801cc98:	2bff      	cmp	r3, #255	; 0xff
 801cc9a:	bf04      	itt	eq
 801cc9c:	2300      	moveq	r3, #0
 801cc9e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 801cca2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801cca6:	2bff      	cmp	r3, #255	; 0xff
 801cca8:	bf04      	itt	eq
 801ccaa:	2300      	moveq	r3, #0
 801ccac:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 801ccb0:	f000 ff48 	bl	801db44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801ccb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ccb6:	b92b      	cbnz	r3, 801ccc4 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801ccb8:	4632      	mov	r2, r6
 801ccba:	4629      	mov	r1, r5
 801ccbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801ccc0:	f000 fbca 	bl	801d458 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801ccc4:	4620      	mov	r0, r4
	}
 801ccc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 801ccca:	f7ff bd52 	b.w	801c772 <prvUnlockQueue>
	...

0801ccd0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801ccd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccd4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801ccd6:	f000 ff15 	bl	801db04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801ccda:	4b30      	ldr	r3, [pc, #192]	; (801cd9c <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 801ccdc:	4e30      	ldr	r6, [pc, #192]	; (801cda0 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 801ccde:	681a      	ldr	r2, [r3, #0]
 801cce0:	4f30      	ldr	r7, [pc, #192]	; (801cda4 <prvAddNewTaskToReadyList+0xd4>)
 801cce2:	3201      	adds	r2, #1
 801cce4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801cce6:	6835      	ldr	r5, [r6, #0]
 801cce8:	2d00      	cmp	r5, #0
 801ccea:	d14b      	bne.n	801cd84 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801ccec:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	2b01      	cmp	r3, #1
 801ccf2:	d11f      	bne.n	801cd34 <prvAddNewTaskToReadyList+0x64>
 801ccf4:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801ccf6:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801ccf8:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801ccfa:	f7ff fca3 	bl	801c644 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801ccfe:	2d38      	cmp	r5, #56	; 0x38
 801cd00:	f108 0814 	add.w	r8, r8, #20
 801cd04:	d1f7      	bne.n	801ccf6 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 801cd06:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801cdcc <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 801cd0a:	4d27      	ldr	r5, [pc, #156]	; (801cda8 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 801cd0c:	4640      	mov	r0, r8
 801cd0e:	f7ff fc99 	bl	801c644 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801cd12:	4628      	mov	r0, r5
 801cd14:	f7ff fc96 	bl	801c644 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801cd18:	4824      	ldr	r0, [pc, #144]	; (801cdac <prvAddNewTaskToReadyList+0xdc>)
 801cd1a:	f7ff fc93 	bl	801c644 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801cd1e:	4824      	ldr	r0, [pc, #144]	; (801cdb0 <prvAddNewTaskToReadyList+0xe0>)
 801cd20:	f7ff fc90 	bl	801c644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801cd24:	4823      	ldr	r0, [pc, #140]	; (801cdb4 <prvAddNewTaskToReadyList+0xe4>)
 801cd26:	f7ff fc8d 	bl	801c644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801cd2a:	4b23      	ldr	r3, [pc, #140]	; (801cdb8 <prvAddNewTaskToReadyList+0xe8>)
 801cd2c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801cd30:	4b22      	ldr	r3, [pc, #136]	; (801cdbc <prvAddNewTaskToReadyList+0xec>)
 801cd32:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 801cd34:	4a22      	ldr	r2, [pc, #136]	; (801cdc0 <prvAddNewTaskToReadyList+0xf0>)
 801cd36:	6813      	ldr	r3, [r2, #0]
 801cd38:	3301      	adds	r3, #1
 801cd3a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 801cd3c:	4a21      	ldr	r2, [pc, #132]	; (801cdc4 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801cd3e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 801cd40:	6811      	ldr	r1, [r2, #0]
 801cd42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801cd44:	2014      	movs	r0, #20
 801cd46:	428b      	cmp	r3, r1
 801cd48:	fb00 7003 	mla	r0, r0, r3, r7
 801cd4c:	f104 0104 	add.w	r1, r4, #4
 801cd50:	bf88      	it	hi
 801cd52:	6013      	strhi	r3, [r2, #0]
 801cd54:	f7ff fc84 	bl	801c660 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801cd58:	f000 fef4 	bl	801db44 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801cd5c:	4b1a      	ldr	r3, [pc, #104]	; (801cdc8 <prvAddNewTaskToReadyList+0xf8>)
 801cd5e:	681b      	ldr	r3, [r3, #0]
 801cd60:	b173      	cbz	r3, 801cd80 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801cd62:	6833      	ldr	r3, [r6, #0]
 801cd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cd66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801cd68:	429a      	cmp	r2, r3
 801cd6a:	d209      	bcs.n	801cd80 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 801cd6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801cd70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cd74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801cd78:	f3bf 8f4f 	dsb	sy
 801cd7c:	f3bf 8f6f 	isb	sy
}
 801cd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 801cd84:	4b10      	ldr	r3, [pc, #64]	; (801cdc8 <prvAddNewTaskToReadyList+0xf8>)
 801cd86:	681b      	ldr	r3, [r3, #0]
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d1d3      	bne.n	801cd34 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801cd8c:	6833      	ldr	r3, [r6, #0]
 801cd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cd90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801cd92:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 801cd94:	bf98      	it	ls
 801cd96:	6034      	strls	r4, [r6, #0]
 801cd98:	e7cc      	b.n	801cd34 <prvAddNewTaskToReadyList+0x64>
 801cd9a:	bf00      	nop
 801cd9c:	20007b34 	.word	0x20007b34
 801cda0:	200076c8 	.word	0x200076c8
 801cda4:	200076d4 	.word	0x200076d4
 801cda8:	20007b5c 	.word	0x20007b5c
 801cdac:	20007b7c 	.word	0x20007b7c
 801cdb0:	20007ba8 	.word	0x20007ba8
 801cdb4:	20007b94 	.word	0x20007b94
 801cdb8:	200076cc 	.word	0x200076cc
 801cdbc:	200076d0 	.word	0x200076d0
 801cdc0:	20007b40 	.word	0x20007b40
 801cdc4:	20007b44 	.word	0x20007b44
 801cdc8:	20007b90 	.word	0x20007b90
 801cdcc:	20007b48 	.word	0x20007b48

0801cdd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801cdd2:	4b15      	ldr	r3, [pc, #84]	; (801ce28 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801cdd4:	4e15      	ldr	r6, [pc, #84]	; (801ce2c <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 801cdd6:	681d      	ldr	r5, [r3, #0]
{
 801cdd8:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801cdda:	6830      	ldr	r0, [r6, #0]
 801cddc:	3004      	adds	r0, #4
{
 801cdde:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801cde0:	f7ff fc61 	bl	801c6a6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801cde4:	1c63      	adds	r3, r4, #1
 801cde6:	d107      	bne.n	801cdf8 <prvAddCurrentTaskToDelayedList+0x28>
 801cde8:	b137      	cbz	r7, 801cdf8 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801cdea:	6831      	ldr	r1, [r6, #0]
 801cdec:	4810      	ldr	r0, [pc, #64]	; (801ce30 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801cdee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801cdf2:	3104      	adds	r1, #4
 801cdf4:	f7ff bc34 	b.w	801c660 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801cdf8:	6833      	ldr	r3, [r6, #0]
 801cdfa:	192c      	adds	r4, r5, r4
 801cdfc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801cdfe:	d307      	bcc.n	801ce10 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ce00:	4b0c      	ldr	r3, [pc, #48]	; (801ce34 <prvAddCurrentTaskToDelayedList+0x64>)
 801ce02:	6818      	ldr	r0, [r3, #0]
 801ce04:	6831      	ldr	r1, [r6, #0]
}
 801ce06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ce0a:	3104      	adds	r1, #4
 801ce0c:	f7ff bc34 	b.w	801c678 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ce10:	4b09      	ldr	r3, [pc, #36]	; (801ce38 <prvAddCurrentTaskToDelayedList+0x68>)
 801ce12:	6818      	ldr	r0, [r3, #0]
 801ce14:	6831      	ldr	r1, [r6, #0]
 801ce16:	3104      	adds	r1, #4
 801ce18:	f7ff fc2e 	bl	801c678 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801ce1c:	4b07      	ldr	r3, [pc, #28]	; (801ce3c <prvAddCurrentTaskToDelayedList+0x6c>)
 801ce1e:	681a      	ldr	r2, [r3, #0]
 801ce20:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 801ce22:	bf88      	it	hi
 801ce24:	601c      	strhi	r4, [r3, #0]
}
 801ce26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ce28:	20007bbc 	.word	0x20007bbc
 801ce2c:	200076c8 	.word	0x200076c8
 801ce30:	20007b94 	.word	0x20007b94
 801ce34:	200076d0 	.word	0x200076d0
 801ce38:	200076cc 	.word	0x200076cc
 801ce3c:	20007b70 	.word	0x20007b70

0801ce40 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ce40:	4a06      	ldr	r2, [pc, #24]	; (801ce5c <prvResetNextTaskUnblockTime+0x1c>)
 801ce42:	6813      	ldr	r3, [r2, #0]
 801ce44:	6819      	ldr	r1, [r3, #0]
 801ce46:	4b06      	ldr	r3, [pc, #24]	; (801ce60 <prvResetNextTaskUnblockTime+0x20>)
 801ce48:	b919      	cbnz	r1, 801ce52 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 801ce4a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801ce4e:	601a      	str	r2, [r3, #0]
}
 801ce50:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ce52:	6812      	ldr	r2, [r2, #0]
 801ce54:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801ce56:	68d2      	ldr	r2, [r2, #12]
 801ce58:	6852      	ldr	r2, [r2, #4]
 801ce5a:	e7f8      	b.n	801ce4e <prvResetNextTaskUnblockTime+0xe>
 801ce5c:	200076cc 	.word	0x200076cc
 801ce60:	20007b70 	.word	0x20007b70

0801ce64 <prvDeleteTCB>:
	{
 801ce64:	b510      	push	{r4, lr}
 801ce66:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801ce68:	3054      	adds	r0, #84	; 0x54
 801ce6a:	f001 f8ed 	bl	801e048 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801ce6e:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 801ce72:	b93b      	cbnz	r3, 801ce84 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 801ce74:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ce76:	f001 f845 	bl	801df04 <vPortFree>
				vPortFree( pxTCB );
 801ce7a:	4620      	mov	r0, r4
	}
 801ce7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 801ce80:	f001 b840 	b.w	801df04 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801ce84:	2b01      	cmp	r3, #1
 801ce86:	d0f8      	beq.n	801ce7a <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801ce88:	2b02      	cmp	r3, #2
 801ce8a:	d008      	beq.n	801ce9e <prvDeleteTCB+0x3a>
 801ce8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ce90:	f383 8811 	msr	BASEPRI, r3
 801ce94:	f3bf 8f6f 	isb	sy
 801ce98:	f3bf 8f4f 	dsb	sy
 801ce9c:	e7fe      	b.n	801ce9c <prvDeleteTCB+0x38>
	}
 801ce9e:	bd10      	pop	{r4, pc}

0801cea0 <prvIdleTask>:
{
 801cea0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801cea2:	4c13      	ldr	r4, [pc, #76]	; (801cef0 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801cea4:	4f13      	ldr	r7, [pc, #76]	; (801cef4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 801cea6:	4d14      	ldr	r5, [pc, #80]	; (801cef8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801cea8:	6823      	ldr	r3, [r4, #0]
 801ceaa:	b973      	cbnz	r3, 801ceca <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801ceac:	4b13      	ldr	r3, [pc, #76]	; (801cefc <prvIdleTask+0x5c>)
 801ceae:	681b      	ldr	r3, [r3, #0]
 801ceb0:	2b01      	cmp	r3, #1
 801ceb2:	d9f8      	bls.n	801cea6 <prvIdleTask+0x6>
				taskYIELD();
 801ceb4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801ceb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cebc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801cec0:	f3bf 8f4f 	dsb	sy
 801cec4:	f3bf 8f6f 	isb	sy
 801cec8:	e7ed      	b.n	801cea6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 801ceca:	f000 fe1b 	bl	801db04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ced2:	1d30      	adds	r0, r6, #4
 801ced4:	f7ff fbe7 	bl	801c6a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801ced8:	682b      	ldr	r3, [r5, #0]
 801ceda:	3b01      	subs	r3, #1
 801cedc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 801cede:	6823      	ldr	r3, [r4, #0]
 801cee0:	3b01      	subs	r3, #1
 801cee2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 801cee4:	f000 fe2e 	bl	801db44 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 801cee8:	4630      	mov	r0, r6
 801ceea:	f7ff ffbb 	bl	801ce64 <prvDeleteTCB>
 801ceee:	e7db      	b.n	801cea8 <prvIdleTask+0x8>
 801cef0:	20007b38 	.word	0x20007b38
 801cef4:	20007ba8 	.word	0x20007ba8
 801cef8:	20007b34 	.word	0x20007b34
 801cefc:	200076d4 	.word	0x200076d4

0801cf00 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801cf00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf04:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801cf08:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801cf0c:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801cf0e:	4606      	mov	r6, r0
 801cf10:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801cf12:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801cf14:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801cf16:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801cf18:	f001 f880 	bl	801e01c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801cf1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cf1e:	f1a9 0904 	sub.w	r9, r9, #4
 801cf22:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801cf24:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 801cf28:	2d00      	cmp	r5, #0
 801cf2a:	d040      	beq.n	801cfae <prvInitialiseNewTask.constprop.0+0xae>
 801cf2c:	1e6b      	subs	r3, r5, #1
 801cf2e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 801cf32:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801cf34:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 801cf38:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 801cf3c:	b108      	cbz	r0, 801cf42 <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801cf3e:	42ab      	cmp	r3, r5
 801cf40:	d1f8      	bne.n	801cf34 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801cf42:	2300      	movs	r3, #0
 801cf44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801cf48:	9d08      	ldr	r5, [sp, #32]
 801cf4a:	2d37      	cmp	r5, #55	; 0x37
 801cf4c:	bf28      	it	cs
 801cf4e:	2537      	movcs	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 801cf50:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 801cf54:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801cf56:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801cf58:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 801cf5a:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801cf5e:	f7ff fb7c 	bl	801c65a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801cf62:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801cf66:	f104 0018 	add.w	r0, r4, #24
 801cf6a:	f7ff fb76 	bl	801c65a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 801cf6e:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801cf72:	2260      	movs	r2, #96	; 0x60
 801cf74:	4651      	mov	r1, sl
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801cf76:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801cf78:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801cf7a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801cf7c:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801cf80:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801cf84:	f001 f84a 	bl	801e01c <memset>
 801cf88:	4b0a      	ldr	r3, [pc, #40]	; (801cfb4 <prvInitialiseNewTask.constprop.0+0xb4>)
 801cf8a:	65a3      	str	r3, [r4, #88]	; 0x58
 801cf8c:	4b0a      	ldr	r3, [pc, #40]	; (801cfb8 <prvInitialiseNewTask.constprop.0+0xb8>)
 801cf8e:	65e3      	str	r3, [r4, #92]	; 0x5c
 801cf90:	4b0a      	ldr	r3, [pc, #40]	; (801cfbc <prvInitialiseNewTask.constprop.0+0xbc>)
 801cf92:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801cf94:	463a      	mov	r2, r7
 801cf96:	4631      	mov	r1, r6
 801cf98:	4648      	mov	r0, r9
 801cf9a:	f000 fd8b 	bl	801dab4 <pxPortInitialiseStack>
 801cf9e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801cfa0:	f1b8 0f00 	cmp.w	r8, #0
 801cfa4:	d001      	beq.n	801cfaa <prvInitialiseNewTask.constprop.0+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801cfa6:	f8c8 4000 	str.w	r4, [r8]
}
 801cfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801cfae:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 801cfb2:	e7c9      	b.n	801cf48 <prvInitialiseNewTask.constprop.0+0x48>
 801cfb4:	08020660 	.word	0x08020660
 801cfb8:	08020680 	.word	0x08020680
 801cfbc:	08020640 	.word	0x08020640

0801cfc0 <xTaskCreateStatic>:
	{
 801cfc0:	b570      	push	{r4, r5, r6, lr}
 801cfc2:	b086      	sub	sp, #24
 801cfc4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 801cfc8:	b945      	cbnz	r5, 801cfdc <xTaskCreateStatic+0x1c>
 801cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cfce:	f383 8811 	msr	BASEPRI, r3
 801cfd2:	f3bf 8f6f 	isb	sy
 801cfd6:	f3bf 8f4f 	dsb	sy
 801cfda:	e7fe      	b.n	801cfda <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 801cfdc:	b944      	cbnz	r4, 801cff0 <xTaskCreateStatic+0x30>
 801cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cfe2:	f383 8811 	msr	BASEPRI, r3
 801cfe6:	f3bf 8f6f 	isb	sy
 801cfea:	f3bf 8f4f 	dsb	sy
 801cfee:	e7fe      	b.n	801cfee <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 801cff0:	26bc      	movs	r6, #188	; 0xbc
 801cff2:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801cff4:	9e05      	ldr	r6, [sp, #20]
 801cff6:	2ebc      	cmp	r6, #188	; 0xbc
 801cff8:	d008      	beq.n	801d00c <xTaskCreateStatic+0x4c>
 801cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cffe:	f383 8811 	msr	BASEPRI, r3
 801d002:	f3bf 8f6f 	isb	sy
 801d006:	f3bf 8f4f 	dsb	sy
 801d00a:	e7fe      	b.n	801d00a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801d00c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801d00e:	2502      	movs	r5, #2
 801d010:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801d014:	ad04      	add	r5, sp, #16
 801d016:	9501      	str	r5, [sp, #4]
 801d018:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d01a:	9402      	str	r4, [sp, #8]
 801d01c:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801d01e:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801d020:	f7ff ff6e 	bl	801cf00 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 801d024:	4620      	mov	r0, r4
 801d026:	f7ff fe53 	bl	801ccd0 <prvAddNewTaskToReadyList>
	}
 801d02a:	9804      	ldr	r0, [sp, #16]
 801d02c:	b006      	add	sp, #24
 801d02e:	bd70      	pop	{r4, r5, r6, pc}

0801d030 <xTaskCreate>:
	{
 801d030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d034:	4607      	mov	r7, r0
 801d036:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801d038:	0090      	lsls	r0, r2, #2
	{
 801d03a:	4688      	mov	r8, r1
 801d03c:	4616      	mov	r6, r2
 801d03e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801d040:	f000 fec8 	bl	801ddd4 <pvPortMalloc>
			if( pxStack != NULL )
 801d044:	4605      	mov	r5, r0
 801d046:	b1e8      	cbz	r0, 801d084 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801d048:	20bc      	movs	r0, #188	; 0xbc
 801d04a:	f000 fec3 	bl	801ddd4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801d04e:	4604      	mov	r4, r0
 801d050:	b1a8      	cbz	r0, 801d07e <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801d052:	2300      	movs	r3, #0
 801d054:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801d058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 801d05a:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801d05c:	9301      	str	r3, [sp, #4]
 801d05e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d060:	9002      	str	r0, [sp, #8]
 801d062:	9300      	str	r3, [sp, #0]
 801d064:	4632      	mov	r2, r6
 801d066:	464b      	mov	r3, r9
 801d068:	4641      	mov	r1, r8
 801d06a:	4638      	mov	r0, r7
 801d06c:	f7ff ff48 	bl	801cf00 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 801d070:	4620      	mov	r0, r4
 801d072:	f7ff fe2d 	bl	801ccd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801d076:	2001      	movs	r0, #1
	}
 801d078:	b005      	add	sp, #20
 801d07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 801d07e:	4628      	mov	r0, r5
 801d080:	f000 ff40 	bl	801df04 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801d084:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 801d088:	e7f6      	b.n	801d078 <xTaskCreate+0x48>
	...

0801d08c <vTaskStartScheduler>:
{
 801d08c:	b510      	push	{r4, lr}
 801d08e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801d090:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801d092:	aa07      	add	r2, sp, #28
 801d094:	a906      	add	r1, sp, #24
 801d096:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801d098:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801d09c:	f7ff faba 	bl	801c614 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801d0a0:	9b05      	ldr	r3, [sp, #20]
 801d0a2:	9302      	str	r3, [sp, #8]
 801d0a4:	9b06      	ldr	r3, [sp, #24]
 801d0a6:	9a07      	ldr	r2, [sp, #28]
 801d0a8:	4919      	ldr	r1, [pc, #100]	; (801d110 <vTaskStartScheduler+0x84>)
 801d0aa:	481a      	ldr	r0, [pc, #104]	; (801d114 <vTaskStartScheduler+0x88>)
 801d0ac:	e9cd 4300 	strd	r4, r3, [sp]
 801d0b0:	4623      	mov	r3, r4
 801d0b2:	f7ff ff85 	bl	801cfc0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801d0b6:	b340      	cbz	r0, 801d10a <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 801d0b8:	f000 fb24 	bl	801d704 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 801d0bc:	2801      	cmp	r0, #1
 801d0be:	d119      	bne.n	801d0f4 <vTaskStartScheduler+0x68>
 801d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d0c4:	f383 8811 	msr	BASEPRI, r3
 801d0c8:	f3bf 8f6f 	isb	sy
 801d0cc:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801d0d0:	4b11      	ldr	r3, [pc, #68]	; (801d118 <vTaskStartScheduler+0x8c>)
 801d0d2:	4a12      	ldr	r2, [pc, #72]	; (801d11c <vTaskStartScheduler+0x90>)
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	3354      	adds	r3, #84	; 0x54
 801d0d8:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 801d0da:	4b11      	ldr	r3, [pc, #68]	; (801d120 <vTaskStartScheduler+0x94>)
 801d0dc:	f04f 32ff 	mov.w	r2, #4294967295
 801d0e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801d0e2:	4b10      	ldr	r3, [pc, #64]	; (801d124 <vTaskStartScheduler+0x98>)
 801d0e4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801d0e6:	4b10      	ldr	r3, [pc, #64]	; (801d128 <vTaskStartScheduler+0x9c>)
 801d0e8:	601c      	str	r4, [r3, #0]
}
 801d0ea:	b008      	add	sp, #32
 801d0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 801d0f0:	f000 bd98 	b.w	801dc24 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801d0f4:	3001      	adds	r0, #1
 801d0f6:	d108      	bne.n	801d10a <vTaskStartScheduler+0x7e>
 801d0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d0fc:	f383 8811 	msr	BASEPRI, r3
 801d100:	f3bf 8f6f 	isb	sy
 801d104:	f3bf 8f4f 	dsb	sy
 801d108:	e7fe      	b.n	801d108 <vTaskStartScheduler+0x7c>
}
 801d10a:	b008      	add	sp, #32
 801d10c:	bd10      	pop	{r4, pc}
 801d10e:	bf00      	nop
 801d110:	0802062c 	.word	0x0802062c
 801d114:	0801cea1 	.word	0x0801cea1
 801d118:	200076c8 	.word	0x200076c8
 801d11c:	20000058 	.word	0x20000058
 801d120:	20007b70 	.word	0x20007b70
 801d124:	20007b90 	.word	0x20007b90
 801d128:	20007bbc 	.word	0x20007bbc

0801d12c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 801d12c:	4a02      	ldr	r2, [pc, #8]	; (801d138 <vTaskSuspendAll+0xc>)
 801d12e:	6813      	ldr	r3, [r2, #0]
 801d130:	3301      	adds	r3, #1
 801d132:	6013      	str	r3, [r2, #0]
}
 801d134:	4770      	bx	lr
 801d136:	bf00      	nop
 801d138:	20007b3c 	.word	0x20007b3c

0801d13c <xTaskGetTickCount>:
		xTicks = xTickCount;
 801d13c:	4b01      	ldr	r3, [pc, #4]	; (801d144 <xTaskGetTickCount+0x8>)
 801d13e:	6818      	ldr	r0, [r3, #0]
}
 801d140:	4770      	bx	lr
 801d142:	bf00      	nop
 801d144:	20007bbc 	.word	0x20007bbc

0801d148 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d148:	4b3f      	ldr	r3, [pc, #252]	; (801d248 <xTaskIncrementTick+0x100>)
 801d14a:	681b      	ldr	r3, [r3, #0]
{
 801d14c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d150:	2b00      	cmp	r3, #0
 801d152:	d173      	bne.n	801d23c <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801d154:	4b3d      	ldr	r3, [pc, #244]	; (801d24c <xTaskIncrementTick+0x104>)
 801d156:	681d      	ldr	r5, [r3, #0]
 801d158:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 801d15a:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801d15c:	b9bd      	cbnz	r5, 801d18e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 801d15e:	4b3c      	ldr	r3, [pc, #240]	; (801d250 <xTaskIncrementTick+0x108>)
 801d160:	681a      	ldr	r2, [r3, #0]
 801d162:	6812      	ldr	r2, [r2, #0]
 801d164:	b142      	cbz	r2, 801d178 <xTaskIncrementTick+0x30>
 801d166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d16a:	f383 8811 	msr	BASEPRI, r3
 801d16e:	f3bf 8f6f 	isb	sy
 801d172:	f3bf 8f4f 	dsb	sy
 801d176:	e7fe      	b.n	801d176 <xTaskIncrementTick+0x2e>
 801d178:	4a36      	ldr	r2, [pc, #216]	; (801d254 <xTaskIncrementTick+0x10c>)
 801d17a:	6819      	ldr	r1, [r3, #0]
 801d17c:	6810      	ldr	r0, [r2, #0]
 801d17e:	6018      	str	r0, [r3, #0]
 801d180:	6011      	str	r1, [r2, #0]
 801d182:	4a35      	ldr	r2, [pc, #212]	; (801d258 <xTaskIncrementTick+0x110>)
 801d184:	6813      	ldr	r3, [r2, #0]
 801d186:	3301      	adds	r3, #1
 801d188:	6013      	str	r3, [r2, #0]
 801d18a:	f7ff fe59 	bl	801ce40 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801d18e:	4e33      	ldr	r6, [pc, #204]	; (801d25c <xTaskIncrementTick+0x114>)
 801d190:	4f33      	ldr	r7, [pc, #204]	; (801d260 <xTaskIncrementTick+0x118>)
 801d192:	6833      	ldr	r3, [r6, #0]
 801d194:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 801d26c <xTaskIncrementTick+0x124>
 801d198:	429d      	cmp	r5, r3
BaseType_t xSwitchRequired = pdFALSE;
 801d19a:	f04f 0400 	mov.w	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 801d19e:	d211      	bcs.n	801d1c4 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801d1a0:	f8d8 3000 	ldr.w	r3, [r8]
 801d1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d1a6:	2214      	movs	r2, #20
 801d1a8:	4353      	muls	r3, r2
 801d1aa:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 801d1ac:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 801d1ae:	4b2d      	ldr	r3, [pc, #180]	; (801d264 <xTaskIncrementTick+0x11c>)
 801d1b0:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 801d1b2:	bf28      	it	cs
 801d1b4:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	bf18      	it	ne
 801d1ba:	2401      	movne	r4, #1
}
 801d1bc:	4620      	mov	r0, r4
 801d1be:	b003      	add	sp, #12
 801d1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801d1c4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 801d250 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 801d1c8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801d270 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801d1cc:	f8d9 3000 	ldr.w	r3, [r9]
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	b91b      	cbnz	r3, 801d1dc <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d1d4:	f04f 33ff 	mov.w	r3, #4294967295
 801d1d8:	6033      	str	r3, [r6, #0]
					break;
 801d1da:	e7e1      	b.n	801d1a0 <xTaskIncrementTick+0x58>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d1dc:	f8d9 3000 	ldr.w	r3, [r9]
 801d1e0:	68db      	ldr	r3, [r3, #12]
 801d1e2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801d1e6:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 801d1ea:	4295      	cmp	r5, r2
 801d1ec:	d201      	bcs.n	801d1f2 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 801d1ee:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801d1f0:	e7d6      	b.n	801d1a0 <xTaskIncrementTick+0x58>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801d1f2:	f10b 0104 	add.w	r1, fp, #4
 801d1f6:	4608      	mov	r0, r1
 801d1f8:	9101      	str	r1, [sp, #4]
 801d1fa:	f7ff fa54 	bl	801c6a6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801d1fe:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 801d202:	9901      	ldr	r1, [sp, #4]
 801d204:	b122      	cbz	r2, 801d210 <xTaskIncrementTick+0xc8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801d206:	f10b 0018 	add.w	r0, fp, #24
 801d20a:	f7ff fa4c 	bl	801c6a6 <uxListRemove>
 801d20e:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 801d210:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 801d214:	f8da 2000 	ldr.w	r2, [sl]
 801d218:	2314      	movs	r3, #20
 801d21a:	4290      	cmp	r0, r2
 801d21c:	bf88      	it	hi
 801d21e:	f8ca 0000 	strhi.w	r0, [sl]
 801d222:	fb03 7000 	mla	r0, r3, r0, r7
 801d226:	f7ff fa1b 	bl	801c660 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801d22a:	f8d8 1000 	ldr.w	r1, [r8]
 801d22e:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 801d232:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 801d234:	429a      	cmp	r2, r3
 801d236:	bf28      	it	cs
 801d238:	2401      	movcs	r4, #1
 801d23a:	e7c7      	b.n	801d1cc <xTaskIncrementTick+0x84>
		++xPendedTicks;
 801d23c:	4a0a      	ldr	r2, [pc, #40]	; (801d268 <xTaskIncrementTick+0x120>)
 801d23e:	6813      	ldr	r3, [r2, #0]
 801d240:	3301      	adds	r3, #1
 801d242:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 801d244:	2400      	movs	r4, #0
	return xSwitchRequired;
 801d246:	e7b9      	b.n	801d1bc <xTaskIncrementTick+0x74>
 801d248:	20007b3c 	.word	0x20007b3c
 801d24c:	20007bbc 	.word	0x20007bbc
 801d250:	200076cc 	.word	0x200076cc
 801d254:	200076d0 	.word	0x200076d0
 801d258:	20007b74 	.word	0x20007b74
 801d25c:	20007b70 	.word	0x20007b70
 801d260:	200076d4 	.word	0x200076d4
 801d264:	20007bc0 	.word	0x20007bc0
 801d268:	20007b78 	.word	0x20007b78
 801d26c:	200076c8 	.word	0x200076c8
 801d270:	20007b44 	.word	0x20007b44

0801d274 <xTaskResumeAll>:
{
 801d274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 801d276:	4c31      	ldr	r4, [pc, #196]	; (801d33c <xTaskResumeAll+0xc8>)
 801d278:	6823      	ldr	r3, [r4, #0]
 801d27a:	b943      	cbnz	r3, 801d28e <xTaskResumeAll+0x1a>
 801d27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d280:	f383 8811 	msr	BASEPRI, r3
 801d284:	f3bf 8f6f 	isb	sy
 801d288:	f3bf 8f4f 	dsb	sy
 801d28c:	e7fe      	b.n	801d28c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 801d28e:	f000 fc39 	bl	801db04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801d292:	6823      	ldr	r3, [r4, #0]
 801d294:	3b01      	subs	r3, #1
 801d296:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d298:	6824      	ldr	r4, [r4, #0]
 801d29a:	b12c      	cbz	r4, 801d2a8 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 801d29c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801d29e:	f000 fc51 	bl	801db44 <vPortExitCritical>
}
 801d2a2:	4620      	mov	r0, r4
 801d2a4:	b003      	add	sp, #12
 801d2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801d2a8:	4b25      	ldr	r3, [pc, #148]	; (801d340 <xTaskResumeAll+0xcc>)
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d0f5      	beq.n	801d29c <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801d2b0:	4d24      	ldr	r5, [pc, #144]	; (801d344 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 801d2b2:	4e25      	ldr	r6, [pc, #148]	; (801d348 <xTaskResumeAll+0xd4>)
 801d2b4:	4f25      	ldr	r7, [pc, #148]	; (801d34c <xTaskResumeAll+0xd8>)
 801d2b6:	e01e      	b.n	801d2f6 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d2b8:	68eb      	ldr	r3, [r5, #12]
 801d2ba:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801d2bc:	f104 0018 	add.w	r0, r4, #24
 801d2c0:	f7ff f9f1 	bl	801c6a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801d2c4:	1d21      	adds	r1, r4, #4
 801d2c6:	4608      	mov	r0, r1
 801d2c8:	9101      	str	r1, [sp, #4]
 801d2ca:	f7ff f9ec 	bl	801c6a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801d2ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801d2d0:	6832      	ldr	r2, [r6, #0]
 801d2d2:	9901      	ldr	r1, [sp, #4]
 801d2d4:	2014      	movs	r0, #20
 801d2d6:	4293      	cmp	r3, r2
 801d2d8:	fb00 7003 	mla	r0, r0, r3, r7
 801d2dc:	bf88      	it	hi
 801d2de:	6033      	strhi	r3, [r6, #0]
 801d2e0:	f7ff f9be 	bl	801c660 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801d2e4:	4b1a      	ldr	r3, [pc, #104]	; (801d350 <xTaskResumeAll+0xdc>)
 801d2e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2ec:	429a      	cmp	r2, r3
 801d2ee:	d302      	bcc.n	801d2f6 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 801d2f0:	4b18      	ldr	r3, [pc, #96]	; (801d354 <xTaskResumeAll+0xe0>)
 801d2f2:	2201      	movs	r2, #1
 801d2f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801d2f6:	682b      	ldr	r3, [r5, #0]
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	d1dd      	bne.n	801d2b8 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 801d2fc:	b10c      	cbz	r4, 801d302 <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 801d2fe:	f7ff fd9f 	bl	801ce40 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801d302:	4d15      	ldr	r5, [pc, #84]	; (801d358 <xTaskResumeAll+0xe4>)
 801d304:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 801d306:	b144      	cbz	r4, 801d31a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 801d308:	4e12      	ldr	r6, [pc, #72]	; (801d354 <xTaskResumeAll+0xe0>)
 801d30a:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 801d30c:	f7ff ff1c 	bl	801d148 <xTaskIncrementTick>
 801d310:	b100      	cbz	r0, 801d314 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 801d312:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801d314:	3c01      	subs	r4, #1
 801d316:	d1f9      	bne.n	801d30c <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 801d318:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 801d31a:	4b0e      	ldr	r3, [pc, #56]	; (801d354 <xTaskResumeAll+0xe0>)
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d0bc      	beq.n	801d29c <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 801d322:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801d326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d32a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801d32e:	f3bf 8f4f 	dsb	sy
 801d332:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801d336:	2401      	movs	r4, #1
 801d338:	e7b1      	b.n	801d29e <xTaskResumeAll+0x2a>
 801d33a:	bf00      	nop
 801d33c:	20007b3c 	.word	0x20007b3c
 801d340:	20007b34 	.word	0x20007b34
 801d344:	20007b7c 	.word	0x20007b7c
 801d348:	20007b44 	.word	0x20007b44
 801d34c:	200076d4 	.word	0x200076d4
 801d350:	200076c8 	.word	0x200076c8
 801d354:	20007bc0 	.word	0x20007bc0
 801d358:	20007b78 	.word	0x20007b78

0801d35c <vTaskDelay>:
	{
 801d35c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801d35e:	b950      	cbnz	r0, 801d376 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 801d360:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801d364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d368:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801d36c:	f3bf 8f4f 	dsb	sy
 801d370:	f3bf 8f6f 	isb	sy
	}
 801d374:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 801d376:	4b0a      	ldr	r3, [pc, #40]	; (801d3a0 <vTaskDelay+0x44>)
 801d378:	6819      	ldr	r1, [r3, #0]
 801d37a:	b141      	cbz	r1, 801d38e <vTaskDelay+0x32>
 801d37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d380:	f383 8811 	msr	BASEPRI, r3
 801d384:	f3bf 8f6f 	isb	sy
 801d388:	f3bf 8f4f 	dsb	sy
 801d38c:	e7fe      	b.n	801d38c <vTaskDelay+0x30>
			vTaskSuspendAll();
 801d38e:	f7ff fecd 	bl	801d12c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801d392:	f7ff fd1d 	bl	801cdd0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 801d396:	f7ff ff6d 	bl	801d274 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801d39a:	2800      	cmp	r0, #0
 801d39c:	d0e0      	beq.n	801d360 <vTaskDelay+0x4>
 801d39e:	e7e9      	b.n	801d374 <vTaskDelay+0x18>
 801d3a0:	20007b3c 	.word	0x20007b3c

0801d3a4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801d3a4:	4b19      	ldr	r3, [pc, #100]	; (801d40c <vTaskSwitchContext+0x68>)
 801d3a6:	681a      	ldr	r2, [r3, #0]
 801d3a8:	4b19      	ldr	r3, [pc, #100]	; (801d410 <vTaskSwitchContext+0x6c>)
{
 801d3aa:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801d3ac:	b112      	cbz	r2, 801d3b4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 801d3ae:	2201      	movs	r2, #1
 801d3b0:	601a      	str	r2, [r3, #0]
}
 801d3b2:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d3b4:	4d17      	ldr	r5, [pc, #92]	; (801d414 <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 801d3b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d3b8:	682a      	ldr	r2, [r5, #0]
 801d3ba:	4917      	ldr	r1, [pc, #92]	; (801d418 <vTaskSwitchContext+0x74>)
 801d3bc:	2614      	movs	r6, #20
 801d3be:	fb06 f302 	mul.w	r3, r6, r2
 801d3c2:	18c8      	adds	r0, r1, r3
 801d3c4:	58cc      	ldr	r4, [r1, r3]
 801d3c6:	b1ac      	cbz	r4, 801d3f4 <vTaskSwitchContext+0x50>
 801d3c8:	6844      	ldr	r4, [r0, #4]
 801d3ca:	3308      	adds	r3, #8
 801d3cc:	6864      	ldr	r4, [r4, #4]
 801d3ce:	6044      	str	r4, [r0, #4]
 801d3d0:	440b      	add	r3, r1
 801d3d2:	429c      	cmp	r4, r3
 801d3d4:	bf04      	itt	eq
 801d3d6:	6863      	ldreq	r3, [r4, #4]
 801d3d8:	6043      	streq	r3, [r0, #4]
 801d3da:	2314      	movs	r3, #20
 801d3dc:	fb03 1102 	mla	r1, r3, r2, r1
 801d3e0:	684b      	ldr	r3, [r1, #4]
 801d3e2:	68d9      	ldr	r1, [r3, #12]
 801d3e4:	4b0d      	ldr	r3, [pc, #52]	; (801d41c <vTaskSwitchContext+0x78>)
 801d3e6:	6019      	str	r1, [r3, #0]
 801d3e8:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	4a0c      	ldr	r2, [pc, #48]	; (801d420 <vTaskSwitchContext+0x7c>)
 801d3ee:	3354      	adds	r3, #84	; 0x54
 801d3f0:	6013      	str	r3, [r2, #0]
}
 801d3f2:	e7de      	b.n	801d3b2 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d3f4:	b942      	cbnz	r2, 801d408 <vTaskSwitchContext+0x64>
 801d3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d3fa:	f383 8811 	msr	BASEPRI, r3
 801d3fe:	f3bf 8f6f 	isb	sy
 801d402:	f3bf 8f4f 	dsb	sy
 801d406:	e7fe      	b.n	801d406 <vTaskSwitchContext+0x62>
 801d408:	3a01      	subs	r2, #1
 801d40a:	e7d8      	b.n	801d3be <vTaskSwitchContext+0x1a>
 801d40c:	20007b3c 	.word	0x20007b3c
 801d410:	20007bc0 	.word	0x20007bc0
 801d414:	20007b44 	.word	0x20007b44
 801d418:	200076d4 	.word	0x200076d4
 801d41c:	200076c8 	.word	0x200076c8
 801d420:	20000058 	.word	0x20000058

0801d424 <vTaskPlaceOnEventList>:
{
 801d424:	b510      	push	{r4, lr}
 801d426:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 801d428:	b940      	cbnz	r0, 801d43c <vTaskPlaceOnEventList+0x18>
 801d42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d42e:	f383 8811 	msr	BASEPRI, r3
 801d432:	f3bf 8f6f 	isb	sy
 801d436:	f3bf 8f4f 	dsb	sy
 801d43a:	e7fe      	b.n	801d43a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801d43c:	4b05      	ldr	r3, [pc, #20]	; (801d454 <vTaskPlaceOnEventList+0x30>)
 801d43e:	6819      	ldr	r1, [r3, #0]
 801d440:	3118      	adds	r1, #24
 801d442:	f7ff f919 	bl	801c678 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801d446:	4620      	mov	r0, r4
 801d448:	2101      	movs	r1, #1
}
 801d44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801d44e:	f7ff bcbf 	b.w	801cdd0 <prvAddCurrentTaskToDelayedList>
 801d452:	bf00      	nop
 801d454:	200076c8 	.word	0x200076c8

0801d458 <vTaskPlaceOnEventListRestricted>:
	{
 801d458:	b538      	push	{r3, r4, r5, lr}
 801d45a:	460d      	mov	r5, r1
 801d45c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 801d45e:	b940      	cbnz	r0, 801d472 <vTaskPlaceOnEventListRestricted+0x1a>
 801d460:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d464:	f383 8811 	msr	BASEPRI, r3
 801d468:	f3bf 8f6f 	isb	sy
 801d46c:	f3bf 8f4f 	dsb	sy
 801d470:	e7fe      	b.n	801d470 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801d472:	4b07      	ldr	r3, [pc, #28]	; (801d490 <vTaskPlaceOnEventListRestricted+0x38>)
 801d474:	6819      	ldr	r1, [r3, #0]
 801d476:	3118      	adds	r1, #24
 801d478:	f7ff f8f2 	bl	801c660 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 801d47c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801d47e:	4621      	mov	r1, r4
 801d480:	bf0c      	ite	eq
 801d482:	4628      	moveq	r0, r5
 801d484:	f04f 30ff 	movne.w	r0, #4294967295
	}
 801d488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801d48c:	f7ff bca0 	b.w	801cdd0 <prvAddCurrentTaskToDelayedList>
 801d490:	200076c8 	.word	0x200076c8

0801d494 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d494:	68c3      	ldr	r3, [r0, #12]
{
 801d496:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d498:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801d49a:	b944      	cbnz	r4, 801d4ae <xTaskRemoveFromEventList+0x1a>
 801d49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d4a0:	f383 8811 	msr	BASEPRI, r3
 801d4a4:	f3bf 8f6f 	isb	sy
 801d4a8:	f3bf 8f4f 	dsb	sy
 801d4ac:	e7fe      	b.n	801d4ac <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801d4ae:	f104 0118 	add.w	r1, r4, #24
 801d4b2:	4608      	mov	r0, r1
 801d4b4:	9101      	str	r1, [sp, #4]
 801d4b6:	f7ff f8f6 	bl	801c6a6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d4ba:	4b12      	ldr	r3, [pc, #72]	; (801d504 <xTaskRemoveFromEventList+0x70>)
 801d4bc:	9901      	ldr	r1, [sp, #4]
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	b9eb      	cbnz	r3, 801d4fe <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801d4c2:	1d21      	adds	r1, r4, #4
 801d4c4:	4608      	mov	r0, r1
 801d4c6:	9101      	str	r1, [sp, #4]
 801d4c8:	f7ff f8ed 	bl	801c6a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801d4cc:	4a0e      	ldr	r2, [pc, #56]	; (801d508 <xTaskRemoveFromEventList+0x74>)
 801d4ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801d4d0:	6810      	ldr	r0, [r2, #0]
 801d4d2:	9901      	ldr	r1, [sp, #4]
 801d4d4:	4283      	cmp	r3, r0
 801d4d6:	bf88      	it	hi
 801d4d8:	6013      	strhi	r3, [r2, #0]
 801d4da:	4a0c      	ldr	r2, [pc, #48]	; (801d50c <xTaskRemoveFromEventList+0x78>)
 801d4dc:	2014      	movs	r0, #20
 801d4de:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801d4e2:	f7ff f8bd 	bl	801c660 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801d4e6:	4b0a      	ldr	r3, [pc, #40]	; (801d510 <xTaskRemoveFromEventList+0x7c>)
 801d4e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d4ee:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 801d4f0:	bf85      	ittet	hi
 801d4f2:	4b08      	ldrhi	r3, [pc, #32]	; (801d514 <xTaskRemoveFromEventList+0x80>)
 801d4f4:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 801d4f6:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 801d4f8:	6018      	strhi	r0, [r3, #0]
}
 801d4fa:	b002      	add	sp, #8
 801d4fc:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801d4fe:	4806      	ldr	r0, [pc, #24]	; (801d518 <xTaskRemoveFromEventList+0x84>)
 801d500:	e7ef      	b.n	801d4e2 <xTaskRemoveFromEventList+0x4e>
 801d502:	bf00      	nop
 801d504:	20007b3c 	.word	0x20007b3c
 801d508:	20007b44 	.word	0x20007b44
 801d50c:	200076d4 	.word	0x200076d4
 801d510:	200076c8 	.word	0x200076c8
 801d514:	20007bc0 	.word	0x20007bc0
 801d518:	20007b7c 	.word	0x20007b7c

0801d51c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801d51c:	4b03      	ldr	r3, [pc, #12]	; (801d52c <vTaskInternalSetTimeOutState+0x10>)
 801d51e:	681b      	ldr	r3, [r3, #0]
 801d520:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801d522:	4b03      	ldr	r3, [pc, #12]	; (801d530 <vTaskInternalSetTimeOutState+0x14>)
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	6043      	str	r3, [r0, #4]
}
 801d528:	4770      	bx	lr
 801d52a:	bf00      	nop
 801d52c:	20007b74 	.word	0x20007b74
 801d530:	20007bbc 	.word	0x20007bbc

0801d534 <xTaskCheckForTimeOut>:
{
 801d534:	b570      	push	{r4, r5, r6, lr}
 801d536:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 801d538:	4605      	mov	r5, r0
 801d53a:	b940      	cbnz	r0, 801d54e <xTaskCheckForTimeOut+0x1a>
 801d53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d540:	f383 8811 	msr	BASEPRI, r3
 801d544:	f3bf 8f6f 	isb	sy
 801d548:	f3bf 8f4f 	dsb	sy
 801d54c:	e7fe      	b.n	801d54c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 801d54e:	b941      	cbnz	r1, 801d562 <xTaskCheckForTimeOut+0x2e>
 801d550:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d554:	f383 8811 	msr	BASEPRI, r3
 801d558:	f3bf 8f6f 	isb	sy
 801d55c:	f3bf 8f4f 	dsb	sy
 801d560:	e7fe      	b.n	801d560 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 801d562:	f000 facf 	bl	801db04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801d566:	4b0f      	ldr	r3, [pc, #60]	; (801d5a4 <xTaskCheckForTimeOut+0x70>)
 801d568:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 801d56a:	6823      	ldr	r3, [r4, #0]
 801d56c:	1c5a      	adds	r2, r3, #1
 801d56e:	d010      	beq.n	801d592 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801d570:	480d      	ldr	r0, [pc, #52]	; (801d5a8 <xTaskCheckForTimeOut+0x74>)
 801d572:	682e      	ldr	r6, [r5, #0]
 801d574:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801d576:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801d578:	4286      	cmp	r6, r0
 801d57a:	d001      	beq.n	801d580 <xTaskCheckForTimeOut+0x4c>
 801d57c:	428a      	cmp	r2, r1
 801d57e:	d90f      	bls.n	801d5a0 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801d580:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801d582:	4283      	cmp	r3, r0
 801d584:	d90a      	bls.n	801d59c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 801d586:	1a5b      	subs	r3, r3, r1
 801d588:	4413      	add	r3, r2
 801d58a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801d58c:	4628      	mov	r0, r5
 801d58e:	f7ff ffc5 	bl	801d51c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 801d592:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801d594:	f000 fad6 	bl	801db44 <vPortExitCritical>
}
 801d598:	4620      	mov	r0, r4
 801d59a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 801d59c:	2300      	movs	r3, #0
 801d59e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 801d5a0:	2401      	movs	r4, #1
 801d5a2:	e7f7      	b.n	801d594 <xTaskCheckForTimeOut+0x60>
 801d5a4:	20007bbc 	.word	0x20007bbc
 801d5a8:	20007b74 	.word	0x20007b74

0801d5ac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801d5ac:	4b01      	ldr	r3, [pc, #4]	; (801d5b4 <vTaskMissedYield+0x8>)
 801d5ae:	2201      	movs	r2, #1
 801d5b0:	601a      	str	r2, [r3, #0]
}
 801d5b2:	4770      	bx	lr
 801d5b4:	20007bc0 	.word	0x20007bc0

0801d5b8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801d5b8:	4b05      	ldr	r3, [pc, #20]	; (801d5d0 <xTaskGetSchedulerState+0x18>)
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	b133      	cbz	r3, 801d5cc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d5be:	4b05      	ldr	r3, [pc, #20]	; (801d5d4 <xTaskGetSchedulerState+0x1c>)
 801d5c0:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	bf0c      	ite	eq
 801d5c6:	2002      	moveq	r0, #2
 801d5c8:	2000      	movne	r0, #0
 801d5ca:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801d5cc:	2001      	movs	r0, #1
	}
 801d5ce:	4770      	bx	lr
 801d5d0:	20007b90 	.word	0x20007b90
 801d5d4:	20007b3c 	.word	0x20007b3c

0801d5d8 <xTaskPriorityDisinherit>:
	{
 801d5d8:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 801d5da:	b910      	cbnz	r0, 801d5e2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 801d5dc:	2000      	movs	r0, #0
	}
 801d5de:	b002      	add	sp, #8
 801d5e0:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 801d5e2:	4b1c      	ldr	r3, [pc, #112]	; (801d654 <xTaskPriorityDisinherit+0x7c>)
 801d5e4:	681c      	ldr	r4, [r3, #0]
 801d5e6:	4284      	cmp	r4, r0
 801d5e8:	d008      	beq.n	801d5fc <xTaskPriorityDisinherit+0x24>
 801d5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d5ee:	f383 8811 	msr	BASEPRI, r3
 801d5f2:	f3bf 8f6f 	isb	sy
 801d5f6:	f3bf 8f4f 	dsb	sy
 801d5fa:	e7fe      	b.n	801d5fa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 801d5fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d5fe:	b943      	cbnz	r3, 801d612 <xTaskPriorityDisinherit+0x3a>
 801d600:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d604:	f383 8811 	msr	BASEPRI, r3
 801d608:	f3bf 8f6f 	isb	sy
 801d60c:	f3bf 8f4f 	dsb	sy
 801d610:	e7fe      	b.n	801d610 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801d612:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801d614:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 801d616:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801d618:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 801d61a:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801d61c:	d0de      	beq.n	801d5dc <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801d61e:	2b00      	cmp	r3, #0
 801d620:	d1dc      	bne.n	801d5dc <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801d622:	1d21      	adds	r1, r4, #4
 801d624:	4608      	mov	r0, r1
 801d626:	9101      	str	r1, [sp, #4]
 801d628:	f7ff f83d 	bl	801c6a6 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801d62c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 801d62e:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801d630:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d632:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801d636:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801d638:	4a07      	ldr	r2, [pc, #28]	; (801d658 <xTaskPriorityDisinherit+0x80>)
 801d63a:	6810      	ldr	r0, [r2, #0]
 801d63c:	4283      	cmp	r3, r0
 801d63e:	bf88      	it	hi
 801d640:	6013      	strhi	r3, [r2, #0]
 801d642:	4a06      	ldr	r2, [pc, #24]	; (801d65c <xTaskPriorityDisinherit+0x84>)
 801d644:	2014      	movs	r0, #20
 801d646:	fb00 2003 	mla	r0, r0, r3, r2
 801d64a:	f7ff f809 	bl	801c660 <vListInsertEnd>
					xReturn = pdTRUE;
 801d64e:	2001      	movs	r0, #1
		return xReturn;
 801d650:	e7c5      	b.n	801d5de <xTaskPriorityDisinherit+0x6>
 801d652:	bf00      	nop
 801d654:	200076c8 	.word	0x200076c8
 801d658:	20007b44 	.word	0x20007b44
 801d65c:	200076d4 	.word	0x200076d4

0801d660 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801d660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 801d662:	4c11      	ldr	r4, [pc, #68]	; (801d6a8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 801d664:	f000 fa4e 	bl	801db04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 801d668:	6825      	ldr	r5, [r4, #0]
 801d66a:	b9bd      	cbnz	r5, 801d69c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 801d66c:	4f0f      	ldr	r7, [pc, #60]	; (801d6ac <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 801d66e:	4e10      	ldr	r6, [pc, #64]	; (801d6b0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 801d670:	4638      	mov	r0, r7
 801d672:	f7fe ffe7 	bl	801c644 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801d676:	4630      	mov	r0, r6
 801d678:	f7fe ffe4 	bl	801c644 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801d67c:	4b0d      	ldr	r3, [pc, #52]	; (801d6b4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801d67e:	4a0e      	ldr	r2, [pc, #56]	; (801d6b8 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 801d680:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801d682:	4b0e      	ldr	r3, [pc, #56]	; (801d6bc <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801d684:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 801d686:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801d688:	200a      	movs	r0, #10
 801d68a:	4b0d      	ldr	r3, [pc, #52]	; (801d6c0 <prvCheckForValidListAndQueue+0x60>)
 801d68c:	9500      	str	r5, [sp, #0]
 801d68e:	f7ff f8e7 	bl	801c860 <xQueueGenericCreateStatic>
 801d692:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801d694:	b110      	cbz	r0, 801d69c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801d696:	490b      	ldr	r1, [pc, #44]	; (801d6c4 <prvCheckForValidListAndQueue+0x64>)
 801d698:	f7ff fae4 	bl	801cc64 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 801d69c:	b003      	add	sp, #12
 801d69e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 801d6a2:	f000 ba4f 	b.w	801db44 <vPortExitCritical>
 801d6a6:	bf00      	nop
 801d6a8:	20007ce8 	.word	0x20007ce8
 801d6ac:	20007c6c 	.word	0x20007c6c
 801d6b0:	20007c80 	.word	0x20007c80
 801d6b4:	20007bc4 	.word	0x20007bc4
 801d6b8:	20007bcc 	.word	0x20007bcc
 801d6bc:	20007bc8 	.word	0x20007bc8
 801d6c0:	20007c98 	.word	0x20007c98
 801d6c4:	08020631 	.word	0x08020631

0801d6c8 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 801d6c8:	4291      	cmp	r1, r2
{
 801d6ca:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801d6cc:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801d6ce:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 801d6d0:	d80a      	bhi.n	801d6e8 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d6d2:	1ad2      	subs	r2, r2, r3
 801d6d4:	6983      	ldr	r3, [r0, #24]
 801d6d6:	429a      	cmp	r2, r3
 801d6d8:	d20d      	bcs.n	801d6f6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801d6da:	4b08      	ldr	r3, [pc, #32]	; (801d6fc <prvInsertTimerInActiveList+0x34>)
 801d6dc:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801d6de:	6818      	ldr	r0, [r3, #0]
 801d6e0:	f7fe ffca 	bl	801c678 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801d6e4:	2000      	movs	r0, #0
}
 801d6e6:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801d6e8:	429a      	cmp	r2, r3
 801d6ea:	d201      	bcs.n	801d6f0 <prvInsertTimerInActiveList+0x28>
 801d6ec:	4299      	cmp	r1, r3
 801d6ee:	d202      	bcs.n	801d6f6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801d6f0:	4b03      	ldr	r3, [pc, #12]	; (801d700 <prvInsertTimerInActiveList+0x38>)
 801d6f2:	1d01      	adds	r1, r0, #4
 801d6f4:	e7f3      	b.n	801d6de <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 801d6f6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801d6f8:	e7f5      	b.n	801d6e6 <prvInsertTimerInActiveList+0x1e>
 801d6fa:	bf00      	nop
 801d6fc:	20007bc8 	.word	0x20007bc8
 801d700:	20007bc4 	.word	0x20007bc4

0801d704 <xTimerCreateTimerTask>:
{
 801d704:	b510      	push	{r4, lr}
 801d706:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801d708:	f7ff ffaa 	bl	801d660 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801d70c:	4b12      	ldr	r3, [pc, #72]	; (801d758 <xTimerCreateTimerTask+0x54>)
 801d70e:	681b      	ldr	r3, [r3, #0]
 801d710:	b1b3      	cbz	r3, 801d740 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801d712:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801d714:	aa07      	add	r2, sp, #28
 801d716:	a906      	add	r1, sp, #24
 801d718:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801d71a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801d71e:	f7fe ff85 	bl	801c62c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801d722:	9b05      	ldr	r3, [sp, #20]
 801d724:	9302      	str	r3, [sp, #8]
 801d726:	9b06      	ldr	r3, [sp, #24]
 801d728:	9301      	str	r3, [sp, #4]
 801d72a:	2302      	movs	r3, #2
 801d72c:	9300      	str	r3, [sp, #0]
 801d72e:	9a07      	ldr	r2, [sp, #28]
 801d730:	490a      	ldr	r1, [pc, #40]	; (801d75c <xTimerCreateTimerTask+0x58>)
 801d732:	480b      	ldr	r0, [pc, #44]	; (801d760 <xTimerCreateTimerTask+0x5c>)
 801d734:	4623      	mov	r3, r4
 801d736:	f7ff fc43 	bl	801cfc0 <xTaskCreateStatic>
 801d73a:	4b0a      	ldr	r3, [pc, #40]	; (801d764 <xTimerCreateTimerTask+0x60>)
 801d73c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801d73e:	b940      	cbnz	r0, 801d752 <xTimerCreateTimerTask+0x4e>
 801d740:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d744:	f383 8811 	msr	BASEPRI, r3
 801d748:	f3bf 8f6f 	isb	sy
 801d74c:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801d750:	e7fe      	b.n	801d750 <xTimerCreateTimerTask+0x4c>
}
 801d752:	2001      	movs	r0, #1
 801d754:	b008      	add	sp, #32
 801d756:	bd10      	pop	{r4, pc}
 801d758:	20007ce8 	.word	0x20007ce8
 801d75c:	08020636 	.word	0x08020636
 801d760:	0801d86d 	.word	0x0801d86d
 801d764:	20007cec 	.word	0x20007cec

0801d768 <xTimerGenericCommand>:
{
 801d768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801d76a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 801d76c:	4604      	mov	r4, r0
{
 801d76e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 801d770:	b940      	cbnz	r0, 801d784 <xTimerGenericCommand+0x1c>
 801d772:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d776:	f383 8811 	msr	BASEPRI, r3
 801d77a:	f3bf 8f6f 	isb	sy
 801d77e:	f3bf 8f4f 	dsb	sy
 801d782:	e7fe      	b.n	801d782 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 801d784:	4d0d      	ldr	r5, [pc, #52]	; (801d7bc <xTimerGenericCommand+0x54>)
 801d786:	6828      	ldr	r0, [r5, #0]
 801d788:	b180      	cbz	r0, 801d7ac <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801d78a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801d78c:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801d790:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801d792:	dc0d      	bgt.n	801d7b0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801d794:	f7ff ff10 	bl	801d5b8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801d798:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801d79a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801d79c:	bf08      	it	eq
 801d79e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801d7a0:	6828      	ldr	r0, [r5, #0]
 801d7a2:	bf18      	it	ne
 801d7a4:	461a      	movne	r2, r3
 801d7a6:	4669      	mov	r1, sp
 801d7a8:	f7ff f8a8 	bl	801c8fc <xQueueGenericSend>
}
 801d7ac:	b004      	add	sp, #16
 801d7ae:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801d7b0:	2300      	movs	r3, #0
 801d7b2:	4669      	mov	r1, sp
 801d7b4:	f7ff f955 	bl	801ca62 <xQueueGenericSendFromISR>
 801d7b8:	e7f8      	b.n	801d7ac <xTimerGenericCommand+0x44>
 801d7ba:	bf00      	nop
 801d7bc:	20007ce8 	.word	0x20007ce8

0801d7c0 <prvSampleTimeNow>:
{
 801d7c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 801d7c4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801d868 <prvSampleTimeNow+0xa8>
{
 801d7c8:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 801d7ca:	f7ff fcb7 	bl	801d13c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801d7ce:	f8d8 3000 	ldr.w	r3, [r8]
 801d7d2:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 801d7d4:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 801d7d6:	d940      	bls.n	801d85a <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801d7d8:	4f21      	ldr	r7, [pc, #132]	; (801d860 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801d7da:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801d7de:	683b      	ldr	r3, [r7, #0]
 801d7e0:	681a      	ldr	r2, [r3, #0]
 801d7e2:	b95a      	cbnz	r2, 801d7fc <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 801d7e4:	4a1f      	ldr	r2, [pc, #124]	; (801d864 <prvSampleTimeNow+0xa4>)
 801d7e6:	6811      	ldr	r1, [r2, #0]
 801d7e8:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 801d7ea:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 801d7ec:	2301      	movs	r3, #1
}
 801d7ee:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 801d7f0:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 801d7f2:	f8c8 5000 	str.w	r5, [r8]
}
 801d7f6:	b004      	add	sp, #16
 801d7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801d7fc:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d7fe:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801d800:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801d804:	1d21      	adds	r1, r4, #4
 801d806:	4608      	mov	r0, r1
 801d808:	9103      	str	r1, [sp, #12]
 801d80a:	f7fe ff4c 	bl	801c6a6 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801d80e:	6a23      	ldr	r3, [r4, #32]
 801d810:	4620      	mov	r0, r4
 801d812:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801d814:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801d818:	9903      	ldr	r1, [sp, #12]
 801d81a:	f013 0f04 	tst.w	r3, #4
 801d81e:	d0de      	beq.n	801d7de <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801d820:	69a3      	ldr	r3, [r4, #24]
 801d822:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 801d824:	459a      	cmp	sl, r3
 801d826:	d205      	bcs.n	801d834 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801d828:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801d82a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801d82c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801d82e:	f7fe ff23 	bl	801c678 <vListInsert>
 801d832:	e7d4      	b.n	801d7de <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801d834:	2300      	movs	r3, #0
 801d836:	f8cd 9000 	str.w	r9, [sp]
 801d83a:	4652      	mov	r2, sl
 801d83c:	4619      	mov	r1, r3
 801d83e:	4620      	mov	r0, r4
 801d840:	f7ff ff92 	bl	801d768 <xTimerGenericCommand>
				configASSERT( xResult );
 801d844:	2800      	cmp	r0, #0
 801d846:	d1ca      	bne.n	801d7de <prvSampleTimeNow+0x1e>
 801d848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d84c:	f383 8811 	msr	BASEPRI, r3
 801d850:	f3bf 8f6f 	isb	sy
 801d854:	f3bf 8f4f 	dsb	sy
 801d858:	e7fe      	b.n	801d858 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 801d85a:	2300      	movs	r3, #0
 801d85c:	e7c7      	b.n	801d7ee <prvSampleTimeNow+0x2e>
 801d85e:	bf00      	nop
 801d860:	20007bc4 	.word	0x20007bc4
 801d864:	20007bc8 	.word	0x20007bc8
 801d868:	20007c94 	.word	0x20007c94

0801d86c <prvTimerTask>:
{
 801d86c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801d870:	4d6e      	ldr	r5, [pc, #440]	; (801da2c <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801d872:	4e6f      	ldr	r6, [pc, #444]	; (801da30 <prvTimerTask+0x1c4>)
{
 801d874:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801d876:	682b      	ldr	r3, [r5, #0]
 801d878:	f8d3 8000 	ldr.w	r8, [r3]
 801d87c:	f1b8 0f00 	cmp.w	r8, #0
 801d880:	d035      	beq.n	801d8ee <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801d882:	68db      	ldr	r3, [r3, #12]
 801d884:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801d888:	2400      	movs	r4, #0
	vTaskSuspendAll();
 801d88a:	f7ff fc4f 	bl	801d12c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801d88e:	a804      	add	r0, sp, #16
 801d890:	f7ff ff96 	bl	801d7c0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801d894:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801d896:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 801d898:	2b00      	cmp	r3, #0
 801d89a:	d169      	bne.n	801d970 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801d89c:	2c00      	cmp	r4, #0
 801d89e:	d14c      	bne.n	801d93a <prvTimerTask+0xce>
 801d8a0:	4540      	cmp	r0, r8
 801d8a2:	d350      	bcc.n	801d946 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 801d8a4:	f7ff fce6 	bl	801d274 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d8a8:	682b      	ldr	r3, [r5, #0]
 801d8aa:	68db      	ldr	r3, [r3, #12]
 801d8ac:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801d8ae:	1d38      	adds	r0, r7, #4
 801d8b0:	f7fe fef9 	bl	801c6a6 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801d8b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d8b8:	0758      	lsls	r0, r3, #29
 801d8ba:	d51a      	bpl.n	801d8f2 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801d8bc:	69b9      	ldr	r1, [r7, #24]
 801d8be:	4643      	mov	r3, r8
 801d8c0:	464a      	mov	r2, r9
 801d8c2:	4441      	add	r1, r8
 801d8c4:	4638      	mov	r0, r7
 801d8c6:	f7ff feff 	bl	801d6c8 <prvInsertTimerInActiveList>
 801d8ca:	b1b0      	cbz	r0, 801d8fa <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801d8cc:	9400      	str	r4, [sp, #0]
 801d8ce:	4623      	mov	r3, r4
 801d8d0:	4642      	mov	r2, r8
 801d8d2:	4621      	mov	r1, r4
 801d8d4:	4638      	mov	r0, r7
 801d8d6:	f7ff ff47 	bl	801d768 <xTimerGenericCommand>
			configASSERT( xResult );
 801d8da:	b970      	cbnz	r0, 801d8fa <prvTimerTask+0x8e>
 801d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d8e0:	f383 8811 	msr	BASEPRI, r3
 801d8e4:	f3bf 8f6f 	isb	sy
 801d8e8:	f3bf 8f4f 	dsb	sy
 801d8ec:	e7fe      	b.n	801d8ec <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801d8ee:	2401      	movs	r4, #1
 801d8f0:	e7cb      	b.n	801d88a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801d8f2:	f023 0301 	bic.w	r3, r3, #1
 801d8f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801d8fa:	6a3b      	ldr	r3, [r7, #32]
 801d8fc:	4638      	mov	r0, r7
 801d8fe:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801d900:	6830      	ldr	r0, [r6, #0]
 801d902:	2200      	movs	r2, #0
 801d904:	a904      	add	r1, sp, #16
 801d906:	f7ff f90e 	bl	801cb26 <xQueueReceive>
 801d90a:	2800      	cmp	r0, #0
 801d90c:	d0b3      	beq.n	801d876 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801d90e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801d910:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801d912:	2b00      	cmp	r3, #0
 801d914:	db2f      	blt.n	801d976 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801d916:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801d918:	6963      	ldr	r3, [r4, #20]
 801d91a:	2b00      	cmp	r3, #0
 801d91c:	d132      	bne.n	801d984 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801d91e:	a803      	add	r0, sp, #12
 801d920:	f7ff ff4e 	bl	801d7c0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801d924:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801d926:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 801d928:	2b09      	cmp	r3, #9
 801d92a:	d8e9      	bhi.n	801d900 <prvTimerTask+0x94>
 801d92c:	e8df f003 	tbb	[pc, r3]
 801d930:	572e2e2e 	.word	0x572e2e2e
 801d934:	2e2e765e 	.word	0x2e2e765e
 801d938:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801d93a:	4b3e      	ldr	r3, [pc, #248]	; (801da34 <prvTimerTask+0x1c8>)
 801d93c:	681b      	ldr	r3, [r3, #0]
 801d93e:	681c      	ldr	r4, [r3, #0]
 801d940:	fab4 f484 	clz	r4, r4
 801d944:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801d946:	6830      	ldr	r0, [r6, #0]
 801d948:	4622      	mov	r2, r4
 801d94a:	eba8 0109 	sub.w	r1, r8, r9
 801d94e:	f7ff f99b 	bl	801cc88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801d952:	f7ff fc8f 	bl	801d274 <xTaskResumeAll>
 801d956:	2800      	cmp	r0, #0
 801d958:	d1d2      	bne.n	801d900 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 801d95a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801d95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d962:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801d966:	f3bf 8f4f 	dsb	sy
 801d96a:	f3bf 8f6f 	isb	sy
 801d96e:	e7c7      	b.n	801d900 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 801d970:	f7ff fc80 	bl	801d274 <xTaskResumeAll>
}
 801d974:	e7c4      	b.n	801d900 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801d976:	9b05      	ldr	r3, [sp, #20]
 801d978:	9907      	ldr	r1, [sp, #28]
 801d97a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801d97c:	9b04      	ldr	r3, [sp, #16]
 801d97e:	2b00      	cmp	r3, #0
 801d980:	dbbe      	blt.n	801d900 <prvTimerTask+0x94>
 801d982:	e7c8      	b.n	801d916 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801d984:	1d20      	adds	r0, r4, #4
 801d986:	f7fe fe8e 	bl	801c6a6 <uxListRemove>
 801d98a:	e7c8      	b.n	801d91e <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801d98c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801d990:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801d992:	f043 0301 	orr.w	r3, r3, #1
 801d996:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801d99a:	9b05      	ldr	r3, [sp, #20]
 801d99c:	4620      	mov	r0, r4
 801d99e:	4419      	add	r1, r3
 801d9a0:	f7ff fe92 	bl	801d6c8 <prvInsertTimerInActiveList>
 801d9a4:	2800      	cmp	r0, #0
 801d9a6:	d0ab      	beq.n	801d900 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801d9a8:	6a23      	ldr	r3, [r4, #32]
 801d9aa:	4620      	mov	r0, r4
 801d9ac:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801d9ae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801d9b2:	0759      	lsls	r1, r3, #29
 801d9b4:	d5a4      	bpl.n	801d900 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801d9b6:	69a2      	ldr	r2, [r4, #24]
 801d9b8:	9905      	ldr	r1, [sp, #20]
 801d9ba:	2300      	movs	r3, #0
 801d9bc:	440a      	add	r2, r1
 801d9be:	9300      	str	r3, [sp, #0]
 801d9c0:	4619      	mov	r1, r3
 801d9c2:	4620      	mov	r0, r4
 801d9c4:	f7ff fed0 	bl	801d768 <xTimerGenericCommand>
							configASSERT( xResult );
 801d9c8:	2800      	cmp	r0, #0
 801d9ca:	d199      	bne.n	801d900 <prvTimerTask+0x94>
 801d9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d9d0:	f383 8811 	msr	BASEPRI, r3
 801d9d4:	f3bf 8f6f 	isb	sy
 801d9d8:	f3bf 8f4f 	dsb	sy
 801d9dc:	e7fe      	b.n	801d9dc <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801d9de:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801d9e2:	f023 0301 	bic.w	r3, r3, #1
 801d9e6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 801d9ea:	e789      	b.n	801d900 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801d9ec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801d9f0:	f043 0301 	orr.w	r3, r3, #1
 801d9f4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801d9f8:	9905      	ldr	r1, [sp, #20]
 801d9fa:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801d9fc:	b941      	cbnz	r1, 801da10 <prvTimerTask+0x1a4>
 801d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801da02:	f383 8811 	msr	BASEPRI, r3
 801da06:	f3bf 8f6f 	isb	sy
 801da0a:	f3bf 8f4f 	dsb	sy
 801da0e:	e7fe      	b.n	801da0e <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801da10:	4603      	mov	r3, r0
 801da12:	4401      	add	r1, r0
 801da14:	4620      	mov	r0, r4
 801da16:	f7ff fe57 	bl	801d6c8 <prvInsertTimerInActiveList>
					break;
 801da1a:	e771      	b.n	801d900 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801da1c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801da20:	079a      	lsls	r2, r3, #30
 801da22:	d4de      	bmi.n	801d9e2 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 801da24:	4620      	mov	r0, r4
 801da26:	f000 fa6d 	bl	801df04 <vPortFree>
 801da2a:	e769      	b.n	801d900 <prvTimerTask+0x94>
 801da2c:	20007bc4 	.word	0x20007bc4
 801da30:	20007ce8 	.word	0x20007ce8
 801da34:	20007bc8 	.word	0x20007bc8

0801da38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801da38:	4808      	ldr	r0, [pc, #32]	; (801da5c <prvPortStartFirstTask+0x24>)
 801da3a:	6800      	ldr	r0, [r0, #0]
 801da3c:	6800      	ldr	r0, [r0, #0]
 801da3e:	f380 8808 	msr	MSP, r0
 801da42:	f04f 0000 	mov.w	r0, #0
 801da46:	f380 8814 	msr	CONTROL, r0
 801da4a:	b662      	cpsie	i
 801da4c:	b661      	cpsie	f
 801da4e:	f3bf 8f4f 	dsb	sy
 801da52:	f3bf 8f6f 	isb	sy
 801da56:	df00      	svc	0
 801da58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801da5a:	0000      	.short	0x0000
 801da5c:	e000ed08 	.word	0xe000ed08

0801da60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801da60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801da70 <vPortEnableVFP+0x10>
 801da64:	6801      	ldr	r1, [r0, #0]
 801da66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801da6a:	6001      	str	r1, [r0, #0]
 801da6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801da6e:	0000      	.short	0x0000
 801da70:	e000ed88 	.word	0xe000ed88

0801da74 <prvTaskExitError>:
{
 801da74:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801da76:	2300      	movs	r3, #0
 801da78:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 801da7a:	4b0d      	ldr	r3, [pc, #52]	; (801dab0 <prvTaskExitError+0x3c>)
 801da7c:	681b      	ldr	r3, [r3, #0]
 801da7e:	3301      	adds	r3, #1
 801da80:	d008      	beq.n	801da94 <prvTaskExitError+0x20>
 801da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 801da86:	f383 8811 	msr	BASEPRI, r3
 801da8a:	f3bf 8f6f 	isb	sy
 801da8e:	f3bf 8f4f 	dsb	sy
 801da92:	e7fe      	b.n	801da92 <prvTaskExitError+0x1e>
 801da94:	f04f 0350 	mov.w	r3, #80	; 0x50
 801da98:	f383 8811 	msr	BASEPRI, r3
 801da9c:	f3bf 8f6f 	isb	sy
 801daa0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 801daa4:	9b01      	ldr	r3, [sp, #4]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d0fc      	beq.n	801daa4 <prvTaskExitError+0x30>
}
 801daaa:	b002      	add	sp, #8
 801daac:	4770      	bx	lr
 801daae:	bf00      	nop
 801dab0:	20000054 	.word	0x20000054

0801dab4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801dab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801dab8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801dabc:	4b07      	ldr	r3, [pc, #28]	; (801dadc <pxPortInitialiseStack+0x28>)
 801dabe:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801dac2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801dac6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801daca:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801dace:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801dad2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801dad6:	3844      	subs	r0, #68	; 0x44
 801dad8:	4770      	bx	lr
 801dada:	bf00      	nop
 801dadc:	0801da75 	.word	0x0801da75

0801dae0 <SVC_Handler>:
	__asm volatile (
 801dae0:	4b07      	ldr	r3, [pc, #28]	; (801db00 <pxCurrentTCBConst2>)
 801dae2:	6819      	ldr	r1, [r3, #0]
 801dae4:	6808      	ldr	r0, [r1, #0]
 801dae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daea:	f380 8809 	msr	PSP, r0
 801daee:	f3bf 8f6f 	isb	sy
 801daf2:	f04f 0000 	mov.w	r0, #0
 801daf6:	f380 8811 	msr	BASEPRI, r0
 801dafa:	4770      	bx	lr
 801dafc:	f3af 8000 	nop.w

0801db00 <pxCurrentTCBConst2>:
 801db00:	200076c8 	.word	0x200076c8

0801db04 <vPortEnterCritical>:
 801db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801db08:	f383 8811 	msr	BASEPRI, r3
 801db0c:	f3bf 8f6f 	isb	sy
 801db10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 801db14:	4a0a      	ldr	r2, [pc, #40]	; (801db40 <vPortEnterCritical+0x3c>)
 801db16:	6813      	ldr	r3, [r2, #0]
 801db18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801db1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 801db1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801db1e:	d10e      	bne.n	801db3e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801db20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801db24:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 801db28:	b2db      	uxtb	r3, r3
 801db2a:	b143      	cbz	r3, 801db3e <vPortEnterCritical+0x3a>
 801db2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801db30:	f383 8811 	msr	BASEPRI, r3
 801db34:	f3bf 8f6f 	isb	sy
 801db38:	f3bf 8f4f 	dsb	sy
 801db3c:	e7fe      	b.n	801db3c <vPortEnterCritical+0x38>
}
 801db3e:	4770      	bx	lr
 801db40:	20000054 	.word	0x20000054

0801db44 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 801db44:	4a08      	ldr	r2, [pc, #32]	; (801db68 <vPortExitCritical+0x24>)
 801db46:	6813      	ldr	r3, [r2, #0]
 801db48:	b943      	cbnz	r3, 801db5c <vPortExitCritical+0x18>
 801db4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801db4e:	f383 8811 	msr	BASEPRI, r3
 801db52:	f3bf 8f6f 	isb	sy
 801db56:	f3bf 8f4f 	dsb	sy
 801db5a:	e7fe      	b.n	801db5a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 801db5c:	3b01      	subs	r3, #1
 801db5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801db60:	b90b      	cbnz	r3, 801db66 <vPortExitCritical+0x22>
	__asm volatile
 801db62:	f383 8811 	msr	BASEPRI, r3
}
 801db66:	4770      	bx	lr
 801db68:	20000054 	.word	0x20000054
 801db6c:	00000000 	.word	0x00000000

0801db70 <PendSV_Handler>:
	__asm volatile
 801db70:	f3ef 8009 	mrs	r0, PSP
 801db74:	f3bf 8f6f 	isb	sy
 801db78:	4b15      	ldr	r3, [pc, #84]	; (801dbd0 <pxCurrentTCBConst>)
 801db7a:	681a      	ldr	r2, [r3, #0]
 801db7c:	f01e 0f10 	tst.w	lr, #16
 801db80:	bf08      	it	eq
 801db82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801db86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db8a:	6010      	str	r0, [r2, #0]
 801db8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801db90:	f04f 0050 	mov.w	r0, #80	; 0x50
 801db94:	f380 8811 	msr	BASEPRI, r0
 801db98:	f3bf 8f4f 	dsb	sy
 801db9c:	f3bf 8f6f 	isb	sy
 801dba0:	f7ff fc00 	bl	801d3a4 <vTaskSwitchContext>
 801dba4:	f04f 0000 	mov.w	r0, #0
 801dba8:	f380 8811 	msr	BASEPRI, r0
 801dbac:	bc09      	pop	{r0, r3}
 801dbae:	6819      	ldr	r1, [r3, #0]
 801dbb0:	6808      	ldr	r0, [r1, #0]
 801dbb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbb6:	f01e 0f10 	tst.w	lr, #16
 801dbba:	bf08      	it	eq
 801dbbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801dbc0:	f380 8809 	msr	PSP, r0
 801dbc4:	f3bf 8f6f 	isb	sy
 801dbc8:	4770      	bx	lr
 801dbca:	bf00      	nop
 801dbcc:	f3af 8000 	nop.w

0801dbd0 <pxCurrentTCBConst>:
 801dbd0:	200076c8 	.word	0x200076c8

0801dbd4 <xPortSysTickHandler>:
{
 801dbd4:	b508      	push	{r3, lr}
	__asm volatile
 801dbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dbda:	f383 8811 	msr	BASEPRI, r3
 801dbde:	f3bf 8f6f 	isb	sy
 801dbe2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 801dbe6:	f7ff faaf 	bl	801d148 <xTaskIncrementTick>
 801dbea:	b128      	cbz	r0, 801dbf8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801dbec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801dbf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801dbf4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 801dbf8:	2300      	movs	r3, #0
 801dbfa:	f383 8811 	msr	BASEPRI, r3
}
 801dbfe:	bd08      	pop	{r3, pc}

0801dc00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801dc00:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 801dc04:	2300      	movs	r3, #0
 801dc06:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801dc08:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801dc0a:	4b05      	ldr	r3, [pc, #20]	; (801dc20 <vPortSetupTimerInterrupt+0x20>)
 801dc0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801dc10:	681b      	ldr	r3, [r3, #0]
 801dc12:	fbb3 f3f1 	udiv	r3, r3, r1
 801dc16:	3b01      	subs	r3, #1
 801dc18:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801dc1a:	2307      	movs	r3, #7
 801dc1c:	6113      	str	r3, [r2, #16]
}
 801dc1e:	4770      	bx	lr
 801dc20:	20000000 	.word	0x20000000

0801dc24 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801dc24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 801dc28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801dc2a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 801dc2e:	4a3a      	ldr	r2, [pc, #232]	; (801dd18 <xPortStartScheduler+0xf4>)
 801dc30:	4291      	cmp	r1, r2
 801dc32:	d108      	bne.n	801dc46 <xPortStartScheduler+0x22>
	__asm volatile
 801dc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dc38:	f383 8811 	msr	BASEPRI, r3
 801dc3c:	f3bf 8f6f 	isb	sy
 801dc40:	f3bf 8f4f 	dsb	sy
 801dc44:	e7fe      	b.n	801dc44 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801dc46:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 801dc4a:	4b34      	ldr	r3, [pc, #208]	; (801dd1c <xPortStartScheduler+0xf8>)
 801dc4c:	429a      	cmp	r2, r3
 801dc4e:	d108      	bne.n	801dc62 <xPortStartScheduler+0x3e>
 801dc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dc54:	f383 8811 	msr	BASEPRI, r3
 801dc58:	f3bf 8f6f 	isb	sy
 801dc5c:	f3bf 8f4f 	dsb	sy
 801dc60:	e7fe      	b.n	801dc60 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801dc62:	4b2f      	ldr	r3, [pc, #188]	; (801dd20 <xPortStartScheduler+0xfc>)
 801dc64:	781a      	ldrb	r2, [r3, #0]
 801dc66:	b2d2      	uxtb	r2, r2
 801dc68:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801dc6a:	22ff      	movs	r2, #255	; 0xff
 801dc6c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801dc6e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801dc70:	4a2c      	ldr	r2, [pc, #176]	; (801dd24 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801dc72:	b2db      	uxtb	r3, r3
 801dc74:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801dc78:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801dc7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801dc80:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801dc82:	4a29      	ldr	r2, [pc, #164]	; (801dd28 <xPortStartScheduler+0x104>)
 801dc84:	2307      	movs	r3, #7
 801dc86:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801dc88:	2100      	movs	r1, #0
 801dc8a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801dc8e:	0600      	lsls	r0, r0, #24
 801dc90:	f103 34ff 	add.w	r4, r3, #4294967295
 801dc94:	d40c      	bmi.n	801dcb0 <xPortStartScheduler+0x8c>
 801dc96:	b111      	cbz	r1, 801dc9e <xPortStartScheduler+0x7a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801dc98:	2b03      	cmp	r3, #3
 801dc9a:	6013      	str	r3, [r2, #0]
 801dc9c:	d011      	beq.n	801dcc2 <xPortStartScheduler+0x9e>
 801dc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dca2:	f383 8811 	msr	BASEPRI, r3
 801dca6:	f3bf 8f6f 	isb	sy
 801dcaa:	f3bf 8f4f 	dsb	sy
 801dcae:	e7fe      	b.n	801dcae <xPortStartScheduler+0x8a>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801dcb0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801dcb4:	005b      	lsls	r3, r3, #1
 801dcb6:	b2db      	uxtb	r3, r3
 801dcb8:	f88d 3003 	strb.w	r3, [sp, #3]
 801dcbc:	2101      	movs	r1, #1
 801dcbe:	4623      	mov	r3, r4
 801dcc0:	e7e3      	b.n	801dc8a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801dcc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 801dcc6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801dcc8:	9b01      	ldr	r3, [sp, #4]
 801dcca:	4a15      	ldr	r2, [pc, #84]	; (801dd20 <xPortStartScheduler+0xfc>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801dccc:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801dcd0:	b2db      	uxtb	r3, r3
 801dcd2:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801dcd4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 801dcd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801dcdc:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801dce0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 801dce4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801dce8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 801dcec:	f7ff ff88 	bl	801dc00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801dcf0:	4b0e      	ldr	r3, [pc, #56]	; (801dd2c <xPortStartScheduler+0x108>)
 801dcf2:	2500      	movs	r5, #0
 801dcf4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801dcf6:	f7ff feb3 	bl	801da60 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801dcfa:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 801dcfe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801dd02:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 801dd06:	f7ff fe97 	bl	801da38 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801dd0a:	f7ff fb4b 	bl	801d3a4 <vTaskSwitchContext>
	prvTaskExitError();
 801dd0e:	f7ff feb1 	bl	801da74 <prvTaskExitError>
}
 801dd12:	4628      	mov	r0, r5
 801dd14:	b003      	add	sp, #12
 801dd16:	bd30      	pop	{r4, r5, pc}
 801dd18:	410fc271 	.word	0x410fc271
 801dd1c:	410fc270 	.word	0x410fc270
 801dd20:	e000e400 	.word	0xe000e400
 801dd24:	20007cf0 	.word	0x20007cf0
 801dd28:	20007cf4 	.word	0x20007cf4
 801dd2c:	20000054 	.word	0x20000054

0801dd30 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801dd30:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801dd34:	2b0f      	cmp	r3, #15
 801dd36:	d90e      	bls.n	801dd56 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801dd38:	4a11      	ldr	r2, [pc, #68]	; (801dd80 <vPortValidateInterruptPriority+0x50>)
 801dd3a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801dd3c:	4a11      	ldr	r2, [pc, #68]	; (801dd84 <vPortValidateInterruptPriority+0x54>)
 801dd3e:	7812      	ldrb	r2, [r2, #0]
 801dd40:	429a      	cmp	r2, r3
 801dd42:	d908      	bls.n	801dd56 <vPortValidateInterruptPriority+0x26>
 801dd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dd48:	f383 8811 	msr	BASEPRI, r3
 801dd4c:	f3bf 8f6f 	isb	sy
 801dd50:	f3bf 8f4f 	dsb	sy
 801dd54:	e7fe      	b.n	801dd54 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801dd56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801dd5a:	4a0b      	ldr	r2, [pc, #44]	; (801dd88 <vPortValidateInterruptPriority+0x58>)
 801dd5c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 801dd60:	6812      	ldr	r2, [r2, #0]
 801dd62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801dd66:	4293      	cmp	r3, r2
 801dd68:	d908      	bls.n	801dd7c <vPortValidateInterruptPriority+0x4c>
 801dd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dd6e:	f383 8811 	msr	BASEPRI, r3
 801dd72:	f3bf 8f6f 	isb	sy
 801dd76:	f3bf 8f4f 	dsb	sy
 801dd7a:	e7fe      	b.n	801dd7a <vPortValidateInterruptPriority+0x4a>
	}
 801dd7c:	4770      	bx	lr
 801dd7e:	bf00      	nop
 801dd80:	e000e3f0 	.word	0xe000e3f0
 801dd84:	20007cf0 	.word	0x20007cf0
 801dd88:	20007cf4 	.word	0x20007cf4

0801dd8c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801dd8c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801dd8e:	4b0f      	ldr	r3, [pc, #60]	; (801ddcc <prvInsertBlockIntoFreeList+0x40>)
 801dd90:	461a      	mov	r2, r3
 801dd92:	681b      	ldr	r3, [r3, #0]
 801dd94:	4283      	cmp	r3, r0
 801dd96:	d3fb      	bcc.n	801dd90 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801dd98:	6854      	ldr	r4, [r2, #4]
 801dd9a:	1911      	adds	r1, r2, r4
 801dd9c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801dd9e:	bf01      	itttt	eq
 801dda0:	6841      	ldreq	r1, [r0, #4]
 801dda2:	4610      	moveq	r0, r2
 801dda4:	1909      	addeq	r1, r1, r4
 801dda6:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801dda8:	6844      	ldr	r4, [r0, #4]
 801ddaa:	1901      	adds	r1, r0, r4
 801ddac:	428b      	cmp	r3, r1
 801ddae:	d107      	bne.n	801ddc0 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801ddb0:	4907      	ldr	r1, [pc, #28]	; (801ddd0 <prvInsertBlockIntoFreeList+0x44>)
 801ddb2:	6809      	ldr	r1, [r1, #0]
 801ddb4:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ddb6:	bf1f      	itttt	ne
 801ddb8:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801ddba:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ddbc:	1909      	addne	r1, r1, r4
 801ddbe:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ddc0:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ddc2:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801ddc4:	bf18      	it	ne
 801ddc6:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ddc8:	bd10      	pop	{r4, pc}
 801ddca:	bf00      	nop
 801ddcc:	200088c8 	.word	0x200088c8
 801ddd0:	20007cf8 	.word	0x20007cf8

0801ddd4 <pvPortMalloc>:
{
 801ddd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ddd8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801ddda:	f7ff f9a7 	bl	801d12c <vTaskSuspendAll>
		if( pxEnd == NULL )
 801ddde:	4842      	ldr	r0, [pc, #264]	; (801dee8 <pvPortMalloc+0x114>)
 801dde0:	4d42      	ldr	r5, [pc, #264]	; (801deec <pvPortMalloc+0x118>)
 801dde2:	6803      	ldr	r3, [r0, #0]
 801dde4:	bb0b      	cbnz	r3, 801de2a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 801dde6:	4942      	ldr	r1, [pc, #264]	; (801def0 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801dde8:	074e      	lsls	r6, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801ddea:	bf1f      	itttt	ne
 801ddec:	1dcb      	addne	r3, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ddee:	f023 0307 	bicne.w	r3, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801ddf2:	f601 32b8 	addwne	r2, r1, #3000	; 0xbb8
 801ddf6:	1ad2      	subne	r2, r2, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ddf8:	bf14      	ite	ne
 801ddfa:	4619      	movne	r1, r3
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801ddfc:	f640 32b8 	movweq	r2, #3000	; 0xbb8
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801de00:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801de02:	4e3c      	ldr	r6, [pc, #240]	; (801def4 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 801de04:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801de06:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 801de0a:	2300      	movs	r3, #0
 801de0c:	6073      	str	r3, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801de0e:	6031      	str	r1, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 801de10:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801de14:	1a53      	subs	r3, r2, r1
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801de16:	e9c1 2300 	strd	r2, r3, [r1]
	pxEnd = ( void * ) uxAddress;
 801de1a:	6002      	str	r2, [r0, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801de1c:	4a36      	ldr	r2, [pc, #216]	; (801def8 <pvPortMalloc+0x124>)
 801de1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801de20:	4a36      	ldr	r2, [pc, #216]	; (801defc <pvPortMalloc+0x128>)
 801de22:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801de24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801de28:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801de2a:	682f      	ldr	r7, [r5, #0]
 801de2c:	4227      	tst	r7, r4
 801de2e:	d155      	bne.n	801dedc <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 801de30:	2c00      	cmp	r4, #0
 801de32:	d046      	beq.n	801dec2 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 801de34:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801de38:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801de3a:	bf1c      	itt	ne
 801de3c:	f023 0307 	bicne.w	r3, r3, #7
 801de40:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801de42:	2b00      	cmp	r3, #0
 801de44:	d04a      	beq.n	801dedc <pvPortMalloc+0x108>
 801de46:	4c2d      	ldr	r4, [pc, #180]	; (801defc <pvPortMalloc+0x128>)
 801de48:	6826      	ldr	r6, [r4, #0]
 801de4a:	429e      	cmp	r6, r3
 801de4c:	d346      	bcc.n	801dedc <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 801de4e:	4a29      	ldr	r2, [pc, #164]	; (801def4 <pvPortMalloc+0x120>)
 801de50:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801de52:	6869      	ldr	r1, [r5, #4]
 801de54:	4299      	cmp	r1, r3
 801de56:	d204      	bcs.n	801de62 <pvPortMalloc+0x8e>
 801de58:	f8d5 c000 	ldr.w	ip, [r5]
 801de5c:	f1bc 0f00 	cmp.w	ip, #0
 801de60:	d115      	bne.n	801de8e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 801de62:	6800      	ldr	r0, [r0, #0]
 801de64:	42a8      	cmp	r0, r5
 801de66:	d039      	beq.n	801dedc <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801de68:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801de6a:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801de6c:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801de70:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801de72:	2910      	cmp	r1, #16
 801de74:	d912      	bls.n	801de9c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801de76:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801de78:	0742      	lsls	r2, r0, #29
 801de7a:	d00b      	beq.n	801de94 <pvPortMalloc+0xc0>
 801de7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801de80:	f383 8811 	msr	BASEPRI, r3
 801de84:	f3bf 8f6f 	isb	sy
 801de88:	f3bf 8f4f 	dsb	sy
 801de8c:	e7fe      	b.n	801de8c <pvPortMalloc+0xb8>
 801de8e:	462a      	mov	r2, r5
 801de90:	4665      	mov	r5, ip
 801de92:	e7de      	b.n	801de52 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801de94:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801de96:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801de98:	f7ff ff78 	bl	801dd8c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801de9c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801de9e:	4916      	ldr	r1, [pc, #88]	; (801def8 <pvPortMalloc+0x124>)
					xNumberOfSuccessfulAllocations++;
 801dea0:	4a17      	ldr	r2, [pc, #92]	; (801df00 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801dea2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801dea4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801dea6:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 801dea8:	2300      	movs	r3, #0
 801deaa:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 801deac:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801deae:	6026      	str	r6, [r4, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801deb0:	4286      	cmp	r6, r0
					xNumberOfSuccessfulAllocations++;
 801deb2:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801deb6:	bf38      	it	cc
 801deb8:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801deba:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801debe:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 801dec0:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 801dec2:	f7ff f9d7 	bl	801d274 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801dec6:	0763      	lsls	r3, r4, #29
 801dec8:	d00a      	beq.n	801dee0 <pvPortMalloc+0x10c>
 801deca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dece:	f383 8811 	msr	BASEPRI, r3
 801ded2:	f3bf 8f6f 	isb	sy
 801ded6:	f3bf 8f4f 	dsb	sy
 801deda:	e7fe      	b.n	801deda <pvPortMalloc+0x106>
void *pvReturn = NULL;
 801dedc:	2400      	movs	r4, #0
 801dede:	e7f0      	b.n	801dec2 <pvPortMalloc+0xee>
}
 801dee0:	4620      	mov	r0, r4
 801dee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dee6:	bf00      	nop
 801dee8:	20007cf8 	.word	0x20007cf8
 801deec:	200088b4 	.word	0x200088b4
 801def0:	20007cfc 	.word	0x20007cfc
 801def4:	200088c8 	.word	0x200088c8
 801def8:	200088bc 	.word	0x200088bc
 801defc:	200088b8 	.word	0x200088b8
 801df00:	200088c0 	.word	0x200088c0

0801df04 <vPortFree>:
{
 801df04:	b510      	push	{r4, lr}
	if( pv != NULL )
 801df06:	4604      	mov	r4, r0
 801df08:	b390      	cbz	r0, 801df70 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801df0a:	4a1a      	ldr	r2, [pc, #104]	; (801df74 <vPortFree+0x70>)
 801df0c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801df10:	6812      	ldr	r2, [r2, #0]
 801df12:	4213      	tst	r3, r2
 801df14:	d108      	bne.n	801df28 <vPortFree+0x24>
 801df16:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df1a:	f383 8811 	msr	BASEPRI, r3
 801df1e:	f3bf 8f6f 	isb	sy
 801df22:	f3bf 8f4f 	dsb	sy
 801df26:	e7fe      	b.n	801df26 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801df28:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801df2c:	b141      	cbz	r1, 801df40 <vPortFree+0x3c>
 801df2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df32:	f383 8811 	msr	BASEPRI, r3
 801df36:	f3bf 8f6f 	isb	sy
 801df3a:	f3bf 8f4f 	dsb	sy
 801df3e:	e7fe      	b.n	801df3e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801df40:	ea23 0302 	bic.w	r3, r3, r2
 801df44:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801df48:	f7ff f8f0 	bl	801d12c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801df4c:	4a0a      	ldr	r2, [pc, #40]	; (801df78 <vPortFree+0x74>)
 801df4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801df52:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801df54:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 801df58:	440b      	add	r3, r1
 801df5a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801df5c:	f7ff ff16 	bl	801dd8c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801df60:	4a06      	ldr	r2, [pc, #24]	; (801df7c <vPortFree+0x78>)
 801df62:	6813      	ldr	r3, [r2, #0]
}
 801df64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 801df68:	3301      	adds	r3, #1
 801df6a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801df6c:	f7ff b982 	b.w	801d274 <xTaskResumeAll>
}
 801df70:	bd10      	pop	{r4, pc}
 801df72:	bf00      	nop
 801df74:	200088b4 	.word	0x200088b4
 801df78:	200088b8 	.word	0x200088b8
 801df7c:	200088c4 	.word	0x200088c4

0801df80 <__libc_init_array>:
 801df80:	b570      	push	{r4, r5, r6, lr}
 801df82:	4d0d      	ldr	r5, [pc, #52]	; (801dfb8 <__libc_init_array+0x38>)
 801df84:	4c0d      	ldr	r4, [pc, #52]	; (801dfbc <__libc_init_array+0x3c>)
 801df86:	1b64      	subs	r4, r4, r5
 801df88:	10a4      	asrs	r4, r4, #2
 801df8a:	2600      	movs	r6, #0
 801df8c:	42a6      	cmp	r6, r4
 801df8e:	d109      	bne.n	801dfa4 <__libc_init_array+0x24>
 801df90:	4d0b      	ldr	r5, [pc, #44]	; (801dfc0 <__libc_init_array+0x40>)
 801df92:	4c0c      	ldr	r4, [pc, #48]	; (801dfc4 <__libc_init_array+0x44>)
 801df94:	f000 f914 	bl	801e1c0 <_init>
 801df98:	1b64      	subs	r4, r4, r5
 801df9a:	10a4      	asrs	r4, r4, #2
 801df9c:	2600      	movs	r6, #0
 801df9e:	42a6      	cmp	r6, r4
 801dfa0:	d105      	bne.n	801dfae <__libc_init_array+0x2e>
 801dfa2:	bd70      	pop	{r4, r5, r6, pc}
 801dfa4:	f855 3b04 	ldr.w	r3, [r5], #4
 801dfa8:	4798      	blx	r3
 801dfaa:	3601      	adds	r6, #1
 801dfac:	e7ee      	b.n	801df8c <__libc_init_array+0xc>
 801dfae:	f855 3b04 	ldr.w	r3, [r5], #4
 801dfb2:	4798      	blx	r3
 801dfb4:	3601      	adds	r6, #1
 801dfb6:	e7f2      	b.n	801df9e <__libc_init_array+0x1e>
 801dfb8:	080206a8 	.word	0x080206a8
 801dfbc:	080206a8 	.word	0x080206a8
 801dfc0:	080206a8 	.word	0x080206a8
 801dfc4:	080206ac 	.word	0x080206ac

0801dfc8 <__retarget_lock_acquire_recursive>:
 801dfc8:	4770      	bx	lr

0801dfca <__retarget_lock_release_recursive>:
 801dfca:	4770      	bx	lr

0801dfcc <memcpy>:
 801dfcc:	440a      	add	r2, r1
 801dfce:	4291      	cmp	r1, r2
 801dfd0:	f100 33ff 	add.w	r3, r0, #4294967295
 801dfd4:	d100      	bne.n	801dfd8 <memcpy+0xc>
 801dfd6:	4770      	bx	lr
 801dfd8:	b510      	push	{r4, lr}
 801dfda:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dfde:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dfe2:	4291      	cmp	r1, r2
 801dfe4:	d1f9      	bne.n	801dfda <memcpy+0xe>
 801dfe6:	bd10      	pop	{r4, pc}

0801dfe8 <memmove>:
 801dfe8:	4288      	cmp	r0, r1
 801dfea:	b510      	push	{r4, lr}
 801dfec:	eb01 0402 	add.w	r4, r1, r2
 801dff0:	d902      	bls.n	801dff8 <memmove+0x10>
 801dff2:	4284      	cmp	r4, r0
 801dff4:	4623      	mov	r3, r4
 801dff6:	d807      	bhi.n	801e008 <memmove+0x20>
 801dff8:	1e43      	subs	r3, r0, #1
 801dffa:	42a1      	cmp	r1, r4
 801dffc:	d008      	beq.n	801e010 <memmove+0x28>
 801dffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e002:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e006:	e7f8      	b.n	801dffa <memmove+0x12>
 801e008:	4402      	add	r2, r0
 801e00a:	4601      	mov	r1, r0
 801e00c:	428a      	cmp	r2, r1
 801e00e:	d100      	bne.n	801e012 <memmove+0x2a>
 801e010:	bd10      	pop	{r4, pc}
 801e012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e01a:	e7f7      	b.n	801e00c <memmove+0x24>

0801e01c <memset>:
 801e01c:	4402      	add	r2, r0
 801e01e:	4603      	mov	r3, r0
 801e020:	4293      	cmp	r3, r2
 801e022:	d100      	bne.n	801e026 <memset+0xa>
 801e024:	4770      	bx	lr
 801e026:	f803 1b01 	strb.w	r1, [r3], #1
 801e02a:	e7f9      	b.n	801e020 <memset+0x4>

0801e02c <cleanup_glue>:
 801e02c:	b538      	push	{r3, r4, r5, lr}
 801e02e:	460c      	mov	r4, r1
 801e030:	6809      	ldr	r1, [r1, #0]
 801e032:	4605      	mov	r5, r0
 801e034:	b109      	cbz	r1, 801e03a <cleanup_glue+0xe>
 801e036:	f7ff fff9 	bl	801e02c <cleanup_glue>
 801e03a:	4621      	mov	r1, r4
 801e03c:	4628      	mov	r0, r5
 801e03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e042:	f000 b871 	b.w	801e128 <_free_r>
	...

0801e048 <_reclaim_reent>:
 801e048:	4b2c      	ldr	r3, [pc, #176]	; (801e0fc <_reclaim_reent+0xb4>)
 801e04a:	681b      	ldr	r3, [r3, #0]
 801e04c:	4283      	cmp	r3, r0
 801e04e:	b570      	push	{r4, r5, r6, lr}
 801e050:	4604      	mov	r4, r0
 801e052:	d051      	beq.n	801e0f8 <_reclaim_reent+0xb0>
 801e054:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801e056:	b143      	cbz	r3, 801e06a <_reclaim_reent+0x22>
 801e058:	68db      	ldr	r3, [r3, #12]
 801e05a:	2b00      	cmp	r3, #0
 801e05c:	d14a      	bne.n	801e0f4 <_reclaim_reent+0xac>
 801e05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e060:	6819      	ldr	r1, [r3, #0]
 801e062:	b111      	cbz	r1, 801e06a <_reclaim_reent+0x22>
 801e064:	4620      	mov	r0, r4
 801e066:	f000 f85f 	bl	801e128 <_free_r>
 801e06a:	6961      	ldr	r1, [r4, #20]
 801e06c:	b111      	cbz	r1, 801e074 <_reclaim_reent+0x2c>
 801e06e:	4620      	mov	r0, r4
 801e070:	f000 f85a 	bl	801e128 <_free_r>
 801e074:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e076:	b111      	cbz	r1, 801e07e <_reclaim_reent+0x36>
 801e078:	4620      	mov	r0, r4
 801e07a:	f000 f855 	bl	801e128 <_free_r>
 801e07e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e080:	b111      	cbz	r1, 801e088 <_reclaim_reent+0x40>
 801e082:	4620      	mov	r0, r4
 801e084:	f000 f850 	bl	801e128 <_free_r>
 801e088:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801e08a:	b111      	cbz	r1, 801e092 <_reclaim_reent+0x4a>
 801e08c:	4620      	mov	r0, r4
 801e08e:	f000 f84b 	bl	801e128 <_free_r>
 801e092:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e094:	b111      	cbz	r1, 801e09c <_reclaim_reent+0x54>
 801e096:	4620      	mov	r0, r4
 801e098:	f000 f846 	bl	801e128 <_free_r>
 801e09c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801e09e:	b111      	cbz	r1, 801e0a6 <_reclaim_reent+0x5e>
 801e0a0:	4620      	mov	r0, r4
 801e0a2:	f000 f841 	bl	801e128 <_free_r>
 801e0a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801e0a8:	b111      	cbz	r1, 801e0b0 <_reclaim_reent+0x68>
 801e0aa:	4620      	mov	r0, r4
 801e0ac:	f000 f83c 	bl	801e128 <_free_r>
 801e0b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e0b2:	b111      	cbz	r1, 801e0ba <_reclaim_reent+0x72>
 801e0b4:	4620      	mov	r0, r4
 801e0b6:	f000 f837 	bl	801e128 <_free_r>
 801e0ba:	69a3      	ldr	r3, [r4, #24]
 801e0bc:	b1e3      	cbz	r3, 801e0f8 <_reclaim_reent+0xb0>
 801e0be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e0c0:	4620      	mov	r0, r4
 801e0c2:	4798      	blx	r3
 801e0c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801e0c6:	b1b9      	cbz	r1, 801e0f8 <_reclaim_reent+0xb0>
 801e0c8:	4620      	mov	r0, r4
 801e0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e0ce:	f7ff bfad 	b.w	801e02c <cleanup_glue>
 801e0d2:	5949      	ldr	r1, [r1, r5]
 801e0d4:	b941      	cbnz	r1, 801e0e8 <_reclaim_reent+0xa0>
 801e0d6:	3504      	adds	r5, #4
 801e0d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e0da:	2d80      	cmp	r5, #128	; 0x80
 801e0dc:	68d9      	ldr	r1, [r3, #12]
 801e0de:	d1f8      	bne.n	801e0d2 <_reclaim_reent+0x8a>
 801e0e0:	4620      	mov	r0, r4
 801e0e2:	f000 f821 	bl	801e128 <_free_r>
 801e0e6:	e7ba      	b.n	801e05e <_reclaim_reent+0x16>
 801e0e8:	680e      	ldr	r6, [r1, #0]
 801e0ea:	4620      	mov	r0, r4
 801e0ec:	f000 f81c 	bl	801e128 <_free_r>
 801e0f0:	4631      	mov	r1, r6
 801e0f2:	e7ef      	b.n	801e0d4 <_reclaim_reent+0x8c>
 801e0f4:	2500      	movs	r5, #0
 801e0f6:	e7ef      	b.n	801e0d8 <_reclaim_reent+0x90>
 801e0f8:	bd70      	pop	{r4, r5, r6, pc}
 801e0fa:	bf00      	nop
 801e0fc:	20000058 	.word	0x20000058

0801e100 <strcpy>:
 801e100:	4603      	mov	r3, r0
 801e102:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e106:	f803 2b01 	strb.w	r2, [r3], #1
 801e10a:	2a00      	cmp	r2, #0
 801e10c:	d1f9      	bne.n	801e102 <strcpy+0x2>
 801e10e:	4770      	bx	lr

0801e110 <__malloc_lock>:
 801e110:	4801      	ldr	r0, [pc, #4]	; (801e118 <__malloc_lock+0x8>)
 801e112:	f7ff bf59 	b.w	801dfc8 <__retarget_lock_acquire_recursive>
 801e116:	bf00      	nop
 801e118:	200088d0 	.word	0x200088d0

0801e11c <__malloc_unlock>:
 801e11c:	4801      	ldr	r0, [pc, #4]	; (801e124 <__malloc_unlock+0x8>)
 801e11e:	f7ff bf54 	b.w	801dfca <__retarget_lock_release_recursive>
 801e122:	bf00      	nop
 801e124:	200088d0 	.word	0x200088d0

0801e128 <_free_r>:
 801e128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e12a:	2900      	cmp	r1, #0
 801e12c:	d044      	beq.n	801e1b8 <_free_r+0x90>
 801e12e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e132:	9001      	str	r0, [sp, #4]
 801e134:	2b00      	cmp	r3, #0
 801e136:	f1a1 0404 	sub.w	r4, r1, #4
 801e13a:	bfb8      	it	lt
 801e13c:	18e4      	addlt	r4, r4, r3
 801e13e:	f7ff ffe7 	bl	801e110 <__malloc_lock>
 801e142:	4a1e      	ldr	r2, [pc, #120]	; (801e1bc <_free_r+0x94>)
 801e144:	9801      	ldr	r0, [sp, #4]
 801e146:	6813      	ldr	r3, [r2, #0]
 801e148:	b933      	cbnz	r3, 801e158 <_free_r+0x30>
 801e14a:	6063      	str	r3, [r4, #4]
 801e14c:	6014      	str	r4, [r2, #0]
 801e14e:	b003      	add	sp, #12
 801e150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e154:	f7ff bfe2 	b.w	801e11c <__malloc_unlock>
 801e158:	42a3      	cmp	r3, r4
 801e15a:	d908      	bls.n	801e16e <_free_r+0x46>
 801e15c:	6825      	ldr	r5, [r4, #0]
 801e15e:	1961      	adds	r1, r4, r5
 801e160:	428b      	cmp	r3, r1
 801e162:	bf01      	itttt	eq
 801e164:	6819      	ldreq	r1, [r3, #0]
 801e166:	685b      	ldreq	r3, [r3, #4]
 801e168:	1949      	addeq	r1, r1, r5
 801e16a:	6021      	streq	r1, [r4, #0]
 801e16c:	e7ed      	b.n	801e14a <_free_r+0x22>
 801e16e:	461a      	mov	r2, r3
 801e170:	685b      	ldr	r3, [r3, #4]
 801e172:	b10b      	cbz	r3, 801e178 <_free_r+0x50>
 801e174:	42a3      	cmp	r3, r4
 801e176:	d9fa      	bls.n	801e16e <_free_r+0x46>
 801e178:	6811      	ldr	r1, [r2, #0]
 801e17a:	1855      	adds	r5, r2, r1
 801e17c:	42a5      	cmp	r5, r4
 801e17e:	d10b      	bne.n	801e198 <_free_r+0x70>
 801e180:	6824      	ldr	r4, [r4, #0]
 801e182:	4421      	add	r1, r4
 801e184:	1854      	adds	r4, r2, r1
 801e186:	42a3      	cmp	r3, r4
 801e188:	6011      	str	r1, [r2, #0]
 801e18a:	d1e0      	bne.n	801e14e <_free_r+0x26>
 801e18c:	681c      	ldr	r4, [r3, #0]
 801e18e:	685b      	ldr	r3, [r3, #4]
 801e190:	6053      	str	r3, [r2, #4]
 801e192:	4421      	add	r1, r4
 801e194:	6011      	str	r1, [r2, #0]
 801e196:	e7da      	b.n	801e14e <_free_r+0x26>
 801e198:	d902      	bls.n	801e1a0 <_free_r+0x78>
 801e19a:	230c      	movs	r3, #12
 801e19c:	6003      	str	r3, [r0, #0]
 801e19e:	e7d6      	b.n	801e14e <_free_r+0x26>
 801e1a0:	6825      	ldr	r5, [r4, #0]
 801e1a2:	1961      	adds	r1, r4, r5
 801e1a4:	428b      	cmp	r3, r1
 801e1a6:	bf04      	itt	eq
 801e1a8:	6819      	ldreq	r1, [r3, #0]
 801e1aa:	685b      	ldreq	r3, [r3, #4]
 801e1ac:	6063      	str	r3, [r4, #4]
 801e1ae:	bf04      	itt	eq
 801e1b0:	1949      	addeq	r1, r1, r5
 801e1b2:	6021      	streq	r1, [r4, #0]
 801e1b4:	6054      	str	r4, [r2, #4]
 801e1b6:	e7ca      	b.n	801e14e <_free_r+0x26>
 801e1b8:	b003      	add	sp, #12
 801e1ba:	bd30      	pop	{r4, r5, pc}
 801e1bc:	200088d4 	.word	0x200088d4

0801e1c0 <_init>:
 801e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1c2:	bf00      	nop
 801e1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e1c6:	bc08      	pop	{r3}
 801e1c8:	469e      	mov	lr, r3
 801e1ca:	4770      	bx	lr

0801e1cc <_fini>:
 801e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1ce:	bf00      	nop
 801e1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e1d2:	bc08      	pop	{r3}
 801e1d4:	469e      	mov	lr, r3
 801e1d6:	4770      	bx	lr
